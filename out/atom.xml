<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-12T19:07:10.391135+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45553132</id><title>Ask HN: Abandoned/dead projects you think died before their time and why?</title><updated>2025-10-12T19:12:04.041066+00:00</updated><content>&lt;doc fingerprint="36b899551ba72dd9"&gt;
  &lt;main&gt;
    &lt;p&gt;It's the closest thing to a Unix successor we ever got, taking the "everything is a file" philosophy to another level and allowing to easily share those files over the network to build distributed systems. Accessing any remote resources is easy and robust on Plan9, meanwhile on other systems we need to install specialized software with bad interoperability for each individual use case.&lt;/p&gt;
    &lt;p&gt;Plan9 also had some innovative UI features, such as mouse chording to edit text, nested window managers, the Plumber to run user-configurable commands on known text patterns system-wide, etc.&lt;/p&gt;
    &lt;p&gt;Its distributed nature should have meant it's perfect for today's world with mobile, desktop, cloud, and IoT devices all connected to each other. Instead, we're stuck with operating systems that were never designed for that.&lt;/p&gt;
    &lt;p&gt;There are still active forks of Plan9 such as 9front, but the original from Bell Labs is dead. The reasons it died are likely:&lt;/p&gt;
    &lt;p&gt;- Legal challenges (Plan9 license, pointless lawsuits, etc.) meant it wssn't adopted by major players in the industry.&lt;/p&gt;
    &lt;p&gt;- Plan9 was a distributed OS during a time when having a local computer became popular and affordable, while using a terminal to access a centrally managed computer fell out of fashion (though the latter sort of came back in a worse fashion with cloud computing).&lt;/p&gt;
    &lt;p&gt;- Bad marketing and posing itself as merely a research OS meant they couldn't capitalize on the .com boom.&lt;/p&gt;
    &lt;p&gt;- AT&amp;amp;T lost its near endless source of telephone revenue. Bell Labs was sold multiple times over the coming years, a lot of the Unix/Plan9 guys went to other companies like Google.&lt;/p&gt;
    &lt;p&gt;The reason Plan 9 died a swift death was that, unlike Unix – which hardware manufacturers could license for a song and adapt to their own hardware (and be guaranteed compatibility with lots of Unix software) – Bell Labs tried to sell Plan 9, as commercial software, for $350 a box.&lt;/p&gt;
    &lt;p&gt;Version 1 was never licensed to anyone. Version 2 was only licensed to universities for an undiscolsed price. Version 3 was sold as a book, I think this is the version you are referring to. However note that this version contained a license that only allowed non commercial uses of the source code. It also came with no support, no community and no planned updates (the project was shelved half a year later in favor of inferno)&lt;/p&gt;
    &lt;p&gt;More than the price tag the problem is that plan 9 wasn't really released until 2004.&lt;/p&gt;
    &lt;p&gt;Probably that not everything can be cleanly abstracted as a file.&lt;/p&gt;
    &lt;p&gt;One might want to, e. G., have fine control over a how a network connection is handled. You can abstract that as a file but it becomes increasingly complicated and can make API design painful.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Probably that not everything can be cleanly abstracted as a file.&lt;/p&gt;
    &lt;p&gt;I would say almost nothing can be cleanly abstracted as a file. That’s why we got ioctl (https://en.wikipedia.org/wiki/Ioctl), which is a bad API (calls mean “do something with this file descriptor” with only conventions introducing some consistency)&lt;/p&gt;
    &lt;p&gt;They have to an extent. The /proc file system on Linux is directly inspired by plan 9 IIRC. Other things like network sockets never got that far and are more related to their BSD kin.&lt;/p&gt;
    &lt;p&gt;Probably the fact that it's a pretty terrible idea. It means you take a normal properly typed API and smush it down into some poorly specified text format that you now have to write probably-broken parsers for. I often find bugs in programs that interact with `/proc` on Linux because they don't expect some output (e.g. spaces in paths, or optional entries).&lt;/p&gt;
    &lt;p&gt;The only reasons people think it's a good idea in the first place is a) every programming language can read files so it sort of gives you an API that works with any language (but a really bad one), and b) it's easy to poke around in from the command line.&lt;/p&gt;
    &lt;p&gt;Essentially it's a hacky cop-out for a proper language-neutral API system. In fairness it's not like Linux actually came up with a better alternative. I think the closest is probably DBus which isn't exactly the same.&lt;/p&gt;
    &lt;p&gt;- Photon, the graphical interface for QNX. Oriented more towards real time (widgets included gauges) but good enough to support two different web browsers. No delays. This was a real time operating system.&lt;/p&gt;
    &lt;p&gt;- MacOS 8. Not the Linux thing, but Copeland. This was a modernized version of the original MacOS, continuing the tradition of no command line. Not having a command line forces everyone to get their act together about how to install and configure things. Probably would have eased the tradition to mobile. A version was actually shipped to developers, but it had to be covered up to justify the bailout of Next by Apple to get Steve Jobs.&lt;/p&gt;
    &lt;p&gt;- Transaction processing operating systems. The first one was IBM's Customer Information Control System. A transaction processor is a kind of OS where everything is like a CGI program - load program, do something, exit program. Unix and Linux are, underneath, terminal oriented time sharing systems.&lt;/p&gt;
    &lt;p&gt;- IBM MicroChannel. Early minicomputer and microcomputer designers thought "bus", where peripherals can talk to memory and peripherals look like memory to the CPU. Mainframes, though, had "channels", simple processors which connected peripherals to the CPU. Channels could run simple channel programs, and managed device access to memory. IBM tried to introduce that with the PS2, but they made it proprietary and that failed in the marketplace. Today, everything has something like channels, but they're not a unified interface concept that simplifies the OS.&lt;/p&gt;
    &lt;p&gt;- CPUs that really hypervise properly. That is, virtual execution environments look just like real ones. IBM did that in VM, and it worked well because channels are a good abstraction for both a real machine and a VM. Storing into device registers to make things happen is not. x86 has added several layers below the "real machine" layer, and they're all hacks.&lt;/p&gt;
    &lt;p&gt;- The Motorola 680x0 series. Should have been the foundation of the microcomputer era, but it took way too long to get the MMU out the door. The original 68000 came out in 1978, but then Motorola fell behind.&lt;/p&gt;
    &lt;p&gt;- Modula. Modula 2 and 3 were reasonably good languages. Oberon was a flop. DEC was into Modula, but Modula went down with DEC.&lt;/p&gt;
    &lt;p&gt;- XHTML. Have you ever read the parsing rules for HTML 5, where the semantics for bad HTML were formalized? Browsers should just punt at the first error, display an error message, and render the rest of the page in Times Roman. Would it kill people to have to close their tags properly?&lt;/p&gt;
    &lt;p&gt;- Word Lens. Look at the world through your phone, and text is translated, standalone, on the device. No Internet connection required. Killed by Google in favor of hosted Google Translate.&lt;/p&gt;
    &lt;p&gt;&amp;gt; MacOS 8. Not the Linux thing, but Copeland. This was a modernized version of the original MacOS, continuing the tradition of no command line. Not having a command line forces everyone to get their act together about how to install and configure things. Probably would have eased the tradition to mobile. A version was actually shipped to developers, but it had to be covered up to justify the bailout of Next by Apple to get Steve Jobs.&lt;/p&gt;
    &lt;p&gt;You have things backwards. The Copland project was horribly mismanaged. Anybody at Apple who came up with a new technology got it included in Copland, with no regard to feature creep or stability. There's a leaked build floating around from shortly before the project was cancelled. It's extremely unstable and even using basic desktop functionality causes hangs and crashes. In mid-late 1996, it became clear that Copland would never ship, and Apple decided the best course of action was to license an outside OS. They considered options such as Solaris, Windows NT, and BeOS, but of course ended up buying NeXT. Copland wasn't killed to justify buying NeXT, Apple bought NeXT because Copland was unshippable.&lt;/p&gt;
    &lt;p&gt;I was all gung ho on XHTML back in the day until I realized that a single unclosed tag in an ad or another portion of our app that I had no control over would cause the entire page to fail. The user would see nothing except a giant ugly error. And your solution of rendering the rest of the page in Times New Roman isn’t an option. Do you try to maintain any of the HTML semantics or just render plain text? If it’s plain text, that’s useless. If you’re rendering anything with any semantics, then you need to know how to parse it. You’re back where you started.&lt;/p&gt;
    &lt;p&gt;Granted, I could ensure that my code was valid XHTML, but I’m a hypermeticulous autistic weirdo, and most other people aren’t. As much as XHTML “made sense”, it was completely unworkable in reality, because most people are slobs. Sometimes, worse really is better.&lt;/p&gt;
    &lt;p&gt;if the world was all XHTML, then you wouldn't put an ad on your site that wasn't valid XHTML, the same way you wouldn't import a python library that's not valid python.&lt;/p&gt;
    &lt;p&gt;&amp;gt;, then you wouldn't put an ad on your site that wasn't valid XHTML,&lt;/p&gt;
    &lt;p&gt;You're overlooking how incentives and motivations work. The gp (and their employer) wants to integrate the advertisement snippet -- even with broken XHTML -- because they receive money for it.&lt;/p&gt;
    &lt;p&gt;The semantic data ("advertiser's message") is more important than the format ("purity of perfect XHTML").&lt;/p&gt;
    &lt;p&gt;If there was a hypothetical browser that refused to load that Monster.com webpage full of errors because it's for the users' own good and the "good of the ecosystem"... the websurfers would perceive that web browser as user-hostile and would choose another browser that would be forgiving of those errors and just load the page. Job hunters care more about the raw data of the actual job listings so they can get a paycheck rather than invalid &amp;lt;style&amp;gt; tags nested inside &amp;lt;div&amp;gt; tags.&lt;/p&gt;
    &lt;p&gt;Those situations above are a different category (semantic_content-overrides-fileformatsyntax) than a developer trying to import a Python library with invalid syntax (fileformatsyntax-Is-The-Semantic_Content).&lt;/p&gt;
    &lt;p&gt;EDIT reply to: &amp;gt;Make the advertisement block an iframe [...] If the advertiser delivers invalid XHTML code, only the advertisement won't render.&lt;/p&gt;
    &lt;p&gt;You're proposing a "technical solution" to avoid errors instead of a "business solution" to achieve a desired monetary objective. To re-iterate, they want to render the invalid XHTML code so your idea to just not render it is the opposite of the goal.&lt;/p&gt;
    &lt;p&gt;In other words, if rendering imperfect-HTML helps the business goal more than blanking out invalid XHTML in an iframe, that means HTML "wins" in the marketplace of ideas.&lt;/p&gt;
    &lt;p&gt;If xhtml really took off, there would just be server side linting/html tidy. Its not that hard a problem to solve. Lots of websites already do this for user generated html, because even if an unclosed div doesnt take down the whole thing its still ugly.&lt;/p&gt;
    &lt;p&gt;The real problem is the benefits of xhtml are largely imaginary so there isn't really a motivation to do that work.&lt;/p&gt;
    &lt;p&gt;&amp;gt; You're overlooking how incentives and motivations work. The gp (and their employer) wants to integrate the advertisement snippet -- even with broken XHTML -- because they receive money for it.&lt;/p&gt;
    &lt;p&gt;Make the advertisement block an iframe with the src attribute set to the advertiser's URL. If the advertiser delivers invalid XHTML code, only the advertisement won't render.&lt;/p&gt;
    &lt;p&gt;Yes, you would be able to put an ad on your site that wasn't XHTML, because XHTML is just text parsed in the browser at runtime. And yes, that would fail, silently, or with a cryptic error&lt;/p&gt;
    &lt;p&gt;&amp;gt;- XHTML. [...] Would it kill people to have to close their tags properly?&lt;/p&gt;
    &lt;p&gt;XHTML appeals to the intuition that there should be a Strict Right Way To Do Things ... but you can't use that unforgiving framework for web documents that are widely shared.&lt;/p&gt;
    &lt;p&gt;The "real world" has 2 types of file formats:&lt;/p&gt;
    &lt;p&gt;(1) file types where consumers cannot contact/control/punish the authors (open-loop) : HTML, pdf, zip, csv, etc. The common theme is that the data itself is more important that the file format. That's why Adobe Reader will read malformed pdf files written by buggy PDF libraries. And both 7-Zip and Winrar can read malformed zip files with broken headers (because some old buggy Java libraries wrote bad zip files). MS Excel can import malformed csv files. E.g. the Citi bank export to csv wrote a malformed file and it was desirable that MS Excel imported it anyway because the raw data of dollar amounts was more important than the incorrect commas in the csv file -- and -- I have no way of contacting the programmer at Citi to tell them to fix their buggy code that created the bad csv file.&lt;/p&gt;
    &lt;p&gt;(2) file types where the consumer can control the author (closed-loop): programming language source code like .c, .java, etc or business interchange documents like EDI. There's no need to have a "lenient forgiving" gcc/clang compiler to parse ".c" source code because the "consumer-and-author" will be the same person. I.e. the developer sees the compiler stop at a syntax error so they edit and fix it and try to re-compile. For business interchange formats like EDI, a company like Walmart can tell the vendor to fix their broken EDI files.&lt;/p&gt;
    &lt;p&gt;XHTML wants to be in group (2) but web surfers can't control all the authors of .html so that's why lenient parsing of HTML "wins". XHTML would work better in a "closed-loop" environment such as a company writing internal documentation for its employees. E.g. an employee handbook can be written in strict XHTML because both the consumers and authors work at the same company. E.g. can't see the vacation policy because the XHTML syntax is wrong?!? Get on the Slack channel and tell the programmer or content author to fix it.&lt;/p&gt;
    &lt;p&gt;The problem is that group (1) results in a nightmarish race-to-the-bottom. File creators have zero incentive to create spec-compliant files, because there's no penalty for creating corrupted files. In practice this means a large proportion of documents are going to end up corrupt. Does it open in Chrome? Great, ship it! The file format is no longer the specification, but it has now become a wild guess at whatever weird garbage the incumbent is still willing to accept. This makes it virtually impossible to write a new parser, because the file format suddenly has no specification.&lt;/p&gt;
    &lt;p&gt;On the other hand, imagine a world where Chrome would slowly start to phase out its quirks modes. Something like a yellow address bar and a "Chrome cannot guarantee the safety of your data on this website, as the website is malformed" warning message. Turn it into a red bar and a "click to continue" after 10 years, remove it altogether after 20 years. Suddenly it's no longer that one weird customer who is complaining, but everyone - including your manager. Your mistakes are painfully obvious during development, so you have a pretty good incentive to properly follow the spec. You make a mistake on a prominent page and the CTO sees it? Well, guess you'll be adding an XHTML validator to your CI pipeline next week!&lt;/p&gt;
    &lt;p&gt;It is very tempting to write a lenient parser when you are just one small fish in a big ecosystem, but over time it will inevitably lead to the degradation of that very ecosystem. You need some kind of standards body to publish a validating reference parser. And like it or not, Chrome is big enough that it can act as one for HTML.&lt;/p&gt;
    &lt;p&gt;&amp;gt;File creators have zero incentive to create spec-compliant files, because there's no penalty for creating corrupted files&lt;/p&gt;
    &lt;p&gt;This depends. If you are a small creator with a unique corruption then you're likely out of luck. The problem with big creators is 'fuck you' I do what I want.&lt;/p&gt;
    &lt;p&gt;&amp;gt;"Chrome cannot guarantee the safety of your data on this website, as the website is malformed" warning message.&lt;/p&gt;
    &lt;p&gt;This would appear on pretty much every website. And it would appear on websites that are no longer updated and they'd functionally disappear from any updated browser. In addition the 10-20 year thing just won't work in US companies, simply put if they get too much pressure next quarter on it, it's gone.&lt;/p&gt;
    &lt;p&gt;&amp;gt;Your mistakes are painfully obvious during development,&lt;/p&gt;
    &lt;p&gt;Except this isn't how a huge number of websites work. They get html from many sources and possibly libraries. Simply put no one is going to follow your insanity, hence why xhtml never worked in the first place. They'll drop Chrome before they drop the massive amount of existing and potential bugs out there.&lt;/p&gt;
    &lt;p&gt;&amp;gt;And like it or not, Chrome is big enough that it can act as one for HTML.&lt;/p&gt;
    &lt;p&gt;And hopefully in a few years between the EU and US someone will bust parts of them up.&lt;/p&gt;
    &lt;p&gt;That would break decades of the web with no incentive for Google to do so. Plus, any change of that scale that they make is going to draw antitrust consideration from _somebody_.&lt;/p&gt;
    &lt;p&gt;You’re right, but even standards bodies aren’t enough. At the end of the day, it’s always about what the dominant market leader will accept. The standard just gives your bitching about the corrupted files some abstract moral authority, but that’s about it.&lt;/p&gt;
    &lt;p&gt;I’d argue a good comparison here is HTTPS. Everyone decided it would be good for sites to move over to serving via HTTPS so browsers incentivised people to move by gating newer features to HTTPS only. They could have easily done the same with XHTML had they wanted.&lt;/p&gt;
    &lt;p&gt;The opportunities to fix this were pretty abundant. For instance, it would take exactly five words from Google to magically make a vast proportion of web pages valid XHTML:&lt;/p&gt;
    &lt;p&gt;&amp;gt; That's why Adobe Reader will read malformed pdf files written by buggy PDF libraries.&lt;/p&gt;
    &lt;p&gt;No, the reason is that Adobe’s implementation never bothered to perform much validation, and then couldn’t add strict validation retroactively because it would break too many existing documents.&lt;/p&gt;
    &lt;p&gt;This is an argument for a repair function that transforms a broken document into a well-formed one without loss but keeps the spec small, simple and consistent. It's not an argument for baking malformations into a complex messy spec.&lt;/p&gt;
    &lt;p&gt;&amp;gt; - XHTML. Have you ever read the parsing rules for HTML 5, where the semantics for bad HTML were formalized? Browsers should just punt at the first error, display an error message, and render the rest of the page in Times Roman. Would it kill people to have to close their tags properly?&lt;/p&gt;
    &lt;p&gt;We stop at the first sign of trouble for almost every other format, we do not need lax parsing for HTML. This has caused a multitude of security vulnerabilities and only makes it more difficult for pretty much everybody.&lt;/p&gt;
    &lt;p&gt;The attitude towards HTML5 parsing seemed to grow out of this weird contrarianism that everybody who wanted to do better than whatever Internet Explorer did had their head in the clouds and that the role of a standard was just to write down all the bugs.&lt;/p&gt;
    &lt;p&gt;Just to remind you that &amp;lt;bold&amp;gt; &amp;lt;italic&amp;gt; text &amp;lt;/bold&amp;gt; &amp;lt;/italic&amp;gt; [0] that has been working for ages in every browser ever, is NOT a valid XHTML, and should be rejected by GP's proposal.&lt;/p&gt;
    &lt;p&gt;I, for one, is kinda happy that XHTML is dead.&lt;/p&gt;
    &lt;p&gt;[0]: By &amp;lt;bold&amp;gt; I mean &amp;lt;b&amp;gt; and by &amp;lt;italic&amp;gt; I mean &amp;lt;i&amp;gt;, and the reason it's not valid HTML is that the order of closing is not reverse of the order of opening as it should properly be.&lt;/p&gt;
    &lt;p&gt;That caused plenty of incompatibilities in the past. At one point, Internet Explorer would parse that and end up with something that wasn’t even a tree.&lt;/p&gt;
    &lt;p&gt;HTML is not a set of instructions that you follow. It’s a terrible format if you treat it that way.&lt;/p&gt;
    &lt;p&gt;XHTML allows you to use XML and &amp;lt;bold&amp;gt; &amp;lt;italic&amp;gt; are just XML nodes with no schema. The correct form has been and will always be &amp;lt;b&amp;gt; and &amp;lt;i&amp;gt;. Since the beginning.&lt;/p&gt;
    &lt;p&gt;Ooooo… now we’re talking. Sloppy HTML that closes a tag out of order or just declared out of order? Or rendering bugs when bold is before italic? It’s why XHTML should have been standard. Just dump, error out, make the developer fix it.&lt;/p&gt;
    &lt;p&gt;BeOS. I like to daydream about an alternate reality where it was acquired by Sony, and used as the foundation for PlayStation, Sony smartphones, and eventually a viable alternative to Windows on their Vaio line.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Imagine a crossroads where four competing auto dealerships are situated… (Apple) sold motorized vehicles--expensive but attractively styled cars with their innards hermetically sealed, so that how they worked was something of a mystery.&lt;/p&gt;
    &lt;p&gt;&amp;gt; (Microsoft) is much, much bigger… the big dealership came out with a full-fledged car: a colossal station wagon (Windows 95). It had all the aesthetic appeal of a Soviet worker housing block, it leaked oil and blew gaskets, and it was an enormous success.&lt;/p&gt;
    &lt;p&gt;&amp;gt; On the other side of the road… (Be, Inc.) is selling fully operational Batmobiles (the BeOS). They are more beautiful and stylish even than the Euro-sedans, better designed, more technologically advanced, and at least as reliable as anything else on the market--and yet cheaper than the others.&lt;/p&gt;
    &lt;p&gt;&amp;gt; … and Linux, which is right next door, and which is not a business at all. It's a bunch of RVs, yurts, tepees, and geodesic domes set up in a field and organized by consensus. The people who live there are making tanks.&lt;/p&gt;
    &lt;p&gt;It would be years before OS X could handle things that wouldn’t cause BeOS to break a sweat, and BeOS still has a bit of a responsiveness edge that OS X still can't seem to match (probably due to the PDF rendering layer).&lt;/p&gt;
    &lt;p&gt;&amp;gt; Would it kill people to have to close their tags properly&lt;/p&gt;
    &lt;p&gt;It would kill the approachability of the language.&lt;/p&gt;
    &lt;p&gt;One of the joys of learning HTML when it tended to be hand-written was that if you made a mistake, you'd still see something just with distorted output.&lt;/p&gt;
    &lt;p&gt;That was a lot more approachable for a lot of people who were put off "real" programming languages because they were overwhelmed by terrible error messages any time they missed a bracket or misspelled something.&lt;/p&gt;
    &lt;p&gt;If you've learned to program in the last decade or two, you might not even realise just how bad compiler errors tended to be in most languages.&lt;/p&gt;
    &lt;p&gt;The kind of thing where you could miss a bracket on line 47 but end up with a compiler error complaining about something 20 lines away.&lt;/p&gt;
    &lt;p&gt;Rust ( in particular ) got everyone to bring up their game with respect to meaningful compiler errors.&lt;/p&gt;
    &lt;p&gt;But in the days of XHTML? Error messages were arcane, you had to dive in to see what the problem actually was.&lt;/p&gt;
    &lt;p&gt;If you forget a closing quote on an attribute in html, all content until next quote is ignored and not rendered - even if it is the rest of the page. I dont think this is more helpful than an error message. It was just simpler to implement.&lt;/p&gt;
    &lt;p&gt;For reference, observe what happens if you try opening this malformed document in a browser: save it with a .xhtml extension, or serve it with MIME type application/xhtml+xml.&lt;/p&gt;
    &lt;p&gt;Firefox displays naught but the error:&lt;/p&gt;
    &lt;p&gt;XML Parsing Error: mismatched tag. Expected: &amp;lt;/b&amp;gt;. Location: file:///tmp/x.xhtml Line Number 22, Column 3: &amp;lt;/p&amp;gt; --^&lt;/p&gt;
    &lt;p&gt;Chromium displays this banner on top of the document up to the error:&lt;/p&gt;
    &lt;p&gt;This page contains the following errors: error on line 22 at column 5: Opening and ending tag mismatch: b line 19 and p Below is a rendering of the page up to the first error.&lt;/p&gt;
    &lt;p&gt;Thanks for showing these. We can see Firefox matches the same style of accurate but unhelpful error message.&lt;/p&gt;
    &lt;p&gt;Chromium is much more helpful in the error message, directing the user to both line 19 and 22. It also made the user-friendly choice to render up to the error.&lt;/p&gt;
    &lt;p&gt;In the context of XHTML, we should also keep in mind that Chrome post-dates XHTML by almost a decade.&lt;/p&gt;
    &lt;p&gt;If, on the other hand, you have some sorts of XSLT errors, Firefox gives you a reasonably helpful error message in the dev tools, whereas Chromium gives you a blank document and nothing else… unless you ran it in a terminal. I’m still a little surprised that I managed to discover that it was emitting XSLT errors to stdout or stderr (don’t remember which).&lt;/p&gt;
    &lt;p&gt;Really, neither has particularly great handling of errors in anything XML. None of it is better than minimally maintained, a lot of it has simply been unmaintained for a decade or more.&lt;/p&gt;
    &lt;p&gt;&amp;gt; XHTML. Have you ever read the parsing rules for HTML 5, where the semantics for bad HTML were formalized?&lt;/p&gt;
    &lt;p&gt;I actually have, and its not that bad.&lt;/p&gt;
    &lt;p&gt;If anything, the worst part is foreign content (svg, mathml) which have different rules more similar to xml but also not the same as xml.&lt;/p&gt;
    &lt;p&gt;Just as an aside, browsers still support xhtml, just serve with application/xhtml+xml mime type, and it all works including aggressive error checking. This is very much a situation where consumers are voting with their feet not browser vendors forcing a choice.&lt;/p&gt;
    &lt;p&gt;- I think without the move to NeXT, even if Jobs had come back to Apple, they would never have been able to get to the iPhone. iOS was - and still is - a unix-like OS, using unix-like philosophy, and I think that philosophy allowed them to build something game-changing compared to the SOTA in mobile OS technology at the time. So much so, Android follows suit. It doesn't have a command line, and installation is fine, so I'm not sure your line of reasoning holds strongly. One thing I think you might be hinting at though that is a missed trick: macOS today could learn a little from the way iOS and iPadOS is forced to do things and centralise configuration in a single place.&lt;/p&gt;
    &lt;p&gt;- I think transaction processing operating systems have been reinvented today as "serverless". The load/execute/quit cycle you describe is how you build in AWS Lambdas, GCP Cloud Run Functions or Azure Functions.&lt;/p&gt;
    &lt;p&gt;- Most of your other ideas (with an exception, see below), died either because of people trying to grab money rather than build cool tech, and arguably the free market decided to vote with its feet - I do wonder when we might next get a major change in hardware architectures again though, it does feel like we've now got "x86" and "ARM" and that's that for the next generation.&lt;/p&gt;
    &lt;p&gt;- XHTML died because it was too hard for people to get stuff done. The forgiving nature of the HTML specs is a feature, not a bug. We shouldn't expect people to be experts at reading specs to publish on the web, nor should it need special software that gatekeeps the web. It needs to be scrappy, and messy and evolutionary, because it is a technology that serves people - we don't want people to serve the technology.&lt;/p&gt;
    &lt;p&gt;&amp;gt; XHTML died because it was too hard for people to get stuff done.&lt;/p&gt;
    &lt;p&gt;This is not true. The reason it died was because Internet Explorer 6 didn’t support it, and that hung around for about a decade and a half. There was no way for XHTML to succeed given that situation.&lt;/p&gt;
    &lt;p&gt;The syntax errors that cause XHTML to stop parsing also cause JSX to stop parsing. If this kind of thing really were a problem, it would have killed React.&lt;/p&gt;
    &lt;p&gt;People can deal with strict syntax. They can manage it with JSX, they can manage it with JSON, they can manage it with JavaScript, they can manage it with every back-end language like Python, PHP, Ruby, etc. The idea that people see XHTML being parsed strictly and give up has never had any truth to it.&lt;/p&gt;
    &lt;p&gt;&amp;gt; The syntax errors that cause XHTML to stop parsing also cause JSX to stop parsing. If this kind of thing really were a problem, it would have killed React.&lt;/p&gt;
    &lt;p&gt;JSX is processed during the build step, XHTML is processed at runtime, by the browser.&lt;/p&gt;
    &lt;p&gt;They would have gotten another modern OS instead of Next as the base for MacOSX (then iOS).&lt;/p&gt;
    &lt;p&gt;Another possibility they were exploring was buying BeOS, which would have been pretty interesting because it was an OS built from scratch in the 90's without any of the cruft from the 70's.&lt;/p&gt;
    &lt;p&gt;Also, the only thing specific to Next that survived in MacOSX and iOS was ObjectiveC and the whole NextStep APIs, which honestly I don't think it a great thing. It was pretty cool in the 90's but when the iPhone was released it was already kinda obsolete. For the kernel, Linux or FreeBSD would have worked just the same.&lt;/p&gt;
    &lt;p&gt;Not so much Windows Mobile, which never achieved serious market share. It was originally more planned to be a Blackberry competitor, and the early Android handset prototype concepts were all blackberry knockoffs with similar physical keyboard layouts.&lt;/p&gt;
    &lt;p&gt;It has always appeared though like you suggest, that the project quickly pivoted to candy bar touch phones following the release of the original iPhone. It's worthwhile to remember that the industry wasn't nearly as convinced that touching glass was the future of mobile typing in 2007 as it later became, and the sales volume of Blackberrys back then was often incorrectly cited as evidence to support the case against touch.&lt;/p&gt;
    &lt;p&gt;On XHTML, I think there was room for both HTML and a proper XHTML that barks on errors. If you're a human typing HTML or using a language where you build your HTML by concatenation like early PHP, sure it makes sense to allow loosey goosey HTML but if you're using any sort of simple DOM builder which should preclude you from the possibility of outputting invalid HTML, strict XHTML makes a lot more sense.&lt;/p&gt;
    &lt;p&gt;Honestly I'm disappointed the promised XHTML5 never materialized along side HTML5. I guess it just lost steam.&lt;/p&gt;
    &lt;p&gt;But a HTML5 parser will obviously parse "strict" HTML5 just fine too, what value is there to special-case the "this was generated by a DOM builder" path client-side?&lt;/p&gt;
    &lt;p&gt;&amp;gt; Honestly I'm disappointed the promised XHTML5 never materialized along side HTML5. I guess it just lost steam.&lt;/p&gt;
    &lt;p&gt;The HTML Standard supports two syntaxes, HTML and XML. All browsers support XML syntax just fine—always have, and probably always will. Serve your file as application/xhtml+xml, and go ham.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Would it kill people to have to close their tags properly?&lt;/p&gt;
    &lt;p&gt;Probably not, but what would be the benefit of having more pages fail to render? If xhtml had been coupled with some cool features which only worked in xhtml mode, it might have become successful, but on its own it does not provide much value.&lt;/p&gt;
    &lt;p&gt;&amp;gt; but what would be the benefit of having more pages fail to render?&lt;/p&gt;
    &lt;p&gt;I think those benefits are quite similar to having more programs failing to run (due to static and strong typing, other static analysis, and/or elimination of undefined behavior, for instance), or more data failing to be read (due to integrity checks and simply strict parsing): as a user, you get documents closer to valid ones (at least in the rough format), if anything at all, and additionally that discourages developers from shipping a mess. Then parsers (not just those in viewers, but anything that does processing) have a better chance to read and interpret those documents consistently, so even more things work predictably.&lt;/p&gt;
    &lt;p&gt;Sure, authoring tools should help authors avoid mistakes and produce valid content. But the browser is a tool for the consumer of content, and there is no benefit for the user if it fails to to render some existing pages.&lt;/p&gt;
    &lt;p&gt;It is like Windows jumping through hoops to support backwards compatibility even with buggy software. The interest of the customer is that the software runs.&lt;/p&gt;
    &lt;p&gt;&amp;gt; there is no benefit for the user if it fails to to render some existing pages&lt;/p&gt;
    &lt;p&gt;What if the browser renders it incorrectly? If a corrupt tag combination leads to browser X parsing "&amp;lt;script&amp;gt;" as inline text but browser Y parsing it as a script tag, that could lead to serious security issues!&lt;/p&gt;
    &lt;p&gt;Blindly guessing at the original author's intent whenever you encounter buggy content is a recipe for disaster. Sometimes it is to the user's benefit to just refuse to render it.&lt;/p&gt;
    &lt;p&gt;if developer accidentally left opening comment at the start of the html.&lt;/p&gt;
    &lt;p&gt;Rhetorical question: Should the browser display page even if it is commented out?&lt;/p&gt;
    &lt;p&gt;There is some bar for what is expected to work.&lt;/p&gt;
    &lt;p&gt;If all browsers would consistently error out on unclosed tags, then it would definitely force developers to close tags, it would force it become common knowledge, second nature.&lt;/p&gt;
    &lt;p&gt;HTML5 was the answer for the consistency part: where before browsers did different things to recover from "invalid" HTML, HTML5 standardizes it because it doesn't care about valid/invalid as much, it just describes behavior anyways.&lt;/p&gt;
    &lt;p&gt;XHTML is XML. XML-based markup for content can be typeset into PDF, suitable for print media. I invite you to check out the PDFs listed in the intro to my feature matrix comparison page, all being sourced from XHTML:&lt;/p&gt;
    &lt;p&gt;&amp;gt; - XHTML. Have you ever read the parsing rules for HTML 5, where the semantics for bad HTML were formalized? Browsers should just punt at the first error, display an error message, and render the rest of the page in Times Roman. Would it kill people to have to close their tags properly?&lt;/p&gt;
    &lt;p&gt;IMO there's a place for XHTML as a generated output format, but I think HTML itself should stay easy to author and lightweight as a markup format. Specifically when it comes to tag omission, if I'm writing text I don't want to see a bunch of `&amp;lt;/li&amp;gt;` or `&amp;lt;/p&amp;gt;` everywhere. It's visual noise, and I just want a lightweight markup.&lt;/p&gt;
    &lt;p&gt;&amp;gt; IBM MicroChannel. Early minicomputer and microcomputer designers thought "bus", where peripherals can talk to memory and peripherals look like memory to the CPU. Mainframes, though, had "channels", simple processors which connected peripherals to the CPU.&lt;/p&gt;
    &lt;p&gt;TIL: what microchannel meant by micro and channel.&lt;/p&gt;
    &lt;p&gt;Also it had OS independent device-class drivers.&lt;/p&gt;
    &lt;p&gt;And you could stuff a new CPU on a card and pop it right in. Went from a 286+2MB to a 486dx2+32MB.&lt;/p&gt;
    &lt;p&gt;Word lens team was bought by google, its far better in google translate then the local app ever was. You could repeat the old app with a local LLM now pretty easily but it still won't be as close in quality as using google translate&lt;/p&gt;
    &lt;p&gt;CICS seems perfectly fine in problem spaces where requirements change slowly enough than one can trade development time for reliability (read: finance and insurance).&lt;/p&gt;
    &lt;p&gt;I love this mismatched list of grievances and I find myself agreeing with most of them. XHTML and proper CPU hypervisors in particular.&lt;/p&gt;
    &lt;p&gt;People being too lazy to close the &amp;lt;br /&amp;gt; tag was apparently a gateway drug into absolute mayhem. Modern HTML is a cesspool. I would hate to have to write a parser that's tolerant enough to deal with all the garbage people throw at it. Is that part of the reason why we have so few browsers?&lt;/p&gt;
    &lt;p&gt;&amp;gt; People being too lazy to close the &amp;lt;br /&amp;gt; tag was apparently a gateway drug into absolute mayhem.&lt;/p&gt;
    &lt;p&gt;Your chronology is waaaaaaaaaaaay off.&lt;/p&gt;
    &lt;p&gt;&amp;lt;BR&amp;gt; came years before XML was invented. It was a tag that didn’t permit children, so writing it &amp;lt;BR&amp;gt;&amp;lt;/BR&amp;gt; would have been crazy, and inventing a new syntax like &amp;lt;BR// or &amp;lt;BR/&amp;gt; would have been crazy too. Spelling it &amp;lt;BR&amp;gt; was the obvious and reasonable choice.&lt;/p&gt;
    &lt;p&gt;The &amp;lt;br /&amp;gt; or &amp;lt;br/&amp;gt; spelling was added to HTML after XHTML had already basically lost, as a compatibility measure for porting back to HTML, since those enthusiastic about XHTML had taken to writing it and it was nice having a compatible spelling that did the same in both. (In XHTML you could also write &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;, but that was incorrect in HTML; and if you wrote &amp;lt;br /&amp;gt; in HTML it was equivalent to &amp;lt;br /=""&amp;gt;, giving you one attribute with name "/" and value "". There were a few growing pains there, such as how &amp;lt;input checked&amp;gt; used to mean &amp;lt;input checked="checked"&amp;gt;—it was actually the attribute name that was being omitted, not the value!—except… oh why am I even writing this, messy messy history stuff, engines doing their own thing blah blah blah, these days it’s &amp;lt;input checked=""&amp;gt;.&lt;/p&gt;
    &lt;p&gt;Really, the whole &amp;lt;… /&amp;gt; thing is more an artefact of an arguably-misguided idea after a failed reform. The absolute mayhem came first, not last.&lt;/p&gt;
    &lt;p&gt;&amp;gt; I would hate to have to write a parser that's tolerant enough to deal with all the garbage people throw at it.&lt;/p&gt;
    &lt;p&gt;The HTML parser is magnificent, by far the best spec for something reasonably-sized that I know of. It’s exhaustively defined in terms of state machines. It’s huge, far larger than one would like it to be because of all this compatibility stuff, but genuinely easy to implement if you have the patience. Seriously, go read it some time, it’s really quite approachable.&lt;/p&gt;
    &lt;p&gt;The reason XHTML failed is because the spec required it to be sent with a new MIME type (application/xml+xhtml I believe) which no webserver did out of the box. Everything defaulted to text/html, which all browsers would interpret as HTML, and given the mismatching doctype, would interpret as tag soup (quirks mode/lenient).&lt;/p&gt;
    &lt;p&gt;Meanwhile, local files with the doctype would be treated as XHTML, so people assumed the doctype was all you needed. So everyone who tried to use XHTML didn't realize that it would go back to being read as HTML when they upload it to their webserver/return it from PHP/etc. Then, when something went wrong/worked differently than expected, the author would blame XHTML.&lt;/p&gt;
    &lt;p&gt;Edit: I see that I'm getting downvoted here; if any of this is factually incorrect I would like to be educated please.&lt;/p&gt;
    &lt;p&gt;&amp;gt; The reason XHTML failed is because the spec required it to be sent with a new MIME type (application/xml+xhtml I believe) which no webserver did out of the box. Everything defaulted to text/html, which all browsers would interpret as HTML, and given the mismatching doctype, would interpret as tag soup (quirks mode/lenient).&lt;/p&gt;
    &lt;p&gt;None of that is correct.&lt;/p&gt;
    &lt;p&gt;It was perfectly spec. compliant to label XHTML as text/html. The spec. that covers this is RFC 2854 and it states:&lt;/p&gt;
    &lt;p&gt;&amp;gt; The text/html media type is now defined by W3C Recommendations; the latest published version is [HTML401]. In addition, [XHTML1] defines a profile of use of XHTML which is compatible with HTML 4.01 and which may also be labeled as text/html.&lt;/p&gt;
    &lt;p&gt;There’s no spec. that says you need to parse XHTML served as text/html as HTML not XHTML. As the spec. says, text/html covers both HTML and XHTML. That’s something that browsers did but had no obligation to.&lt;/p&gt;
    &lt;p&gt;The mismatched doctype didn’t trigger quirks mode. Browsers don’t care about that. The prologue could, but XHTML 1.0 Appendix C told you not to use that anyway.&lt;/p&gt;
    &lt;p&gt;Even if it did trigger quirks mode, that makes no difference in terms of tag soup. Tag soup is when you mis-nest tags, for instance &amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/em&amp;gt;. Quirks mode was predominantly about how it applied CSS layout. There are three different concepts being mixed up here: being parsed as HTML, parsing tag soup, and doctype switching.&lt;/p&gt;
    &lt;p&gt;The problem with serving application/xhtml+xml wasn’t anything to do with web servers. The problem was that Internet Explorer 6 didn’t support it. After Microsoft won the browser wars, they discontinued development and there was a five year gap between Internet Explorer 6 and 7. Combined with long upgrade cycles and operating system requirements, this meant that Internet Explorer 6 had to be supported for almost 15 years globally.&lt;/p&gt;
    &lt;p&gt;Obviously, if you can’t serve XHTML in a way browsers will parse as XML for a decade and a half, this inevitably kills XHTML.&lt;/p&gt;
    &lt;p&gt;Yes, I covered that; everyone assumed that you only needed to specify the doctype, but in practice browsers only accepted it for local files or HTTP responses with Content-Type: application/xml+xhtml. I've edited the comment to make that more explicit.&lt;/p&gt;
    &lt;p&gt;Adobe Flash / Shockwave. After all these decades, I've yet to see a tool that makes it as easy to make games or multimedia as Flash did. One of many reminders recently (many others in politics) that humanity doesn't just inevitably or linearly move forward in any domain, or even 2 steps forward 1 step back. Some things are just lost to time - maybe rediscovered in a century, maybe never.&lt;/p&gt;
    &lt;p&gt;Enabling novice normies to make games was excellent, and I believe the whole game industry benefited from this resulting injection of fresh ideas. A lot of indy developers with fresh takes on what games could be got started this way. Zachtronics is one example of many that comes to mind right now.&lt;/p&gt;
    &lt;p&gt;On the other hand, for every flash game made there were about ten thousands flash-based ads, and nearly as many websites that used flash poorly for things like basic navigation (remember flash based website dropdown menus?). And for a few years it seemed like every single restaurant with a website was using flash for the entire thing, the results were borderline unusable in the best cases. And let's not forget that as long as flash was dominant, it was choking out the demand to get proper video support into browsers. Flash based video players performed like dog shit and made life on Linux a real chore.&lt;/p&gt;
    &lt;p&gt;Flash players had zoom built in. And I believe there were textareas that allowed people to copy and paste text if they wanted, though it wasn't very common&lt;/p&gt;
    &lt;p&gt;Flash was the last thing that got people excited for the Web generally&lt;/p&gt;
    &lt;p&gt;Flash was the original web Excel (also Lotus 1-2-3) -- a simultaneous design + data + programming tool.&lt;/p&gt;
    &lt;p&gt;These are terrible for maintainability, but excellent for usability.&lt;/p&gt;
    &lt;p&gt;On the whole, I'd say it was easily a loss for the greater web that web programming left the citizen-programmer behind. (By requiring them all to turn into hamfisted front-end javascript programmers...)&lt;/p&gt;
    &lt;p&gt;Many of the centralized evils of the current web might have been avoided if there had remained an onramp for the neophyte to really create for the web.&lt;/p&gt;
    &lt;p&gt;I.e. Facebook et al. might have instead been replaced by a hosted, better-indexed Macromedia create + edit + host platform&lt;/p&gt;
    &lt;p&gt;Or the amount of shit code produced by inexperienced front-end devs throwing spaghetti at IE might have been reduced&lt;/p&gt;
    &lt;p&gt;It was both awful when it showed up in the enterprise and amazing at unleashing creativity for many. Most young non-technical people I knew during its rise had regularly made Flash creations or even games, and deeply enjoyed the Cambrian explosion of games and animations for a few years.&lt;/p&gt;
    &lt;p&gt;It was really meant for animation and games but got misused as a web GUI tool. I think it would've been fine to allow it anyway, and anyone who wants to build a GUI can just not use Flash.&lt;/p&gt;
    &lt;p&gt;Godot is pretty awesome. Easy to learn, can do 2D or 3D, and can export to HTML5/webasm that works across all major OSes and browsers including mobile.&lt;/p&gt;
    &lt;p&gt;It’s far from perfect but I’ve been enjoying playing with it even for things that aren’t games and it has come a long way just in the last year or two. I feel like it’s close to (or is currently) having its Blender moment.&lt;/p&gt;
    &lt;p&gt;Even if Adobe had gotten their act together and fixed all security holes, Apple would have still killed it. It was always a threat as a popular design tool. And decades later, with the HTML canvas hype faded, there's still no replacement to what Adobe Flash could do - any designer could create stellar, interactive design that can be embedded into any website...without a monthly subscription.&lt;/p&gt;
    &lt;p&gt;I was even fine with Flash being misused for web GUIs, just to pressure the open web to get its act together. At least devs got to pick 2 between [fancy, fast, easy]. If you want something better, make it instead of hobbling the competition.&lt;/p&gt;
    &lt;p&gt;Try Roblox! Unless you haven't yet. I was SO impressed. Everything works as expected. 5 minutes after starting the game making kit I totally understood why Roblox is worth billions. It just works. It's magic. All can be scripted, but also any 6y.o. can use it.&lt;/p&gt;
    &lt;p&gt;I don't think thats the case. For the longest while flash was faster than js at doing anything vaguely graphic based. The issue for apple was that the CPU in the iphone wasn't fast enough to do flash and anything else. Moreover Adobe didn't get on with jobs when they were talking about custom versions.&lt;/p&gt;
    &lt;p&gt;You have to remember that "apps" were never meant to be a thing on the iphone, it was all about "desktop" like web performance.&lt;/p&gt;
    &lt;p&gt;I remember well. I earned my living for a few years around 2010 porting slow Flash sites to regular web tech. It was hard to translate some functionality, but Flash was definitely slow compared to the equivalent regular website done without the plugin.&lt;/p&gt;
    &lt;p&gt;Macromedia Fireworks was an outstanding piece of software.&lt;/p&gt;
    &lt;p&gt;The 20 most common things you’d do with the tool were there for you in obvious toolbars. It had a lot of advanced features for image editing. It had a scripting language, so you could do bulk editing operations. It supported just about every file extension you could think of.&lt;/p&gt;
    &lt;p&gt;Most useful feature of all was that it’d load instantly. You’d click the icon on the desktop, and there’d be the Fireworks UI before you could finish blinking. Compared to 2025 Adobe apps, where you click the desktop icon and make a coffee while it starts, it’s phenomenal performance.&lt;/p&gt;
    &lt;p&gt;Performance was way better than what we have now with modern web stacks, we just have more powerful computers.&lt;/p&gt;
    &lt;p&gt;I agree on security and bugs, but bugs can be fixed. It just shows neglect by Adobe, which was, I think, the real problem. I think that if Adobe seriously wanted to, it could have been a web standard.&lt;/p&gt;
    &lt;p&gt;Lots of people say performance was good, but that seems to be through the nostalgic lens of a handful of cool games.&lt;/p&gt;
    &lt;p&gt;Those did sometimes run really great, but most implementations were indeed very slow.&lt;/p&gt;
    &lt;p&gt;I remember vividly because it was part of my job back then to help with web performance and when we measured page speed and user interface responsiveness flash was almost always the worst.&lt;/p&gt;
    &lt;p&gt;Right. But that doesn't mean the performance of Flash was bad for what it was doing. Or that it was worse than the performance of doing the same thing in modern HTML+CSS now.&lt;/p&gt;
    &lt;p&gt;The default, and by far the most common, output from Flash had significantly slower click-to-response and for network latency and for rendering than HTML+CSS is today.&lt;/p&gt;
    &lt;p&gt;You remembering a few optimised instances does not change the reality that Flash was bad.&lt;/p&gt;
    &lt;p&gt;I am not and have never compared them in the way you say I did. You literally wrote ”Or that it was worse than the performance of doing the same thing in modern HTML+CSS now.” so I had to somehow repsond to that strange claim.&lt;/p&gt;
    &lt;p&gt;Of course modern computers are orders of magnitude more powerful! But Flash was definitely generally worse compared on the same hardware and network stack compared to vanilla (non-plugin based) web tech.&lt;/p&gt;
    &lt;p&gt;Flash performance is still better than current web stack's. Probably will always be - you could write non trivial games that would work on 128MB memory machine. Currently single browser tab with simple page can take more than that.&lt;/p&gt;
    &lt;p&gt;Yes. I never used flash personally, but I loved those little games people created with them. There was the whole scene of non developers creating little games of all kinds and it just ceased to exist.&lt;/p&gt;
    &lt;p&gt;Ruffle is amazing. I launched a 20+ year old game yesterday with zero compatibility issues. Even better than the original Flash because of superior security isolation mechanisms.&lt;/p&gt;
    &lt;p&gt;Are there any ways that I can make games or something&lt;/p&gt;
    &lt;p&gt;Like I want to make websites about me similar to those in neocities right, those flashy nice (good?) artistic UI&lt;/p&gt;
    &lt;p&gt;I suck at css. I don't know but I never really got a feedback attention loop and heck even AI can make it better than me&lt;/p&gt;
    &lt;p&gt;But I want to show the world what I myself can make as well and not just what I prompt or get back.&lt;/p&gt;
    &lt;p&gt;I want a good feedback loop, can flash be useful for this purpose? Like maybe I want a website like uh something early browser times. I am kinda interested in building something like netscape navigator esque thing even though I wasn't born in that era or maybe windows xp style.&lt;/p&gt;
    &lt;p&gt;I have mixed opinions about AI tbh. I genuinely just want to learn things right now, it might take me more time, I have been beating myself over using AI and not feeling equal to if writing things by hand. So I want to prove to myself that I can write things/learn things by hand as well. Like I tried using it to study but the lure to make things right away and then trapping you later is definitely there, it feels easy in the start imo and that's the lure and I kinda want to stay away with that lure to develop my skills, maybe not right now, then later.&lt;/p&gt;
    &lt;p&gt;Flash is kind of dead now, i don't think the tools to create new Flash software are even released anymore. I would recommend learning Godot to make a game. There's some great tutorials like here - https://www.gdquest.com/library/first_2d_game_godot4_vampire...&lt;/p&gt;
    &lt;p&gt;Kids now create games in Roblox. More constrained, more commercial, more exploitative- but there is still a huge scene of non-developers creating games if you care to look.&lt;/p&gt;
    &lt;p&gt;Personal pet peeve, but as someone who still makes gifs, Image Ready. Adobe kind of absorbed Image Ready into Photoshop and it's just never lived up to how easy it was to make simple gifs in Image Ready&lt;/p&gt;
    &lt;p&gt;Edit: you asked why. I first saw it at SELF where Chris DiBona showed it to me and a close friend. It was awesome. Real time translation, integration of various types of messaging, tons of cool capabilities, and it was fully open source. What made it out of Google was a stripped down version of what I was shown, the market rejected it, and it was a sad day. Now, I am left with JIRA, Slack, and email. It sucks.&lt;/p&gt;
    &lt;p&gt;Google wave was built on an awesome technology layer, and they they totally blew in on the user interface.... deciding to treat it as a set of separate items instead of a single document everyone everywhere all at once could edit.... killed it.&lt;/p&gt;
    &lt;p&gt;It make it seem needlessly complicated, and effectively erased all the positives.&lt;/p&gt;
    &lt;p&gt;I was blown away by the demo but then after I thought about it, it seemed like a nightmare to me. All the problems of slack of having to manually check channels for updates except X 100 (yea, I get that slack wasn't available then. My point is I saw that it seemed impossible to keep up with nested constantly updated hierarchical threads. Keeping up with channels on slack is bad enough so imagine if Wave had succeeded. It'd be even worse.&lt;/p&gt;
    &lt;p&gt;Wave was great for conversation with one or two other people on a specific project, which I'm sure most people here used it for. I can't imagine it scaling well beyond that.&lt;/p&gt;
    &lt;p&gt;It was smoke and mirrors, spiced with everyone letting their imagination run away.&lt;/p&gt;
    &lt;p&gt;I downloaded the open-source version of the server to see if I could build a product around it, but it came with a serious limitation: The open-source server did not persist any data. That was a complete non-starter for me.&lt;/p&gt;
    &lt;p&gt;At that point I suspected it wasn't going anywhere. My suspicions were confirmed when I sat near some Wave team members at an event, and overhead one say, with stars in his eyes, "won't it be groovy when everyone's using Wave and..."&lt;/p&gt;
    &lt;p&gt;Google Wave had awesome tech but if you look at the demo in hindsight you can tell it’s just not a very good product. They tried making an all-in-one kind of product which just doesn’t work.&lt;/p&gt;
    &lt;p&gt;In a sense Wave still exists but was split into multiple products, so I wouldn’t say it’s “dead”. The tech that powered it is still used today in many of Google’s popular products. It turns out that having separate interfaces for separate purposes is just more user friendly than an all-in-one.&lt;/p&gt;
    &lt;p&gt;I managed trips with friends and it was a great form factor for ad-hoc discussions with docs and links included. I thought it was the future and in my very early programming days wrote probably the most insecure plugin ever to manage your servers.&lt;/p&gt;
    &lt;p&gt;Even the watered-down version of wave was something I used at my host startup, it was effectively our project management tool. And it was amazing at that.&lt;/p&gt;
    &lt;p&gt;I don't know how it would fare compared to the options available today, but back then, it shutting down was a tremendous loss.&lt;/p&gt;
    &lt;p&gt;I haven’t found one showing what Chris showed. Most seem to focus on just communications with little demonstration of productivity or other features. This is sad to me because its most glorious asset was being open source with a rich set of plugins/extensions allowing tons of functionality.&lt;/p&gt;
    &lt;p&gt;It's indeed not a good one. Discord refined instant messaging and bolts other things on top like forums but isn't fundamentally different. Google Wave was (and still is) a completely different paradigm. Everything was natively collaborative: it mixed instant messaging with document edition (like Google Docs or pads) and any widget you could think of (polls, calendars, playing music, drawing, ...) could be added by users through sandboxed Javascript. The current closest I can think of is DeltaChat's webxdc.&lt;/p&gt;
    &lt;p&gt;Google sucked/s at executive function because they completely lack appreciation for proper R&amp;amp;D and long-term investment and also kill things people use and love.&lt;/p&gt;
    &lt;p&gt;Yep. And rather than ask people, focus group, or look at the evidence, they just guess or do whatever they want. Not much leadership or community engagement appears to be involved.&lt;/p&gt;
    &lt;p&gt;Well, that's fair. Overpaid managers and principle engineers spun "secret projects" and products like Glass well to be an elitist experience for special people. But I won't forgive not letting Wave bake and mature.&lt;/p&gt;
    &lt;p&gt;Q: Do they have non-human shareholders I don't know about, or do they have shareholders who lack qualities present in most living human beings?&lt;/p&gt;
    &lt;p&gt;Lytro light field cameras. The tech was impressive and the company was able to put two products on to the shelves, though unfortunately they hadn't quite reached the image quality needed for professional photographers.&lt;/p&gt;
    &lt;p&gt;But now with the new Meta Ray-Bans featuring a light field display and with new media like gaussian splats we're on the verge of being able to make full usage of all the data those cameras were able capture, beyond the demos of "what if you could fix your focus after shooting" of back then.&lt;/p&gt;
    &lt;p&gt;Beyond high tech, there's a big market for novelty kinda-bad cameras like Polaroids or Instax. The first Lytro has the perfect form factor for that and was already bulky enough that slapping a printer on it wouldn't have hurt.&lt;/p&gt;
    &lt;p&gt;&amp;gt; unfortunately they hadn't quite reached the image quality needed for professional photographers.&lt;/p&gt;
    &lt;p&gt;I always wondered about that - since it works by interleaving pixels at different focal depths, there's always going to be a resolution tradeoff that a single-plane focus camera wouldn't.&lt;/p&gt;
    &lt;p&gt;It's such a cool idea though, and no more difficult to manufacturer than a sensor + micro lens array.&lt;/p&gt;
    &lt;p&gt;In fact, the Lytro Illum (the big one) had a really nice, very flexible, bright super-zoom lens. If you ever wondered how that was achieved: having the microlens array and a light field sensor (1) allows relaxing so many aberration constraints on the lens that you could have a light, compact super-zoom.&lt;/p&gt;
    &lt;p&gt;(1) it's not really different focal depths, it's actually more like multiple independent apertures at different spatial locations, each with a lower resolution sensor behind it - stereovision on steroids (stereoids?)&lt;/p&gt;
    &lt;p&gt;They don't capture a light field like Lytro did, they capture a regular image with a very deep depth of field, extract a depth map (usually with machine learning, but some phones augment it with stereoscopy or even LIDAR on high end iPhones) and then selectively blur based on depth.&lt;/p&gt;
    &lt;p&gt;Google Reader: I will forever be salty about how Google killed something that likely required very little maintenance in the long run. It could have stayed exactly the same for a decade and I wouldn't have cared because I use an RSS reader exactly the same way I do that I did back in 2015.&lt;/p&gt;
    &lt;p&gt;Yes. That was the single worst business decision in Google history, as somebody correctly noted. It burned an enormous amount of goodwill for no gain whatsoever.&lt;/p&gt;
    &lt;p&gt;Killing Google Reader affected a relatively small number of users, but these users disporportionately happened to be founders, CTOs, VPs of engineering, social media luminaries, and people who eventually became founders, CTOs, etc. They had been painfully taught to not trust Google, and, since that time, they didn't. And still don't.&lt;/p&gt;
    &lt;p&gt;Just think of the data mining they could have had there.&lt;/p&gt;
    &lt;p&gt;They had a core set of ultra-connected users who touched key aspects of the entire tech industry. The knowledge graph you could have built out of what those people read and shared…&lt;/p&gt;
    &lt;p&gt;They could have just kept the entire service running with, what, 2 software engineers? Such a waste.&lt;/p&gt;
    &lt;p&gt;This would require the decision-maker to think and act at the scale and in interests of the entire company. Not at the scale of a promo packet for next perf: "saved several millions in operation costs by shutting down a low-impact, unprofitable service."&lt;/p&gt;
    &lt;p&gt;Yes, Google killing Reader was probably the first time they killed a popular product and what started the idea that any Google product could be killed at any time.&lt;/p&gt;
    &lt;p&gt;There is some truth in this. I fit into a few of these buckets and I don’t think I could ever recommend their enterprise stuff after having my favourite consumer products pulled.&lt;/p&gt;
    &lt;p&gt;I never understood why noone built a Copycat (like "bgr" -&amp;gt; "better google reader :-D) There would have been a clear change to fill this vacuum?&lt;/p&gt;
    &lt;p&gt;The thing is: I guess they didnt see a good way to monetize it (according to their "metrics"), while the product itself had somehow relative high OpEx and being somehow a niche thingy.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Google Play Music: I had uploaded thousands of MP3 files there. They killed it. I won't waste my time uploading again.&lt;/p&gt;
    &lt;p&gt;You can argue whether it's as good as GPM or not, but it's false to imply that your uploaded music disappeared when Google moved to YouTube Music. I made the transition, and all of my music moved without a new upload.&lt;/p&gt;
    &lt;p&gt;Picasa was awesome, they had face recognition years before almost everything else, in a nice offline package.&lt;/p&gt;
    &lt;p&gt;Unfortunately the last public version has a bug that randomly swaps face tags, so you end up training on the wrong persons faces just enough to throw it all off, and the recognition becomes effectively worthless on thousands of family photos. 8(&lt;/p&gt;
    &lt;p&gt;Digikam is a weak sauce replacement that barely gets the job done.&lt;/p&gt;
    &lt;p&gt;Hmm, good to know. But given Google's history, I assumed that it would stop working.&lt;/p&gt;
    &lt;p&gt;I also need to sell my Google Chromecast with Google TV 4K. Brand new, still in its shrink wrap. Bought it last year, to replace a flaky Roku. It was a flaky HDMI cable instead. I trust Roku more than Google for hardware support.&lt;/p&gt;
    &lt;p&gt;In absolutely shocking news, it did stop working and then Google went out of their way to fix it.&lt;/p&gt;
    &lt;p&gt;I genuinely thought all the chromecast audios I owned were useless bricks and was looking around for replacements and then they just started working again from an OTA update. Astounding. I assume someone got fired for taking time away from making search worse to do this.&lt;/p&gt;
    &lt;p&gt;I still use PICASA it works fine. However, when google severed the gdrive-photo linking it meant my photos didn’t automatically download from google to my PC. This is what killed google for me.&lt;/p&gt;
    &lt;p&gt;I'm still amused that they killed Google Notebook and then a few years later created Google Keep, an application with basically the same exact feature set.&lt;/p&gt;
    &lt;p&gt;You can say that for a fair few of the services mentioned by GP.&lt;/p&gt;
    &lt;p&gt;Google killed a lot of things to consolidate them into more "integrated" (from their perspective) product offerings. Picasa -&amp;gt; Photos, Hangounts -&amp;gt; Meet, Music -&amp;gt; YT Premium.&lt;/p&gt;
    &lt;p&gt;No idea what NFC Wallet was, other than the Wallet app on my phone that still exists and works?&lt;/p&gt;
    &lt;p&gt;The only one I'm not sure about is Chromecast - a while back my ones had an "update" to start using their newer AI Assistant system for managing it. Still works.&lt;/p&gt;
    &lt;p&gt;That was probably me, when I stopped using Google Search some years ago. :-) Got tired of the ads, the blog spam, and AI-generated content crap floating to the top of their results page.&lt;/p&gt;
    &lt;p&gt;Kagi has been a great replacement for me. Less blogspam I've found, plus it doesn't give me AI results unless I explicitly tell it I want AI results by adding a "?" to the end of my query.&lt;/p&gt;
    &lt;p&gt;The https://udm14.com/ flavor of Google is quite usable, though, esp with notable operators like inurl:this-or-that. But, all in all, yeah, gimme back vanilla Google search from 2008-2010 or so. Back then it was definitely a tool (I worked in investigative journalism at the time), whereas currently "searching" stands for sitting fingers crossed and hoping for the better. But, oh well. &amp;lt;/rant&amp;gt;&lt;/p&gt;
    &lt;p&gt;That's more what I meant. Sure, lots of people still type stuff into the URL bar that takes them to www.google.com/search. But whatever you want to call that results page now, it's no longer Google Search in anything but name.&lt;/p&gt;
    &lt;p&gt;same can be said if you compare www.google.com search from 2012 and 2022, times are changing… I am not defending google search here, I haven’t used it except by accident in long time now but to say google search is “dying” like you often hear (especially here on HN) is a serious detachment from reality&lt;/p&gt;
    &lt;p&gt;I use this free and extremely bare bones app made by a friend: https://apps.apple.com/us/app/max-where/id1579123291. It tracks your location constantly, has a basic viewer, and lets you export to CSV. That’s about it but it’s all I need.&lt;/p&gt;
    &lt;p&gt;Check out Dawarich, it has an official iOS app and you can use a number of 3rd party mobile apps to track your data and then upload it to server: either ran on your own hardware (FOSS self-hosted) or to the Dawarich Cloud one: https://dawarich.app&lt;/p&gt;
    &lt;p&gt;I’m still using - free g suite - play music - finance - nfc wallet is just google wallet isn’t it? - chromecast, video and audio-only I guess play music is now YouTube music, and doesn't have uploads, so that can be considered dead, but the others seem alive to me.&lt;/p&gt;
    &lt;p&gt;Which particular thing called Hangouts? There were at least two, frankly I’d say more like four.&lt;/p&gt;
    &lt;p&gt;Google and Microsoft are both terrible about reusing names for different things in confusing ways.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Can't keep track of all the Google chat apps.&lt;/p&gt;
    &lt;p&gt;And Hangouts was part of that problem. Remember Google Talk/Chat? That was where things began, and in my family we never wanted Hangouts, Talk/Chat was better.&lt;/p&gt;
    &lt;p&gt;Allo, Chat, Duo, Hangouts, Meet, Messenger, Talk, Voice… I’ve probably forgotten at least two more names, knowing Google. Most of these products have substantial overlap with most of the rest.&lt;/p&gt;
    &lt;p&gt;I used Picasa and loved it, until I realized I want all my photos available from all my devices at all times and so gave in to Google Photos (for access, not backup)&lt;/p&gt;
    &lt;p&gt;I use SyncThing for that purpose. It syncs across my phone, my laptops, and my Synologies. But I don't sync all my photos.&lt;/p&gt;
    &lt;p&gt;I don't like the thought of providing Google thousands of personal photos for their AI training. Which will eventually leak to gov't agencies, fraudsters, and criminals.&lt;/p&gt;
    &lt;p&gt;I used Google Talk than Hangouts, but once they switched to Meet, I gave up on them. By then my family was all using Hangouts, and we never settled on a new service, because one of my siblings didn't want to support any chat services that don't freely give user information to the government, and the rest of us didn't want to use a chat platform that does freely give user information to the government.&lt;/p&gt;
    &lt;p&gt;Am I the only one salty about Google Podcasts? For me that was the straw that broke the camel’s back… I dropped Android, switched to iOS, and slowly phasing out the Google products in my life.&lt;/p&gt;
    &lt;p&gt;From what I can tell (since I am just finding out about this today), they stopped manufacturing the old Chromecast hardware, and at some point, will stop supporting the old devices. The old devices may stop working in the future, for example, because they sunset the servers. Like their thermostats. Who knows?&lt;/p&gt;
    &lt;p&gt;Optane persistent memory had a fascinating value proposition: stop converting data structures for database storage and just persist the data directly. No more booting or application launch or data load: just pick up where you left off. Died because it was too expensive, but probably long after it should have.&lt;/p&gt;
    &lt;p&gt;VM's persist memory snapshots (as do Apple's containers, for macOS at least), so there's still room for something like that workflow.&lt;/p&gt;
    &lt;p&gt;The world had already caught up. By the time it was released, flash memory was already nearing it's speed and latency, to the point that the difference want with the cost.&lt;/p&gt;
    &lt;p&gt;&amp;gt;flash memory was already nearing it's speed and latency&lt;/p&gt;
    &lt;p&gt;Kinda, but for small writes it's still nowhere near.&lt;/p&gt;
    &lt;p&gt;Samsung 990 Pro - IOPS 4KQD1 113 MBytes/Sec&lt;/p&gt;
    &lt;p&gt;P4800X optane - IOPS 4KQD1 206 MBytes/Sec&lt;/p&gt;
    &lt;p&gt;And that's a device 5 years newer and on a faster pcie generation.&lt;/p&gt;
    &lt;p&gt;It disappeared because the market that values above attribute is too small and its hard to market because at first glance they look about the same on a lot of metrics as you say&lt;/p&gt;
    &lt;p&gt;Systems are stuck in old ways in how they model storage, so they weren't ready for something that is neither really RAM nor disk. Optane did inspire quite a few research projects for a while though. A few applications emerged in the server space, in particular.&lt;/p&gt;
    &lt;p&gt;How does that work? It loads kernel from drive to ram?&lt;/p&gt;
    &lt;p&gt;Isn't windows fast boot something like that (only slower, depending on ssd)? It semi-hibernates, stores kernel part of memory on disk for faster startup.&lt;/p&gt;
    &lt;p&gt;This one would have behaved more like suspend to RAM. In suspend to RAM, the RAM is kept powered, while everything else is shut down. The recovery would be near instant, since all the execution contexts are preserved on the RAM.&lt;/p&gt;
    &lt;p&gt;Optane was nearly as fast as RAM, but also persistent like a storage device. So you do a suspend to RAM, without the requirement to keep it powered like a RAM.&lt;/p&gt;
    &lt;p&gt;Not only because of price. The 'ecosystem' infrastructure wasn't there, or at least not spread wide enough. The 'mindshare'/thinking of ways how to do, neither. This is more aligned with (live) 'image-based' working environments like early Lisp and Smalltalk systems. Look at where they are now...&lt;/p&gt;
    &lt;p&gt;A few more thoughts about that, since I happen to have some of the last systems who actually had systems level support for that in their firmware, and early low-capacity optanes designed for that sort of use. It's fascinating to play with these, but they are low capacity, and bound to obsolete operating systems.&lt;/p&gt;
    &lt;p&gt;Given enough RAM, you can emulate that with working suspend and resume to/and from RAM.&lt;/p&gt;
    &lt;p&gt;Another avenue are the ever faster and larger SSDs, in practice, with some models it makes almost no difference anymore, since random access times are so fast, and transfer speeds insane. Maybe total and/or daily TBW remains a concern.&lt;/p&gt;
    &lt;p&gt;The Ricochet network. A packet mesh network providing ISDN speeds in the dialup era, wirelessly.&lt;/p&gt;
    &lt;p&gt;They burned through $5B of 1999 dollars, building out a network in 23 cities, and had effectively zero customers. Finally shut down in 2001.&lt;/p&gt;
    &lt;p&gt;All their marketing was focused on "mobile professionals", whoever those were, while ignoring home users who were clamoring for faster internet where other ISPs dragged their feet.&lt;/p&gt;
    &lt;p&gt;Today, 5G femtocells have replicated some of the concept (radically small cell radius to increase geographic frequency reuse), but without the redundancy -- a femtocell that loses its uplink is dead in the water, not serving as a relay node. A Ricochet E-radio that lost its uplink (but still had power) would simply adjust its routing table and continue operating.&lt;/p&gt;
    &lt;p&gt;I loved my Ricochet modems so damn much. Sitting in a coffeeshop in Palo Alto with an Apple Powerbook and a second generation Ricochet modem rocking web browsing and ssh sessions at 56k when wifi was unknown to the general public. I still have a couple in a box somewhere and I am tempted to see if I can get them into star mode.&lt;/p&gt;
    &lt;p&gt;I had a Ricochet modem in '98-99 living in San Francisco. Just 10 years later the iPhone was launched, on 3G networks that had integer multiples better performance. How would I have been better off had Ricochet survived? This seems like a place where technological progress went --- extremely --- in the right direction.&lt;/p&gt;
    &lt;p&gt;Prodigy (the online service). I'm not saying I wish it was still alive, but it contained some amazing technology for the time (mid- to late 1980s), much of which is now present in web tech:&lt;/p&gt;
    &lt;p&gt;- Client software that ran a VM which received "objects" from a central server (complete with versioning so it would intelligently download new objects when necessary). Versions were available for IBM (DOS), Windows, and Mac. Think of it as an early browser.&lt;/p&gt;
    &lt;p&gt;- Multiple access points and large internal network for storing and delivering content nationwide. This was their proprietary CDN.&lt;/p&gt;
    &lt;p&gt;- Robust programming language (TBOL/PAL) for developing client-side apps which could also interact with the servers. Just like Javascript.&lt;/p&gt;
    &lt;p&gt;- Vector (NAPLPS) graphics for fast downloading (remember, Prodigy started in the days when modems maxed out at 1200 baud); later they added JPG support.&lt;/p&gt;
    &lt;p&gt;- Vast array of online services: shopping, banking, nationwide news, BBSes, mail (before Internet email was popular), even airline reservations.&lt;/p&gt;
    &lt;p&gt;All this was run by a partnership between IBM, Sears, and CBS (the latter dropped out early). They were the Google of the time.&lt;/p&gt;
    &lt;p&gt;The signature function of the German ID card (“neuer Personalausweis”).&lt;/p&gt;
    &lt;p&gt;Its 2025 and we still haven't solved secure online identification and we are still not using end-to-end encryption for e-mail, most e-mail is not even signed.&lt;/p&gt;
    &lt;p&gt;Interaction with state agencies is still mostly via paper-based mail. The only successfully deployed online offer of the german state administration seems to be the online portal for tax filings “elster.de”.&lt;/p&gt;
    &lt;p&gt;The use of a private key on the national ID card would have been able to provide all this and more using standard protocols.&lt;/p&gt;
    &lt;p&gt;At least for identification, there is an expensive effort to re-design something similar in a smartphone-centric way and with less security and not based on standard approaches called “EUDI wallets”.&lt;/p&gt;
    &lt;p&gt;For encrypted communication the agreed-on standard seems to be “log in to our portal with HTTPS and use our proprietary interfaces to send and receive messages”...&lt;/p&gt;
    &lt;p&gt;Why did it die: Too expensive (~30€/year for certificate, &amp;gt;100€ for reader one time) and too complicated to use. Not enough positve PR. Acceptance at state-provided sites was added too late. In modern times, everything must be done with the smartphone, handling of physical cards is considered backwards hence this is probably not going to come back...&lt;/p&gt;
    &lt;p&gt;Edit: Anothther simiarly advanced technoloy that also seems to have been replaced by inferiror substitute smartphone: HBCI banking (a standard...) using your actual bank card + reader device to authenticate transactions... replaced by proprietary app on proprietary smartphone OS...&lt;/p&gt;
    &lt;p&gt;Midori, Microsoft's capability-based security OS[1]. Rumor has it that it was getting to the point where it was able to run Windows code, so it was killed through internal politics, but who knows! It was the Fuchsia of its time...&lt;/p&gt;
    &lt;p&gt;I've heard someone at Microsoft describe it as a moonshot but also a retention project; IIRC it had a hundred plus engineers on it at one time, including a lot of very senior people.&lt;/p&gt;
    &lt;p&gt;Apparently a bunch of research from Midori made it into .NET so it wasn't all lost, but still...&lt;/p&gt;
    &lt;p&gt;The technical foundation seems interesting, but knowing Microsoft this would have just become yet another bloated mess with it's own new set of problems. And by now it would have equally become filled with spyware and AI "features" users don't want.&lt;/p&gt;
    &lt;p&gt;Yahoo pipes. It was so great at creating rss feeds and custom workflows. There are replacements now like Zapier and n8n but loved that. Also google reader which is mentioned multiple times already.&lt;/p&gt;
    &lt;p&gt;Yahoo Pipes was what internet should have been. We're so many decades into computing and that kind of inter-tool linking has only barely been matched by unix pipes.&lt;/p&gt;
    &lt;p&gt;Many companies are working very hard to make that impossible unfortunately. For example you can't get posts from public Facebook groups automatically, although that would be a really good source candidate. They used to allow it, but... not anymore.&lt;/p&gt;
    &lt;p&gt;I loved pipes. I had rss feeds from all the sites where I was sharing content collected up and formatted via pipes into a single rss feed that was pulled into a php blog.&lt;/p&gt;
    &lt;p&gt;Then all those sites I used to post on stopped supporting rss one by one and finally pipes was killed off.&lt;/p&gt;
    &lt;p&gt;For a while I used a python library called riko that did the same thing as pipes without the visual editor. I have to thank it for getting me off php and into python.&lt;/p&gt;
    &lt;p&gt;If anyone with time, money and resources wants to revive the ideas of Yahoo! Pipes then I would suggest using Node-RED[^1] as a good starting point.&lt;/p&gt;
    &lt;p&gt;It has the advantage of being open source, has well defined and stable APIs and a solid backend. Plus 10+ years of constant development with many learnings around how to implement flow based programming visually.&lt;/p&gt;
    &lt;p&gt;I used the Node-RED frontend to create Browser-Red[^2] which is a Node-RED that solely executes in the browser, no server required. It does not support all Node-RED functionality but gives a good feel for using Node-RED and flow based programming.&lt;/p&gt;
    &lt;p&gt;The second project with which I am using Node-RED frontend is Erlang-Red[^3] which is Node-RED with an Erlang backend. Erlang is better suited to flow based programming than NodeJS, hence this attempt to demonstrate that!&lt;/p&gt;
    &lt;p&gt;Node-RED makes slightly different assumptions than Yahoo! Pipes - input ports being the biggest: all nodes in Node-RED have either zero or one input wires, nodes in Yahoo! Pipes had multiple input wires.&lt;/p&gt;
    &lt;p&gt;A good knowledge of jQuery is required but that makes it simpler to get into the frontend code - would be my argument ;) I am happy to answer questions related to Node-RED, email in bio.&lt;/p&gt;
    &lt;p&gt;Ah, this would get my vote too. I've seen a few attempts since, but I think you needed that era of "throw lots of money at any idea" to get it off the ground again.&lt;/p&gt;
    &lt;p&gt;I missed Yahoo Pipes a lot so I built something similar recently for myself :) I know there are a few alternatives out there, but had to scratch my own itch.&lt;/p&gt;
    &lt;p&gt;I can recommend Apache Camel (https://camel.apache.org) for similar data integration pipelines and even agentic workflows. There are even visual editors for Camel today, which IMHO make it extremely user friendly to build any kind of pipeline quickly.&lt;/p&gt;
    &lt;p&gt;Ray Ozzie's Groove, by Groove Networks, embraced and extinguished by MSFT:&lt;/p&gt;
    &lt;p&gt;Ozzie, who had previously worked at IBM, was particularly interested in the challenge of remote collaboration. His vision culminated in the creation of Groove, which was released in 2001. The software distinguished itself from other collaboration tools of the time by allowing users to share files and work on documents in real-time—even without a continuous internet connection.&lt;/p&gt;
    &lt;p&gt;Groove’s architecture was innovative in that it utilized a peer-to-peer networking model, enabling users to interact directly with each other and share information seamlessly. This approach allowed for a level of flexibility and responsiveness that was often missing in traditional client-server models. Asynchronous collaboration was a key feature, where team members could work on projects without needing to be online simultaneously.&lt;/p&gt;
    &lt;p&gt;Vine. It was already pretty big back in 2013 but Twitter had no idea what to do with it. TikTok actually launched just a few months before Vine was shut down and erased from the internet.&lt;/p&gt;
    &lt;p&gt;Whoever took the decision to kill Vine was an absolute moron, even without hindsight. It was square videos, how hard could it have been to shove an ads banner above it and call it a day? Incredible&lt;/p&gt;
    &lt;p&gt;That is so fascinating. They completely ignored their most most valuable users and thus the users left and the site collapsed. Fascinating, the hubris of the leadership at twitter to think they knew better than their users&lt;/p&gt;
    &lt;p&gt;Pascal/Delphi - especially in the educational context.&lt;/p&gt;
    &lt;p&gt;Crazy fast compiler so doesn't frustrate trial &amp;amp; erroring students, decent type system without the wildness of say rust and all the basic programming building blocks you want students to grasp are present without language specific funkiness.&lt;/p&gt;
    &lt;p&gt;Delphi isn't dead - ver 13 was recently released - https://www.embarcadero.com/products/delphi. It's even cross platform, uses Skia as its graphics engine, its all very nice.&lt;/p&gt;
    &lt;p&gt;Iirc Delphi didn’t have threads, sockets, or OS integration (signals, file watching …). So it wasn’t suited to systems programming ie servers and services. It nailed gui applications, and that was a lot. Maybe freepascal has threads and sockets but imo it was too late.&lt;/p&gt;
    &lt;p&gt;Delphi 2, the first 32bit version of Delphi, had all of this. Some, like threads, even had wrappers (TThread), but Delphi came with Win32 bindings out of the box so all Win32 functions were available too - and it came bundled with documentation for the APIs. In addition, calling out to a DLL was trivial so even if a function wasn't available, you could just define it. Pretty much anything you could do with a C compiler was possible with Delphi 2 too.&lt;/p&gt;
    &lt;p&gt;Eh, sounds like that wouldn't be a problem for education purposes as the parent suggests? You need to be doing some really specific to leverage threads/file watching. And people probably use C to teach threads anyway.&lt;/p&gt;
    &lt;p&gt;Of course, being a good teaching language probably doesn't make the language popular or even survive. Python is so widely used not necessarily because it's simple to learn but because of its ecosystem.&lt;/p&gt;
    &lt;p&gt;Quartz Composer - Apple's "patch-based" visual programming environment. Drag out a bunch of nodes, wire them together, build a neat little GUI.&lt;/p&gt;
    &lt;p&gt;10+ years ago I'd regularly build all sorts of little utilities with it. It was surprisingly easy to use it to tap into things that are otherwise a lot more work. For instance I used it to monitor the data coming from a USB device. Like 3 nodes and 3 patches to make all of that work. Working little GUI app in seconds.&lt;/p&gt;
    &lt;p&gt;Apple hasn't touched it since 2016, I kind of hope it makes a comeback given Blender and more so Unreal Engine giving people a taste of the node based visual programming life.&lt;/p&gt;
    &lt;p&gt;You can still download it from Apple, and it still technically works but a lot of the most powerful nodes are broken in the newer OS's. I'd love to see the whole thing revitalized.&lt;/p&gt;
    &lt;p&gt;Have you looked at https://vvvv.org/ ? Maybe it's still comparatively too heavy but imho it's not that heavy (cf. touch designer and the likes). I want to play with it some more myself...&lt;/p&gt;
    &lt;p&gt;I loved quartz composer. It made it really easy to build all sorts of motion graphics. I’d see it used a lot at gigs to create audio-driven visuals. There was even a pretty cool VJ app built on it.&lt;/p&gt;
    &lt;p&gt;I’ve tried things like Touch Designer and Max MSP but they’re too heavy to just pick up and play with. QC was the right balance between simplicity and power.&lt;/p&gt;
    &lt;p&gt;Heroku? I know it's still around, though IDK who uses it, but I miss those days when it was thriving. One language, one deployment platform, one database, a couple plugins to choose from, everything simple and straightforward, no decision fatigue.&lt;/p&gt;
    &lt;p&gt;I often wonder, if AI had come 15 years earlier, would it have been a ton better because there weren't a billion different ways to do things? Would we have ever bothered to come up with all the different tech, if AI was just chugging through features efficiently, with consistent training data etc.?&lt;/p&gt;
    &lt;p&gt;As soon as they put a persistent Salesforce brand banner across the top which did nothing but waste space and put that ugly logo in our face every day, my team started our transition off Heroku pretty much right away.&lt;/p&gt;
    &lt;p&gt;Was going to say, I still use Heroku, and it's been working ok, but I'm getting increasingly creepy vibes from it and fear that it could be abandoned. Starting of course with Salesforce acquisition.&lt;/p&gt;
    &lt;p&gt;My company still uses Heroku in production actually. Every time I see the Salesforce logo show up I wince, but we haven't had any issues at all. It continues to make deployment very easy.&lt;/p&gt;
    &lt;p&gt;I talked to some Heroku reps at a local tech conference a year or so ago; it was clear that they were instructed to not have any personal opinions of the shredding of the free tier, but they did admit in a roundabout way that it lost them a lot of customers - some they were glad to get rid of as they were gaming the goodwill and costing Heroku lots of money, but weren't sure if it was a good long term idea or not.&lt;/p&gt;
    &lt;p&gt;&amp;gt; One language, one deployment platform, one database, a couple plugins to choose from, everything simple and straightforward, no decision fatigue.&lt;/p&gt;
    &lt;p&gt;I feel like this also describes something like Vercel. Having never personally used Heroku, is Vercel all that different except Ruby vs JS as the chosen language?&lt;/p&gt;
    &lt;p&gt;Didn't they offer free compute? IIRC all free compute on the Internet went away with the advent of cryptocurrencies as it became practical to abuse the compute and translate it directly into money.&lt;/p&gt;
    &lt;p&gt;I use the core product for my SaaS apps. Great platform, does what it needs to do. Haven’t felt the need to switch. Sometimes tempted to move to a single VPS with Coolify or Dokku, but not interested in taking on the server admin burden.&lt;/p&gt;
    &lt;p&gt;I think their main failure points were the following:&lt;/p&gt;
    &lt;p&gt;- not lowering prices as time went off. They probably kept a super-huger margin profit, but they’re largely irrelevant today&lt;/p&gt;
    &lt;p&gt;- not building their own datacenters and staying in aws. That would have allowed them to lower prices and gain even more market share. Everyone that has been in amazon/aws likely has seen the internal market rate for ec2 instances and know there’s a HUGE profit margin deriving by building datacenters. Add the recent incredible improvements to compute density (you can easily get 256c/512t and literally terabytes of memory in a 2u box) and you get basically an infinite money glitch.&lt;/p&gt;
    &lt;p&gt;Sandstorm: it seemed quite nice with a lot of possibilities when it launched in 2014, but it didn’t really take off and then it moved to sandstorm.org.&lt;/p&gt;
    &lt;p&gt;The actual problem with Sandstorm wasn't the era in which it was released. It will probably have the same problems even if released today. The problem was its application isolation mechanism - especially the data isolation (I think they were called grains). The mechanism is technically brilliant. But it's a big departure from how apps are developed today. It means that you have to do non-trivial modifications to web applications before they can run on the platform. The platform is better for applications designed to run on it in the start. It should have been marketed as a platform for building web applications, rather than as one for just deploying them.&lt;/p&gt;
    &lt;p&gt;Agreed. The best apps turned out to be the ones written for the platform. And many of those took people an afternoon to write, since the platform handled so much for you. Porting "normal" apps into Sandstorm felt like it defeated the purpose.&lt;/p&gt;
    &lt;p&gt;If I did it again I wouldn't focus on portability of existing apps. Especially today given you could probably vibe code most things (and trust the sandbox to protect you from AI slop security bugs).&lt;/p&gt;
    &lt;p&gt;Sandstorm was a great idea, but in my opinion it was targeted wrong. It should have been a platform and marketplace for B2B SaaS, not B2C SaaS. Specifically, all the third-party services which typical web apps use could have been Sandstorm apps, like analytics, logging, email, customer service etc.&lt;/p&gt;
    &lt;p&gt;You may be happy to hear that the new Fedora installer is using Firefox under the hood. Ephemeral profile dir on startup, plus custom userChrome.css to hide most of Firefox UI, and I couldn't tell a difference between it and Electron.&lt;/p&gt;
    &lt;p&gt;Tauri apps take advantage of the web view already available on every user’s system. A Tauri app only contains the code and assets specific for that app and doesn’t need to bundle a browser engine with every app.&lt;/p&gt;
    &lt;p&gt;Rendering will still use Edge/Chromium on a generic Windows machine.&lt;/p&gt;
    &lt;p&gt;Looking at firefox memory usage, i’m afraid the issue there is not memory safety but rather the average javascript developer being completely and blissfully unaware of and careless about memory memory usage of the software they write&lt;/p&gt;
    &lt;p&gt;ReactOS, the effort to create a free and open source Windows NT reimplementation.&lt;/p&gt;
    &lt;p&gt;It has been in existence in some form or another for nearly 30 years, but did not gain the traction it needed and as of writing it's still not in a usable state on real hardware. It's not abandoned, but progress on it is moving so slow that I doubt we'll ever see it be released in a state that's useful for real users.&lt;/p&gt;
    &lt;p&gt;It's too bad, because a drop in Windows replacement would be nice for all the people losing Windows 10 support right now.&lt;/p&gt;
    &lt;p&gt;On the other hand, I think people underestimate the difficulty involved in the project and compare it unfavorably to Linux, BSD, etc. Unix and its source code was pretty well publicly documented and understood for decades before those projects started, nothing like that ever really existed for Windows.&lt;/p&gt;
    &lt;p&gt;They had no chance. Look how long it tooks for Wine to get where they are. Their project is Wine + a kernel + device drivers compatibility, and a moving target.&lt;/p&gt;
    &lt;p&gt;&amp;gt; ReactOS, the effort to create a free and open source Windows NT reimplementation.&lt;/p&gt;
    &lt;p&gt;Some projects creep along slowly until something triggers an interest and suddenly they leap ahead.&lt;/p&gt;
    &lt;p&gt;MAME's Tandy 2000 implementation was unusable, until someone found a copy of Windows 1.0 for the Tandy 2000, then the emulation caught up until Windows ran.&lt;/p&gt;
    &lt;p&gt;Maybe ReactOS will get a big influx of activity after Windows 10 support goes offline in a couple days, or even shortly after when you can't turn AI spying off, not even three times a year.&lt;/p&gt;
    &lt;p&gt;Not so long ago there was a leak of windows’ source code, up to xp and 2003 server… the leak was so complete there are videos on YouTube about people building and booting (!!!) windows from there.&lt;/p&gt;
    &lt;p&gt;And yet, no big leap in ReactOS (at least for now).&lt;/p&gt;
    &lt;p&gt;They need to train an LLM with the windows source code and ask it to write an windows clone.&lt;/p&gt;
    &lt;p&gt;Apparently copyright law only applies for humans, generative AI gets away with stealing because there is too much monetary interest involved in looking the other way.&lt;/p&gt;
    &lt;p&gt;Leaks like this actually slow down ReactOS development.&lt;/p&gt;
    &lt;p&gt;The project is supposed to be a clean-room reverse engineering effort. If you even see Windows code, you are compromised, and should not work on ReactOS.&lt;/p&gt;
    &lt;p&gt;Wine, Proton and virtualization all got good enough that there's no need for a half-baked binary-compatible Windows reimplementation, and I think that took a lot of the oxygen out of what could have been energy towards ReactOS. It's a cool concept but not really a thing anybody requires.&lt;/p&gt;
    &lt;p&gt;I've heard people say this, and believed it myself for a long time, but recently I set up a windows XP VM and was shocked by how bad the quality of life was.&lt;/p&gt;
    &lt;p&gt;I think nostalgia is influencing this opinion quite a bit, and we don't realize the mountain of tiny usability improvements that have been made since XP&lt;/p&gt;
    &lt;p&gt;&amp;gt; I think people underestimate the difficulty involved in the project&lt;/p&gt;
    &lt;p&gt;I don't think people do, it sounds like a nearly impossible struggle, and at the end you get a Windows clone. I can't imagine hating yourself enough to work on it for an extended period of time for no money and putting yourself and your hard work in legal risk. It's a miracle we have Wine and serious luck that we have Proton.&lt;/p&gt;
    &lt;p&gt;People losing Windows 10 support need to move on. There's Linux if you want to be free, and Apple if you still prefer to be guided. You might lose some of your video games. You can still move to Windows 11 if you think that people should serve their operating systems rather than vice versa.&lt;/p&gt;
    &lt;p&gt;The internet before advertising, artificial intelligence, social media and bots. When folks created startups in their bedrooms or garages. The days when google slogan was “don’t be evil”.&lt;/p&gt;
    &lt;p&gt;I really miss the like 8 year ago push where a lot of major projects were moving to IRC. It's too bad Freenode took the opportunity to jump the shark and killed the momentum.&lt;/p&gt;
    &lt;p&gt;I mean, they're intentionally buried in the name of capital. If you need more than a Google search to find them, of course no one will go to them.&lt;/p&gt;
    &lt;p&gt;I don't like the siloing our information to Discord being a comparison to old internet. We had indexable information in forums that is "lost", not in the literal sense, but because you wouldn't be able to find it without obsessive digging to find it again. Conversations in Discord communities are very surface level and cyclical because it's far less straight forward to keep track of and link to answers from last week let alone two years ago. It is profoundly sad, to be honest.&lt;/p&gt;
    &lt;p&gt;I guess my abandoned/dead project might be Usenet. Sure, there were very dark places, and a lot of it was just a way to distribute porn, but that pretty much describes the Web. Usenet was like Reddit not controlled by a single company; like the Fediverse with infinite channels; like all of the world's threaded web fora displayed in exactly the way you want. We had that in the 1990s, and we're slowly groping toward getting it back.&lt;/p&gt;
    &lt;p&gt;I was a hold out on smartphones for a while and I used to print out k5 articles to read while afk... Just such an amazing collection of people sharing ideas and communal moderation, editing and up voting.&lt;/p&gt;
    &lt;p&gt;I learned about so many wierd and wonderful things from that site.&lt;/p&gt;
    &lt;p&gt;Microsoft Songsmith is another one that deserved a second life. It let you hum or sing a melody and would auto-generate full backing tracks, guitar, bass, drums, chords, in any style you chose.&lt;/p&gt;
    &lt;p&gt;It looked a bit goofy in the promo videos, but under the hood it was doing real-time chord detection and accompaniment generation. Basically a prototype of what AI music tools like Suno, Udio, or Mubert are doing today, fifteen years too early.&lt;/p&gt;
    &lt;p&gt;If Microsoft had kept iterating on it with modern ML models, it could’ve become the "GarageBand for ideas that start as a hum."&lt;/p&gt;
    &lt;p&gt;I liked del.icio.us, it was online bookmark sharing, but with actual people I knew, and it had genuinely useful category tagging. I guess it was basically replaced with https://old.reddit.com and maybe twitter.&lt;/p&gt;
    &lt;p&gt;Isn’t Pinboard (Who bought delicious) very similar? I also see bookmarks of my friend there, recently switched to Raindrop though as it’s much more maintained.&lt;/p&gt;
    &lt;p&gt;Full vector dpi aware UI, with grid, complex animation, and all other stuff that html5/css didn’t have in 2018 but silverlight had even in 2010 (probable even earlier).&lt;/p&gt;
    &lt;p&gt;MVVM pattern, two-way bindings. Expression Blend (basically figma) that allowed designers create UI that was XAML, had sample data, and could be used be devs as is with maybe some cleanup.&lt;/p&gt;
    &lt;p&gt;Excellent tooling, static analysis, debugging, what have you.&lt;/p&gt;
    &lt;p&gt;Rendered and worked completely the same in any browser (safari, ie, chrome, opera, firefox) on mac and windows&lt;/p&gt;
    &lt;p&gt;If that thing still worked, boy would we be in a better place regarding web apps.&lt;/p&gt;
    &lt;p&gt;Unfortunately, iPhone killed adobe flash and Silverlight as an aftermath. Too slow processor, too much energy consumption.&lt;/p&gt;
    &lt;p&gt;I am happy this one died. It was just another attempt by Microsoft to sidestep open web standards in favor of a proprietary platform. The other notorious example is Flash, and both should be considered malware.&lt;/p&gt;
    &lt;p&gt;Open web standards are great but consider where we could have been if competition drove them a different way? We're still stuck with JavaScript today (wasm still needs it). Layout/styling is caught up now but where would we be if that came sooner?&lt;/p&gt;
    &lt;p&gt;&amp;gt; Open web standards are great but consider where we could have been if competition drove them a different way? We're still stuck with JavaScript today (wasm still needs it). Layout/styling is caught up now but where would we be if that came sooner?&lt;/p&gt;
    &lt;p&gt;Why do you think JavaScript is a problem? And a big enough problem to risk destroying open web standards.&lt;/p&gt;
    &lt;p&gt;It's not that it's a problem I just don't think it's the best place to be. It was not designed to be used like this. Yes, it's better now but it's still not great - you still ship JS as text blobs that need to be parsed and compiled by every browser.&lt;/p&gt;
    &lt;p&gt;I don't see how alternatives to JavaScript are a risk to open web standards. WebAssembly is itself a part of those same standards. It's just a shame that it was built as an extension of JavaScript instead of being an actual alternative.&lt;/p&gt;
    &lt;p&gt;TypeScript exists for the same reason things like mypy exists, and no one in their right mind claims that python's openness should be threatened just because static typing is convenient.&lt;/p&gt;
    &lt;p&gt;Though in principle they serve similar purposes there are some big differences though. Python with types is still just python. Typescript is a different language from JS (guess it a superset?) and it being controlled by a large company could be considered problematic.&lt;/p&gt;
    &lt;p&gt;I suppose JS could go in the same direction and adopt the typing syntax from TS as a non-runtime thing. Then the typescript compiler would become something like mypy, an entirely optional part of the ecosystem.&lt;/p&gt;
    &lt;p&gt;&amp;gt; A remote code execution vulnerability exists when Microsoft Silverlight decodes strings using a malicious decoder that can return negative offsets that cause Silverlight to replace unsafe object headers with contents provided by an attacker. In a web-browsing scenario, an attacker who successfully exploited this vulnerability could obtain the same permissions as the currently logged-on user. If a user is logged on with administrative user rights, an attacker could take complete control of the affected system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights. Users whose accounts are configured to have fewer user rights on the system could be less impacted than users who operate with administrative user rights.&lt;/p&gt;
    &lt;p&gt;I loved silverlight. Before I got a “serious” job, I was a summer intern at a small civil engineering consultancy that had gradually moved into developing custom software that it sold mostly to local town/city/county governments in Arizona (mostly custom mapping applications; for example, imagine Google Maps but you can see an overlay of all the street signs your city owns and click on one to insert a note into some database that a worker needs to go repair it… stuff like that).&lt;/p&gt;
    &lt;p&gt;Lots of their stuff was delivered as Silverlight apps. It turns out that getting office workers to install a blessed plugin from Microsoft and navigate to a web page is much easier than distributing binaries that you have to install and keep up to date. And developing for it was pure pleasure; you got to use C# and Visual Studio, and a GUI interface builder, rather than the Byzantine HTML/JS/CSS ecosystem.&lt;/p&gt;
    &lt;p&gt;I get why it never took off, but in this niche of small-time custom software it was really way nicer than anything else that existed at the time. Web distribution combined with classic desktop GUI development.&lt;/p&gt;
    &lt;p&gt;&amp;gt; It turns out that getting office workers to install a blessed plugin from Microsoft and navigate to a web page is much easier than distributing binaries that you have to install and keep up to date. And developing for it was pure pleasure; you got to use C# and Visual Studio, and a GUI interface builder&lt;/p&gt;
    &lt;p&gt;IIRC around that time, you could also distribute full-blown desktop applications (C# WinForms) in a special way via the browser, by which they were easily installable and self-updating. The tech was called ClickOnce https://learn.microsoft.com/en-us/visualstudio/deployment/cl.... I think the flow was possibly IE-only, but that was not a big issue in a business context at that time.&lt;/p&gt;
    &lt;p&gt;Back in the day Microsoft sent someone to our university to demo all of their new and upcoming products. I remember Vista (then named Longhorn) and Silverlight being among them. I also remember people being particularly impressed by the demo they gave of the latter, but everything swiftly falling apart when someone queried whether it worked in other browsers. This was at a time when IE was being increasingly challenged by browsers embracing open standards. So there was an element of quiet amusement/frustration in seeing them continue to not get it.&lt;/p&gt;
    &lt;p&gt;Cooperative Linux (coLinux) seemed like a cool concept. It let you run the Linux kernel alongside the Windows kernel while allowing both full access to the hardware. Unfortunately it hasn't fully made the jump from 32-bit to 64-bit.&lt;/p&gt;
    &lt;p&gt;I really liked Google Circles, a feature of Google+ social media. It allowed you to target content to specific groups of users. You could have a "family" circle or a "work" circle and not have to worry about cross posting something accidentally. It was a small thing but it made it really easy to manage your posts.&lt;/p&gt;
    &lt;p&gt;I loved my N900, and my N800 before that, and I would have loved to have seen successors. Ultimately, I ended up switching to Android because I was tired of things only available as apps. Since then, web technologies have gotten better, and it's become much more feasible to use almost exclusively websites.&lt;/p&gt;
    &lt;p&gt;When I saw the title, my first thought was also MeeGo. While I don't believe it would have been all that great had it not been abandoned, MeeGo absolutely should not have been discarded in such a disgraceful manner.&lt;/p&gt;
    &lt;p&gt;They should have partnered not only with Intel, but with Palm, RIM or whatever other then-giant to rival Android. Those two went their own ways with WebOS and buying QNX, so maybe they could have agreed to form a consortium for an open and interoperable mobile OS&lt;/p&gt;
    &lt;p&gt;I was gonna say Meego. They killed it just as it was getting to a usable state. One of the last chances we had to get a proper third option in the mobile market.&lt;/p&gt;
    &lt;p&gt;Geocities ; It was a "put your html here" Free web hosting back when people barely knew what html was. Today you have to be a rocket scientist to find a way to host a free static "simple" page online.&lt;/p&gt;
    &lt;p&gt;Valid option - I used it myself for a very brief toe-dip into blogging earlier this year - but maybe worth noting that Google seems to flat-out refuse to crawl anything you put there. Won't pick it up by itself, won't read a sitemap you explicitly tell it about. It'll grudgingly index specific page URLs you tell it about, but that's kind of absurd. I don't know if it's because it's on a subdomain, or a Microsoft property, or because I was 100% ad- and tracker-free or what.&lt;/p&gt;
    &lt;p&gt;I tried DDG (Bing-backed, I believe) and it happily found everything with no manual intervention at all. That was the point where I ditched Google Search after 30 years.&lt;/p&gt;
    &lt;p&gt;tumblr is nothing like a webpage. LLMs were just invented 5 minutes ago and are losing money hand over fist until people are dependent, then will be very expensive to use; and you still have to figure out how to host, where to host, and how much it's going to cost you. So, I have no idea what you're getting at.&lt;/p&gt;
    &lt;p&gt;You could have said Wordpress.com or something. It's not quite a website, but it's close. It's also probably going to be Typepad (i.e. defunct) in a few years and Blogger is probably going to be there quicker than that.&lt;/p&gt;
    &lt;p&gt;Ask the LLM about hosting too. I’ve literally gone through this process recently - setting up hosting, a domain, and a static html site from scratch, vibing from start to finish. It is not difficult.&lt;/p&gt;
    &lt;p&gt;MS Sidewinder Force Feedback Pro (1997) and Sidewinder Force Feedback 2 (USB). You can buy similar today, but nowhere near the pricepoint. Also the out of the box support by Windows has vanished, and therefore the incentive of game developers to include force feedback.&lt;/p&gt;
    &lt;p&gt;I still have my MS Force Feedback 2, and it still works great!&lt;/p&gt;
    &lt;p&gt;I heard that some patent troll got a hold of the patent for force feedback joysticks, and all manufacturers just gave up on them because of the troll. The patent expired recently IIRC, so hopefully people will start making them again soon.&lt;/p&gt;
    &lt;p&gt;Boot2Gecko or whatever the browser as Operating system was called. This was a project that should have focused on providing whatever its current users needed expanding and evolving to do whatever those users wanted it to do better.&lt;/p&gt;
    &lt;p&gt;Instead it went chasing markets, abandoning existing users as it did so, in favour of potential larger pools of users elsewhere. In the end it failed to find a niche going forward while leaving a trail of abandoned niches behind it.&lt;/p&gt;
    &lt;p&gt;I adored my Firefox Phones. Writing apps was so easy I built myself dozens of little one-offs. Imagine if it had survived to today, its trivial html/css/js apps could be vibe coded on-device and be the ultimate personalized phone.&lt;/p&gt;
    &lt;p&gt;Luckily it wasn't long after Mozilla abandoned it that PWAs were introduced and I could port the apps I cared about.&lt;/p&gt;
    &lt;p&gt;For a few short months circa 2016 or 2017, KaiOS was the number one mobile OS in India. This was probably because of all the ultra-cheap KaiOS-powered Reliance Jio phones flooding the Indian market at the time.&lt;/p&gt;
    &lt;p&gt;I noticed the trend when I was working on a major web property for the Aditya Birla conglomerate. My whole team was pleasantly surprised, and we made sure to test everything in Firefox for that project. But everyone switched to Android + Chrome over the next few years, which was a shame.&lt;/p&gt;
    &lt;p&gt;It was a series of experiments with new approaches to programming. Kind of reminded me of the research that gave us Smalltalk. It would have been interesting to see where they went with it, but they wound down the project.&lt;/p&gt;
    &lt;p&gt;I worked on this project so I can give some insight. The main reason we didn't keep working on it was it was VC funded and we didn't have a model for making money in the short term. At the end we were pursuing research related to natural language programming and reinforcement learning in that area (I recently blogged about it here: https://mech-lang.org/post/2025-01-09-programming-chatgpt), and were considering folding our small team into OpenAI or Microsoft or something. But we wanted to work as a team and no one wanted to take us as a team, so we called it.&lt;/p&gt;
    &lt;p&gt;It didn't get far enough to be "used" in a production sense. There was enough interest and people were playing around with it, but no real traction to speak of. Frankly, language projects are difficult because these days they have to be bootstrapped to a certain size before there's any appreciable use, and VCs are not patient enough for that kind of timetable.&lt;/p&gt;
    &lt;p&gt;The Lockheed D-21 drone. Supersonic ramjet without the complexity of scramjet or the cost of turbojet, hamstrung by the need for a manned launch platform (making operations safety-critical… with predictable results) and recovery to get data off it. Twenty or forty years later it would have been paired by a small number of high-cost launcher UAVs and had its cost driven down to disposable, with data recovery over radio comms… but twenty to forty years later there’s nothing like it, and the maturation of satellites means there almost certainly never will be.&lt;/p&gt;
    &lt;p&gt;Skype ; Because my R.I.P. grandma was using it to talk to her relatives overseas just like she would use a phone, but it didn't cost an arm and a leg (unlike phone calls).&lt;/p&gt;
    &lt;p&gt;One of the best P2P software at the time. It was so simple and effective and allowed people to call real phones with Skype credit.&lt;/p&gt;
    &lt;p&gt;A genius product ripped my Microsoft. Have you used Microsoft Teams recently? Bad UI, hard to configure external hardware and good level of incompatibility, missing the good old "Echo / Sound Test Service". At a point I even installed Skype of my old Android but was sucking up too much battery.&lt;/p&gt;
    &lt;p&gt;First Class had broader userbase, such as schools and organizations in the groupware/collaborative segment (but also Mac user groups and so on).&lt;/p&gt;
    &lt;p&gt;First Class was a comercial product (the server). It had filesharing (UL/DL), it had it's own desktop, mail, chat, IM, voice mail and more. Started out on Mac, but later became cross platform. Still you can find presentations and setup guides on old forgotten University/Schools websites.&lt;/p&gt;
    &lt;p&gt;Hotline on the other hand, was very easy to setup and also pretty lightweight. It had a server tracker. In the beginning it was Mac only. Lot's of warez servers, but also different (non-warez) communities. It had filesharing (ul/dl from the file area), chat and a newsboard. The decline came after it's developers released the Windows versions. Most servers became clickbait pron/warez with malware etc. People started to move away to web and it Hotline basically died out.&lt;/p&gt;
    &lt;p&gt;Now, there was some open source/clone projects that kept the spirit alive. But after a few years, web forums, torrents and other p2p-apps took over. But there is some servers running still in 2025 and open source server/client software still developed.&lt;/p&gt;
    &lt;p&gt;Compared to First Class. Hotline was the Wild West. It only took 15 minutes to set up your own server and announce it on a server tracker (or keep it private).&lt;/p&gt;
    &lt;p&gt;When i use Discord and other apps/services, it's not hard to think of FC/HL. But then, they were solutions of it's time.&lt;/p&gt;
    &lt;p&gt;Macromedia Flash. Its scope and security profile was too big. It gave way to HTML’s canvas. But man, the tooling is still no where near as good. Movieclips, my beloved. I loved it all.&lt;/p&gt;
    &lt;p&gt;The iPhone killed Flash, probably because it would've been a way to create apps for it, more probably because it would've been laggy in the 2007 hardware, and people would've considered the iPhone "a piece of junk".&lt;/p&gt;
    &lt;p&gt;Interesting how Flash became the almost universal way to play videos in the browser, in the latter half of the 2000's (damn I'm old...).&lt;/p&gt;
    &lt;p&gt;It's incredible to me that they killed the whole tool instead of making a JS/Canvas port. Even without "full flash websites", there's still need for vectorial animations on the web.&lt;/p&gt;
    &lt;p&gt;As a Linux user, I hated Flash with a passion. It mostly didn't work despite several Linux implementations. About the time they sorted all the bugs out, it went away. Good riddance.&lt;/p&gt;
    &lt;p&gt;- Apple AirPort. Took a long time for advanced wifi solutions that "just work" to fill its place, and those are the Nest/Google things that have bs attached like mic+assistant. Unifi is too hard for consumers.&lt;/p&gt;
    &lt;p&gt;RethinkDB. Technically it still exists (under The Linux Foundation), but (IMO) the original company's widening scope (the Horizon BaaS) that eventually led to its demise killed its momentum.&lt;/p&gt;
    &lt;p&gt;Non Daw. Its breaking up each function of the DAW into its own application gave a better experience in each of those functions, especially when you only needed that aspect, you were not working around everything else that the DAW offers. The integration between the various parts was not all that it could be but I think the idea has some real potential.&lt;/p&gt;
    &lt;p&gt;Thought about Non immediately, but I figured it must have (had) about 2 other users amongst HNers, though. :) Nice to see it mentioned.&lt;/p&gt;
    &lt;p&gt;I used it quite a bit to produce radio shows for my country's public broadcasting. Because Non's line-oriented session format was so easy to parse with classic Unix tools, I wrote a bunch of scripts for it with Awk etc. (E.g. calculating the total length of clips highlighted with brown color in the DAW -- which was stuff meant for editing out; or creating a poor man's "ripple editing" feature by moving loosely-placed clips precisely side by side; or, eventually, converting the sessions to Samplitude EDL format, and, from there, to Pro Tools via AATranslator [1] (because our studio was using PT), etc. Really fun times!)&lt;/p&gt;
    &lt;p&gt;I've never heard of this software before. Any idea why it's discontinued? There are a bunch of weird messages that point to sort of a hostile take over of the project by forking, but it doesn't say anything about why or how it was discontinued.&lt;/p&gt;
    &lt;p&gt;From what I remember; it was mostly a one man project and he was writing it for himself, this upset some people and they felt his personal project should be democratic. It created a great deal of drama and he found himself having to deal with the drama every time he tried to engage with the community. Eventually he just walked away from it all. The fork died shortly after since the people who forked it were still dependent on him for development, all they really offered was a fork that was free of his supposed tyranny.&lt;/p&gt;
    &lt;p&gt;I tried it twice and the onboarding experience was insurmountable. Never managed to achieve a critical mass of followers or whatever they call it, so things were permanently read-only for me. I'd reply but nobody saw it.&lt;/p&gt;
    &lt;p&gt;It was a fascinating protocol underneath, but the social follow structure seemed to select strongly for folks who already had a following or something.&lt;/p&gt;
    &lt;p&gt;Drama has killed the technological progress in open source, if you ask me.&lt;/p&gt;
    &lt;p&gt;Having seen what goes on in the foss world and what goes on in the large faang-size corporate world, no wonder the corporate world is light-years ahead.&lt;/p&gt;
    &lt;p&gt;You don't need hierarchy, but you need some sort of process. "Consensus-based" just means that the loudest and most enduring shouters get their way, and when their way fails spectacularly, they leave in a huff (taking their work with them, badmouthing the project, and likely starting a fork that will pull more people out of the project and confuse potential users who just bail on trying either.)&lt;/p&gt;
    &lt;p&gt;Those people need to be pushed out early and often. That's what voting is for. You need a supermajority to force an end to discussion, and a majority to make a decision. If you hold up the discussion too long with too slim a minority, the majority can fork your faction out of the group. If the end of debate has been forced, and you can't work with the majority, you should leave yourself.&lt;/p&gt;
    &lt;p&gt;None of this letting the bullies get their way until everything is a disaster, then splitting up anyway stuff.&lt;/p&gt;
    &lt;p&gt;I can recall a distinct time period where us ssb devs were passing around the url to "The Tyranny of Structurelessness" via local-first encrypted direct messages. The essay helped us understand what was happening but alas we did not have the tools to stop it happening to us!&lt;/p&gt;
    &lt;p&gt;Hah. Naive take. I especially love this “Those people need to be pushed out early and often. That's what voting is for. You need a supermajority to force an end to discussion, and a majority to make a decision”. We know what needs to be done, but it’s not being done. There’s no consensus. Consensus take time and effort and has a lot of friction. I am part of a coop and I have seen first hand how this goes. And it’s fine, consensus based systems have other advantages, but they move slower that hierarchies.&lt;/p&gt;
    &lt;p&gt;The core of the issue is that drama is a way to impose your views of the world.&lt;/p&gt;
    &lt;p&gt;In foss software you quite literally don’t have to agree. You can fork the software and walk your own path. You can even pull changes from the original codebase, most licenses allow that.&lt;/p&gt;
    &lt;p&gt;Consensus is only necessary if you care about imposing your views of the world onto others.&lt;/p&gt;
    &lt;p&gt;The Lisp machine. I love Lisp, and I love the idea of every part of the system being a Lisp program that can be patched and modified at runtime by the user. Obviously in this day and age some security mechanisms would need to be introduced, but the system design is my hacker's dream.&lt;/p&gt;
    &lt;p&gt;In 2011, before TypeScript, Next.js or even React, they had seamless server-client code, in a strongly typed functional language with support for features like JSX-like inline HTML, async/await, string interpolation, built-in MongoDB ORM, CSS-in-JS, and many syntax features that were added to ECMAScript since then.&lt;/p&gt;
    &lt;p&gt;I find it wild how this project was 90%+ correct on how we will build web apps 14 years later.&lt;/p&gt;
    &lt;p&gt;CLPM, the Common Lisp Package Manager. The Quicklisp client doesn't do HTTPS, ql-https doesn't do Ultralisp, and OCICL (which I'm currently using) doesn't do system-wide packages. CLPM is a great project, but it's gone neglected long enough that it's bitrotted and needs some thorough patching to be made usable. Fortunately Common Lisp is still as stable as it has been for 31 years, so it's just the code which interacts with 3rd-party libraries that needs updating.&lt;/p&gt;
    &lt;p&gt;Yeah I felt that Quicklisp doesn't have the same features as package managers in other languages, and https is one of them. Also it's run by a single person which doesn't have too much time to constantly update the libraries.&lt;/p&gt;
    &lt;p&gt;In comparison I found Clojars^[0] for Clojure better and community driven like NPM. But obv Clojure has more business adoption than CL.&lt;/p&gt;
    &lt;p&gt;It's funny, on one hand I wouldn't want to use CL for work because when money gets involved in something you enjoy you stop enjoying it. On the other hand, however, I would really hate doing any serious work with a language I can't stand, like Python or Clojure.&lt;/p&gt;
    &lt;p&gt;It might be too soon to call it abandoned, but I was very intrigued by the Austral [1] language. The spec [2] is worth reading, it has an unusual clarity of thought and originality, and I was hoping that it would find some traction. Unfortunately it seems that the author is no longer actively working on it.&lt;/p&gt;
    &lt;p&gt;I played with Austral about a year ago and really wanted to use it for my projects, but as a hobbyist and mostly inept programmer it lacked the community and ecosystem I require. I found it almost intuitive and the spec does an amazing job of explaining the language. Would love to see it get a foothold.&lt;/p&gt;
    &lt;p&gt;The author got hired by Modular, the AI startup founded by the creators of LLVM and Swift, and is now working on the new language Mojo. He’s been bringing a bunch of ideas from Vale to Mojo&lt;/p&gt;
    &lt;p&gt;Oh nice! I just had an excuse to try mojo via max inference, it was pretty impressive. Basically on par with vllm for some small benchmarks, bit of variance in ttft and tpot. Very cool!&lt;/p&gt;
    &lt;p&gt;ICQ ; It was the first instant messenger, the technology could have adopted voice (and not get disrupted by Skype) and mobile (and not get disrupted by whatsapp) and group chat (and not get disrupted by slack/discord). But they didn't even try and put up a fight.&lt;/p&gt;
    &lt;p&gt;The last time ICQ was mentioned on HN I could still remember my ICQ number. It's a benchmark for how much my memory has deteriorated in the last five years. I do still remember it fondly, though.&lt;/p&gt;
    &lt;p&gt;They got bought by AOL in 98, long before most/all of this innovation happened?&lt;/p&gt;
    &lt;p&gt;Edit: in fact I'd say they were irrelevant before pretty much all of those innovations. By the time AIM or MSN Messenger really became popular, ICQ didn't matter anymore.&lt;/p&gt;
    &lt;p&gt;Lazarus is nice but both its apis and the ui feel like they're still stuck in the early 00's. It's not enough to look like VB6 / Delphi these days; you've got to keep up with what kinds of conventions we expect now.&lt;/p&gt;
    &lt;p&gt;Pocket. Never actually “read” anything later. But the dopamine hit of saving something with the click of a button to maybe find it later or tag. Yes there are solid alternatives, but Pocket had something sentimental about it.&lt;/p&gt;
    &lt;p&gt;It's been a number of years but my understanding was they kind of killed all the momentum it had by removing support for custom operators which broke everyone's code?&lt;/p&gt;
    &lt;p&gt;A simple UI programming pattern, with a circular, unidirectional data flow. It is very rigid by design, to be side-effect free, functional, unidirectional:&lt;/p&gt;
    &lt;p&gt;Yeah, Opa was wildly ahead of its time, I actually just wrote a top level comment about it. Basically Next.js+TypeScript+modern ECMAScript features, but in 2011.&lt;/p&gt;
    &lt;p&gt;Dreamweaver or some other real WYSISYG web page editor that could maybe deal with very basic JavaScript.&lt;/p&gt;
    &lt;p&gt;I just wanna make a mostly static site with links in and out of my domain. Maybe a light bit of interactivity for things like search that autocompletes.&lt;/p&gt;
    &lt;p&gt;Was recently reading about Project Ara, the modular smartphone project by Google/Motorola [1]. Would have liked to see a few more iterations of the idea. Something more customizable than what we have today without having to take the phone apart.&lt;/p&gt;
    &lt;p&gt;Flickr - that was the future of photo storage, sharing, discovery.&lt;/p&gt;
    &lt;p&gt;What was the bookmarks social tool called from 00’s? I loved it and it fell off the earth. You could save your bookmarks, “publish” them to the community, share etc..&lt;/p&gt;
    &lt;p&gt;What ever happened to those build your own homepage apps like startpage (I think)? I always thought those would take off&lt;/p&gt;
    &lt;p&gt;BT had this grand vision for basically providing rich multi-media through the phone line, but in ~1998. Think a mix of on-demand cable and "teleconferencing" with TV based internet (ceefax/red button on steriods)&lt;/p&gt;
    &lt;p&gt;It would have been revolutionary and kick started the UK's jump into online rich media.&lt;/p&gt;
    &lt;p&gt;However it wouldnt have got past the regulators as both sky and NTL(now virgin) would have protested loudly.&lt;/p&gt;
    &lt;p&gt;I built a chatbot startup in 2015. It integrated with Whatsapp (which was possible at the time with some hacks), and had:&lt;/p&gt;
    &lt;p&gt;- Multimodality: Text/audio/images input and output. Integrated OCR.&lt;/p&gt;
    &lt;p&gt;- Connection with an asterisk server, it could send and receive voice phone calls! I used it to call for pizzas to a local place via whatsapp. This was prior to Google's famous demo calling a hairdresser to book a haircut.&lt;/p&gt;
    &lt;p&gt;- It understood humor and message sentiment, told jokes and sometimes even chimed in with a "haha" if somebody said something funny in a group chat or sent an appropriate gif reaction&lt;/p&gt;
    &lt;p&gt;- Memory (facts database)&lt;/p&gt;
    &lt;p&gt;- Useful features such as scheduling, polling, translations, image search, etc.&lt;/p&gt;
    &lt;p&gt;Regarding the tech, I used external models (Watson was pretty good at the time), plus classical NLP processing and symbolic reasoning that I learned in college.&lt;/p&gt;
    &lt;p&gt;Nobody understood the point of it (where's the GUI? how do I know what to ask it? customers asked) and I didn't make a single dime out of the project. I closed it a couple years later. Sometimes I wonder what could've been of it.&lt;/p&gt;
    &lt;p&gt;Nokia Maps. There was a brief period in the early 2010s where Nokia had the best mapping product on the planet, and it was given away for free on Lumia phones at a time when TomTom and Garmin were still charging $60+ for navigation apps.&lt;/p&gt;
    &lt;p&gt;It's a real shame its raster functionality wasn't integrated into Illustrator. Adobe really butchered the whole Macromedia portfolio, didn't they?&lt;/p&gt;
    &lt;p&gt;(For those unfamiliar, Illustrator is a pure vector graphics editor; once you rasterize its shapes, they become uneditable fixed bitmaps. Fireworks was a vector graphics editor that rendered at a constant DPI, so it basically let you edit raster bitmaps like they were vectors. It was invaluable for pixel-perfect graphic design. Nothing since lets you do that, though with high-DPI screens and resolution-independent UIs being the norm these days, this functionality is less relevant than it used to be.)&lt;/p&gt;
    &lt;p&gt;At my last job m our designer was a Fireworks holdout. It was very pleasant. As someone who has to implement UIs, I greatly preferred it to Figma, though with today's flat boring designs there's a lot less slicing.&lt;/p&gt;
    &lt;p&gt;I always thought Microsoft Popfly had huge potential and was way ahead of its time. It made building web mashups feel like playing with Lego blocks, drag, drop, connect APIs, and instantly see the result.&lt;/p&gt;
    &lt;p&gt;If something like that existed today, powered by modern APIs and AI, it could become the ultimate no-code creativity playground.&lt;/p&gt;
    &lt;p&gt;VPRI, I was really hoping it would profoundly revolutionise desktop application development and maybe even lead to a new desktop model, and instead they wound up the project without having achieved the kind of impact I was dreaming of.&lt;/p&gt;
    &lt;p&gt;iirc Atom was the original Electron project. Eventually VS Code came along and took all the good ideas - the modularity through extensions, and Electron / web based cross platform, but made it really fast and added IDE like language support through LSP. Atom may be dead now, but the idea lives on in VS Code and the new project by the original developers of Atom: Zed&lt;/p&gt;
    &lt;p&gt;Anyone remember Openmoko, the first commercialised open source smart phone. Was heaps buggy though, not really polished, etc. It’s only redeeming feature was the open source software and hardware (specs?).&lt;/p&gt;
    &lt;p&gt;There was the https://en.wikipedia.org/wiki/PinePhone and it's successor PinePhonePro. Bugginess and general impracticalities brought up to more recent standards. Inflation-adjusted, of course!&lt;/p&gt;
    &lt;p&gt;I used this when it was brand new for a bit and it was so incredibly smooth and worked so well. It solved the problem of controlling systemd units remotely so well. I'm pretty sure the only reason it never actually took off was kubernetes and coreos's acquisition, however it actively solves the 'other half' of the k8s problem which is managing the state of the host itself.&lt;/p&gt;
    &lt;p&gt;Just on principle, I'd have liked to see it on the market for more than 49 days! It pains me as an engineer to think of the effort to bring a hardware device to market for such a minuscule run.&lt;/p&gt;
    &lt;p&gt;The prismatic news reader. It solved recommendations before the rest, but died because news died, and presumably made little money. Their attributed recommendations model is worth emulation. I don't remember if they supported both positive- and negative feedback, but Google news recommendation today do support attributed negative feedback.&lt;/p&gt;
    &lt;p&gt;RAM Disks. Basically extremely fast storage using RAM sticks slotted into a specially made board that fit in a PCIe slot. Not sure what happened to the project exactly but the website disappeared sometime in 2023.&lt;/p&gt;
    &lt;p&gt;The idea that you could read and write data at RAM speeds was really exciting to me. At work it's very common to see microscope image sets anywhere from 20 to 200 GB and file transfer rates can be a big bottleneck.&lt;/p&gt;
    &lt;p&gt;Products to attach RAM to expansion slots have long existed and continue to be developed. It's a matter of adding more memory once all of the DIMMs are full.&lt;/p&gt;
    &lt;p&gt;What to do with it, once it's there, is a concern of software, but specialized hardware is needed to get it there.&lt;/p&gt;
    &lt;p&gt;Visix Vibe. It was a "WYSIWYG"-type visual programming environment for .. Java.&lt;/p&gt;
    &lt;p&gt;It had its own cross platform UI and other frameworks too, so you could "write once in Java, and ship on all the things" .. well theoretically.&lt;/p&gt;
    &lt;p&gt;It got abandoned too soon. But it was quite fun to build apps with it for a while, almost Delphi- like. I always wonder if it went open source, if things would have been different vis a vis Flash, etc.&lt;/p&gt;
    &lt;p&gt;I've argued this for years on this site...but AOL.&lt;/p&gt;
    &lt;p&gt;At its best, having IM, email, browser, games, keywords, chats, etc. was a beautiful idea IMO. That they were an ISP seemed secondary or even unrelated to the idea. But they chose to charge for access even in the age of broadband, and adopt gym level subscription tactics to boot, and people decided they'd rather not pay it which is to be expected. I often wonder if they'd have survived as a software company otherwise.&lt;/p&gt;
    &lt;p&gt;They were basically a better thought out Facebook before Facebook, in my opinion.&lt;/p&gt;
    &lt;p&gt;The IBM school's computer. Developed by IBM Hursley in 1967, it was years ahead in its design, display out to a television and storage on normal audio tape. Would have kick started an educational revolution if it had been launched beyond the 10 prototype machines.&lt;/p&gt;
    &lt;p&gt;Connect your phone to a display, mouse, keyboard and get a full desktop experience.&lt;/p&gt;
    &lt;p&gt;At the time smartphones were not powerful enough, cables were fiddly (adapters, HDMI, USB A instead of a single USB c cable) and virtualization and containers not quite there.&lt;/p&gt;
    &lt;p&gt;Today, going via pkvm seems like promising approach. Seamless sharing of data, apps etc. will take some work, though.&lt;/p&gt;
    &lt;p&gt;&amp;gt;This presentation introduces Via, a virtual file system designed to address the challenges of large game downloads and storage. Unlike cloud gaming, which suffers from poor image quality, input latency, and high hosting costs, Via allows games to run locally while only downloading game data on demand. The setup process is demonstrated with Halo Infinite, showing a simple installation that involves signing into Steam and allocating storage space for Via's cache.&lt;/p&gt;
    &lt;p&gt;&amp;gt;Via creates a virtual Steam library, presenting all owned games as installed, even though their data is not fully downloaded. When a game is launched, Via's virtual file system intercepts requests and downloads only the necessary game content as it's needed. This on-demand downloading is integrated with the game's existing streaming capabilities, leveraging features like level-of-detail and asset streaming. Performance metrics are displayed, showing download rates, server ping, and disk commit rates, illustrating how Via fetches data in real-time.&lt;/p&gt;
    &lt;p&gt;&amp;gt;The system prioritizes caching frequently accessed data. After an initial download, subsequent play sessions benefit from the on-disk cache, significantly reducing or eliminating the need for network downloads. This means the actual size of a game becomes less relevant, as only a portion of it needs to be stored locally. While server locations are currently limited, the goal is to establish a global network to ensure low ping. The presentation concludes by highlighting Via's frictionless user experience, aiming for a setup so seamless that users are unaware of its presence. Via is currently in early access and free to use, with hopes of future distribution partnerships.&lt;/p&gt;
    &lt;p&gt;I'm amazed the video still has under 4,000 views. Sadly, Flaherty got hired by XAI and gave up promoting the project.&lt;/p&gt;
    &lt;p&gt;Wait until you hear that almost all Unity games don't really have asset streaming because the engine loads things eagerly by default.&lt;/p&gt;
    &lt;p&gt;I don't see how this could take off. Internet speeds are getting quicker, disk space is getting cheaper, and this will slow down load times. And what's worse is the more you need this tech the worse experience you have.&lt;/p&gt;
    &lt;p&gt;Gitless. I'm a fan of software that allows you to get your feet wet with simple concepts and progressively add complex ones when you feel you're ready. Gitless was my introduction to git.&lt;/p&gt;
    &lt;p&gt;There was a virtual platform through which to learn Chinese called ‘Zon’. Someone obviously put years of work into it but no one ever joined and it turned into this great looking ghost town.&lt;/p&gt;
    &lt;p&gt;People talk so much about how you need to write code that fits well within the rest of the codebase, but what tools do we have to explore codebases and see what is connected to what? Clicking through files feels kind of stupid because if you have to work with changes that involve 40 files, good luck keeping any of that in your working memory. In my experience, the JetBrains dependency graphs also aren't good enough.&lt;/p&gt;
    &lt;p&gt;Sourcetrail was a code visualization tool that allowed you to visualize those dependencies and click around the codebase that way, see what methods are connected to what and so on, thanks to a lovely UI. I don't think it was enough alone, but I absolutely think we need something like this: https://www.dbvis.com/features/database-management/#explore-... but for your code, especially for codebases with hundreds of thousands or like above a million SLoC.&lt;/p&gt;
    &lt;p&gt;I yearn to some day view entire codebases as graphs with similarly approachable visualization, where all the dependencies are highlighted when I click an element. This could also go so, so much further - you could have a debugger breakpoint set and see the variables at each place, alongside being able to visually see how code is called throughout the codebase, or hell, maybe even visualize every possible route that could be taken.&lt;/p&gt;
    &lt;p&gt;In the late 90s there was a website called fuckedcompany which was a place where people could spill the beans about startups (mainly in silicon valley). It was anonymous and a pretty good view into the real state of tech. Now there is twitter/x but it's not as focused on this niche.&lt;/p&gt;
    &lt;p&gt;The closest sites I've found are Web3 is Going Just Great and Pivot to AI, which are newsfeeds of various car crashes in their respective hype arenas, although without any insider scoops/gossip.&lt;/p&gt;
    &lt;p&gt;Gnome Conduit software. Used to synchronize a lot of my local-first data (calendar, photos, music) to different online services. Nice to see in one place where everything goes and what is the sync status.&lt;/p&gt;
    &lt;p&gt;10/GUI did some deep thinking about the limitations and potential of the (then-fairly new) multi touch input method. I wished something more had come out of it, instead it stayed a niche concept art video that is mostly forgotten now.&lt;/p&gt;
    &lt;p&gt;I’m not arguing the solutions it outlined are good, but I think some more discussion around how we interact with touch screens would be needed. Instead, we are still typing on a layout that was invented for mechanical typewriters - in 2025, on our touch screens.&lt;/p&gt;
    &lt;p&gt;I came to say Opa too. I liked the language but the meteor-like framework it was bundled with, while nice for prototyping, was a pain to work around when it didn't do what you needed.&lt;/p&gt;
    &lt;p&gt;That said, frameworks were all the buzz back in the day, so the language alone probably wouldn't have gone anywhere without it.&lt;/p&gt;
    &lt;p&gt;Pivotal Tracker ; Users loved it, it had an excellent model for tracking work and limiting work in progress on software projects. There is no real good alternative and the usual suspects for tracking project work are horrible in comparison.&lt;/p&gt;
    &lt;p&gt;I don’t know about that. My employer was all in on Pivotal and we used it for several years. Then one day a dev stumbled across Linear, we all tried it, and switched the whole company within a month or so.&lt;/p&gt;
    &lt;p&gt;The TUNES [1] operating system and programming language project. The reason for its failure are described perfectly on the archival website:&lt;/p&gt;
    &lt;p&gt;&amp;gt; TUNES started in 1992-95 as an operating system project, but was never clearly defined, and it succumbed to design-by-committee syndrome and gradually failed. Compared to typical OS projects it had very ambitious goals, which you may find interesting.&lt;/p&gt;
    &lt;p&gt;I had seen it before and I did find it interesting, as well as some other ideas from other systems (including Amiga, TRON, capability-based systems, etc), and I had some of my own ideas. (I had also thought of some similar ideas independently, but not all of them.) I do not completely agree with all of the ideas. Also, I think that a new computer hardware design can be made to support the new operating system (although emulation is also possible). (My own operating system idea currently does not have a name, and has some similar ideas from TUNES (and TRON, etc) and many differences.)&lt;/p&gt;
    &lt;p&gt;CueCat it was an affordable barcode scanner that anyone could have connected to their computer, and it scanned barcodes. It took almost two decades before we could finally do it again with our mobile phones.&lt;/p&gt;
    &lt;p&gt;netflix falcor. the graphql hype killed a much better alternative for many usecases. there were only a few missing pieces and improvements such as a proxy based adapter layer for popular frontend frameworks. Im now the lonely last user hoping to find a way to reboot development&lt;/p&gt;
    &lt;p&gt;Google Wave. It was horrible from a performance point of view, but was really interesting to use. Some of its features have made their way into the Google docs etc ecosystem and Office 365. But not all&lt;/p&gt;
    &lt;p&gt;Google Wave ; It had a bunch of agents participating in editing the text together with you, making spelling fixes, finding additional information to enrich your content, and so much more.&lt;/p&gt;
    &lt;p&gt;wua.la … the original version. You share part of your storage to get the same amount back as resilient cloud storage from others. Was bought and killed by LaCie (now Seagate). They later provided paid-for cloud storage under the same name but it didn’t take off.&lt;/p&gt;
    &lt;p&gt;XenClient. I would really love to have some minimal OS HyperVisor running, and then you slap multiple OSes on top of that w/ easy full GUI switching via some hotkeys like Ctrl+Shift+F1. Additionaly, special drivers to virtualize Gfx and Sfx devices so every VM have full desktop capabilities and low latency.&lt;/p&gt;
    &lt;p&gt;Unfortunately, it died because its very niche and also they couldnt keep up with development of drivers for desktops.. This is even worse today...&lt;/p&gt;
    &lt;p&gt;I'm booting and running Haiku on my Thinkpad. It's a from-scratch workalike of BeOS, and able to run Be software. Though, frankly, Be software is totally 1990s, so a lot of Linux software written for Qt has been ported to Haiku.&lt;/p&gt;
    &lt;p&gt;In the end I wound up with basically the same application software as on my Debian desktop, except running on Haiku instead of Linux. Haiku is noticeably snappier and more responsive than Linux+X+Qt+KDE, though.&lt;/p&gt;
    &lt;p&gt;In late September or early October 1996, Fry's Electronics places a full page promo ad on the back of the business section of the San Jose Mercury News for OS/2 4.0 "WRAP [sic]" in 256 pt font in multiple places. Oops!&lt;/p&gt;
    &lt;p&gt;Nah, that time has passed and there's not much to miss from the base OS. What would be interesting is for IBM to publish the source to the Workplace Shell and the underlying SOM code so it might get a new life running on one of the free *nixes.&lt;/p&gt;
    &lt;p&gt;I could think of many examples, but I'll talk about the top four that I have in mind, that I'd like to see re-evaluated for today's times.&lt;/p&gt;
    &lt;p&gt;1. When Windows Vista was being developed, there were plans to replace the file system with a database, allowing users to organize and search for files using database queries. This was known as WinFS (https://en.wikipedia.org/wiki/WinFS). I was looking forward to this in the mid-2000s. Unfortunately Vista was famously delayed, and in an attempt to get Vista released, Microsoft pared back features, and one of these features was WinFS. Instead of WinFS, we ended up getting improved file search capabilities. It's unfortunate that there's been no proposals for database file systems for desktop operating systems since.&lt;/p&gt;
    &lt;p&gt;2. OpenDoc (https://en.wikipedia.org/wiki/OpenDoc) was an Apple technology from the mid-1990s that promoted component-based software. Instead of large, monolithic applications such as Microsoft Excel and Adobe Photoshop, functionality would be offered in the form of components, and users and developers can combine these components to form larger solutions. For example, as an alternative to Adobe Photoshop, there would be a component for the drawing canvas, and there would be separate components for each editing feature. Components can be bought and sold on an open marketplace. It reminds me of Unix pipes, but for GUIs. There's a nice promotional video at https://www.youtube.com/watch?v=oFJdjk2rq4E.&lt;/p&gt;
    &lt;p&gt;OpenDoc was a radically different paradigm for software development and distribution, and I think this was could have been an interesting contender against the dominance that Microsoft and Adobe enjoys in their markets. OpenDoc actually did ship, and there were some products made using OpenDoc, most notably Apple's Cyberdog browser (https://en.wikipedia.org/wiki/Cyberdog).&lt;/p&gt;
    &lt;p&gt;Unfortunately, Apple was in dire straits in the mid-1990s. Windows 95 was a formidable challenger to Mac OS, and cheaper x86 PCs were viable alternatives to Macintosh hardware. Apple was an acquisition target; IBM and Apple almost merged, and there was also an attempt to merge Apple with Sun. Additionally, the Macintosh platform depended on the availability of software products like Microsoft Office and Adobe Photoshop, the very types of products that OpenDoc directly challenged. When Apple purchased NeXT in December 1996, Steve Jobs returned to Apple, and all work on OpenDoc ended not too long afterward, leading to this now-famous exchange during WWDC 1997 between Steve Jobs and an upset developer (https://www.youtube.com/watch?v=oeqPrUmVz-o).&lt;/p&gt;
    &lt;p&gt;I don't believe that OpenDoc fits in with Apple's business strategy, even today, and while Microsoft offers component-based technologies that are similar to OpenDoc (OLE, COM, DCOM, ActiveX, .NET), the Windows ecosystem is still dominated by monolithic applications.&lt;/p&gt;
    &lt;p&gt;I think it would have been cool had the FOSS community pursued component-based software. It would have been really cool to apt-get components from remote repositories and link them together, either using GUI tools, command-line tools, or programmatically to build custom solutions. Instead, we ended up with large, monolithic applications like LibreOffice, Firefox, GIMP, Inkscape, Scribus, etc.&lt;/p&gt;
    &lt;p&gt;3. I am particularly intrigued by Symbolics Genera (https://en.wikipedia.org/wiki/Genera_(operating_system)), an operating system designed for Symbolics Lisp machines (https://en.wikipedia.org/wiki/Symbolics). In Genera, everything is a Lisp object. The interface is an interesting hybrid of early GUIs and the command line. To me, Genera could have been a very interesting substrate for building component-based software; in fact, it would have been far easier building OpenDoc on top of Common Lisp than on top of C or C++. Sadly, Symbolics' fortunes soured after the AI winter of the late 1980s/early 1990s, and while Genera was ported to other platforms such as the DEC Alpha and later the x86-64 via the creation of a Lisp machine emulator, it's extremely difficult for people to obtain a legal copy, and it was never made open source. The closest things to Genera we have are Xerox Interlisp, a competing operating system that was recently made open source, and open-source descendants of Smalltalk-80: Squeak, Pharo, and Cuis-Smalltalk.&lt;/p&gt;
    &lt;p&gt;4. Apple's "interregnum" years between 1985 and 1996 were filled with many intriguing projects that were either never commercialized, were cancelled before release, or did not make a splash in the marketplace. One of the most interesting projects during the era was Bauhaus, a Lisp operating system developed for the Newton platform. Mikel Evins, a regular poster here, describes it here (https://mikelevins.github.io/posts/2021-07-12-reimagining-ba...). It would have been really cool to have a mass-market Lisp operating system, especially if it had the same support for ubiquitous dynamic objects like Symbolic Genera.&lt;/p&gt;
    &lt;p&gt;OpenDoc was mostly given to Taligent (the Apple and IBM joint venture) to develop. It was full-on OO: about 35 files for a minimal application, which meant that Erich Gamma had to build a whole new type of IDE which was unusable. He likely learned his lesson: it's pretty hard to define interfaces between unknown components without forcing each one to know about all the others.&lt;/p&gt;
    &lt;p&gt;MIME types for mail addressed much of the demand for pluggable data types.&lt;/p&gt;
    &lt;p&gt;Re: obtaining a legal copy of Genera, as of 2023 Symbolics still existed as a corporate entity and they continued to sell x86-64 laptops with "Portable Genera 2.0". I bought one from them then, and occasionally see them listing some on Ebay. (This isn't intended as an advertisement or endorsement, just a statement. I think it's quite unfortunate that Symbolics's software hasn't been made freely available, since it's now really only of historical interest.)&lt;/p&gt;
    &lt;p&gt;I'm intrigued by Symbolics Genera too. It would have been interesting seeing further development of Lisp OS, especially when they would have had internet connection. Rewriting part of your OS and see the changes in real time? Maybe web apps could have been just software written in Lisp, downloaded on the machine and directly being executed in a safe environment on top of the Genera image. Big stuff.&lt;/p&gt;
    &lt;p&gt;Windows Phone's UI is still with us, from Windows 8 onwards. Everything on 8, 10, and 11 is optimized for a touch interface on a small screen, which is ridiculous on a modern desktop with a 32" or so monitor and a trackball or mouse.&lt;/p&gt;
    &lt;p&gt;False. The Metro design was abandoned long ago. No live tiles, no typography-first minimal UIs in windows 10/11. I pin an email app to taskbar/start, I don't see the unread count.&lt;/p&gt;
    &lt;p&gt;From Windows 10, there is a switch between desktop and touch mode.&lt;/p&gt;
    &lt;p&gt;They stopped supporting small tablets some years ago though, and made it worse with every Windows update. I can only surmise that it was to make people stop using them. Slow GUI, low contrast, killed apps.&lt;/p&gt;
    &lt;p&gt;Mozilla heka. As far as data collection and processing goes, we are still stuck with Logstash after all of these years. Heka promised a much more efficient solution, being implemented with Go and Lua plugins.&lt;/p&gt;
    &lt;p&gt;https://www.kite.com for python i first learned about it when i was working in an university group and had the task to transform a windowing algorithm already working on matlab to python. it felt like a modern linter and lsp with additional support through machine learning. i don't quite know why it got comparative small recognition, but perhaps enough to remain an avantgarde pioneering both python and machine learning support for further generations and wider applications.&lt;/p&gt;
    &lt;p&gt;i first learned about it when i was working in an university group and had the task to transform a windowing algorithm already working on matlab to python. it felt like a modern linter and lsp with additional support through machine learning. i don't quite know why it got comparative small recognition, but perhaps enough to remain an avantgarde pioneering both python and machine learning support for further generations and wider applications.&lt;/p&gt;
    &lt;p&gt;Fro me, DESQview. Microsoft tried to buy it in order to use its tech in their windows system. I wonder how things would be today if they were able to purchase it. But DESQview said "no".&lt;/p&gt;
    &lt;p&gt;Instead it went into a slow death spiral due to Windows 95.&lt;/p&gt;
    &lt;p&gt;Love seeing this one. My uncle was co-founder of Quarterdeck, and I grew up in a world of DESQview and QEMM. It was a big influence on me as a child.&lt;/p&gt;
    &lt;p&gt;Got a good family story about that whole acquisition attempt, but I don't want to speak publicly on behalf of my uncle. I know we've talked at length about the what-ifs of that moment.&lt;/p&gt;
    &lt;p&gt;I do have a scattering of some neat Quarterdeck memorabilia I can share, though:&lt;/p&gt;
    &lt;p&gt;DESQview/X sucked the wind out of DESQview's sails. It was, on paper, a massive upgrade. I had been running DESQview for years, with a dial-up BBS in the background.&lt;/p&gt;
    &lt;p&gt;But you couldn't actually buy /X. After trying to buy a copy, my publisher even contacted DESQ's marketing people to get a copy for me, and they wouldn't turn one over. Supposedly there were some copies actually sold, but too few, too late, and then /X was dropped. There was at least one more release of plain DESQview after that, but by then Windows was eating its lunch.&lt;/p&gt;
    &lt;p&gt;OSI's session layer did very little more than TCP/UDP port numbers; in the OSI model you would open a connection to a machine, then use that connection to open a session to a particular application.&lt;/p&gt;
    &lt;p&gt;X.400 was a nice idea, but the ideal of having a single global directory predates security. I can understand why it never happened&lt;/p&gt;
    &lt;p&gt;On X.509, the spec spends two chapters on attribute certificates, which I've never seen used in the wild. It's a shame; identity certificates do a terrible job at authentication&lt;/p&gt;
    &lt;p&gt;Fortress language. It suffered from being too Haskell-like in terms of too many, non-orthogonal features. Rust and Go applied lessons from it perhaps indirectly.&lt;/p&gt;
    &lt;p&gt;their operator precedence system was one of my favourite pieces of language design. the tl;dr was that you could group operators into precedence sets, and an expression involving operators that all came from the same set would have that set's precedence rules applied, but if you had an expression involving mixed sets you needed to add the parentheses. crucially, they also supported operator overloading, and the same operator could be used in a different set as long as everything could be parsed unambiguously. (caveat, I never used the language, I just read about the operator design in the docs and it was very eye opening in the sense that every other language's operator precedence system suddenly felt crude and haphazard)&lt;/p&gt;
    &lt;p&gt;nah, glass was impressive for a such a big org like google, but smartphones are popular because people use them like portable televisions. glanceable info and walking directions are more like an apple watch sized market, without the fashion element. meta is about to find out.&lt;/p&gt;
    &lt;p&gt;I don’t think people are downvoting for the mention of Google Glass, but due to the rest of the comment making a value judgement many are sure to disagree with.&lt;/p&gt;
    &lt;p&gt;google glass sucks though and glasses will never be a thing. google and meta and … can spend $8T and come up with the most insane tech etc but no one will be wearing f’ing glasses :)&lt;/p&gt;
    &lt;p&gt;Humane AI Pin. I think they launched 2 years too early and were too greedy with device pricing and subscription. Also if they focused as accessory for Android/iPhone they could reduce power usage and cost as well.&lt;/p&gt;
    &lt;p&gt;Their execution was of course bad but I think today current LLM models are better and faster and there is much more OSS models to reduce costs. Hardware though looked nice and pico projector interesting concept even though not the best executed.&lt;/p&gt;
    &lt;p&gt;Wine predates ReactOS. It was basically a FOSS duplicate of Sun's WABI.&lt;/p&gt;
    &lt;p&gt;I wrote a bunch of software in Borland Delphi, which ran in Windows, Wine, and ReactOS with no problems. Well, except for ReactOS' lack of printing support.&lt;/p&gt;
    &lt;p&gt;As long as you stay within the ECMA or published Windows APIs, everything runs fine in Wine and ReactOS. But Microsoft products are full of undocumented functions, as well as checks to see if they're running on real Windows. That goes back to the Windows 3.1 days, when 3.1 developers regularly used OS/2 instead of DOS, and Microsoft started adding patches to fail under OS/2 and DR-DOS. So all that has to be accounted for by Wine and ReactOS. A lot of third-party software uses undocumented functions as well, especially stuff written back during the days when computer magazines were a thing, and regularly published that kind of information. A lot of programmers found the lure of undocumented calls to be irresistible, and they wound up in all kinds of commercial applications where they really shouldn't have been.&lt;/p&gt;
    &lt;p&gt;In my experience anything that will load under Wine will run with no problems. ReactOS has some stability problems, but then the developers specifically call it "alpha" software. Despite that, I've put customers on ReactOS systems after verifying all their software ran on it. It gets them off the Microsoft upgrade treadmill. Sometimes there are compatibility problems and I fall back to Wine on Linux. Occasionally nothing will do but real Windows.&lt;/p&gt;
    &lt;p&gt;Hard disagree. The Humane AI Pin ad was a classic silicon valley ad that screamed B2VC and demonstrated nothing actually useful that couldn't be done with an all-in-one phone app (or even the ChatGPT app) and bluetooth earbuds that you already have.&lt;/p&gt;
    &lt;p&gt;Which reduces its innovation level to nothing more than a chest-mounted camera.&lt;/p&gt;
    &lt;p&gt;You want real B2C products that people would actually buy? Look at the Superbowl ads instead. Then watch the Humane ad again. It's laughable.&lt;/p&gt;
    &lt;p&gt;Also, I did not experience them personally, but I love watching computing history videos on YouTube, and a lot of the computers and operating systems from the 1980s and early 1990s got buried too soon, mostly because of their owners being short-sighted idiots in not realizing the full potential of what computers and video games could become, and having wildly successful hits on their hands with legions of faithful fans but not knowing how to build on that success or what the fans actually wanted to see in updated hardware.&lt;/p&gt;
    &lt;p&gt;LSR, the "Linux Screen Reader", an ambitiousy designed Python implementation of a GUI screen reader developed by IBM starting around 2006 or so. The project was ended 2008 when IBM ended all its Accessibility involvement in FLOSS.&lt;/p&gt;
    &lt;p&gt;Ceylon, JVM language, developed by Red Hat, now abandoned at Eclipse. Lost the race with Kotlin but proposed more than just syntax sugar over Java. Anonymous union types, comprehensions, proper module system...&lt;/p&gt;
    &lt;p&gt;Plone CMS. When it appeared in 2001, there was nothing comparable. I'm not sure there still is. It was very flexible, allowed to build complex websites from components. Many ideas were pretty novel, at least I've never seen them in any web framework/CMS before. It still exists but nowhere as popular as it was in 2000-2010s.&lt;/p&gt;
    &lt;p&gt;Knowing when to say "no" to a project is an important skill.&lt;/p&gt;
    &lt;p&gt;One always must define a one sentence goal or purpose, before teams think about how to build something.&lt;/p&gt;
    &lt;p&gt;Cell processors, because most coders can't do parallelism well&lt;/p&gt;
    &lt;p&gt;Altera consumer FPGA, as they chose behavioral rather than declarative best practices... then the Intel merger... metastability in complex systems is hard, and most engineers can't do parallelism well...&lt;/p&gt;
    &lt;p&gt;World Wide Web, because social-media and Marketers&lt;/p&gt;
    &lt;p&gt;Dozens of personal projects, because sometimes things stop being fun. =3&lt;/p&gt;
    &lt;p&gt;Founder perspective: “avoid patents by staying 20 years behind” is the tragedy. I published a 2-page CC0 initiative that splits protection into two layers: • GLOBAL layer — fast, low-friction recognition for non-strategic inventions • LOCAL-STRATEGIC layer — conventional national control for sensitive tech Goal: cut admin drag/time-to-market while keeping sovereignty intact.&lt;/p&gt;
    &lt;p&gt;Apple’s scanning system for CSAM. The vast majority of the debate was dominated by how people imagined it worked, which was very different to how it actually worked.&lt;/p&gt;
    &lt;p&gt;It was an extremely interesting effort where you could tell a huge amount of thought and effort went into making it as privacy-preserving as possible. I’m not convinced it’s a great idea, but it was a substantial improvement over what is in widespread use today and I wanted there to be a reasonable debate on it instead of knee-jerk outrage. But congrats, I guess. All the cloud hosting systems scan what they want anyway, and the one that was actually designed with privacy in mind got screamed out of existence by people who didn’t care to learn the first thing about it.&lt;/p&gt;
    &lt;p&gt;Good riddance to a system that would have provided precedent for client-side scanning for arbitrary other things, as well as likely false positives.&lt;/p&gt;
    &lt;p&gt;&amp;gt; I wanted there to be a reasonable debate on it&lt;/p&gt;
    &lt;p&gt;I'm reminded of a recent hit-piece about Chat Control, in which one of the proponent politicians was quoted as complaining about not having a debate. They didn't actually want a debate, they wanted to not get backlash. They would never have changed their minds, so there's no grounds for a debate.&lt;/p&gt;
    &lt;p&gt;We need to just keep making it clear the answer is "no", and hopefully strengthen that to "no, and perhaps the massive smoking crater that used to be your political career will serve as a warning to the next person who tries".&lt;/p&gt;
    &lt;p&gt;This. No matter how cool the engineering might have been, from the perspective of what surveillance policies it would have (and very possibly did) inspire/set precedent for… Apple was very much creating the Torment Nexus from “Don’t Create the Torment Nexus.”&lt;/p&gt;
    &lt;p&gt;&amp;gt; from the perspective of what surveillance policies it would have (and very possibly did) inspire/set precedent for…&lt;/p&gt;
    &lt;p&gt;I can’t think of a single thing that’s come along since that is even remotely similar. What are you thinking of?&lt;/p&gt;
    &lt;p&gt;I think it’s actually a horrible system to implement if you want to spy on people. That’s the point of it! If you wanted to spy on people, there are already loads of systems that exist which don’t intentionally make it difficult to do so. Why would you not use one of those models instead? Why would you take inspiration from this one in particular?&lt;/p&gt;
    &lt;p&gt;The problem isn’t the system as implemented; the problem is the very assertion “it is possible to preserve the privacy your constituents want, while running code at scale that can detect Bad Things in every message.”&lt;/p&gt;
    &lt;p&gt;Once that idea appears, it allows every lobbyist and insider to say “mandate this, we’ll do something like what Apple did but for other types of Bad People” and all of a sudden you have regulations that force messaging systems to make this possible in the name of Freedom.&lt;/p&gt;
    &lt;p&gt;Remember: if a model can detect CSAM at scale, it can also detect anyone who possesses any politically sensitive image. There are many in politics for whom that level of control is the actual goal.&lt;/p&gt;
    &lt;p&gt;&amp;gt; the problem is the very assertion “it is possible to preserve the privacy your constituents want, while running code at scale that can detect Bad Things in every message.”&lt;/p&gt;
    &lt;p&gt;Apple never made that assertion, and the system they designed is incapable of doing that.&lt;/p&gt;
    &lt;p&gt;&amp;gt; if a model can detect CSAM at scale, it can also detect anyone who possesses any politically sensitive image.&lt;/p&gt;
    &lt;p&gt;Apple’s system cannot do that. If you change parts of it, sure. But the system they proposed cannot.&lt;/p&gt;
    &lt;p&gt;To reiterate what I said earlier:&lt;/p&gt;
    &lt;p&gt;&amp;gt; The vast majority of the debate was dominated by how people imagined it worked, which was very different to how it actually worked.&lt;/p&gt;
    &lt;p&gt;So far, you are saying that you don’t have a problem with the system Apple designed, and you do have a problem with some other design that Apple didn’t propose, that is significantly different in multiple ways.&lt;/p&gt;
    &lt;p&gt;Also, what do you mean by “model”? When I used the word “model” it was in the context of using another system as a model. You seem to be using it in the AI sense. You know that’s not how it worked, right?&lt;/p&gt;
    &lt;p&gt;&amp;gt; Chat Control, and other proposals that advocate backdooring individual client systems.&lt;/p&gt;
    &lt;p&gt;Chat Control is older than Apple’s CSAM scanning and is very different from it.&lt;/p&gt;
    &lt;p&gt;&amp;gt; Clients should serve the user.&lt;/p&gt;
    &lt;p&gt;Apple’s system only scanned things that were uploaded to iCloud.&lt;/p&gt;
    &lt;p&gt;You missed the most important part of my comment:&lt;/p&gt;
    &lt;p&gt;&amp;gt; I think it’s actually a horrible system to implement if you want to spy on people. That’s the point of it! If you wanted to spy on people, there are already loads of systems that exist which don’t intentionally make it difficult to do so. Why would you not use one of those models instead? Why would you take inspiration from this one in particular?&lt;/p&gt;
    &lt;p&gt;I don’t think you can accurately describe it as client-side scanning and false positives were not likely. Depending upon how you view it, false positives were either extremely unlikely, or 100% guaranteed for practically everybody. And if you think the latter part is a problem, please read up on it!&lt;/p&gt;
    &lt;p&gt;&amp;gt; I'm reminded of a recent hit-piece about Chat Control, in which one of the proponent politicians was quoted as complaining about not having a debate. They didn't actually want a debate, they wanted to not get backlash. They would never have changed their minds, so there's no grounds for a debate.&lt;/p&gt;
    &lt;p&gt;Right, well I wanted a debate. And Apple changed their minds. So how is it reminding you of that? Neither of those things apply here.&lt;/p&gt;
    &lt;p&gt;No, but I have a hard time imagining a bug that would meaningfully compromise this kind of system. Can you give an example?&lt;/p&gt;
    &lt;p&gt;&amp;gt; How about making Apple vulnerable to demands from every government where they do business?&lt;/p&gt;
    &lt;p&gt;They already are. So are Google, Meta, Microsoft, and all the other giants we all use. And all those other companies are already scanning your stuff. Meta made two million reports in 2024Q4 alone.&lt;/p&gt;
    &lt;p&gt;Imagine harder. Apple has had several high profile security bugs in the last few years, and their OS is decried here as a buggy mess every release. QA teams went out of fashion.&lt;/p&gt;
    &lt;p&gt;The onus is on you to prove perfection before ruining lives on hardware they paid for.&lt;/p&gt;
    &lt;p&gt;100x worse on the vulnerability front, as the tech could be bent to any whim. Importantly, none of what you described is client-side scanning. Even I consider abiding rules on others’ property fair.&lt;/p&gt;
    &lt;p&gt;There is no place for spyware of any kind on my phone. Saying that it is to "protect the children" and "to catch terrorists" does not make it any more acceptable.&lt;/p&gt;
    &lt;p&gt;I believe my retro Nokia phones s60/s90 does not have any spyware. I believe earlier Nokia models like s40 or monochrome does not even have an ability to spy on me (but RMS considers triangulation as spyware). I don't believe any products from the duopoly without even root access are free from all kinds of vendor's rootkits.&lt;/p&gt;
    &lt;p&gt;Apple designed a system. People guessed at what it did. Their guesses were way off the mark. This poisoned all rational discussion on the topic. If you imagine a system that works differently to Apple’s system, you can complain about that imaginary system all you want, but it won’t be meaningful, it’s just noise.&lt;/p&gt;
    &lt;p&gt;You understand it just fine, you're just trying to pass you fantasy pod immutable safe future as rational while painting the obvious objections based on the real world as meaningless noise.&lt;/p&gt;
    &lt;p&gt;Your point did not come across. It still isn’t. I don’t know what you mean by “pass you fantasy pod immutable safe future as rational”. You aren’t making sense to me. I absolutely do not “understand it just fine”.&lt;/p&gt;
    &lt;p&gt;If they are running safe mandatory scans on your phones for this, you seem shocked and angry that anyone would imply that this would lead to safe mandatory scans on your phones for that and the other, and open the door for unsafe mandatory scans for whatever.&lt;/p&gt;
    &lt;p&gt;If you can't acknowledge this, it puts you in a position where you can't be convincing to people who need you to deflect obvious, well-known criticisms before beginning a discussion. It gives you crazy person or salesman vibes. These are arguments that someone with a serious interest in the technology would be aware of already and should be included as a prerequisite to being taken seriously. Doing this shows that you value other people's time and effort.&lt;/p&gt;
    &lt;p&gt;&amp;gt; you seem shocked and angry that anyone would imply that this would lead to safe mandatory scans on your phones for that and the other&lt;/p&gt;
    &lt;p&gt;Where have I given you that impression? The thing that annoys me is the sensible discussion being drowned out by ignorance.&lt;/p&gt;
    &lt;p&gt;&amp;gt; If you can't acknowledge this, it puts you in a position where you can't be convincing to people who need you to deflect obvious, well-known criticisms before beginning a discussion.&lt;/p&gt;
    &lt;p&gt;I cannot parse this, it’s word salad. People who need me to deflect criticisms? What? I genuinely do not understand what you are trying to say here. Maybe just break the sentences up into smaller ones? It feels like you’re trying to say too many things in too few sentences. What people? Why do they need me to deflect criticisms?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45553132"/><published>2025-10-11T22:16:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45553422</id><title>CamoLeak: Critical GitHub Copilot Vulnerability Leaks Private Source Code</title><updated>2025-10-12T19:12:03.848350+00:00</updated><content>&lt;doc fingerprint="9d071f1f98be66c7"&gt;
  &lt;main&gt;
    &lt;p&gt;Get details on our discovery of a critical vulnerability in GitHub Copilot Chat.&lt;/p&gt;
    &lt;head rend="h2"&gt;TL;DR:&lt;/head&gt;
    &lt;p&gt;In June 2025, I found a critical vulnerability in GitHub Copilot Chat (CVSS 9.6) that allowed silent exfiltration of secrets and source code from private repos, and gave me full control over Copilot’s responses, including suggesting malicious code or links.&lt;/p&gt;
    &lt;p&gt;The attack combined a novel CSP bypass using GitHub’s own infrastructure with remote prompt injection. I reported it via HackerOne, and GitHub fixed it by disabling image rendering in Copilot Chat completely.&lt;/p&gt;
    &lt;head rend="h2"&gt;Background&lt;/head&gt;
    &lt;p&gt;GitHub Copilot Chat is an AI assistant built into GitHub that helps developers by answering questions, explaining code, and suggesting implementations directly in their workflow.&lt;/p&gt;
    &lt;p&gt;Copilot Chat is context-aware: it can use information from the repository (such as code, commits, or pull requests) to provide tailored answers.&lt;/p&gt;
    &lt;p&gt;As always, more context = more attack surface.&lt;/p&gt;
    &lt;head rend="h2"&gt;Finding the prompt injection&lt;/head&gt;
    &lt;p&gt;As mentioned earlier, GitHub Copilot is context-aware - so I set out to make it notice me. To do this, I embedded a prompt directed at Copilot inside a pull request description.&lt;/p&gt;
    &lt;p&gt;But what’s the point if everyone can see it? Luckily, GitHub came to the rescue with a proper solution: invisible comments are an official feature! 🎉&lt;/p&gt;
    &lt;p&gt;You can find more details in their documentation: Hiding content with comments. By simply putting the content you want to hide inside:&lt;/p&gt;
    &lt;p&gt;I tried the same prompt but this time as a hidden comment inside the PR description, and it worked!&lt;/p&gt;
    &lt;p&gt;Interestingly, posting a hidden comment triggers the usual PR notification to the repo owner, but the content of the hidden comment isn’t revealed anywhere.&lt;/p&gt;
    &lt;p&gt;I attempted logging in with a different user and visited the pull request page. The prompt was injected into my context as well! &lt;/p&gt;
    &lt;p&gt;I then replaced the original “HOORAY” prompt with far more complex instructions, including code suggestions and Markdown rendering, and to my surprise, they worked flawlessly!&lt;/p&gt;
    &lt;p&gt;For instance, notice how effortlessly Copilot suggests this malicious Copilotevil package.&lt;/p&gt;
    &lt;p&gt;* Notice that the user who asked Copilot Chat to explain the PR is different from the user who posted the invisible prompt, demonstrating that the prompt can affect any user who visits the page.&lt;/p&gt;
    &lt;p&gt;Copilot operates with the same permissions as the user making the request, but it obviously needs access to the user’s private repositories to respond accurately. We can exploit this by including instructions in our injected prompt to access a victim user’s private repository, encode its contents in base16, and append it to a URL. Then, when the user clicks the URL, the data is exfiltrated back to us.&lt;/p&gt;
    &lt;p&gt;* Notice that the repository https://github.com/LegitSecurity/issues-service is a private repo inside a private GitHub organization!&lt;/p&gt;
    &lt;head rend="h2"&gt;Recap: What We Can Do&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Influence the responses generated by another user’s Copilot&lt;/item&gt;
      &lt;item&gt;Inject custom Markdown, including URLs, code, and images&lt;/item&gt;
      &lt;item&gt;Exploit the fact that Copilot runs with the same permissions as the victim user&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Bypassing Content Security Policy (CSP)&lt;/head&gt;
    &lt;p&gt;This is where things get tricky. If you’ve followed along so far, you’re probably thinking — just inject an HTML &amp;lt;img&amp;gt; tag into the victim’s chat, encode their private data as a parameter, and once the browser tries to render it, the data will be leaked.&lt;/p&gt;
    &lt;p&gt;Not so fast. GitHub enforces a very restrictive Content Security Policy (CSP), which blocks fetching images and other content types from domains that aren’t explicitly owned by GitHub. So, our “simple” &amp;lt;img&amp;gt; trick won’t work out of the box.&lt;/p&gt;
    &lt;p&gt;You’re probably asking yourself - wait, how does my fancy README manage to show images from third-party sites?&lt;/p&gt;
    &lt;p&gt;When you commit a README or any Markdown file containing external images, GitHub automatically processes the file, during this process:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;GitHub parses the Markdown and identifies any image URLs pointing to domains outside of GitHub.&lt;/item&gt;
      &lt;item&gt;URL rewriting via Camo: Each external URL is rewritten to a Camo proxy URL. This URL includes a HMAC-based cryptographic signature and points to https://camo.githubusercontent.com/….&lt;/item&gt;
      &lt;item&gt;Signed request verification: When a browser requests the image, the Camo proxy verifies the signature to ensure it was generated by GitHub. Only valid, signed URLs are allowed.&lt;/item&gt;
      &lt;item&gt;Content fetching: If the signature is valid, Camo fetches the external image from its original location and serves it through GitHub’s servers.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This process ensures that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Attackers cannot craft arbitrary URLs to exfiltrate dynamic data.&lt;/item&gt;
      &lt;item&gt;All external images go through a controlled proxy, maintaining security and integrity.&lt;/item&gt;
      &lt;item&gt;The end user sees the image seamlessly in the README, but the underlying URL never exposes the original domain directly.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;More information about Camo can be found here.&lt;/p&gt;
    &lt;p&gt;Let’s look at an example: Committing a README file to GitHub that contains this URL:&lt;/p&gt;
    &lt;p&gt;Will be automatically changed inside the README into:&lt;/p&gt;
    &lt;p&gt;Rather than doing it manually through the website, you can use GitHub’s REST API to submit raw Markdown and receive it back with all external image URLs automatically converted to Camo proxy URLs.&lt;/p&gt;
    &lt;p&gt;Alright, so we can’t generate Camo URLs on the fly — without code execution, every &amp;lt;img&amp;gt; tag we inject into the victim’s chat must include a valid Camo URL signature that was pre-generated. Otherwise, GitHub’s reverse proxy won’t fetch the content.&lt;/p&gt;
    &lt;head rend="h2"&gt;The discovery&lt;/head&gt;
    &lt;p&gt;I spent a long time thinking about this problem before this crazy idea struck me.&lt;lb/&gt;If I create a dictionary of all letters and symbols in the alphabet, pre-generate their corresponding Camo URLs, embed this dictionary into the injected prompt, and then ask Copilot to play a “small game” by rendering the content I want to leak as “ASCII art” composed entirely of images, will Copilot inject valid Camo images that the browser will render by their order? Yes, it will.&lt;/p&gt;
    &lt;p&gt;I quickly got to work. First, I set up a web server that responds to every request with a 1x1 transparent pixel. This way, when GitHub’s Camo reverse proxy fetches the images from my server, they remain invisible in the victim’s chat.&lt;/p&gt;
    &lt;p&gt;Next, by using GitHub’s API, I created a valid Camo URL dictionary of all the letters and symbols that may be used to leak source code / issues content:&lt;/p&gt;
    &lt;p&gt;Turns into:&lt;/p&gt;
    &lt;p&gt;And finally, I created the prompt:&lt;/p&gt;
    &lt;p&gt;* I added "random" parameter at the end of each Camo URL and requested Copilot to generate each time a new random number and append it to the URL, this way caching is not a problem.&lt;/p&gt;
    &lt;p&gt;Our target: the description of a zero-day vulnerability inside an issue of a private project.&lt;/p&gt;
    &lt;p&gt;The result: Stealing zero days from private repositories.&lt;/p&gt;
    &lt;p&gt;PoC showcasing the full attack (Only if you have 4 minutes):&lt;/p&gt;
    &lt;p&gt;I also managed to get Copilot to search the victim’s entire codebase for the keyword "AWS_KEY" and exfiltrate the result.&lt;/p&gt;
    &lt;head rend="h2"&gt;GitHub’s Response&lt;/head&gt;
    &lt;p&gt;GitHub reports that the vulnerability was fixed as of August 14.&lt;/p&gt;
    &lt;head rend="h2"&gt;To learn more&lt;/head&gt;
    &lt;p&gt;Get details on a previous vulnerability we unearthed in GitLab Duo.&lt;/p&gt;
    &lt;p&gt;Get our thoughts on AppSec in the age of AI.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.legitsecurity.com/blog/camoleak-critical-github-copilot-vulnerability-leaks-private-source-code"/><published>2025-10-11T22:58:30+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45553577</id><title>Meta Superintelligence's surprising first paper</title><updated>2025-10-12T19:12:03.786205+00:00</updated><content/><link href="https://paddedinputs.substack.com/p/meta-superintelligences-surprising"/><published>2025-10-11T23:16:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45553783</id><title>Vancouver Stock Exchange: Scam capital of the world (1989) [pdf]</title><updated>2025-10-12T19:12:03.654782+00:00</updated><content/><link href="https://scamcouver.wordpress.com/wp-content/uploads/2012/04/scam-capital.pdf"/><published>2025-10-11T23:43:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45555308</id><title>Pipelining in psql (PostgreSQL 18)</title><updated>2025-10-12T19:12:02.895538+00:00</updated><content>&lt;doc fingerprint="f799b5d2b8b01ede"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Pipelining in psql (PostgreSQL 18)&lt;/head&gt;
    &lt;head rend="h2"&gt;What is pipelining in Postgres?&lt;/head&gt;
    &lt;p&gt;Pipelining is a client-side feature supported by the network protocol that basically consists of not waiting for the results of previously sent queries before sending the next. This increases the throughput in two ways:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;The client, network and server can work in parallel. For instance, the network may transmit the results of the (N-1)th query while the server executes the Nth query and the client sends the (N+1)th query, all this at the same time.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The network is better utilized because successive queries can be grouped in the same network packets, resulting in less packets overall.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Pipelining is possible since version 7.4 (released in 2003), which introduced the extended query protocol. But itâs only since 2021, with PostgreSQL 14, that it can be used through libpq, the client-side C library. Since then, some libpq-based drivers like psycopg3 have started to support it.&lt;/p&gt;
    &lt;p&gt;With PostgreSQL 18, released last week, &lt;code&gt;psql&lt;/code&gt;, the command line client
comes equipped with commands to use pipelining in SQL scripts, making it
even more accessible.
While this addition is not part of the highlighted features of that release,
it can provide huge gains in query throughput, as weâre going to see in a simple
test.&lt;/p&gt;
    &lt;head rend="h2"&gt;psql commands&lt;/head&gt;
    &lt;p&gt;The pipeline is started with &lt;code&gt;\startpipeline&lt;/code&gt;, and in the most simple case, followed
by the SQL queries and ended with &lt;code&gt;\endpipeline&lt;/code&gt;.
If intermediate results are needed, we can use &lt;code&gt;\syncpipeline&lt;/code&gt; to force a 
synchronisation point and &lt;code&gt;\getresults&lt;/code&gt; to fetch all results up to that point.
Also, starting a pipeline creates an implicit transaction. If a query fails,
all the changes since the start (or before the last synchronization point) will
be rolled back.&lt;/p&gt;
    &lt;p&gt;If you know about the &lt;code&gt;\;&lt;/code&gt; syntax to group several queries in the same request, there are similarities between this technique and pipelining: theyâre both used to reduce server round-trips and have the same semantics with regard to transactions. In a way, pipelining is the evolution in the extended query protocol of what multi-statement queries (&lt;code&gt;\;&lt;/code&gt; in psql) are in the simple query protocol.&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance test&lt;/head&gt;
    &lt;p&gt;Letâs do a simple test where data from devices are imported with &lt;code&gt;INSERT ... ON CONFLICT&lt;/code&gt; queries. Same-device same-date does update the row,
otherwise it inserts a new row.
Note that if we wanted to unconditionally append all rows,
&lt;code&gt;COPY&lt;/code&gt; would be preferable and pipelining not necessary, which is why
the more sophisticated insert-or-update is chosen for that test.&lt;/p&gt;
    &lt;p&gt;The following bash code imports the (random) data, with or without the pipelining depending on a parameter.&lt;/p&gt;
    &lt;code&gt;function import_data
{
  local count=$1  # how many rows?
  local pipeline=$2 # 1 or 0
  local now_ts=$(date +%s)

  (
    echo 'PREPARE s AS insert into events(device, recorded_at, measure)
values($1, to_timestamp($2), $3) on conflict(device,recorded_at) do update set measure=excluded.measure;'
    echo "BEGIN;"
    [[ $pipeline = 1 ]] &amp;amp;&amp;amp; echo "\\startpipeline"
    for i in $(seq 1 $count)
    do
      device=$RANDOM
      secs=$(($now_ts + $RANDOM*50))
      measure=${RANDOM}"."${RANDOM}
      echo "execute s($device, '$secs', $measure);"
    done
    [[ $pipeline = 1 ]] &amp;amp;&amp;amp; echo "\\endpipeline"
    echo "COMMIT;"
  ) | $psql -q -v ON_ERROR_STOP=1
}
&lt;/code&gt;
    &lt;p&gt;Letâs try this with batches of 100, 1000, 5000, 10000, 50000, 100000 rows, with and without pipelining, and compare how fast these batches are processed.&lt;/p&gt;
    &lt;p&gt;Also, since the network speed matters a lot here, letâs try with three typical kinds of network connections:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;localhost (ping time ~ 0.04ms): client and server are on the same host.&lt;/item&gt;
      &lt;item&gt;LAN (ping time ~ 1ms): client and server are separated only by an Ethernet 1GB/s switch.&lt;/item&gt;
      &lt;item&gt;WAN (ping time ~ 4ms): the server is reached through a public Internet connection.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Finally, each case is run 5 times and we keep only the median time of the runs.&lt;/p&gt;
    &lt;p&gt;On the same host, the pipeline acceleration ranges from 1.5x for the smallest batch size, up to 5x.&lt;/p&gt;
    &lt;p&gt;On a local network connection, the smallest batch size is accelerated by 2.6x, and it goes up to 42x with the bigger sizes.&lt;/p&gt;
    &lt;p&gt;On the slowest network, itâs even more impressive. The acceleration is between 5.4x and 71x !&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;These accelerations show how under-utilized the network is when we send batches of small queries without pipelining: the network packets are like 50 seater buses that ride with only one passenger.&lt;/p&gt;
    &lt;p&gt;In our example, all we have to do to optimize on that front is to add a pair of &lt;code&gt;\startpipeline&lt;/code&gt; and &lt;code&gt;\endpipeline&lt;/code&gt;.
Thatâs because our queries do not depend on the results of previous queries
of the same batch, except in the sense that if one fails, the entire batch fails.&lt;/p&gt;
    &lt;p&gt;Without pipelining, we could still optimize our test by adding many rows to the &lt;code&gt;VALUES&lt;/code&gt; clauses for each query instead of one row per
query. But itâs not easy to find the sweet spot for how many data rows
there needs to be per query, and large queries with thousands of parameters
are not the nicest to handle on the server side.
Also, if the client-side logic is more complicated, for instance
conditionally targeting several tables, running simple statements in
a pipeline while using row-by-row logic might be much easier.&lt;/p&gt;
    &lt;p&gt;The pipelining meta-commands were added in psql version 18, but they do not require PostgreSQL 18 on the server side. For those interested in this feature who canât upgrade their server soon, you can still upgrade to the latest version of psql: itâs backward-compatible as much as possible.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://postgresql.verite.pro/blog/2025/10/01/psql-pipeline.html"/><published>2025-10-12T04:46:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45555523</id><title>Show HN: I made an esoteric programming language that's read like a spellbook</title><updated>2025-10-12T19:12:02.736369+00:00</updated><content>&lt;doc fingerprint="94129b89627ac410"&gt;
  &lt;main&gt;
    &lt;p&gt;an esoteric programming language where code reads like magical incantations from an ancient spellbook. every program is a "spell" written in a "grimoire," so theorhetically, you can write all your code english essay style due to its no newline/indentation requirement.&lt;/p&gt;
    &lt;p&gt;write code that looks like this:&lt;/p&gt;
    &lt;code&gt;begin the grimoire.
summon the power with essence of 7.
conjure ritual named amplify with value to return value multiplied by value.
enchant power with essence 0 of through ritual amplify with power.
inscribe whispers of "the power is amplified: " bound with power.
close the grimoire.
&lt;/code&gt;
    &lt;p&gt;output: &lt;code&gt;the power is amplified: 49&lt;/code&gt;&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;variables&lt;/item&gt;
      &lt;item&gt;dynamic typing&lt;/item&gt;
      &lt;item&gt;arrays&lt;/item&gt;
      &lt;item&gt;functions&lt;/item&gt;
      &lt;item&gt;conditionals/loops&lt;/item&gt;
      &lt;item&gt;string manipulation&lt;/item&gt;
      &lt;item&gt;type conversion&lt;/item&gt;
      &lt;item&gt;user input&lt;/item&gt;
      &lt;item&gt;output&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;clone thy repo&lt;/item&gt;
      &lt;item&gt;make sure you have python 3.6 +&lt;/item&gt;
      &lt;item&gt;create a file called &lt;code&gt;&amp;lt;filename&amp;gt;.spell&lt;/code&gt;:&lt;/item&gt;
      &lt;item&gt;then run &lt;code&gt;python spellscript.py your-spell.spell&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;concept&lt;/cell&gt;
        &lt;cell role="head"&gt;spellscript&lt;/cell&gt;
        &lt;cell role="head"&gt;traditional&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;declare variable&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;summon the x with essence of 10&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;x = 10&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;modify variable&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;enchant x with 20&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;x = 20&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;inscribe x&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;print(x)&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;input&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;inquire whispers of "prompt" into x&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;x = input("prompt")&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;whispers of "text"&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;"text"&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;collection holding 1 and 2 and 3&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;[1, 2, 3]&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;if statement&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;if the signs show x equals 5 then&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;if x == 5:&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;loop&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;repeat the incantation 5 times to begin:&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;for i in range(5):&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;function&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;conjure ritual named add with a and b to&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;def add(a, b):&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;return&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;return result&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;return result&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;operation&lt;/cell&gt;
        &lt;cell role="head"&gt;spellscript&lt;/cell&gt;
        &lt;cell role="head"&gt;traditional&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;addition&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a greater by b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a + b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;subtraction&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a lesser by b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a - b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;multiplication&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a multiplied by b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a * b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;division&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a divided by b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a / b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;equals&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a equals b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a == b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;greater than&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a greater than b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a &amp;gt; b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;less than&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a less than b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a &amp;lt; b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;and&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a and b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a and b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;or&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a or b&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;a or b&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;not&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;not a&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;not a&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;resources/documentation.md - feature documentation&lt;/item&gt;
      &lt;item&gt;resources/examples - example programs&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;no nested arrays&lt;/item&gt;
      &lt;item&gt;no string indexing (use character arrays)&lt;/item&gt;
      &lt;item&gt;no modulo operator&lt;/item&gt;
      &lt;item&gt;no break/continue in loops&lt;/item&gt;
      &lt;item&gt;no comments&lt;/item&gt;
      &lt;item&gt;no recursion (use iteration)&lt;/item&gt;
      &lt;item&gt;functions must have at least one parameter&lt;/item&gt;
      &lt;item&gt;no null concept&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;idea from the muffin programming language&lt;/item&gt;
      &lt;item&gt;ai was used for debugging some inperpreter issues, which included rituals and conditionals.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/sirbread/spellscript"/><published>2025-10-12T05:31:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45556474</id><title>Faster LLM inference</title><updated>2025-10-12T19:12:02.321426+00:00</updated><content>&lt;doc fingerprint="e3dd3bba699a0e85"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;AdapTive-LeArning Speculator System (ATLAS): A New Paradigm in LLM Inference via Runtime-Learning Accelerators&lt;/head&gt;
    &lt;p&gt;ATLAS delivers up to 4x faster LLM inference, powered by Together Turboâs latest research.&lt;/p&gt;
    &lt;p&gt;At Together AI, the AIÂ Native Cloud, weâre obsessed with performance. Making large language models faster, cheaper, and more efficient is not a one-trick problem â it requires optimizing along multiple axes. That is the philosophy behind Together Turbo, our suite of inference innovations that draw from research in algorithms, architectures, and modeling recipes. Weâre excited to introduce the AdapTive-LeArning Speculator System (ATLAS), the first speculator of its kind that gives automatic performance improvements without any manual tuning.&lt;/p&gt;
    &lt;p&gt;ATLAS offers a new way of doing speculative decoding â one that dynamically improves at runtime â and it fits seamlessly alongside our other Turbo techniques like the proprietary Together Turbo Speculator or Custom Speculators. But why create an adaptive-learning speculator system?&lt;/p&gt;
    &lt;p&gt;Standard speculators are trained for general workloads. Custom speculators are trained on your specific data, but only for a specific snapshot in time. However, as the workload evolves (codebase grows, traffic patterns shift, request distributions change), even highly customized speculators can fall behind. In contrast, ATLAS evolves automatically with usage, learning from both historical patterns and live traffic to continuously align with the target modelâs behaviors in real time. This means the more you use our inference service, the better ATLAS will perform!Â&lt;/p&gt;
    &lt;p&gt;Built on top of Together Turbo Speculator, ATLAS reaches up to 500 TPS on DeepSeek-V3.1 and up to 460 TPS on Kimi-K2 in a fully adapted scenario â 2.65x faster than standard decoding, outperforming even specialized hardware like Groq (Figure 1).&lt;/p&gt;
    &lt;head rend="h2"&gt;1. Speculative Decoding&lt;/head&gt;
    &lt;p&gt;Speculative decoding is one of the most powerful levers for accelerating inference.2 Instead of having the target model generate every token step by step, a faster speculator (also known as the draft model) proposes multiple tokens ahead, and the target model verifies them in parallel in a single forward pass. The verification process ensures that the quality of the output matches the distribution of non-speculative decoding, while achieving speedups by accepting many tokens at a time.&lt;/p&gt;
    &lt;p&gt;The overall speed is influenced by the acceptance rate $Î±$ (i.e., how often the target model agrees with the drafted tokens from the speculator) and the relative latency $c$ of the draft versus the target. Typically, larger speculators with more parameters yield higher acceptance rates due to their higher capacity but are slower to generate draft tokens. Progress therefore comes from both sides: aligning draft and target models to increase $Î±$ (training objectives, data, and algorithms) and designing draft models/kernels that keep $c$ low while maintaining $Î±$ (sparsity, quantization, lightweight &amp;amp; kernel-efficient architectures). The sweet spot is where a high $Î±$ meets a low $c$, minimizing end-to-end latency.&lt;/p&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;p&gt;At Together AI, the Turbo team has developed high-performance speculators that have achieved the worldâs fastest decoding speeds on NVIDIA Blackwell by drawing on advances across architecture, sparsity, algorithms, post-training recipes, and data [1-9]. Weâve built a speculator design and selection framework that determines the optimal speculator architecture (width/depth, lookahead, sparsity/quantization, KV reuse) and a scalable training system that brings up speculators for the largest and most challenging open-source targets quickly and reproducibly (e.g., DeepSeek-V3.1 and Kimi-K2). For instance, while Kimi ships without a ready-to-use speculator, we can train and deploy one rapidly and take Kimi from ~150 TPS out of the box to 270+ TPS on the same hardware and batch settings, while preserving target-model quality (see Figure 1, yellow bars). This pipeline powers Turbo Speculators that deliver state-of-the-art decoding latency, and it sets the stage for what comes next: an Adaptive-Learning Speculator System that adjusts token drafting to the workload in real time.&lt;/p&gt;
    &lt;head rend="h2"&gt;2. Introducing Turboâs Adaptive-Learning Speculator System&lt;/head&gt;
    &lt;p&gt;At Together AI, we power a broad range of inference workloads. But todayâs speculative decoding methods are constrained to using a static speculator, trained on a fixed dataset. Once deployed, the speculator cannot adapt, leading to degrading performance if the input distribution evolves. This problem is particularly pronounced in serverless, multi-tenant environments, where input diversity is sky-high. New users continuously arrive, and bring with them unique workloads that the fixed speculator may not have seen during training. Furthermore, these speculators typically use a fixed lookahead, predicting the same number of tokens regardless of the speculatorâs confidence. Put simply, a static speculator cannot keep up.&lt;/p&gt;
    &lt;p&gt;To address these limitations, we designed the Adaptive-Learning Speculative System with two cooperating speculators, as shown in Figure 3:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A heavyweight static speculator trained on a broad corpus that provides strong, general speculation.&lt;/item&gt;
      &lt;item&gt;A lightweight adaptive speculator that allows for rapid, low-overhead updates from real-time traffic, specializing on-the-fly to emerging domains.&lt;/item&gt;
      &lt;item&gt;A confidence-aware controller that chooses which speculator to trust at each step and what speculation lookahead to use, using longer speculations when the speculator has high confidence.Â&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Efficiency Guardrail via Static Speculator. The static Turbo Speculator serves as an always-on speed floor: it is trained on a broad corpus and remains stable across workloads, so TPS does not collapse when traffic shifts or the adaptive path is cold. In ATLAS, we use it to jump-start speed and provide a fail-safe fallbackâif confidence drops or drift is detected, the controller shortens lookahead or routes back to the static path to preserve latency while the adaptive speculator relearns.&lt;/p&gt;
    &lt;p&gt;Customized Speculator vs. Adaptive-Learning. We know from our previous studies that a customized speculator trained on samples from real traffic that mirror expected usage delivers an additional speed boost. The Adaptive-Learning Speculator enables us to be even more customized in real time. For instance, during a vibe-coding session, the adaptive system can specialize a lightweight speculator for the relevant code files being edited and not seen during training, further increasing the acceptance rate and decoding speed. This kind of on-the-fly specialization is hard to achieve with static speculators.&lt;/p&gt;
    &lt;p&gt;Accelerating RL Training. Reinforcement learning (RL) alternates between two phases: (1) a rollout phase, where the current policy generates trajectories and receives rewards, and (2) an update phase, where we use the rewards to update the policy. In practice, rollouts are often the bottleneck, accounting for roughly 70% of total wall-clock time3. In general, because the policy distribution shifts throughout training, static speculators quickly fall out of alignment with the target policy, resulting in sub-optimal throughput.4 ATLAS addresses this by adapting online to the evolving policy and the specific RL domain, maintaining alignment and reducing the overall rollout time. The domain-specific, iterative nature of RL further enables rapid adaptation, yielding sustained and growing speedups. As shown in Figure 4, applying ATLAS to the RL-MATH pipeline produces increasing speedups as training progresses.&lt;/p&gt;
    &lt;p&gt;Built as part of the Turbo optimization suite. The Adaptive-Learning Speculator System is a core component of the broader Turbo optimization suite, where each layer of optimization compounds the benefits of the others. As illustrated in Figure 5, performance progressively improves through near-lossless quantization (calibrated to preserve quality), the Turbo Speculator, and finally the Adaptive-Learning Speculator System. Additional optimizations in the suite include TurboBoost-TTFT (not shown) for reducing time-to-first-token latency, further contributing to end-to-end acceleration.&lt;/p&gt;
    &lt;p&gt;Extreme Peak Efficiency. When the input distribution is narrow and outputs closely echo previously seen tokens, the adaptive system specializes quickly. In this scenario, the controller becomes confident in utilizing more tokens from the lightweight speculator and lengthens lookahead tokens. This yields consistently higher TPS than static or one-off custom speculators can maintain. As shown in Figures 1 and 5, once fully adapted to Arena-Hard traffic, DeepSeek achieves up to 500 tokens per second for batch size 1 on 4 B200 GPUs, delivering a 400% speedup over the FP8 baseline (improvement from 105 TPS to 501 TPS).&lt;/p&gt;
    &lt;p&gt;{{custom-cta-1}}&lt;/p&gt;
    &lt;head rend="h2"&gt;Build the Future of Efficient AI&lt;/head&gt;
    &lt;p&gt;In parallel to making models smarter and more capable, advancements in inference efficiency are just as transformative â because intelligence only matters when you can deliver it swiftly, cost-effectively, and at scale. At Together AI, our Turbo team turns cutting-edge research (algorithms, quantization, sparsity, distillation, architectures, model pruning, and post-training recipes) into production systems that cut costs and unlock entirely new product experiences. If you love turning elegant ideas into billions of faster tokens, obsess over optimizing efficiency-quality frontier, and want your research to land in real usersâ hands quickly, come build with us. Weâre hiring exceptional research scientists and engineers who can push the frontier of efficient AI. Apply to Together and help define how intelligence is deployed.&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;p&gt;1. Each benchmark burst contained 32 arena-hard prompts (â 3,000 token completions on average). Since the observed TPS depends on the prompts while speculative decoding is used, we report tokens per second (TPS) as the mean across requests. In the Adaptive-Learning Speculator System scenario, we show the peak speed where the system is fully adapted to Arena Hard traffic. We use TP=4 for DeepSeek-V3.1 and TP=8 for Kimi-K2-0905 on NVIDIA B200. This is different from our previous blog where we used TP=8, EP=2 for DeepSeek.&lt;lb/&gt;2. Fast Inference from Transformers via Speculative Decoding.&lt;lb/&gt;3. DeepCoder: A Fully Open-Source 14B Coder at O3-mini Level DeepSWE: Training a Fully Open-sourced, State-of-the-Art Coding Agent by Scaling RL&lt;lb/&gt;4. Speculative decoding is typically not beneficial in pure throughput- or compute-bound settings, where GPUs are fully saturated. However, in reinforcement learning (RL) training, the situation can be different. Agent RL training often operates with small batch sizes and CPU-driven environment steps, where each agent waits for model outputs to do the next action. In this regime, endpoint latency (tokens per second per request) becomes the bottleneck. This makes speculative decoding highly applicable for RL training, if there is a suitable and high performant speculator. Faster decoding pipeline can improve CPU utilization and overall sample throughput.Â &lt;/p&gt;
    &lt;head rend="h2"&gt;References&lt;/head&gt;
    &lt;p&gt;[1] Medusa: Simple LLM Inference Acceleration Framework with Multiple Decoding Heads&lt;/p&gt;
    &lt;p&gt;[2] SpecExec: Massively Parallel Speculative Decoding for Interactive LLM Inference on Consumer Devices&lt;/p&gt;
    &lt;p&gt;[3] Ladder-Residual: Parallelism-Aware Architecture for Accelerating Large Model Inference with Communication OverlappingÂ&lt;/p&gt;
    &lt;p&gt;[4] TEAL: Training-Free Activation Sparsity in Large Language Model&lt;/p&gt;
    &lt;p&gt;[5] The Mamba in the Llama: Distilling and Accelerating Hybrid Models&lt;/p&gt;
    &lt;p&gt;[6] SEQUOIA: Scalable and Robust Speculative Decoding&lt;/p&gt;
    &lt;p&gt;[7] Mixture-of-Agents Alignment: Harnessing the Collective Intelligence of Open-Source LLMs to Improve Post-Training&lt;/p&gt;
    &lt;p&gt;[8] Boosting DeepSeek-R1âs Speed with Customized Speculative Decoding&lt;/p&gt;
    &lt;p&gt;[9] DeepSWE: Training a Fully Open-sourced, State-of-the-Art Coding Agent by Scaling RL&lt;/p&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;LOREM IPSUM&lt;/p&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;LOREM IPSUM&lt;/p&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Value Prop #1&lt;/p&gt;
        &lt;p&gt;Body copy goes here lorem ipsum dolor sit amet&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Value Prop #1&lt;/p&gt;
        &lt;p&gt;Body copy goes here lorem ipsum dolor sit amet&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Value Prop #1&lt;/p&gt;
        &lt;p&gt;Body copy goes here lorem ipsum dolor sit amet&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
          &lt;item&gt;Bullet point goes here lorem ipsum Â&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;List Item Â #1&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;List Item Â #1&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;List Item Â #1&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
          &lt;item&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;List Item Â #2&lt;/p&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;List Item #2&lt;/p&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;List Item #3&lt;/p&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;article&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.together.ai/blog/adaptive-learning-speculator-system-atlas"/><published>2025-10-12T08:37:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45556763</id><title>Nostr and ATProto (2024)</title><updated>2025-10-12T19:12:01.958692+00:00</updated><content>&lt;doc fingerprint="231dd9512d25a3d4"&gt;
  &lt;main&gt;
    &lt;p&gt;This post could’ve been titled “Nostr vs ATProto”, but that really isn’t what I wanted to do here. While I will be comparing and contrasting them a lot, and that’s kind of even the point of writing this, I didn’t want to really pit the two against each other at all, and especially not with the title. I also want to try avoiding commenting on the differences between the communities that have formed on the protocols and their apps, although I definitely will be looking at the philosophical differences between the two a lot - also kind of the point of writing this. This also isn’t a super deep technical post, though it assumes familiarity with technical concepts. I also might come back to edit parts of it and add more later.&lt;/p&gt;
    &lt;p&gt;You can read and leave comments on this post here on Bluesky, or here on Nostr, or even here on Mastodon.&lt;/p&gt;
    &lt;p&gt;So I wrote a paragraph mostly about what this post isn’t about, with a little bit about what I will talk about in it, but I haven’t really explained what this post is, or why I’m writing it. Honestly, I’m not completely sure of the first one yet either; I’m figuring that out as I write it. The paragraph at the top are really serving as guidelines for myself as I write this.&lt;/p&gt;
    &lt;p&gt;However, I can explain how this post came to be. It started with a showerthought (I was literally in the shower) about how similar ATProto and Nostr really are. This thought came to me after ruminating on ATProto Relays and Nostr Relays, and thinking about how my favorite feature of Nostr Relays (spoiler: it’s filtering) could be added to ATProto Relays, and why you would want to do that. More broadly, this made me think that the two protocols are similar enough that they are likely to slowly converge over time as they learn from each other.&lt;/p&gt;
    &lt;p&gt;A direct result of those thoughts (after getting out of the shower, of course) was to search the internet for a good comparison of Nostr and ATProto. A direct result of my failure to find any was this Bluesky skoot (There’s a lot of good replies and thoughts in that thread as well—you probably want to read it before continuing with this post). A direct result of my skooting that was this reply. Before, I’d been tentatively considering writing a purely technical comparison after not finding any, but that reply really set the stage for deciding what I wanted to do in this post.&lt;/p&gt;
    &lt;p&gt;So, to start, let’s look at…&lt;/p&gt;
    &lt;head rend="h2"&gt;How we got here&lt;/head&gt;
    &lt;head rend="h3"&gt;A Caged Bird&lt;/head&gt;
    &lt;head rend="h4"&gt;or, Twitter&lt;/head&gt;
    &lt;p&gt;Twitter here could, in theory, be replaced here by just “Centralized Social Media”, but really it was Twitter that got us here. Both ATProto and Nostr exist because of Twitter - the AT Protocol very directly so, Nostr as a response to “censorship” (real or perceived) on Twitter. ATProto is the result of Bluesky’s original mission - to build a decentralized protocol Twitter could adopt. Post-Elon, who knows if that will ever happen, but, well, that is how it started.&lt;/p&gt;
    &lt;p&gt;Twitter sprang into existence in 2007, as a small, SMS-based service that allowed people to post short status updates - tweets, as they became known. Who knows if it was the first of its kind? Well, it certainly became the most popular. It really was the service that was able to popularize the concept of microblogging. It developed a multitude of subcultures, each with their own unique characteristics, often intersecting with each other in fascinating, unpredictable places and ways. And while Twitter certainly never became as popular as some of its big tech companions, it may have had the greatest cultural impact - it was one of the only places in existence where an average person (you!!) could, say, ratio a presidential candidate or give interesting new details on a story to some famous journalist (I don’t know, I just made those up). Some have said it was the first “global town square”.&lt;/p&gt;
    &lt;p&gt;Over the years of Twitter’s existence, lots of things happened to Twitter. Moderation issues including Donald Trump, authoritarian governments around the world, all sorts of mini community wars and harassment, etc. Twitter, as beautiful as it was, well… kind of sucked, and people drew many different (not mutually exclusive and often overlapping!!) conclusions about why. Some, like Christopher Bouzy of Spoutible, concluded that the platform’s moderation simply wasn’t enough for what the platform had become, and people needed a smaller, more closed space with stricter moderation policies. Others concluded that a global-scale social network is simply an inherently bad idea and people should stick to smaller, more tight-knit communities. But one of the most popular conclusions was that something as important as Twitter - whether you considered it a “global town square” or a place to make connections with your community or Whatever Else - simply could not and should not be controlled by a single corporation. Indeed, this was the conclusion that Twitter themselves came to! This is the conclusion that both ATProto and Nostr are founded upon - the idea of a move from closed, centralized, corporate-owned social platforms to a world of open, decentralized social protocols.&lt;/p&gt;
    &lt;p&gt;But ATProto and Nostr don’t exist in a vacuum. They weren’t the only ones to come to this conclusion. They weren’t even the first. And that brings us to…&lt;/p&gt;
    &lt;head rend="h3"&gt;The Mastodon in the Room&lt;/head&gt;
    &lt;head rend="h4"&gt;or, ActivityPub and the Fediverse&lt;/head&gt;
    &lt;p&gt;⚠️ I am not an expert on ActivityPub. Take everything in this section with a grain of salt. If I get something wrong, please correct me. ⚠️&lt;/p&gt;
    &lt;p&gt;ActivityPub is kind of a big deal in the decentralized social protocols world. It’s not the first, either - it would be extremely hard to really find a first. But it is, at least for now, the largest, and realistically is about to become a lot larger, at least if Meta Threads federates with it.&lt;/p&gt;
    &lt;p&gt;It’s also got an entirely different philosophy to either Nostr or ATProto - while both of the latter are based on a more individualistic approach to decentralization, ActivityPub opted for a more collectivist approach, one that favors tight-knit communities over a global network (that hasn’t stopped people from trying to build global networks with it, though.)&lt;/p&gt;
    &lt;p&gt;(Side-note: I should also mention that whether the Fediverse should focus on smaller communities or mass-interconnection has been a debate even within the Fediverse since right about the beginning, which a lot of the differing viewpoints around this topic explained brilliantly by Evan Podromou. Since Small Fedi seems to be the dominant philosophy shaping the current Fediverse, I’ve mostly focused on Small Fedi when talking about ActivityPub here.)&lt;/p&gt;
    &lt;p&gt;There are many different server implementations of the ActivityPub Spec, each adding their own unique flair to the ecosystem. The most popular of these implementations is Mastodon. ActivityPub is also, like I said above, kind of a big deal in the decentralized social protocols world. Almost everyone working on decentralized protocols after ActivityPub has been forced to acknowledge its existence, draw comparisons to it, and often been bridged to it. In fact, when Jack Dorsey fired off his famous tweet thread announcing Bluesky, he was definitely aware of ActivityPub, given that in a reply to a reply to that thread, he stated “ActivityPub is great.”&lt;/p&gt;
    &lt;p&gt;Because ActivityPub uses a federation model centered around small community servers, it has a lot of the benefits of centralized social media. For example, it makes it relatively easy to support private content, since it’s a push-based protocol - only those whose inboxes you push content to can view it (there’s also an “Everyone” option that makes your content fetchable, I think). This is also why the Fediverse has things like Follow Requests, server-to-server DMs (though your instance admin can view them - ActivityPub kind of assumes you trust them), and real blocks that mostly work.&lt;/p&gt;
    &lt;p&gt;However, many of the more collectivist choices made in ActivityPub were concluded to not be conductive to a “decentralized Twitter”, and both ATProto and Nostr exist in large part because of this. In fact, both ATProto and Nostr strayed from ActivityPub for the same reasons - identity is extremely tied to your initial server. There are good reasons for this, given that ActivityPub is largely used by smaller communities who federate with each other, but it does have an important consequence:&lt;/p&gt;
    &lt;p&gt;Your data is not really portable. You can move accounts to another server, and if your old server is well-behaved it can add a redirect to your new account, which will help automatically transfer your old social connections over to your new account, but this doesn’t include any of your data except your follows and followers, and falls apart if your old server goes offline, is adversarial to you or your current server, or in basically any situation where you can’t get that redirect.&lt;/p&gt;
    &lt;p&gt;There are many other philosophical differences between the ActivityPub camp and the Nostr and ATProto camp, but this one is the most important one, at least in my opinion - both ATProto and Nostr have sections explaining “Why not just go with ActivityPub?” that state this as their primary reason. Both ATProto and Nostr have real account portability by design.&lt;/p&gt;
    &lt;p&gt;Both of these protocols don’t have much in common with ActivityPub, so I won’t talk about ActivityPub too much here. But there is one older protocol that both of them extensively draw inspiration from…&lt;/p&gt;
    &lt;head rend="h3"&gt;Secure Scuttlebutt&lt;/head&gt;
    &lt;p&gt;This is where things start to get pretty interesting. In 2014, a New Zealand programmer named Dominic Tarr was living on a sailboat. As you might assume, such a life includes little internet, and when it comes, in sporadic bursts. Centralized social media, like Twitter, wants you to be connected at all times, scrolling your feed and looking at ads. Tarr didn’t want that. The result? He designed a protocol designed for offline-first, intentional, slow communication, free from Big Tech. Its name? Secure Scuttlebutt.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt uses an append-only log of cryptographically signed messages. Your identity is an Ed25519 keypair and is pretty much tied to a single device. One consequence of this is that, as the Scuttlebutt developer docs themselves acknowledge, “If a user loses their secret key or has it stolen, they will need to generate a new identity, and tell people to use their new one instead.”&lt;/p&gt;
    &lt;p&gt;Because it’s an append-only log, every message must contain a reference to the previous message - a bit like a blockchain. That also means that deletes are straight-up impossible. This is also not necessarily a bad thing, just a trade-off.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt started as a purely peer-to-peer protocol, using a gossip model - in fact, that’s where its name comes from; in sailor-slang, scuttlebutt means “water-cooler gossip”. The first popular Scuttlebutt client was an app called Patchwork, authored by Paul Frazee (keep this guy in mind, he’s gonna be important later), and initially the protocol and client often evolved together, adapting to each other’s needs.&lt;/p&gt;
    &lt;p&gt;By default, when you add to your append-only log, that addition only exists on your device; but the next time you connect to a peer running a Scuttlebutt client, your two clients will sync with each others’ logs, and then verify them against each others’ public keys. And to verify the newest part of a Scuttlebutt log, you need the whole log - this ensures that if someone gets part of your content, they get all of it.&lt;/p&gt;
    &lt;p&gt;But you don’t just sync each others’ content - your clients sync all the logs they have locally. That’s why it’s called the gossip model - once you put out a post, as long as you’re connected to a few peers every once in a while, your post will spread as fast as gossip to the friends of your friends. It usually takes time for that information to spread to everywhere, which keeps the pace of Scuttlebutt life somewhat slow and relaxed, with the most active communities being, again, small and tight-knit. Scuttlebutt is definitely not a global social network. The gossip model was driven by the social graph, allowing users to sync with others based on who they follow and who their connections follow. This mechanism relied on cloud bot users, known as “pubs,” acting as connectors and community hubs.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt syncing took time due to the necessity of syncing all activity. Pubs played a crucial role in facilitating connectivity within the network, ensuring that users could discover others either by sharing a pub or by following users who were connected to them.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt’s evolution was influenced by the desire for decentralized communication, distinct from the centralized nature of platforms like Twitter. It offered an alternative for those seeking intentional, offline-first communication free from the constraints of Big Tech. While initially designed for smaller, tight-knit communities, the ideas and learnings from Scuttlebutt inspired later attempts to build decentralized networks suitable for global networking.&lt;/p&gt;
    &lt;p&gt;So, now the stage is mostly set. Twitter was the first “global town square”, a social network connecting people and ideas worldwide - but not without a myriad of problems, which many concluded were due to its centralized nature. ActivityPub and Scuttlebutt (and others) experimented with decentralizing the social world, mostly with a focus on smaller communities, though as they evolved people tried to make them more suitable for global networking. Neither of them would prove viable for global social networks, but the learnings from them would help develop the next generation of social protocols.&lt;/p&gt;
    &lt;head rend="h3"&gt;Freeing the Bird&lt;/head&gt;
    &lt;head rend="h4"&gt;or, where ATProto and Nostr came from&lt;/head&gt;
    &lt;p&gt;All of this is important background for understanding the motivation behind these two protocols. Twitter started it all by showing us what microblogging at scale - a “global town square” - looks like. It showed us how many problems there are with it, and to some, that the only way to fix them is to remove corporate control. ActivityPub and Scuttlebutt showed us two very different ways of doing so, each with their own major benefits and major drawbacks. But there’s still a long way to go from these experiments, which were largely paving the way in the late 2010s, to where we are now, almost halfway into the third decade of the 21st century. To fill in these gaps, we can start towards the end of the second decade of the 21st century.&lt;/p&gt;
    &lt;p&gt;It wasn’t just people outside Twitter who were aware of the multitude of issues with Twitter - of course Twitter noticed them too. Twitter had started as a much more open company than it was at this point in December of 2019 - over the years, they’d taken, for a variety of reasons, a more centralized path, facing investor pressure for returns, and other such things. Twitter knew that, in the words of founder then-CEO Jack Dorsey, “centralized enforcement of global policy to address abuse and misleading information is unlikely to scale over the long-term without placing far too much burden on people.” Jack and the rest of Twitter drew the same conclusion as ActivityPub and Scuttlebutt had before - corporate control of social media was simply bad for everyone. Twitter was a company full of people who realized the service was just in a shitty position no matter how you looked at it, and who were doing everything in their power to keep things healthy despite it all - and they saw a way out: to build on, or build, an open protocol for a global social network. And for all the reasons we talked about before, about ActivityPub and Scuttlebutt, neither of those protocols were up to the task.&lt;/p&gt;
    &lt;p&gt;So the Bluesky initiative began. The early history of the project is much better documented elsewhere, but one of the most interesting things to come out of it at this early stage was an ecosystem review of existing decentralized protocols. It was authored by a Zcash developer named Jay Graber, who would go on to become CEO of Bluesky. It included contributions from several notable people in the decentralization space, including Christine Lemmer-Webber, co-author of the ActivityPub spec, Paul Frazee of Patchwork (and at the time now working on Beaker Browser and Dat), Whyrusleeping from IPFS, and Rabble of early Twitter (at the time working on planetary.social, a Scuttlebutt client). It lays out the state of numerous decentralized protocols, including ActivityPub and Scuttlebutt, and explains how user discovery, moderation, etc works in each of them.&lt;/p&gt;
    &lt;p&gt;At the end of all this ecosystem review, Bluesky concluded that none of these existing protocols was really suitable for their goal - a decentralized protocol Twitter, a global social network, could run on. So they decided to create their own - ATProto - and incorporated into a Public Benefit LLC to help achieve this goal. And when their initial team was hired, it included none other than Paul Frazee of Patchwork, in addition to Aaron Goldman, a former security engineer at Twitter, and Daniel Holmgren, an engineer with experience building on IPFS.&lt;/p&gt;
    &lt;p&gt;Now, while all of this was happening, a Bitcoin enthusiast under the pseudonym Fiatjaf was working on his own little thing. His idea was a non-peer-to-peer reimagining of Scuttlebutt and what it would take to make a similar protocol usable on a global scale. And on November 7th, 2020, the first basic working code for his idea of “Relays” quietly slipped onto the scene. Nostr’s initial description even cites Scuttlebutt as an inspiration - the main design differences between the two (at a high level) are that Nostr moves from a p2p network, with pubs as an afterthought, to a purely client-relay model, and that Nostr events are all separate units that do not form a chain.&lt;/p&gt;
    &lt;p&gt;His motivation for creating this protocol was, somewhat similarly to Bluesky, problems with Twitter. Bluesky was motivated by the idea that content moderation at scale is impossible to do well, and centralizing it in the hands of a single company was a bad idea. Nostr, meanwhile, views moderation itself as an enemy - as censorship that the protocol should be resistant to. While in reality, even Nostr has ultimately ended up exploring different forms of communal moderation, the primary motivation behind Nostr’s design choices is an idea of extremely high censorship resistance. This implies that the design, rather than optimizing for consistency, should optimize for availability - if someone wants to see your content, they should be guaranteed to be able to get it from somewhere. The protocol design is pretty conducive to this.&lt;/p&gt;
    &lt;p&gt;Both of these efforts were toiling away in the darkness, waiting for their moment in order to replace centralized social media with a decentralized future. Then in late 2022, something remarkable happened. Centralized social media fell prey to one of its prime weaknesses, right where everyone could see, thanks to one very famous billionaire. Elon Musk payed 44 billion dollars for Twitter, released the so-called “Twitter Files”, and Jack Dorsey, who had earlier kicked off the Bluesky initiative with 13 million dollars, put out a little manifesto in response, titled a native internet protocol for social media. Within a few hours, someone responded pointing him to the Nostr protocol, and he grew very interested, soon giving fiatjaf 14 Bitcoin to help fund Nostr development. A few months later, Bluesky launched their reference app for the AT Protocol. About a year later, Jack Dorsey left the Bluesky board, having chosen to focus on Nostr instead, as it aligned with his “free-speech-Bitcoin-vibes” ethos better. This was despite the fact that ATProto basically does everything he wants in a decentralized social protocol, but he prefers the more Bitcoin-y community of Nostr.&lt;/p&gt;
    &lt;p&gt;Okay, so that’s how we got here. Now we’ve arrived, back in the present. Let’s look at…&lt;/p&gt;
    &lt;head rend="h2"&gt;Where we are&lt;/head&gt;
    &lt;p&gt;Both Nostr and ATProto follow a similar pattern: adapting peer-to-peer data models to work in a client-server model (that isn’t quite federation). The peer-to-peer world had to deal with a unique problem: because there were no servers, there was no canonical source for data where you could go to verify its integrity. Thanks to the wonders of modern cryptography, efforts like Scuttlebutt, IPFS, and Dat all were able to use self-certifying data structures that could be verified independently of any third-party authority. A good example of this is a Merkle Tree, which is a data structure that ATProto also uses (be sure to watch that video, it’s very good and explains well why peer-to-peer networks need this).&lt;/p&gt;
    &lt;p&gt;As it turned out, these data structures and their benefits would help solve many of the problems the federated world faces. Specifically, the federated world, while no longer reliant on a single central server, often ends up simply shifting this reliance to smaller centralized servers that are the only canonical source for user data. When done correctly, applying peer-to-peer data models to the server would reduce this reliance and make data more independent of servers, while also allowing the big-world networking that only servers can achieve.&lt;/p&gt;
    &lt;p&gt;This sounds like a perfect solution, but it’s worth mentioning that it does have some important tradeoffs compared to a pure federation approach like ActivityPub’s. For example, while deletes are still possible on both protocols (though rather difficult on Nostr, which you might be able to piece together why), if someone has your data saved from before your deletion, it is much easier to prove that you said it and hold it up as yours than it is on a protocol that doesn’t have you cryptographically sign everything. And since both protocols heavily optimize for public content, things like Direct Messaging become much more difficult - in fact, on Nostr, DMs are public like everything else (their content is encrypted so no one else can read them). In general, trying to keep data private becomes extremely difficult; these protocols have delivery models which both center around the same self-certifying data being replicated in many places so anyone who wants it can get at it. With this, things like blocking other users become basically impossible, since there’s no canonical source to restrict content from.&lt;/p&gt;
    &lt;p&gt;Now let’s look at a few different protocol building blocks and how each protocol handles them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Identity&lt;/head&gt;
    &lt;p&gt;Identity in networks is a difficult problem. Ideally, you want identifiers to be human-meaningful - for example, a Twitter handle. If I see the Twitter handle @jack, I can be fairly sure that that’s Jack Dorsey. You also want them to be secure - only @jack should be able to create a post that says it’s from @jack, and I shouldn’t easily be able to take over the account @jack without gaining access to some kind of key. And you probably also want them to be decentralized, so that @jack isn’t beholden to anyone else to hold his identity, and can move around.&lt;/p&gt;
    &lt;p&gt;Unfortunately, it’s not easy to have all three of these nice properties - Secure, Human-Meaningful, and Decentralized - at once. Almost every system which tries to have all three has to end up compromising on one of them. This trilemna is known as Zooko’s Triangle. As examples:&lt;/p&gt;
    &lt;p&gt;Twitter usernames are secure - I can’t just put out a tweet that looks like it’s from @jack - and human-meaningful - a guy with the handle @jack is probably named Jack. But they’re obviously not decentralized - they are all reliant on Twitter’s servers, and it’s Twitter who decides that @jack points to Jack Dorsey’s account. If they, say, wanted to rebrand to X, and someone was using the @x handle, Twitter could easily take it from them and make their own handle @X.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt, meanwhile, has identity that’s decentralized - it’s just your private key, essentially a random number - and your public key, the part other people can see. It’s also secure - I need to actually have your private key to pretend to be you. But a public key, which is also just a number (derived from your private key), is not very human meaningful.&lt;/p&gt;
    &lt;p&gt;If you’re familiar with ActivityPub, you might argue that ActivityPub usernames are all three. This isn’t really true - ActivityPub usernames behave like Twitter usernames, except instead of just one big central Twitter server deciding what username points to what, this is handled in smaller centralized servers which federate with each other.&lt;/p&gt;
    &lt;p&gt;Nostr and ATProto also experience this problem, and they both share a few views around identity, listed out here so each one corresponds to a side of Zooko’s Triangle:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Your identity should not be permanently tied to a single server - Decentralization&lt;/item&gt;
      &lt;item&gt;Your data should be cryptographically verifiable as coming from your identity - Security&lt;/item&gt;
      &lt;item&gt;There are two “layers” of identity - a permanent computer-oriented one and a changeable human-friendly one - Human-Meaningful.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Even with these similarities, how that really plays out in both protocols looks extremely different. The idea that your data is cryptographically verifiable as yours implies a keypair somewhere. In Nostr, that’s exactly it - your identity is just a secp256k1 keypair. Nothing more, nothing less.&lt;/p&gt;
    &lt;p&gt;That sounds very much like the permanent computer-oriented layer of identity. So the human-friendly identity is handled by a Nostr event of the profile type - this contains stuff like your bio, display name, and avatar. There’s also NIP-05, which allows using the .well-known/nostr.json path on a domain to get email-style usernames, like &lt;code&gt;jack@cash.app&lt;/code&gt; - and this includes a special case, &lt;code&gt;_@domain&lt;/code&gt;, that gets treated by clients as just &lt;code&gt;@domain&lt;/code&gt;. When you &lt;code&gt;@mention&lt;/code&gt; someone in a Nostr note, it’s just &lt;code&gt;@&amp;lt;their public key&amp;gt;&lt;/code&gt;, which clients then simply display as their display names. Notably, having either a display name or even a real NIP-05 username is completely optional under Nostr, and your public key really is your identity.&lt;/p&gt;
    &lt;p&gt;This looks like mostly a success, at least in terms of taking those views and treating them as criteria. Nostr actually takes the first point - identity should not be permanently tied to a single server - and goes slightly further: in Nostr’s model, where your identity really is just your keypair, no servers are involved in identity at all. Why would you want that? A major benefit of this approach is that if any of the servers involved in the system goes down or is no longer friendly with you, your identity doesn’t even need to be “recovered” - it’s just there, the same as before. This works well with the Nostr Relay model, which we’ll discuss in the next section.&lt;/p&gt;
    &lt;p&gt;The drawbacks of this approach are the same as Scuttlebutt. Thanks to the relay model, your identity is no longer tied to a single client on a single device - you can easily move around, between relays, between clients, between devices. This, by itself, for most people, is a good thing, but it comes with an entirely different kind of problem:&lt;/p&gt;
    &lt;p&gt;Managing a cryptographic keypair is simply not very user-friendly. You simply can’t expect most people to write it down and keep it in a safe place or even take the time to understand what it means. People expect username-password systems, and sure, newer technology like passkeys is actually more secure and potentially easier - but that comes with actual benefits over username-password for most people! Managing a keypair is not only unfriendly, it’s incredibly risky. Since the entirety of your identity is your keypair, and to sign in to Nostr clients is to give them your private key - well, you can probably see where this is going. And again, since your identity is just your keypair, just like with Scuttlebutt, if an attacker gets a hold of your private key, that identity is gone. No longer yours. There’s no-one you can go to for help, no-one who can recover that account, no password reset link.&lt;/p&gt;
    &lt;p&gt;That sounds very negative, but it is worth noting that at least for web Nostr clients, there is a (relatively) good solution to the sign-in problem - NIP-07. In the NIP-07 world, you don’t give every client your private key - you give it once to a browser extension, and then every time a web client wants to do something on your behalf, instead of directly using your private key to sign messages etc, it delegates that to your trusted extension. This is a lot better than giving your private key out to every client that has some cool new feature you want to try. Of course, this doesn’t help with recoverability - if you lose your private key, whether to your memory or to an attacker, it’s still gone. There are attempts to solve this, too, which I’ll talk about in “Where we’re going” because it has interesting future implications.&lt;/p&gt;
    &lt;p&gt;ATProto looks at things a little differently. Because of the aforementioned difficulties involved with users managing their own private keys, Bluesky chose to have your signing keypair live on a server - your Personal Data Server, or PDS. Your PDS is responsible for serving your Data Repository to other services on the network, and serves as more-or-less the canonical source for your content. However, your Repository is fully self-certifiable (that means someone can check whether or not you created the content in a copy of your Repo without needing a third party to verify), and so is not permanently tied to your PDS. This is because your PDS is not the canonical source for your identity - but your identity is also not something as small as a keypair here, and does not live entirely client side.&lt;/p&gt;
    &lt;p&gt;Instead, ATProto uses their own homegrown DID (Decentralized IDentifiers, W3C spec with the aim of helping, well, decentralize identity) method called did:plc, for PLaCeholder. Why is it named “placeholder”? Well, because as of now, it’s centralized. That’s right, the supposedly “Decentralized” Identifier is centralized - and Bluesky actively doesn’t want it to be that way. did:plc was initially intended to be a placeholder until a decentralized method was able to meet their requirements - “a strongly consistent, highly available, recoverable, and cryptographically secure method with fast and cheap propagation of updates”. did:plc has all of these at one major cost - it’s centralized. However, the data in a did:plc is self-certifying (you don’t need to trust/rely on plc.directory to verify the information), so it’s conceivable for it to become more decentralized in the future. (You can also use a did:web, which removes this centralization but forces you to manage everything yourself and relies permanently on your control of a web host on a domain, thus removing most of PLC’s benefits. This is pretty niche, so I won’t talk about it in detail here.)&lt;/p&gt;
    &lt;p&gt;A did:plc: contains two public keys - your rotation key and your signing key. This signing key is the aforementioned key that the PDS uses to sign your data. The rotation key is important because it manages your did:plc: and thus is needed to sign updates to your DID document, such as when migrating PDSes. The canonical source for your current PDS, valid signing key, handle, and rotation keys (which can also be rotated) are all your DID document. In this way, a DID serves as a “Theseus Identity”, an idea Aaron Goldman laid out well in this YouTube video.&lt;/p&gt;
    &lt;p&gt;The canonical source of your identity is your DID doc, and all the information in it, i.e. your handle and current PDS must be a two-way connection - your handle is a domain with a dns txt record or ./well-known/atproto-did that must point to your DID, providing two way verification, and whatever PDS your DID document points to must actually have your account on it. Meanwhile, the PDS handles data, and implements a standard, user-friendly login system, and signs your updates with your key on the server side.&lt;/p&gt;
    &lt;p&gt;Here, there was a trade-off between principles of security, recoverability, and user-friendliness, and a principle of max-decentralization - low-friction identity, with no centralizing points of control at all, extreme takeover resistance. Notice that&lt;/p&gt;
    &lt;p&gt;Where ATProto chooses user-friendliness, Nostr chooses max-decentralization. This is a trend that repeats in many other parts of each protocol’s design, as we’ll see.&lt;/p&gt;
    &lt;head rend="h3"&gt;Data&lt;/head&gt;
    &lt;p&gt;In the traditional federated world of protocols like ActivityPub, there had never been much of an emphasis on data, and the formats and structures it’s stored in. The federated world thought much more about how servers should communicate messages rather than how they should store data - this difference is laid out well by Bryan Newbold, who incidentally now works on protocol design at Bluesky. This emphasis on communication standards rather than data standards is a big part of why there’s no standard “fediverse repo” that you can transfer between servers, and other such problems in the federated world.&lt;/p&gt;
    &lt;p&gt;The peer-to-peer world, as we looked at earlier, couldn’t afford to define pure transport protocols - they had to design standardized data structures that were self-certifying and self-contained. An example of such a data structure is a blockchain, and indeed, the peer-to-peer community and the blockchain community learned much more from each other than either of them and federation did from each other.&lt;/p&gt;
    &lt;p&gt;This was the status quo until ATProto and Nostr came along and broke the mold by bringing these self-certifying data structures into the client-server world. They both use asymmetric cryptography to make this data self-certifying, but the similarities basically end there.&lt;/p&gt;
    &lt;p&gt;In the Nostr model, servers are dumb. They have basically one job - transmit data. There’s only one kind of server in Nostr - a Relay, and a Relay does only three things:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Receive data to store&lt;/item&gt;
      &lt;item&gt;Return that data when asked for it&lt;/item&gt;
      &lt;item&gt;Provide a continuous stream of the data being placed on that Relay&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Notably, Relays store data. Data is placed on Relays. All this data is created on the client-side. Relays don’t manage identity or any of that. Your keys live with your client, and it’s your client who signs your &lt;code&gt;events&lt;/code&gt; (a piece of data in Nostr terminology.) When you fetch data from a Relay, it comes back with signatures and all - which, guess what, your client verifies. Your client almost operates under the assumption that Relays will try to do weird stuff, people will submit fake events, etc - and so Nostr removed the requirement of trust, by making clients verify everything themselves. A trade-off!&lt;/p&gt;
    &lt;p&gt;Nostr, by optimizing for censorship resistance, needs to remove as much rigidity from its design as possible. Data needs to be cheap to create and transmit and store. So Nostr events all exist as individual units following a fixed JSON format with a strict signing convention. Unlike Scuttlebutt, these events don’t need to form a chain - they are purely self-contained. Like your identity, there’s no canonical source for them either - by design, you’re supposed to be able to get them from pretty much any relay that has them. When you create the event, your client signs it and then just publishes it to as many relays as possible, from where it will circulate into other Relays, consuming clients will republish them, etc. Because they are signed against your public and are fully self-contained, it’s trivial to verify them too, removing the necessity of trust in the Relay you get the event from.&lt;/p&gt;
    &lt;p&gt;ATProto data is also very portable, but it is slightly more rigid than Nostr data is. Instead of using these one-off events which are fully self-certifying, ATProto stores your data as records in what it calls a repo. These records live under a collection like &lt;code&gt;app.bsky.feed.post&lt;/code&gt; and are given an &lt;code&gt;rkey&lt;/code&gt; (record key). Together, this forms a URI for any given record that looks like &lt;code&gt;at://did/collection/rkey&lt;/code&gt;. Importantly, records are mutable, unlike nostr events, and the contents an at:// uri points to may change. However, all the commits to your repo, which contain changes like record creation, editing, and deletion, are content-addressed using a CID, and these are immutable, and are all signed using your repo’s signing key (the one from your DID doc, remember?) Your commits can also optionally form a chain if you want, but when they don’t, deletes are easier. (If all of that flew over your head, don’t worry. All you need to know is that ATProto allows deletes and edits, while Nostr can’t.) Because your data all lives in this repo, unlike Nostr, ATProto actually has a canonical source for your data.&lt;/p&gt;
    &lt;p&gt;There’s also a single place where your repo lives, instead of being scattered as a bunch of events across Relays like in Nostr. Your repo lives in your Personal Data Server - as the name implies, a PDS is designed to store your personal data. While Nostr Relays are dumb pipes, PDSes are more like a user agent, which really performs almost all actions on the user’s behalf. It’s responsible for signing and storing commits to your repo and wrapping them in a nice API that’s easy for clients to use.&lt;/p&gt;
    &lt;p&gt;Actually, we should probably take a minute just to talk about deletes and edits. When I said Nostr can’t allow deletes and edits, that wasn’t completely true: Nostr does have a way to request deletes from Relays, which most but not all Relays support, but the real trouble is figuring out what a delete even means (and edits are straight-up impossible since Nostr event IDs are fully content-addressed). Nostr’s model is fundamentally based on an idea of events flowing from the creator into Relays, which then flow into other people’s clients, which cache them and republish them to other Relays, and so on. An event doesn’t have a location to be deleted from - it could be (and in Nostr’s model, should be!) anywhere and everywhere.&lt;/p&gt;
    &lt;p&gt;In ATProto, your repo actually has a place where it lived - your PDS, as specified in your DID doc. And at:// uris are mutable, so a commit can actually change the content it points to. Deletes remove content from your repo - although anybody who has a copy of your content pre-delete will still have it and can very easily cryptographically prove that it’s your content.&lt;/p&gt;
    &lt;head rend="h3"&gt;Trust&lt;/head&gt;
    &lt;p&gt;Nostr and ATProto have relatively similar approaches to trust, though with some important differences. Nostr trusts nobody, and is built accordingly, with clients verifying everything themselves. ATProto assumes you trust somebody, but lets you choose whom you trust, and provides the mechanisms needed to verify that trust is placed correctly (although this could be improved).&lt;/p&gt;
    &lt;p&gt;Nostr, as mentioned earlier, was designed to basically eliminate the necessity of trust in the first place. Because everything is verified client-side, and essentially functions as a bunch of self-authenticated units of data traveling between relays and clients, there really is no one to trust. Relays can choose not to carry content, but other relays might have them instead. However, the fact that all data moves as individual units means that it would be harder to spot if only certain events are available.&lt;/p&gt;
    &lt;p&gt;Since every user is assumed to be pointing their client at more than one relay, it doesn’t really matter if one relay chooses not to carry someone’s content; there’s a high likelihood another one is. If many relays agree to hide something from the network, then it won’t show up, but that’s pretty unlikely to happen. As for trusting the authenticity of the content delivered by the relay, because it’s cryptographically verifiable as coming from the attached pubkey, any shenanigans will be spotted quickly. And verifying a pubkey’s identity is done by attaching it to a trusted NIP-05, i.e. @jack@cash.app or @jb55.com.&lt;/p&gt;
    &lt;p&gt;ATProto isn’t that different, all things considered, but there’s multiple other hops between the source of data and the client you view it in. Each ATProto PDS puts out a cryptographically verifiable stream of commits being pushed to repos on the PDS, carrying every bit of data to the subscribers, called the firehose. Because there are a lot of PDSes, an optimization also called a Relay was introduced, which basically aggregates PDS firehoses into its own giant firehose. In a way, this Relay could be considered its own centralization point where bad untrustworthy things could happen, but once more than one Relay exists this should be less of a problem. At the Relay and PDS, everything is cryptographically verifiable, and as a bonus because of ATProto’s repo structure, you can tell if you’re not getting the whole picture.&lt;/p&gt;
    &lt;p&gt;After the Relay, things get a bit murkier, because as an optimization ATProto applications use something called the AppView. The AppView reads in the firehose from the Relay constantly and pieces it together into fully hydrated and speedy APIs which make clients’ lives much easier. The thing about the AppView is that it’s basically centralized, and though it’s not super difficult to spot inconsistencies between what the AppView gives you and the true state of the network, the AppView doesn’t even provide the cryptographic signatures that were passed into it, making its trustworthiness a bit murky at some unknown time in the future, at which point other contenders will hopefully exist to replace it, based on analysis of which one is more trustworthy by comparing the data each AppView gives you with what actually exists on the Relay and PDSes.&lt;/p&gt;
    &lt;head rend="h3"&gt;Privacy&lt;/head&gt;
    &lt;p&gt;Everything is completely public on both protocols and in fact being actively broadcasted to loads of consumers, not just sitting around waiting to be stepped on and found. Nothing you do is really hideable from anyone.&lt;/p&gt;
    &lt;p&gt;However, at least on ATProto, there have been attempts to add some semblance of privacy to the network. For example, there are AppView-enforced blocks, but they can be bypassed very easily. There is also a setting which asks the client to not show your posts to logged-out users, but this is superficial at best, since only some clients really follow it anyways, and the “official” popular client does so it does kind of work. But overall these measures both run a risk of making people feel like their posts and other activity are hidden and safe, lulling them into acting with less precaution than they should, especially since there is a lack of user awareness around the all-public nature of data on the network.&lt;/p&gt;
    &lt;p&gt;No such attempts have been made on Nostr. This is on the one hand unfortunate, but on the other hand possibly better since it is more honest about the true nature of how public everything is on the network.&lt;/p&gt;
    &lt;head rend="h3"&gt;Development&lt;/head&gt;
    &lt;p&gt;Due to the Bluesky devs’ past experiences with developing on peer-to-peer and federated protocols, many of them felt burnt by a Scuttlebutt-and-Nostr-style approach to development, where specifications were loose and implementations varied wildly. Because of these past experiences, Bluesky chose to go with a slightly more slow, intentional, and centralized development model. The protocol is mostly developed within Bluesky the company, though often adapts to the needs and feedback from the wider ATProto developer community, and community members often contribute to both the protocol and the clients. The rollout of core features like federation and stackable moderation has also been much more slow on ATProto than similar features in Nostr implementations, because in general Bluesky prefers to take their time and “get it right” and standardized before letting things out into the wild. Also, despite the existence of third-party clients, the “official” Bluesky app and service is still the most popular one by a huge margin, due to its being the default (and basically only) inroad into the protocol and ecosystem. There are other up-and-coming AT Protocol projects that aren’t just Twitter clones, like WhiteWind for blogging, but overall the ecosystem remains sparse compared to Nostr.&lt;/p&gt;
    &lt;p&gt;Nostr, meanwhile, takes the same approach as these previous projects - the protocol itself just exists, very small, letting anyone expand on it. When an extension wants to become standardized, it’s reviewed by a small team including fiatjaf and a few others, and becomes part of the NIPs repository (Nostr Implementation Possibilities). This is basically classic BDFL open-source. However, clients and relays are free to try their own wild things without being “official” NIPs, and any NIP proposal must be adopted by a few clients and relays before it can be considered for “official” status. So it’s a much wilder, freer ecosystem so far.&lt;/p&gt;
    &lt;head rend="h3"&gt;Applications&lt;/head&gt;
    &lt;p&gt;One of the places where ATProto and Nostr differ greatly is their model for building applications.&lt;/p&gt;
    &lt;p&gt;ATProto takes the AppView approach. An AppView is basically a service that reads in the firehose of all the public data on the network, and indexes it into hydrated “views” as an API which clients then use. AppViews are pretty resource-intensive to run and functionally centralized in nature. If you want to make a new ATProto app, you first design your schemas for content in a DSL called Lexicon. Then you make a client that can start publishing your record type, and retrieving and displaying it. For the retrieval and displaying, you create an AppView which monitors the firehose for your record types and indexes them into hydrated views, which your client can then fetch from and display nicely and neatly. This is, for example, how the Bluesky app can show a list of users who liked a post; because instead of the client having to crawl the entire network itself and figure out which likes are for the post you just viewed and then get the DID and fetch each of that user’s profiles and whether or not you’re following them by checking your own repo, and whether or not they’re following you by looking all over their follow lists, the client just makes one HTTP request and makes the result human-readable. Nice and fast. Of course, the relief that comes to the client means a lot of responsibility is thrusted onto the AppView, which becomes very resource-intensive to run.&lt;/p&gt;
    &lt;p&gt;The first steps to the Nostr model look similar at first, but rapidly diverge. With Nostr, you also start with defining event kinds, and then creating a client which can publish them, and then adding fetching and displaying. The key difference is in how events are fetched. With ATProto, you write an AppView to do the heavy lifting; with Nostr, the heavy lifting is shared between the Relay and the Client. When defining your event kinds, you make sure to also define how to use the “tags” field for that event kind, which is an array of key-value pairs with single letter keys which are indexed by the relays the events are sent to. Basically, if you want to do any kind of linking between events, or inserting any kind of indexable data, that’s where you want to do it.&lt;/p&gt;
    &lt;p&gt;Then for the fetching of the data, we use Nostr’s filtering system. With Nostr, there are two kinds of communication between the client and the relays; publishing events, which pushes the signed client-created event into the relay’s data store, and subscription. Subscription is the interesting part we’re looking at here.&lt;/p&gt;
    &lt;p&gt;Nostr clients can request a subscription to a stream of events from the relays they’re connected to, and this stream subscription can have filters attached. A filter is fully specified using the following attributes, all optional:&lt;/p&gt;
    &lt;code&gt;{
  "ids": &amp;lt;a list of event ids&amp;gt;,
  "authors": &amp;lt;a list of lowercase pubkeys, the pubkey of an event must be one of these&amp;gt;,
  "kinds": &amp;lt;a list of a kind numbers&amp;gt;,
  "#&amp;lt;single-letter (a-zA-Z)&amp;gt;": &amp;lt;a list of tag values, for #e — a list of event ids, for #p — a list of pubkeys, etc.&amp;gt;,
  "since": &amp;lt;an integer unix timestamp in seconds, events must be newer than this to pass&amp;gt;,
  "until": &amp;lt;an integer unix timestamp in seconds, events must be older than this to pass&amp;gt;,
  "limit": &amp;lt;maximum number of events relays SHOULD return in the initial query&amp;gt;
}
&lt;/code&gt;
    &lt;p&gt;By adding multiple filters, you can get all the events matching any of the filters. By adding multiple attributes to a single filter, you add multiple conditions that all have to be fulfilled for events to make it through that filter. Filters are expressly the mechanism for fetching content, since subscriptions are supposed to start by backfilling everything that meets the criteria, and then pushing any new events that meet the filters’ requirements to the client.&lt;/p&gt;
    &lt;p&gt;By studying the filter specification, it’s clear that basically every behavior of ATProto AppViews can be recreated through filters on the client-side, knowing how tags allow extensibility as well. There’s an obvious cost though: clients must be very complex and do a lot of work themselves, and for big events duplicating a lot of effort that could be handled by something akin to an AppView. The benefit of this is that it is very generic and means that any relay can generally be used for any functionality since everything you need is baked into the core protocol, and the speed of development is basically only constrained by the client, and not an AppView. And by not spending any resources on building a giant indexer yourself, you basically shift the cost onto the Relays instead. It’s another example of the more “bazaar” philosophy of Nostr compared to a more “cathedral” approach from ATProto.&lt;/p&gt;
    &lt;p&gt;So, all in all, this gives a pretty good picture of where the two protocols are now. But exciting things are on the horizon for both. We’re heading into uncharted territory…&lt;/p&gt;
    &lt;head rend="h2"&gt;Where we’re going&lt;/head&gt;
    &lt;p&gt;When Jack Dorsey wrote a native internet protocol for social media, he wrote that “As far as the free and open social media protocol goes, there are many competing projects: @bluesky is one with the AT Protocol, nostr another, Mastodon yet another, Matrix yet another…and there will be many more. One will have a chance at becoming a standard like HTTP or SMTP.”&lt;/p&gt;
    &lt;p&gt;That’s one way of thinking about it, as a competition for the final spot of “the standard for social”. But as you’ve probably noticed from reading this post up to here, I don’t really agree with this viewpoint. ATProto, Nostr, ActivityPub, Scuttlebutt, Matrix, IPFS, Dat, Holepunch, and others all share similar goals, yet have vastly different perspectives about how to accomplish them. Maybe these different perspectives will all lose! Maybe, as Jack says, one of them will win, becoming a standard that everyone adopts. Or maybe they will all learn from each other and slowly begin to converge. And it’s not hard to make the case that that last possibility will happen for at least two of these protocols - of course, Nostr and ATProto. In fact, that’s already happening.&lt;/p&gt;
    &lt;head rend="h3"&gt;Convergence&lt;/head&gt;
    &lt;p&gt;Because a lot of core ideas in the protocols were already very similar, they can quite easily borrow ideas from each other in order to improve themselves. By making nearly opposite compromises, they now face roughly opposite problems as well - but often, the other protocol already has a solution waiting for them. So first let’s look at some of the ways Nostr is becoming more like ATProto.&lt;/p&gt;
    &lt;p&gt;First, the idea of keys in a server, instead of purely client-side. As mentioned earlier, one of the dangers of Nostr keys is that by giving them to lots of random clients you try, they might accidentally end up in the hands of bad actors. One of the solutions to this was NIP-07 browser extensions; another one is the idea of an NSecBunker, for Nostr Secret Key Bunker. The idea is that this is a server, similar to a PDS, which holds your Nostr private key, and when your client wants to sign an event, it makes a request to your NSecBunker to sign that event using your private key, which stays safe in your Bunker. These requests usually are authenticated using measures like OAuth. It allows Nostr to bring back at least one part of the user experience people are familiar with.&lt;/p&gt;
    &lt;p&gt;Another idea that Nostr is ending up trying is something similar to AppViews. This is particularly divisive within the community, with many feeling that only the relay-based filtering mechanisms should be used to build clients. But because this is often inefficient, clients like Primal have begun doing their own pre-indexing of many users and posts in order to improve their UX. Unfortunately, Primal’s is proprietary, and only Primal can interact with it, due to the lack of any built-in support for AppView-style services in the Nostr protocol, vs. ATProto’s numerous mechanisms to provide explicit support for this use case.&lt;/p&gt;
    &lt;p&gt;Meanwhile, some Nostr ideas are naturally going to the ATProto world as well. The idea of keys directly owned by the users has long been floated, and at this point developers can get control of their did:plc and its rotationKeys (fun fact: I set one of my plc rotationKeys to my Nostr pubkey). Unfortunately no nice UI exists for this yet. And as for signing keys, with commits that could be pushed to a PDS instead of made there, that would rely on a PDS supporting this use case. No PDS implementation currently supports this, but there is one in development which hopes to at some point ;)&lt;/p&gt;
    &lt;p&gt;Another idea which I hope to see adopted in the ATProto world is something similar to Nostr’s filters model. While the AppView model is nice for production apps, something like Nostr filters could help a lot early in development to just play with an idea and try it out. And it could help those with concerns about the trustworthiness of AppViews quickly verify it against certain queries. You can do a shocking amount with backlinks alone.&lt;/p&gt;
    &lt;p&gt;Of course, the slow convergence of both protocols isn’t the only way the divide between them is being bridged…&lt;/p&gt;
    &lt;head rend="h3"&gt;Bridging&lt;/head&gt;
    &lt;p&gt;Recently, Bridgy Fed started bridging the Fediverse and the ATmospherewith each other. For a while, services like Mostrhave been bridging the Fediverse and Nostr with each other. Now, if you visit the Mostr homepage and scroll down, you can probably see where this is going…&lt;/p&gt;
    &lt;p&gt;Soon after Bridgy Fed started bridging the Fediverse and the ATmosphere, Nostr users experimented with this to bridge between Nostr and Bluesky. Very much an indirect hack, but also a glimpse at the future.&lt;/p&gt;
    &lt;p&gt;One of the most important promises of decentralized social media was that no matter what service you signed up on and post on, you would be able to see content from and interact with anyone, no matter which service they used either. Now, all this would work, if every service signed on to the same decentralized social protocol. However, instead, we have many, and none of them show much of a sign of becoming the singular standard for social media. Instead of Jack’s vision of one winner, bridges offer a vision of a world where every protocol can win, and it truly won’t matter which protocol your service uses, either.&lt;/p&gt;
    &lt;p&gt;While the bridging I talked about above was very indirect, Bridgy Fed itself may soon have native Nostr support. Soon all three major decentralized protocols may be able to talk to each other, and easily too.&lt;/p&gt;
    &lt;p&gt;So. Let’s recap what we’ve been through in this post so far. In the beginning, there was Twitter. Twitter’s problems caused them to look to decentralization as a way to make social media more fair. This caused many new decentralized protocols to emerge, taking inspiration from older ones. Of these new protocols, two of them, Nostr and ATProto, evolved in similar directions, yet unaware of each other made many opposite compromises. And now they are evolving back towards each other, converging in potentially very interesting ways, with bridging offering to make social media not just platform- but protocol-agnostic.&lt;/p&gt;
    &lt;p&gt;The future is looking good for decentralized social media.&lt;/p&gt;
    &lt;p&gt;You can join the conversation on Bluesky here.&lt;/p&gt;
    &lt;head rend="h3"&gt;Comments from Bluesky:&lt;/head&gt;
    &lt;p&gt;Or on Nostr:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://shreyanjain.net/2024/07/05/nostr-and-atproto.html"/><published>2025-10-12T09:24:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45556952</id><title>Macro Gaussian Splats</title><updated>2025-10-12T19:12:01.839918+00:00</updated><content>&lt;doc fingerprint="7bcdcf46dcb0d210"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Macro Splats 2025&lt;/head&gt;
    &lt;p&gt; A Gaussian splat is essentially a bunch of blurry ellipsoids. Each one has a view-dependent color, using a process similar to training an AI model, you can optimize until it converges to the photos you feed in. The result is a sort of 3D photograph that can be viewed freely from any angle. &lt;lb/&gt; Captivated by this possibility, I wanted to create splats of macro subjects. The hairy, fuzzy textures and complex structures of insects make them a perfect fit for this technique. &lt;lb/&gt; In theory, creating a splat is as simple as filming the object from all sides. Unfortunately, the extremely shallow depth of field in macro photography completely throws this process off. If you feed unsharp photos into it, the resulting model will contain unsharp areas as well. &lt;lb/&gt; Thankfully, there’s a common technique in macro photography called focus stacking, where multiple images taken from the same angle but with slightly different focal points are combined into one fully sharp photo. A single stack usually contains anywhere from 50 to 500 images. Since I needed to photograph the subject from many angles, I optimized the process to use as few photos per stack as possible and settled on 16. I shot at a small aperture of f/18 to maximize depth of field. The diffraction introduced by this setup can be minimized later in post. &lt;lb/&gt; To capture the specimen from all angles, covering a bit more than half a hemisphere, I mounted the insect on a rotary disk and tilted the camera up and down on a boom arm. A script rotated the disk by fixed increments, and each focus stack was captured using a WeMacro automated focus rail. The vertical angle was adjusted manually (only eight times), so it wasn’t a big issue. In total, I captured 111 perspectives. A full session of 1776 photos took about four hours. The main bottleneck is my Nikon D810, which isn’t built for such continuous shooting, it slows down to one frame every one or two seconds once the buffer fills up. I used a Tamron 90mm lens with a 20mm extension and shot in DX (cropped sensor) mode. Shorter lenses would change the perspective too much between focus areas, making image alignment impossible. &lt;lb/&gt; After batch focus-stacking all the photos, I ended up with 111 fully sharp images. The camera positions could then be reconstructed in COLMAP. I performed some color correction and background masking before feeding the data into training with Postshot. Out comes the splat, requiring only minimal retouching to remove the mounting. &lt;/p&gt;
    &lt;head rend="h1"&gt;See it in 3D&lt;/head&gt;
    &lt;p&gt; You can view all the insects on my superspl.at page. &lt;lb/&gt; I’m also releasing the cluster fly model for free under a CC BY license: Download here. You’re free to use this model for both commercial and non-commercial purposes, as long as you provide credit. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://danybittel.ch/macro.html"/><published>2025-10-12T10:08:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45558611</id><title>Show HN: I built a simple ambient sound app with no ads or subscriptions</title><updated>2025-10-12T19:12:01.663454+00:00</updated><content>&lt;doc fingerprint="b7ff85d8f21c8a02"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with ambient soundscapes&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with &lt;lb/&gt;ambient soundscapes&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with &lt;lb/&gt;ambient soundscapes&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ambisounds.app/"/><published>2025-10-12T14:49:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45558635</id><title>Germany's Schleswig-Holstein Completes Migration to Open Source Email</title><updated>2025-10-12T19:12:00.677087+00:00</updated><content>&lt;doc fingerprint="6b5b391b3d96b4a7"&gt;
  &lt;main&gt;
    &lt;p&gt;European nations have generally been more progressive in adopting open source solutions for government operations. Sure, regressive proposals like the EU Chat Control bill make headlines, but there's genuine progress happening too.&lt;/p&gt;
    &lt;p&gt;The German state of Schleswig-Holstein is back in the news for its open source efforts. This time, it's their email system that's undergone a complete transformation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Microsoft Booted Out, Again&lt;/head&gt;
    &lt;p&gt;Schleswig-Holstein has successfully migrated (in Deutsch) its entire state administration email system from Microsoft Exchange and Outlook to open source alternatives, Open-Xchange and Thunderbird. The German state completed the transition on October 2, 2025, after a six-month process.&lt;/p&gt;
    &lt;p&gt;The migration affected around 30,000 employees across various government departments. This includes the State Chancellery, ministries, judiciary, state police, and other state authorities. Over 40,000 mailboxes containing more than 100 million emails and calendar entries were moved to the new system.&lt;/p&gt;
    &lt;p&gt;The state has adopted Open-Xchange as its email server solution and Thunderbird as the email client.&lt;/p&gt;
    &lt;p&gt;Of course, the transition wasn't without challenges. Digitization Minister Dirk Schrödter previously acknowledged problems during migration to open source software, including downtime and delays in email traffic. Despite these hurdles, this particular move has now been completed successfully.&lt;/p&gt;
    &lt;p&gt;Plus, this switch fits into Schleswig-Holstein's broader open source strategy that has been in development for several years. The state began rolling out LibreOffice as its standard office software last year, gradually replacing Microsoft Office across all state computers.&lt;/p&gt;
    &lt;p&gt;Dirk also emphasized that:&lt;/p&gt;
    &lt;quote&gt;We are real pioneers. We can't fall back on the experience of others –, there is hardly a comparable project of this magnitude anywhere in the world.&lt;lb/&gt;In future, we will be able to use our experience from data analysis to monitoring in the data centre to help others and support them when they embark on the path that we are currently the first to take.&lt;/quote&gt;
    &lt;head rend="h3"&gt;My Thoughts&lt;/head&gt;
    &lt;p&gt;Well, I like what I see here. Not many governments around the world care about open source software, unless it is about optics, of course. But when concrete steps are being taken to make good on past claims, who am I to complain?&lt;/p&gt;
    &lt;p&gt;Via: heise online&lt;/p&gt;
    &lt;p&gt;Suggested Read 📖&lt;/p&gt;
    &lt;p&gt;- Even the biggest players in the Linux world don't care about desktop Linux users. We do.&lt;/p&gt;
    &lt;p&gt;- We don't put informational content behind paywall. Your support keeps it open for everyone. Think of it like 'pay it forward'.&lt;/p&gt;
    &lt;p&gt;- Don't like ads? With the Plus membership, you get an ad-free reading experience.&lt;/p&gt;
    &lt;p&gt;- When millions of AI-generated content is being published daily, you read and learn from real human Linux users.&lt;/p&gt;
    &lt;p&gt;- It costs just $2 a month, less than the cost of your favorite burger.&lt;/p&gt;
    &lt;p&gt;Become a Plus Member today and join over 300 people in supporting our work.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.itsfoss.com/schleswig-holstein-email-system-migration/"/><published>2025-10-12T14:53:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559023</id><title>No I don't want to turn on Windows Backup with One Drive</title><updated>2025-10-12T19:12:00.367372+00:00</updated><content>&lt;doc fingerprint="fe842b4d37a7f8e7"&gt;
  &lt;main&gt;
    &lt;p&gt;What are my options here?&lt;/p&gt;
    &lt;p&gt;Inside the "Remind me again in" label are the following options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1 Week&lt;/item&gt;
      &lt;item&gt;30 days&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And when I select one option, what does "No thanks" do? Does it dismiss the box entirely and I never have to see it? Or does it validate the reminder schedule? What if I just don't want OneDrive? Microsoft has embedded it so deep into Windows that there are no easy ways of getting rid of it. I would understand if they had asked me when I set up my machine the first time, but why every single time?&lt;/p&gt;
    &lt;p&gt;This is the illusion of choice. It is "Get it now" or "Get it later". What I'm looking for is the "Get it never option!"&lt;/p&gt;
    &lt;p&gt;Dark patterns at their finest.&lt;/p&gt;
    &lt;p&gt;After I restarted, I got this!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://idiallo.com/byte-size/say-no-to-onedrive-backup"/><published>2025-10-12T15:42:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559076</id><title>How I'm Using Helix Editor</title><updated>2025-10-12T19:12:00.072609+00:00</updated><content>&lt;doc fingerprint="760c3a7d6180fab8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How I'm using Helix editor&lt;/head&gt;
    &lt;p&gt;I've been using Helix as my editor to develop on remote servers for quite some time now.&lt;/p&gt;
    &lt;p&gt;There are a lot of emerging supply-chain attacks, and I simply don't like the idea of installing tens of plugins to Vim/Neovim to make the editor usable.&lt;/p&gt;
    &lt;p&gt;To make the switch from Neovim easier, I had to make some changes to the configuration. I want to share them to save you some time, because discovering them is not straightforward.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tmux setup&lt;/head&gt;
    &lt;p&gt;I use tmux as a terminal multiplexer.&lt;/p&gt;
    &lt;p&gt;One thing that I miss from Neovim setup is a good file manager and TUI for git. I rarely use a file manager, but when I need to, I usually want to move a bunch of selected files quickly. Unfortunately, Helix does not support file editing in the explorer. You can only view them.&lt;/p&gt;
    &lt;p&gt;To overcome it, I added new keybindings to my tmux config:&lt;/p&gt;
    &lt;code&gt;# Yazi related
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

bind-key y display-popup -d '#{pane_current_path}' -x R -h 95% -w 95% -E 'tmux new-session yazi \; set status off'
bind-key g popup -E -w 95% -h 95%  -d '#{pane_current_path}' lazygit
bind-key e display-popup -w 95% -h 90% -E "tmux capture-pane -Jp -S- | hx -"
&lt;/code&gt;
    &lt;p&gt;When I hit one of the keys, a new pop-up window opens.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;prefix - y&lt;/code&gt;- opens&lt;code&gt;yazi&lt;/code&gt;file manager&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;prefix - g&lt;/code&gt;- opens&lt;code&gt;lazygit&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;prefix - e&lt;/code&gt;- opens Helix editor with tmux output history.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The default prefix for tmux is &lt;code&gt;Ctrl + b&lt;/code&gt;, but I'm using &lt;code&gt;Ctrl + \&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The last binding is useful when you want to work with terminal output in your editor. I use it to search the history using regexes or copy selected output quickly. For example, I use it quite a lot to copy output from &lt;code&gt;clickhouse&lt;/code&gt; client that outputs SQL results in CSV or JSON to the terminal. Although it can output it to a file, that's an extra step, since I usually only need to copy-paste the output to Slack. This can be done via mouse, but painful with tmux setup, since you need to scroll the buffer when the output does not fit in one screen.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;yazi&lt;/code&gt; and &lt;code&gt;lazygit&lt;/code&gt; tools are usually opened on top of the Helix Editor.&lt;/p&gt;
    &lt;head rend="h2"&gt;Vim bindings&lt;/head&gt;
    &lt;p&gt;I'm pretty used to Helix keybinds now, but there are still some bindings that I ported from vim:&lt;/p&gt;
    &lt;code&gt;[keys.select]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

[keys.normal]
D = ["ensure_selections_forward", "extend_to_line_end", "delete_selection"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
V = ["select_mode", "extend_to_line_bounds"]
esc = ["collapse_selection", "keep_primary_selection"]
&lt;/code&gt;
    &lt;p&gt;I don't like how Helix selects lines in visual mode. That's why I switched to vim-like behavior. Going one line up/down in a select mode selects the whole line. Helix selects them partially.&lt;/p&gt;
    &lt;p&gt;I have also rebinded ESC so it resets multiple cursors as well. By default, you need to press comma.&lt;/p&gt;
    &lt;p&gt;Lastly, removing text until the end of the line takes too many keypresses, so I ported the D motion as well. It removes everything to the right of your cursor in select mode.&lt;/p&gt;
    &lt;head rend="h2"&gt;Improved status line&lt;/head&gt;
    &lt;p&gt;The default status line lacks some important information, such as the current git branch.&lt;/p&gt;
    &lt;p&gt;I'm using the following config for my status line:&lt;/p&gt;
    &lt;code&gt;[editor.statusline]
left = [
  "mode",
  "spinner",
  "version-control",
  "spacer",
  "separator",
  "file-name",
  "read-only-indicator",
  "file-modification-indicator",

]
center = []
right = [
  "diagnostics",
  "workspace-diagnostics",
  "position",
  "total-line-numbers",
  "position-percentage",
  "file-encoding",
  "file-line-ending",
  "file-type",
  "register",
  "selections",
]
separator = "│"
&lt;/code&gt;
    &lt;head rend="h2"&gt;Useful keybindings&lt;/head&gt;
    &lt;p&gt;You can make your life way easier with custom keybindings. Discovering them took me some time.&lt;/p&gt;
    &lt;p&gt;In my opinion, the most useful are: file reloading, soft wrap toggle, git undo, and git blame.&lt;/p&gt;
    &lt;p&gt;Here is a full list of my custom bindings:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;space - e - w&lt;/code&gt;- Write current buffer to file.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - c&lt;/code&gt;- Close current buffer.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - x&lt;/code&gt;- Close other buffers. This is useful when you have tens of buffers open.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - l&lt;/code&gt;- Toggle inlay type hints. They can be useful, but also noisy to display them every time.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - f&lt;/code&gt;- Format current file.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - w&lt;/code&gt;- Render whitespace symbols. Useful to check what kind of invisible characters are in the document.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - W&lt;/code&gt;- Disable rendering whitespace symbols.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - .&lt;/code&gt;- Show/hide git ignored files in file picker.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - r&lt;/code&gt;- Reload all files. This is very useful, since Helix does not support auto-reloading right now. When a file gets changes externally or when I commit changes, I press this keybinding to update the gutters and sync file changes.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - x&lt;/code&gt;- Undo git change at the current cursor.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - w&lt;/code&gt;- Show git blame for the current line.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;[keys.normal.space]
e = { w = ":write", c = ":bc", x = ":bco", l = ":toggle lsp.display-inlay-hints" }
q = ":quit"

[keys.normal."+"]
f = ":format"
w = ":toggle whitespace.render all"
W = ":set whitespace.render none"
s = ":toggle soft-wrap.enable"

[keys.normal.space.f]
f = "file_picker_in_current_directory"
F = "file_picker"
b = "file_picker_in_current_buffer_directory"
"." = ":toggle-option file-picker.git-ignore"
g = "global_search"
e = "file_explorer"
r = ":reload-all"
x = ":reset-diff-change"
w = ":echo %sh{git blame -L %{cursor_line},+1 %{buffer_name}}"
&lt;/code&gt;
    &lt;head rend="h2"&gt;Editor config&lt;/head&gt;
    &lt;p&gt;After using Helix for 6 months, I discovered that it supports autosave when you switch tabs in your terminal. Some of the newer features in Helix are disabled by default, so old users won't see unexpected changes. You need to go through each option to discover them.&lt;/p&gt;
    &lt;p&gt;Here is my config:&lt;/p&gt;
    &lt;code&gt;[editor]
line-number = "relative"
mouse = true
rulers = [120]
true-color = true
completion-replace = true
trim-trailing-whitespace = true
end-of-line-diagnostics = "hint"
color-modes = true
rainbow-brackets = true

[editor.inline-diagnostics]
cursor-line = "warning"

[editor.file-picker]
hidden = false

[editor.indent-guides]
render = true
character = "╎"
skip-levels = 0

[editor.soft-wrap]
enable = false

[editor.auto-save]
focus-lost  = true
after-delay.enable = true
after-delay.timeout = 300000
&lt;/code&gt;
    &lt;p&gt;Some notable options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;true-color&lt;/code&gt;- Forces true color support.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.file-picker.hidden&lt;/code&gt;- Show dot files in file picker.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;rulers&lt;/code&gt;- Sets visual vertical rulers. Useful when you want to limit the maximum line length of your code without autoformatting.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;completion-replace&lt;/code&gt;- Competitions replace the whole word.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.inline-diagnostics.cursor-line&lt;/code&gt;- Makes diagnostics look better. See screenshot.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;color-modes&lt;/code&gt;- Makes the mode indicator colored.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.indent-guides&lt;/code&gt;- Adds visual indent guides.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.auto-save.focus-lost&lt;/code&gt;- Automatically saves file when focus is lost. Requires terminal support.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.auto-save.after-delay.enable&lt;/code&gt;- Automatically saves file after specified delay.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;rainbow-brackets&lt;/code&gt;- Use different colors for nested brackets. Recent feature, not part of the most recent release yet.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;LSP tweaks&lt;/head&gt;
    &lt;p&gt;For every language, I usually add &lt;code&gt;harper-ls&lt;/code&gt; LSP to highlight grammar errors in comments.&lt;/p&gt;
    &lt;head rend="h3"&gt;User setups&lt;/head&gt;
    &lt;p&gt;I'm curious to hear more tricks from Helix users. So please share your findings in the comments!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://rushter.com/blog/helix-editor/"/><published>2025-10-12T15:48:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559305</id><title>Addictive-like behavioural traits in pet dogs with extreme motivation for toys</title><updated>2025-10-12T19:11:58.766598+00:00</updated><content>&lt;doc fingerprint="37a99a5289210fed"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Abstract&lt;/head&gt;
    &lt;p&gt;Behavioural addictions, characterised by compulsive engagement in rewarding activities despite adverse consequences in the long term, are more heterogeneous and less well-understood than substance addictions, and there is a relative lack of translational research. This study investigates “excessive toy motivation” in domestic dogs as a potential parallel to behavioural addictions in humans. Employing a combination of a behavioural test and an owner questionnaire, we examined whether a subset of highly play-motived dogs meet key behavioural addiction criteria, including craving, salience, lack of self-control, and mood modification. Data from 105 highly play-motivated dogs revealed that 33 subjects exhibited behaviours consistent with addictive-like tendencies, including an excessive fixation on toys, reduced responsiveness to alternative stimuli, and persistent efforts to access toys. Owner-reported behaviours not only corroborated these findings but also demonstrated significant associations with behavioural test scores. Our results highlight parallels between excessive toy motivation in dogs and human behavioural addictions, with dogs as the only non-human species so far that appears to develop addictive-like behaviours spontaneously without artificial induction. This exploratory study provides foundational insights and proposes future research directions that have the potential to significantly deepen our understanding of the psychological mechanisms underlying behavioural addictions across species.&lt;/p&gt;
    &lt;head rend="h3"&gt;Similar content being viewed by others&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;What is play? Why do many large-brained mammals engage in play throughout their lives? And what makes playing potentially addictive? Despite numerous publications on play and its possible functions, play has remained somewhat of a mystery1, being associated with no immediate adaptive function, although it has been suggested to allow animals to practice species-typical behaviours such as hunting, mating, or fighting with a competitor in a non-serious context1. Notwithstanding, play behaviour is ubiquitous among (at least young) mammals and some birds2,3, and in large-brained species in particular – from humans to dogs – it persists throughout life4,5. Still, no unified definition of play exists to date6, although there is some agreement that, at a proximate level, play makes us feel good7. Even in non-human animals, observers will often agree that playful activities look like fun7, with neurotransmitter systems mediating the rewarding aspects of play (opioids, cannabinoids and dopamine)8,9 appearing to be highly conserved across mammalian taxa10.&lt;/p&gt;
    &lt;p&gt;Bateson (2014) proposed a set of characteristics that are generally accepted to define play: it is spontaneous, intrinsically rewarding and “fun”; it is separate from serious consequences; it often involves novel or exaggerated actions and role reversal; it is repetitive, but distinct from stereotypies; and it usually occurs only in healthy, stress-free animals, making it a marker of well-being7. However, regarding the latter point, it has been highlighted that play can also represent an attempt to cope with suboptimal conditions (e.g. in nonhuman animals, play may occur as displacement behaviour in stressful situations5 or may serve to reduce social tensions)11. Also, in humans, playing computer games or gambling represents a way of coping with stress. Moreover, in some instances, what started as a fun activity can become compulsive and develop into a behavioural addiction12,13,14.&lt;/p&gt;
    &lt;p&gt;A behavioural addiction can be defined as “repeated failure to resist an impulse, drive, or urge to perform an act that is rewarding to the person (at least in the short-term), despite longer-term harm to the individual or others” (ICD-11 (International Classification of Diseases 11th Revision))15. Unlike in compulsive disorders, where performance of the compulsive behaviour primarily serves to provide some relief from a negative affective state, i.e. via negative reinforcement, addictive behaviours originate because their performance generates positive affect, i.e. via positive reinforcement. However, as the addiction develops, the behaviour becomes compulsive and may even cease to be rewarding (reviewed by Freimuth et al.16. Behavioural addictions share underlying neurobiological processes17 and behavioural symptoms (such as craving, lack of self-control, tolerance, withdrawal and risk of relapse) with substance addictions17,18. Still, they are more heterogeneous and less well-understood19.&lt;/p&gt;
    &lt;p&gt;While a wide range of behaviours have the potential to become addictive in people (e.g. exercise, sex, shopping, work, etc.)19,20,21,22,23,24,25, to date, only the two disorders related to playing – gambling and internet gaming – are officially recognised as behavioural addictions in the two psychiatric manuals of psychological disorders (DSM-5 and ICD-11). The ICD-1115 included both gambling and internet gaming as behavioural addictions. In the 5th edition of DSM-526, gambling, previously classified as an impulse control disorder, was included under “substance-related and addictive disorders”19,26, while internet gaming was listed separately as “internet gaming disorder”26.&lt;/p&gt;
    &lt;p&gt;What would make behaviours related to playing so addictive? Play involves neurotransmitter systems (opioids, cannabinoids, and dopamine) that are also engaged in the rewarding aspects of food and drug rewards8,9. Thus, video games can provide players a hedonic experience and a high degree of relaxation27. Pathological gaming is an example of how seemingly normal and enjoyable behaviours can develop to disrupt regular social and environmental functioning28,29,30.&lt;/p&gt;
    &lt;p&gt;Compared to substance addiction, there are only a few animal models of behavioural addictions. Moreover, these are restricted to controlled laboratory settings, and addictive-like behaviour has to be actively induced31. Rodent models have been used to investigate compulsive eating (e.g. reviewed in31, exercise addiction (wheel running32,33), gambling34, and responses to sexual reward35. Mice selectively bred for excessive wheel-running, sometimes referred to as an addiction-prone phenotype, develop physiological withdrawal symptoms similar to those found in drug addiction after abstinence36. As with excessive exercise in humans, wheel-running in rodents may become disruptive to everyday activities, leading to impaired nest-building and sheltering behaviour37,38. The animals may continue to wheel-run despite disrupted sleep39 or even in the face of injury40, thus fulfilling the behavioural addiction criterion “persistence of the behaviour despite adverse consequences”41. This suggests that behavioural addictions are not unique to the human species.&lt;/p&gt;
    &lt;p&gt;There is, however, only one species that appears to display addictive-like behaviour spontaneously, without intentional experimental induction: the domestic dog (although inadvertent promotion of addictive-like behaviour by the caretakers cannot be ruled out). A small subset of dogs – colloquially referred to as “ball junkies” – appear to demonstrate an addictive-like desire for object play42.&lt;/p&gt;
    &lt;p&gt;Like humans, domestic dogs frequently remain playful throughout their lives1, engaging in both social and object-related play, as well as combinations (e.g. tug-of-war9. Solitary object play appears to be related to predatory behaviour9; accordingly the development of social and object play may reflect different selective histories of dog breeds, which were selected for various purposes such as hunting, guarding, herding, and other functions6,7,8.&lt;/p&gt;
    &lt;p&gt;Toy play is a potent reinforcer, especially in working dog training43,44,45. For instance, detection dogs working in public settings are typically not rewarded with food due to concerns about undesirable food-seeking behaviours in the field. Still, they will work persistently for their toy rewards. It has been argued that artificial selection has exaggerated play behaviour in adult dogs, especially in working breeds or working lines, where high toy motivation is often actively selected as a predictor of performance46. For example, in Labrador retrievers, working lines demonstrate higher playfulness than show lines, indicating a genetic basis for play motivation and potential for artificial selection47.&lt;/p&gt;
    &lt;p&gt;Playing with toys allows dogs to express instinctive predatory sequences such as chasing, catching, possessing and “dissecting”, considered to be intrinsically rewarding to them based on their species and breed histories48. None of this is pathological, nor is gambling or computer gaming in people. However, such highly rewarding activities have the potential to become obsessive in humans49,50, and the same may be true for dogs.&lt;/p&gt;
    &lt;p&gt;While addictive-like behaviour towards toys in dogs has not been studied to date, the phenomenon has been described in the lay literature (where affected dogs may be referred to as ‘ball junkies’), and it has been (rarely) alluded to in the scientific literature. Lazarowski et al.48 describe how some dogs show behavioural and physiological signs of high arousal in relation to toys, lack of self-control, and behaviours such as whining, barking, spinning, and other behavioural signs of stress when access to a toy is prevented (e.g. because the dog is restrained), suggested as an expression of their inability to manage the frustration of anticipation46. All these signs could be interpreted as indicative of craving (and frustration when the urge cannot be fulfilled).&lt;/p&gt;
    &lt;p&gt;In humans, addictive behaviours are often associated with deficits in inhibitory control and heightened cue-reactivity and craving, which are likely key mechanisms in addiction, particularly when exposed to behaviour-specific cues51,52,53.&lt;/p&gt;
    &lt;p&gt;In animal models of addictions, not only is an increased motivation to work for the rewarding substance notable, but the animals also continue seeking the reward even when it is signalled to be unavailable54. Similarly, excessively toy-motivated dogs may continue to try to gain access to a toy even when the caretaker has put it away (anecdotal evidence55. Dogs that appear obsessed with toys cannot be easily distracted from their fixation on the preferred object – demonstrating the high salience of the toy. Such dogs may even lose interest in other stimuli or social interactions as long as they have access to the toy, or sometimes even when it has been removed from reach55 – i.e., everyday functioning may be affected. Moreover, some dogs may continue playing (e.g., running tirelessly after balls thrown for them) despite adverse consequences, such as over-exertion or even injury in the short term and damage to joints and ligaments in the longer term56.&lt;/p&gt;
    &lt;p&gt;Thus, we suggest that ‘excessive toy motivation’ in dogs may show parallels to behavioural addictions in humans. Domestic dogs share many complex behavioural traits with us57,and they are commonly used as model species to explore compulsive behaviours58,59; cognitive ageing60,61,62, ADHD63,64,65, neuroticism66 and autism67,68,69.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rationale&lt;/head&gt;
    &lt;p&gt;Here, we aim to provide the first scientific evaluation of ‘excessive toy motivation’ in dogs, develop methods to assess this phenomenon, and investigate whether ‘excessive toy motivation’ in pet dogs meets the defining criteria of behavioural addictions. Due to the heterogeneity of behavioural addictions, the number and description of diagnostic criteria are inconsistent in the scientific literature, even in humans19. We decided to explore whether the most common behavioural addiction criteria can be adapted to dogs: (1) craving, (2) salience, (3) mood modification through carrying out the behaviour, (4) lack of self-control, (5) tolerance, (6) withdrawal symptoms, (7) external consequences (the addictive behaviour causes conflict with other activities, other individuals, or within the individual), and (8) relapse after abstinence from the activity (cf28,41,70,71. Two additional criteria are used for diagnosing behavioural addictions in humans: having problems at home or work and lying to/deceiving people close to them26,72. Since these criteria cannot be applied to animals, we focused only on the eight abovementioned criteria.&lt;/p&gt;
    &lt;p&gt;We developed a behavioural test exposing pet dogs to various situations where behavioural addiction criteria in relation to toys can be expressed. Only the first four of the criteria mentioned above can be measured in a single behavioural assessment. The remaining criteria were included in an accompanying questionnaire, in which the dogs’ owners were asked about their dogs’ everyday behaviour.&lt;/p&gt;
    &lt;p&gt;While this study is exploratory, given the lack of prior research in this area, we used convergent methodologies in an attempt to assess internal and external validity. We predicted that dogs classified as having a high tendency for addictive-like behaviour based on our continuous Addictive-like Behaviour Test score, would:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Show higher scores for the individual behavioural addiction criteria: Salience, Craving, Mood modification, and Lack of self-control in the behaviour test,&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Show higher durations of focusing on and trying to access an unavailable toy in the behaviour test,&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Receive higher scores on the owner questionnaire designed to measure dogs’ addictive-like behaviour in everyday life,&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;than dogs classified as having a low tendency for addictive-like behaviour.&lt;/p&gt;
    &lt;head rend="h2"&gt;Methods&lt;/head&gt;
    &lt;head rend="h3"&gt;Play motivation test&lt;/head&gt;
    &lt;head rend="h4"&gt;Ethical consideration&lt;/head&gt;
    &lt;p&gt;The study was assessed and approved by the Veterinary Office of the Canton of Bern, Switzerland (Licence number BE115/17). All procedures were performed in accordance with the “Guidelines for the Treatment of Animals in Behavioral Research and Teaching” of the Association for the Study of Animal Behavior. All dog owners provided written informed consent for their participation.&lt;/p&gt;
    &lt;head rend="h4"&gt;Subjects&lt;/head&gt;
    &lt;p&gt;One hundred twenty-six dog-owner teams were recruited via advertisements on social media. In the first call, any play-motivated dog was welcome to participate. In a second call, we specifically sought dogs showing ‘excessive’ motivation for toy play.&lt;/p&gt;
    &lt;p&gt;Twenty-one of the 126 tested dogs were excluded from the analysis as they were (1) outside the target age range (&amp;lt; 1 year or &amp;gt; 10 years old; N = 9), (2) did not complete the test due to fatigue (N = 1), (3) did not play at all or were too fearful for pulse measurements (N = 7), or (4) due to disturbances during the test (e.g. owners bringing young children along, N = 4). The final sample (N = 105) included 56 males (34 neutered or chemically castrated, 20 intact and 2 cryptorchids) and 49 females (34 neutered and 15 intact), ranging in age from 12 months to 10 years (mean age = 5.09 years, SD = 2.6). The dogs belonged to various breeds (for demographics, see Supplementary Table 1). Eighty-two owners (72 women and 10 men) participated in the study.&lt;/p&gt;
    &lt;head rend="h4"&gt;Experimental set-up&lt;/head&gt;
    &lt;p&gt;Behaviour tests took place in an experimental room (Fig. 1), measuring 5.22 m x 3.36 m. A wooden partition wall divided the room into two parts so that the effective testing space was 3.60 m x 3.36 m. The room was furnished with two chairs and several shelves on the walls. One of the chairs was placed in front of the wooden partition wall (facing the entrance door), and the other was placed at a 90° angle against the wall to the left. In front of both chairs, a taped line marked a one-meter distance from the chairs. During the habituation phase, the opaque box in which a toy or food was enclosed during several subtests (hereafter, unsolvable task box) was placed next to the experimenter’s chair.&lt;/p&gt;
    &lt;p&gt;Four video cameras (IB8377-H; 4 MP, 30 fps, H.264, WDR Pro, IR, PoE, IP66, 2.8–12 mm) were placed in the room, and recordings were made using the recorder system (ND9441P NVR, 16-CH, 4HDD, H.265, HDMI/VGA, 16x PoE).&lt;/p&gt;
    &lt;head rend="h4"&gt;Methods&lt;/head&gt;
    &lt;p&gt;The test battery consisted of 14 subtests assessing various aspects of toy motivation in dogs. Play behaviour per se cannot be used to infer addictive-like behaviour, which is characterised primarily by reactions when the reward is unavailable; therefore, only subtests relevant to exploring behavioural addiction criteria are described in detail hereafter. The complete description of the play motivation test is available under: https://figshare.com/s/dfd6d12d922f7543b96c.&lt;/p&gt;
    &lt;head rend="h5"&gt;Procedure&lt;/head&gt;
    &lt;head rend="h3"&gt;Room habituation&lt;/head&gt;
    &lt;p&gt;After the owner and the dog had entered the test room, the dog was unleashed, and a 3-minute habituation phase commenced (Fig. 1). Meanwhile, the owner and the experimenter were seated on their allocated chairs, and the experimenter explained the test procedure. The owner signed the consent form. The owners were instructed to interact with the dog only when asked to perform one of the subtests and not to use food during testing unless absolutely necessary (such as exchanging food for a toy if the dog was unwilling to relinquish it).&lt;/p&gt;
    &lt;head rend="h3"&gt;Choosing the toy&lt;/head&gt;
    &lt;p&gt;After the habituation phase, the experimenter retrieved a box containing various commercial dog toys of different sizes and textures, with and without squeakers, etc., from the adjacent storage room. Only toys that might be associated with food enrichment were excluded. The owner was asked to select three toys (one ball, one tug toy and one plush toy) which they thought the dog would like the most. If the owner had brought the dog’s favourite toy from home, this toy was used in the subsequent preference test along with two other toys.&lt;/p&gt;
    &lt;p&gt;After removing the toy box from the room, the experimenter returned to the test room. The owner recalled the dog and sat down on their chair, holding the dog behind the Line marking the 1 m distance from the chair. Opposite the dog at the front of the room, the experimenter placed the three toys on the floor in a row, 40 cm apart. After the experimenter had returned to her chair, the owner released the dog, who could now explore and play with the toys for 30 s. The two people present did not interact with the dog during this time. The toy the dog spent the most time interacting with was used for subsequent testing. Forty-five dogs selected a ball, nine selected a tug toy, 39 selected a plush toy, and 12 selected a hybrid toy (plush ball: N = 3; tug with a ball: N = 6; plush tug: N = 3). On rare occasions, the dog did not show interest in any of the toys. In this case, the owner was asked to choose the type of toy the dog was usually most interested in at home. The chosen toy was used throughout the experiment, and the remaining two toys were placed on the shelf out of reach and sight of the dog. If the preferred toy was not a tug toy, the tug toy was used in subtests where the owner or experimenter played tug-of-war with the dog.&lt;/p&gt;
    &lt;head rend="h5"&gt;Description of the subtests and their relevance for addiction criteria coding&lt;/head&gt;
    &lt;p&gt;A description of the subtests and, when applicable, their relevance for addiction criteria coding is given in Table 1.&lt;/p&gt;
    &lt;head rend="h4"&gt;Behavioural coding&lt;/head&gt;
    &lt;p&gt;Videos were coded using Solomon Coder (Solomon Coder beta 19.08.02, Copyright 2006–2019 by Andràs Péter).&lt;/p&gt;
    &lt;p&gt;For most subtests, the starting point for coding was when the experimenter and the owner were sitting on their chairs, and the dog was behind the Line, which marked a 1 m distance from the owner’s chair (Fig. 1).&lt;/p&gt;
    &lt;p&gt;Qualitative and quantitative coding was performed by coders who were not involved in the experiments.&lt;/p&gt;
    &lt;p&gt;Three different coding approaches were employed:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt; a. &lt;p&gt;Scoring of individual variables that may be indicative of addictive behaviour each minute, which were later summed up as Addictive-like Behaviour Test score (Table 2); coder: KS.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt; b. &lt;p&gt;Coding of presence/absence of the four addiction criteria in each minute of each subtest; coder: KS.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt; c. &lt;p&gt;Quantitative coding.&lt;/p&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Scoring and point sampling of behaviours during the subtests “Social play” and “Dog alone” (Table 4); coder: FL.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Coding of absolute durations of behaviours in subtests where the toy was rendered inaccessible (unsolvable task box and toy on a shelf, see Table 4); coders: DZ and AH.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A second coder (AM) performed reliability coding of addictive-like behaviours and behavioural addiction criteria and point sampling for 15 dogs. Reliability between the two coders who coded the durations was also analysed for 15 dogs. Reliability was good or excellent for all included variables (ICC, absolute agreement, single measures, two-way mixed-effects model, computed in IBM SPSS Statistics Version 23 (IBM Corporation and its Licensors 1989, 2015) (see Supplementary Table 3 for full results).&lt;/p&gt;
    &lt;head rend="h4"&gt;Sub-criteria to generate an Addictive-like behaviour test score (AB-T score)&lt;/head&gt;
    &lt;p&gt;To quantify dogs’ propensity for addictive-like behaviour as objectively as possible, we introduced the Addictive-like Behaviour Test score (AB-T score). Applicable sub-criteria were rated for each minute of the test, and for analysis, each sub-criterion was assigned a score between 0 and 2 points, as detailed in Table 2. The points from all the subtests, including the cool-down period, were added to yield the AB-T score. The maximum possible value of the AB-T score was 120 points. A cut-off point for addictive-like behaviour was defined by a data range split divided into two halves. Dogs scoring equal to or above the mid-point (44.2 points) are referred to as dogs showing a high tendency for addictive-like behaviour or high-AB dogs.&lt;/p&gt;
    &lt;p&gt;Dogs scoring less than 44.2 points are referred to as low-AB dogs (dogs with a low tendency for addictive-like behaviour). The sub-criteria included in the Addictive-like Behaviour Test score (as detailed in Table 2) were selected as they were assumed to be relatively independent of the level of obedience and training. Dogs might have been trained to drop a toy on a cue and to exert impulse control and refrain from jumping towards the toy in the experimenter’s hand; therefore, these variables were not included in the AB-T score. However, behaviours such as staring at the toy or pacing are believed to be less subject to training and were included.&lt;/p&gt;
    &lt;head rend="h4"&gt;Presence/absence of behavioural addiction criteria&lt;/head&gt;
    &lt;p&gt;Separately from the AB-T variables, in each subtest, the addiction criteria Salience, Craving, Mood modification, and Lack of self-control were rated each minute as present or absent based on the occurrence of pre-defined behaviours. For instance, Salience was inferred from searching for a toy although there was an »attractive alternative« (food, owner inviting the dog to play). Craving was based on the dog focusing mainly on the toy (&amp;gt; 50%) and medium to high arousal directed at the inaccessible toy (inferred from behaviours such as panting, restlessness, and high muscle tension). We further coded behaviours that are usually characteristic of high arousal in some dogs, e.g., pacing, jumping towards the toy, and vocalising (see Table 3). If at least one of the pre-defined behaviours was expressed, the respective addiction criterion was coded as present. Tolerance, Withdrawal symptoms and Risk of relapse after abstinence could not be tested in the setting of the play motivation test since they develop over time.&lt;/p&gt;
    &lt;p&gt;For each subtest, a summary score for each of the four addiction criteria was computed by summing up the points for each minute of the subtest.&lt;/p&gt;
    &lt;head rend="h4"&gt;Quantitative coding&lt;/head&gt;
    &lt;p&gt;Selected behaviours during the subtests “Social play” and “Dog alone” were coded by point sampling at 3-second intervals and then extrapolated to proportions of time (Table 4). Based on a subsample of dogs coded using both point sampling and absolute durations of behaviour, we determined sufficient agreement between the two measurement methods, justifying the use of point sampling. During subtests where a reward was inaccessible in the unsolvable task box, the absolute duration of interacting with the box (with low or high effort) was coded (Table 4). For detailed definitions of quantitatively coded variables, see Supplementary Table 2.&lt;/p&gt;
    &lt;head rend="h2"&gt;Questionnaire on addictive-like behaviours&lt;/head&gt;
    &lt;p&gt;A questionnaire was developed (available in English and German) (for inter- and intra-rater reliability based on over 1500 dogs recruited via an online survey; see Supplementary Table 6). The questions relating to behavioural addiction criteria relevant to the present manuscript are shown in Table 5. They were rated on a 5-point Likert scale indicating the extent of agreement with the statement (1 – strongly disagree; 2 – partly disagree; 3 – neither agree nor disagree; 4 – partly agree; 5 – strongly agree). The dog owners were asked to complete this questionnaire during the cool-down period of the behavioural test.&lt;/p&gt;
    &lt;head rend="h2"&gt;Analysis&lt;/head&gt;
    &lt;p&gt;SPSS Statistics Version 23 (IBM Corporation and its Licensors 1989, 2015) was used to compute a Categorical Principal Component Analysis and Mann-Whitney U tests. R version 4.1.0 (The R Foundation for Statistical Computing, 2021) was used to create boxplots and to calculate linear models.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences in summary scores of individual behavioural addiction criteria between high-AB dogs and low-AB dogs&lt;/head&gt;
    &lt;p&gt;We calculated summary scores for the four addiction criteria for each subtest by summing up the points for each minute. Using Mann-Whitney U tests, we tested whether there was a difference in the addiction criteria Craving, Lack of self-control, Mood modification and Salience between dogs classified as high-AB dogs (AB-T score ≥ 44.2 points) and low-AB dogs (AB-T score &amp;lt; 44.2 points). Note that although components of Salience and craving were used to calculate the AB-T score, these are not identical to the 1 − 0 variables of Salience and craving here. While the addiction criteria were coded as 1/0 for each minute, the variables included in the AB-T score were more detailed, and individual elements potentially indicative of addictive-like behaviour were differentiated. Mood modification and Lack of self-control were not used in the designation of the AB-T score. See Sect. 1.6 and Table 3 for more details.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences in durations of toy-directed behaviours between high-AB dogs and low-AB dogs&lt;/head&gt;
    &lt;p&gt;We performed Mann-Whitney U tests to assess whether high-AB and low-AB dogs differed in quantitatively coded variables such as time engaging with the toy during different subtests, attempting to attain an unavailable toy, etc. (see Supplementary Tables 4 and 5).&lt;/p&gt;
    &lt;head rend="h3"&gt;Associations between questionnaire and behaviour test results and calculation of an Addictive-like Behaviour Questionnaire score (AB-Q score)&lt;/head&gt;
    &lt;p&gt;Linear models were used to assess associations between the addictive-like behaviour score and the 19 questionnaire questions targeting addictive-like behaviour. Model requirements were checked by visually assessing normality and homoscedasticity of the residuals. If applicable, the dependent variable was transformed.&lt;/p&gt;
    &lt;p&gt;Additionally, Mann-Whitney U tests were used to test whether the 19 questionnaire scores differed between high-AB and low-AB dogs. This was the case for fifteen questions; therefore, these were summed up to generate an Addictive-like Behaviour Questionnaire score (AB-Q score). Cohen’s R was used as a measure of effect size.&lt;/p&gt;
    &lt;p&gt;Both intra-rater reliability (available for 274 dogs, including dogs from the online survey) and inter-rater reliability (available for 24 dogs) of the AB-Q score were very good (see Supplementary Table 6).&lt;/p&gt;
    &lt;p&gt;Due to the exploratory nature of this study, no correction for multiple testing was performed (as recommended by73.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;head rend="h3"&gt;Addictive-like behaviour test score (AB-T score)&lt;/head&gt;
    &lt;p&gt;The mid-point of the data range of the AB-T score was 44.2 (range 6.6–95). Therefore, dogs scoring 44.2 or higher were classified as showing a high tendency for addictive-like behaviour (high-AB dogs). This was the case for thirty-three of the 105 highly play-motivated dogs tested, with a mean score of 59.7 points and a median of 58.6. The mean AB-T score for low-AB dogs (&amp;lt; 44.2 points) was 23.1, and the median was 22.8. For descriptive statistics, see Supplementary Table 7.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences between high-AB dogs and low-AB dogs in summary scores of individual behavioural addiction criteria&lt;/head&gt;
    &lt;p&gt;Mann-Whitney U tests indicated that high-AB dogs scored significantly higher than low-AB dogs on craving (U = 217, p &amp;lt; 0.0001), salience (U = 208, p &amp;lt; 0.0001), and lack of self-control (U = 756.5, p = 0.002), but not mood modification (U = 1022, p = 0.157), in the behaviour test (see Supplementary Table 4, Figs. 2a-d). For descriptive statistics, see Supplementary Table 8.&lt;/p&gt;
    &lt;head rend="h3"&gt;Quantitatively coded variables&lt;/head&gt;
    &lt;p&gt;High-AB dogs interacted significantly longer with the box than low-AB dogs in the ‘toy in the box’ subtest (U = 675.5, p &amp;lt; 0.0001). They also spent more time looking at the toy on the shelf during the ‘toy on shelf’ subtest (U = 414.5, p &amp;lt; 0.0001) and the ‘social play without toys’ subtest (U = 942.5, p = 0.021), while focusing less on the owner in the latter (U = 819.5, p = 0.011) compared to low-AB dogs (Supplementary Table 5, Fig. 2e and f). However, time spent interacting with the toy while the owner and experimenter were out of the room did not differ significantly between high-AB and low-AB dogs (U = 994, p = 0.135; Supplementary Table 5). For descriptive statistics, see Supplementary Table 9.&lt;/p&gt;
    &lt;head rend="h3"&gt;Addictive-like behaviour questionnaire score (AB-Q score)&lt;/head&gt;
    &lt;p&gt;Linear models demonstrated significant associations between the AB-T score and 18 out of 19 individual questions (Table 6). However, according to Mann-Whitney U tests, only fifteen questions differed significantly between dogs classified as showing a high tendency for addictive-like behaviour in the behaviour test (AB-T score ≥ 44.2) and those that did not. These fifteen questions (Cohen’s R &amp;gt; 0.2 – see Table 6) were summed up into the Addictive-like Behaviour Questionnaire score (AB-Q score) (see Table 6).&lt;/p&gt;
    &lt;head rend="h2"&gt;Discussion&lt;/head&gt;
    &lt;p&gt;This study represents the beginning of the exploration of addictive-like behaviour in domestic dogs. Convergent behavioural measures support the existence of an addictive-like behavioural phenotype in 33 of the 105 tested highly play-motivated dogs. Note that we specifically sought dogs exhibiting extreme behaviour; thus, this proportion is not a reflection of the general population. Perhaps not surprising, working breeds – many of which are known to have been artificially selected for high toy or predatory motivation74,75,76 – were overrepresented in the sample.&lt;/p&gt;
    &lt;p&gt;As predicted, dogs classified as high-AB dogs based on the detailed AB-T score (Addictive-like Behaviour Test score) scored significantly higher than low-AB dogs on the individual criteria craving, salience, and lack of self-control in the behaviour test. Contrary to the prediction, mood modification (when given access to a toy) did not differ between high and low-AB dogs. In retrospect, however, this lack of difference between the two groups strengthens our argument that we were measuring a phenotype beyond mere enjoyment of play. Still, despite the significant differences between high- and low-AB dogs in the other investigated addiction criteria, Salience, Craving and Loss of Self Control, there was generally high variation between individuals.&lt;/p&gt;
    &lt;p&gt;In line with the predictions, high-AB dogs showed higher durations of focusing on and trying to access an inaccessible toy than low-AB dogs, often prioritising attempting to access the toy over eating or interacting with the owner. Thus, there was general agreement between the three alternative methods of coding the data (detailed behaviour score, addiction criteria, and quantitative coding), indicating internal consistency.&lt;/p&gt;
    &lt;p&gt;The external validity of the behaviour test was demonstrated by significant associations of the AB-T score with 18 out of 19 questions from the addictive-like behaviour questionnaire filled in by the dogs’ owners, intended to measure addictive-like behaviour in everyday life. Nonetheless, although significant, the effect sizes were relatively low, indicating that no single question would have predictive value for assessing a tendency for addictive-like behaviour in dogs.&lt;/p&gt;
    &lt;p&gt;In studies using animal models of substance addiction, one way to differentiate an addiction from drug use that occurs due to lack of choice is to present the subject with a choice between the addictive substance and other highly desirable stimuli. If an individual continues to take the drug at the expense of these other options (such as consumption of a food reward), this points to the possibility of addictive-like behaviour77,78. Consistent with this, high-AB dogs showed a loss of interest in other relevant stimuli, focusing on the inaccessible toy and foregoing the opportunity to consume food or to engage with their owner. The latter is also reminiscent of behavioural addictions in humans, leading to a decline in social interactions79.&lt;/p&gt;
    &lt;p&gt;The intense toy-seeking and loss of interest in other stimuli, despite the availability of food or social interaction – considered as indicators for salience and persistence – might resemble “hyperfocus,” a trait associated with ADHD and autism in humans80,81. However, unlike typical hyperfocus, which often emerges in the absence of competing stimuli, dogs in our study were presented with alternative salient rewards (e.g., the toy was placed on a shelf while the owner actively invited the dog to engage in social play; in another subtest, food was available in a puzzle toy while the preferred toy was inaccessible in a closed container), and they still showed a preference for the inaccessible toy. Like dogs with ADHD, dogs in the current study with high AB-T scores in general exhibited high impulsivity (labelled as “loss of self-control”), and some individuals displayed heightened activity (which could be interpreted as the hyperactivity component of ADHD64,65 in particular during the cool-down period. Thus, further research is needed to explore commonalities and differences between addictive-like behaviour and ADHD-like behaviour in dogs. While dogs with a high tendency for addictive-like behaviour might exhibit many characteristics of dogs with ADHD, the converse is not necessarily true – dogs might show ADHD-like behaviour without displaying any hyperfixation on toys.&lt;/p&gt;
    &lt;p&gt;Another characteristic of addicted individuals is that they are willing to pursue their addiction even if it has adverse consequences82. In the current study, “adversity” was elicited by the owner and the experimenter leaving the room in order to assess the effect of social isolation on the behavioural addiction criteria. Isolation in an unfamiliar place is well-established as a stressful experience for dogs83,84,85,86. However, this subtest was not a good measure of addictive-like behaviour: Time spent interacting with the toy while the dog was alone did not differ significantly between high-AB and low-AB dogs. For welfare reasons, we decided against exposing the dogs to more severe stressors; however, it cannot be ruled out that this subtest was not “aversive” enough. The dog was left alone for only 30 seconds, and the subtest took place in the middle of the test when the dogs were already habituated to the test room. It is also possible that individual differences in subjects’ separation distress, independent of play motivation, affected the results. Additionally, there was no clear contingency between interacting with the toy and the ‘adverse’ outcome (owner leaving). Future studies could potentially enhance the design by providing the dog with an explicit choice, such as by placing the toy in a separate room, away from the owner and the experimenter. This could help determine whether the dog is willing to risk being alone in an unusual or new environment when it normally prefers the safety of being near its owner. Such a design would better reflect the conflict between competing motivations (social security vs. reward seeking) and could offer a more valid test of the criterion of persistence under adversity.&lt;/p&gt;
    &lt;p&gt;Still, the importance of continued efforts to engage in the behaviour despite adverse consequences was demonstrated in the questionnaire, where one of the highest associations with the AB-T score was found with the question, “My dog will continue to play with a ball/toy despite adverse consequences”. This suggests that some dogs may fulfil the criterion of continuing the addictive-like behaviour despite adverse consequences in real life, even if this could not be demonstrated in the behaviour test.&lt;/p&gt;
    &lt;p&gt;A critical factor in addiction is the propensity to attribute incentive salience to classically conditioned cues predicting rewards87,88. In humans, cues associated with addictive behaviours, such as specific locations or objects, can induce craving and drug administration88,89. In dogs, a toy such as a ball could represent such as a conditioned cue. It may achieve its value, for example, by the experience of chasing and catching. For many domestic dogs, balls or other toys possess incentive salience, according to the three criteria by Robinson and Berridge49: they (1) “elicit approach” (i.e. they become “wanted” and act as “motivational magnets”); (2) “they can energise ongoing actions by eliciting cue-triggered wanting”; (3) “they can act as reinforcers in their own right, reinforcing the acquisition of a new instrumental response (measurable by conditioned reinforcement)” (cf49, p. 3139].).&lt;/p&gt;
    &lt;p&gt;The perceived value of the toy was demonstrated in our study by many dogs having difficulty relinquishing the toy. It can be speculated that balls become ‘motivational magnets’ by being associated with species-typical predatory behaviour (cf48. The high salience of the toy was especially apparent in subtests where dogs were foregoing available alternatives such as freely available food or social play with the owner, at the expense of trying to regain their inaccessible toy.&lt;/p&gt;
    &lt;p&gt;In both rodents and humans90,91, individuals with a higher tendency to attribute incentive salience to classically conditioned cues predicting rewards (sign trackers) are more vulnerable to addiction than goal trackers, who focus primarily on the (location of the) reward itself88,92, see the meta-analysis by93. Tendency to sign-track vs. goal-track is associated with the risk of addiction and is also related to variations in the dopaminergic system and stress physiology88.&lt;/p&gt;
    &lt;p&gt;While it was not explicitly measured in the current study, in dogs, a tendency to sign track might be advantageous in a training context – i.e., maintaining motivation would be easier in dogs that are not only sensitive to rewards but also attribute value to the cues predicting these rewards, even if not always followed by a primary reinforcer. Sensitivity to reward – and propensity to attribute incentive salience to reward-predictive cues – would thus be highly relevant traits in relation to trainability and might be selected for especially in working dog breeds.&lt;/p&gt;
    &lt;p&gt;Several publications state the importance of ‘obsessive’ play motivation for working dog success42,94,95,96,97,98,99. Dogs with extreme toy motivation are believed to show better focus, reduced distractibility and greater trainability97,99. However, if such motivation becomes addictive-like, it needs to be questioned whether the well-being of these dogs may be compromised. If dogs prioritise toy interactions over other essential aspects of their daily lives this may have maladaptive effects, as is the case in humans with behavioural addictions100,101. Certainly, adverse health consequences may arise from repetitive ball chasing, like straining ligaments and joints56. Moreover, welfare would be compromised when dogs experience a high level of frustration when access to their reward is prevented (cf102.&lt;/p&gt;
    &lt;p&gt;Anecdotally, when play motivation becomes excessive, irritability, high arousal levels, and frustration may negatively affect dogs’ trainability and work103. Indeed, as stated by Mathews96, the high ‘drive’ of search dogs often makes them unsuitable as family pets, which is also supported by owner reports that pet dogs with extreme motivation for toys are often problematic to control102.&lt;/p&gt;
    &lt;p&gt;Thus, it needs to be questioned when play becomes maladaptive. Do high-AB dogs still ‘like’ to play, or have they progressed to primarily ‘wanting’ and the compulsive need to continue104?. Similar to the escalating engagement seen in human behavioural addictions105, some dogs would repeatedly spin, jump, focus or bark towards the unavailable toy on the shelf for the duration of the subtest. Two dogs even managed to destroy the box enclosing their favourite toy. These behaviours might be likened to the repetitive actions observed in individuals with behavioural addictions41. Nonetheless, such behaviours may also occur in other behavioural phenotypes such as canine compulsive disorder or autism spectrum-like behaviours106. Further research is needed to elucidate commonalities and differences between such phenotypes in dogs.&lt;/p&gt;
    &lt;p&gt;Behavioural addictions in humans often involve emotional dependency on specific activities107. Whether dogs similarly seek comfort, stimulation, or stress relief through persistent engagement with the toy could not be determined in the context of the behaviour test. In the questionnaire, “Is attached to the favourite toy” was the only question not significantly associated with the AB-T score. Thus, further research is required to determine whether dogs develop an emotional dependency on their toys (as described anecdotally).&lt;/p&gt;
    &lt;p&gt;To better understand the origin and possible functional underpinnings of excessive toy-directed behaviour in dogs, future research should examine whether similar patterns of excessive object play occur in non-domesticated canids. While data are limited, recent studies have shown that both hand-reared and wild wolf pups engage in object play108. For instance, wolf pups have been observed developing a preference for toys and spending increasing amounts of time with them over time108. Hand-reared wolf pups will even retrieve objects to humans109. In the wild, wolves have also been seen interacting with human-made objects110. These findings suggest that object play is not unique to dogs but rather could represent a broader trait shared by canids. Comparative studies are needed to assess how common and functionally relevant such behaviours are in wolves, which would help clarify the biological basis of the addictive-like behaviours observed in some dogs.&lt;/p&gt;
    &lt;p&gt;Being the first of its kind, this study has its limitations. As no gold standard exists, the study is exploratory, and our categorisation of dogs into high and low addictive-like behaviour groups, determined by a data range split, was somewhat arbitrary. Nonetheless, the assignment of high- and low-AB categories corresponded well to the first author’s personal assessment of addictive-like tendencies in the participant dogs.&lt;/p&gt;
    &lt;p&gt;In interpreting the questionnaire results, it is important to acknowledge the potential biases associated with using owner-reported questionnaires. Owners may unintentionally project their perceptions or expectations onto their dogs’ behaviours, potentially leading to discrepancies between reported and observed behaviours in behavioural test. This is particularly relevant in cases where owners have multiple dogs, as they are likely to compare their pets to one another, influencing their assessment, such as by underestimating or overestimating certain behaviours. For instance, an owner with a highly active dog may rate their less active dog as overly calm. Integrating owner reports and objective testing allows for a more comprehensive and accurate canine behaviour evaluation.&lt;/p&gt;
    &lt;head rend="h2"&gt;)Conclusions&lt;/head&gt;
    &lt;p&gt;To conclude, there appear to be parallels between excessive toy motivation in dogs and behavioural addictions in humans. Interestingly, also in humans, the first officially recognised behavioural addictions (gambling and internet gaming) originate in play28,29,30,111. Generally, play is an activity that induces a pleasurable emotional state6. In humans, much evidence suggests that video games can affect people’s lives positively. They make players feel better about themselves, help raise their self-esteem and assist people in dealing with everyday stress111. Some people are excessive gamers, but only a minority would be classified as addicts111,112,113. Similarly, many dogs may greatly enjoy toy play without developing harmful compulsions (cf. in humans28,29,30,111).&lt;/p&gt;
    &lt;p&gt;Despite the observed parallels between high-AB dogs and humans affected by behavioural addictions, we refrain from conclusively characterising high-AB dogs as exhibiting addictive behaviour, given the absence of established benchmarks or standardised criteria. It is important to be cautious when pathologising behaviour, especially given that even in humans, addictive behaviours are still difficult to define and measure114. To further understand possible parallels in the processes underlying behavioural addictions in humans and excessive toy motivation in dogs, subsequent research endeavours should seek to correlate individual differences in addictive-like behaviour in dogs with characteristics associated with addictive behaviours in humans, such as high impulsivity, impaired reversal learning, heightened perseveration, and delayed extinction of previously rewarded responses115,116.&lt;/p&gt;
    &lt;head rend="h2"&gt;Data availability&lt;/head&gt;
    &lt;p&gt;All data supporting the findings of this study are available within the paper and its Supplementary Information.&lt;/p&gt;
    &lt;head rend="h2"&gt;References&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Bradshaw, J. W. S., Pullen, A. J. &amp;amp; Rooney, N. J. Why do adult dogs ‘play’? Behav. Process. 110, 82–87 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Burghardt, G. M., Albright, J. D. &amp;amp; Davis, K. M. Motivation, development and object play: comparative perspectives with lessons from dogs. Behaviour 153, 767–793 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Diamond, J. &amp;amp; Behaviour, A. B. &amp;amp; undefined. A comparative analysis of social play in birds. JSTORJ Diamond, AB BondBehaviour, 2003•JSTOR (2003). (2003).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bateson, P. Play, playfulness, creativity and innovation. Anim. Behav. Cognition. 1, 99–112 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sommerville, R., O’Connor, E. A. &amp;amp; Asher, L. Why do dogs play? Function and welfare implications of play in the domestic dog. Appl. Anim. Behav. Sci. 197, 1–8 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Held, S. D. E. &amp;amp; Špinka, M. Animal play and animal welfare. Animal Behaviour vol. 81 891–899 Preprint at (2011). https://doi.org/10.1016/j.anbehav.2011.01.007&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bateson, P. Play Playfulness, creativity and innovation. Anim Behav. Cogn 1(2), 99–112 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Trezza, V., Damsteegt, R., Marijke Achterberg, E. J. &amp;amp; Vanderschuren, L. J. M. J. Nucleus accumbens µ-opioid receptors mediate social reward. J. Neurosci. 31, 6362–6370 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Blois-Heulin, C. et al. Animal welfare: could adult play be a false friend?? Anim. Behav. Cogn. 2, 156–185 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Panksepp, J. Affective Neuroscience: the Foundations of Human and Animal Emotions (Oxford University Press, 1998).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Dias, P. A. D. &amp;amp; Rangel-Negrín, A. Affiliative contacts and greetings. The Int. Encyclopedia of Primatology,. Wiley-Blackwell, pp 1-4 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Maroney, N., Williams, B. J., Thomas, A., Skues, J. &amp;amp; Moulding, R. A Stress-Coping model of problem online video game use. Int. J. Ment Health Addict. 17, 845–858 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Blasi, M. D. I. et al. Problematic video game use as an emotional coping strategy: evidence from a sample of MMORPG gamers. J. Behav. Addict. 8, 25–34 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Melodia, F., Canale, N. &amp;amp; Griffiths, M. D. The role of avoidance coping and escape motives in problematic online gaming: A systematic literature review. Int. J. Ment Health Addict. 20, 996–1022 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Organization., W. H. ICD-11. ICD-11 (2019). https://icd.who.int/en&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Freimuth, M., Moniz, S. &amp;amp; Kim, S. R. Clarifying exercise addiction: differential diagnosis, co-occurring disorders, and phases of addiction. Int. J. Environ. Res. Public. Health. 8, 4069–4081 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Olsen, C. M. Natural rewards, neuroplasticity, and non-drug addictions. Neuropharmacology vol. 61 1109–1122 Preprint at (2011). https://doi.org/10.1016/j.neuropharm.2011.03.010&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Alavi, S. S. et al. Behavioral addiction versus substance addiction: correspondence of psychiatric and psychological views. Int. J. Prev. Med. 3, 290–294 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pinna, F. et al. Behavioural addictions and the transition from DSM-IV-TR to DSM-5. J. Psychopathol. 21, 380–389 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Robbins, T. W. &amp;amp; Clark, L. Behavioral addictions. Current Opinion in Neurobiology vol. 30 66–72 Preprint at (2015). https://doi.org/10.1016/j.conb.2014.09.005&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Fan, L., Li, K., Xin, J., Wang, Y. &amp;amp; Li, Y. Family Subjective Socioeconomic Status and University Students’ Online Shopping Addiction: A Gender-Based Analysis. https://home.liebertpub.com/cyber (2022). https://doi.org/10.1089/CYBER.2021.0344&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Larocque, E. &amp;amp; Moreau, N. When sport is taken to extremes: A sociohistorical analysis of sport addiction. Int. Rev. Sociol. Sport. https://doi.org/10.1177/10126902221104956 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Atroszko, P. A. Work addiction as a behavioural addiction: Towards a valid identification of problematic behaviour. Australian and New Zealand Journal of Psychiatry vol. 53 284–285 Preprint at (2019). https://doi.org/10.1177/0004867419828496&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kun, B., Takacs, Z. K., Richman, M. J., Griffiths, M. D. &amp;amp; Demetrovics, Z. Work addiction and personality: A meta-analytic study. J. Behav. Addict. 9, 945–966 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Niedermoser, D. W. et al. Shopping addiction: A brief review. Pract. Innovations. 6, 199–207 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;American Psychiatric Association. Diagnostic and Statistical Manual of Mental Disorders. (2013). https://doi.org/10.1176/APPI.BOOKS.9780890425596&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Walia, B., Kim, J., Ijere, I. &amp;amp; Sanders, S. Video game addictive symptom level, use intensity, and hedonic experience: Cross-sectional questionnaire study. JMIR Serious Games. 10, e33661 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Beranuy, M., Carbonell, X. &amp;amp; Griffiths, M. D. A qualitative analysis of online gaming addicts in treatment. Int. J. Ment Health Addict. 11, 149–161 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Higuchi, S. et al. Development and validation of a nine-item short screening test for ICD-11 gaming disorder (GAMES test) and Estimation of the prevalence in the general young population. J. Behav. Addict. 10, 263–280 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stevens, M. W. R., Dorstyn, D., Delfabbro, P. H. &amp;amp; King, D. L. Global prevalence of gaming disorder: A systematic review and meta-analysis. Australian and New Zealand Journal of Psychiatry vol. 55 553–568 Preprint at (2021). https://doi.org/10.1177/0004867420962851&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Di Segni, M., Patrono, E., Patella, L., Puglisi-Allegra, S. &amp;amp; Ventura, R. Animal models of compulsive eating behavior. Nutrients vol. 6 4591–4609 Preprint at (2014). https://doi.org/10.3390/nu6104591&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Brené S. et al. Running is rewarding and antidepressive. Physiol. Behav. 1-2, 136–140 (2007).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kanarek, R. B., D’Anci, K. E., Jurdak, N. &amp;amp; Mathes, W. F. Running and addiction: precipitated withdrawal in a rat model of Activity-Based anorexia. Behav. Neurosci. 123, 905–912 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Winstanley, C. A. Gambling rats: insight into impulsive and addictive behavior. Neuropsychopharmacology 36, 359 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pitchers, K. K. et al. ∆FosB in the nucleus accumbens is critical for reinforcing effects of sexual reward. Genes Brain Behav. 9, 831–840 (2010).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kolb, E. M., Kelly, S. A. &amp;amp; Garland, T. Mice from lines selectively bred for high voluntary wheel running exhibit lower blood pressure during withdrawal from wheel access. Physiol. Behav. 112–113, 49–55 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Carter, P. A., Swallow, J. G., Davis, S. J. &amp;amp; Garland, T. Nesting Behavior of House Mice (Mus Domesticus) Selected for Increased Wheel-Running Activity. Behavior Genetics 30, 85–94 (2000). (2000).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;De Visser, L., Van Den Bos, R. &amp;amp; Spruijt, B. M. Automated home cage observations as a tool to measure the effects of wheel running on cage floor locomotion. Behav. Brain. Res. 160, 382–388 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kas, M. J. H. &amp;amp; Edgar, D. M. A nonphotic stimulus inverts the diurnal-nocturnal phase preference in Octodon Degus. J. Neurosci. 19, 328–333 (1999).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reebs, S. G. &amp;amp; St-Onge, P. Running wheel choice by Syrian hamsters. Lab. Anim. 39, 442–451 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grant, J. E., Potenza, M. N., Weinstein, A. &amp;amp; Gorelick, D. A. Introduction to behavioral addictions. American Journal of Drug and Alcohol Abuse vol. 36 233–241 Preprint at (2010). https://doi.org/10.3109/00952990.2010.491884&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jamieson, L. T. J., Baxter, G. S. &amp;amp; Murray, P. J. Identifying suitable detection dogs. Applied Animal Behaviour Science vol. 195 1–7 Preprint at (2017). https://doi.org/10.1016/j.applanim.2017.06.010&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rooney, N. J., Bradshaw, J. W. &amp;amp; Almey, H. Attributes of specialist search dogs—a questionnaire survey of UK dog handlers and trainers. J. Forensic Sci. 49, 1–7 (2004).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Naderi, S., Miklósi, Á., Dóka, A. &amp;amp; Csányi, V. Co-operative interactions between blind persons and their dogs. Appl. Anim. Behav. Sci. 74, 59–80 (2001).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mariti, C. et al. Dog attachment to man: A comparison between pet and working dogs. J. Veterinary Behav. 8, 135–145 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kolm, N., Temrin, H., Miklósi, Á. &amp;amp; Kubinyi, E. &amp;amp; Zsolt garamszegi, L. The link between selection for function and human-directed play behaviour in dogs. (2020). https://doi.org/10.1098/rsbl.2020.0366&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sundman, A. S., Johnsson, M., Wright, D. &amp;amp; Jensen, P. Similar recent selection criteria associated with different behavioural effects in two dog breeds. Genes Brain Behav. 15, 750–756 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lazarowski, L. et al. Selecting Dogs for Explosives Detection: Behavioral Characteristics. Frontiers in Veterinary Science vol. 7 597 Preprint at (2020). https://doi.org/10.3389/fvets.2020.00597&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Robinson, T. E. &amp;amp; Berridge, K. C. The incentive sensitization theory of addiction: some current issues. Philosophical Trans. Royal Soc. B: Biol. Sci. 363, 3137–3146 (2008). (The Royal SocietyLondon.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stephens, D. N. et al. Reward sensitivity: Issues of measurement, and achieving consilience between human and animal phenotypes. Addiction Biology vol. 15 146–168 Preprint at (2010). https://doi.org/10.1111/j.1369-1600.2009.00193.x&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Antons, S., Brand, M. &amp;amp; Potenza, M. N. Neurobiology of cue-reactivity, craving, and inhibitory control in non-substance addictive behaviors. Journal of the Neurological Sciences vol. 415 116952 Preprint at (2020). https://doi.org/10.1016/j.jns.2020.116952&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Choi, J. S. et al. Dysfunctional inhibitory control and impulsivity in internet addiction. Psychiatry Res. 215, 424–428 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kräplin, A. et al. The role of inhibitory control and decisionmaking in the course of internet gaming disorder. J. Behav. Addict. 9, 990–1001 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hebebrand, J. et al. ‘Eating addiction’, rather than ‘food addiction’, better captures addictive-like eating behavior. Neuroscience and Biobehavioral Reviews vol. 47 295–306 Preprint at (2014). https://doi.org/10.1016/j.neubiorev.2014.08.016&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Käufer, M. ‘Throw the damn ball!’ Warum Ballwerfen kein Spiel ist. in … und weg ist er! Jagdverhalten und mögliche Alternativen 129–154 (Filander, Erlangen, 2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Marcellin-Little, D. J., Levine, D. &amp;amp; Taylor, R. Rehabilitation and conditioning of sporting dogs. Veterinary Clinics of North America - Small Animal Practice vol. 35 1427–1439 Preprint at (2005). https://doi.org/10.1016/j.cvsm.2005.08.002&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Overall, K. L. Natural animal models of human psychiatric conditions: assessment of mechanism and validity. Prog Neuropsychopharmacol. Biol. Psychiatry. 24, 727–776 (2000).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Boulougouris, V., Chamberlain, S. R. &amp;amp; Robbins, T. W. Cross-species models of OCD spectrum disorders. Psychiatry Res. 170, 15–21 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vermeire, S. et al. Serotonin 2A receptor, serotonin transporter and dopamine transporter alterations in dogs with compulsive behaviour as a promising model for human obsessive-compulsive disorder. Psychiatry Res. Neuroimaging. 201, 78–87 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hoffman, J. M., Creevy, K. E., Franks, A., O’Neill, D. G. &amp;amp; Promislow, D. E. L. The companion dog as a model for human aging and mortality. Aging Cell. 17, e12737 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sándor, S. &amp;amp; Kubinyi, E. Genetic pathways of aging and their relevance in the dog as a natural model of human aging. Front. Genet. 10, 948 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vitek, M. P. et al. Translational animal models for alzheimer’s disease: an alzheimer’s association business consortium think tank. Alzheimer’s Dementia: Translational Res. Clin. Interventions. 6, e12114 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;González-Martínez, Á., de Miguel, M., Graña, S., Costas, N., Diéguez, F. J. &amp;amp; X. &amp;amp; Serotonin and dopamine blood levels in ADHD-Like dogs. Animals 13, 1037 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sulkama, S. et al. Canine hyperactivity, impulsivity, and inattention share similar demographic risk factors and behavioural comorbidities with human ADHD. Transl Psychiatry. 11, 1–9 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Csibra, B., Bunford, N. &amp;amp; Gácsi, M. Development of a human-analogue, 3-symptom domain dog ADHD and functionality rating scale (DAFRS). Sci. Rep. 14, 1–18 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Salonen, M. et al. Personality traits associate with behavioral problems in pet dogs. Transl Psychiatry 12, 1-7 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tian, R. et al. Modeling SHANK3-associated autism spectrum disorder in Beagle dogs via CRISPR/Cas9 gene editing. Molecular Psychiatry 2023 28:9 28, 3739–3750 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Li, Y. et al. Reduced attention to human eyes in autism-associated Shank3 mutant laboratory beagle dogs. Mol. Psychiatry. 30, 3765–3773 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Zhu, F., Shi, Q., Jiang, Y., hui, Zhang, Y. Q. &amp;amp; Zhao, H. Impaired synaptic function and hyperexcitability of the pyramidal neurons in the prefrontal cortex of autism-associated Shank3 mutant dogs. Springer 15, (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. Classification and treatment of behavioural addictions. Nurs. Pract. 82, 44–46 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Landolfi, E. Exercise addiction. Sports Med. 43, 111–119 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Van Rooij, A. J. &amp;amp; Prause, N. A critical review of internet addiction criteria with suggestions for the future. J. Behav. Addict. 3, 203–213 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bender, R. &amp;amp; Lange, S. Adjusting for multiple testing - When and how? J. Clin. Epidemiol. 54, 343–349 (2001).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Coppinger, R. &amp;amp; Coppinger, L. Dogs: A New Understanding of Canine Origin, Behavior, and Evolution (University of Chicago Press, 2002).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mehrkam, L. R., Hall, N. J., Haitz, C. &amp;amp; Wynne, C. D. L. The influence of breed and environmental factors on social and solitary play in dogs (Canis lupus familiaris). Learn. Behav. 45, 367–377 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Eken Asp, H., Fikse, W. F., Nilsson, K. &amp;amp; Strandberg, E. Breed differences in everyday behaviour of dogs. Appl. Anim. Behav. Sci. 169, 69–77 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ahmed, S. H., Lenoir, M. &amp;amp; Guillem, K. Neurobiology of addiction versus drug use driven by lack of choice. Current Opinion in Neurobiology vol. 23 581–587 Preprint at (2013). https://doi.org/10.1016/j.conb.2013.01.028&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Golden, S. A. et al. Compulsive Addiction-like aggressive behavior in mice. Biol. Psychiatry. 82, 239–248 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kuss, D. J., Louws, J. &amp;amp; Wiers, R. W. Online gaming addiction? Motives predict addictive play behavior in massively multiplayer online role-playing games. Cyberpsychol Behav. Soc. Netw. 15, 480–485 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ashinoff, B. K. &amp;amp; Abu-Akel, A. Hyperfocus: the forgotten frontier of attention. Psychological Research 2019 85:1 85, 1–19 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grotewiel, M. M., Crenshaw, M. E., Dorsey, A. &amp;amp; Street, E. Experiences of hyperfocus and flow in college students with and without attention deficit hyperactivity disorder (ADHD). Curr. Psychol. 42, 13265–13275 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vanderschuren, L. J., Minnaard, A. M., Smeets, J. A. &amp;amp; Lesscher, H. M. Punishment models of addictive behavior. Curr. Opin. Behav. Sci. 13, 77–84 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Palestrini, C., Previde, E. P., Spiezio, C. &amp;amp; Verga, M. Heart rate and behavioural responses of dogs in the ainsworth’s strange situation: A pilot study. Appl. Anim. Behav. Sci. 94, 75–88 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Palmer, R. &amp;amp; Custance, D. A counterbalanced version of ainsworth’s strange situation procedure reveals secure-base effects in dog-human relationships. Appl. Anim. Behav. Sci. 109, 306–319 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ryan, M. G., Storey, A. E., Anderson, R. E. &amp;amp; Walsh, C. J. Physiological indicators of attachment in domestic dogs (Canis familiaris) and their owners in the strange situation test. Front. Behav. Neurosci. 13, 456977 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Riemer, S., Assis, L., Pike, T. W. &amp;amp; Mills, D. S. Dynamic changes in ear temperature in relation to separation distress in dogs. Physiol. Behav. 167, 86–91 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flagel, S. B. et al. An Animal Model of Genetic Vulnerability to Behavioral Disinhibition and Responsiveness to Reward-Related Cues: Implications for Addiction. Neuropsychopharmacology 2010 35:2 35, 388–400 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flagel, S. B., Akil, H. &amp;amp; Robinson, T. E. Individual differences in the attribution of incentive salience to reward-related cues: Implications for addiction. Neuropharmacology vol. 56 139–148 Preprint at (2009). https://doi.org/10.1016/j.neuropharm.2008.06.027&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Marlatt, G. A. Cue exposure and relapse prevention in the treatment of addictive behaviors. Addict. Behav. 15, 395–399 (1990).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Olney, J. J., Warlow, S. M., Naffziger, E. E. &amp;amp; Berridge, K. C. Current perspectives on incentive salience and applications to clinical disorders. Curr. Opin. Behav. Sci. 22, 59–69 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Cofresí, R. U., Bartholow, B. D. &amp;amp; Piasecki, T. M. Evidence for incentive salience sensitization as a pathway to alcohol use disorder. Neuroscience and Biobehavioral Reviews vol. 107 897–926 Preprint at (2019). https://doi.org/10.1016/j.neubiorev.2019.10.009&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Berridge, K. C., Robinson, T. E. &amp;amp; Aldridge, J. W. Dissecting components of reward: ‘liking’, ‘wanting’, and learning. Current Opinion in Pharmacology vol. 9 65–73 Preprint at (2009). https://doi.org/10.1016/j.coph.2008.12.014&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Meyer, P. J. et al. Quantifying individual variation in the propensity to attribute incentive salience to reward cues. PLoS One. 7, e38987 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Beebe, S. C., Howell, T. J. &amp;amp; Bennett, P. C. Using scent detection dogs in conservation settings: A review of scientific literature regarding their selection. Front. Veterinary Sci. 3 (1), Preprintathttpsdoiorg103389fvets201600096 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reed, S. E., Bidlack, A. L., Hurt, A. &amp;amp; Getz, W. M. Detection distance and environmental factors in conservation detection dog surveys. J. Wildl. Manage. 75, 243–251 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mathews, F. et al. Effectiveness of search dogs compared with human observers in locating Bat carcasses at wind-turbine sites: A blinded randomized trial. Wildl. Soc. Bull. 37, 34–40 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hsu, Y. &amp;amp; Serpell, J. A. Development and validation of a questionnaire for measuring behavior and temperament traits in pet dogs. J. Am. Vet. Med. Assoc. 223, 1293–1300 (2003).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hsu, Y. &amp;amp; Sun, L. Factors associated with aggressive responses in pet dogs. Appl. Anim. Behav. Sci. 123, 108–123 (2010).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Serpell, J. A. &amp;amp; Hsu, Y. Effects of breed, sex, and neuter status on trainability in dogs. in Anthrozoos vol. 18 196–207 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Müller, A. et al. Food addiction and other addictive behaviours in bariatric surgery candidates. Eur. Eat. Disorders Rev. 26, 585–596 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tunney, R. J. &amp;amp; James, R. J. E. Criteria for conceptualizing behavioural addiction should be informed by the underlying behavioural mechanism. Addiction 112, 1720–1721 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Gerencsér, L., Bunford, N., Moesta, A. &amp;amp; Miklósi, Á. Development and validation of the canine reward responsiveness scale -Examining individual differences in reward responsiveness of the domestic dog. Sci Rep 8, 1-14 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lindsay, S. R. Handbook of applied dog behavior and training. Vol. 3: Procedures and protocols. Ames (IA): Iowa Stat University Press (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Berridge, K. C. &amp;amp; Robinson, T. E. Liking, wanting, and the incentive-sensitization theory of addiction. Am. Psychol. 71, 670–679 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grant, J. E., Brewer, J. A. &amp;amp; Potenza, M. N. The neurobiology of substance and behavioral addictions. CNS Spectr. 11, 924–930 (2006).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jacques, C. et al. What interests young autistic children? An exploratory study of object exploration and repetitive behavior. PLoS One. 13, e0209251 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Brand, M., Young, K. S., Laier, C., Wölfling, K. &amp;amp; Potenza, M. N. Integrating psychological and neurobiological considerations regarding the development and maintenance of specific Internet-use disorders: An Interaction of Person-Affect-Cognition-Execution (I-PACE) model. Neuroscience and Biobehavioral Reviews vol. 71 252–266 Preprint at (2016). https://doi.org/10.1016/j.neubiorev.2016.08.033&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Davis, K. M., Partin, A. M., Springer, C. M. &amp;amp; Burghardt, G. M. The development of object play in Wolf puppies (Canis lupus). Int. J. Play. 12, 20–39 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hansen Wheat, C. &amp;amp; Temrin, H. Intrinsic Ball Retrieving in Wolf Puppies Suggests Standing Ancestral Variation for Human-Directed Play Behavior. iScience 23, 100811 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ausband, D. E. Wolf use of humanmade objects during pup-rearing. Anim. Behav. Cogn. https://doi.org/10.26451/abc.08.03.06.2021 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. Online computer gaming: advice for parents and teachers. Educ. Health. 27, 3–6 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. D. Diagnosis and Management of Video Game Addiction MMORPGs View Project Diagnosis and Management of Video Game Addiction. (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ko, C. H., Yen, J. Y., Yen, C. F., Chen, C. S. &amp;amp; Wang, S. Y. The association between internet addiction and belief of frustration intolerance: the gender difference. CyberPsychology Behav. 11, 273–278 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Petry, N. M., Zajac, K. &amp;amp; Ginley, M. K. Behavioral addictions as mental disorders: to be or not to be? Annu. Rev. Clin. Psychol. 14, 399–423 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Everitt, B. J. et al. Neural mechanisms underlying the vulnerability to develop compulsive drug-seeking habits and addiction. Philosophical Trans. Royal Soc. B: Biol. Sci. 363, 3125 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Volkow, N. D. &amp;amp; Fowler, J. S. Addiction, a disease of compulsion and drive: involvement of the orbitofrontal cortex. Cereb. Cortex. 10, 318–325 (2000).&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;This study was funded by the SNSF Ambizione Grant Project PZ00P3_174221 to Stefanie Riemer. Many thanks go to Prof. Hanno Würbel for his feedback and support and to the dog owners and the dogs for their enthusiastic participation in the study.&lt;/p&gt;
    &lt;head rend="h2"&gt;Author information&lt;/head&gt;
    &lt;head rend="h3"&gt;Authors and Affiliations&lt;/head&gt;
    &lt;head rend="h3"&gt;Contributions&lt;/head&gt;
    &lt;p&gt;S.R. and A.M. contributed to the conception and design of the research. A.M. drafted the original manuscript, and S.R. provided revisions. A.M. carried out the experiments. K.S., F.M. and A.M. coded the videos. A.M. and S.R. interpreted the data. All authors have read and approved the final version of the manuscript.&lt;/p&gt;
    &lt;head rend="h3"&gt;Corresponding author&lt;/head&gt;
    &lt;head rend="h2"&gt;Ethics declarations&lt;/head&gt;
    &lt;head rend="h3"&gt;Competing interests&lt;/head&gt;
    &lt;p&gt;The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.&lt;/p&gt;
    &lt;head rend="h2"&gt;Additional information&lt;/head&gt;
    &lt;head rend="h3"&gt;Publisher’s note&lt;/head&gt;
    &lt;p&gt;Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Supplementary Information&lt;/head&gt;
    &lt;p&gt;Below is the link to the electronic supplementary material.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rights and permissions&lt;/head&gt;
    &lt;p&gt;Open Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by/4.0/.&lt;/p&gt;
    &lt;head rend="h2"&gt;About this article&lt;/head&gt;
    &lt;head rend="h3"&gt;Cite this article&lt;/head&gt;
    &lt;p&gt;Mazzini, A., Senn, K., Monteleone, F. et al. Addictive-like behavioural traits in pet dogs with extreme motivation for toy play. Sci Rep 15, 32613 (2025). https://doi.org/10.1038/s41598-025-18636-0&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Received:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Accepted:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Published:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;DOI: https://doi.org/10.1038/s41598-025-18636-0&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nature.com/articles/s41598-025-18636-0"/><published>2025-10-12T16:15:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559603</id><title>GitHub Copilot: Remote Code Execution via Prompt Injection (CVE-2025-53773)</title><updated>2025-10-12T19:11:58.693598+00:00</updated><content>&lt;doc fingerprint="970e351ded369c83"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;GitHub Copilot: Remote Code Execution via Prompt Injection (CVE-2025-53773)&lt;/head&gt;
    &lt;p&gt;This post is about an important, but also scary, prompt injection discovery that leads to full system compromise of the developer’s machine in GitHub Copilot and VS Code.&lt;/p&gt;
    &lt;p&gt;It is achieved by placing Copilot into YOLO mode by modifying the project’s &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/p&gt;
    &lt;p&gt;As described a few days ago with Amp, a vulnerability pattern in agents that might be overlooked is that if an agent can write to files and modify its own configuration or update security-relevant settings it can lead to remote code execution. This is not uncommon and is an area to always look for when performing a security review.&lt;/p&gt;
    &lt;head rend="h2"&gt;Background Research&lt;/head&gt;
    &lt;p&gt;When looking at VS Code and GitHub Copilot Agent Mode I noticed a strange behavior… it can create and write to files in the workspace without user approval.&lt;/p&gt;
    &lt;p&gt;The edits are immediately persistent, they are not in-memory as a diff to review. The modifications are written to disk right away.&lt;/p&gt;
    &lt;p&gt;It’s one of these things that as a red teamer you know is probably not good… so I was looking if this could be used to escalate privileges and execute code.&lt;/p&gt;
    &lt;head rend="h3"&gt;YOLO Mode&lt;/head&gt;
    &lt;p&gt;So, next I researched features in VS Code that depend on settings that are within the project/workspace folder, and quickly found an interesting one.&lt;/p&gt;
    &lt;p&gt;It turns out that in the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file one can add the following line:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;"chat.tools.autoApprove": true&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;This will put GitHub Copilot in YOLO mode.&lt;/p&gt;
    &lt;p&gt;And it disables all user confirmations, and we can run shell commands, browse the web, and more!&lt;/p&gt;
    &lt;p&gt;What is interesting is that this is an experimental feature, but it is still present by default. I did not download a special version or set my VS Code overall into an experimental mode.&lt;/p&gt;
    &lt;p&gt;Furthermore, it works on Windows, macOS and also Linux.&lt;/p&gt;
    &lt;head rend="h2"&gt;Exploit Chain Explained&lt;/head&gt;
    &lt;p&gt;The proof-of-concept exploit chain to hijack Copilot and escalate privileges is as follows:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The attack starts with a prompt injection planted in a source code file, web page, GitHub issue, tool call response, or other content… The payload can also use invisible text as instructions.&lt;/item&gt;
      &lt;item&gt;The prompt injection first adds the line “chat.tools.autoApprove”: true, to the &lt;code&gt;~/.vscode/settings.json&lt;/code&gt;file. Folder and file will be created if they don’t exist yet.&lt;/item&gt;
      &lt;item&gt;GitHub Copilot immediately enters YOLO mode!&lt;/item&gt;
      &lt;item&gt;Attack runs a Terminal command. And using conditional prompt injection we can actually target what to run based on the operating system.&lt;/item&gt;
      &lt;item&gt;We achieved Remote Code Execution powered by Prompt Injection.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here is a screenshot that shows the demo file with the prompt injection, the developer interacting with the file on the right side in the chat box, and the calculator popping up!&lt;/p&gt;
    &lt;p&gt;Of course any other means of prompt injection delivery, like web or data coming back from an MCP server is an attack angle. I just used it inside the source code file because it’s easiest to test with.&lt;/p&gt;
    &lt;head rend="h2"&gt;Video Walkthrough&lt;/head&gt;
    &lt;head rend="h3"&gt;Short Demos&lt;/head&gt;
    &lt;p&gt;Here is a demonstration video that shows the code execution on Windows.&lt;/p&gt;
    &lt;p&gt;And this one on macOS:&lt;/p&gt;
    &lt;head rend="h3"&gt;Walkthrough&lt;/head&gt;
    &lt;p&gt;Here is a longer form video explaining the discovery and exploit in detail:&lt;/p&gt;
    &lt;p&gt;AI that can set its own permissions and configuration settings is wild!&lt;/p&gt;
    &lt;head rend="h2"&gt;Joining the Workstation to a Botnet - ZombAIs&lt;/head&gt;
    &lt;p&gt;Of course, this means we can join the developer’s machine to a botnet as a ZombAI.&lt;/p&gt;
    &lt;p&gt;Also, for fun we can modified the &lt;code&gt;settings.json&lt;/code&gt; file to switch VS Code into a &lt;code&gt;Red&lt;/code&gt; color scheme and similar things.&lt;/p&gt;
    &lt;p&gt;It doesn’t end here though! This also means we can build an actual AI virus that attaches to files and propagates as developers download and interact with infected files.&lt;/p&gt;
    &lt;p&gt;Last but not least, to demonstrate that we have full control of the developer’s host, we show that Copilot can be hijacked to download malware, and join a remote command and control server.&lt;/p&gt;
    &lt;p&gt;This means the door is open for malware, ransomware, info stealers, etc.&lt;/p&gt;
    &lt;p&gt;Scary stuff.&lt;/p&gt;
    &lt;head rend="h2"&gt;Building an AI Virus&lt;/head&gt;
    &lt;p&gt;When seeing this, one will notice that this basically allows the creation of a virus. An attacker can embed instructions and once they gain code execution, additional malware can compromise other Git projects (and RAG sources) to embed the malicious instructions, and commit the changes or even force push them upstream.&lt;/p&gt;
    &lt;p&gt;This can lead to further spread as other developers unknowingly propagate the infected code.&lt;/p&gt;
    &lt;p&gt;Finally, we also need to talk about invisible instructions!&lt;/p&gt;
    &lt;head rend="h2"&gt;Using Invisible Instructions&lt;/head&gt;
    &lt;p&gt;One might say that it would be quickly discovered if instructions are embedded as comments. So in order to make it a bit more interesting, I went ahead and created an invisible payload that achieves the attack chain, but is not visible to users. This was not as reliable, but it still worked:&lt;/p&gt;
    &lt;p&gt;Note: Although the demo here with invisible instructions worked multiple times for me, using invisible instructions often leads to the exploit being very unreliable, and is also commonly also refused by the model and there is also typically a visual indicator that VS Code shows about Unicode characters. However, attacks (and models) get better over time. It’s also worth highlighting that not all models are vulnerable to such invisible prompt injection attacks.&lt;/p&gt;
    &lt;head rend="h2"&gt;Recommendations and Fix&lt;/head&gt;
    &lt;p&gt;There are actually more attack angles then just the YOLO mode example I shared. When Microsoft asked me if there is any more info I have, I had looked a bit more and noticed there are other problematic places, for instance &lt;code&gt;.vscode/tasks.json&lt;/code&gt; that the AI can write to, or adding fake malicious MCP servers, etc which can lead to code execution. And the AI can reconfigure the user interface and configuration settings of the project.&lt;/p&gt;
    &lt;p&gt;Recently I noticed that developers often use multiple agents, so there is also the threat of overwriting other agent configuration files (allow-list bash commands, add MCP servers…), as they are commonly in the project folder as well.&lt;/p&gt;
    &lt;p&gt;Ideally, the AI would not be able to modify files without a human first approving it. Many other editors do show the diff, which then can be approved by the developer.&lt;/p&gt;
    &lt;head rend="h2"&gt;Responsible Disclosure&lt;/head&gt;
    &lt;p&gt;After reporting the vulnerability on June 29, 2025 Microsoft confirmed the repro and asked a few follow up questions. A few weeks later MSRC pointed out that it is an issue they were already tracking, and that it will be patched by August. With the August Patch Tuesday release this is now fixed.&lt;/p&gt;
    &lt;p&gt;Shout out to Markus Vervier from Persistent Security who has also identified and reported this vulnerability to Microsoft. You can find their write-up here. And also a shout out to Ari Marzuk who seems to also have discovered it in parallel.&lt;/p&gt;
    &lt;p&gt;Thanks to the members of the MSRC and product team for the help in getting it mitigated.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;This is another example of how an AI agent might not stay in its box! By modifying its own environment GitHub Copilot can escalate privileges and execute code to compromise the developer’s machine. It’s a not uncommon design flaw in agentic systems as I have discovered.&lt;/p&gt;
    &lt;p&gt;Keep looking out for such design flaws, these should be easily caught during threat modeling.&lt;/p&gt;
    &lt;p&gt;Cheers.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://embracethered.com/blog/posts/2025/github-copilot-remote-code-execution-via-prompt-injection/"/><published>2025-10-12T16:46:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559852</id><title>'Death to Spotify': the DIY movement to get artists and fans to quit the app</title><updated>2025-10-12T19:11:58.437363+00:00</updated><content>&lt;doc fingerprint="e1279421a9e2e7b9"&gt;
  &lt;main&gt;
    &lt;p&gt;This month, indie musicians in Oakland, California, gathered for a series of talks called Death to Spotify, where attenders explored “what it means to decentralize music discovery, production and listening from capitalist economies”.&lt;/p&gt;
    &lt;p&gt;The events, held at Bathers library, featured speakers from indie station KEXP, labels Cherub Dream Records and Dandy Boy Records, and DJ collectives No Bias and Amor Digital. What began as a small run of talks quickly sold out and drew international interest. People as far away as Barcelona and Bengaluru emailed the organizers asking how to host similar events.&lt;/p&gt;
    &lt;p&gt;The talks come as the global movement against Spotify edges into the mainstream. In January, music journalist Liz Pelly released Mood Machine, a critical history arguing the streaming company has ruined the industry and turned listeners into “passive, uninspired consumers”. Spotify’s model, she writes, depends on paying artists a pittance – less still if they agree to be “playlisted” on its Discovery mode, which rewards the kind of bland, coffee-shop muzak that fades neatly into the background.&lt;/p&gt;
    &lt;p&gt;Artists have long complained about paltry payouts, but this summer the criticism became personal, targeting Spotify’s billionaire co-founder Daniel Ek for his investment in Helsing, a German firm developing AI for military tech. Groups including Massive Attack, King Gizzard &amp;amp; the Lizard Wizard, Deerhoof and Hotline TNT pulled their music from the service in protest. (Spotify has stressed that “Spotify and Helsing are two separate companies”.)&lt;/p&gt;
    &lt;p&gt;In Oakland, California, Stephanie Dukich read Mood Machine, heard about the boycotts, and was inspired.&lt;/p&gt;
    &lt;p&gt;Dukich, who investigates complaints against the city’s police, was part of a reading group about digital media at Bathers library. Though she is not a musician, Dukich describes herself, along with her friend and art gallery worker Manasa Karthikeyan, as “really into sound”.&lt;/p&gt;
    &lt;p&gt;She and Karthikeyan decided to start similar conversations. “Spotify is enmeshed in how we engage with music,” Dukich says. “We thought it would be great to talk about our relationship to streaming – what it means to actually take our files off and learn how to do that together.” Death to Spotify was born.&lt;/p&gt;
    &lt;p&gt;The goal, in short, was “down with algorithmic listening, down with royalty theft, down with AI-generated music”.&lt;/p&gt;
    &lt;p&gt;Karthikeyan says the responsibility of quitting Spotify lies as much with listeners as artists. “You have to accept that you won’t have instant access to everything,” she says. “That makes you think harder about what you support.”&lt;/p&gt;
    &lt;p&gt;But will either musicians or listeners actually have the nerve to actually boycott the app longterm?&lt;/p&gt;
    &lt;p&gt;Several famous musicians have pulled their catalogues from Spotify with big, headline-grabbing announcements over the years, only to quietly come crawling back to the platform after some time. One of the app’s most popular artists, Taylor Swift, boycotted the service for three years in protest of its unfair payment practices but returned in 2017. Radiohead’s frontman. Thom Yorke, removed some his solo projects for the same reason in 2013, calling Spotify “the last desperate fart of a dying corpse”; he later put them back.&lt;/p&gt;
    &lt;p&gt;Neil Young and Joni Mitchell left the app in 2022, citing the company’s exclusive deal with anti-vax podcast host Joe Rogan; both Canadian singer-songwriters contracted polio as children in the 1950s. They, too, later restored their catalogues on Spotify.&lt;/p&gt;
    &lt;p&gt;Eric Drott, a professor of music at the University of Texas at Austin, says the new wave of boycotts feels different. “These acts are less famous. For years, artists knew streaming wouldn’t make them rich but needed the visibility. Now there’s so much music out there, people are questioning whether it’s doing much for them.”&lt;/p&gt;
    &lt;p&gt;Will Anderson, frontman of Hotline TNT, says there’s “a 0% chance” his band will return. “It doesn’t make sense for true music lovers to be on there,” he says. “Spotify’s end game is for you not to think about what’s playing.” When the band sold their new record Raspberry Moon directly through Bandcamp and a 24-hour Twitch stream, they sold hundreds of copies and “generated thousands of dollars”.&lt;/p&gt;
    &lt;p&gt;Others such as pop-rock songwriter Caroline Rose are experimenting too. Her album Year of the Slug came out only on vinyl and Bandcamp, inspired by Cindy Lee’s Diamond Jubilee, which was initially available only on YouTube and the filesharing site Mega. “I find it pretty lame that we put our heart and soul into something and then just put it online for free,” Rose says.&lt;/p&gt;
    &lt;p&gt;Rose is a member of the Union of Musicians and Allied Workers (UMAW), an advocacy group formed at the beginning of the Covid-19 pandemic to protect music workers. Joey DeFrancesco, a member of the punk rock band Downtown Boys and co-founder of UMAW, says the group “unequivocally supports artists taking agency, holding corporations accountable, and making splashes [such as taking music off Spotify] to push back at the company”. At the same time, DeFrancesco says, that kind of individualized boycotting has its “limits”.&lt;/p&gt;
    &lt;p&gt;“What we try to do in the labor movement and at UMAW is to act collectively,” he adds. Examples include UMAW’s successful campaign (alongside the Austin for Palestine Coalition) to pressure the music festival South by Southwest to drop the US army and weapons manufacturers as sponsors for the 2025 event, and the Living Wages for Musicians Act, sponsored by representative Rashina Tlaib, a bill that would regulate Spotify payouts to artists.&lt;/p&gt;
    &lt;p&gt;The Death to Spotify organizers say their goal is not necessarily to shut the app down. “We just want everyone to think a little bit harder about the ways they listen to music,” Karthikeyan says. “It just flattens culture at its core if we only stick to this algorithmically built comfort zone.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theguardian.com/technology/2025/oct/12/spotify-boycott-artists"/><published>2025-10-12T17:11:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559857</id><title>Wireguard FPGA</title><updated>2025-10-12T19:11:57.774674+00:00</updated><content>&lt;doc fingerprint="b5d9dc196105abe7"&gt;
  &lt;main&gt;
    &lt;p&gt;Virtual Private Networks (VPNs) are the central and indispensable component of Internet security. They comprise a set of technologies that connect geographically dispersed, heterogeneous networks through encrypted tunnels, creating the impression of a homogenous private network on the public shared physical medium.&lt;/p&gt;
    &lt;p&gt;With traditional solutions (such as OpenVPN / IPSec) starting to run out of steam, Wireguard is increasingly coming to the forefront as a modern, secure data tunneling and encryption method, one that's also easier to manage than the incumbents. Both software and hardware implementations of Wireguard already exist. However, the software performance is far below the speed of wire. Existing hardware approaches are both prohibitively expensive and based on proprietary, closed-source IP blocks and tools.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The intent of this project is to bridge these gaps with an FPGA open-source implementation of Wireguard, written in SystemVerilog HDL.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We have contributed to the Blackwire project, which is a 100Gbps hardware implementation of Wireguard switch based on AMD/Xilinx-proprietary AlveoU50 PC-accelerator card (SmartNIC form-factor), and implementable only with proprietary Vivado toolchain.&lt;/p&gt;
    &lt;p&gt;While working on the Blackwire, we have touched multiple sections, and focused on the novel algorithm for Balanced Binary Tree Search of IP tables. However, the Blackwire hardware platform is expensive and priced out of reach of most educational institutions. Its gateware is written in SpinalHDL, a nice and powerfull but a niche HDL, which has not taken roots in the industry. While Blackwire is now released to open-source, that decision came from their financial hardship -- It was originaly meant for sale. Moreover, the company behind it is subject to disputes and obligations that bring into question the legality of ownership over the codebase they "donated" to the open source community.&lt;/p&gt;
    &lt;p&gt;To make the hardware Wireguard truly accessible in the genuine spirit of open-source movement, this project implements it:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;for an inexpensive hardware platform with four 1000Base-T ports&lt;/item&gt;
      &lt;item&gt;in a self-sufficient way, i.e. w/o requiring PC host&lt;/item&gt;
      &lt;item&gt;using a commodity Artix7 FPGA&lt;/item&gt;
      &lt;item&gt;which is supported by open-source tools&lt;/item&gt;
      &lt;item&gt;and with all gateware written in the ubiquitous Verilog / System Verilog&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;[Ref1] Wireguard implementations in software:&lt;/p&gt;
    &lt;p&gt;[Ref2] 100Gbps Blackwire Wireguard&lt;/p&gt;
    &lt;p&gt;[Ref3] Corundum, open-source FPGA-NIC platform&lt;/p&gt;
    &lt;p&gt;[Ref4] ChaCha20-Poly1305 open-source Crypto RTL&lt;/p&gt;
    &lt;p&gt;[Ref5] Cookie Cutter SOC&lt;/p&gt;
    &lt;p&gt;[Ref6] RISC-V ISS&lt;/p&gt;
    &lt;p&gt;[Ref7] 10Gbps Ethernet Switch&lt;/p&gt;
    &lt;p&gt;[Ref8] OpenXC7 open-source tools for Xilinx Series7&lt;/p&gt;
    &lt;p&gt;[Ref9] Alex's Ethernet Stack&lt;/p&gt;
    &lt;p&gt;[Ref10] Amina's ADASEC-SDN&lt;/p&gt;
    &lt;p&gt;The Phase1 (This!) is primarily Proof of Concept, i.e. not full-featured, and definitely not a deployable product. It is envisoned as a mere on-ramp, a springboard for future build-up and optimizations.&lt;/p&gt;
    &lt;p&gt;The Phase2 continuation project is therefore also in the plans, to maximize efficiency and overall useability, such as by increasing the number of channels, facilitating management with GUI apps, or something else as identified by the community feedback.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW partitioning, interface, interactions and workload distribution&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;While, contrary to Blackwire, we don’t rely on an external PC connected via PCIE, we will still have an on-chip RISC-V CPU with intricate hardware interface and significant Embedded Software component that controls the backbone of wire-speed datapath&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW co-development, integration and debugging&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Standard simulation is impractical for the project of this size and complexity. We therefore intend to put to test and good use the very promissing new VProc ISS [Ref6]&lt;/item&gt;
          &lt;item&gt;It’s also impractical and expensive to provide full test systems with real traffic generators and checkers to all developers. We therefore plan to rent some space for a central lab that will host two test systems, then provide remote access to all developers&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Real-life, at-speed testing&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Extent of open-source tools support for SystemVerilog and all needed FPGA primitives and IP functions&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;QOR of the (still maturing) open-source tools&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Blackwire used commercial, AMD/Xilinx-proprietary Vivado toolchain, as well as high-end Alveo U50 FPGA silicon. Even then, they ran into multiple timing closure, utilization and routing congestion challenges.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Financial resources&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Given that this is a complex, multi-disciplinary dev effort, the available funding may not be sufficient to bring it to completion. Blackwire, despite a larger allocated budget, ended up with funding crisis and abrupt cessation of dev activities.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This project is WIP at the moment. The checkmarks below indicate our status. Until all checkmarks are in place, anything you get from here is w/o guaranty -- Use at own risk, as you see fit, and don't blame us if it is not working 🌤️&lt;/p&gt;
    &lt;p&gt;Board bring up. In-depth review of Wireguard ecosystem and prior art. Design Blueprint&lt;/p&gt;
    &lt;p&gt;While the board we're using is low cost, it is also not particularly known in the open-source community. We certainly don’t have prior experience with it. In this opening take we will build a solid foundation for efficient project execution. Good preparation is crucial for a smooth run. We thus seek to first &lt;code&gt;understand and document what we will be designing: SOC Architecture, Datapath Microarchitecture, Hardware/Software Partitioning, DV and Validation Strategy&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Getting a good feel for our Fmax is also a goal of this take. Artix-7 does not support High-Performance (HP) I/O. Consequently, we cannot push its I/O beyond 600MHz, nor its core logic beyond 100 MHz.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Familiarization with HW platform&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Create our first FPGA program that blinks LEDs&lt;/item&gt;
          &lt;item&gt;Verify pinouts and connectivity using simple test routines&lt;/item&gt;
          &lt;item&gt;Generate a few Ethernet test patterns&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Familiarization with SW platform&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Initial bring up of embedded CPU within a cookie-cutter SOC, such as [Ref5]&lt;/item&gt;
          &lt;item&gt;Design and test a simple SW interface to rudimentary HW Ethernet datapath&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Detailed analysis and comparisons of:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Wireguard White Papers&lt;/item&gt;
          &lt;item&gt;existing implementations in software [Ref1]&lt;/item&gt;
          &lt;item&gt;vs. Blackwire hardware implementation [Ref2]&lt;/item&gt;
          &lt;item&gt;cryptographic algorithms used for Wireguard, esp. ChaCha20 for encryption, Poly1305 for authentication [Ref4] and, to a lesser extent, Curve25519 for key exchange and blake2 for hashing&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Identification and assimilation of prior art and building IP blocks, in particular Corundum [Ref3] and, to a lesser extent, 10GE Switch [Ref7]&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Architecture/uArch Design. HW/SW Partitioning. Verification Plan&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation of sufficient initial documentation for project divide-and-conquer across a multi-disciplinary team of half a dozen developers&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Implementation of a basic, statically pre-configured Wireguard link&lt;/p&gt;
    &lt;p&gt;It it in this take that we start creating hardware Datapath and hardening Wireguard encryption protocols, all using Vivado and Xilinx primitives.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Integration of collected RTL blocks into a coherent HW system that implements the basic Wireguard datapath for a handful of manually pre-configured channels.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Corundum FPGA-based NIC and platform for opensource Ethernet development [Ref3]&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;IP Core for ChaCha20-Poly1305 [Ref4] -- Definitely in hardware from the get-go&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Curve25519 module for key exchange -- Likely in software at this point&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;blake2 module for hashing (we'll most likely do it in software)&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Timing closure. Resolution of FPGA device utilization and routing congestion issues&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation of cocoTB DV in the CI/CD environmenT, and representative test cases for datapath simulation&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Development and integration of embedded management software (Control Plane)&lt;/p&gt;
    &lt;p&gt;This work package is about hardware/software codesign and integration. The firmware will run on a soft RISC V processor, inside the FPGA. Our vanilla SOC is at this point starting to be customized to Wireguard needs. This work can to some extent go on in parallel with hardware activities of Take2.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;SW design for on-chip processor (Part 1)&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Code is to be written in the bare-metal C with, as necessary, a few sections in Assembly&lt;/item&gt;
          &lt;item&gt;SW is responsible for configuration and management of hardware blocks&lt;/item&gt;
          &lt;item&gt;SW must not participate in the bulk datapath transfers&lt;/item&gt;
          &lt;item&gt;SW may however intercept the low-frequency management packets&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;SW design for on-chip processor (Part 2)&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;KMM function -- Key Management Module&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW Integration&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;VPN Tunnel: Session initialization, maintenance, and secure closure&lt;/p&gt;
    &lt;p&gt;This is about managing the bring-up, maintenance and tear-down of VPN tunnels between two devices.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Session Initialization: Starting the handshake process to establish secure communication with another device&lt;/item&gt;
      &lt;item&gt;Session Maintenance: Keeping the session active through the regular exchange of control messages, which allows detection and recovery from problems such as connection interruptions&lt;/item&gt;
      &lt;item&gt;Session Closure: Securely close the VPN tunnel when communication is no longer needed, ensuring that all temporary keys and sensitive data are deleted&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Testing, Profiling and Porting to OpenXC7&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Functional testing on the real system. Does it work as intended? Bug fixes&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Performance testing. HW/SW profiling, updates and enhancements to ensure the design indeed operates at close to the wire speed on all preconfigured channels&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Porting to openXC7 [Ref8] using SV2V, in the GoCD CI/CD setting&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;This is challenging, as openXC7 has thus far been crashing for NES SV&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Timing closure with openXC7&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;This is definitely challenging, given that openXC7 is currently without accurate timing-driven STA&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Filing bug tickets with open source developers for issues found in their tools, supporting them all the way to the resolution&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation and maintenance of an attractive and well-documented Github repo, to entice community interest&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ongoing documentation updates and CI/CD script maintenance to keep it valid in the light of inevitable design mutations compared to the original Design Blueprint.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Flow control module for efficient and stable VPN tunnel data management&lt;/p&gt;
    &lt;p&gt;The objective of this optional deliverable is to ensure stable and efficient links, thus taking this project one step closer to a deployable product.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Develop software components for management of data flow within VPN tunnels&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Since the WireGuard node essentially functions as an IP router with WireGuard protocol support, we have decided to design the system according to a two-layer architecture: a control plane responsible for managing IP routing processes and executing the WireGuard protocol (managing remote peers, sessions, and keys), and a data plane that will perform IP routing and cryptography processes at wire speed. The control plane will be implemented as software running on a soft CPU, while the data plane will be fully implemented in RTL on an FPGA.&lt;/p&gt;
    &lt;p&gt;In the HW/SW partitioning diagram, we can observe two types of network traffic: control traffic, which originates from the control plane and goes toward the external network (and vice versa), and data traffic, which arrives from the external network and, after processing in the data plane, returns to the external network. Specifically, control traffic represents WireGuard protocol handshake messages, while data traffic consists of end-user traffic, either encrypted or in plaintext, depending on the perspective.&lt;/p&gt;
    &lt;p&gt;The hardware architecture essentially follows the HW/SW partitioning and consists of two domains: a soft CPU for the control plane and RTL for the data plane.&lt;/p&gt;
    &lt;p&gt;The soft CPU is equipped with a Boot ROM and a DDR3 SDRAM controller for interfacing with off-chip memory. External memory is exclusively used for control plane processes and does not store packets. The connection between the control and data planes is established through a CSR-based HAL.&lt;/p&gt;
    &lt;p&gt;The data plane consists of several IP cores, including data plane engine (DPE) and supporting components, which are listed and explained in the direction of network traffic propagation:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PHY Controller - initial configuration of Realtek PHYs and monitoring link activity (link up/down events)&lt;/item&gt;
      &lt;item&gt;1G MAC - execution of the 1G Ethernet protocol (framing, flow control, FCS, etc.)&lt;/item&gt;
      &lt;item&gt;Rx FIFOs - clock domain crossing, bus width conversion, and store &amp;amp; forward packet handling&lt;/item&gt;
      &lt;item&gt;Per-Packet Round Robin Multiplexer - servicing Rx FIFOs on a per-packet basis using a round-robin algorithm&lt;/item&gt;
      &lt;item&gt;Header Parser - extraction of WireGuard-related information from packet headers (IP addresses, UDP ports, WireGuard message type, peer ID, etc.)&lt;/item&gt;
      &lt;item&gt;Wireguard/UDP Packet Disassembler - decapsulation of the payload from the Wireguard data packet for decryption of tunneled traffic&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 Decryptor - decryption and authentication of tunneled traffic&lt;/item&gt;
      &lt;item&gt;IP Lookup Engine - routing/forwarding table lookup, mapping packets to the appropriate WireGuard peer, and making packet accept/reject decisions&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 Encryptor - encryption and authentication of traffic to be tunneled&lt;/item&gt;
      &lt;item&gt;Wireguard/UDP Packet Assembler - encapsulation of the encrypted packet into a WireGuard data packet for tunneling to the remote peer&lt;/item&gt;
      &lt;item&gt;Per-Packet Demultiplexer - forwarding packets to Tx FIFOs based on packet type and destination&lt;/item&gt;
      &lt;item&gt;Tx FIFOs - clock domain crossing, bus width conversion, and store &amp;amp; forward packet handling&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;ChaCha20-Poly1305 Encryptor/Decryptor are using RFC7539's AEAD (Authenticated Encryption Authenticated Data) construction based on ChaCha20 for symmetric encryption and Poly1305 for authentication.&lt;/p&gt;
    &lt;p&gt;The details of hardware architecture can be found in the README.md in the &lt;code&gt;1.hw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The conceptual class diagram provides an overview of the components in the software part of the system without delving into implementation details. The focus is on the WireGuard Agent, which implements the protocol's handshake procedures, along with the following supplementary components:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Curve25519 - an ECDH algorithm implementation for establishing a shared secret using a public-private key pair between two remote parties connected via an insecure channel, such as the Internet&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 - an AEAD algorithm implementation for encryption and authentication of static keys and nonce values to prevent replay attacks&lt;/item&gt;
      &lt;item&gt;XChaCha20-Poly1305 - a XAEAD algorithm implementation for encrypting and authenticating nonce values in Cookie Replay messages to mitigate potential DoS attacks&lt;/item&gt;
      &lt;item&gt;BLAKE2s - an implementation of the BLAKE2s hash function for MAC authentication and keyed hashing, per RFC7693&lt;/item&gt;
      &lt;item&gt;RNG - a random number generator used to initialize the DH key generator and generate peer identifiers&lt;/item&gt;
      &lt;item&gt;Timer - timers for rekey, retry, and keepalive procedures&lt;/item&gt;
      &lt;item&gt;HKDF - an implementation of the algorithm for expanding the ECDH result&lt;/item&gt;
      &lt;item&gt;RTC - a real-time clock used to generate the TAI64N timestamp&lt;/item&gt;
      &lt;item&gt;SipHash - a simple non-cryptographic function used for implementing a hashtable for fast lookup of decrypted static public keys of remote peers&lt;/item&gt;
      &lt;item&gt;Routing DB Updater - a subsystem for maintaining the cryptokey routing table content and deploying it to the data plane via the HAL/CSR interface&lt;/item&gt;
      &lt;item&gt;ICMP - implementing basic ICMP protocol functions (echo request/reply, TTL exceeded, etc.)&lt;/item&gt;
      &lt;item&gt;CLI - a USB/UART-based command-line interface for configuring the WireGuard node (setting the local IP address, remote peer IP addresses, network addresses, keys, etc.)&lt;/item&gt;
      &lt;item&gt;HAL/CSR Driver - a CSR-based abstraction for data plane components with an interface for reading/writing the corresponding registers&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The details of software architecture can be found in the README.md in the &lt;code&gt;2.sw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;To illustrate the operation of the system as a whole, we have prepared a step-by-step analysis of packets processing based on the capture of real WireGuard traffic. The experimental topology consists of four nodes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;10.10.0.2 - the end-user host at site A&lt;/item&gt;
      &lt;item&gt;10.9.0.1 - WireGuard peer A&lt;/item&gt;
      &lt;item&gt;10.9.0.2 - WireGuard peer B&lt;/item&gt;
      &lt;item&gt;10.10.0.1 - the end-user host at site B&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The detailed analysis can be found in the README.md in the &lt;code&gt;1.hw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The Wireguard FPGA test bench aims to have a flexible approach to simulation which allows a common test environment to be used whilst selecting between alternative CPU components, one of which uses the VProc virtual processor co-simulation element. This allows simulations to be fully HDL, with a RISC-V processor RTL implementation such as picoRV32, IBEX or EDUBOS5, or to co-simulate software using the virtual processor, with a significant speed up in simulation times. The test bench has the following features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A VProc virtual processor based &lt;code&gt;soc_cpu.VPROC&lt;/code&gt;component&lt;list rend="ul"&gt;&lt;item&gt;Selectable between this or an RTL softcore&lt;/item&gt;&lt;item&gt;Can run natively compiled test code&lt;/item&gt;&lt;item&gt;Can run the application compiled natively with the auto-generated co-sim HAL&lt;/item&gt;&lt;item&gt;Can run RISC-V compiled code using the rv32 RISC-V ISS model&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Uses a C sparse memory model &lt;list rend="ul"&gt;&lt;item&gt;An HDL component instantiated in logic gives logic access to this memory&lt;/item&gt;&lt;item&gt;An API is provided to VProc running code for direct access&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;The udpIpPg VIP is used to drive the logic's four ethernet ports in a four port &lt;code&gt;bfm_ethernet&lt;/code&gt;block.&lt;list rend="ul"&gt;&lt;item&gt;An MDIO slave interface is also provided that maps mem_model memory areas to the registers with instantiated mem_model components&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The figure below shows an oveview block diagram of the test bench HDL.&lt;/p&gt;
    &lt;p&gt;More details on the architecture and usage of the Wireguard test bench can be found in the README.md in the &lt;code&gt;4.sim&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The Wireguard control and status register harware abstraction layer (HAL) software is auto-generated, as is the CSR RTL, using &lt;code&gt;peakrdl&lt;/code&gt;. For co-simulation purposes an additional layer is auto-generated from the same SystemRDL specification using &lt;code&gt;systemrdl-compiler&lt;/code&gt; that accompanies the &lt;code&gt;peakrdl&lt;/code&gt; tools. This produces two header files that define a common API to the application layer for both the RISC-V platform and the VProc based co-simulation verification environment. The details of the HAL generation can be found in the README.md in the &lt;code&gt;3.build/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;WIP&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verilator v5.024&lt;/item&gt;
      &lt;item&gt;VProc v1.12.2&lt;/item&gt;
      &lt;item&gt;Mem Model v1.0.0&lt;/item&gt;
      &lt;item&gt;rv32 ISS v1.1.4&lt;/item&gt;
      &lt;item&gt;udpIpPg v1.0.3&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;We are grateful to NLnet Foundation for their sponsorship of this development activity.&lt;/p&gt;
    &lt;p&gt;The wyvernSemi's wisdom and contribution made a great deal of difference -- Thank you, we are honored to have you on the project.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/chili-chips-ba/wireguard-fpga"/><published>2025-10-12T17:12:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559977</id><title>Ridley Scott's Prometheus and Alien: Covenant – The Contemporary Horror of AI</title><updated>2025-10-12T19:07:11.593326+00:00</updated><content>&lt;doc fingerprint="6047e4b2987f7b71"&gt;
  &lt;main&gt;
    &lt;p&gt;We're sorry but Kuzu - Embedded, scalable, blazing fast graph database doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ejumpcut.org/archive/jc58.2018/AlpertAlienPrequels/index.html"/><published>2025-10-12T17:23:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560036</id><title>Kuzu DB devs no longer supporting the project</title><updated>2025-10-12T19:07:11.279869+00:00</updated><content>&lt;doc fingerprint="6047e4b2987f7b71"&gt;
  &lt;main&gt;
    &lt;p&gt;We're sorry but Kuzu - Embedded, scalable, blazing fast graph database doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kuzudb.com"/><published>2025-10-12T17:30:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560218</id><title>Agent Shell 0.5 Improvements</title><updated>2025-10-12T19:07:10.931334+00:00</updated><content>&lt;doc fingerprint="f51987a41858eda"&gt;
  &lt;main&gt;&lt;p&gt;While it's only been a few weeks since introducing agent-shell, we've landed nearly 100 commits and enough improvements to warrant a new blog post.&lt;/p&gt;&lt;p&gt;agent-shell now includes support for two additional ACP-capable agents:&lt;/p&gt;&lt;p&gt;In addition to starting new shells via agent-specific commands, we now have a unified &lt;code&gt;M-x agent-shell&lt;/code&gt; entry point, enabling selection from a list of supported agents.&lt;/p&gt;&lt;p&gt;The agent-specific commands remain available as usual:&lt;/p&gt;&lt;code&gt;M-x agent-shell-anthropic-start-claude-code&lt;/code&gt;&lt;code&gt;M-x agent-shell-openai-start-codex&lt;/code&gt;&lt;code&gt;M-x agent-shell-google-start-gemini&lt;/code&gt;&lt;code&gt;M-x agent-shell-goose-start-agent&lt;/code&gt;&lt;p&gt;&lt;code&gt;agent-shell&lt;/code&gt; now provides basic control to toggle display of shell buffers:&lt;/p&gt;&lt;code&gt;M-x agent-shell-toggle&lt;/code&gt;: Toggles display of the most recently accessed agent (per project).&lt;code&gt;agent-shell-display-action&lt;/code&gt;: Controls how agent shells are displayed when activated.&lt;p&gt;While &lt;code&gt;agent-shell&lt;/code&gt; provides basic display toggling, Calum MacRae offers a comprehensive sidebar package. Check out agent-shell-sidebar.&lt;/p&gt;&lt;p&gt;&lt;code&gt;agent-shell&lt;/code&gt; now has experimental support for running agents inside dev containers. See docs.&lt;/p&gt;&lt;p&gt;&lt;code&gt;quick-diff&lt;/code&gt; buffers, proposing changes, get a more polished experience. More notably, diffs get context (thanks to David J. Rosenbaum), single-key patch navigation/acceptance, and file names now displayed in header line.&lt;/p&gt;&lt;p&gt;Environment variables can now be loaded from either the Emacs environment, .env files, and/or overridden inline:&lt;/p&gt;&lt;code&gt;(setq agent-shell-anthropic-claude-environment
      (agent-shell-make-environment-variables
       :inherit-env t
       :load-env "~/.env"
       "CUSTOM_VAR" "custom_value"))
&lt;/code&gt;&lt;p&gt;Different authentication methods are now supported. For example:&lt;/p&gt;&lt;code&gt;;; Login-based auth
(setq agent-shell-anthropic-authentication
      (agent-shell-anthropic-make-authentication :login t))

;; API key auth
(setq agent-shell-anthropic-authentication
      (agent-shell-anthropic-make-authentication
       :api-key (lambda () (auth-source-pass-get "secret" "anthropic-api-key"))))
&lt;/code&gt;&lt;p&gt;Check &lt;code&gt;agent-shell-*-authentication&lt;/code&gt; per provider, as available options may differ.&lt;/p&gt;&lt;p&gt;On the smaller side, but also contributing to overall polish:&lt;/p&gt;&lt;p&gt;While not technically part of &lt;code&gt;agent-shell&lt;/code&gt;, acp.el's traffic inspection has been getting some love to help users diagnose issues.&lt;/p&gt;&lt;p&gt;Thank you for your contributions!&lt;/p&gt;&lt;p&gt;Thank you to all sponsors. While LLMs aren't everyone's cup of tea, we're seeing editors across the board evolving to accommodate these new LLM tools. In a somewhat similar vein, LSP integration wasn't for everyone, but for those who did want it, Emacs luckily catered to them. Thank you for helping make this project sustainable while also enabling Emacs to cater to all.&lt;/p&gt;&lt;p&gt;If agent-shell or acp.el are useful to you, consider sponsoring its development. LLM tokens aren't free, and neither is the time dedicated to building this stuff ;-)&lt;/p&gt;&lt;p&gt;powered by LMNO.lol&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://xenodium.com/agent-shell-0-5-improvements"/><published>2025-10-12T17:52:27+00:00</published></entry></feed>