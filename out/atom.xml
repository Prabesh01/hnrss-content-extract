<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-23T13:43:08.716909+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45340133</id><title>Paper2Agent: Stanford Reimagining Research Papers as Interactive AI Agents</title><updated>2025-09-23T13:43:15.038393+00:00</updated><content>&lt;doc fingerprint="f5bd3409d9b3a08a"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Artificial Intelligence&lt;/head&gt;&lt;p&gt; [Submitted on 8 Sep 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Paper2Agent: Reimagining Research Papers As Interactive and Reliable AI Agents&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:We introduce Paper2Agent, an automated framework that converts research papers into AI agents. Paper2Agent transforms research output from passive artifacts into active systems that can accelerate downstream use, adoption, and discovery. Conventional research papers require readers to invest substantial effort to understand and adapt a paper's code, data, and methods to their own work, creating barriers to dissemination and reuse. Paper2Agent addresses this challenge by automatically converting a paper into an AI agent that acts as a knowledgeable research assistant. It systematically analyzes the paper and the associated codebase using multiple agents to construct a Model Context Protocol (MCP) server, then iteratively generates and runs tests to refine and robustify the resulting MCP. These paper MCPs can then be flexibly connected to a chat agent (e.g. Claude Code) to carry out complex scientific queries through natural language while invoking tools and workflows from the original paper. We demonstrate Paper2Agent's effectiveness in creating reliable and capable paper agents through in-depth case studies. Paper2Agent created an agent that leverages AlphaGenome to interpret genomic variants and agents based on ScanPy and TISSUE to carry out single-cell and spatial transcriptomics analyses. We validate that these paper agents can reproduce the original paper's results and can correctly carry out novel user queries. By turning static papers into dynamic, interactive AI agents, Paper2Agent introduces a new paradigm for knowledge dissemination and a foundation for the collaborative ecosystem of AI co-scientists.&lt;/quote&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;cs.AI&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arxiv.org/abs/2509.06917"/><published>2025-09-22T22:02:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45340192</id><title>Kevo app shutdown</title><updated>2025-09-23T13:43:14.630277+00:00</updated><content>&lt;doc fingerprint="922c7b946738aaf4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;What does the November 14th, 2025 Kevo app shutdown mean to my Kevo door lock?&lt;/head&gt;
    &lt;p&gt;After more than a decade of service, as of November 14, 2025 the Kevo app and web portal will no longer be available.&lt;lb/&gt; ASSA ABLOY Americas Residential Inc. (“ASSA ABLOY”, “we” and “us”), which is the successor to the company that previously marketed Kwikset Kevo, Weiser Kevo and Baldwin Evolved smart door locks, will cease supporting your Kevo lock’s remote functionality.&lt;/p&gt;
    &lt;p&gt;Locks Affected (All Generations): Kevo, Kevo Convert, Kevo Plus, Baldwin Evolved&lt;/p&gt;
    &lt;p&gt;Brands Affected: Kwikset, Weiser, Baldwin&lt;/p&gt;
    &lt;p&gt;Impact&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Users can no longer open/close or manage their door lock via the mobile app or web portal.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Not Impacted&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Physical Key, users will be able to unlock or lock the deadbolt with the physical key&lt;/item&gt;
      &lt;item&gt;Key FOB, users will be able to unlock or lock the deadbolt with the Key FOB&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Required User Action&lt;/p&gt;
    &lt;p&gt;Prepare in advance for the Kevo app shutdown. Ensure that you have the physical key or key fob to unlock and lock the door moving forward or you can redeem the unique promotional offer that existing Kevo users received via e-mail and replace the Kevo deadbolt entirely.&lt;/p&gt;
    &lt;p&gt;Replacement Door Lock Discount&lt;/p&gt;
    &lt;p&gt;To help make this transition easier, we’re offering our steepest discounts ever on trusted smart lock replacements, available exclusively to Kevo users.&lt;/p&gt;
    &lt;p&gt;(United States Only)&lt;/p&gt;
    &lt;p&gt;Offers will be fulfilled by our partners at Level, a fellow ASSA ABLOY brand. Your orders will be securely processed and shipped through Level’s website.&lt;/p&gt;
    &lt;p&gt;Available options include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;$80 off Kwikset Halo Keypad Wi-Fi Smart Lock&lt;/item&gt;
      &lt;item&gt;$130 off Level Lock+&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;How to Redeem&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Use the following link to visit&lt;/item&gt;
      &lt;item&gt;Choose the replacement deadbolt that is right for you&lt;/item&gt;
      &lt;item&gt;Enter your unique promotional code at checkout&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Your unique promotional code was sent to your registered Kevo e-mail address, notifying you of the Kevo app shutdown&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The above offer is final, and no other offers will ensue with respect to the loss of remote functionality of your Kevo door lock. This offer will expire December 14, 2025.&lt;lb/&gt; (Canada Only)&lt;lb/&gt; Orders will be securely processed and shipped through Weiser’s customer service team.&lt;lb/&gt; Available options include:&lt;lb/&gt; - $89 (CDN) off Weiser Halo Keypad Wi-Fi Smart Lock&lt;lb/&gt; How to Redeem&lt;lb/&gt; 1. Call our Weiser customer service team: 1-800-501-9471&lt;lb/&gt; 2. Ask the service team member about claiming your Kevo replacement offer&lt;lb/&gt; 3. Provide your unique promo code&lt;lb/&gt; o Your unique promotional code was sent to your registered Kevo e-mail address, notifying you of the Kevo app shutdown&lt;lb/&gt; These offers are made in connection with the Kevo app shutdown; and available through December 14, 2025—without further extension.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.kwikset.com/support/answers/what-does-the-kevo-app-shutdown-mean-to-my-kevo-door-lock"/><published>2025-09-22T22:07:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45341324</id><title>Fall Foliage Map 2025</title><updated>2025-09-23T13:43:14.408181+00:00</updated><content>&lt;doc fingerprint="14d19396b861a2a5"&gt;
  &lt;main&gt;
    &lt;p&gt;Little to No Color&lt;/p&gt;
    &lt;p&gt;Low Color&lt;/p&gt;
    &lt;p&gt;Moderate Color&lt;/p&gt;
    &lt;p&gt;High Color&lt;/p&gt;
    &lt;p&gt;Peak Color&lt;/p&gt;
    &lt;p&gt;Past Peak Color&lt;/p&gt;
    &lt;p&gt;Color Report&lt;/p&gt;
    &lt;p&gt;Peak Timing&lt;/p&gt;
    &lt;p&gt;Reports&lt;/p&gt;
    &lt;p&gt;Download&lt;/p&gt;
    &lt;p&gt;Coming Fall 2025&lt;/p&gt;
    &lt;p&gt;Powered by Esri&lt;/p&gt;
    &lt;p&gt;Fall is nearly upon us, and we're once again helping fall foliage enthusiasts across the country find the best fall color! Use our map to explore the estimated timing of fall foliage throughout the United States, allowing you to plan trips with confidence this year. Check back regularly for updates based on the latest reports gathered from hundreds of sources throughout the country.&lt;/p&gt;
    &lt;p&gt;Two primary factors control the timing of fall foliage: daylight and temperature. This means that the further north and the higher in elevation a tree is, the earlier it will reveal it's colorful canopy. Photosynthesis grinds to a halt when the days grow short in the fall, and leaves no longer have a need for their excess stores of chlorophyll.&lt;/p&gt;
    &lt;p&gt;Over the course of a month or two, the concentrations of chlorophyll diminish, allowing less concentrated chemicals such as anthocyanin and carotenoids to dominate, turning the leaf red, yellow, or orange. The rate at which this change occurs varies amongst tree species, so it can be difficult to pinpoint a single peak in fall foliage.&lt;/p&gt;
    &lt;p&gt;Nevertheless, when the vast majority of trees in a particular area have full canopies of autumnal color, peak has arrived. Some areas, partiularly in the Northeast, experience vibrant red peaks due to an abundance of maple trees, while others experience a mixture of all of fall's colors. Different trees display different colors, giving each region its own unique peak.&lt;/p&gt;
    &lt;p&gt;For most of the United States, peak fall color arrives in the month of October. This is when wide swaths of the Northeast, Midwest, and Western states are aglow with bright fall foliage, and more than 80% of travelers make their fall foliage trips. Some less-populated regions will peak in September (August in northern Alaska), while the southernmost states hold off until mid-November.&lt;/p&gt;
    &lt;p&gt;The most popular fall foliage displays are found in New England, where approximately ten million people travel each year in hopes of photographing or simply walking through fall's splendor. Northern Vermont, New Hampshire, and northwestern Maine experience peak in early October, while much of New York, Massachusetts, and Pennsylvania have to wait until later in the month.&lt;/p&gt;
    &lt;p&gt;Out west, golden Aspens peak in sweeping displays in late September and early October, just prior to the invasive chill of winter. Non-desert, lower elevations in the Northwest are further delayed into late October/early November; however, the wait is well worth it.&lt;/p&gt;
    &lt;p&gt;If you've ever traveled in search of fall foliage before, you likely know how tricky it can be to be in the right place at the right time. The timing of peak color varies signficantly season-to-season, meaning what worked one year might not work the next! The best fall trips take careful planning, a lot of patience, and a reliable fall foliage map.&lt;/p&gt;
    &lt;p&gt;It's helpful to establish a baseline for when leaves normally change. Maps, like the one in the above section, can help you identify roughly when in the season you should be planning your trip. From there, you should consult a real-time fall foliage map like ours to see if fall foliage is on-time or running early/late due to ongoing weather conditions.&lt;/p&gt;
    &lt;p&gt;If at all possible, don't solidify your plans until you're two weeks out from peak fall foliage. This allows you to be flexible should extreme weather rear its head and disrupt the normal progression of fall foliage. Should that not be an option for you, do your planning in early September when fall foliage experts can give you an idea of whether or not fall color is on-time this year.&lt;/p&gt;
    &lt;p&gt;You'll want to make the most of your time in fall's splendor, so be sure to pick out a few beautiful hikes or drives on which you can truly be emersed in autumnal glory. If you're looking to beat the crowds, consider going to popular locations very early in the morning, before the majority of people arrive. Sunrise bathes fall foliage in golden hues, making early morning one of the best times to venture out!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.explorefall.com/fall-foliage-map"/><published>2025-09-23T00:14:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342364</id><title>Nine Things I Learned in Ninety Years</title><updated>2025-09-23T13:43:14.080312+00:00</updated><content/><link href="http://edwardpackard.com/wp-content/uploads/2025/09/Nine-Things-I-Learned-in-Ninety-Years.pdf"/><published>2025-09-23T03:03:06+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342759</id><title>Gamebooks and graph theory (2019)</title><updated>2025-09-23T13:43:13.510274+00:00</updated><content>&lt;doc fingerprint="b28e5a636db0b3bc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Gamebooks and graph theory&lt;/head&gt;
    &lt;p&gt;Posted on 27 October 2019 in data-science&lt;/p&gt;
    &lt;p&gt;A game book is, contrary to the usual books, a book you don't read pages sequentially. These books are read interactively. You are offered a choice after a paragraph: go to the right turn to section 7, go to the left turn to 138. That's it. Depending on the series, you might have additional rules: fight, magic, psi power, etc.&lt;/p&gt;
    &lt;p&gt;During the winter holidays, I thought a bit more about these books. They could be encoded as directed graph networks. Therefore I could probably apply a bunch of network algorithms to them to extract interesting information such as:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;the shortest path to an instant death,&lt;/item&gt;
      &lt;item&gt;the path with the most fights,&lt;/item&gt;
      &lt;item&gt;etc.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I chose for my analysis the Lone Wolf series because, luckily for me, some people have put all the books in an electronic format and it's legal. It's a story about Lone Wolf (unexpected I know) the last of his kind, a caste of warrior monks.&lt;/p&gt;
    &lt;p&gt;NB: The Dawn of the Darklords was excluded from the analysis as it was not officially released as a gamebook. It was included in the Magnamund companion.&lt;/p&gt;
    &lt;head rend="h2"&gt;TL;DR&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Masters of Darkness has the most action packed with a possible solution path including 65 fights;&lt;/item&gt;
      &lt;item&gt;The shortest path to death is The Kingdoms of Terror with only a 5 section path;&lt;/item&gt;
      &lt;item&gt;The Caverns of Kalte is the most deadly adventure with 19 instant death sections;&lt;/item&gt;
      &lt;item&gt;The shortest adventure is Flight from the Dark with a solution path only 27 sections long;&lt;/item&gt;
      &lt;item&gt;The longest adventure which can be done is The Shadow on the Sand with a touristic path of 224 sections, more than half of the sections (400).&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;Here is a summary for the 28 books I've analyzed. For now Lonewolf comprises 4 series:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kai series: 1 to 5&lt;/item&gt;
      &lt;item&gt;Magnakai series: 6 to 12&lt;/item&gt;
      &lt;item&gt;Grand Master series: 13 to 20&lt;/item&gt;
      &lt;item&gt;New Order series: 21 to 32 (but now only 28 in project aon)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The values reported below are the average value for each category. Something interesting we can see if that from the 3rd series, there are no more cycles and the shortest path has increased on average 50% compared to the 1st and 2nd series. Also, the shortest path to death has tripled and the number of insta-death was halved.&lt;/p&gt;
    &lt;p&gt;Over time, the books might have become more focused on adventure and story but also less punishing. Having only read the first couple of books, I can't comment on this but if somebody has an opinion on this, I would be happy to hear about it and maybe update the post with your comments.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;series&lt;/cell&gt;
        &lt;cell role="head"&gt;shortest path&lt;/cell&gt;
        &lt;cell role="head"&gt;shortest path to death&lt;/cell&gt;
        &lt;cell role="head"&gt;path with the most fights&lt;/cell&gt;
        &lt;cell role="head"&gt;# of fight&lt;/cell&gt;
        &lt;cell role="head"&gt;# of luck&lt;/cell&gt;
        &lt;cell role="head"&gt;# of death&lt;/cell&gt;
        &lt;cell role="head"&gt;# of cycles&lt;/cell&gt;
        &lt;cell role="head"&gt;longest path&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;1-kai&lt;/cell&gt;
        &lt;cell&gt;51&lt;/cell&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;20&lt;/cell&gt;
        &lt;cell&gt;43&lt;/cell&gt;
        &lt;cell&gt;25&lt;/cell&gt;
        &lt;cell&gt;11&lt;/cell&gt;
        &lt;cell&gt;11&lt;/cell&gt;
        &lt;cell&gt;153&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2-magnakai&lt;/cell&gt;
        &lt;cell&gt;66&lt;/cell&gt;
        &lt;cell&gt;10&lt;/cell&gt;
        &lt;cell&gt;21&lt;/cell&gt;
        &lt;cell&gt;42&lt;/cell&gt;
        &lt;cell&gt;23&lt;/cell&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;171&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;3-grand-master&lt;/cell&gt;
        &lt;cell&gt;95&lt;/cell&gt;
        &lt;cell&gt;37&lt;/cell&gt;
        &lt;cell&gt;18&lt;/cell&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;37&lt;/cell&gt;
        &lt;cell&gt;7&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;163&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;4-new-order&lt;/cell&gt;
        &lt;cell&gt;97&lt;/cell&gt;
        &lt;cell&gt;30&lt;/cell&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;27&lt;/cell&gt;
        &lt;cell&gt;43&lt;/cell&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;156&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h1"&gt;The technical bits&lt;/head&gt;
    &lt;head rend="h2"&gt;The preparation: Turn to 1&lt;/head&gt;
    &lt;p&gt;"Turn to" are the mythic words in these game books. It's also how we will divide the different sections of text, by using regexp. There are 5 types of section and their assigned color:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;normal: you can move forward to another section (white),&lt;/item&gt;
      &lt;item&gt;luck: you are asked to test your luck and you can move forward to another section (green),&lt;/item&gt;
      &lt;item&gt;fight: you are asked to fight some monster(s) and you can move forward to another section (yellow),&lt;/item&gt;
      &lt;item&gt;death: you chose badly and you got yourself killed, you have to restart from the section 1 (red),&lt;/item&gt;
      &lt;item&gt;start/end: first section and last section (blue).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once the sections are defined, we have to create the directed graph. To do so, I used two python libraries:&lt;/p&gt;
    &lt;head rend="h2"&gt;Extracting the interesting information: Test your Luck&lt;/head&gt;
    &lt;p&gt;I mainly used &lt;code&gt;networkx&lt;/code&gt; for the graph network analysis. It's a straightforward library and the documentation is good.&lt;/p&gt;
    &lt;head rend="h3"&gt;Do you need a DAGger?&lt;/head&gt;
    &lt;p&gt;Typically a Lonewolf adventure is the equivalent of a Directed (A)Cyclic Graph:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Directed: Lonewolf, your character, goes from the section 1 to hopefully the latest section which is depending on the book the section 300, 350 or 400, without the possibility to come back to the previous section;&lt;/item&gt;
      &lt;item&gt;Acyclic: This is not totally true for the Lonewolf series as 7 books contain cycles, a "circular" path between two nodes which a node is repeated twice. Some algorithms like the shortest path or longest path require a DAG and we need to remove the cycles before running them.&lt;/item&gt;
      &lt;item&gt;Graph: The sections are the nodes of the graph and the vertices the choices for each section.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Disconnected graphs&lt;/head&gt;
    &lt;p&gt;In several books, graphs are disconnected. It means you can't go from the section 1 to the end section (300 or 350). This indicates usually that there is an enigma or puzzle asking to add numbers discovered along the adventure and reach the section given by the number. The only way to process these graphs is to check the text notes and add the missing edges manually.&lt;/p&gt;
    &lt;head rend="h3"&gt;Cycle removal&lt;/head&gt;
    &lt;p&gt;The cycle removal is an interesting problem as it is one of the first problem to have been shown as NP-complete (NP stands for Non deterministic Polynomial time). This means that there is no known way to find a solution to solve that problem quickly and the time to find a solution grows as the size of the input grows. Nonetheless we are lucky because the data from a gamebook is usually quite small (300 to 400 nodes and 400 to 600 edges)!&lt;/p&gt;
    &lt;p&gt;The idea behind the cycle removal is simple:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;do a DFS search,&lt;/item&gt;
      &lt;item&gt;look at the nodes and their children,&lt;/item&gt;
      &lt;item&gt;if one or more children have been already visited, remove that edge.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;I was curious about what could be done with a graph analysis of such textual / interactive games. Besides applying basic algorithms to test if the gamebook is playable, I didn't find much insights from it. I would like to see if there are any correlations between the features I chose and the popularity of the gamebooks. That being said, it was a cool project to do. I brushed up on the graph theory which I never really used outside of university.&lt;/p&gt;
    &lt;head rend="h2"&gt;Future works&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apply the same methodology to Figthing Fantasy gamebooks&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://notes.atomutek.org/gamebooks-and-graph-theory.html"/><published>2025-09-23T04:10:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342943</id><title>Zoxide: A Better CD Command</title><updated>2025-09-23T13:43:12.966484+00:00</updated><content>&lt;doc fingerprint="56bb8c669bcd38dc"&gt;
  &lt;main&gt;
    &lt;p&gt;Special thanks to:&lt;/p&gt;
    &lt;p&gt;zoxide is a smarter cd command, inspired by z and autojump.&lt;/p&gt;
    &lt;p&gt;It remembers which directories you use most frequently, so you can "jump" to them in just a few keystrokes.&lt;lb/&gt; zoxide works on all major shells.&lt;/p&gt;
    &lt;p&gt;Getting started • Installation • Configuration • Integrations&lt;/p&gt;
    &lt;code&gt;z foo              # cd into highest ranked directory matching foo
z foo bar          # cd into highest ranked directory matching foo and bar
z foo /            # cd into a subdirectory starting with foo

z ~/foo            # z also works like a regular cd command
z foo/             # cd into relative path
z ..               # cd one level up
z -                # cd into previous directory

zi foo             # cd with interactive selection (using fzf)

z foo&amp;lt;SPACE&amp;gt;&amp;lt;TAB&amp;gt;  # show interactive completions (zoxide v0.8.0+, bash 4.4+/fish/zsh only)&lt;/code&gt;
    &lt;p&gt;Read more about the matching algorithm here.&lt;/p&gt;
    &lt;p&gt;zoxide can be installed in 4 easy steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Install binary&lt;/p&gt;&lt;p&gt;zoxide runs on most major platforms. If your platform isn't listed below, please open an issue.&lt;/p&gt;&lt;head&gt;Linux / WSL&lt;/head&gt;&lt;p&gt;The recommended way to install zoxide is via the install script:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;p&gt;Or, you can use a package manager:&lt;/p&gt;&lt;th&gt;Distribution&lt;/th&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;asdf&lt;/td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt;&lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;guix&lt;/td&gt;&lt;code&gt;guix install zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;Linuxbrew&lt;/td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;nixpkgs&lt;/td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;td&gt;AlmaLinux&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Alpine Linux 3.13+&lt;/td&gt;&lt;td&gt;Alpine Linux Packages&lt;/td&gt;&lt;code&gt;apk add zoxide&lt;/code&gt;&lt;td&gt;Arch Linux&lt;/td&gt;&lt;td&gt;Arch Linux Extra&lt;/td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;td&gt;CentOS Stream&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Debian 11+&lt;/del&gt;1&lt;del rend="overstrike"&gt;Debian Packages&lt;/del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Devuan 4.0+&lt;/td&gt;&lt;td&gt;Devuan Packages&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Exherbo Linux&lt;/td&gt;&lt;td&gt;Exherbo packages&lt;/td&gt;&lt;code&gt;cave resolve -x repository/rust&lt;/code&gt;&lt;code&gt;cave resolve -x zoxide&lt;/code&gt;&lt;td&gt;Fedora 32+&lt;/td&gt;&lt;td&gt;Fedora Packages&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Gentoo&lt;/td&gt;&lt;td&gt;Gentoo Packages&lt;/td&gt;&lt;code&gt;emerge app-shells/zoxide&lt;/code&gt;&lt;td&gt;Linux Mint&lt;/td&gt;&lt;td&gt;apt.cli.rs (unofficial)&lt;/td&gt;&lt;td&gt;Setup the repository, then&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Manjaro&lt;/td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;td&gt;openSUSE Tumbleweed&lt;/td&gt;&lt;td&gt;openSUSE Factory&lt;/td&gt;&lt;code&gt;zypper install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Parrot OS&lt;/del&gt;1&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Raspbian 11+&lt;/del&gt;1&lt;del rend="overstrike"&gt;Raspbian Packages&lt;/del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;RHEL 8+&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Rhino Linux&lt;/td&gt;&lt;td&gt;Pacstall Packages&lt;/td&gt;&lt;code&gt;pacstall -I zoxide-deb&lt;/code&gt;&lt;td&gt;Rocky Linux&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Slackware 15.0+&lt;/td&gt;&lt;td&gt;SlackBuilds&lt;/td&gt;&lt;td&gt;Instructions&lt;/td&gt;&lt;td&gt;Solus&lt;/td&gt;&lt;td&gt;Solus Packages&lt;/td&gt;&lt;code&gt;eopkg install zoxide&lt;/code&gt;&lt;td&gt;Ubuntu&lt;/td&gt;&lt;td&gt;apt.cli.rs (unofficial)&lt;/td&gt;&lt;td&gt;Setup the repository, then&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Void Linux&lt;/td&gt;&lt;td&gt;Void Linux Packages&lt;/td&gt;&lt;code&gt;xbps-install -S zoxide&lt;/code&gt;&lt;head&gt;macOS&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Homebrew&lt;/td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;td&gt;asdf&lt;/td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt;&lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;MacPorts&lt;/td&gt;&lt;code&gt;port install zoxide&lt;/code&gt;&lt;td&gt;nixpkgs&lt;/td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;head&gt;Windows&lt;/head&gt;&lt;p&gt;zoxide works with PowerShell, as well as shells running in Cygwin, Git Bash, and MSYS2.&lt;/p&gt;&lt;p&gt;The recommended way to install zoxide is via&lt;/p&gt;&lt;code&gt;winget&lt;/code&gt;:&lt;quote&gt;winget install ajeetdsouza.zoxide&lt;/quote&gt;&lt;p&gt;Or, you can use an alternative package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Chocolatey&lt;/td&gt;&lt;code&gt;choco install zoxide&lt;/code&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;Scoop&lt;/td&gt;&lt;code&gt;scoop install zoxide&lt;/code&gt;&lt;p&gt;If you're using Cygwin, Git Bash, or MSYS2, you can also use the install script:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;head&gt;BSD&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Distribution&lt;/th&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;DragonFly BSD&lt;/td&gt;&lt;td&gt;DPorts&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;td&gt;FreeBSD&lt;/td&gt;&lt;td&gt;FreshPorts&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;td&gt;NetBSD&lt;/td&gt;&lt;td&gt;pkgsrc&lt;/td&gt;&lt;code&gt;pkgin install zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash&lt;/code&gt;&lt;head&gt;Android&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Termux&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Setup zoxide on your shell&lt;/p&gt;&lt;p&gt;To start using zoxide, add it to your shell.&lt;/p&gt;&lt;head&gt;Bash&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;quote&gt;eval "$(zoxide init bash)"&lt;/quote&gt;&lt;head&gt;Elvish&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.elvish/rc.elv&lt;/code&gt;):&lt;quote&gt;eval (zoxide init elvish | slurp)&lt;/quote&gt;&lt;p&gt;Note zoxide only supports elvish v0.18.0 and above.&lt;/p&gt;&lt;head&gt;Fish&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):&lt;quote&gt;zoxide init fish | source&lt;/quote&gt;&lt;head&gt;Nushell&lt;/head&gt;&lt;p&gt;Add this to the end of your env file (find it by running&lt;/p&gt;&lt;code&gt;$nu.env-path&lt;/code&gt;in Nushell):&lt;quote&gt;zoxide init nushell | save -f ~/.zoxide.nu&lt;/quote&gt;&lt;p&gt;Now, add this to the end of your config file (find it by running&lt;/p&gt;&lt;code&gt;$nu.config-path&lt;/code&gt;in Nushell):&lt;quote&gt;source ~/.zoxide.nu&lt;/quote&gt;&lt;p&gt;Note zoxide only supports Nushell v0.89.0+.&lt;/p&gt;&lt;head&gt;PowerShell&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (find it by running&lt;/p&gt;&lt;code&gt;echo $profile&lt;/code&gt;in PowerShell):&lt;quote&gt;Invoke-Expression (&amp;amp; { (zoxide init powershell | Out-String) })&lt;/quote&gt;&lt;head&gt;Tcsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.tcshrc&lt;/code&gt;):&lt;quote&gt;zoxide init tcsh &amp;gt; ~/.zoxide.tcsh source ~/.zoxide.tcsh&lt;/quote&gt;&lt;head&gt;Xonsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.xonshrc&lt;/code&gt;):&lt;quote&gt;execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')&lt;/quote&gt;&lt;head&gt;Zsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.zshrc&lt;/code&gt;):&lt;quote&gt;eval "$(zoxide init zsh)"&lt;/quote&gt;&lt;p&gt;For completions to work, the above line must be added after&lt;/p&gt;&lt;code&gt;compinit&lt;/code&gt;is called. You may have to rebuild your completions cache by running&lt;code&gt;rm ~/.zcompdump*; compinit&lt;/code&gt;.&lt;head&gt;Any POSIX shell&lt;/head&gt;&lt;p&gt;Add this to the end of your config file:&lt;/p&gt;&lt;quote&gt;eval "$(zoxide init posix --hook prompt)"&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Install fzf (optional)&lt;/p&gt;
        &lt;p&gt;fzf is a command-line fuzzy finder, used by zoxide for completions / interactive selection. It can be installed from here.&lt;/p&gt;
        &lt;p&gt;Note The minimum supported fzf version is v0.51.0.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Import your data (optional)&lt;/p&gt;&lt;p&gt;If you currently use any of these plugins, you may want to import your data into zoxide:&lt;/p&gt;&lt;head&gt;autojump&lt;/head&gt;&lt;p&gt;Run this command in your terminal:&lt;/p&gt;&lt;code&gt;zoxide import --from=autojump "/path/to/autojump/db"&lt;/code&gt;&lt;p&gt;The path usually varies according to your system:&lt;/p&gt;&lt;th&gt;OS&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;&lt;td&gt;Linux&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME/autojump/autojump.txt&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;code&gt;/home/alice/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;td&gt;macOS&lt;/td&gt;&lt;code&gt;$HOME/Library/autojump/autojump.txt&lt;/code&gt;&lt;code&gt;/Users/Alice/Library/autojump/autojump.txt&lt;/code&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;code&gt;%APPDATA%\autojump\autojump.txt&lt;/code&gt;&lt;code&gt;C:\Users\Alice\AppData\Roaming\autojump\autojump.txt&lt;/code&gt;&lt;head&gt;fasd, z, z.lua, zsh-z&lt;/head&gt;&lt;p&gt;Run this command in your terminal:&lt;/p&gt;&lt;code&gt;zoxide import --from=z "path/to/z/db"&lt;/code&gt;&lt;p&gt;The path usually varies according to your system:&lt;/p&gt;&lt;th&gt;Plugin&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;td&gt;fasd&lt;/td&gt;&lt;code&gt;$_FASD_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.fasd&lt;/code&gt;&lt;td&gt;z (bash/zsh)&lt;/td&gt;&lt;code&gt;$_Z_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.z&lt;/code&gt;&lt;td&gt;z (fish)&lt;/td&gt;&lt;code&gt;$Z_DATA&lt;/code&gt;or&lt;code&gt;$XDG_DATA_HOME/z/data&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/z/data&lt;/code&gt;&lt;td&gt;z.lua (bash/zsh)&lt;/td&gt;&lt;code&gt;$_ZL_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.zlua&lt;/code&gt;&lt;td&gt;z.lua (fish)&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME/zlua/zlua.txt&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/zlua/zlua.txt&lt;/code&gt;or&lt;code&gt;$_ZL_DATA&lt;/code&gt;&lt;td&gt;zsh-z&lt;/td&gt;&lt;code&gt;$ZSHZ_DATA&lt;/code&gt;or&lt;code&gt;$_Z_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.z&lt;/code&gt;&lt;head&gt;ZLocation&lt;/head&gt;&lt;p&gt;Run this command in PowerShell:&lt;/p&gt;&lt;quote&gt;$db = New-TemporaryFile (Get-ZLocation).GetEnumerator() | ForEach-Object { Write-Output ($_.Name+'|'+$_.Value+'|0') } | Out-File $db zoxide import --from=z $db&lt;/quote&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When calling &lt;code&gt;zoxide init&lt;/code&gt;, the following flags are available:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;--cmd&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Changes the prefix of the &lt;code&gt;z&lt;/code&gt;and&lt;code&gt;zi&lt;/code&gt;commands.&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;--cmd j&lt;/code&gt;would change the commands to (&lt;code&gt;j&lt;/code&gt;,&lt;code&gt;ji&lt;/code&gt;).&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;--cmd cd&lt;/code&gt;would replace the&lt;code&gt;cd&lt;/code&gt;command.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;Changes the prefix of the &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;--hook &amp;lt;HOOK&amp;gt;&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;p&gt;Changes how often zoxide increments a directory's score:&lt;/p&gt;&lt;th&gt;Hook&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;code&gt;none&lt;/code&gt;&lt;td&gt;Never&lt;/td&gt;&lt;code&gt;prompt&lt;/code&gt;&lt;td&gt;At every shell prompt&lt;/td&gt;&lt;code&gt;pwd&lt;/code&gt;(default)&lt;td&gt;Whenever the directory is changed&lt;/td&gt;&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;--no-cmd&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Prevents zoxide from defining the &lt;code&gt;z&lt;/code&gt;and&lt;code&gt;zi&lt;/code&gt;commands.&lt;/item&gt;
          &lt;item&gt;These functions will still be available in your shell as &lt;code&gt;__zoxide_z&lt;/code&gt;and&lt;code&gt;__zoxide_zi&lt;/code&gt;, should you choose to redefine them.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;Prevents zoxide from defining the &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Environment variables2 can be used for configuration. They must be set before &lt;code&gt;zoxide init&lt;/code&gt; is called.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_DATA_DIR&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Specifies the directory in which the database is stored.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;&lt;p&gt;The default value varies across OSes:&lt;/p&gt;&lt;th&gt;OS&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;&lt;td&gt;Linux / BSD&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt;or&lt;code&gt;$HOME/.local/share&lt;/code&gt;&lt;code&gt;/home/alice/.local/share&lt;/code&gt;&lt;td&gt;macOS&lt;/td&gt;&lt;code&gt;$HOME/Library/Application Support&lt;/code&gt;&lt;code&gt;/Users/Alice/Library/Application Support&lt;/code&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;code&gt;%LOCALAPPDATA%&lt;/code&gt;&lt;code&gt;C:\Users\Alice\AppData\Local&lt;/code&gt;&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_ECHO&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;When set to 1, &lt;code&gt;z&lt;/code&gt;will print the matched directory before navigating to it.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;When set to 1, &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_EXCLUDE_DIRS&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Excludes the specified directories from the database.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;This is provided as a list of globs, separated by OS-specific characters:&lt;/p&gt;
            &lt;th&gt;OS&lt;/th&gt;
            &lt;th&gt;Separator&lt;/th&gt;
            &lt;th&gt;Example&lt;/th&gt;
            &lt;td&gt;Linux / macOS / BSD&lt;/td&gt;
            &lt;code&gt;:&lt;/code&gt;
            &lt;code&gt;$HOME:$HOME/private/*&lt;/code&gt;
            &lt;td&gt;Windows&lt;/td&gt;
            &lt;code&gt;;&lt;/code&gt;
            &lt;code&gt;$HOME;$HOME/private/*&lt;/code&gt;
          &lt;/item&gt;
          &lt;item&gt;&lt;p&gt;By default, this is set to&lt;/p&gt;&lt;code&gt;"$HOME"&lt;/code&gt;.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_FZF_OPTS&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_MAXAGE&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Configures the aging algorithm, which limits the maximum number of entries in the database.&lt;/item&gt;
          &lt;item&gt;By default, this is set to 10000.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_RESOLVE_SYMLINKS&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;When set to 1, &lt;code&gt;z&lt;/code&gt;will resolve symlinks before adding directories to the database.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;When set to 1, &lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Application&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Plugin&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;aerc&lt;/cell&gt;
        &lt;cell&gt;Email client&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;alfred&lt;/cell&gt;
        &lt;cell&gt;macOS launcher&lt;/cell&gt;
        &lt;cell&gt;alfred-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;clink&lt;/cell&gt;
        &lt;cell&gt;Improved cmd.exe for Windows&lt;/cell&gt;
        &lt;cell&gt;clink-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;emacs&lt;/cell&gt;
        &lt;cell&gt;Text editor&lt;/cell&gt;
        &lt;cell&gt;zoxide.el&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;felix&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;joshuto&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;lf&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;See the wiki&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;nnn&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;nnn-autojump&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;ranger&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;ranger-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;raycast&lt;/cell&gt;
        &lt;cell&gt;macOS launcher&lt;/cell&gt;
        &lt;cell&gt;raycast-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;rfm&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;sesh&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;telescope.nvim&lt;/cell&gt;
        &lt;cell&gt;Fuzzy finder for Neovim&lt;/cell&gt;
        &lt;cell&gt;telescope-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;tmux-session-wizard&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;tmux-sessionx&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;vim / neovim&lt;/cell&gt;
        &lt;cell&gt;Text editor&lt;/cell&gt;
        &lt;cell&gt;zoxide.vim&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;xplr&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;zoxide.xplr&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;xxh&lt;/cell&gt;
        &lt;cell&gt;Transports shell configuration over SSH&lt;/cell&gt;
        &lt;cell&gt;xxh-plugin-prerun-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;yazi&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;zabb&lt;/cell&gt;
        &lt;cell&gt;Finds the shortest possible query for a path&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;zesh&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;zellij&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;zsh-autocomplete&lt;/cell&gt;
        &lt;cell&gt;Realtime completions for zsh&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/ajeetdsouza/zoxide"/><published>2025-09-23T04:48:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45343108</id><title>Delete FROM users WHERE location = 'Iran';</title><updated>2025-09-23T13:43:12.198380+00:00</updated><content>&lt;doc fingerprint="ee1198109d4361d8"&gt;
  &lt;main&gt;
    &lt;p&gt;Hi! I am an Iranian Software Engineer, and in this torn paper note, I want to talk about some funny moments I had online related to the fact that I was spawned in this specific region of the world: Iran.&lt;/p&gt;
    &lt;p&gt;Back when I was a student, I got access to the Microsoft Imagine, and as a result, I got access to the Microsoft Store as a developer. This inspired me write one of my open-source projects called EyesGuard and publish it on Microsoft Store. However, one day, somebody told me that they can no longer find EyesGuard on the store.&lt;/p&gt;
    &lt;p&gt;I came to the realization that Microsoft deleted my app, my developer account, and all those comments on my app supporting me and suggesting ideas on how to improve the program. I tried to contact the support and email whoever I could, but I was ghosted. Nobody ever explained to me why, but I assume it's because of the sanctions.&lt;/p&gt;
    &lt;p&gt;Notion is a great product, and it was the primary tool I used to manage my personal notes. Not until they suddenly decided to wipe out every data related to the users residing in Iran. Hopefully, they actually responded to my support message:&lt;/p&gt;
    &lt;p&gt;It was because of sanctions. However, they told me that they will not restore the data, even if I leave Iran someday:&lt;/p&gt;
    &lt;p&gt;That said, I am very happy with my own self-hosted Siyuan now.&lt;/p&gt;
    &lt;p&gt;I read hackernews on a daily basis and I visit lots of different websites regularly. I am almost always on my VPN as I am internally firewalled by the government and externally shooed because of the sanctions, so I am probably missing some of these heart-warming messages:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Iranian IPs are blocked here, due to your decision to arm Russia with drones so that they can indiscriminately massacre civilians.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;My VPN turned off, and opening https://www.grepular.com showed me this message. I actually do not blame the people who do this. I think there is a fundamental misconception that people think because "Islamic Republic" has the word "Republic" in it, it must be a government of people in charge. That's not the case. I have yet to see anyone who actually supports Russian aggression in my real life in Iran. Funny enough, Iran's history is full of backstabs by the Russian government.&lt;/p&gt;
    &lt;p&gt;I tried contacting the author by sending this email:&lt;/p&gt;
    &lt;code&gt;Hi Mark,

I hope this message finds you well.

While browsing HackerNews, I came across your website but was greeted with this message:

&amp;gt; Iranian IPs are blocked here, due to your decision to arm Russia with drones so that they can indiscriminately massacre civilians.

I wanted to clarify that the decision to support Russia does not represent the Iranian people. That "your decision" refers to the regime, a theocratic minority that rules Iran without democratic legitimacy. The people of Iran have long protested and revolted against this regime, but unfortunately, they face brutal suppression while unarmed.

In my experience, most Iranians around me, including myself, stand firmly with Ukraine and against Russian aggression.

I’m not asking you to reconsider the IP restriction, you have your reasons and I respect that. I simply wanted to share this perspective and express my solidarity with Ukraine.

Slava Ukraini!

Best regards,
Avestura
&lt;/code&gt;
    &lt;p&gt;I got no replies from them, and I actually didn't expect one.&lt;/p&gt;
    &lt;p&gt;I woke up to the news that GitHub has removed the access of Iranians to their private repositories. Well, that was not good. I tried to launch my own self-hosted instance of Gitea to reduce the damage. However, later, GitHub announced that github is now available in Iran by securing a license from the US government, and we're now good. You see? The weather is good, the birds are singing, GitHub is free again. Fantastic!&lt;/p&gt;
    &lt;p&gt;Similarly, GitLab banned every account that once accessed from an Iranian IP, however, to this day, they never lifted the ban, even on public repositories. I guess they couldn't secure a license from the US government, or they simply never cared. Good luck to them in either case, though. GitLab is an amazing software. One can always self-host it.&lt;/p&gt;
    &lt;p&gt;The list goes on, and almost all of the services you probabelly heard of is banned here: Cloud platforms (AWS, GCP, Azure, ...), Educational platforms (coursera, udemy, etc), Payment software (stripe, paypal, ...).&lt;/p&gt;
    &lt;p&gt;I don't think any of these companies have bad intentions towards any group of people. They are a business after all. They don't hate their customers; they are just playing the game, and the game has such rules. But if someday some law or government forces me to prevent my services from a group, I'll think twice before writing those &lt;code&gt;if&lt;/code&gt; statements. I'll try to have more empathy. People behind those screens are more important than just some rows in my tables.&lt;/p&gt;
    &lt;p&gt;Important&lt;/p&gt;
    &lt;p&gt;In this text, I am NOT asking for the removal of the sanctions targeted at the Islamic Republic of Iran. I am merely remembering some moments on top of my head. For the record, I do not support the actions of the Islamic Republic, and on the contrary, I am in favor of the movements that release the people from such a mafia-like cult ruling a country with thousands of years of history. The actions of the group in charge of Iran are not defensible, and as a matter of fact, the people of Iran are the first layer of victims. Some examples are listed here. I especially feel it differently, as regime thugs put a gun to the throat of a dear person to me, and threatened to kill him if he showed up in protests.&lt;/p&gt;
    &lt;p&gt;By the way, did you know you could return &lt;code&gt;451 Unavailable For Legal Reasons&lt;/code&gt; instead of &lt;code&gt;403 Forbidden&lt;/code&gt; when you're going to ban me next time?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://gist.github.com/avestura/ce2aa6e55dad783b1aba946161d5fef4"/><published>2025-09-23T05:30:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45343449</id><title>Altoids by the Fistful</title><updated>2025-09-23T13:43:11.895394+00:00</updated><content>&lt;doc fingerprint="67519077dbe58b9f"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Altoids by the Fistful&lt;/head&gt;&lt;p&gt;“Wh— what did you say?”&lt;/p&gt;&lt;p&gt;It’s close to six o’clock on a weekday afternoon and the bar is starting to get noisy with the after-work crowd. It’s entirely possible I misheard that last part.&lt;/p&gt;&lt;p&gt;“Altoids! I find the spearmint works a little better overall, but recently I’ve started switching flavors depending on the situation.”&lt;/p&gt;&lt;p&gt;I’ve worked with James—“Jim” as everyone on the team knows him—for a little over two years and I’m used to this dance now. He gets a kind of tunnel vision in his excitement about whatever shiny new thing has captured his attention. It’s usually pretty easy to shake him out of it.&lt;/p&gt;&lt;p&gt;“No, Jim, the part before that.”&lt;/p&gt;&lt;p&gt;He looks at me for a moment, inquisitive, before pushing his beer aside. “Here, let me show you.” He reaches underneath the table and produces his beige-on-brown Timbuk2 messenger bag. There is a small wet spot left behind from his drink, and the bag plops right onto it. I watch as one of his stubby hands unbuckles the outermost pouch while the other one pulls out a small green and white tin. I am obviously intended to see this as clearly as possible, evidenced by the way he places it front and center between us.&lt;/p&gt;&lt;p&gt;“Regular everyday Altoids, right? You take about four of them, maybe five.” He flips the lid open and traps the requisite number of small white mints between his fingertips, which he then pops into his mouth. “This is the trick; you gotta half-chew it first.” At least two tiny shards fly in my direction as he speaks these words. It is like listening to a slow K-turn executed on a road covered in gravel and seashells. Three more slow and deliberate chomps, then his bite eases. “Mmm.” The communication style switches to mime: an index finger raised in a “one moment” gesture, followed by an exaggerated point downwards while unzipping the main pouch of the bag. It takes a few seconds of rooting around before the star of this particular show is found.&lt;/p&gt;&lt;p&gt;My eyes barely have enough time to resolve the object under the dismal light at this end of the bar before it’s in his mouth. He’s chewing the full concoction now—mouth closed, thank God. The crunching softens, then fades into the din from a nearby table of sales bros laughing at their sales bro anecdote. Jim is looking at me with a kind of confident smugness I haven’t seen since I bet my buddy at Guitar Center that he couldn’t spontaneously play “Everlong” from memory. A bet I lost, I might add.&lt;/p&gt;&lt;p&gt;There is a degree of intentional spectacle to this, I’d have to imagine. Each jaw movement is deliberate. Precise. He does not break eye contact with me, though I desperately want to break it with him. I can’t though. The absurdity of the scene is absolutely hypnotizing. One final swallow, a smack of his lips, then he opens his mouth wide like a child proving that they finished all their vegetables and have earned their dessert. “Easy peasy, no problem.”&lt;/p&gt;&lt;p&gt;“That was&amp;amp;mldr;” It’s like a significant piece of my brain has just completely locked up. I’m just saying words without thinking, filling the empty air.&lt;/p&gt;&lt;p&gt;“A cat turd!” he proclaims, finishing my sentence.&lt;/p&gt;&lt;p&gt;A beat.&lt;/p&gt;&lt;p&gt;“You just ate a cat turd.” It’s all I can do in this moment to plainly restate the facts as I understand them, although the sense of alarm is definitely carrying in my voice.&lt;/p&gt;&lt;p&gt;“Yup, and it didn’t taste bad at all. The spearmint masks it completely. Watch, I’ll do another one.” My eyes widen in dread as I shake my head weakly. I didn’t want to see him do that the first time; I sure as shit don’t want to see it again.&lt;/p&gt;&lt;p&gt;“No, that’s alright,” I balk.&lt;/p&gt;&lt;p&gt;There is an awkward reach across the bag as he grabs his glass, tips it toward me in a silent toast, then takes a long swill. Whether he admits it or not, there’s evidently something that needs to be washed down. He lets out a contented sigh as the almost-empty glass thumps back down on the table. I glance down at the chicken wings and carrot sticks I had been picking at. A minute ago, they were kinda bland—merely okay by the standards of pub food. With the abrupt loss of my appetite, now they are destined for the dumpster out back.&lt;/p&gt;&lt;p&gt;He lifts the small tin of mints and gives it a little shake in front of my face. It sounds a lot more papery and a lot less metallic than I would’ve guessed. “Altoids. I’m not exaggerating when I say these have completely changed the way I work.” I follow this little miracle box as they get tucked back into the bag, the buckles snapping shut to shield them from the lustful gaze of an angry world. He pauses and looks up at me again. “Would you like to try?”&lt;/p&gt;&lt;p&gt;“No, Jim, I don’t want your cat turds.”&lt;/p&gt;&lt;p&gt;I don’t want your cat turds. Why did I say it like that? I don’t want anybody’s cat turds!&lt;/p&gt;&lt;p&gt;&amp;amp;mldr;Right?&lt;/p&gt;&lt;p&gt;“Completely changed the way I work,” he repeats mechanically, sliding his bag onto the empty seat to his left. I’m finding it quite difficult to look at Jim, so I instead follow the motions of the bag until it is completely out of my view. How many more are in there?&lt;/p&gt;&lt;p&gt;“I used to spend so much of my day on cat turds, psyching myself up, trying strategies that didn’t work, all the cleanup when I was finished. That’s all gone now. I can never go back to the old way.”&lt;/p&gt;&lt;p&gt;“I just&amp;amp;mldr; I mean&amp;amp;mldr;” My brain has started working again, at least superficially, and it has generated so many questions that I’m having a hard time selecting which one to ask first. “How long have you been eating cat turds?” A fine question for this moment, I suppose.&lt;/p&gt;&lt;p&gt;“What do you mean? I’ve always had to eat cat turds. Since I was a kid in school, on through college, in all my jobs&amp;amp;mldr; They keep giving me cat turds and I keep having to eat them, otherwise it starts to pile up and then things really get messy.”&lt;/p&gt;&lt;p&gt;His face turns slightly serious as he parses my expression, his head tilting in suspicion. “You eat cat turds too, yeah?” I choose not to answer that question. He continues anyway. “Sure. We all do. We have to, ya know?”&lt;/p&gt;&lt;p&gt;We all do.&lt;/p&gt;&lt;p&gt;Those words have been repeating in my head with the consistency of a drumline cadence. We all do.&lt;/p&gt;&lt;p&gt;“Walk sign is on to cross Pawk Avenue. Walk sign is on to cross Pawk Avenue.” I’ve heard this prerecorded voice, clearly belonging to the most disgruntled DOT Traffic Signals employee available at the time of this crosswalk’s construction, at least twice per workday for the last two years. It stirs up a half-remembered dream of a career spent shoveling dirt into a hole—something that feels more like the idea of “honest work” than what I get paid to do every day. I bet nobody on the construction crew spent an entire workday fighting around with brittle, poorly designed automation tooling like I did today.&lt;/p&gt;&lt;p&gt;I’m quickly but unintentionally refilling my conscious mind with the task I had gleefully abandoned when Jim invited me out to after-work drinks. Normally I’d be irritated to spend more of my waking life thinking about this stuff, but after what I witnessed at the bar I welcome any distraction at all.&lt;/p&gt;&lt;p&gt;“Okay. So, usually we have a string. This is one of many values inside a mapping type, within a list of similar mappings.” I’m narrating to myself silently, imagining little bits of JSON syntax stamped on rectangles that are kind of stacked on top of each other like playing cards. “But ever since the schema change in V3, sometimes the value is another mapping type that wraps the string we want&amp;amp;mldr;” I’m visualizing another square to the right of the existing one. This one is yellow, distinct from the light blue of all the others, and it never occurs to me to question why that is.&lt;/p&gt;&lt;p&gt;“But because this is actually YAML, and the value comes from a template call, both the string form and the mapping form need to be escaped and indented in a way that works in both cases.” I’m chewing on the problem in pretty much the same mindset I had during work, only now I’m walking across midtown instead of staring at a computer screen. “We could just revert that change, keep the value as JSON like it used to be and insert it verbatim&amp;amp;mldr; but DevEx owns that part and I wouldn’t want to have to fight to get that PR approved.”&lt;/p&gt;&lt;p&gt;“Piece of shit.” I speak that bit out loud without really intending to. I snap back into awareness of my surroundings and look around. Nobody was near enough to hear it. They probably wouldn’t have cared if they were.&lt;/p&gt;&lt;p&gt;It occurs to me that, whenever anybody asks me what I do for a living and I wave my hand and say “Computers,” this is what I’m trying to avoid needing to have to explain. None of these words are being used in a way that would mean anything to most people. If one were to take the time to carefully define them all and how they fit together semantically, they describe concepts so abstract and detached from any kind of tangible shared experience that you’d hit a second wall trying to explain that.&lt;/p&gt;&lt;p&gt;“Oh, but wait, we have the &lt;code&gt;nindent&lt;/code&gt; function. I could just count up the indentation level of the outer list and&amp;amp;mldr; Ah, hell, I forgot this template is transcluded into pod and deployment specs and the nesting levels would be different between the two.” I briefly try to think of which chucklefuck I could blame this design on, but truth be told I rubber-stamped enough questionable pull requests in my time here that a fair amount of this situation is a mess of my own damn making.&lt;/p&gt;&lt;p&gt;Huh. I really do wonder what I would sound like trying to explain this to somebody who had no experience in the industry. I suppose if I was very excited about it, I might come across like an energetic kid going on and on about all the different Pokémon they know about and all the special attacks and vulnerabilities. But without that spark of passion, and in its place a jaded voice tinged with frustration and contempt, I would probably just sound like a raving lunatic. These words don’t mean anything. I’m not describing something that actually exists. I’m playing the part of an observer in a universe of little floating boxes, becoming physically agitated about a superficial difference within the yellow one, and none of it is real.&lt;/p&gt;&lt;p&gt;I’m definitely not feeling the passion on this one. This code runs deep inside a build-deploy pipeline that I have no hope of ever running directly on the computer I’m using. So I write the code, push it to CI, wait for a bunch of stuff I’m not interested in to finish running, then get to watch my change fail to work for either the stupidest typo that I never should’ve made in the first place, or due to some error that is so novel that even the search engines assume I must really be having some other much more popular error instead of the one I provided. It feels like I am performing surgery using a scalpel held by a boardwalk arcade claw machine, complete with the constant squawking and shitting of project management seagulls.&lt;/p&gt;&lt;p&gt;And even if I could concisely explain all of that to my hypothetical interlocutor, there’s the even higher-level question: Why? Why did we even make this change? What was so irredeemably wrong with the last two versions of this thing that we’re now doing it all again a third time? What exactly is the goal we’re trying to achieve here? I can’t really say. It’s a question I never asked, partly because I learned a long time ago that asking questions just causes friction. Just nod and shut up. Put a +1 on a sketchy PR and get it out of here. Don’t hold up the pipeline. Recover enough stamina to face down the next eldritch nightmare that slithers its way to the top of my Jira swimlane. “Sounds great, thanks.” Thumbs-up. Grit my teeth through to the next direct deposit, convince myself it’s not so bad. Do it over and over until some ill-defined end condition is met. I’ll know it when I see it. I hope.&lt;/p&gt;&lt;p&gt;I catch myself at the tail end of a sigh. I fake like I’m yawning to stretch my upper body for a second. Approximately every muscle in my back now aches.&lt;/p&gt;&lt;p&gt;There’s this very real sense that I don’t&amp;amp;mldr; I don’t want to solve this problem. There is no intellectual reward at the end of this journey. It’s not interesting to me. This isn’t something that needs to be fixed, because it’s not a situation that ever should’ve been permitted to happen in the first place. This is just a bunch of contrived nonsense that I must work through because the broader situation dictates it. It doesn’t matter if the solution is good or elegant. It doesn’t matter if it barely works. It doesn’t matter if it causes another problem that I stub my toe on in three weeks. It’s just&amp;amp;mldr; what I have to do.&lt;/p&gt;&lt;p&gt;I stop in my tracks.&lt;/p&gt;&lt;p&gt;These kinds of problems are my cat turds.&lt;/p&gt;&lt;p&gt;Unlike Jim, though, I can’t just cram a bunch of breath mints into my face to make this go away.&lt;/p&gt;&lt;p&gt;The “down” escalator into the train station is out of service, and it has been this way all summer. A pair of orange plastic barricades block the landings at both ends. I walk down two flights of stairs alongside a half-dozen other commuters. Having concluded that the template problem simply isn’t worth thinking any further about, I’m back on the cat turds. I understand what Jim was talking about now. This has been happening for almost my entire life, even going back to my days in elementary school.&lt;/p&gt;&lt;p&gt;All of the homework assignments that were blindly graded against answer keys from the back of a Teacher Edition of the textbook: Cat turds. College admission essays where I profused a longing desire to attend the distinguished universities that my parents and guidance counselor told me I should set my ambitions toward: Cat turds. Probably hundreds of cover letters submitted alongside job applications throughout the years, skimmed by perhaps tens of internal recruiters and hiring managers: Cat turds.&lt;/p&gt;&lt;p&gt;The notion that it was a good idea to manipulate highly whitespace-sensitive YAML data with the Go &lt;code&gt;text/template&lt;/code&gt; package. CI workflows that take 75 minutes to reach the one step in the entire process that fails. Tools and interfaces that force-update and introduce breaking changes for seemingly no justifiable reason, removing or kneecapping features that were being relied on, with issue trackers guarded by thickheaded bots that dismissively auto-close feature requests that kindly ask for consideration for those use cases. Massively over-complicated software that tries to be everything to everybody, but in reality ends up being a gigantic lumbering pile of failure and frustration. Cat turds.&lt;/p&gt;&lt;p&gt;I used to love this stuff. I still do. Except&amp;amp;mldr; I don’t. Not lately, anyway. A long time ago, this was unquestionably what I wanted to do with my life. I would stay up late, pushing back my bedtime for a few more minutes with these glorious machines, hacking away on some little project. Then I’d get up early the following morning, excited to jump back into the project before my day out in the world began. I don’t even clearly remember what I was building toward, but I know it had basically zero utility or market potential. The point of doing the project was simply to do the project—to press through problems, to learn new things, and to end the day with more skills and experience than I started with.&lt;/p&gt;&lt;p&gt;At one point, I had the 7-bit ASCII table memorized. Just the decimal codes; I didn’t really understand the usefulness of the hexadecimal representations, and it never occurred to me that the hex values would work much better in mnemonics. I don’t know why I took the time to learn that. I never really used that knowledge in any real day-to-day work, and it began to fade from my mind as soon as I found some other pointless esoterica to wallpaper over it.&lt;/p&gt;&lt;p&gt;Look at me now, having to Google how to read a text file line-by-line in Python despite having done it a hundred times at this point. The knowledge is up there somewhere, I’m sure of it. I just can’t always think of the idiom in the heat of the moment. Just a little hint to jog the old brain, that’s all I need.&lt;/p&gt;&lt;p&gt;I often wonder what my Younger Self would think of me now, failing to remember a two-line snippet of code that you’d find in the first ten pages of any beginner’s guide to the language. He’d probably sneer and say I need to devote more time to studying. But I’m an adult with things to do; I can’t spend all my time just memorizing things just in case I might need the information someday. Oh, and by the way: Younger Self, if you were such a friggin’ hotshot, why did it take you fifteen years to finally wrap your head around regular expressions? What’s that? Because they were hard? So you spent all your time memorizing easy and pointless trivia rather than tackling anything that was genuinely challenging? And then building up a whole air of superiority based on the number of discrete facts you could rattle off, rather than their practical utility? What, were you trying to become a contestant on Computer Jeopardy! or something?&lt;/p&gt;&lt;p&gt;No wonder Younger Self grew up to be kind of an asshole.&lt;/p&gt;&lt;p&gt;I mean, I didn’t try to be an asshole. It’s just that I tended to gauge my own self-worth relative to others based on the only social currency we could accurately compare: the amount of “stuff” we knew. Some people memorize car engine displacements, others carry in their noggins enough digits of pi to resolve the observable universe down to the width of a hydrogen atom. I had a litany of command-line switches that I never used for anything, HTML character entity names for writing systems I couldn’t comprehend, and tales of tweaking settings deep inside the Windows 98 Device Manager just so I could brag about having been in there in the first place. I also at one time sincerely believed that maybe if I taught myself to—I’m picking one example out of many—decode Code 39 barcodes in my head, it would somehow make me cool and desirable during otherwise awkward social functions. (I did get reasonably good at it. All it takes is memorizing a couple of three-digit sequences. Having a teenager’s near-field visual acuity certainly helped.)&lt;/p&gt;&lt;p&gt;Everybody else who didn’t know those little pieces of nothing? They were the lessers. They didn’t put in the time to grind for this knowledge. They had never scaled the peaks of Mount AltaVista, nor had they knelt in the temple of the MSDN Library for Visual Studio on a banged-up pair of CD-Rs. I knew things they did not, therefore I felt I was higher-and-mightier than they were. I and I alone suffered for this knowledge. This attitude manifested itself in one of two ways: In the first case, I would barge my way into situations where my involvement wasn’t needed or appreciated, thinking I could “save” others from the pain I once had to contend with. More often than not, though, I would simply mock people for not knowing things—usually inside my own head, but sometimes outwardly on mailing lists and message boards. There were times when I judged a person to have failed to put in the necessary amount of work, so therefore they did not deserve to rise anywhere near where I considered my own level to be. It didn’t matter if the subject was deeply technical or a disagreement on the precise phrasing of a Simpsons quote. Somebody got something wrong, and it was my job to rectify that.&lt;/p&gt;&lt;p&gt;I feel bad for the people who worked on teams where Younger Self was the senior engineer. I was full of ideals and convictions back then. “No, we’re not doing that. We’re going to Do It Right instead.” I was full of piss and vinegar. “Here, give me that; I’ll just do it myself.” I was full of shit.&lt;/p&gt;&lt;p&gt;I now realize that everything I lorded over other people—all the things I gatekept without consciously understanding that this was what I was doing—I didn’t need to do that. It really didn’t help anything. For some number of people who interacted with me, I was the problem. I could’ve been more tolerant or forgiving, I could’ve said “let’s find out together,” I could’ve let other people have the fun once in a while. I could have minded my own damn business and saved everybody the hassle.&lt;/p&gt;&lt;p&gt;There were people out there who must’ve felt that I was their cat turds.&lt;/p&gt;&lt;p&gt;I’ll never be able to track down and apologize to every person I treated that way. And why did I even build that fiefdom and protect it so jealously? Why was I so insecure? Why did I have to always be right and have a ready justification for why everybody else was wrong?&lt;/p&gt;&lt;p&gt;It was just me, alone in my tiny sandbox, safe and secure behind my towering fortress of cat turds.&lt;/p&gt;&lt;p&gt;My usual train, the one packed so full that some riders have to stand in the aisles until after the first or second stop, usually leaves at 5:50. Now about three hours later, one can sometimes get an entire car to themselves. I settle down in a window seat looking out at the desolate platform. Evidently there aren’t all that many people interested in traveling across the river at this hour on a Wednesday evening. It feels nice to sit, despite the fact that I’ve probably sat for a cumulative ten hours—at least—over the course of this day.&lt;/p&gt;&lt;p&gt;As sometimes happens, another rider boards the train and enters what had up to this point been my personal rail car. He selects the aisle seat in the row directly in front of me. At least 110 other seats in this car, every single one of them empty, and his choice is to sit right here. Sigh. I could get up and move to another seat but I’m&amp;amp;mldr; exhausted. I’m here, I’m settled in, and above all I’m just completely out of ambition. I guess it’s fine as long as he doesn’t start playing music or TikTok videos without headphones.&lt;/p&gt;&lt;p&gt;A long blow from the locomotive horn, and the train begins to creep forward. Right on schedule. We’re in a tunnel deep below the city’s west side, and the view out the window is pitch black aside from the occasional glow from a mercury-vapor emergency light. On the wall beneath each of these lights, patches of graffiti framed by concrete pillars. I wouldn’t say I’ve memorized them all by heart; I can’t even read the tags on the majority of them. But they are at least familiar, and I’ve found some of them serve as convenient signposts along this portion of the trip. I’m not really paying attention to any of them tonight, instead I’m staring blankly at a little patch of window glass as the scene rolls past.&lt;/p&gt;&lt;p&gt;I refocus my eyes a bit and realize I’m looking at the reflection of a screen, or at least the top corner of one. I turn away from the window and find the source of the light. The man in front of me has opened his laptop—a chunky Dell Latitude or something very close to it—and perched it on a small lap desk fashioned from his leather bag. He opens a web browser and logs into a Microsoft account, one key at a time, hunt-and-peck style. It prompts him for his second factor and he shifts awkwardly in the seat to retrieve his phone. The login process succeeds and, after a few clicks and a fair bit of both of our finite lifetimes spent staring at loading spinners, opens what appears to be a Word document. I can’t read anything on his screen, which is more a testament to how wrecked my eyes have become than anything else, but I can see that there’s about four, perhaps five lines of unformatted text up there already. He strokes his chin while giving it a good read-through, then his hands take their position on the trackpad. Right index finger moves the cursor, left index finger does the clicking. The screen flips to another browser tab, his left hand gratuitously double-clicks on the website suggested by the first tile on the screen, and the page loads.&lt;/p&gt;&lt;p&gt;I never learned to tell any of these sites apart from each other. I see lots of people using the one with the spirograph logo. The one that looks like a cartoon butthole is also quite popular among some departments at my job. This guy is using the one that’s represented by a symmetrical color blob. Not that one, the other color blob one. Yeah.&lt;/p&gt;&lt;p&gt;He has opened a chat session that has evidently been going for some time. The text entry box at the bottom of the window waits patiently for fresh input. Letter by agonizing letter, the keys needed to express his thoughts are pressed. The most-pressed key, however, is Backspace. This man is, using the most generous language possible, not a particularly fast or accurate typist. In total, he enters about ten words before pressing Enter. A short moment later, the machine responds. Entire sentences appear in the time it took him to type a single word. Multiple paragraphs with subheadings and bulleted lists scroll into view. The screen fills completely with this fresh text. He looks at this for a moment, moves his hands back to the trackpad, and selects a complete paragraph. His finger presses down with immense force as he drags the selection area ever wider, as if his catch is in danger of wriggling through his fingers if he doesn’t hold the button down hard enough. He flips back to his Word document and pastes the paragraph. Then back to the chat window. He begins typing again. Slowly. Excruciatingly.&lt;/p&gt;&lt;p&gt;This cycle repeats several times, incrementally building his document up to four or five double-spaced pages in length. It’s not exactly a fast process, but certainly faster than if he had thought up and typed out all that content the old-fashioned way. It’s certainly plausible that he at least read everything that went into the document, but I wouldn’t be able to prove it.&lt;/p&gt;&lt;p&gt;He selects another piece of text, this one substantially smaller than the other specimens that he’d been handling up until this point. This one is pasted into a discussion thread on Teams. He waits a moment for responses, closes the lid, and the laptop goes back into his bag. The man stands up, wraps the strap over his shoulder, and walks to the front of the car as the train brakes to a full stop. This is where our paths diverge, it would seem. The doors open and he steps out into the night.&lt;/p&gt;&lt;p&gt;Alone in the train car again, with nothing interesting to eavesdrop on, my mind begins to wander again. I wonder what the purpose of that document was. Why was it being prepared? Who dictated that a half-dozen input phrases needed to be inflated into a thousand-word wall of text? Who was going to sit and read all of that, anyway? And for what purpose?&lt;/p&gt;&lt;p&gt;I really don’t know. But I do know one thing: It’s cat turds.&lt;/p&gt;&lt;p&gt;This guy obviously didn’t want to do that task. Whether that was due to lack of passion and interest, or lack of skill and ability, he had a cat turd to eat and he found a little pack of Altoids that he could use to get through it with minimal suffering. The people who have to read it? There’s a good chance they’ll be dealing with a cat turd too. Maybe they can choose to employ a chatbot to summarize it back down to his original inputs. Maybe it’ll even do a passable job preserving the essence of the guy’s prompts.&lt;/p&gt;&lt;p&gt;It makes sense why a person or group of people would flock to anything that makes life’s demands a little less difficult for themselves. You’d have to be pretty dumb to want to do a task like that manually.&lt;/p&gt;&lt;p&gt;There’s still the question, though. Why are we all eating cat turds? When did we all collectively agree that we were all a-okay with the idea that we had to subject ourselves to this constant grind of doing shit that doesn’t really need to be done to satisfy requirements that were put in place simply “because” and that seemingly only create more pointless work for other people (or ourselves!) to have to do later?&lt;/p&gt;&lt;p&gt;One of the defining characteristics of humanity is its ability to build and wield tools that make difficult tasks easier. One would presume there would also be a certain wisdom in knowing which of the difficult tasks were worth doing in the first place but&amp;amp;mldr; Well. When you presume, you make a pres out of u and me.&lt;/p&gt;&lt;p&gt;If I had known ahead of time that I’d be out this late, I would’ve brought a jacket. The early autumn air is calm but crisp, and my borough’s train platform offers very little protection from the chill. The crickets are still chirping, but their song has slowed substantially compared to how they sounded a few weeks back. I stopped parking at the station a long time ago—the monthly pass costs well over $150 now, and most days the parking lot is completely full before six o’clock in the morning anyway. It’s only a mile to the house, and this twenty-minute walk is pretty much the only exercise I get nowadays.&lt;/p&gt;&lt;p&gt;Once I cross the main boulevard at the four-way stop, it’s all suburban residential side streets. There is basically no traffic at this time of night in my sleepy little bedroom community. All the dogs have been walked, the kids have been put to bed, and the adults&amp;amp;mldr; Well, I’m sure there are at least a couple people around here drinking or smoking the memory of their cat turds away.&lt;/p&gt;&lt;p&gt;I’m no closer to anything resembling inner peace. I find I’ve grown to despise large swaths of the only thing I’ve ever been able to earn reliable income from. I tire of walking a path that has seemingly shifted beneath my feet to point toward a destination I no longer recognize. I’m embarrassed by the jerk my Younger Self used to be, and simultaneously ashamed of the energy I lost as I matured. I don’t really want to do most of what I have to do, while feeling a deep unsated need to achieve something that I have neither the stamina nor the freedom to pursue. At some point I’m going to reach down deep into the well of ambition to discover there ain’t nothing there to pull out anymore. And then?&lt;/p&gt;&lt;p&gt;Something percent of success is simply showing up. That’s roughly how the quote goes, right? I’ve heard seventy percent, ninety percent, hell, let’s call it seventy-eight. It doesn’t matter because it isn’t a real thing that can be measured in any objective way. The idea is to inspire people to at least try. Put your butt in the chair, log into Teams, trick yourself into thinking, well, I made it all the way here, might as well prune my stale Git branches or something so I can feel like I’m doing real work. Push aside distractions, shake off procrastination, kindle that tiny spark into enough momentum to break through whatever barrier is standing in the way of getting something done. If only that worked with any degree of predictability.&lt;/p&gt;&lt;p&gt;There’s a metaphor that talks about painting the backs of cabinets. The idea is that, when you’re putting paint, stain, varnish, whatever on some cabinets, there’s no need to paint the surfaces that face toward the wall. From the day the units are mounted, to a day forty years from now when they are ripped down and thrown into a construction dumpster during a subsequent kitchen renovation, nobody will see the backs of any of those cabinets. Painting them would be a waste of time and materials. Nobody would know if it was done or not.&lt;/p&gt;&lt;p&gt;“Yes, but I would know.” That’s something my Dad would often say. His tendency has always been to be overly thorough, exacting and precise in any craft he partakes in. Everything—from the doors in the house to the stripes cut into the front lawn—was always level, plumb, square, centered, polished, dust-free, squeak-free, fingerprint-free&amp;amp;mldr; He even demonstrated meticulous care in breaking down cardboard and filling up the waste bins at the curb. I still have no idea how he was able to raise two kids in that house without exploding from the chaos we brought.&lt;/p&gt;&lt;p&gt;Maybe it was genetic, or maybe I voluntarily developed it so my dad would be proud of me just like he was proud of the other things he made. Either way, I definitely started to take after him in those ways and I now recognize this same kind of care in myself all the time. Not just in the way I prefer all my clocks to read the exact correct time or my knack for always noticing the way the receptacle face isn’t exactly flush with the wall plate&amp;amp;mldr; but in a fundamental inability to not care about quality or craft. Even when the task doesn’t matter. Even if it results in an entire afternoon spent painting a piece of carpentry that nobody will ever see. I can’t not care.&lt;/p&gt;&lt;p&gt;All that stuff Younger Self struggled with—the self-superiority, the sense that I had to be the one who did it if it needed to be done correctly, the derision and borderline abuse I gave others—that was all just a big dogmatic ball of caring a whole lot about quality and craft, being rolled around by a kid who didn’t understand what to do with it. I had to work so hard to care so much, and these other people didn’t, and everything worked out for them anyway, and that wasn’t fair. Decades later, I still feel that way sometimes.&lt;/p&gt;&lt;p&gt;My parents still live in that house, surrounded by all the things my dad cared so much about. Aside from a whole bunch of trees that died and needed to be cut down to stumps, everything is still pretty much pristine. But if you start to look around, really scrutinize, you’ll start to notice some things have slipped. There’s a film of dust on the higher wall decorations. Some of the brass knobs are becoming tarnished. A few of the light bulbs in the hallway fixtures don’t match. My dad seemed tired the last time we talked, and more than once he expressed the sentiment that “everything he owns is falling apart.” Is it simply the onset of physical old age that has limited his ability to stay on top of these things, or is he beginning to leave behind his era of caring?&lt;/p&gt;&lt;p&gt;Now that I think about it, I don’t think we’ve ever really talked about how care factored into his career philosophy. I had always implicitly assumed that it was the same as it currently is with me: Work or play, it’s always there. Can’t turn it off even if I wanted to. But what if he could? What if all the care he demonstrated in projects around the house was compensation for all the things he deliberately avoided caring about at work? It would certainly explain how he was able to consistently sustain those standards. But then, that would mean that I modeled my own principles and tastes on a distorted view of my dad, untempered by whatever he didn’t let me see about his workplace persona.&lt;/p&gt;&lt;p&gt;How would I begin to—well, I don’t want to say “not care,” that sounds too extreme. But maybe&amp;amp;mldr; selectively care? To care about the things that matter, the things that spark passion and joy and remind me why I spent so much time practicing this godforsaken occupation. While at the same time recognizing the things that don’t matter, the problems for which the optimal solution is to stop insisting on having that problem in the first place. The kinds of tasks for which the 78% showing-up baseline score is plenty good enough. Tasks on which care would be utterly wasted, the cases where the cabinets are so irredeemably fucked up that the lack of paint on the back is the last thing anybody’s going to worry about. Those are the tasks that hurt the most, because I find it basically impossible to make myself care about them. It offends my soul to try to force it, and it drains me of all ambition to move onto the next potentially heartening opportunity. It’s a real problem, and I find it always has been: If I can’t care about it, I have an extremely hard time bringing myself to do it at all.&lt;/p&gt;&lt;p&gt;Well, I suppose that’s when I open a chatbot session of my own. “Hey there Chat. Uh, we’ve never spoken before but, uh&amp;amp;mldr; Well, my entire system of self-motivation just completely broke down but I still need to keep moving forward. Can you help me out of this bind?” There’s a whole discipline—they call it Prompt Engineering—that’s just a fancy form of throwing your hands up and pressing the Care About It For Me button. That’s pretty much how it works. Provide it with any cat turd under the sun, it doesn’t matter. Chat will gobble them all up for you like a coprophagic dog.&lt;/p&gt;&lt;p&gt;I’d be lying if I said the idea didn’t make my skin crawl a little. Every fiber of my being says that this is a weight to be borne by me and me alone. This is my cat turd to eat; they gave it to me. When it’s done, I can open my grinning maw and say without equivocation that I was the one who got through it. I painted the back of this cabinet. I worked way too hard and poured far too much of my blood, sweat and tears into this thing. And my reward for a job well done is&amp;amp;mldr; debilitating exhaustion, most of the time. Getting a fresh cat turd to eat tomorrow. And the day after.&lt;/p&gt;&lt;p&gt;Of course, Chat can’t really care. It does a passable job pretending like it cares, saying the words that convey the illusion of care to any reader not paying very close attention. Where do I draw the line between fostering real care, versus passing off a degraded third-generation photocopy of some tokenization of what may have at one point been somebody else’s care? Is the line simply the boundary between the tasks I’m excited to do and the ones I put off until I’ve depleted enough mental reserves to sorta care?&lt;/p&gt;&lt;p&gt;It really does feel like the average person has made a choice to abandon a great deal of care, at least in their professional capacity. Take a look around at all these people with their fake shit-eating grins, passing off a machine’s effort as their own and experiencing no consequences. Sometimes they’re rewarded for doing so. There are organizations that are beginning to mandate it now. These people aren’t eating their cat turds anymore, why am I still sitting here eating mine?&lt;/p&gt;&lt;p&gt;I round the final curve leading to the corner of my block. As I pass under the streetlight, I cast a shadow on the asphalt ahead. With each step it grows longer and more distorted. There’s a rustle from the shrubs bordering my neighbor’s driveway, and a small dark form emerges. It crosses the street halfway then abruptly stops. I stop as well. A pair of glowing yellow eyes look back at me. I stare at it, it stares at me. A possum, perhaps? Somebody’s outdoor cat? It’s just watching me, seemingly peering straight into my very soul. Can it see what I’m grappling with here? Is it passing judgement on me for thinking these thoughts? It sizes me up for a moment longer, turns its head, and becomes a black apparition once more. I struggle to track it as it continues across the street, and I lose sight of it entirely.&lt;/p&gt;&lt;p&gt;I arrive at home and shut the door behind me. Sunset was over two hours ago and it’s nearly pitch black in the hallway. I fumble around for the light switch, kick my shoes off next to the doorway, and hang my bag on its hook in the coat closet. Something grabs my attention, just above eye level, slightly overhanging the edge of the top shelf. I slide it out of its resting place and carry it into the kitchen. I sit down at the table and inspect it.&lt;/p&gt;&lt;p&gt;This object is a round metal cookie tin about twelve inches in diameter. Beneath a thin coat of dust, it is a deep red with a repeating pattern of snowmen and white snowflakes, and quite obviously once held winter holiday–themed cookies. I repurposed it many years ago to hold the only vice I currently permit myself to indulge in: a meticulously curated collection of all different types of chocolate candies. I remove the lid and set it aside. I survey the contents, a sea of differently-shaped naked chocolate morsels. I don’t remember why I chose to remove all the foil and paper wrapping before putting these in here. From my vantage point, everything looks vaguely the same—I can’t readily spot any differences between milk chocolate and dark, or those filled with caramel versus crème.&lt;/p&gt;&lt;p&gt;One particular piece near the edge catches my eye, and I carefully select it for inspection. It’s not a very pleasing color or shape—oddly asymmetrical. I roll it around between my fingers. There’s a hair on it. I hold it up to my nose and take a whiff, hoping to detect the aroma of the cacao. Try as I might, I can’t pick up any trace of its scent.&lt;/p&gt;&lt;p&gt;Come to think of it, I can’t remember the last time I smelled anything.&lt;/p&gt;« Back to Articles&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.scottsmitelli.com/articles/altoids-by-the-fistful/"/><published>2025-09-23T06:24:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45344554</id><title>The YAML Document from Hell</title><updated>2025-09-23T13:43:11.728099+00:00</updated><content>&lt;doc fingerprint="e45100779e81da58"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The yaml document from hell&lt;/head&gt;
    &lt;p&gt;written by Ruud van Asseldonk&lt;lb/&gt;published &lt;/p&gt;
    &lt;p&gt;For a data format, yaml is extremely complicated. It aims to be a human-friendly format, but in striving for that it introduces so much complexity, that I would argue it achieves the opposite result. Yaml is full of footguns and its friendliness is deceptive. In this post I want to demonstrate this through an example.&lt;/p&gt;
    &lt;p&gt;This post is a rant, and more opinionated than my usual writing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Yaml is really, really complex&lt;/head&gt;
    &lt;p&gt;Json is simple. The entire json spec consists of six railroad diagrams. It’s a simple data format with a simple syntax and that’s all there is to it. Yaml on the other hand, is complex. So complex, that its specification consists of 10 chapters with sections numbered four levels deep and a dedicated errata page.&lt;/p&gt;
    &lt;p&gt;The json spec is not versioned. There were two changes to it in 2005 (the removal of comments, and the addition of scientific notation for numbers), but it has been frozen since — almost two decades now. The yaml spec on the other hand is versioned. The latest revision is fairly recent, 1.2.2 from October 2021. Yaml 1.2 differs substantially from 1.1: the same document can parse differently under different yaml versions. We will see multiple examples of this later.&lt;/p&gt;
    &lt;p&gt;Json is so obvious that Douglas Crockford claims to have discovered it — not invented. I couldn’t find any reference for how long it took him to write up the spec, but it was probably hours rather than weeks. The change from yaml 1.2.1 to 1.2.2 on the other hand, was a multi-year effort by a team of experts:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;This revision is the result of years of work by the new YAML language development team. Each person on this team has a deep knowledge of the language and has written and maintains important open source YAML frameworks and tools.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Furthermore this team plans to actively evolve yaml, rather than to freeze it.&lt;/p&gt;
    &lt;p&gt;When you work with a format as complex as yaml, it is difficult to be aware of all the features and subtle behaviors it has. There is an entire website dedicated to picking one of the 63 different multi-line string syntaxes. This means that it can be very difficult for a human to predict how a particular document will parse. Let’s look at an example to highlight this.&lt;/p&gt;
    &lt;head rend="h2"&gt;The yaml document from hell&lt;/head&gt;
    &lt;p&gt;Consider the following document.&lt;/p&gt;
    &lt;code&gt;server_config:
  port_mapping:
    # Expose only ssh and http to the public internet.
    - 22:22
    - 80:80
    - 443:443

  serve:
    - /robots.txt
    - /favicon.ico
    - *.html
    - *.png
    - !.git  # Do not expose our Git repository to the entire world.

  geoblock_regions:
    # The legal team has not approved distribution in the Nordics yet.
    - dk
    - fi
    - is
    - no
    - se

  flush_cache:
    on: [push, memory_pressure]
    priority: background

  allow_postgres_versions:
    - 9.5.25
    - 9.6.24
    - 10.23
    - 12.13&lt;/code&gt;
    &lt;p&gt;Let’s break this down section by section and see how the data maps to json.&lt;/p&gt;
    &lt;head rend="h2"&gt;Sexagesimal numbers&lt;/head&gt;
    &lt;p&gt;Let’s start with something that you might find in a container runtime configuration:&lt;/p&gt;
    &lt;code&gt;port_mapping:
  - 22:22
  - 80:80
  - 443:443&lt;/code&gt;
    &lt;code&gt;{"port_mapping": [1342, "80:80", "443:443"]}&lt;/code&gt;
    &lt;p&gt;Huh, what happened here? As it turns out, numbers from 0 to 59 separated by colons are sexagesimal (base 60) number literals. This arcane feature was present in yaml 1.1, but silently removed from yaml 1.2, so the list element will parse as &lt;code&gt;1342&lt;/code&gt; or &lt;code&gt;"22:22"&lt;/code&gt; depending on which version your parser uses. Although yaml 1.2 is more than 10 years old by now, you would be mistaken to think that it is widely supported: the latest version libyaml at the time of writing (which is used among others by PyYAML) implements yaml 1.1 and parses &lt;code&gt;22:22&lt;/code&gt; as &lt;code&gt;1342&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Anchors, aliases, and tags&lt;/head&gt;
    &lt;p&gt;The following snippet is actually invalid:&lt;/p&gt;
    &lt;code&gt;serve:
  - /robots.txt
  - /favicon.ico
  - *.html
  - *.png
  - !.git&lt;/code&gt;
    &lt;p&gt;Yaml allows you to create an anchor by adding an &lt;code&gt;&amp;amp;&lt;/code&gt; and a name in front of a value, and then you can later reference that value with an alias: a &lt;code&gt;*&lt;/code&gt; followed by the name. In this case no anchors are defined, so the aliases are invalid. Let’s avoid them for now and see what happens.&lt;/p&gt;
    &lt;code&gt;serve:
  - /robots.txt
  - /favicon.ico
  - !.git&lt;/code&gt;
    &lt;code&gt;{"serve": ["/robots.txt", "/favicon.ico", ""]}&lt;/code&gt;
    &lt;p&gt;Now the interpretation depends on the parser you are using. The element starting with &lt;code&gt;!&lt;/code&gt; is a tag. This feature is intended to enable a parser to convert the fairly limited yaml data types into richer types that might exist in the host language. A tag starting with &lt;code&gt;!&lt;/code&gt; is up to the parser to interpret, often by calling a constructor with the given name and providing it the value that follows after the tag. This means that loading an untrusted yaml document is generally unsafe, as it may lead to arbitrary code execution. (In Python, you can avoid this pitfall by using &lt;code&gt;yaml.safe_load&lt;/code&gt; instead of &lt;code&gt;yaml.load&lt;/code&gt;.) In our case above, PyYAML fails to load the document because it doesn’t know the &lt;code&gt;.git&lt;/code&gt; tag. Go’s yaml package is less strict and returns an empty string.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Norway problem&lt;/head&gt;
    &lt;p&gt;This pitfall is so infamous that it became known as “the Norway problem”:&lt;/p&gt;
    &lt;code&gt;geoblock_regions:
  - dk
  - fi
  - is
  - no
  - se&lt;/code&gt;
    &lt;code&gt;{"geoblock_regions": ["dk", "fi", "is", false, "se"]}&lt;/code&gt;
    &lt;p&gt;What is that &lt;code&gt;false&lt;/code&gt; doing there? The literals &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt;, in various capitalizations (but not any capitalization!), are all &lt;code&gt;false&lt;/code&gt; in yaml 1.1, while &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; are true. In yaml 1.2 these alternative spellings of the boolean literals are no longer allowed, but they are so pervasive in the wild that a compliant parser would have a hard time reading many documents. Go’s yaml library therefore made the choice of implementing a custom variant somewhere in between yaml 1.1 and 1.2 that behaves differently depending on the context:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The yaml package supports most of YAML 1.2, but preserves some behavior from 1.1 for backwards compatibility. YAML 1.1 bools (yes/no, on/off) are supported as long as they are being decoded into a typed bool value. Otherwise they behave as a string.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Note that it only does that since version 3.0.0, which was released in May 2022. Earlier versions behave differently.&lt;/p&gt;
    &lt;head rend="h2"&gt;Non-string keys&lt;/head&gt;
    &lt;p&gt;While keys in json are always strings, in yaml they can be any value, including booleans.&lt;/p&gt;
    &lt;code&gt;flush_cache:
  on: [push, memory_pressure]
  priority: background&lt;/code&gt;
    &lt;code&gt;{
  "flush_cache": {
    "True": ["push", "memory_pressure"],
    "priority": "background"
  }
}&lt;/code&gt;
    &lt;p&gt;Combined with the previous feature of interpreting &lt;code&gt;on&lt;/code&gt; as a boolean, this leads to a dictionary with &lt;code&gt;true&lt;/code&gt; as one of the keys. It depends on the language how that maps to json, if at all. In Python it becomes the string &lt;code&gt;"True"&lt;/code&gt;. The key &lt;code&gt;on&lt;/code&gt; is common in the wild because it is used in GitHub Actions. I would be really curious to know whether GitHub Actions’ parser looks at &lt;code&gt;"on"&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; under the hood.&lt;/p&gt;
    &lt;head rend="h2"&gt;Accidental numbers&lt;/head&gt;
    &lt;p&gt;Leaving strings unquoted can easily lead to unintentional numbers.&lt;/p&gt;
    &lt;code&gt;allow_postgres_versions:
  - 9.5.25
  - 9.6.24
  - 10.23
  - 12.13&lt;/code&gt;
    &lt;code&gt;{"allow_postgres_versions": ["9.5.25", "9.6.24", 10.23, 12.13]}&lt;/code&gt;
    &lt;p&gt;Maybe the list is a contrived example, but imagine updating a config file that lists a single value of 9.6.24 and changing it to 10.23. Would you remember to add the quotes? What makes this even more insidious is that many dynamically typed applications implicitly convert the number to a string when needed, so your document works fine most of the time, except in some contexts it doesn’t. For example, the following Jinja template accepts both &lt;code&gt;version: "0.0"&lt;/code&gt; and &lt;code&gt;version: 0.0&lt;/code&gt;, but it only takes the true-branch for the former.&lt;/p&gt;
    &lt;code&gt;{% if version %}
  Latest version: {{ version }}
{% else %}
  Version not specified
{% endif %}&lt;/code&gt;
    &lt;head rend="h2"&gt;Runners-up&lt;/head&gt;
    &lt;p&gt;There is only so much I can fit into one artifical example. Some arcane yaml behaviors that did not make it in are directives, integers starting with &lt;code&gt;0&lt;/code&gt; being octal literals (but only in yaml 1.1), &lt;code&gt;~&lt;/code&gt; being an alternative spelling of &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;?&lt;/code&gt; introducing a complex mapping key.&lt;/p&gt;
    &lt;head rend="h2"&gt;Syntax highlighting will not save you&lt;/head&gt;
    &lt;p&gt;You may have noticed that none of my examples have syntax highlighting enabled. Maybe I am being unfair to yaml, because syntax highlighting would highlight special constructs, so you can at least see that some values are not normal strings. However, due to multiple yaml versions being prevalent, and highlighters having different levels of sophistication, you can’t rely on this. I’m not trying to nitpick here: Vim, my blog generator, GitHub, and Codeberg, all have a unique way to highlight the example document from this post. No two of them pick out the same subset of values as non-strings!&lt;/p&gt;
    &lt;head rend="h2"&gt;Templating yaml is a terrible, terrible idea&lt;/head&gt;
    &lt;p&gt;I hope it is clear by now that working with yaml is subtle at the very least. What is even more subtle is concatenating and escaping arbitrary text fragments in such a way that the result is a valid yaml document, let alone one that does what you expect. Add to this the fact that whitespace is significant in yaml, and the result is a format that is meme-worthily difficult to template correctly. I truly do not understand why tools based on such an error-prone practice have gained so much mindshare, when there is a safer, easier, and more powerful alternative: generating json.&lt;/p&gt;
    &lt;head rend="h2"&gt;Alternative configuration formats&lt;/head&gt;
    &lt;p&gt;I think the main reason that yaml is so prevalent despite its pitfalls, is that for a long time it was the only viable configuration format. Often we need lists and nested data, which rules out flat formats like ini. Xml is noisy and annoying to write by hand. But most of all, we need comments, which rules out json. (As we saw before, json had comments very early on, but they were removed because people started putting parsing directives in there. I think this is the right call for a serialization format, but it makes json unsuitable as a configuration language.) So if what we really need is the json data model but a syntax that allows comments, what are some of the options?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Toml — Toml is similar to yaml in many ways: it has mostly the same data types; the syntax is not as verbose as json; and it allows comments. Unlike yaml it is not full of footguns, mostly because strings are always quoted, so you don’t have values that look like strings but aren’t. Toml is widely supported, you can probably find a toml parser for your favorite language. It’s even in the Python standard library — unlike yaml! A weak spot of toml is deeply nested data.&lt;/item&gt;
      &lt;item&gt;Json with comments, Json with commas and comments — There exist various extensions of json that extend it just enough to make it a usable config format without introducing too much complexity. Json with comments is probably the most widespread, as it is used as the config format for Visual Studio Code. The main downside of these is that they haven’t really caught on (yet!), so they aren’t as widely supported as json or yaml.&lt;/item&gt;
      &lt;item&gt;A simple subset of yaml — Many of the problems with yaml are caused by unquoted things that look like strings but behave differently. This is easy to avoid: always quote all strings. (Indeed, you can tell that somebody is an experienced yaml engineer when they defensively quote all the strings.) We can choose to always use &lt;code&gt;true&lt;/code&gt;and&lt;code&gt;false&lt;/code&gt;rather than&lt;code&gt;yes&lt;/code&gt;and&lt;code&gt;no&lt;/code&gt;, and generally stay away from the arcane features. The challenge with this is that any construct not explicitly forbidden will eventually make it into your codebase, and I am not aware of any good tool that can enforce a sane yaml subset.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Generating json as a better yaml&lt;/head&gt;
    &lt;p&gt;Often the choice of format is not ours to make, and an application only accepts yaml. Not all is lost though, because yaml is a superset of json, so any tool that can produce json can be used to generate a yaml document.&lt;/p&gt;
    &lt;p&gt;Sometimes an application will start out with a need for just a configuration format, but over time you end up with many many similar stanzas, and you would like to share parts between them, and abstract some repetition away. This tends to happen in for example Kubernetes and GitHub Actions. When the configuration language does not support abstraction, people often reach for templating, which is a bad idea for the reasons explained earlier. Proper programming languages, possibly domain-specific ones, are a better fit. Some of my favorites are Nix and Python:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Nix — Nix is the language used by the Nix package manager. It was created for writing package definitions, but it works remarkably well as a configuration format (and indeed it is used to configure NixOS). Functions, let-bindings, and string interpolation make it powerful for abstracting repetitive configuration. The syntax is light like toml, and it can export to json or xml. It works well for simplifying a repetitive GitHub Actions workflow file, for example.&lt;/item&gt;
      &lt;item&gt;Python — Json documents double as valid Python literals with minimal adaptation, and Python supports trailing commas and comments. It has variables and functions, powerful string interpolation, and &lt;code&gt;json.dump&lt;/code&gt;built in. A self-contained Python file that prints json to stdout goes a long way!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Finally there are some tools in this category that I haven’t used enough to confidently recommend, but which deserve to be mentioned:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Dhall — Dhall is like Nix, but with types. It is less widespread, and personally I find the built-in function names unwieldy.&lt;/item&gt;
      &lt;item&gt;Cue — Like Dhall, Cue integrates type/schema information into the config format. Cue is a superset of json, but despite that, I find the files that actually use Cue’s features to look foreign to me. Cue is on my radar to evaluate further, but I haven’t encountered a problem where Cue looked like the most suitable solution yet.&lt;/item&gt;
      &lt;item&gt;Hashicorp Configuration Language — I haven’t used HCL extensively enough to have a strong opinion on it, but in the places where I worked with it, the potential for abstraction seemed more limited than what you can achieve with e.g. Nix.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;2025 update: After having used HCL more in practice, I consider it too ad-hoc to seriously recommend. My frustration with HCL is what prompted me to create RCL. It started as a toy project, but is now at a point where it is both usable and useful.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Yaml aims to be a more human-friendly alternative to json, but with all of its features, it became such a complex format with so many bizarre and unexpected behaviors, that it is difficult for humans to predict how a given yaml document will parse. If you are looking for a configuration format, toml is a friendly format without yaml’s footguns. For cases where you are stuck with yaml, generating json from a more suitable language can be a viable approach. Generating json also opens up the possibility for abstraction and reuse, in a way that is difficult to achieve safely by templating yaml.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell"/><published>2025-09-23T09:04:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45344708</id><title>Go has added Valgrind support</title><updated>2025-09-23T13:43:11.557839+00:00</updated><link href="https://go-review.googlesource.com/c/go/+/674077"/><published>2025-09-23T09:26:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45344756</id><title>Indoor surfaces act as sponges for harmful chemicals</title><updated>2025-09-23T13:43:11.012218+00:00</updated><content>&lt;doc fingerprint="75ffb4ccae8f068c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Indoor surfaces act as massive sponges for harmful chemicals, UC Irvine-led study shows&lt;/head&gt;
    &lt;p&gt;Permeable materials in homes can retain volatile organic compounds for up to a year&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Scientists injected volatile organic compounds into a test house and found large reservoirs for the potentially hazardous chemicals in porous surfaces such as wood, cement and paint.&lt;/item&gt;
      &lt;item&gt;VOCs contained in insecticides, cigarette smoke and wildfire smoke can remain on indoor surfaces for as long as one year.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Irvine, Calif., Sept. 22, 2025 — Indoor surfaces have an unexpectedly strong ability to absorb and hold harmful chemical compounds that can threaten human health for as long as a year, according to air chemistry researchers at the University of California, Irvine.&lt;/p&gt;
    &lt;p&gt;In a paper published today in Proceedings of the National Academy of Sciences, the UC Irvine scientists quantify how various indoor surfaces absorb volatile organic compounds, which can result in unhealthy conditions for people and animals when inhaled or absorbed through skin contact.&lt;/p&gt;
    &lt;p&gt;The sources of VOCs are many, such as cooking, spray cleaning, personal care and other consumer products. Additional significant contributors include tobacco smoke and, increasingly, air pollution caused by wildfires. The researchers note that health risks come from inhaling compounds when they “off gas” from surfaces and through dermal uptake when contaminated surfaces are touched.&lt;/p&gt;
    &lt;p&gt;In the spring of 2022, co-author Jonathan Abbatt, professor of chemistry at the University of Toronto, led the Chemical Assessment of Surfaces and Air study, which utilized simulation chambers in the National Institute of Standards and Technology’s Net-Zero Energy Residential Test Facility. Contaminants were injected into a structure mimicking a home environment, with typical building materials. The research team used mass spectrometry instruments to track the movement and persistence of VOCs in the controlled indoor environment.&lt;/p&gt;
    &lt;p&gt;“Scientists in the air chemistry research community have known for a long time that many indoor contaminants can be absorbed by indoor surfaces, but the size of indoor surface reservoirs inside homes and buildings had not been established,” said Manabu Shiraiwa, UC Irvine professor of chemistry, who was responsible for modeling observations and is a corresponding author on the PNAS paper. “Our modeling found that surfaces inside homes have a much greater size to absorb and hold chemicals than previously realized. We can think of these surfaces as massive chemical sponges that soak up VOCs.”&lt;/p&gt;
    &lt;p&gt;Before this study, thin organic films with nanometer thickness were thought to be main surface reservoirs. However, this work proves that permeable and porous materials such as painted surfaces, cement and wood are likely the major surface reservoirs in a home.&lt;/p&gt;
    &lt;p&gt;“This discovery has significant implications for human health,” Shiraiwa said. “It means people can be exposed to harmful chemicals long after their initial introduction into indoor spaces, and compounds can later be released back into the air or transferred to humans through direct contact with contaminated surfaces.”&lt;/p&gt;
    &lt;p&gt;He added, “This result significantly impacts our understanding of VOC fate and human exposure in indoor environments. With such a large partitioning capacity, organic contaminants will have much longer indoor residence times than previously predicted.”&lt;/p&gt;
    &lt;p&gt;The research explains why certain odors and contaminants persist indoors even after their sources are removed. For example, it provides scientific evidence for why tobacco smoke odors linger in rooms long after smoking has stopped: The residual compounds, known as “thirdhand smoke,” slowly partition back into the air from surface reservoirs.&lt;/p&gt;
    &lt;p&gt;The findings suggest that regular ventilation alone may be insufficient to remove many indoor contaminants. Physical cleaning activities such as vacuuming, mopping and dusting are necessary to effectively remove compounds with high partition coefficients from surface reservoirs.&lt;/p&gt;
    &lt;p&gt;Joining Shiraiwa and Abbatt in this study were Pascale Lakey, project scientist in chemistry at UC Irvine; Jie Yu and Xing Wang at the University of Toronto; Jenna Ditto at Washington University in St. Louis, Missouri; Han Huynh and Marina Vance at the University of Colorado Boulder; Michael Link, Dustin Poppendieck and Stephen Zimmerman at the National Institute of Standards and Technology; and Delphine Farmer at Colorado State University.&lt;/p&gt;
    &lt;p&gt;The research was supported by funding from the Alfred P. Sloan Foundation.&lt;/p&gt;
    &lt;p&gt;About the University of California, Irvine: Founded in 1965, UC Irvine is a member of the prestigious Association of American Universities and is ranked among the nation’s top 10 public universities by U.S. News &amp;amp; World Report. The campus has produced five Nobel laureates and is known for its academic achievement, premier research, innovation and anteater mascot. Led by Chancellor Howard Gillman, UC Irvine has more than 36,000 students and offers 224 degree programs. It’s located in one of the world’s safest and most economically vibrant communities and is Orange County’s second-largest employer, contributing $7 billion annually to the local economy and $8 billion statewide. For more on UC Irvine, visit www.uci.edu.&lt;/p&gt;
    &lt;p&gt;Media access: Radio programs/stations may, for a fee, use an on-campus studio with a Comrex IP audio codec to interview UC Irvine faculty and experts, subject to availability and university approval. For more UC Irvine news, visit news.uci.edu. Additional resources for journalists may be found at https://news.uci.edu/media-resources.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.uci.edu/2025/09/22/indoor-surfaces-act-as-massive-sponges-for-harmful-chemicals-uc-irvine-led-study-shows/"/><published>2025-09-23T09:33:34+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345148</id><title>Hyb Error: A Hybrid Metric Combining Absolute and Relative Errors</title><updated>2025-09-23T13:43:10.706226+00:00</updated><content>&lt;doc fingerprint="988c361a05dfb08c"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Mathematics &amp;gt; Numerical Analysis&lt;/head&gt;&lt;p&gt; [Submitted on 12 Mar 2024 (v1), last revised 21 May 2024 (this version, v2)]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Hyb Error: A Hybrid Metric Combining Absolute and Relative Errors&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:Suppose $x$ is an approximation of $y$. This paper proposes using $\frac{|x-y|}{1+|y|}$, named Hyb Error, to measure the error. This metric equals half the harmonic mean of absolute error and relative error, effectively combining their advantages while mitigating their limitations. For example, Hyb Error approaches absolute error as $|y|$ approaches 0, thereby avoiding the exaggeration of relative error, and approaches relative error as $|y|$ approaches infinity, thereby avoiding the exaggeration of absolute error. The Hyb Error of $\epsilon$ is equivalent to $|x-y|=\epsilon+\epsilon |y|$, which implies $\mathrm{isclose}(x,y,\epsilon,\epsilon)=\mathrm{True}$, where ``isclose'' is a common floating-point equality check function in numerical libraries. For sequences, this property makes the Maximum Element-wise Hyb Error (MEHE) a pragmatic error metric that reflects the most significant error and equals the decision boundary of the ``isclose'' function.&lt;/quote&gt;&lt;head rend="h2"&gt;Submission history&lt;/head&gt;From: Peichen Xie [view email]&lt;p&gt;[v1] Tue, 12 Mar 2024 10:30:46 UTC (84 KB)&lt;/p&gt;&lt;p&gt;[v2] Tue, 21 May 2024 08:20:36 UTC (62 KB)&lt;/p&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;math.NA&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arxiv.org/abs/2403.07492"/><published>2025-09-23T10:30:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345207</id><title>Structured Outputs in LLMs</title><updated>2025-09-23T13:43:10.614250+00:00</updated><content>&lt;doc fingerprint="d3fff7ff6f587ef7"&gt;
  &lt;main&gt;
    &lt;p&gt;Writings&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://parthsareen.com/blog.html#sampling.md"/><published>2025-09-23T10:40:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345237</id><title>Walking Michigan City (Indiana)</title><updated>2025-09-23T13:43:10.548152+00:00</updated><content/><link href="https://walkingtheworld.substack.com/p/walking-michigan-city-indiana"/><published>2025-09-23T10:44:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345514</id><title>Cache of Devices Capable of Crashing Cell Network Is Found Near U.N</title><updated>2025-09-23T13:43:10.467695+00:00</updated><content/><link href="https://www.nytimes.com/2025/09/23/us/politics/secret-service-sim-cards-servers-un.html"/><published>2025-09-23T11:29:13+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345742</id><title>Zinc (YC W14) Is Hiring a Senior Back End Engineer (NYC)</title><updated>2025-09-23T13:43:10.108047+00:00</updated><content>&lt;doc fingerprint="e10fcdab2cdf53e4"&gt;
  &lt;main&gt;
    &lt;p&gt;You need to enable JavaScript to run this app.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://app.dover.com/apply/Zinc/4d32fdb9-c3e6-4f84-a4a2-12c80018fe8f/?rs=76643084"/><published>2025-09-23T12:00:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345950</id><title>Mesh: I tried Htmx, then ditched it</title><updated>2025-09-23T13:43:09.631027+00:00</updated><content>&lt;doc fingerprint="ae1a9a5068051682"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;MESH: I tried HTMX, then ditched it&lt;/head&gt;
    &lt;p&gt;There is a kind of exciting movement in Web dev right now. Web devs are talking about "JavaScript Fatigue", "Framework Fatigue", the "Revival of Hypermedia" and "HTML Over The Wire". In a word: we're asking ourselves why we're building HTML in JavaScript.&lt;/p&gt;
    &lt;p&gt;The figurehead for this movement is undoubtedly HTMX. It shows that much of what we do in JavaScript could instead be done declaratively, with HTML attributes. If browsers adopted these semantics natively, many websites - and even apps - wouldn't need JavaScript at all. I love this idea! Writing HTML first and adding JS on top is the way the Web should work.&lt;/p&gt;
    &lt;p&gt;At present, we write JavaScript first, and we use it to generate HTML. How did we get it so backwards? I believe the answer is pretty straightforward: SPA frameworks are a joy to use. They impose structure, enforcing conventions, ultimately making it easy to keep concerns separated in one's mind.&lt;/p&gt;
    &lt;p&gt;My big problem with HTMX, as it stands, is that it lacks that structure. Taking a look at HTMX the first time, my reaction was: "...so, declarative jQuery." I could see, as if before my very eyes, the spaghetti that inevitably grows out of a library like this. HTMX leaves it up to the developer to impose discipline on their code, however they see fit.&lt;/p&gt;
    &lt;p&gt;So, I decided to accept the challenge. I want to do modular SSR the way HTMX encourages, but I want to do it with something like an SPA framework. I want nestable components, each with their own HTML, CSS, and JS - and back-end code - sitting side by side. I want there to be one, and only one, right way to do something.&lt;/p&gt;
    &lt;p&gt;The result of this journey is MESH - modular element SSR with hydration. MESH is based on a simple principle: one component = one endpoint. This is a powerful idea - it allows us to write a HTML-first back-end in such a way that it feels like writing an SPA.&lt;/p&gt;
    &lt;p&gt;This write-up includes a lot of code snippets. I've tried to keep these minimal. If you want to follow along with more context, you can find the whole commit history for MESH on GitHub.&lt;/p&gt;
    &lt;head rend="h2"&gt;Basic Interactivity&lt;/head&gt;
    &lt;p&gt;Looking around, it seemed the back-end of choice for HTMX devs is Go with Templ. I've never really had my "Damascus moment" with Go, but this was a good opportunity to get my feet wet. I will say this much: it is a joy to work with something genuinely blazingly fast to build and deploy.&lt;/p&gt;
    &lt;p&gt;I also wanted to have a go with proper vibe coding - writing code without reading it - with Junie. What fun this was! I can see why people would be tempted to write whole apps this way. I'll only say this much: as someone who's battled addiction in the past, I didn't like what I noticed my brain was doing with it. That's a subject for another blog post another time.&lt;/p&gt;
    &lt;p&gt;My mission was, in a word, to write something like an opinionated framework or "harness" for HTMX which would give me a standard way to use it with Web Components. Specifically, what I had in mind was a "one component one endpoint" model. HTMX would always swap the entire component, which would then be "hydrated".&lt;/p&gt;
    &lt;p&gt;It turns out there is a standard way to do server-side rendered custom elements, called Declarative Shadow DOM (DSD). Others have already had some success using HTMX and DSD together. The combo looked promising.&lt;/p&gt;
    &lt;p&gt;There is one significant limitation, however: HTMX will not cross shadow root boundaries. This is by design, to be clear - this is how we should expect HTMX to behave. No sweat, we can do a simple hack to make it work - and, at the same time, to enforce component-level swaps:&lt;/p&gt;
    &lt;code&gt;import type {HtmxBeforeSwapDetail} from "./types/htmx";

function enforceComponentSwap(evt: CustomEvent&amp;lt;HtmxBeforeSwapDetail&amp;gt;) {
  const detail = evt.detail;
  let elt = detail.elt;
  let root = elt.getRootNode();
  
  if (root instanceof ShadowRoot) {
    detail.target = root.host as HTMLElement;
    detail.swapOverride = "outerHTML";
  }
}

document.body.addEventListener("htmx:beforeSwap", enforceComponentSwap as EventListener);
&lt;/code&gt;
    &lt;p&gt;With this little helper, I can now start building out a very simple Trello clone to prove the concept. Let's build a little editable card component:&lt;/p&gt;
    &lt;code&gt;package card

import (
  "mesh/src/services"
  "fmt"
)

type CardProps struct {
  *services.Card
}

templ Card(props CardProps) {
  &amp;lt;mesh-card
    id={ fmt.Sprintf("card-%d", props.Card.ID) }
  &amp;gt;
    &amp;lt;template shadowrootmode="open"&amp;gt;
      &amp;lt;base href="/"/&amp;gt;
      &amp;lt;link rel="stylesheet" href="/static/css/components/card.css"/&amp;gt;
      &amp;lt;div data-view class="card"&amp;gt;
        &amp;lt;div class="card-header"&amp;gt;
          &amp;lt;h3&amp;gt;{ props.Card.Title }&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card-content"&amp;gt;
          { props.Card.Content }
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="actions"&amp;gt;
          &amp;lt;button type="button" mesh-click="edit"&amp;gt;Edit&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;form data-form class="card hide" hx-patch="/card"&amp;gt;
        &amp;lt;input type="hidden" name="cardID" value={ props.Card.ID } /&amp;gt;
        &amp;lt;label&amp;gt;
          Title
          &amp;lt;input type="text" name="title" value={ props.Data.Title } /&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;label&amp;gt;
          Content
          &amp;lt;textarea name="content"&amp;gt;{ props.Data.Content }&amp;lt;/textarea&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;div class="actions"&amp;gt;
          &amp;lt;button type="button" mesh-click="cancel"&amp;gt;Cancel&amp;lt;/button&amp;gt;
          &amp;lt;button type="submit"&amp;gt;Save&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/mesh-card&amp;gt;
}
&lt;/code&gt;
    &lt;p&gt;Now let's hydrate it. I'm going to start with a simple base element that'll ensure that our shadow root is attached properly and processed by HTMX:&lt;/p&gt;
    &lt;code&gt;export class MeshElement extends HTMLElement {
  connectedCallback() { 
    if (!this.shadowRoot) {
      // the browser should do this for us - oh well, what can you do?
      const root = this.attachShadow({ mode: 'open' });
      const template = this.querySelector('template[shadowrootmode="open"]');
      if (template) {
        root.appendChild((template as any).content.cloneNode(true));
      }
    }
    if (window.htmx) {
      window.htmx.process(this);
      if (this.shadowRoot) {
        window.htmx.process(this.shadowRoot);
      }
    }
    this.bindListeners();
  }

  protected bindListeners() {
    const supportedEvents = ['click'];

    supportedEvents.forEach(eventName =&amp;gt; {
      const attribute = "mesh-" + eventName;
      this.all('[' + attribute + ']', el =&amp;gt; {
        const methodName = el.getAttribute(attribute);
        if (!methodName) {
          return;
        }
        const method = (this as any)[methodName];
        if (!method || typeof method !== 'function') {
          console.error(`Method ${methodName} is not a function`);
          return;
        }

        el.addEventListener(eventName, method.bind(this));
      });
    });
  }

  all(selector: string, cb: (el: HTMLElement) =&amp;gt; void) {
    return this.shadowRoot!.querySelectorAll(selector).forEach(e =&amp;gt; cb(e as HTMLElement));
  }
}
&lt;/code&gt;
    &lt;p&gt;Then our card element is straightforward to implement:&lt;/p&gt;
    &lt;code&gt;import {MeshElement} from "../base/mesh-element.ts";

export class Card extends MeshElement {
  edit() {
    this.show('[data-form]');
    this.hide('[data-view]');
  }
  
  cancel() {
    this.hide('[data-form]');
    this.show('[data-view]');
  }

  show(selector: string) {
    this.all(selector, el =&amp;gt; {
      el.classList.remove('hide');
    });
  }

  hide(selector: string) {
    this.all(selector, el =&amp;gt; {
      el.classList.add('hide');
    });
  }
}
window.customElements.define('mesh-card', Card);
&lt;/code&gt;
    &lt;p&gt;This works great! I've enhanced my card component with some basic JS to show that it can be done, and otherwise this is all just plain old HTMX.&lt;/p&gt;
    &lt;p&gt;The next step is adding functionality to move the cards between columns. This is where we'll run into a common difficulty with HTMX: how to swap out "parent" components given an update on a child component.&lt;/p&gt;
    &lt;p&gt;Now, HTMX devs have a number of differing opinions on how best to go about this. One common practice is to "expand the target", which means your component needs to be aware of parent components. Another way is to trigger events in the response headers - this is better, in that it moves responsibility for this back to the server. I believe front-end components shouldn't know anything their own placement on the page.&lt;/p&gt;
    &lt;p&gt;Fortunately, HTMX gives us another way to do this - and it appears to be the emerging "best practice" - with "out of band" (OOB) swaps. If, in our response to a call to the card endpoint, we return any other components that need updating, and simply flag them as OOB, HTMX will handle the swaps for us. This best reflects my own aims for MESH, so let's see how we get along doing it this way.&lt;/p&gt;
    &lt;p&gt;Let's add "promote" functionality to our card component - this will simply move the card one column to the right:&lt;/p&gt;
    &lt;code&gt;package card

import (
  "mesh/src/services"
  "fmt"
)

const PutActionPromote = "promote"

type CardProps struct {
  *services.Card
  CanPromote bool
}

templ Card(props CardProps) {
  &amp;lt;mesh-card
    id={ fmt.Sprintf("card-%d", props.Card.ID) }
  &amp;gt;
    &amp;lt;template shadowrootmode="open"&amp;gt;
      &amp;lt;base href="/"/&amp;gt;
      &amp;lt;link rel="stylesheet" href="/static/css/components/card.css"/&amp;gt;
      &amp;lt;div data-view class="card"&amp;gt;
        &amp;lt;div class="card-header"&amp;gt;
          &amp;lt;h3&amp;gt;{ props.Card.Title }&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card-content"&amp;gt;
          { props.Card.Content }
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="actions"&amp;gt;
          if props.CanPromote {
            &amp;lt;form hx-put="/card"&amp;gt;
              &amp;lt;input type="hidden" name="action" value="promote" /&amp;gt;
              &amp;lt;input type="hidden" name="cardID" value={props.Card.ID} /&amp;gt;
              &amp;lt;button type="submit" aria-label="Move to next column"&amp;gt;
                &amp;lt;i data-lucide="arrow-right"&amp;gt;&amp;lt;/i&amp;gt;
              &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
          }
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/mesh-card&amp;gt;
}
&lt;/code&gt;
    &lt;p&gt;To handle the OOB updates, we'll write a "context-enriched" pub-sub:&lt;/p&gt;
    &lt;code&gt;type EventContext struct {
	Context        context.Context
	ResponseWriter http.ResponseWriter
}

func (e *EventContext) Write(component templ.Component) {
	err := component.Render(e.Context, e.ResponseWriter)
	if err != nil {
		http.Error(e.ResponseWriter, "Failed to render OOB updates", http.StatusInternalServerError)
	}
}

func (e *EventService) Publish(event Event, w http.ResponseWriter, ctx context.Context) {
  eventContext := EventContext{
    Context:        ctx,
    ResponseWriter: w,
  }
  for _, subscriber := range e.subscribers[event.Key()] {
    subscriber(event, eventContext)
  }
}

func (e *EventService) Subscribe(key string, subscriber func(event Event, context EventContext)) {
  e.subscribers[key] = append(e.subscribers[key], subscriber)
}
&lt;/code&gt;
    &lt;p&gt;Then we can publish in the card handler:&lt;/p&gt;
    &lt;code&gt;func (h *Handler) Put(w http.ResponseWriter, r *http.Request) {
  card, err := h.getCardFromRequest(r)
  if err != nil {
    http.Error(w, err.Error(), http.StatusNotFound)
    return
  }
  action := r.FormValue("action")
  switch action {
  case PutActionPromote:
    fromColumn, toColumn, err := h.CardService.Promote(card.ID)
    if err != nil {
      http.Error(w, err.Error(), http.StatusBadRequest)
    } else {
      h.EventService.PublishCardMoved(card.ID, fromColumn.ID, toColumn.ID, w, r.Context())
    }
    break
  }
}
&lt;/code&gt;
    &lt;p&gt;And we can subscribe in the column handler:&lt;/p&gt;
    &lt;code&gt;func (h *Handler) OnCardMoved(event *services.CardMovedEvent, context services.EventContext) {
  column, err := h.CardService.GetColumn(event.ToColumnID)
  if err == nil {
    context.Write(h.RenderComponent(column, true))
  } else {
    http.Error(context.ResponseWriter, err.Error(), http.StatusInternalServerError)
  }
  column, err = h.CardService.GetColumn(event.FromColumnID)
  if err == nil {
    context.Write(h.RenderComponent(column, true))
  } else {
    http.Error(context.ResponseWriter, err.Error(), http.StatusInternalServerError)
  }
}
&lt;/code&gt;
    &lt;p&gt;This way, our components can communicate with each other without needing to know about each other. The subscriber takes the request context from the publisher and simply writes to the response. The result is a response from the back-end with&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;the component-specific update, followed by&lt;/item&gt;
      &lt;item&gt;any other OOB updates simply appended to the response.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This works surprisingly well.&lt;/p&gt;
    &lt;p&gt;Unfortunately, we once again run into the same limitation as before: HTMX will not cross shadow root boundaries. At this point, it seems clear that, if we want to use HTMX as intended, we are going to have to give up on shadow DOM entirely. Again, this is intended behaviour. JavaScript should not cross shadow root boundaries by default. What this means is that, if we're wedded to shadow DOM, we are going to have to fight HTMX all the way.&lt;/p&gt;
    &lt;p&gt;I'm undeterred, of course - all we need is another little hack:&lt;/p&gt;
    &lt;code&gt;function findInShadow(root: any, id: string): any {
  const element = root.getElementById?.(id);
  if (element) {
    return element;
  }
  const allElements = root.querySelectorAll('*');
  for (let element of allElements) {
    if (element.shadowRoot) {
      const found = findInShadow(element.shadowRoot, id);
      if (found) {
        return found;
      }
    }
  }
  return null;
}

function enableOobSwap(evt: CustomEvent&amp;lt;any&amp;gt;) {
  const id = evt.detail.content.id;
  const found = findInShadow(document, id);
  if (found) {
    found.outerHTML = evt.detail.content.outerHTML;
    evt.preventDefault();
  }
}

document.body.addEventListener("htmx:oobErrorNoTarget", enableOobSwap as EventListener);
&lt;/code&gt;
    &lt;p&gt;You'll notice we've done the &lt;code&gt;outerHTML&lt;/code&gt; swap ourselves here, overriding HTMX entirely. I'm not a fan of this. I tried as many approaches as I could think of to get HTMX to do the swap - and, thus, leverage existing functionality HTMX provides for these (maintaining scroll position and focus and so on) - but did not succeed.&lt;/p&gt;
    &lt;p&gt;Nevertheless, this works for my purposes. I'm happy to leave the problem alone for now. Let's add some drag-and-drop functionality to our cards. In our card component:&lt;/p&gt;
    &lt;code&gt;import {MeshElement} from "../base/mesh-element.ts";

export class Card extends MeshElement {
  setupDragAndDrop() {
    this.one('.grip', grip =&amp;gt; {
      grip.draggable = true;
      this.addEventListener('dragstart', this.handleDragStart.bind(this));
      this.addEventListener('dragend', this.handleDragEnd.bind(this));
    });
  }

  handleDragStart(e: any) {
    e.dataTransfer.setData('text/plain', this.dataset.id);
    this.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
  }

  handleDragEnd() {
    this.classList.remove('dragging');
  }
}
&lt;/code&gt;
    &lt;p&gt;And in our column component:&lt;/p&gt;
    &lt;code&gt;import {MeshElement} from "../base/mesh-element.ts";

export class Column extends MeshElement {
  setupDropTarget() {
    this.addEventListener('dragover', this.handleDragOver.bind(this));
    this.addEventListener('drop', this.handleDrop.bind(this));
  }

  handleDragOver(e: any) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  }

  handleDrop(e: any) {
    e.preventDefault();
    this.classList.remove('drag-over');

    const cardId = e.dataTransfer.getData('text/plain');
    const columnId = this.dataset.id;
    if (!cardId || !columnId) {
      throw new Error('Missing card or column ID');
    }

    const position = this.calculateDropPosition(e);
    this.moveCard(cardId, +columnId, position);
  }

  async moveCard(cardId: number, columnId: number, position: number) {
    window.htmx.ajax('put', '/card', {
      swap: 'none',
      values: {
        action: 'move',
        cardID: cardId,
        columnID: columnId,
        position: position,
      }
    } as any);
  }
}
&lt;/code&gt;
    &lt;p&gt;This is great! This use case is precisely why HTMX provides the ajax JS API. With a bit of hacking, we've demonstrated that it's possible to use HTMX to handle modular SSR based on the premise of "component = endpoint". I'm pretty happy with how this has turned out.&lt;/p&gt;
    &lt;head rend="h2"&gt;Realtime Collaboration&lt;/head&gt;
    &lt;p&gt;From the moment I conceived of this project, one of the things I wanted to do was to support realtime collaboration with server-sent events (SSE). HTMX supports SSE with a standard plugin which is easy enough to set up:&lt;/p&gt;
    &lt;code&gt;&amp;lt;html lang="en" hx-ext="sse"&amp;gt;
&amp;lt;body hx-ext="sse" sse-connect="/sse" sse-swap="oob-update"&amp;gt;
&lt;/code&gt;
    &lt;p&gt;In theory this should just work once I've written my SSE back-end. I ended up using r3labs/sse for this, which I found very easy to use. We wrap this in a service and provide a "broadcast" method that sends OOB updates to all subscribed clients immediately:&lt;/p&gt;
    &lt;code&gt;func (s *SSEService) BroadcastOOBUpdate(component templ.Component) {
   var buf strings.Builder
   err := component.Render(context.Background(), &amp;amp;buf)
   if err != nil {
       s.log.Error("Failed to render component for SSE broadcast", "error", err)
       return
   }

   html := buf.String()
   s.server.Publish("oob-updates", &amp;amp;sse.Event{
       Event: []byte("oob-update"),
       Data:  html,
   })
}
&lt;/code&gt;
    &lt;p&gt;Then we call it in our handler:&lt;/p&gt;
    &lt;code&gt;func (h *Handler) OnCardMoved(event *services.CardMovedEvent) {
  column, err := h.CardService.GetColumn(event.ToColumnID)
  if err == nil {
    component := h.RenderComponent(column, true)
    h.SSEService.BroadcastOOBUpdate(component)
  } else {
    h.Log.Error("Failed to get to-column for SSE broadcast", "columnID", event.ToColumnID, "error", err)
  }

  column, err = h.CardService.GetColumn(event.FromColumnID)
  if err == nil {
    h.SSEService.BroadcastOOBUpdate(h.RenderComponent(column, true))
  } else {
    h.Log.Error("Failed to get from-column for SSE broadcast", "columnID", event.FromColumnID, "error", err)
  }
}
&lt;/code&gt;
    &lt;p&gt;This makes our back-end code a lot cleaner! We no longer need to pass the request context around with our event, and we no longer need to append a bunch of OOB updates to the response. Having done this both ways, I have come to believe that SSE is the most natural way to do these kind of asynchronous cross-context modular updates, even with only a single user.&lt;/p&gt;
    &lt;p&gt;I was hoping this would also allow me to get rid of my &lt;code&gt;outerHTML&lt;/code&gt; hack, but alas it was not to be. The longer I worked on this project, the more it became clear to me that I'm not really using HTMX the way it's intended to be used. More importantly, there is a lot of other HTMX functionality that I'm not using at all.&lt;/p&gt;
    &lt;p&gt;Naturally, I was intrigued to see if I could just get rid of HTMX entirely. So I did, and the result is a lot cleaner and easier to reason about. We are left with two JS modules - one for the custom elements:&lt;/p&gt;
    &lt;code&gt;export class MeshElement extends HTMLElement {
  connectedCallback() {
    if (!this.shadowRoot) {
      const root = this.attachShadow({ mode: 'open' });
      const template = this.querySelector('template[shadowrootmode="open"]');
      if (template) {
        root.appendChild((template as any).content.cloneNode(true));
      }
    }
    this.bindFormHandlers();
  }

  protected bindFormHandlers() {
    const supported = [
      'get', 'post', 'put', 'patch', 'delete',
    ];

    supported.forEach(verb =&amp;gt; {
      const attribute = "mesh-" + verb;
      this.all('[' + attribute + ']', el =&amp;gt; {
        const form = el as HTMLFormElement;
        form.addEventListener('submit', (event: Event) =&amp;gt; {
          event.preventDefault();
          const method = verb.toUpperCase();
          const url = form.getAttribute(attribute);

          if (!url) {
            console.error('No URL specified for form submission');
            return;
          }

          const formData = new FormData(form);
          this.makeRequest(method, url, formData)
            .then(response =&amp;gt; {
              if (response.ok) {
                return response.text();
              } else {
                throw new Error('Form submission failed: ' + response.statusText);
              }
            })
            .then(html =&amp;gt; this.outerHTML = html)
            .catch(error =&amp;gt; console.error('Form submission failed:', error));
        });
      });
    });
  }

  protected async makeRequest(method: string, url: string, formData: FormData): Promise&amp;lt;Response&amp;gt; {
    const options: RequestInit = {
      method,
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
      },
    };

    if (method === 'GET') {
      const params = new URLSearchParams(formData as any);
      url += (url.includes('?') ? '&amp;amp;' : '?') + params.toString();
    } else {
      options.body = formData;
    }

    return fetch(url, options);
  }
}
&lt;/code&gt;
    &lt;p&gt;and one for SSE:&lt;/p&gt;
    &lt;code&gt;export class SSEManager {
  private eventSource: EventSource | null = null;

  constructor(private url: string = '/sse?stream=oob-updates') {
    this.connect();
  }

  private connect() {
    if (this.eventSource) {
      this.eventSource.close();
    }

    this.eventSource = new EventSource(this.url);

    this.eventSource.addEventListener('oob-update', (event) =&amp;gt; {
      this.processOOBUpdate(event as MessageEvent);
    });

    this.eventSource.onerror = (error) =&amp;gt; {
      console.error('SSE connection error:', error);
      setTimeout(() =&amp;gt; this.connect(), 5000);
    };
  }

  private processOOBUpdate(html: string) {
    const template = document.createElement('template');
    template.innerHTML = html.trim();

    for (const content of template.content.querySelectorAll('[mesh-swap-oob]')) {
      const id = content.id;
      const target = this.findInShadow(document, id);

      if (target) {
        target.outerHTML = content.outerHTML;
      } else {
        console.warn('OOB target not found:', id);
      }
    }
  }

  private findInShadow(root: Document | ShadowRoot | Element, id: string): Element | null {
    let element = root.querySelector(`#${id}`);
    if (element) {
      return element;
    }

    const allElements = root.querySelectorAll('*');
    for (const el of allElements) {
      if (el.shadowRoot) {
        element = this.findInShadow(el.shadowRoot, id);
        if (element) {
          return element;
        }
      }
    }

    return null;
  }
}

new SSEManager();
&lt;/code&gt;
    &lt;p&gt;And that's it! That's all the JS it takes to replace all of HTMX that I'm using for this project.&lt;/p&gt;
    &lt;head rend="h2"&gt;Takeaways&lt;/head&gt;
    &lt;p&gt;This was a fun project. First, let me say, if you're writing apps with jQuery, please check out HTMX! It's very dev-friendly and a proper 2020s way of doing that kind of dev. Personally, however, I am happy to have convinced myself it's not for me.&lt;/p&gt;
    &lt;p&gt;I, for one, don't believe the HTMX spec, or something like it, will be merged back into HTML, at least until it can answer one fundamental question: what is the default swap behaviour? When I declare a &lt;code&gt;form&lt;/code&gt; with a &lt;code&gt;method&lt;/code&gt;, I understand how that form will behave: it will reload the entire page. What happens when I declare a &lt;code&gt;form&lt;/code&gt; with &lt;code&gt;hx-post&lt;/code&gt; or equivalent? The default behaviour in HTMX is that the &lt;code&gt;innerHTML&lt;/code&gt; of the form itself becomes the swap target. This does not seem like a sane default to me.&lt;/p&gt;
    &lt;p&gt;So what's the answer? Well, as anyone who's aware of the state of the art on SSR will have noticed, all I've actually done with MESH is reinvent HotWire, LiveWire, LiveView and friends. Personally, I find this encouraging! It is clear to me that there is a kind of best practice to be found here.&lt;/p&gt;
    &lt;p&gt;I believe the default swap behaviour should be: always swap the whole component. One component, one endpoint. This is how these frameworks do it. My problem with them is they lock you into a specific back-end. I believe the principle is generalisable, that there is a way to do this kind of modular SSR in a back-end-agnostic way, like HTMX does. MESH is my attempt to show what that would look like.&lt;/p&gt;
    &lt;p&gt;I will certainly keep using MESH for my projects, fleshing it out as I go. The Trello clone will always be online for anyone to play with.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ajmoon.com/posts/mesh-i-tried-htmx-then-ditched-it"/><published>2025-09-23T12:18:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45345970</id><title>Silicon Valley hiring in turmoil after new H-1B fees, move spurs offshoring talk</title><updated>2025-09-23T13:43:09.313320+00:00</updated><content>&lt;doc fingerprint="5e2590c93f871dde"&gt;
  &lt;main&gt;
    &lt;p&gt;SAN FRANCISCO/NEW YORK, Sept 23 (Reuters) - The Trump administration's hefty new visa fees for H-1B workers have prompted high-level talks inside companies in Silicon Valley and beyond on the possibility of moving more jobs overseas - precisely the outcome the policy was meant to stop.&lt;/p&gt;
    &lt;p&gt;U.S. President Donald Trump on Friday announced the change to the visa program that has long been a recruitment pathway for tech firms and encouraged international students to pursue postgraduate courses in the United States.&lt;/p&gt;
    &lt;p&gt;Sign up here.&lt;/p&gt;
    &lt;p&gt;While the $100,000 levy applies only to new applicants - not current holders as first announced - the confusion around its roll-out and steep cost are already leading companies to pause recruitment, budgeting and workforce plans, according to Reuters interviews of founders, venture capitalists and immigration lawyers who work with technology companies.&lt;/p&gt;
    &lt;p&gt;"I have had several conversations with corporate clients ... where they have said this new fee is simply unworkable in the U.S., and it's time for us to start looking for other countries where we can have highly skilled talent," said Chris Thomas, an immigration attorney at Colorado-based law firm Holland &amp;amp; Hart. "And these are large companies, some of them household names, Fortune 100 type companies, that are saying, we just simply cannot continue."&lt;/p&gt;
    &lt;p&gt;About 141,000 new applications for H-1B were approved in 2024, according to Pew Research. Though Congress caps new visas at 65,000 a year, total approvals run higher because petitions from universities and some other categories are excluded from the cap. Computer-related jobs accounted for a majority of the new approvals, the Pew data showed.&lt;/p&gt;
    &lt;head rend="h2"&gt;FIRMS WILL CUT H-1B WORKERS&lt;/head&gt;
    &lt;p&gt;The Trump administration and critics of the H-1B program have said that it has been used to suppress wages and curbing it opens more jobs for U.S. tech workers. The H-1B visa program has also made it more challenging for college graduates trying to find IT jobs, Trump's announcement on Friday said.&lt;/p&gt;
    &lt;p&gt;The visa previously cost employers only a few thousand dollars. But the new $100,000 fee would flip the equation, making hiring talent in countries like India - where wages are lower and Big Tech now builds innovation hubs instead of back offices - more attractive, experts and executives told Reuters.&lt;/p&gt;
    &lt;p&gt;"We probably have to reduce the number of H-1B visa workers we can hire," said Sam Liang, co-founder and CEO of popular artificial intelligence transcription start-up Otter. "Some companies may have to outsource some of their workforce. Hire maybe in India or other countries just to walk around this H-1B problem."&lt;/p&gt;
    &lt;head rend="h2"&gt;BAD FOR STARTUPS&lt;/head&gt;
    &lt;p&gt;While conservatives have long applauded Trump's wide-ranging immigration crackdown, the H-1B move has drawn support from some liberal quarters as well.&lt;/p&gt;
    &lt;p&gt;Netflix (NFLX.O) co-founder and well-known Democrat donor Reed Hastings - who said he has followed H-1B politics for three decades - argued on X that the new fees would remove the need for a lottery and instead reserve visas for "very high value jobs" with greater certainty.&lt;/p&gt;
    &lt;p&gt;But Deedy Das, a partner at venture capital firm Menlo Ventures that has invested in startups such as AI firm Anthropic, said "blanket rulings like this are rarely good for immigration" and would disproportionately affect startups.&lt;/p&gt;
    &lt;p&gt;Unlike large technology companies whose compensation packages are a combination of cash and stock, pay packages of startups typically lean towards equity as they need cash to build the business.&lt;/p&gt;
    &lt;p&gt;"For larger companies, the cost is not material. For smaller companies, those with fewer than 25 employees, it's much more significant," said Das. "Big tech CEOs expected this and will pay. For them, fewer small competitors is even an advantage. It’s the smaller startups that suffer most."&lt;/p&gt;
    &lt;head rend="h2"&gt;INNOVATION AT RISK&lt;/head&gt;
    &lt;p&gt;The policy could also mean fewer of the talented immigrants who often go on to launch new firms, analysts said.&lt;/p&gt;
    &lt;p&gt;More than half of U.S. startups valued at $1 billion or more had at least one immigrant founder, according to a 2022 report from the National Foundation for American Policy, a nonpartisan think tank based in Virginia.&lt;/p&gt;
    &lt;p&gt;Several lawyers said startups they represent are pinning hopes on lawsuits that argue the administration overstepped by imposing a fee beyond what Congress envisioned, betting courts would dilute the rule before costs cripple hiring.&lt;/p&gt;
    &lt;p&gt;If not, "we will see a pullback from the smartest people around the world," said Bilal Zuberi, founder of Silicon Valley-based venture capital firm Red Glass Ventures, who began his career in the U.S. on an H-1B visa.&lt;/p&gt;
    &lt;p&gt;Reporting by Aditya Soni in San Francisco and Echo Wang in New York; Additional reporting by Krystal Hu in New York; Editing by Sayantani Ghosh and Kate Mayberry&lt;/p&gt;
    &lt;p&gt;Our Standards: The Thomson Reuters Trust Principles.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.reuters.com/sustainability/sustainable-finance-reporting/silicon-valley-hiring-turmoil-after-new-h-1b-visa-fees-move-spurs-offshoring-2025-09-23/"/><published>2025-09-23T12:18:56+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45346219</id><title>Getting More Strategic</title><updated>2025-09-23T13:43:09.193420+00:00</updated><content>&lt;doc fingerprint="66e3193529eb0183"&gt;
  &lt;main&gt;
    &lt;p&gt;Strategy – how to be strategic, and how to be seen as strategic – is one of my ongoing obsessions. Years ago, I read Good Strategy/Bad Strategy, and it’s guided my thinking ever since.&lt;/p&gt;
    &lt;p&gt;One of the things that book helps clarify is that being strategic and being seen as strategic can work against each other – good strategy is obvious, and usually it is executed on more than it’s talked about. An ongoing frustration for other under indexed people in tech I talk to, as we build products and organizations without drama, whilst being told we’re just “not strategic” enough. The strategy required to sidestep problems that never happen or that creates optionality to quickly resolve is somehow invisible.&lt;/p&gt;
    &lt;p&gt;But I think as we rise up the org chart, strategy is the job. Strategy defines your job, and evolves it to meet the organizational need. Not just one strategy, but multiple strategies that need to fit together and be coherent.&lt;/p&gt;
    &lt;p&gt;Your product strategy. Your technical strategy. Your team strategy. Your you-as-a-leader-but-also-a-human-being strategy.&lt;/p&gt;
    &lt;p&gt;As we find our groove in the resource constrained era we are in currently as opposed to the everything strategy of ZIRP (zero interest rates), by definition we need to make more harder choices, and strategy is how we know what those choices are, and when and how to make them.&lt;/p&gt;
    &lt;p&gt;This is the first rule of strategy: strategy is contextual. A crucial insight, because often when leaders fail, it’s because they tried to apply a strategy that worked in one context, to a different one, without considering the difference.&lt;/p&gt;
    &lt;p&gt;This is true when you change companies, and I think the reason why there is such a high failure rate for executive hires*. Ones I’ve watched fail came in with a playbook, usually including the org chart they wanted, and expended all the goodwill and capital in pursuit of that goal, whilst achieving very little.&lt;/p&gt;
    &lt;p&gt;It’s also the case that when the market changes, our strategy must change. One of the core features of ZIRP-era engineering leadership was hiring for the sake of it, and number of people as a proxy for many things it maybe (probably) shouldn’t have been. One of the biggest shifts has been the layoffs and the mantra of “doing more with less”. Regardless of personal feelings on this topic and what is actually realistic, it is apparent that hard choices and discipline are a key feature of the post-ZIRP era.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;We could talk about these strategies – product, technical, team, you, like some balanced stool. But realistically, I think it’s more like the image above. The product strategy is a storm (especially pre-product market fit). The technical strategy is a half built shelter (you’ll get to it properly once you have product market fit). The team strategy is an umbrella (the most flexible and controllable). And the you as a human strategy is nowhere to be found.&lt;/p&gt;
    &lt;p&gt;This is the second rule of strategy: timeframe varies with the level of uncertainty you’re navigating.&lt;/p&gt;
    &lt;p&gt;The idea of a proximate objective is the next logical step in pursuit of your overall strategy, if you achieve it, you confirm your course. If you fail, you learn and reconsider your options.&lt;/p&gt;
    &lt;p&gt;We often talk about strategy like it’s defining the end state, setting and describing the destination. But strategy is about defining the incremental steps – the proximate objectives – that can take us towards that end state. Strategy is understanding where we are at – context – and the path from there to where we need to go**. Any strategic “plan”, is best executed as a set of proximate objectives.&lt;/p&gt;
    &lt;p&gt;This mistake of how strategy is talked about is why it can be so hard for some people to be seen as strategic. When we think strategy is depicting the end state, and undervalue the proximate objective definitions and execution that it takes to get there, the person who talks more about the end state can be seen as more strategic than the person who actually reaches it.&lt;/p&gt;
    &lt;p&gt;We need four things for strategy:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Time – energy – to think deeply about it&lt;/item&gt;
      &lt;item&gt;Context to situate it&lt;/item&gt;
      &lt;item&gt;Direction to identify proximate objectives&lt;/item&gt;
      &lt;item&gt;Expertise to chart the path&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;All of these need to come together to create and deliver an effective strategy. It’s a balance between all of them, leaning into different ones at different times.&lt;/p&gt;
    &lt;p&gt;To illustrate, why each of these are important, I think it’s helpful to consider the extremes of each.&lt;/p&gt;
    &lt;p&gt;When someone is all time, we call them a political operator. This is the person who manages up to get credit, but the people underneath them ask what it is that they do.&lt;/p&gt;
    &lt;p&gt;When someone is all context, we say they can’t see the forest for the trees. They miss the big picture fixating on the details.&lt;/p&gt;
    &lt;p&gt;When someone is all proximate objectives, we call them a thought leader and it’s not a compliment. Execution is an exercise left to the reader.&lt;/p&gt;
    &lt;p&gt;When someone is all expertise, they present solutions in search of problems. They don’t seem to understand impact.&lt;/p&gt;
    &lt;p&gt;Devaluing these things gives us a reason not to do them. So many engineers will tell you they hate politics, and yes, there is definitely toxic workplace politics. But there’s a baseline where politics is getting things done. It’s convincing people that the idea is good, and that it can be executed. My favourite explanation of this is Nik Means talking about Eiffel’s tower.&lt;/p&gt;
    &lt;p&gt;Context is important. Yes, you’re delivering something bigger, but the details need to add up. You can’t gloss over all of them, you need to learn how to distinguish which are important and which are not.&lt;/p&gt;
    &lt;p&gt;Proximate objectives chart your path. They explain the steps you expect to take between where you are and where you plan to be. Explaining them helps bring people along with you.&lt;/p&gt;
    &lt;p&gt;Expertise is ultimately how you deliver things, you need to understand how to deliver and how to validate. Execution is when the strategy becomes real.&lt;/p&gt;
    &lt;p&gt;Strategy is hard, and being seen as strategic – especially for under-indexed people – can be even harder. We need all of these four things to develop our strategy and move things forward. And we need to be recognized as doing all of them in order to be seen as strategic.&lt;/p&gt;
    &lt;p&gt;Coming back to our problems of strategy – the product, technical, team, and you.&lt;/p&gt;
    &lt;p&gt;Product strategy drives your proximate objectives. Whilst product strategy may seem like the job of product management – and to a certain extent it is, but hopefully your product team does not operate in a vacuum. Engineering needs to provide input, but engineering also needs to understand the product strategy, because everything else needs to fit in with it.&lt;/p&gt;
    &lt;p&gt;Your team exists for a purpose, and the clearest part of that purpose is delivery of the product strategy. You need direction and alignment to identify proximate objectives. Direction – where the product strategy is going, alignment on what is most important, and what will be delivered when.&lt;/p&gt;
    &lt;p&gt;Technical strategy evolves the context. Your technical strategy is often about surfacing the underlying work that allows you to deliver on the business need. It has to be well justified, because ideally it’s pro-active rather than reactive – i.e. you implement it before the emergency rather than during it.&lt;/p&gt;
    &lt;p&gt;Any technical strategy needs to start with what problem is being solved. A problem is not the absence of a technology – unless, I understand, that technology is AI – but rather the problems that technology would solve. So “we don’t have containers” is not a problem. Number of incidents or environment inconsistencies is. Good technical strategy changes the context over time – making more possible – like building roads on the territory you’ve chartered.&lt;/p&gt;
    &lt;p&gt;Your team strategy must be grounded in execution. The product and technical strategy define the organizational need. Your team strategy is about how your team is going to meet that organizational need, within the constraints of the business.&lt;/p&gt;
    &lt;p&gt;Post-ZIRP, this has been a big challenge. Doing more with less means having fewer people, less flexibility, less margin of error. You need to figure out how you retain key people when money is tighter and promotions are harder to come by. But amidst all of these challenges, you have to execute. If in a ZIRP era, you could build the team then deliver, now you must deliver as you build the team.&lt;/p&gt;
    &lt;p&gt;The you as a person strategy requires that you carve out time to be strategic. In this market, many of us are doing-doing-doing to prove that we’re worth keeping around, but at some point, your job is no longer what is being done this week, and more about what is possible next quarter (and the quarters after that). It’s never been easier to be DDOS’d by the job and think that means we’re doing a good one, but you could be missing key things if you’re too focused on the day to day, or week to week and not enough on the month to month.&lt;/p&gt;
    &lt;p&gt;To wrap up, strategy is about more than just a vision; it’s about navigating the path to get there. We need to balance time, context, direction, and expertise to ensure we’re not only seen as strategic but are genuinely creating a strategic path forward for the teams we’re responsible for – and our own evolving needs to competently lead them.&lt;/p&gt;
    &lt;p&gt;* I can’t find a great source here, although the search results suggest it’s commonly accepted #. # possibly, which links out to a site requiring login.&lt;/p&gt;
    &lt;p&gt;** I love Tanya Reilly’s description of the map in The Staff Engineer’s Path.&lt;/p&gt;
    &lt;p&gt;Image credit: Joe Groove&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://cate.blog/2025/09/23/getting-more-strategic/"/><published>2025-09-23T12:41:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45346387</id><title>Why Zig Feels More Practical Than Rust</title><updated>2025-09-23T13:43:08.985220+00:00</updated><content>&lt;doc fingerprint="9fcbdc9bb863a24c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why Zig Feels More Practical Than Rust for Real-World CLI Tools&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;So when it comes to memory management there are two terms you really need to know, the stack and the heap.&lt;/p&gt;
    &lt;p&gt;The stack is a region of memory that stores temporary data that is only needed for a short period of time. It operates in a last-in, first-out (LIFO) manner, meaning that the most recently added data is the first to be removed, as the name suggests. Basically imagine a stack of plates, if you wanna remove one plate you remove the top one, remove the middle plate and disaster awaits in this analogy. The stack is typically used for storing function parameters, local variables, and return addresses. It is fast and efficient because it has a fixed size and does not require dynamic memory allocation.&lt;/p&gt;
    &lt;p&gt;The size of the stack is usually limited, and if a program tries to use more stack space than is available, it can result in a stack overflow error. This can happen if a function calls itself recursively too many times or if a program allocates too much memory on the stack.&lt;/p&gt;
    &lt;p&gt;Whereas the heap as the name suggests is a region of memory that is used for dynamic memory allocation. Unlike the stack, the heap does not have a fixed size and can grow or shrink as needed. The heap is typically used for storing data that needs to persist beyond the lifetime of a single function call, such as objects or data structures that are created at runtime. Imagine the heap as a pile of clothes in a disorganized household, you can add or remove clothes as needed and as long as the pile isn’t too big you can find what you need with relative speed and ease. But it will quickly become a nightmare if you let it grow out of control. The heap is managed by the operating system and requires dynamic memory allocation, which can be slower and less efficient than stack allocation.&lt;/p&gt;
    &lt;p&gt;The heap can also become fragmented over time, since we do not always store data in a contiguous block of memory. This can lead to performance issues and make it more difficult to allocate large blocks of memory.&lt;/p&gt;
    &lt;head rend="h3"&gt;Rust’s Borrow Checker&lt;/head&gt;
    &lt;p&gt;Rust’s borrow checker is a a pretty powerful tool that helps ensure memory safety during compile time. It enforces a set of rules that govern how references to data can be used, preventing common programming memory safety errors such as null pointer dereferencing, dangling pointers and so on. However you may have notice the word compile time in the previous sentence. Now if you got any experience at systems programming you will know that compile time and runtime are two very different things. Basically compile time is when your code is being translated into machine code that the computer can understand, while runtime is when the program is actually running and executing its instructions. The borrow checker operates during compile time, which means that it can only catch memory safety issues that can be determined statically, before the program is actually run.&lt;/p&gt;
    &lt;p&gt;This means that basically the borrow checker can only catch issues at comptime but it will not fix the underlying issue that is developers misunderstanding memory lifetimes or overcomplicated ownership. The compiler can only enforce the rules you’re trying to follow; it can’t teach you good patterns, and it won’t save you from bad design choices.&lt;/p&gt;
    &lt;head rend="h3"&gt;Story TIme&lt;/head&gt;
    &lt;p&gt;Last weekend I’ve made a simple CLI tool for myself to help me manage my notes it parses &lt;code&gt;~/.notes&lt;/code&gt; into a list of notes, then builds a tag index mapping strings to references into that list. Straightforward, right? Not in Rust. The borrow checker blocks you the moment you try to add a new note while also holding references to the existing ones. Mutability and borrowing collide, lifetimes show up, and suddenly you’re restructuring your code around the compiler instead of the actual problem.&lt;/p&gt;
    &lt;p&gt;In Zig, we would just allocate the list with an allocator, store pointers into it for the tag index, and mutate freely when we need to add or remove notes. No lifetimes, no extra wrappers, no compiler gymnastics, that’s a lot more straightforward.&lt;/p&gt;
    &lt;head rend="h3"&gt;But Dave isn’t that the exact point of Rust’s borrow checker?&lt;/head&gt;
    &lt;p&gt;Yes it is, however by using Zig I managed to get most of the benefits of Rust’s memory safety without the complexity or ceremony of the borrow checker. All it took was some basic understanding of memory management and a bit of discipline. I was able to produce two CLI’s that are both memory safe and efficient however the Zig one was way more straightforward and easier to reason about and took less time to write.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is Safety, Really for CLI Tools?&lt;/head&gt;
    &lt;p&gt;This is where a lot of developers trip up, Rust markets itself as a language that produces safe software, great marketing hook, but one tiny problem, memory safety is one puzzle piece of overall software safety. I’m not sure if the Rust foundation does this on purpose sort of a blanket statement to make it seem like memory safety is the end all be all of software safety, or if they just don’t want to constantly prefix safety with memory safety(even though they should).&lt;/p&gt;
    &lt;p&gt;But back to the main point, memory safety is just one aspect of software safety. You can argue if it’s a big or small piece of the puzzle, I’d say it depends on the software and use-case but it’s definitely not the only piece.&lt;/p&gt;
    &lt;p&gt;So What exactly is safety in terms of CLI tools?&lt;/p&gt;
    &lt;p&gt;Memory safety alone does not make a program safe. Your CLI tool can still crash, produce wrong results, corrupt files, leak sensitive data, be vulnerable to various types of attacks or just behave in a way that is not expected. Let’s go back to my &lt;code&gt;Notes CLI&lt;/code&gt; it’s rust version may never segfault but it could silently overwrite my index or tags or corrupt my files if I make a mistake in my logic, or perhaps it could store my file in a temporary location that is world readable, exposing my notes to anyone on the system. Is that safe? No.&lt;/p&gt;
    &lt;p&gt;Would using Zig solve any of those issues automatically, also no. Is my example a bit contrived, yes, but it illustrates the point that memory safety is not the only thing that matters when it comes to software safety.&lt;/p&gt;
    &lt;p&gt;In fact you should also consider other aspects of safety such as:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Predictable Behavior: The program should do what the user expects, even when input is malformed or unexpected. A CLI that panics on a missing file or fails silently on a corrupted note is not safe.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Avoiding Crashes or Silent Corruption: The program should handle errors gracefully, providing meaningful feedback to the user instead of crashing or corrupting data. A CLI that crashes on a malformed note or silently overwrites existing notes is not safe.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Manageable Performance: The program should perform well under expected workloads, avoiding excessive resource consumption or slowdowns. A CLI that becomes unresponsive when managing a large number of notes is not safe. This is where it really helps to understand memory allocations and performance characteristics of your language of choice.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sensitive Data Handling: The program should protect sensitive data from unauthorized access or exposure. A CLI that stores notes in a world-readable temporary file is not safe.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Robustness Against Attacks: The program should be resilient against common attack vectors, such as injection attacks or buffer overflows. A CLI that can be exploited to execute arbitrary code or corrupt data is not safe. And this is precisely where Rust’s memory safety shines, it can help prevent certain types of vulnerabilities that arise from memory mismanagement. However, it’s not a silver bullet that guarantees overall safety.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;The Borrow Checker: Strengths and Limitations&lt;/head&gt;
    &lt;p&gt;The borrow checker is impressive. It prevents dangling references, double frees, and mutable aliasing at compile time, things that would otherwise cause segfaults or undefined behavior. It’s why Rust can claim “memory safe without a garbage collector.”&lt;/p&gt;
    &lt;head rend="h3"&gt;Strengths:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Zero data races / mutable aliasing issues: The compiler guarantees that only one mutable reference exists at a time, and that immutable references cannot be combined with mutable ones.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Strong compile-time guarantees: Many memory-related bugs are caught before you even run the program.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Early bug detection: You find mistakes before shipping code, which is a huge win in long-lived services or concurrent systems.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Limitations / Pain Points:&lt;/head&gt;
    &lt;p&gt;Cognitive overhead: You’re constantly thinking about lifetimes, ownership, and borrow scopes, even for simple tasks. A small CLI like my notes tool suddenly feels like juggling hot potatoes.&lt;/p&gt;
    &lt;p&gt;Boilerplate and contortions: You end up introducing clones, wrappers (Rc, RefCell), or redesigning data structures just to satisfy the compiler. Your code starts serving the compiler, not the problem.&lt;/p&gt;
    &lt;p&gt;Compile-time only: The borrow checker cannot fix logic bugs, prevent silent corruption, or make your CLI behave predictably. It only ensures memory rules are followed.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Edge cases get messy: Shared caches, global state, or mutable indexes often trigger lifetime errors that are annoying to work around.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;At this point, the Rust borrow checker can feel more like a mental tax than a helpful tool, especially for short-lived CLI projects. You’re trading developer ergonomics for a compile-time guarantee that, in many CLI scenarios, may be overkill.&lt;/p&gt;
    &lt;head rend="h2"&gt;Zig’s Approach to Safety and Simplicity&lt;/head&gt;
    &lt;p&gt;Zig takes a different approach to safety and simplicity. It provides manual memory management with optional safety checks, allowing developers to choose the level of control they need. This can lead to more straightforward code for certain use cases, like CLI tools. However where it really shines is how it does manual memory management, I’ve briefly touched upon this in my other blog post Zig Allocators Explained.&lt;/p&gt;
    &lt;p&gt;But basically long story short Zig gives you allocators, a set of tools that helps you manually manage your memory in a more structured and predictable way. You can choose to use a general purpose allocator like the &lt;code&gt;std.heap.page_allocator&lt;/code&gt; or you can create your own custom allocator that fits your specific needs. This allows you to have more control over how memory is allocated and deallocated, which can lead to more efficient and predictable memory usage. This combined with Zig’s &lt;code&gt;defer&lt;/code&gt; statement which allows you to schedule cleanup code to run when a scope is exited, makes it easy to manage resources gives you most of the power of Rust’s borrow checker at your disposal without the complexity and ritual. However it asks one thing in return of you, discipline, your software will be only as safe as you make it. We can make the same claim about Rust, you can throw &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;unsafe&lt;/code&gt; around your code and throw away all the benefits of the borrow checker in a heartbeat.&lt;/p&gt;
    &lt;p&gt;The two languages are polar opposites in this regard, Zig places the burden on the developer and makes it easy for them to produce memory safe software, whereas Rust places the burden on the compiler and makes it hard for developers to produce memory unsafe software.&lt;/p&gt;
    &lt;p&gt;Back to the main point, zig’s approach to memory management is in my subjective opinion more practical for most of my use cases, especially for CLI tools. It allows me to write straightforward code that is easy to reason about and maintain, without the overhead of the borrow checker. I can allocate a list of notes, store pointers to them in a tag index, and mutate the list freely when I need to add or remove notes. No lifetimes, no extra wrappers, no compiler gymnastics, that’s a lot more straightforward.&lt;/p&gt;
    &lt;p&gt;Oh I almost forgot, Zig also has the &lt;code&gt;comptime&lt;/code&gt; feature which allows you to execute code at compile time. This can be useful for generating code, performing static analysis, or optimizing performance and even for testing which is a really nice bonus and can be a small helper when it comes to memory safety.&lt;/p&gt;
    &lt;head rend="h2"&gt;Developer Ergonomics Matter and Developers are not Idiots&lt;/head&gt;
    &lt;p&gt;When developing software we want to be productive and efficient, most of all we want to be correct and produce good software, however we also want to enjoy the process of creation and not feel like we are fighting the tools we use. Developer ergonomics is a term that refers to how easy and comfortable it is to use a programming language or framework. It encompasses things like syntax, tooling, documentation, and community support. A language with good developer ergonomics can make it easier to write correct code, while a language with poor developer ergonomics can make it harder to do so. I’d say as it currently stands Rust has poor developer ergonomics but produces memory safe software, whereas Zig has good developer ergonomics and allows me to produce memory safe software with a bit of discipline.&lt;/p&gt;
    &lt;p&gt;I personally usually prefer languages where I do not have to succumb to too much ceremony and ritual to get things done, I want to be able to express my ideas in code without having to constantly think about the underlying mechanics of the language and yet I want to be responsible and produce good software. So with C and C++ this was a tiny bit harder as you basically had to learn some useful and practical memory management patterns and techniques, Zig comes with them baked in.&lt;/p&gt;
    &lt;p&gt;I feel like Zig really respects it’s developers and treats them like adults, it gives you the tools and expects you to use them wisely. Rust on the other hand feels like it treats developers like children that need to be constantly supervised and guided, which can be frustrating and demotivating.&lt;/p&gt;
    &lt;p&gt;Developers are not idiots, sure even the smartest amongst us still produce memory safety issues or bugs in their software and it’s silly to assume that with enough training and practice we can become perfect developers, but we can become better developers. We can learn from our mistakes and improve our skills, we can learn to write better code and produce better software.&lt;/p&gt;
    &lt;p&gt;It’s not good to abstract that away to the compiler and assume that it will magically make us better developers, I don’t personally think it will. In fact not to sound too cliche but I think that the journey to becoming a better developer is a series of mistakes and fixes, we learn from our mistakes and improve our skills. What does it say about a language that tries to abstract away the mistakes we make, does it really help us become better developers ?&lt;/p&gt;
    &lt;head rend="h2"&gt;Final Thoughts&lt;/head&gt;
    &lt;p&gt;Rust is amazing, if you’re building something massive, multithreaded, or long-lived, where compile-time guarantees actually save your life. The borrow checker, lifetimes, and ownership rules are a boon in large systems.&lt;/p&gt;
    &lt;p&gt;But for small, practical CLI tools? Rust can feel like overkill. That’s where Zig shines. Lightweight, fast, and straightforward, you get memory safety without constantly bending over backward for the compiler. You can allocate a list, track pointers, and mutate freely without extra wrappers, lifetimes, or contortions. Iterating feels natural, the code is easier to reason about, and you get stuff done faster.&lt;/p&gt;
    &lt;p&gt;Memory safety is important, but it’s just one piece of the puzzle. Predictable behavior, maintainable code, and robustness are just as critical, and that’s exactly why Zig often feels more practical for real-world CLI tools.&lt;/p&gt;
    &lt;p&gt;At the end of the day, it’s not about which language is “better.” It’s about what fits your workflow and the kinds of projects you build. For me, Zig hits the sweet spot: memory safe, low ceremony, and developer-friendly, perfect for small tools that actually get things done.&lt;/p&gt;
    &lt;head rend="h2"&gt;References&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Stack and the Heap&lt;/item&gt;
      &lt;item&gt;Zig Allocators Explained&lt;/item&gt;
      &lt;item&gt;Rustonomicon - The Dark Arts of Unsafe Rust&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Memory Management&lt;/item&gt;
      &lt;item&gt;Rust Documentation - The Rust Programming Language&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Comptime&lt;/item&gt;
      &lt;item&gt;Rust Documentation - Ownership&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Defer&lt;/item&gt;
      &lt;item&gt;Rust Documentation - Error Handling&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Error Handling&lt;/item&gt;
      &lt;item&gt;Rust Documentation - Concurrency&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Concurrency&lt;/item&gt;
      &lt;item&gt;Rust Documentation - Testing&lt;/item&gt;
      &lt;item&gt;Zig Documentation - Testing&lt;/item&gt;
      &lt;item&gt;Rust Documentation - Performance&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://dayvster.com/blog/why-zig-feels-more-practical-than-rust-for-real-world-cli-tools/"/><published>2025-09-23T12:56:00+00:00</published></entry></feed>