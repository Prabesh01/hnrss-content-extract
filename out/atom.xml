<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-05T06:15:00.879552+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45129031</id><title>Launch HN: Slashy (YC S25) – AI that connects to apps and does tasks</title><updated>2025-09-05T06:15:17.394757+00:00</updated><content>&lt;doc fingerprint="37d0c8b3cf91aeb9"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Hi HN! – We’re Pranjali, Dhruv and Harsha, building Slashy (&lt;/p&gt;https://www.slashy.ai&lt;p&gt;). We’re building a general agent that connects to apps and can read data across them and perform actions via custom tools, semantic search, and personalized memory. Here’s a demo: &lt;/p&gt;https://www.youtube.com/watch?v=OeApHMHhccA&lt;p&gt;.&lt;/p&gt;&lt;p&gt;While working on a previous startup, we realized we were spending more time doing busywork in apps than actually building product. We lost hundreds of hours scraping LinkedIn profiles, updating spreadsheets, updating investor reports, and communicating across multiple Slack channels. Our breaking point happened after I checked my screen time and realized I spent 4 hours a day in Gmail. We decided that we could create more value solving this than by working on the original startup (a code generation agent similar to Lovable).&lt;/p&gt;&lt;p&gt;Slashy is an AI agent that uses direct tool calls to services such as Gmail, Calendar, Notion, Sheets and more. We built all of our tools in-house since we found that most MCPs are low quality and add an unnecessary layer of abstraction. Through these tools, the agent is able to semantically search across your apps, get relevant information, and perform actions (e.g. send emails, create calendar events, etc). This solves the problem of context-switching and copy-pasting information from an app back and forth into ChatGPT.&lt;/p&gt;&lt;p&gt;Slashy integrates to 15 different services so far (G-Suite, Slack, Notion, Dropbox, Airtable, Outlook, Phone, Linear, Hubspot, and more). We use a single agent architecture (as we found this reduces hallucinations), and use our own custom tools—doing so allows the model to have higher quality as we can design them to work in a general agent structure, for example we use markdown for Slack/Notion instead of their native text structure.&lt;/p&gt;&lt;p&gt;So what makes Slashy different from the 100 other general agents?&lt;/p&gt;&lt;p&gt;- It Actually Takes Action: Unlike ChatGPT or Claude that just give you information, Slashy researches companies, creates Google Docs with findings, adds contacts to your CRM, schedules follow-ups, and sends personalized emails – all in one workflow.&lt;/p&gt;&lt;p&gt;- Cross-Tool Context: Most automation tools work in silos (one of the biggest problems with MCP). Slashy understands your data across platforms. It can read your previous Slack conversations about a prospect, check your calendar for availability, research their company online, and draft a personalized email. What powers this is our own semantic search functionality.&lt;/p&gt;&lt;p&gt;- User Action Graphs: Our agent over time has memory not just of past conversations, but also forms user actions graphs to know what actions are expected based on previous user conversations.&lt;/p&gt;&lt;p&gt;- No Technical Setup Required: While Zapier requires building complex flows and fails silently, Slashy works through natural language. Just describe what you want automated.&lt;/p&gt;&lt;p&gt;- Custom UI: For our tool calls we design custom UI for each of them to make the UX more natural.&lt;/p&gt;&lt;p&gt;Here are some examples of workflows people use us for:&lt;/p&gt;&lt;p&gt;▪ "Every day look at my calendar and send me a notion doc with in-depth backgrounds on everyone I’m meeting"&lt;/p&gt;&lt;p&gt;▪ "Find the emails of everyone who reacted to my latest LinkedIn post and send personalized outreach"&lt;/p&gt;&lt;p&gt;▪ "Can you make me an investor pitch deck with market research, competitive analysis, and financial projections"&lt;/p&gt;&lt;p&gt;▪ "Doing a full Nvidia Discounted Cash Flow (DCF) analysis"&lt;/p&gt;&lt;p&gt;Slashy.ai is live with a free tier (100 daily credits) along with 500 credits for any new account. You can immediately try out workflows like the ones above and we have a special code for HN (HACKERNEWS at checkout).&lt;/p&gt;&lt;p&gt;Hope you all enjoy Slashy as much as we do :)&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45129031"/></entry><entry><id>https://news.ycombinator.com/item?id=45129085</id><title>Stripe Launches L1 Blockchain: Tempo</title><updated>2025-09-05T06:15:17.290730+00:00</updated><content>&lt;doc fingerprint="b7db92cc193df788"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why create a&lt;lb/&gt;new blockchain?&lt;/head&gt;
    &lt;p&gt;Stablecoins enable instant, borderless, programmable transactions, but current blockchain infrastructure isn’t designed for them: existing systems are either fully general or trading-focused. Tempo is a blockchain designed and built for real-world payments.&lt;/p&gt;
    &lt;head rend="h1"&gt;Optimized for&lt;lb/&gt;real-world flows&lt;/head&gt;
    &lt;p&gt;Tempo was started by Stripe and Paradigm, with design input from Anthropic, Coupang, Deutsche Bank, DoorDash, Lead Bank, Mercury, Nubank, OpenAI, Revolut, Shopify, Standard Chartered, Visa, and more.&lt;/p&gt;
    &lt;p&gt;If you’re a company with large, real-world economic flows and would like to help shape the future of Tempo, get in touch.&lt;/p&gt;
    &lt;head rend="h1"&gt;Transform how &lt;lb/&gt;your business &lt;lb/&gt; moves money&lt;/head&gt;
    &lt;head rend="h2"&gt;01 :: Purpose-built payments capabilities&lt;/head&gt;
    &lt;p&gt;Optimize your financial flows with embedded payment features, including memo fields and batch transfers.&lt;/p&gt;
    &lt;head rend="h2"&gt;02 :: Speed and reliability&lt;/head&gt;
    &lt;p&gt;Process over 100,000 transactions per second (TPS) with sub-second finality, enabling real-time payments at a global scale.&lt;/p&gt;
    &lt;head rend="h2"&gt;03 :: Predictable low fees&lt;/head&gt;
    &lt;p&gt;Transform your cost structure with near-zero transaction fees that are highly predictable and can be paid in any stablecoin.&lt;/p&gt;
    &lt;head rend="h2"&gt;04 :: Built-in privacy measures&lt;/head&gt;
    &lt;p&gt;Protect your users by keeping important transaction details private while maintaining compliance standards.&lt;/p&gt;
    &lt;head rend="h1"&gt;Performant and &lt;lb/&gt;scalable for any &lt;lb/&gt;payments &lt;lb/&gt;use case&lt;/head&gt;
    &lt;head rend="h2"&gt;01 :: Remittances&lt;/head&gt;
    &lt;p&gt;Send money across borders instantly, securely, and at a fraction of traditional costs.&lt;/p&gt;
    &lt;head rend="h2"&gt;02 :: Global payouts&lt;/head&gt;
    &lt;p&gt;Pay anyone, anywhere, in any currency—without banking delays or fees.&lt;/p&gt;
    &lt;head rend="h2"&gt;03 :: Embedded finance&lt;/head&gt;
    &lt;p&gt;Build compliant, programmable payments—in any stablecoin—directly into your products.&lt;/p&gt;
    &lt;head rend="h2"&gt;04 :: Microtransactions&lt;/head&gt;
    &lt;p&gt;Enable sub-cent payments for digital goods and on-demand services.&lt;/p&gt;
    &lt;head rend="h2"&gt;05 :: Agentic commerce&lt;/head&gt;
    &lt;p&gt;Facilitate low-cost, instant payments for agents to autonomously execute transactions.&lt;/p&gt;
    &lt;head rend="h2"&gt;06 :: Tokenized deposits&lt;/head&gt;
    &lt;p&gt;Move customer funds onchain for instant settlement and efficient interbank transfers.&lt;/p&gt;
    &lt;head rend="h1"&gt;Technical&lt;lb/&gt;features&lt;/head&gt;
    &lt;head rend="h2"&gt;01 :: Fee flexibility&lt;/head&gt;
    &lt;p&gt;Pay transaction fees in any stablecoin.&lt;/p&gt;
    &lt;head rend="h2"&gt;02 :: Dedicated payments lane&lt;/head&gt;
    &lt;p&gt;Transfer funds cheaply and reliably in blockspace that’s isolated from other activity.&lt;/p&gt;
    &lt;head rend="h2"&gt;03 :: Stablecoin interoperability&lt;/head&gt;
    &lt;p&gt;Swap stablecoins, including custom-issued ones, natively with low fees.&lt;/p&gt;
    &lt;head rend="h2"&gt;04 :: Batch transfers&lt;/head&gt;
    &lt;p&gt;Send multiple transactions onchain at once with native account abstraction.&lt;/p&gt;
    &lt;head rend="h2"&gt;05 :: Blocklists / allowlists&lt;/head&gt;
    &lt;p&gt;Meet compliance standards by setting user-level permissions for transactions.&lt;/p&gt;
    &lt;head rend="h2"&gt;06 :: Memo fields&lt;/head&gt;
    &lt;p&gt;Speed up reconciliation with offchain transactions by adding context that’s compatible with ISO 20022 standards.&lt;/p&gt;
    &lt;head rend="h1"&gt;Frequently&lt;lb/&gt;asked questions&lt;/head&gt;
    &lt;head rend="h2"&gt;01 :: How is Tempo different from other blockchains?&lt;/head&gt;
    &lt;p&gt;Tempo is an EVM-compatible L1 blockchain, purpose-built for payments. It doesn’t displace other general-purpose blockchains; rather, it incorporates design choices that meet the needs of high-volume payment use cases. These include predictable low fees in a dedicated payments lane, stablecoin neutrality, a built-in stablecoin exchange, high throughput, low latency, private transactions, payment memos compatible with standards like ISO 20022, compliance hooks, and more.&lt;/p&gt;
    &lt;head rend="h2"&gt;02 :: Who can build on Tempo?&lt;/head&gt;
    &lt;p&gt;Tempo is a neutral, permissionless blockchain open for anyone to build on. We’re currently collaborating with global partners to test various use cases, including cross-border payouts, B2B payments, remittances, and ecommerce. Interested in working with Tempo? Request access to our private testnet here.&lt;/p&gt;
    &lt;head rend="h2"&gt;03 :: When will Tempo launch?&lt;/head&gt;
    &lt;p&gt;We’re providing select partners with priority access to our testnet now. Contact us here if you’re interested.&lt;/p&gt;
    &lt;head rend="h2"&gt;04 :: Who will run validator nodes?&lt;/head&gt;
    &lt;p&gt;A diverse group of independent entities, including some of Tempo’s design partners, will run validator nodes initially before we transition to a permissionless model.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://tempo.xyz"/></entry><entry><id>https://news.ycombinator.com/item?id=45129190</id><title>Age Simulation Suit</title><updated>2025-09-05T06:15:16.732926+00:00</updated><content>&lt;doc fingerprint="fdab49420ed58155"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;GERonTologic simulator GERT&lt;/head&gt;
    &lt;p&gt;The age simulation suit GERT offers the opportunity to experience the impairments of older persons even for younger people. &lt;lb/&gt; The age-related impairments are:&lt;/p&gt;
    &lt;p&gt;■ opacity of the eye lens&lt;/p&gt;
    &lt;p&gt;■ narrowing of the visual field&lt;/p&gt;
    &lt;p&gt;■ high-frequency hearing loss&lt;/p&gt;
    &lt;p&gt;■ head mobility restrictions&lt;/p&gt;
    &lt;p&gt;■ joint stiffness&lt;/p&gt;
    &lt;p&gt;■ loss of strength&lt;/p&gt;
    &lt;p&gt;■ reduced grip ability&lt;/p&gt;
    &lt;p&gt;■ reduced coordination skills&lt;/p&gt;
    &lt;head rend="h4"&gt;GERT for only 1390,‑ / £ 1250,-&lt;/head&gt;
    &lt;p&gt;complete as pictured, plus shipping and VAT if applicable&lt;lb/&gt; New: now with 2 pairs of glasses instead of the model shown&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;Due to the significant increase in the time and effort required to process orders, in particular as a result of incomplete or incorrect information provided with orders, and the fact that we increasingly have to send reminders for invoices for smaller amounts, we can only accept orders with a value of at least 300 euros or pounds.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;Customer reviews:&lt;/p&gt;
    &lt;p&gt;The quality is great and it works how it is supposed to. Im happy with my purchase.&lt;/p&gt;
    &lt;p&gt;Great way to teach about elderly behavior. Ive been using this suit for a while now and its very durable and easy to use. Thanks!!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.age-simulation-suit.com/"/></entry><entry><id>https://news.ycombinator.com/item?id=45129237</id><title>A PM's Guide to AI Agent Architecture</title><updated>2025-09-05T06:15:16.429754+00:00</updated><content>&lt;doc fingerprint="2cd6bc914903882d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A PM's Guide to AI Agent Architecture: Why Capability Doesn't Equal Adoption&lt;/head&gt;
    &lt;head rend="h3"&gt;A complete guide to agent architecture, orchestration patterns, trust strategies, and adoption plans for PMs building AI agents.&lt;/head&gt;
    &lt;p&gt;Last week, I was talking to a PM who'd in the recent months shipped their AI agent. The metrics looked great: 89% accuracy, sub-second respond times, positive user feedback in surveys. But users were abandoning the agent after their first real problem, like a user with both a billing dispute and a locked account.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;"Our agent could handle routine requests perfectly, but when faced with complex issues, users would try once, get frustrated, and immediately ask for a human."&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This pattern is observed across every product team that focuses on making their agents "smarter" when the real challenge is making architectural decisions that shape how users experience and begin to trust the agent.&lt;/p&gt;
    &lt;p&gt;In this post, I'm going to walk you through the different layers of AI agent architecture. How your product decisions determine whether users trust your agent or abandon it. By the end of this, you'll understand why some agents feel "magical" while others feel "frustrating" and more importantly, how PMs should architect for the magical experience.&lt;/p&gt;
    &lt;p&gt;We'll use a concrete customer support agent example throughout, so you can see exactly how each architectural choice plays out in practice. We’ll also see why the counterintuitive approach to trust (hint: it's not about being right more often) actually works better for user adoption.&lt;/p&gt;
    &lt;head rend="h2"&gt;Let's say you're building a customer support agent&lt;/head&gt;
    &lt;p&gt;You're the PM building an agent that helps users with account issues - password resets, billing questions, plan changes. Seems straightforward, right?&lt;/p&gt;
    &lt;p&gt;But when a user says "I can't access my account and my subscription seems wrong" what should happen?&lt;/p&gt;
    &lt;p&gt;Scenario A: Your agent immediately starts checking systems. It looks up the account, identifies that the password was reset yesterday but the email never arrived, discovers a billing issue that downgraded the plan, explains exactly what happened, and offers to fix both issues with one click.&lt;/p&gt;
    &lt;p&gt;Scenario B: Your agent asks clarifying questions. "When did you last successfully log in? What error message do you see? Can you tell me more about the subscription issue?" After gathering info, it says "Let me escalate you to a human who can check your account and billing."&lt;/p&gt;
    &lt;p&gt;Same user request. Same underlying systems. Completely different products.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Four Layers Where Your Product Decisions Live&lt;/head&gt;
    &lt;p&gt;Think of agent architecture like a stack where each layer represents a product decision you have to make.&lt;/p&gt;
    &lt;head rend="h3"&gt;Layer 1: Context &amp;amp; Memory (What does your agent remember?)&lt;/head&gt;
    &lt;p&gt;The Decision: How much should your agent remember, and for how long?&lt;/p&gt;
    &lt;p&gt;This isn't just technical storage - it's about creating the illusion of understanding. Your agent's memory determines whether it feels like talking to a robot or a knowledgeable colleague.&lt;/p&gt;
    &lt;p&gt;For our support agent: Do you store just the current conversation, or the customer's entire support history? Their product usage patterns? Previous complaints?&lt;/p&gt;
    &lt;p&gt;Types of memory to consider:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Session memory: Current conversation ("You mentioned billing issues earlier...")&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Customer memory: Past interactions across sessions ("Last month you had a similar issue with...")&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Behavioral memory: Usage patterns ("I notice you typically use our mobile app...")&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Contextual memory: Current account state, active subscriptions, recent activity&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The more your agent remembers, the more it can anticipate needs rather than just react to questions. Each layer of memory makes responses more intelligent but increases complexity and cost.&lt;/p&gt;
    &lt;head rend="h3"&gt;Layer 2: Data &amp;amp; Integration (How deep do you go?)&lt;/head&gt;
    &lt;p&gt;The Decision: Which systems should your agent connect to, and what level of access should it have?&lt;/p&gt;
    &lt;p&gt;The deeper your agent connects to user workflows and existing systems, the harder it becomes for users to switch. This layer determines whether you're a tool or a platform.&lt;/p&gt;
    &lt;p&gt;For our support agent: Should it integrate with just your Stripe’s billing system, or also your Salesforce CRM, ZenDesk ticketing system , user database, and audit logs? Each integration makes the agent more useful but also creates more potential failure points - think API rate limits, authentication challenges, and system downtime.&lt;/p&gt;
    &lt;p&gt;Here's what's interesting - Most of us get stuck trying to integrate with everything at once. But the most successful agents started with just 2-3 key integrations and added more based on what users actually asked for.&lt;/p&gt;
    &lt;head rend="h3"&gt;Layer 3: Skills &amp;amp; Capabilities (What makes you different?)&lt;/head&gt;
    &lt;p&gt;The Decision: Which specific capabilities should your agent have, and how deep should they go?&lt;/p&gt;
    &lt;p&gt;Your skills layer is where you win or lose against competitors. It's not about having the most features - it's about having the right capabilities that create user dependency.&lt;/p&gt;
    &lt;p&gt;For our support agent: Should it only read account information, or should it also modify billing, reset passwords, and change plan settings? Each additional skill increases user value but also increases complexity and risk.&lt;/p&gt;
    &lt;p&gt;Implementation note: Tools like MCP (Model Context Protocol) are making it much easier to build and share skills across different agents, rather than rebuilding capabilities from scratch.&lt;/p&gt;
    &lt;head rend="h3"&gt;&lt;lb/&gt;Layer 4: Evaluation &amp;amp; Trust (How do users know what to expect?)&lt;/head&gt;
    &lt;p&gt;The Decision: How do you measure success and communicate agent limitations to users?&lt;/p&gt;
    &lt;p&gt;This layer determines whether users develop confidence in your agent or abandon it after the first mistake. It's not just about being accurate - it's about being trustworthy.&lt;/p&gt;
    &lt;p&gt;For our support agent: Do you show confidence scores ("I'm 85% confident this will fix your issue")? Do you explain your reasoning ("I checked three systems and found...")? Do you always confirm before taking actions ("Should I reset your password now?")? Each choice affects how users perceive reliability.&lt;/p&gt;
    &lt;p&gt;Trust strategies to consider:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Confidence indicators: "I'm confident about your account status, but let me double-check the billing details"&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reasoning transparency: "I found two failed login attempts and an expired payment method"&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Graceful boundaries: "This looks like a complex billing issue - let me connect you with our billing specialist who has access to more tools"&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Confirmation patterns: When to ask permission vs. when to act and explain&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;
      &lt;p&gt;The counterintuitive insight: users trust agents more when they admit uncertainty than when they confidently make mistakes.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;So how do you actually architect an agent?&lt;/head&gt;
    &lt;p&gt;Okay, so you understand the layers. Now comes the practical question that every PM asks: "How do I actually implement this? How does the agent talk to the skills? How do skills access data? How does evaluation happen while users are waiting?"&lt;/p&gt;
    &lt;p&gt;Your orchestration choice determines everything about your development experience, your debugging process, and your ability to iterate quickly.&lt;/p&gt;
    &lt;p&gt;Lets walk through the main approaches, and I'll be honest about when each one works and when it becomes a nightmare.&lt;/p&gt;
    &lt;head rend="h3"&gt;1. Single-Agent Architecture (Start Here)&lt;/head&gt;
    &lt;p&gt;Everything happens in one agent's context.&lt;/p&gt;
    &lt;p&gt;For our support agent: When the user says "I can't access my account," one agent handles it all - checking account status, identifying billing issues, explaining what happened, offering solutions.&lt;/p&gt;
    &lt;p&gt;Why this works: Simple to build, easy to debug, predictable costs. You know exactly what your agent can and can't do.&lt;/p&gt;
    &lt;p&gt;Why it doesn't: Can get expensive with complex requests since you're loading full context every time. Hard to optimize specific parts.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Most teams start here, and honestly, many never need to move beyond it. If you're debating between this and something more complex, start here.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;2. Skill-Based Architecture (When You Need Efficiency)&lt;/head&gt;
    &lt;p&gt;You have a router that figures out what the user needs, then hands off to specialized skills.&lt;/p&gt;
    &lt;p&gt;For our support agent: Router realizes this is an account access issue and routes to the `LoginSkill`. If the LoginSkill discovers it's actually a billing problem, it hands off to `BillingSkill`.&lt;/p&gt;
    &lt;p&gt;Real example flow:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;User: "I can't log in"&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Router → LoginSkill&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;LoginSkill checks: Account exists ✓, Password correct ✗, Billing status... wait, subscription expired&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;LoginSkill → BillingSkill: "Handle expired subscription for user123"&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;BillingSkill handles renewal process&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Why this works: More efficient - you can use cheaper models for simple skills, expensive models for complex reasoning. Each skill can be optimized independently.&lt;/p&gt;
    &lt;p&gt;Why it doesn't: Coordination between skills gets tricky fast. Who decides when to hand off? How do skills share context?&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Here's where MCP really helps - it standardizes how skills expose their capabilities, so your router knows what each skill can do without manually maintaining that mapping.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;3. Workflow-Based Architecture (Enterprise Favorite)&lt;/head&gt;
    &lt;p&gt;You predefine step-by-step processes for common scenarios. Think LangGraph, CrewAI, AutoGen, N8N, etc.&lt;/p&gt;
    &lt;p&gt;For our support agent: "Account access problem" triggers a workflow:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Check account status&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If locked, check failed login attempts&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If too many failures, check billing status&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If billing issue, route to payment recovery&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If not billing, route to password reset&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Why this works: Everything is predictable and auditable. Perfect for compliance-heavy industries. Easy to optimize each step.&lt;/p&gt;
    &lt;p&gt;Why it doesn't: When users have weird edge cases that don't fit your predefined workflows, you're stuck. Feels rigid to users.&lt;/p&gt;
    &lt;head rend="h3"&gt;4. Collaborative Architecture (The Future?)&lt;/head&gt;
    &lt;p&gt;Multiple specialized agents work together using A2A (agent-to-agent) protocols.&lt;/p&gt;
    &lt;p&gt;The vision: Your agent discovers that another company's agent can help with issues, automatically establishes a secure connection, and collaborates to solve the customer's problem. Think a booking.com agent interacting with an American Airlines agent!&lt;/p&gt;
    &lt;p&gt;For our support agent: `AuthenticationAgent` handles login issues, `BillingAgent` handles payment problems, `CommunicationAgent` manages user interaction. They coordinate through standardized protocols to solve complex problems.&lt;/p&gt;
    &lt;p&gt;Reality check: This sounds amazing but introduces complexity around security, billing, trust, and reliability that most companies aren't ready for. We're still figuring out the standards.&lt;/p&gt;
    &lt;p&gt;This can produce amazing results for sophisticated scenarios, but debugging multi-agent conversations is genuinely hard. When something goes wrong, figuring out which agent made the mistake and why is like detective work.&lt;/p&gt;
    &lt;p&gt;Here's the thing: start simple. Single-agent architecture handles way more use cases than you think. Add complexity only when you hit real limitations, not imaginary ones.&lt;/p&gt;
    &lt;p&gt;But here's what's interesting - even with the perfect architecture, your agent can still fail if users don't trust it. That brings us to the most counterintuitive lesson about building agents.&lt;/p&gt;
    &lt;head rend="h2"&gt;The trust thing that everyone gets wrong&lt;/head&gt;
    &lt;p&gt;Here's something counterintuitive: Users don't trust agents that are right all the time. They trust agents that are honest about when they might be wrong.&lt;/p&gt;
    &lt;p&gt;Think about it from the user's perspective. Your support agent confidently says "I've reset your password and updated your billing address." User thinks "great!" Then they try to log in and... it doesn't work. Now they don't just have a technical problem - they have a trust problem.&lt;/p&gt;
    &lt;p&gt;Compare that to an agent that says "I think I found the issue with your account. I'm 80% confident this will fix it. I'm going to reset your password and update your billing address. If this doesn't work, I'll immediately escalate to a human who can dive deeper."&lt;/p&gt;
    &lt;p&gt;Same technical capability. Completely different user experience.&lt;/p&gt;
    &lt;p&gt;Building trusted agents requires focus on three things:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Confidence calibration: When your agent says it's 60% confident, it should be right about 60% of the time. Not 90%, not 30%. Actual 60%.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reasoning transparency: Users want to see the agent's work. "I checked your account status (active), billing history (payment failed yesterday), and login attempts (locked after 3 failed attempts). The issue seems to be..."&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Graceful escalation: When your agent hits its limits, how does it hand off? A smooth transition to a human with full context is much better than "I can't help with that."&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A lot of times we obsess over making agents more accurate, when what users actually want was more transparency about the agent's limitations.&lt;/p&gt;
    &lt;head rend="h2"&gt;What's Coming Next&lt;/head&gt;
    &lt;p&gt;In Part 2, I'll dive deeper into the autonomy decisions that keep most PMs up at night. How much independence should you give your agent? When should it ask for permission vs forgiveness? How do you balance automation with user control?&lt;/p&gt;
    &lt;p&gt;We'll also walk through the governance concerns that actually matter in practice - not just theoretical security issues, but the real implementation challenges that can make or break your launch timeline.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.productcurious.com/p/a-pms-guide-to-ai-agent-architecture"/></entry><entry><id>https://news.ycombinator.com/item?id=45129442</id><title>Artie (YC S23) Is Hiring Engineers, AES, and Senior PMM</title><updated>2025-09-05T06:15:15.648828+00:00</updated><content>&lt;doc fingerprint="f2a33bd5f7bb5fbc"&gt;
  &lt;main&gt;
    &lt;p&gt;Software that streams data from databases to warehouses in real-time&lt;/p&gt;
    &lt;p&gt;We are building Artie, a real-time data streaming solution focused on databases and data warehouses. Typical ETL solutions leverage batched processes or schedulers (DAGs, Airflow), which cannot achieve real time data syncs. We leverage change data capture (CDC) and stream processing to perform data transfers in a more efficient way, which enables sub-minute latency.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ycombinator.com/companies/artie/jobs"/></entry><entry><id>https://news.ycombinator.com/item?id=45130260</id><title>LLM Visualization</title><updated>2025-09-05T06:15:15.478916+00:00</updated><content>&lt;doc fingerprint="4d6fd5b5f15dbf71"&gt;
  &lt;main&gt;
    &lt;p&gt;LLM Visualization Home&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bbycroft.net/llm"/></entry><entry><id>https://news.ycombinator.com/item?id=45131243</id><title>Action was the best 8-bit programming language</title><updated>2025-09-05T06:15:15.211813+00:00</updated><content>&lt;doc fingerprint="3e0c1883607d39dc"&gt;
  &lt;main&gt;
    &lt;p&gt;There were many programming languages available for 8-bit computers, the most common being BASIC and Assembly Language, but there were also other lesser-used languages such as Logo, Forth, and Pilot. The languages that would go on to dominate 16-bit computing, C and Pascal, were also available but were usually severely limited. An 8-bit computer generally did not have enough horsepower to run those more complex language compilers1.&lt;/p&gt;
    &lt;p&gt;By 1983 Optimized Systems Software (OSS) was renown in the Atari world for its great updated versions of DOS (DOS XL), BASIC (BASIC XL/XE) and assembler (MAC/65), so it was no surprise that they were the ones to introduce a new language, Action!, into the Atari market.&lt;/p&gt;
    &lt;p&gt;Created by Clinton Parker, Action! was an all-new compiled language that was designed and optimized for the 8-bit 6502 CPU. It was a 16K cartridge2 and had everything you need integrated into one package: the monitor, compiler, text editor and debugger3. In some ways, Action! was the first IDE (integrated development environment) for an 8-bit computer.&lt;/p&gt;
    &lt;p&gt;Back in the 80s I never used Action! and instead mostly used BASIC and OSS BASIC XE for my programming. I did like reading Action! program listings in magazines, though. But I now have the Action! cartridge and just recently acquired an Action! user manual, so I felt it was time to take a closer look at this amazing software development tool.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Packaging&lt;/head&gt;
    &lt;p&gt;The version of Action! that I now have is the classic orange cartridge, paired with a small 3-ring yellow binder containing the documentation. Action! was also available in the yellow label cartridge and its manual was also in a larger binder and then later, perfect bound (like the BASIC XL and BASIC XE manuals I have). Having the manual in a binder would have certainly been more useful in the 80s when you had to refer to it frequently.&lt;/p&gt;
    &lt;p&gt;Action! retailed for $99 in 1983 (about $320 in 2025) and was only available for the Atari 8-bit computers. Early advertisements indicated there would be forthcoming versions for the Apple II and Commodore 64, but those never materialized.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Manual&lt;/head&gt;
    &lt;p&gt;The manual is just under 220 pages and is concise, but reasonable well-written. There is not a ton of sample code and it doesn’t try to teach too many concepts. To get the most of it, you really already need to know how to program.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I had been looking for an actual Action! manual for years, but the ones I’d seen on eBay had always been prohibitively expensive. Luckily I found one last month for just $30 and snagged it.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;You don’t need a physical manual, of course. An updated manual is available online in several places, and here’s the PDF.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Editor&lt;/head&gt;
    &lt;p&gt;The editor really was a wonder for its time. It is a full-screen text editor that can scroll to the right as the line of text you type becomes longer than the 40 characters of an Atari screen. That was an unusual feature for the time, but was necessary because it allowed the indentation, encouraged by Action!’s structured programming style, to remain easy to read.&lt;/p&gt;
    &lt;p&gt;The editor can copy and paste text, another somewhat new feature for Atari text editors in 1983, has the ability to tag lines to jump to them rapidly and it also has a split screen mode that let you show two files (or two parts of the same file) on the screen at once. At first this might seem silly considering the small size of the screen, but this was revolutionary for the time. Normally to look at another file, you’d have to open it, losing the file you were working on, and then reload the original file. It was tedious and was a reason why you would print your programs back then.&lt;/p&gt;
    &lt;p&gt;Even looking at different parts of a file could be a pain because you’d just be scrolling all over the place, which was not always fast or easy in many text editors. This was even worse with something like BASIC, which required you to LIST line ranges to see parts of your program.&lt;/p&gt;
    &lt;p&gt;To exit the editor, you press Control+Shift+M which takes you to the monitor.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Monitor&lt;/head&gt;
    &lt;p&gt;Today this would be called the shell, but it is essentially the command line interface for the entire system. From the monitor, you can switch to the editor, compile, trace code, look at memory and more.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Language&lt;/head&gt;
    &lt;p&gt;Action! is a structured, procedural programming language. It is similar to both C and Pascal, although not quite as advanced as either of them.&lt;/p&gt;
    &lt;p&gt;It has the usual commands for looping, if-then-else, but it does not have anything like a switch or Case statement. There are also only three data types: BYTE, CARD and INT. Strings were essentially just BYTE arrays.&lt;/p&gt;
    &lt;p&gt;I found it endearing that to end an IF block you used FI (IF spelled backwards) and to end a DO block you used OD. That is some interesting symmetry although I’m not really sure it helps readability.&lt;/p&gt;
    &lt;p&gt;An Action! “Hello World” program would be this:&lt;/p&gt;
    &lt;code&gt;PROC hello()
; This is a comment.
  DO
    PrintE("Goto 10")
  OD
RETURN&lt;/code&gt;
    &lt;head rend="h2"&gt;The Compiler&lt;/head&gt;
    &lt;p&gt;The Action! language may not have been as advanced as C or Pascal, but because it was designed with the 6502 CPU in mind, compiling the language was astonishingly fast.&lt;/p&gt;
    &lt;p&gt;The original Atari Pascal system from APX needed multiple disk drives and could take several minutes to compile a small program. The only C package available in 1983 (Deep Blue C) was at least as limited as Action!, but also not an integrated package and compiled slowly. Draper Pascal only compiled to pseudo-code.&lt;/p&gt;
    &lt;p&gt;Action! compiled your program to machine code in memory and in seconds. Typing C (to compile) and then R (to run) was hardly slower than just typing RUN in BASIC.&lt;/p&gt;
    &lt;p&gt;It really is stupidly fast. Here’s the output from the above program:&lt;/p&gt;
    &lt;p&gt;If there is a compile error, it is shown on the screen and will be highlighted when you switch back to the editor by typing “e”.&lt;/p&gt;
    &lt;head rend="h2"&gt;Limitations&lt;/head&gt;
    &lt;p&gt;Action! was not perfect and it had several limitations. In my opinion, the two biggest limitations were that that Action! cartridge was required to run Action! programs (because they depended on the library that was included the cartridge ROM) and that there was no floating point data type.&lt;/p&gt;
    &lt;p&gt;Both of these did get solved, to some extent, with the purchase of an additional add-ons: Action! RunTime and Action! Toolkit.&lt;/p&gt;
    &lt;head rend="h2"&gt;Action! RunTime&lt;/head&gt;
    &lt;p&gt;The RunTime package provided the ability to create stand-alone Action! programs that you could distribute to others to run without the cartridge.&lt;/p&gt;
    &lt;p&gt;The RunTime included the library as source files that you could include at the beginning of your own programs so that everything that was needed to run would get compiled into a single executable program. From what I can tell, Action! had no concept of linking which is how something like C would have handled this.&lt;/p&gt;
    &lt;p&gt;I don’t have an official Action! RunTime disk, but the image is readily available online.&lt;/p&gt;
    &lt;head rend="h2"&gt;Action! ToolKit&lt;/head&gt;
    &lt;p&gt;The ToolKit is essentially an enhanced Library with additional functions and features. Two notable things it adds are player/missile graphics support and some support for floating-point numbers via several “Real” functions.&lt;/p&gt;
    &lt;p&gt;Unfortunately this floating point support is somewhat limited and it doesn’t look all that useful to me. For example, I’ve used the Archimedes Spiral program in some articles here on Goto 10 to demonstrate drawing a fun graphic on the screen. It is interesting to see how long it can take to do the drawing on an 8-bit computer. I’d love to port it to Action!, and I was hopeful I’d be able to do so with the Action! ToolKit. Alas, even though it does add some commands to do some floating-point math, it does not add any trigonometry functions. The lack of Sin and Cos make it impractical to port Archimedes Spiral4.&lt;/p&gt;
    &lt;p&gt;I don’t have an official Action! ToolKit disk, but the image is readily available online.&lt;/p&gt;
    &lt;head rend="h2"&gt;Usage&lt;/head&gt;
    &lt;p&gt;It seems that Action! was mostly use by hobbyists, public domain and magazine software. The only two known commercial product made with Action! were the HomePak5 productivity package by Russ Wetmore and the Games Computers Play online service.&lt;/p&gt;
    &lt;p&gt;For the above screen shots, I was using Action! with my 130XE.&lt;/p&gt;
    &lt;p&gt;I plan to dig into actually using Action! itself more in the coming months. It really looks like a fun language. Unfortunately, since Action! is a cartridge, I can’t use it directly with my Side3 cart. There are disk-based versions of Action! available at AtariWiki, so I may have to switch to one of those, or see if I can get one of the SuperCart images to work with Side3. Otherwise, I may try it old-school with SpartaDOS, my trusty 1050 disk drive and a RAM disk.&lt;/p&gt;
    &lt;head rend="h2"&gt;Other References&lt;/head&gt;
    &lt;p&gt;AtariWiki has a create page with lots of links to Action!-related materials.&lt;/p&gt;
    &lt;p&gt;Action! Archive is a great reference for Action! programming.&lt;/p&gt;
    &lt;p&gt;If you want to learn more about how to program in Action!, be sure to check out David Arlington’s YouTube channel, which has a 25-part series on Action! programming.&lt;/p&gt;
    &lt;p&gt;Kyan Pascal was released in 1986 and worked pretty well, but really wanted a couple disk drives. LightSpeed C was also a decent version of C that debuted later in the 80s.&lt;/p&gt;
    &lt;p&gt;Actually an OSS SuperCartridge, which had 16K of ROM but only used 8K of address space in the computer.&lt;/p&gt;
    &lt;p&gt;Calling it a debugger might be a bit of stretch compared to modern tools.&lt;/p&gt;
    &lt;p&gt;Sure, I could probably implement my own version of those, but I don’t really want to.&lt;/p&gt;
    &lt;p&gt;HomePak was an integrated productivity package with a highly regarded terminal program, a slick word processor with not much free RAM for text (perhaps 5 pages) and an usual database. HomePak warrants its own article.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.goto10retro.com/p/action-was-the-best-8-bit-programming"/></entry><entry><id>https://news.ycombinator.com/item?id=45131538</id><title>Classic 8×8-pixel B&amp;W Mac patterns</title><updated>2025-09-05T06:15:14.947391+00:00</updated><content>&lt;doc fingerprint="3600717075e6a4ab"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Classic 8Ã8-pixel B&amp;amp;W Mac patterns&lt;/head&gt;
    &lt;p&gt;TL;DR: I made a website for the original classic Mac patterns&lt;/p&gt;
    &lt;p&gt;I was working on something and thought it would be fun to use one of the classic Mac black-and-white patterns in the project. I'm talking about the original 8Ã8-pixel ones that were in the original Control Panel for setting the desktop background and in MacPaint as fill patterns.&lt;/p&gt;
    &lt;p&gt;Screenshots via to Marcin's awesome interactive history&lt;/p&gt;
    &lt;p&gt;I figured there'd must be clean, pixel-perfect GIFs or PNGs of them somewhere on the web. And perhaps there are, but after poking around a bit, I ran out of energy for that, but by then had a head of steam for extracting the patterns en masse from the original source, somehow. Then I could produce whatever format I needed for them.&lt;/p&gt;
    &lt;p&gt;There are 38 patterns, introduced in the original System 1.0 in the 1984 debut of the Macintosh. They were unchanged in later versions, so I decided to get them from a System 6 disk, since that's a little easier with access to utility programs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Preparation&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Download Mini vMac.&lt;/item&gt;
      &lt;item&gt;Acquire "old world" Mac ROMs.&lt;/item&gt;
      &lt;item&gt;Download a System 6 startup disk image.&lt;/item&gt;
      &lt;item&gt;Download ExportFl disk image.&lt;/item&gt;
      &lt;item&gt;Download sitPack disk image.&lt;/item&gt;
      &lt;item&gt;Install "The Unarchiver" (&lt;code&gt;brew install --cask the-unarchiver&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Install the Xcode command-line tools.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Extraction process&lt;/head&gt;
    &lt;p&gt;Start System 6 (drag the ROM onto the Mini vMac icon, then drag the System 6 disk onto the window when you see the flashing floppy disk). Mount the ExportFl and sitPack disks by dragging their files and dropping on the classic Mac desktop.&lt;/p&gt;
    &lt;head rend="h3"&gt;In emulation&lt;/head&gt;
    &lt;p&gt;Double-click sitPack to launch the program. Command-O to open, then navigate to the startup disk by clicking "Drive". Scroll to find "System Folder" and double-click on it. Scroll to the bottom, select "System" and click "Open". Save the output file as "System.sit" in the top-level of the startup disk. Quit sitPack back to the Finder.&lt;/p&gt;
    &lt;p&gt;Start the ExportFl program. Command-O or pick "Open" from the "File" menu. Find the "System.sit" created in the last step and click "Open". A regular file save dialog will appear on the modern Mac, pick a location and save the file.&lt;/p&gt;
    &lt;head rend="h3"&gt;On the modern Mac&lt;/head&gt;
    &lt;p&gt;Drag the "System.sit" file onto The Unarchiver, or open the file from within it. This will produce a file called "System" (with no extension).&lt;/p&gt;
    &lt;p&gt;Run DeRez (part of the Xcode developer command-line tools) on the System file. I first added &lt;code&gt;/Library/Developer/CommandLineTools/usr/bin&lt;/code&gt; to my &lt;code&gt;$PATH&lt;/code&gt;, then
ran:&lt;/p&gt;
    &lt;code&gt;$ DeRez -only PAT\# System &amp;gt; patterns.r
&lt;/code&gt;
    &lt;p&gt;This produces a text representation of the &lt;code&gt;PAT#&lt;/code&gt; resource in the System file.
It's a series of bytes that comprise 38 8Ã8 patterns meant for QuickDraw
commands. There's a leading big-endian unsigned 16-bit number (&lt;code&gt;0026&lt;/code&gt;) to indicate the number of 8-byte patterns to follow.&lt;/p&gt;
    &lt;code&gt;data 'PAT#' (0, purgeable) {
	$"0026 FFFF FFFF FFFF FFFF DDFF 77FF DDFF"
	$"77FF DD77 DD77 DD77 DD77 AA55 AA55 AA55"
	$"AA55 55FF 55FF 55FF 55FF AAAA AAAA AAAA"
	$"AAAA EEDD BB77 EEDD BB77 8888 8888 8888"
	$"8888 B130 031B D8C0 0C8D 8010 0220 0108"
	$"4004 FF88 8888 FF88 8888 FF80 8080 FF08"
	$"0808 8000 0000 0000 0000 8040 2000 0204"
	$"0800 8244 3944 8201 0101 F874 2247 8F17"
	$"2271 55A0 4040 550A 0404 2050 8888 8888"
	$"0502 BF00 BFBF B0B0 B0B0 0000 0000 0000"
	$"0000 8000 0800 8000 0800 8800 2200 8800"
	$"2200 8822 8822 8822 8822 AA00 AA00 AA00"
	$"AA00 FF00 FF00 FF00 FF00 1122 4488 1122"
	$"4488 FF00 0000 FF00 0000 0102 0408 1020"
	$"4080 AA00 8000 8800 8000 FF80 8080 8080"
	$"8080 081C 22C1 8001 0204 8814 2241 8800"
	$"AA00 40A0 0000 040A 0000 0384 4830 0C02"
	$"0101 8080 413E 0808 14E3 1020 54AA FF02"
	$"0408 7789 8F8F 7798 F8F8 0008 142A 552A"
	$"1408"
};
&lt;/code&gt;
    &lt;p&gt;It would have been simple enough to parse this text, but I had Claude quickly make a Python program to do so and output them in .pbm format, which is part of the Netpbm image format class. This is a simple image format that is text-based, a '1' or a '0' indicating a black or white pixel in a row and column.&lt;/p&gt;
    &lt;p&gt;For example, this subway tile pattern is represented like this in .pbm:&lt;/p&gt;
    &lt;code&gt;P1
8 8
1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0
&lt;/code&gt;
    &lt;p&gt;From here, I can generate image files for the patterns in any format and resolution I want, using ImageMagick or similar. It's important when scaling the patterns to use &lt;code&gt;-filter point&lt;/code&gt;, so that ImageMagick doesn't try to interpolate
the pixels it needs to fill in, which would lead to blurry results.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why do all this?&lt;/head&gt;
    &lt;p&gt;It's nostalgic, I have a fondness for these old patterns and the original B&amp;amp;W Mac aesthetic, it reminds me of playing games like Dark Castle and Glider, messing around with HyperCard, and using Tex-Edit and hoarding early shareware programs.&lt;/p&gt;
    &lt;p&gt;The whole point of the above is to get a copy of the System file out with the resource fork intact, that's where the desktop patterns live.&lt;/p&gt;
    &lt;p&gt;According to old classic Mac manuals, the patterns were QuickDraw bit-pattern resources, a simple bitmap of 8 bits per row packed into 8 bytes (columns). It was fast for QuickDraw to copy them over an area of the screen. For example the following pattern was used for the default gray desktop pattern on black-and-white Mac screens.&lt;/p&gt;
    &lt;p&gt;I could have extracted all 38 patterns other ways: I could have screenshotted each one, I could have looked at each one and hand-written .pbm files, both of which would have been tedious and error-prone.&lt;/p&gt;
    &lt;p&gt;Ultimately, I wanted to extract the exact original data from the source (or close enough copy thereof) and have the patterns in a format I considered archival for this limited purpose (.pbm files are trivial to parse and manipulate).&lt;/p&gt;
    &lt;p&gt;Head over to my pattern site to get the patterns for yourself.&lt;/p&gt;
    &lt;p&gt;(Credit for replica Geneva 9pt and Chicago 12pt fonts)&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.pauladamsmith.com/blog/2025/09/classic-mac-patterns.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45131921</id><title>ICPC 2025 World Finals Results</title><updated>2025-09-05T06:15:14.347149+00:00</updated><content>&lt;doc fingerprint="d0fc001c0795c8d8"&gt;
  &lt;main&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell role="head"&gt;Rank&lt;/cell&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Solved&lt;/cell&gt;
        &lt;cell role="head"&gt;Time&lt;/cell&gt;
        &lt;cell style="background: #c04000" role="head"&gt;A&lt;/cell&gt;
        &lt;cell style="background: #e0a800" role="head"&gt;B&lt;/cell&gt;
        &lt;cell style="background: #305070" role="head"&gt;C&lt;/cell&gt;
        &lt;cell style="background: #8cd9ff" role="head"&gt;D&lt;/cell&gt;
        &lt;cell style="background: #289040" role="head"&gt;E&lt;/cell&gt;
        &lt;cell style="background: #32ff32" role="head"&gt;F&lt;/cell&gt;
        &lt;cell style="background: #ff92d5" role="head"&gt;G&lt;/cell&gt;
        &lt;cell style="background: #d8d8c8" role="head"&gt;H&lt;/cell&gt;
        &lt;cell style="background: #810069" role="head"&gt;I&lt;/cell&gt;
        &lt;cell style="background: #9e4e53" role="head"&gt;J&lt;/cell&gt;
        &lt;cell style="background: #ffffff" role="head"&gt;K&lt;/cell&gt;
        &lt;cell style="background: #000000" role="head"&gt;L&lt;/cell&gt;
        &lt;cell role="head"&gt;Total att/solv&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="gold"&gt;1&lt;/cell&gt;
        &lt;cell class="gold"&gt;91 St. Petersburg State University&lt;/cell&gt;
        &lt;cell class="center"&gt;11&lt;/cell&gt;
        &lt;cell class="right"&gt;1478&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/255&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;2/53&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/37&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/150&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/298&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/195&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/42&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/81&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/128&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/19&lt;/cell&gt;
        &lt;cell&gt;21/11&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="gold"&gt;2&lt;/cell&gt;
        &lt;cell class="gold"&gt;99 The University of Tokyo&lt;/cell&gt;
        &lt;cell class="center"&gt;10&lt;/cell&gt;
        &lt;cell class="right"&gt;1116&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/206&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/271&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/25&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/184&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/95&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/66&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/72&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/126&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;11/10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="gold"&gt;3&lt;/cell&gt;
        &lt;cell class="gold"&gt;13 Beijing Jiaotong University&lt;/cell&gt;
        &lt;cell class="center"&gt;10&lt;/cell&gt;
        &lt;cell class="right"&gt;1425&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/225&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/204&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/270&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/52&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/132&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/84&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/107&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/148&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/6&lt;/cell&gt;
        &lt;cell&gt;18/10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="gold"&gt;4&lt;/cell&gt;
        &lt;cell class="gold"&gt;100 Tsinghua University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;865&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/139&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/33&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/174&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/27&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/71&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/87&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/84&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/157&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;15/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="silver"&gt;5&lt;/cell&gt;
        &lt;cell class="silver"&gt;76 Peking University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;887&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/180&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/14&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/168&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/50&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/113&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/76&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/183&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell&gt;10/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="silver"&gt;6&lt;/cell&gt;
        &lt;cell class="silver"&gt;35 Harvard University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;995&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/124&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/238&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/78&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/190&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/62&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/101&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/69&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/18&lt;/cell&gt;
        &lt;cell&gt;13/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="silver"&gt;7&lt;/cell&gt;
        &lt;cell class="silver"&gt;140 University of Zagreb&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1075&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/176&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/15&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/242&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/77&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/175&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/64&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/64&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/118&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/24&lt;/cell&gt;
        &lt;cell&gt;15/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="silver"&gt;8&lt;/cell&gt;
        &lt;cell class="silver"&gt;60 Massachusetts Institute of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1123&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/233&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/113&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/36&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/204&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/50&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/145&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/27&lt;/cell&gt;
        &lt;cell&gt;20/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="bronze"&gt;9&lt;/cell&gt;
        &lt;cell class="bronze"&gt;131 University of Science and Technology of China&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1128&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/224&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/41&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/286&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/31&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/229&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/55&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/85&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/123&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;11/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="bronze"&gt;10&lt;/cell&gt;
        &lt;cell class="bronze"&gt;83 Seoul National University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1133&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/201&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/282&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/32&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/160&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/46&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/79&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/161&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;14/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="bronze"&gt;11&lt;/cell&gt;
        &lt;cell class="bronze"&gt;129 University of Novi Sad&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1175&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/244&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/39&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/259&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/158&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/96&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/208&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/16&lt;/cell&gt;
        &lt;cell&gt;15/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="bronze"&gt;12&lt;/cell&gt;
        &lt;cell class="bronze"&gt;82 Saratov State University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1191&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/203&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/37&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/238&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/74&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/146&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/104&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/111&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/164&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;17/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="highest"&gt;13&lt;/cell&gt;
        &lt;cell class="highest"&gt;57 Karlsruhe Institute of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1199&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/133&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/45&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/292&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/207&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/23&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/92&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/234&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell&gt;14/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="highest"&gt;14&lt;/cell&gt;
        &lt;cell class="highest"&gt;127 University of Maryland&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1239&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/106&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/233&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/65&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/258&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/225&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/164&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/48&lt;/cell&gt;
        &lt;cell&gt;17/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="highest"&gt;15&lt;/cell&gt;
        &lt;cell class="highest"&gt;69 National Taiwan University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1256&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/190&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/45&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/278&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/116&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/182&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/118&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/77&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/173&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;12/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="highest"&gt;16&lt;/cell&gt;
        &lt;cell class="highest"&gt;87 Sharif University of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1329&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/73&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/244&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/257&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/136&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/158&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/213&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/21&lt;/cell&gt;
        &lt;cell&gt;21/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="highest"&gt;17&lt;/cell&gt;
        &lt;cell class="highest"&gt;8 Arizona State University&lt;/cell&gt;
        &lt;cell class="center"&gt;9&lt;/cell&gt;
        &lt;cell class="right"&gt;1331&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/254&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/298&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/40&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/94&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/169&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/69&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/125&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/199&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;12/9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;18&lt;/cell&gt;
        &lt;cell class="high"&gt;38 HSE University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;653&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/168&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/38&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/32&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/144&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/56&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/72&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/91&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/12&lt;/cell&gt;
        &lt;cell&gt;12/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;19&lt;/cell&gt;
        &lt;cell class="high"&gt;20 Carnegie Mellon University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;766&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/217&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/37&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/51&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/179&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/61&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/74&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/118&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/9&lt;/cell&gt;
        &lt;cell&gt;10/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;20&lt;/cell&gt;
        &lt;cell class="high"&gt;126 University of Illinois Urbana-Champaign&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;774&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/252&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/36&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/17&lt;/cell&gt;
        &lt;cell class="no"&gt;16/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/104&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/87&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/60&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/162&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/16&lt;/cell&gt;
        &lt;cell&gt;26/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;21&lt;/cell&gt;
        &lt;cell class="high"&gt;144 Zhongshan (Sun Yat-sen) University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;800&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/276&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/36&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/24&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/104&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/46&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/92&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/151&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/11&lt;/cell&gt;
        &lt;cell&gt;14/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;22&lt;/cell&gt;
        &lt;cell class="high"&gt;55 KAIST&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;829&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/259&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/159&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/25&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/68&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/42&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/81&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/143&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/32&lt;/cell&gt;
        &lt;cell&gt;13/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;23&lt;/cell&gt;
        &lt;cell class="high"&gt;143 Zhejiang University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;871&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/186&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/29&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/45&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/144&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/104&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/115&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/175&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;12/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;24&lt;/cell&gt;
        &lt;cell class="high"&gt;59 Kyoto University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;880&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/209&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/36&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/82&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/153&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/120&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/146&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/15&lt;/cell&gt;
        &lt;cell&gt;14/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;25&lt;/cell&gt;
        &lt;cell class="high"&gt;71 National University of Singapore&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;923&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/119&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/16&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/29&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/270&lt;/cell&gt;
        &lt;cell class="no"&gt;6/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/85&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/45&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/299&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;16/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;26&lt;/cell&gt;
        &lt;cell class="high"&gt;34 Harbin Institute of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;948&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/238&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/70&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/147&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/78&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/89&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/231&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;9/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;27&lt;/cell&gt;
        &lt;cell class="high"&gt;48 Institute of Science Tokyo&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;975&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/221&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/67&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/33&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/211&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/75&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/147&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/144&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;15/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;28&lt;/cell&gt;
        &lt;cell class="high"&gt;86 Shanghai University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1009&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/263&lt;/cell&gt;
        &lt;cell class="no"&gt;11/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/74&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/57&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/154&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/66&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/222&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;22/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;29&lt;/cell&gt;
        &lt;cell class="high"&gt;36 Hasso Plattner Institute&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1034&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/260&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/39&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/66&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/151&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/75&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/134&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/202&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/27&lt;/cell&gt;
        &lt;cell&gt;13/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;30&lt;/cell&gt;
        &lt;cell class="high"&gt;85 Shanghai Jiao Tong University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1059&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/241&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/173&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/63&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/114&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/279&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;14/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;31&lt;/cell&gt;
        &lt;cell class="high"&gt;12 Beihang University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1060&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/194&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/39&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/67&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/213&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/113&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/284&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;16/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;32&lt;/cell&gt;
        &lt;cell class="high"&gt;132 University of Science, VNU-HCM&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1090&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/220&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/38&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/238&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/90&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/131&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/250&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;14/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;33&lt;/cell&gt;
        &lt;cell class="high"&gt;121 University of California, Berkeley&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1092&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/267&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/54&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/203&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/94&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/113&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/287&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/19&lt;/cell&gt;
        &lt;cell&gt;9/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;34&lt;/cell&gt;
        &lt;cell class="high"&gt;22 Central South University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1139&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/296&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/41&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/61&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/194&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/106&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/142&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/242&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;10/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;35&lt;/cell&gt;
        &lt;cell class="high"&gt;16 BINUS University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1159&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/294&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/41&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/61&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/271&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/82&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/132&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/203&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/15&lt;/cell&gt;
        &lt;cell&gt;11/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;36&lt;/cell&gt;
        &lt;cell class="high"&gt;31 ETH Zürich&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1236&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/221&lt;/cell&gt;
        &lt;cell class="no"&gt;13/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/89&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/121&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/246&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/40&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/141&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/189&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/29&lt;/cell&gt;
        &lt;cell&gt;29/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;37&lt;/cell&gt;
        &lt;cell class="high"&gt;58 Korea University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1258&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/292&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/284&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/32&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/112&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/159&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/41&lt;/cell&gt;
        &lt;cell&gt;18/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="high"&gt;38&lt;/cell&gt;
        &lt;cell class="high"&gt;63 Moscow State University&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1261&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/279&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/53&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/63&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/218&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/92&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/149&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/229&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/18&lt;/cell&gt;
        &lt;cell&gt;18/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="high"&gt;39&lt;/cell&gt;
        &lt;cell class="high"&gt;117 Università di Pisa&lt;/cell&gt;
        &lt;cell class="center"&gt;8&lt;/cell&gt;
        &lt;cell class="right"&gt;1343&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/257&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/89&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/55&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/294&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/191&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/74&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/44&lt;/cell&gt;
        &lt;cell&gt;20/8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;40&lt;/cell&gt;
        &lt;cell class="honors"&gt;26 Delft University of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;603&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/22&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/109&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/133&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/88&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/159&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;12/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;41&lt;/cell&gt;
        &lt;cell class="honors"&gt;78 Pohang University of Science and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;692&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/256&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/21&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/55&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/86&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/44&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/164&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell&gt;12/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;42&lt;/cell&gt;
        &lt;cell class="honors"&gt;53 Jagiellonian University in Krakow&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;718&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/40&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/135&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/50&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/103&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/233&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/20&lt;/cell&gt;
        &lt;cell&gt;21/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;43&lt;/cell&gt;
        &lt;cell class="honors"&gt;137 University of Wroclaw&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;722&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/268&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/53&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/131&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/86&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/64&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/45&lt;/cell&gt;
        &lt;cell&gt;10/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;44&lt;/cell&gt;
        &lt;cell class="honors"&gt;95 The University of British Columbia&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;774&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/42&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/219&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/69&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/86&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/250&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/22&lt;/cell&gt;
        &lt;cell&gt;13/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;45&lt;/cell&gt;
        &lt;cell class="honors"&gt;125 University of Hong Kong&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;783&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/161&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/81&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/108&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/261&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/29&lt;/cell&gt;
        &lt;cell&gt;9/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;46&lt;/cell&gt;
        &lt;cell class="honors"&gt;141 UNSW Sydney&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;787&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/145&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/30&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/61&lt;/cell&gt;
        &lt;cell class="no"&gt;8/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/86&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/116&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/173&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/36&lt;/cell&gt;
        &lt;cell&gt;26/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;47&lt;/cell&gt;
        &lt;cell class="honors"&gt;96 The University of Chicago&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;804&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/261&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/28&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/84&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/81&lt;/cell&gt;
        &lt;cell class="firstYes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/146&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell&gt;14/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;48&lt;/cell&gt;
        &lt;cell class="honors"&gt;25 De La Salle University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;805&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/48&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/25&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/217&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/78&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/117&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/232&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/28&lt;/cell&gt;
        &lt;cell&gt;10/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;49&lt;/cell&gt;
        &lt;cell class="honors"&gt;33 Georgia Institute of Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;826&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/19&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/65&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/274&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/90&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/212&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/27&lt;/cell&gt;
        &lt;cell&gt;15/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;50&lt;/cell&gt;
        &lt;cell class="honors"&gt;123 University of Cambridge&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;827&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/37&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/77&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/269&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/136&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/92&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/35&lt;/cell&gt;
        &lt;cell&gt;11/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;51&lt;/cell&gt;
        &lt;cell class="honors"&gt;94 Texas A&amp;amp;M University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;828&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/158&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/114&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/71&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/228&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/38&lt;/cell&gt;
        &lt;cell&gt;17/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;52&lt;/cell&gt;
        &lt;cell class="honors"&gt;124 University of Central Florida&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;882&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/273&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/42&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/204&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/132&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/109&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/22&lt;/cell&gt;
        &lt;cell&gt;11/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;53&lt;/cell&gt;
        &lt;cell class="honors"&gt;61 Moscow Aviation Institute&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;914&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/46&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/75&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/282&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/64&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/194&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/143&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/30&lt;/cell&gt;
        &lt;cell&gt;11/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;54&lt;/cell&gt;
        &lt;cell class="honors"&gt;30 Ecole Polytechnique Fédérale de Lausanne&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;921&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/99&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/224&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/76&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/168&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/175&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/35&lt;/cell&gt;
        &lt;cell&gt;15/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;55&lt;/cell&gt;
        &lt;cell class="honors"&gt;101 Union University - Faculty of Computer Science&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;925&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/84&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/142&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/42&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/261&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/75&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/153&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/28&lt;/cell&gt;
        &lt;cell&gt;15/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;56&lt;/cell&gt;
        &lt;cell class="honors"&gt;90 St. Petersburg ITMO University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;929&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/16&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/192&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/108&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/182&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/297&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/31&lt;/cell&gt;
        &lt;cell&gt;14/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;57&lt;/cell&gt;
        &lt;cell class="honors"&gt;10 Astana IT University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;953&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/50&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/86&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/187&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/58&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/198&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/259&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/15&lt;/cell&gt;
        &lt;cell&gt;15/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;58&lt;/cell&gt;
        &lt;cell class="honors"&gt;136 University of Warsaw&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;967&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/65&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;7/193&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/69&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/226&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/212&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/19&lt;/cell&gt;
        &lt;cell&gt;15/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;59&lt;/cell&gt;
        &lt;cell class="honors"&gt;80 Rutgers University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;987&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/75&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/56&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/248&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/123&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/165&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/227&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;11/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;60&lt;/cell&gt;
        &lt;cell class="honors"&gt;23 Chennai Mathematical Institute&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;992&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/260&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/66&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/118&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/155&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/188&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/22&lt;/cell&gt;
        &lt;cell&gt;14/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;61&lt;/cell&gt;
        &lt;cell class="honors"&gt;52 International IT University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;1005&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/69&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/89&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/220&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/169&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/277&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;9/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;62&lt;/cell&gt;
        &lt;cell class="honors"&gt;15 Belarusian State University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;1011&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/47&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/289&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/79&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/103&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/124&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/191&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/38&lt;/cell&gt;
        &lt;cell&gt;14/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;63&lt;/cell&gt;
        &lt;cell class="honors"&gt;18 Brigham Young University&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;1196&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/247&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/65&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/85&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/133&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/228&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/298&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/20&lt;/cell&gt;
        &lt;cell&gt;13/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;64&lt;/cell&gt;
        &lt;cell class="honors"&gt;65 Nanjing University of Science and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;7&lt;/cell&gt;
        &lt;cell class="right"&gt;1340&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/278&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/80&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/107&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/114&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/147&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/293&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/21&lt;/cell&gt;
        &lt;cell&gt;22/7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;65&lt;/cell&gt;
        &lt;cell class="honors"&gt;122 University of California, Los Angeles&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;436&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/28&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/43&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/119&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/78&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/87&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/21&lt;/cell&gt;
        &lt;cell&gt;17/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;66&lt;/cell&gt;
        &lt;cell class="honors"&gt;115 Universidade Federal de Minas Gerais&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;475&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/37&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/180&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/86&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/105&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/18&lt;/cell&gt;
        &lt;cell&gt;6/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;67&lt;/cell&gt;
        &lt;cell class="honors"&gt;135 University of Toronto&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;544&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/47&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;15/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/72&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/110&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/185&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/32&lt;/cell&gt;
        &lt;cell&gt;23/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;68&lt;/cell&gt;
        &lt;cell class="honors"&gt;66 National Economics University&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;560&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/50&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/99&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/106&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/238&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/27&lt;/cell&gt;
        &lt;cell&gt;9/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;69&lt;/cell&gt;
        &lt;cell class="honors"&gt;98 The University of Texas at Dallas&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;590&lt;/cell&gt;
        &lt;cell class="no"&gt;6/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/40&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/197&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/100&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/74&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/21&lt;/cell&gt;
        &lt;cell&gt;17/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;70&lt;/cell&gt;
        &lt;cell class="honors"&gt;14 Beijing University of Posts and Telecommunications&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;596&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/67&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/48&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/69&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/221&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/170&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/21&lt;/cell&gt;
        &lt;cell&gt;6/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;71&lt;/cell&gt;
        &lt;cell class="honors"&gt;64 Nanjing University of Aeronautics and Astronautics&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;599&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/71&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/42&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;11/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/54&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/90&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/290&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/12&lt;/cell&gt;
        &lt;cell&gt;19/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;72&lt;/cell&gt;
        &lt;cell class="honors"&gt;41 Indian Institute of Technology - Indore&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;611&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/81&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/56&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/106&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/140&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/191&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;7/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;73&lt;/cell&gt;
        &lt;cell class="honors"&gt;51 International Institute of Information Technology, Hyderabad&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;639&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/77&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/202&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/171&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/31&lt;/cell&gt;
        &lt;cell&gt;9/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;74&lt;/cell&gt;
        &lt;cell class="honors"&gt;72 National Yang Ming Chiao Tung University&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;658&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/40&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/264&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/111&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/124&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;8/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;75&lt;/cell&gt;
        &lt;cell class="honors"&gt;133 University of Tartu&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;725&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/71&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/266&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/90&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/110&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/150&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/38&lt;/cell&gt;
        &lt;cell&gt;8/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;76&lt;/cell&gt;
        &lt;cell class="honors"&gt;103 Universidad de Buenos Aires - FCEN&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;725&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/45&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/67&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/281&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/125&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/104&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;13/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;77&lt;/cell&gt;
        &lt;cell class="honors"&gt;28 Ecole Polytechnique&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;726&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/77&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/52&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/87&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/119&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/257&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/14&lt;/cell&gt;
        &lt;cell&gt;21/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;78&lt;/cell&gt;
        &lt;cell class="honors"&gt;120 University of Belgrade&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;782&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/112&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/97&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/175&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/199&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/40&lt;/cell&gt;
        &lt;cell&gt;12/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;79&lt;/cell&gt;
        &lt;cell class="honors"&gt;73 Neapolis University Pafos&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;791&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/76&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/39&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/289&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/100&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/143&lt;/cell&gt;
        &lt;cell class="no"&gt;6/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/24&lt;/cell&gt;
        &lt;cell&gt;20/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;80&lt;/cell&gt;
        &lt;cell class="honors"&gt;68 National Institute of Technology, Tokuyama College&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;803&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/65&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;9/247&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/90&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/127&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/79&lt;/cell&gt;
        &lt;cell&gt;19/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;81&lt;/cell&gt;
        &lt;cell class="honors"&gt;81 Saarland University&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;808&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/62&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/115&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/224&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/290&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell&gt;8/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;82&lt;/cell&gt;
        &lt;cell class="honors"&gt;89 Southern University of Science and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;826&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/36&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/240&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/277&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/78&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;17/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;83&lt;/cell&gt;
        &lt;cell class="honors"&gt;134 University of Tehran&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;847&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/125&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/289&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/171&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/94&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/50&lt;/cell&gt;
        &lt;cell&gt;12/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;84&lt;/cell&gt;
        &lt;cell class="honors"&gt;142 Ural Federal University&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;872&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/73&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/98&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/112&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/251&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/266&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/52&lt;/cell&gt;
        &lt;cell&gt;8/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;85&lt;/cell&gt;
        &lt;cell class="honors"&gt;118 Universiteit Utrecht&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;908&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/93&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;9/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/215&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/132&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/249&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;23/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;86&lt;/cell&gt;
        &lt;cell class="honors"&gt;109 Universidad Nacional de Rosario&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;996&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/85&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/99&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/205&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/156&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/297&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/54&lt;/cell&gt;
        &lt;cell&gt;14/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell class="honors"&gt;87&lt;/cell&gt;
        &lt;cell class="honors"&gt;77 Petrozavodsk State University&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;1004&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/60&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/153&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/296&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/203&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/31&lt;/cell&gt;
        &lt;cell&gt;14/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell class="honors"&gt;88&lt;/cell&gt;
        &lt;cell class="honors"&gt;128 University of Melbourne&lt;/cell&gt;
        &lt;cell class="center"&gt;6&lt;/cell&gt;
        &lt;cell class="right"&gt;1047&lt;/cell&gt;
        &lt;cell class="no"&gt;10/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/119&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/195&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/280&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/89&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/165&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/19&lt;/cell&gt;
        &lt;cell&gt;27/6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;89&lt;/cell&gt;
        &lt;cell&gt;62 Moscow Institute of Physics and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;307&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/69&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/82&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/66&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/46&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/24&lt;/cell&gt;
        &lt;cell&gt;11/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;90&lt;/cell&gt;
        &lt;cell&gt;130 University of Science and Technology - The University of Danang&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;378&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/63&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/104&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/116&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;91&lt;/cell&gt;
        &lt;cell&gt;42 Indian Institute of Technology - Kanpur&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;415&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/51&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/79&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/136&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/107&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/22&lt;/cell&gt;
        &lt;cell&gt;6/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;92&lt;/cell&gt;
        &lt;cell&gt;114 Universidade Federal de Campina Grande&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;429&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/102&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/165&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/29&lt;/cell&gt;
        &lt;cell&gt;7/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;93&lt;/cell&gt;
        &lt;cell&gt;4 Arab Academy for Science, Technology and Maritime Transport - Cairo&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;452&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/72&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/48&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/96&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/142&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/34&lt;/cell&gt;
        &lt;cell&gt;8/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;94&lt;/cell&gt;
        &lt;cell&gt;70 National University of Science and Technology MISIS&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;459&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/75&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/130&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/147&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/64&lt;/cell&gt;
        &lt;cell&gt;6/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;95&lt;/cell&gt;
        &lt;cell&gt;27 Duke University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;472&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/58&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/113&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/155&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/17&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;96&lt;/cell&gt;
        &lt;cell&gt;29 Ecole Polytechnique de Tunisie&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;486&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/35&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/81&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/116&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/152&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/22&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;97&lt;/cell&gt;
        &lt;cell&gt;40 Indian Institute of Technology - Delhi&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;486&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/83&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/177&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/30&lt;/cell&gt;
        &lt;cell&gt;9/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;98&lt;/cell&gt;
        &lt;cell&gt;44 Indian Institute of Technology - Roorkee&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;528&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/95&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/68&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/118&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/147&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/20&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;99&lt;/cell&gt;
        &lt;cell&gt;108 Universidad Nacional de Ingeniería - FC&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;544&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/102&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/120&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/214&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/24&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;100&lt;/cell&gt;
        &lt;cell&gt;49 Instituto Militar de Engenharia&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;554&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/103&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/105&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;16/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/108&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/146&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/12&lt;/cell&gt;
        &lt;cell&gt;25/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;101&lt;/cell&gt;
        &lt;cell&gt;1 ADA University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;557&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/54&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/87&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/79&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/273&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/24&lt;/cell&gt;
        &lt;cell&gt;10/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;102&lt;/cell&gt;
        &lt;cell&gt;111 Universidade de São Paulo&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;558&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/118&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/46&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/259&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/21&lt;/cell&gt;
        &lt;cell&gt;18/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;103&lt;/cell&gt;
        &lt;cell&gt;39 Indian Institute of Technology - Bombay&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;599&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/68&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/168&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/198&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/132&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/13&lt;/cell&gt;
        &lt;cell&gt;7/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;104&lt;/cell&gt;
        &lt;cell&gt;9 Assiut University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;613&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/53&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/102&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/179&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/194&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/25&lt;/cell&gt;
        &lt;cell&gt;9/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;105&lt;/cell&gt;
        &lt;cell&gt;54 Jordan University of Science and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;638&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/57&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/103&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/158&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/237&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;10/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;106&lt;/cell&gt;
        &lt;cell&gt;93 Syrian Virtual University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;646&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/70&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/63&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/151&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/276&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell&gt;8/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;107&lt;/cell&gt;
        &lt;cell&gt;17 BRAC University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;648&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/54&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/140&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/205&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/152&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/37&lt;/cell&gt;
        &lt;cell&gt;8/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;108&lt;/cell&gt;
        &lt;cell&gt;74 Nizhny Novgorod State University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;648&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/98&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/105&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;7/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/59&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/243&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/43&lt;/cell&gt;
        &lt;cell&gt;17/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;109&lt;/cell&gt;
        &lt;cell&gt;43 Indian Institute of Technology - Kharagpur&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;660&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/77&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/103&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/147&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/251&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/22&lt;/cell&gt;
        &lt;cell&gt;8/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;110&lt;/cell&gt;
        &lt;cell&gt;32 Universidad Nacional de La Plata&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;676&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/95&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/60&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/121&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/209&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/91&lt;/cell&gt;
        &lt;cell&gt;15/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;111&lt;/cell&gt;
        &lt;cell&gt;107 Universidad Nacional de Colombia - Bogotá&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;685&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/33&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/83&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/132&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/282&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/55&lt;/cell&gt;
        &lt;cell&gt;10/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;112&lt;/cell&gt;
        &lt;cell&gt;116 Universidade Federal de Pernambuco&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;707&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/137&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/34&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/230&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/182&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell&gt;9/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;113&lt;/cell&gt;
        &lt;cell&gt;46 Innopolis University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;710&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/75&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/89&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;5/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/136&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/217&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/73&lt;/cell&gt;
        &lt;cell&gt;16/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;114&lt;/cell&gt;
        &lt;cell&gt;47 Institut National des Sciences Appliquées et de Technologie&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;711&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/87&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/150&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;7/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/185&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/244&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/25&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;115&lt;/cell&gt;
        &lt;cell&gt;88 Sohag University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;725&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/76&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/115&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/135&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/216&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;116&lt;/cell&gt;
        &lt;cell&gt;21 Carnegie Mellon University in Qatar&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;729&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/89&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/85&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/143&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/268&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/24&lt;/cell&gt;
        &lt;cell&gt;14/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;117&lt;/cell&gt;
        &lt;cell&gt;45 Indian Institute of Technology - Varanasi&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;738&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/139&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/87&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/193&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/169&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/30&lt;/cell&gt;
        &lt;cell&gt;11/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;118&lt;/cell&gt;
        &lt;cell&gt;104 Universidad de Chile&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;758&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/111&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="no"&gt;9/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/143&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/292&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;22/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;119&lt;/cell&gt;
        &lt;cell&gt;106 Universidad Mayor de San Simón&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;760&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/78&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/172&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/111&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/294&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/45&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;120&lt;/cell&gt;
        &lt;cell&gt;84 Shahjalal University of Science and Technology&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;773&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/64&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/138&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/115&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/247&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;121&lt;/cell&gt;
        &lt;cell&gt;79 Purdue University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;784&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/69&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/224&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;6/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/73&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/187&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/31&lt;/cell&gt;
        &lt;cell&gt;21/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;122&lt;/cell&gt;
        &lt;cell&gt;24 Damascus University&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;794&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/76&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/108&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/153&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/201&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/116&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;123&lt;/cell&gt;
        &lt;cell&gt;2 Ain Shams University - Faculty of Computer and Information Sciences&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;809&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/83&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/119&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/186&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/271&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/70&lt;/cell&gt;
        &lt;cell&gt;9/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;124&lt;/cell&gt;
        &lt;cell&gt;50 Instituto Tecnológico de Costa Rica campus Alajuela&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;832&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/141&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/74&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/165&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/281&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/31&lt;/cell&gt;
        &lt;cell&gt;13/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;125&lt;/cell&gt;
        &lt;cell&gt;67 National Institute of Technology Tiruchirappalli&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;855&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/84&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/129&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/180&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/298&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/64&lt;/cell&gt;
        &lt;cell&gt;10/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;126&lt;/cell&gt;
        &lt;cell&gt;3 Arab Academy for Science, Technology and Maritime Transport - Alameen&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;898&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/84&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/154&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/197&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/298&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/25&lt;/cell&gt;
        &lt;cell&gt;12/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;127&lt;/cell&gt;
        &lt;cell&gt;11 Baku Higher Oil School&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;944&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/49&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/115&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;6/294&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/263&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell&gt;15/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;128&lt;/cell&gt;
        &lt;cell&gt;112 Universidade Estadual de Campinas&lt;/cell&gt;
        &lt;cell class="center"&gt;5&lt;/cell&gt;
        &lt;cell class="right"&gt;1038&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/53&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;5/188&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/287&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/291&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/19&lt;/cell&gt;
        &lt;cell&gt;15/5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;129&lt;/cell&gt;
        &lt;cell&gt;5 Arab Academy for Science, Technology and Maritime Transport - Smart Village&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;383&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/52&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;8/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/131&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/174&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/26&lt;/cell&gt;
        &lt;cell&gt;12/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;130&lt;/cell&gt;
        &lt;cell&gt;19 Cairo University - Faculty of Computers and Artificial Intelligence&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;453&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/23&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/214&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/116&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/40&lt;/cell&gt;
        &lt;cell&gt;9/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;131&lt;/cell&gt;
        &lt;cell&gt;102 Universidad Autónoma de Yucatán&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;474&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/111&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/136&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/74&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/53&lt;/cell&gt;
        &lt;cell&gt;11/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;132&lt;/cell&gt;
        &lt;cell&gt;105 Universidad de La Habana&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;510&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/108&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/99&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/193&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/30&lt;/cell&gt;
        &lt;cell&gt;8/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;133&lt;/cell&gt;
        &lt;cell&gt;37 Homs University&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;582&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/99&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/202&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/137&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/44&lt;/cell&gt;
        &lt;cell&gt;13/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;134&lt;/cell&gt;
        &lt;cell&gt;113 Universidade Federal de Alagoas&lt;/cell&gt;
        &lt;cell class="center"&gt;4&lt;/cell&gt;
        &lt;cell class="right"&gt;705&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/91&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;7/186&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;4/212&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/36&lt;/cell&gt;
        &lt;cell&gt;16/4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;135&lt;/cell&gt;
        &lt;cell&gt;75 NU-FAST Karachi&lt;/cell&gt;
        &lt;cell class="center"&gt;3&lt;/cell&gt;
        &lt;cell class="right"&gt;303&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/101&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;2/128&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/34&lt;/cell&gt;
        &lt;cell&gt;6/3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;136&lt;/cell&gt;
        &lt;cell&gt;119 University of Balamand&lt;/cell&gt;
        &lt;cell class="center"&gt;3&lt;/cell&gt;
        &lt;cell class="right"&gt;342&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/153&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/111&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;3/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/38&lt;/cell&gt;
        &lt;cell&gt;8/3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;137&lt;/cell&gt;
        &lt;cell&gt;97 The University of Jordan&lt;/cell&gt;
        &lt;cell class="center"&gt;3&lt;/cell&gt;
        &lt;cell class="right"&gt;829&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;8/293&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;7/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/267&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;3/49&lt;/cell&gt;
        &lt;cell&gt;22/3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="odd"&gt;
        &lt;cell&gt;138&lt;/cell&gt;
        &lt;cell&gt;110 Universidad Panamericana Campus Bonaterra&lt;/cell&gt;
        &lt;cell class="center"&gt;2&lt;/cell&gt;
        &lt;cell class="right"&gt;175&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/112&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;2/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="yes"&gt;1/63&lt;/cell&gt;
        &lt;cell&gt;6/2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row class="even"&gt;
        &lt;cell&gt;139&lt;/cell&gt;
        &lt;cell&gt;56 Kardan University&lt;/cell&gt;
        &lt;cell class="center"&gt;0&lt;/cell&gt;
        &lt;cell class="right"&gt;0&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;1/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="center"&gt;0/--&lt;/cell&gt;
        &lt;cell class="no"&gt;4/--&lt;/cell&gt;
        &lt;cell&gt;5/0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Submitted/1st Yes/Total Yes&lt;/cell&gt;
        &lt;cell class="center"&gt;130/73/45&lt;/cell&gt;
        &lt;cell class="center"&gt;72/53/8&lt;/cell&gt;
        &lt;cell class="center"&gt;4/--/0&lt;/cell&gt;
        &lt;cell class="center"&gt;170/14/138&lt;/cell&gt;
        &lt;cell class="center"&gt;74/113/20&lt;/cell&gt;
        &lt;cell class="center"&gt;273/17/135&lt;/cell&gt;
        &lt;cell class="center"&gt;31/270/2&lt;/cell&gt;
        &lt;cell class="center"&gt;278/71/66&lt;/cell&gt;
        &lt;cell class="center"&gt;211/23/135&lt;/cell&gt;
        &lt;cell class="center"&gt;287/35/128&lt;/cell&gt;
        &lt;cell class="center"&gt;154/69/72&lt;/cell&gt;
        &lt;cell class="center"&gt;193/6/138&lt;/cell&gt;
        &lt;cell&gt;1877/887&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://worldfinals.icpc.global/scoreboard/2025/index.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45132183</id><title>Rocketships and Slingshots</title><updated>2025-09-05T06:15:14.277817+00:00</updated><content/><link href="https://postround.substack.com/p/rocketships-and-slingshots"/></entry><entry><id>https://news.ycombinator.com/item?id=45132498</id><title>What If OpenDocument Used SQLite?</title><updated>2025-09-05T06:15:13.957497+00:00</updated><content>&lt;doc fingerprint="f7cfb8164ca46ba1"&gt;
  &lt;main&gt;
    &lt;p&gt;Suppose the OpenDocument file format, and specifically the "ODP" OpenDocument Presentation format, were built around SQLite. Benefits would include:&lt;/p&gt;
    &lt;p&gt;Note that this is only a thought experiment. We are not suggesting that OpenDocument be changed. Nor is this article a criticism of the current OpenDocument design. The point of this essay is to suggest ways to improve future file format designs.&lt;/p&gt;
    &lt;p&gt;The OpenDocument file format is used for office applications: word processors, spreadsheets, and presentations. It was originally designed for the OpenOffice suite but has since been incorporated into other desktop application suites. The OpenOffice application has been forked and renamed a few times. This author's primary use for OpenDocument is building slide presentations with either NeoOffice on Mac, or LibreOffice on Linux and Windows.&lt;/p&gt;
    &lt;p&gt;An OpenDocument Presentation or "ODP" file is a ZIP archive containing XML files describing presentation slides and separate image files for the various images that are included as part of the presentation. (OpenDocument word processor and spreadsheet files are similarly structured but are not considered by this article.) The reader can easily see the content of an ODP file by using the "zip -l" command. For example, the following is the "zip -l" output from a 49-slide presentation about SQLite from the 2014 SouthEast LinuxFest conference:&lt;/p&gt;
    &lt;quote&gt;Archive: self2014.odp Length Date Time Name --------- ---------- ----- ---- 47 2014-06-21 12:34 mimetype 0 2014-06-21 12:34 Configurations2/statusbar/ 0 2014-06-21 12:34 Configurations2/accelerator/current.xml 0 2014-06-21 12:34 Configurations2/floater/ 0 2014-06-21 12:34 Configurations2/popupmenu/ 0 2014-06-21 12:34 Configurations2/progressbar/ 0 2014-06-21 12:34 Configurations2/menubar/ 0 2014-06-21 12:34 Configurations2/toolbar/ 0 2014-06-21 12:34 Configurations2/images/Bitmaps/ 54702 2014-06-21 12:34 Pictures/10000000000001F40000018C595A5A3D.png 46269 2014-06-21 12:34 Pictures/100000000000012C000000A8ED96BFD9.png ... 58 other pictures omitted... 13013 2014-06-21 12:34 Pictures/10000000000000EE0000004765E03BA8.png 1005059 2014-06-21 12:34 Pictures/10000000000004760000034223EACEFD.png 211831 2014-06-21 12:34 content.xml 46169 2014-06-21 12:34 styles.xml 1001 2014-06-21 12:34 meta.xml 9291 2014-06-21 12:34 Thumbnails/thumbnail.png 38705 2014-06-21 12:34 Thumbnails/thumbnail.pdf 9664 2014-06-21 12:34 settings.xml 9704 2014-06-21 12:34 META-INF/manifest.xml --------- ------- 10961006 78 files&lt;/quote&gt;
    &lt;p&gt;The ODP ZIP archive contains four different XML files: content.xml, styles.xml, meta.xml, and settings.xml. Those four files define the slide layout, text content, and styling. This particular presentation contains 62 images, ranging from full-screen pictures to tiny icons, each stored as a separate file in the Pictures folder. The "mimetype" file contains a single line of text that says:&lt;/p&gt;
    &lt;quote&gt;application/vnd.oasis.opendocument.presentation&lt;/quote&gt;
    &lt;p&gt;The purpose of the other files and folders is presently unknown to the author but is probably not difficult to figure out.&lt;/p&gt;
    &lt;p&gt;The use of a ZIP archive to encapsulate XML files plus resources is an elegant approach to an application file format. It is clearly superior to a custom binary file format. But using an SQLite database as the container, instead of ZIP, would be more elegant still.&lt;/p&gt;
    &lt;p&gt;A ZIP archive is basically a key/value database, optimized for the case of write-once/read-many and for a relatively small number of distinct keys (a few hundred to a few thousand) each with a large BLOB as its value. A ZIP archive can be viewed as a "pile-of-files" database. This works, but it has some shortcomings relative to an SQLite database, as follows:&lt;/p&gt;
    &lt;p&gt;Incremental update is hard.&lt;/p&gt;
    &lt;p&gt;It is difficult to update individual entries in a ZIP archive. It is especially difficult to update individual entries in a ZIP archive in a way that does not destroy the entire document if the computer loses power and/or crashes in the middle of the update. It is not impossible to do this, but it is sufficiently difficult that nobody actually does it. Instead, whenever the user selects "File/Save", the entire ZIP archive is rewritten. Hence, "File/Save" takes longer than it ought, especially on older hardware. Newer machines are faster, but it is still bothersome that changing a single character in a 50 megabyte presentation causes one to burn through 50 megabytes of the finite write life on the SSD.&lt;/p&gt;
    &lt;p&gt;Startup is slow.&lt;/p&gt;
    &lt;p&gt;In keeping with the pile-of-files theme, OpenDocument stores all slide content in a single big XML file named "content.xml". LibreOffice reads and parses this entire file just to display the first slide. LibreOffice also seems to read all images into memory as well, which makes sense seeing as when the user does "File/Save" it is going to have to write them all back out again, even though none of them changed. The net effect is that start-up is slow. Double-clicking an OpenDocument file brings up a progress bar rather than the first slide. This results in a bad user experience. The situation grows ever more annoying as the document size increases.&lt;/p&gt;
    &lt;p&gt;More memory is required.&lt;/p&gt;
    &lt;p&gt;Because ZIP archives are optimized for storing big chunks of content, they encourage a style of programming where the entire document is read into memory at startup, all editing occurs in memory, then the entire document is written to disk during "File/Save". OpenOffice and its descendants embrace that pattern.&lt;/p&gt;
    &lt;p&gt;One might argue that it is ok, in this era of multi-gigabyte desktops, to read the entire document into memory. But it is not ok. For one, the amount of memory used far exceeds the (compressed) file size on disk. So a 50MB presentation might take 200MB or more RAM. That still is not a problem if one only edits a single document at a time. But when working on a talk, this author will typically have 10 or 15 different presentations up all at the same time (to facilitate copy/paste of slides from past presentations) and so gigabytes of memory are required. Add in an open web browser or two and a few other desktop apps, and suddenly the disk is whirling and the machine is swapping. And even having just a single document is a problem when working on an inexpensive Chromebook retrofitted with Ubuntu. Using less memory is always better.&lt;/p&gt;
    &lt;p&gt;Crash recovery is difficult.&lt;/p&gt;
    &lt;p&gt;The descendants of OpenOffice tend to segfault more often than commercial competitors. Perhaps for this reason, the OpenOffice forks make periodic backups of their in-memory documents so that users do not lose all pending edits when the inevitable application crash does occur. This causes frustrating pauses in the application for the few seconds while each backup is being made. After restarting from a crash, the user is presented with a dialog box that walks them through the recovery process. Managing the crash recovery this way involves lots of extra application logic and is generally an annoyance to the user.&lt;/p&gt;
    &lt;p&gt;Content is inaccessible.&lt;/p&gt;
    &lt;p&gt;One cannot easily view, change, or extract the content of an OpenDocument presentation using generic tools. The only reasonable way to view or edit an OpenDocument document is to open it up using an application that is specifically designed to read or write OpenDocument (read: LibreOffice or one of its cousins). The situation could be worse. One can extract and view individual images (say) from a presentation using just the "zip" archiver tool. But it is not reasonable try to extract the text from a slide. Remember that all content is stored in a single "context.xml" file. That file is XML, so it is a text file. But it is not a text file that can be managed with an ordinary text editor. For the example presentation above, the content.xml file consist of exactly two lines. The first line of the file is just:&lt;/p&gt;
    &lt;quote&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/quote&gt;
    &lt;p&gt;The second line of the file contains 211792 characters of impenetrable XML. Yes, 211792 characters all on one line. This file is a good stress-test for a text editor. Thankfully, the file is not some obscure binary format, but in terms of accessibility, it might as well be written in Klingon.&lt;/p&gt;
    &lt;p&gt;Let us suppose that instead of using a ZIP archive to store its files, OpenDocument used a very simple SQLite database with the following single-table schema:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE OpenDocTree( filename TEXT PRIMARY KEY, -- Name of file filesize BIGINT, -- Size of file after decompression content BLOB -- Compressed file content );&lt;/quote&gt;
    &lt;p&gt;For this first experiment, nothing else about the file format is changed. The OpenDocument is still a pile-of-files, only now each file is a row in an SQLite database rather than an entry in a ZIP archive. This simple change does not use the power of a relational database. Even so, this simple change shows some improvements.&lt;/p&gt;
    &lt;p&gt;Surprisingly, using SQLite in place of ZIP makes the presentation file smaller. Really. One would think that a relational database file would be larger than a ZIP archive, but at least in the case of NeoOffice that is not so. The following is an actual screen-scrape showing the sizes of the same NeoOffice presentation, both in its original ZIP archive format as generated by NeoOffice (self2014.odp), and as repacked as an SQLite database using the SQLAR utility:&lt;/p&gt;
    &lt;quote&gt;-rw-r--r-- 1 drh staff 10514994 Jun 8 14:32 self2014.odp -rw-r--r-- 1 drh staff 10464256 Jun 8 14:37 self2014.sqlar -rw-r--r-- 1 drh staff 10416644 Jun 8 14:40 zip.odp&lt;/quote&gt;
    &lt;p&gt;The SQLite database file ("self2014.sqlar") is about a half percent smaller than the equivalent ODP file! How can this be? Apparently the ZIP archive generator logic in NeoOffice is not as efficient as it could be, because when the same pile-of-files is recompressed using the command-line "zip" utility, one gets a file ("zip.odp") that is smaller still, by another half percent, as seen in the third line above. So, a well-written ZIP archive can be slightly smaller than the equivalent SQLite database, as one would expect. But the difference is slight. The key take-away is that an SQLite database is size-competitive with a ZIP archive.&lt;/p&gt;
    &lt;p&gt;The other advantage to using SQLite in place of ZIP is that the document can now be updated incrementally, without risk of corrupting the document if a power loss or other crash occurs in the middle of the update. (Remember that writes to SQLite databases are atomic.) True, all the content is still kept in a single big XML file ("content.xml") which must be completely rewritten if so much as a single character changes. But with SQLite, only that one file needs to change. The other 77 files in the repository can remain unaltered. They do not all have to be rewritten, which in turn makes "File/Save" run much faster and saves wear on SSDs.&lt;/p&gt;
    &lt;p&gt;A pile-of-files encourages content to be stored in a few large chunks. In the case of ODP, there are just four XML files that define the layout of all slides in a presentation. An SQLite database allows storing information in a few large chunks, but SQLite is also adept and efficient at storing information in numerous smaller pieces.&lt;/p&gt;
    &lt;p&gt;So then, instead of storing all content for all slides in a single oversized XML file ("content.xml"), suppose there was a separate table for storing the content of each slide separately. The table schema might look something like this:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE slide( pageNumber INTEGER, -- The slide page number slideContent TEXT -- Slide content as XML or JSON ); CREATE INDEX slide_pgnum ON slide(pageNumber); -- Optional&lt;/quote&gt;
    &lt;p&gt;The content of each slide could still be stored as compressed XML. But now each page is stored separately. So when opening a new document, the application could simply run:&lt;/p&gt;
    &lt;quote&gt;SELECT slideContent FROM slide WHERE pageNumber=1;&lt;/quote&gt;
    &lt;p&gt;This query will quickly and efficiently return the content of the first slide, which could then be speedily parsed and displayed to the user. Only one page needs to be read and parsed in order to render the first screen, which means that the first screen appears much faster and there is no longer a need for an annoying progress bar.&lt;/p&gt;
    &lt;p&gt;If the application wanted to keep all content in memory, it could continue reading and parsing the other pages using a background thread after drawing the first page. Or, since reading from SQLite is so efficient, the application might instead choose to reduce its memory footprint and only keep a single slide in memory at a time. Or maybe it keeps the current slide and the next slide in memory, to facilitate rapid transitions to the next slide.&lt;/p&gt;
    &lt;p&gt;Notice that dividing up the content into smaller pieces using an SQLite table gives flexibility to the implementation. The application can choose to read all content into memory at startup. Or it can read just a few pages into memory and keep the rest on disk. Or it can read just a single page into memory at a time. And different versions of the application can make different choices without having to make any changes to the file format. Such options are not available when all content is in a single big XML file in a ZIP archive.&lt;/p&gt;
    &lt;p&gt;Splitting content into smaller pieces also helps File/Save operations to go faster. Instead of having to write back the content of all pages when doing a File/Save, the application only has to write back those pages that have actually changed.&lt;/p&gt;
    &lt;p&gt;One minor downside of splitting content into smaller pieces is that compression does not work as well on shorter texts and so the size of the document might increase. But as the bulk of the document space is used to store images, a small reduction in the compression efficiency of the text content will hardly be noticeable, and is a small price to pay for an improved user experience.&lt;/p&gt;
    &lt;p&gt;Once one is comfortable with the concept of storing each slide separately, it is a small step to support versioning of the presentation. Consider the following schema:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE slide( slideId INTEGER PRIMARY KEY, derivedFrom INTEGER REFERENCES slide, content TEXT -- XML or JSON or whatever ); CREATE TABLE version( versionId INTEGER PRIMARY KEY, priorVersion INTEGER REFERENCES version, checkinTime DATETIME, -- When this version was saved comment TEXT, -- Description of this version manifest TEXT -- List of integer slideIds );&lt;/quote&gt;
    &lt;p&gt;In this schema, instead of each slide having a page number that determines its order within the presentation, each slide has a unique integer identifier that is unrelated to where it occurs in sequence. The order of slides in the presentation is determined by a list of slideIds, stored as a text string in the MANIFEST column of the VERSION table. Since multiple entries are allowed in the VERSION table, that means that multiple presentations can be stored in the same document.&lt;/p&gt;
    &lt;p&gt;On startup, the application first decides which version it wants to display. Since the versionId will naturally increase in time and one would normally want to see the latest version, an appropriate query might be:&lt;/p&gt;
    &lt;quote&gt;SELECT manifest, versionId FROM version ORDER BY versionId DESC LIMIT 1;&lt;/quote&gt;
    &lt;p&gt;Or perhaps the application would rather use the most recent checkinTime:&lt;/p&gt;
    &lt;quote&gt;SELECT manifest, versionId, max(checkinTime) FROM version;&lt;/quote&gt;
    &lt;p&gt;Using a single query such as the above, the application obtains a list of the slideIds for all slides in the presentation. The application then queries for the content of the first slide, and parses and displays that content, as before.&lt;/p&gt;
    &lt;p&gt;(Aside: Yes, that second query above that uses "max(checkinTime)" really does work and really does return a well-defined answer in SQLite. Such a query either returns an undefined answer or generates an error in many other SQL database engines, but in SQLite it does what you would expect: it returns the manifest and versionId of the entry that has the maximum checkinTime.)&lt;/p&gt;
    &lt;p&gt;When the user does a "File/Save", instead of overwriting the modified slides, the application can now make new entries in the SLIDE table for just those slides that have been added or altered. Then it creates a new entry in the VERSION table containing the revised manifest.&lt;/p&gt;
    &lt;p&gt;The VERSION table shown above has columns to record a check-in comment (presumably supplied by the user) and the time and date at which the File/Save action occurred. It also records the parent version to record the history of changes. Perhaps the manifest could be stored as a delta from the parent version, though typically the manifest will be small enough that storing a delta might be more trouble than it is worth. The SLIDE table also contains a derivedFrom column which could be used for delta encoding if it is determined that saving the slide content as a delta from its previous version is a worthwhile optimization.&lt;/p&gt;
    &lt;p&gt;So with this simple change, the ODP file now stores not just the most recent edit to the presentation, but a history of all historic edits. The user would normally want to see just the most recent edition of the presentation, but if desired, the user can now go backwards in time to see historical versions of the same presentation.&lt;/p&gt;
    &lt;p&gt;Or, multiple presentations could be stored within the same document.&lt;/p&gt;
    &lt;p&gt;With such a schema, the application would no longer need to make periodic backups of the unsaved changes to a separate file to avoid lost work in the event of a crash. Instead, a special "pending" version could be allocated and unsaved changes could be written into the pending version. Because only changes would need to be written, not the entire document, saving the pending changes would only involve writing a few kilobytes of content, not multiple megabytes, and would take milliseconds instead of seconds, and so it could be done frequently and silently in the background. Then when a crash occurs and the user reboots, all (or almost all) of their work is retained. If the user decides to discard unsaved changes, they simply go back to the previous version.&lt;/p&gt;
    &lt;p&gt;There are details to fill in here. Perhaps a screen can be provided that displays all historical changes (perhaps with a graph) allowing the user to select which version they want to view or edit. Perhaps some facility can be provided to merge forks that might occur in the version history. And perhaps the application should provide a means to purge old and unwanted versions. The key point is that using an SQLite database to store the content, rather than a ZIP archive, makes all of these features much, much easier to implement, which increases the possibility that they will eventually get implemented.&lt;/p&gt;
    &lt;p&gt;In the previous sections, we have seen how moving from a key/value store implemented as a ZIP archive to a simple SQLite database with just three tables can add significant capabilities to an application file format. We could continue to enhance the schema with new tables, with indexes added for performance, with triggers and views for programming convenience, and constraints to enforce consistency of content even in the face of programming errors. Further enhancement ideas include:&lt;/p&gt;
    &lt;p&gt;An SQLite database has a lot of capability, which this essay has only begun to touch upon. But hopefully this quick glimpse has convinced some readers that using an SQL database as an application file format is worth a second look.&lt;/p&gt;
    &lt;p&gt;Some readers might resist using SQLite as an application file format due to prior exposure to enterprise SQL databases and the caveats and limitations of those other systems. For example, many enterprise database engines advise against storing large strings or BLOBs in the database and instead suggest that large strings and BLOBs be stored as separate files and the filename stored in the database. But SQLite is not like that. Any column of an SQLite database can hold a string or BLOB up to about a gigabyte in size. And for strings and BLOBs of 100 kilobytes or less, I/O performance is better than using separate files.&lt;/p&gt;
    &lt;p&gt;Some readers might be reluctant to consider SQLite as an application file format because they have been inculcated with the idea that all SQL database schemas must be factored into Third Normal Form (3NF) and store only small primitive data types such as strings and integers. Certainly relational theory is important and designers should strive to understand it. But, as demonstrated above, it is often quite acceptable to store complex information as XML or JSON in text fields of a database. Do what works, not what your database professor said you ought to do.&lt;/p&gt;
    &lt;p&gt;In summary, the claim of this essay is that using SQLite as a container for an application file format like OpenDocument and storing lots of smaller objects in that container works out much better than using a ZIP archive holding a few larger objects. To wit:&lt;/p&gt;
    &lt;p&gt;An SQLite database file is approximately the same size, and in some cases smaller, than a ZIP archive holding the same information.&lt;/p&gt;
    &lt;p&gt;The atomic update capabilities of SQLite allow small incremental changes to be safely written into the document. This reduces total disk I/O and improves File/Save performance, enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;Startup time is reduced by allowing the application to read in only the content shown for the initial screen. This largely eliminates the need to show a progress bar when opening a new document. The document just pops up immediately, further enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;The memory footprint of the application can be dramatically reduced by only loading content that is relevant to the current display and keeping the bulk of the content on disk. The fast query capability of SQLite make this a viable alternative to keeping all content in memory at all times. And when applications use less memory, it makes the entire computer more responsive, further enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;The schema of an SQL database is able to represent information more directly and succinctly than a key/value database such as a ZIP archive. This makes the document content more accessible to third-party applications and scripts and facilitates advanced features such as built-in document versioning, and incremental saving of work in progress for recovery after a crash.&lt;/p&gt;
    &lt;p&gt;These are just a few of the benefits of using SQLite as an application file format — the benefits that seem most likely to improve the user experience for applications like OpenOffice. Other applications might benefit from SQLite in different ways. See the Application File Format document for additional ideas.&lt;/p&gt;
    &lt;p&gt;Finally, let us reiterate that this essay is a thought experiment. The OpenDocument format is well-established and already well-designed. Nobody really believes that OpenDocument should be changed to use SQLite as its container instead of ZIP. Nor is this article a criticism of OpenDocument for not choosing SQLite as its container since OpenDocument predates SQLite. Rather, the point of this article is to use OpenDocument as a concrete example of how SQLite can be used to build better application file formats for future projects.&lt;/p&gt;
    &lt;p&gt;This page last modified on 2025-05-12 11:56:41 UTC&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.sqlite.org/affcase1.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45132710</id><title>io_uring is faster than mmap</title><updated>2025-09-05T06:15:13.605268+00:00</updated><content>&lt;doc fingerprint="eeb8d08f7c322988"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;TL;DR&lt;/head&gt;
    &lt;p&gt;Sourcing data directly from disk IS faster than caching in memory. I brought receipts. Because hardware got wider but not faster, the old methods don't get you there. You need new tools to use what is scaling and avoid what isn't.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;In part 1 I showed how some computer performance factors are scaling exponentially while others have been stagnant for decades. I then asserted, without proof, that sourcing data from disk can be faster than from memory. What follows is the proof.&lt;/p&gt;
    &lt;p&gt;Computer Science dogma says that unused memory should be used to cache things from the filesystem because the disk is slow and memory is fast. Given that disk bandwidth is growing exponentially and memory access latency has stagnated this isn't always true anymore.&lt;/p&gt;
    &lt;head rend="h2"&gt;Experimental set up&lt;/head&gt;
    &lt;p&gt;We need data and something straight forward to do with the data. I used my free will or the illusion thereof to create a benchmark I cleverly call "counting 10s". I write some pseudo random integers between 0 and 20 to a buffer and then count how many of the integers are 10. I want to make sure we are doing all the counting in a single thread to simulate an Amdahl's Law situation.&lt;/p&gt;
    &lt;p&gt;So how fast can we expect this to run? The upper limit would be the memory bandwidth.&lt;/p&gt;
    &lt;p&gt;My testing rig is a server with an old AMD EPYC 7551P 32-Core Processor on a Supermicro H11SSL-i and 96GB of DDR4 2133 MHz and a couple of 1.92TB Samsung PM983a PCIe 3.0 SSDs I pieced together from EBay parts. Given the way this server is configured, the upper limit for memory bandwidth can be calculated as 3 channels * 2133MT/s * 8B/T / 4 numa domains = ~13GB/s for a single thread. It's kind of an odd system but that just makes it more fun to optimize for!&lt;/p&gt;
    &lt;p&gt;The disks are rated at 3.1GB/s read BW each for an upper limit of 6.2GB/s. I made a raid0 volume with 4KB stripe size, formatted the the raid as ext4 with no journaling, and made sure it fully finished initializing the metadata before running the tests.&lt;/p&gt;
    &lt;code&gt;sudo mdadm --create /dev/md0 --level=0 --raid-devices=2 --chunk=4K /dev/nvme1n1 /dev/nvme2n1
sudo mkfs.ext4 -F -L data -O ^has_journal -E lazy_itable_init=0 /dev/md0
sudo mount -o noatime /dev/md0 mnt
&lt;/code&gt;
    &lt;p&gt;We'll use a 50GB dataset for most benchmarking here, because when I started this I thought the test system only had 64GB and it stuck.&lt;/p&gt;
    &lt;head rend="h2"&gt;Simple Loop&lt;/head&gt;
    &lt;p&gt;The simple and cleanest way to do this in C would look like this.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }

    printf("Found %ld 10s\n", count);
}
&lt;/code&gt;
    &lt;p&gt;Just mmap() the file which will give us a buffer that we can read from. Then we just loop and count the 10s.&lt;/p&gt;
    &lt;p&gt;Because the point is to benchmark we will integrate some timing mechanisms before we move on.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    long start = get_time_us();
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;For the first run we're going to be reading from the disk. The disk/filesystem read is going to limit the performance before the memory bandwidth can.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 0.61 GB/s
&lt;/code&gt;
    &lt;p&gt;As expected, it's not anywhere near memory speeds because as everyone knows, disk is slow. We can look at the system and confirm that the first run cached the data to memory.&lt;/p&gt;
    &lt;p&gt;Our expectation is that the second run will be faster because the data is already in memory and as everyone knows, memory is fast.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 3.71 GB/s
&lt;/code&gt;
    &lt;p&gt;It is faster, but clearly thatâs slower than the memory can feed it to the processor. What bottleneck might we be hitting? This speed does look possibly correlated to the instructions per second limit for this generation of CPU (between 2GHz * 1.5 IPC = 3G and 3GHz boost * 1.5 IPC = 4.5G instructions per second).&lt;/p&gt;
    &lt;p&gt;We can use perf to see if the CPU is using vector instructions, if not then the actual compute is the bottleneck.&lt;/p&gt;
    &lt;code&gt;Percentâ      test     %rbp,%rbp
       â    â je       84
       â      lea      (%rbx,%rbp,4),%rcx
       â      mov      %rbx,%rax
       â      xor      %ebp,%ebp
       â      nop
       â70:   xor      %edx,%edx
  1.31 â      cmpl     $0xa,(%rax)
 42.38 â      sete     %dl
 45.72 â      add      $0x4,%rax
  0.01 â      add      %rdx,%rbp
 10.42 â      cmp      %rax,%rcx
  0.16 â    â jne      70
       â84:   xor      %eax,%eax
       â      shr      $0x14,%r12
       â    â call     get_time_us
       â      pxor     %xmm0,%xmm0
       â      pxor     %xmm1,%xmm1
&lt;/code&gt;
    &lt;p&gt;Confirmed. We're running non-vectorized instructions, with a single thread counting that's as fast as it can go with a 2GHz CPU. Well crap. Weâve hit our first non-exponential limit. Even a brand new CPU running this machine code would probably struggle to do much better than a 50% improvement, still well below the memory bandwidth limit.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unrolling the loop&lt;/head&gt;
    &lt;p&gt;Good news is this code can definitely be vectorized if we help the compiler. Unroll the loop!&lt;/p&gt;
    &lt;p&gt;We're gonna make it very obvious to the compiler that it's safe to use vector instructions which could process our integers up to 8x faster.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_unrolled
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    void* buffer = mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    // Get the compiler to align the buffer
    const int * __restrict data = (const int * __restrict)__builtin_assume_aligned(buffer, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    long start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(data[i+ 0] == 10);
        c1  += (unsigned)(data[i+ 1] == 10);
        c2  += (unsigned)(data[i+ 2] == 10);
        c3  += (unsigned)(data[i+ 3] == 10);
        c4  += (unsigned)(data[i+ 4] == 10);
        c5  += (unsigned)(data[i+ 5] == 10);
        c6  += (unsigned)(data[i+ 6] == 10);
        c7  += (unsigned)(data[i+ 7] == 10);
        c8  += (unsigned)(data[i+ 8] == 10);
        c9  += (unsigned)(data[i+ 9] == 10);
        c10 += (unsigned)(data[i+10] == 10);
        c11 += (unsigned)(data[i+11] == 10);
        c12 += (unsigned)(data[i+12] == 10);
        c13 += (unsigned)(data[i+13] == 10);
        c14 += (unsigned)(data[i+14] == 10);
        c15 += (unsigned)(data[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    long elapsed = get_time_us() - start;

    printf("unrolled loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;Check if we now have vectorized instructions with &lt;code&gt;perf&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;Percentâ       movq      %xmm0,%rcx
       â       movdqa    %xmm7,%xmm14
       â       pxor      %xmm0,%xmm0
       â       nop
       â e8:   movdqa    %xmm6,%xmm4
  0.30 â       movdqa    %xmm6,%xmm3
  0.12 â       movdqa    %xmm6,%xmm2
  0.35 â       add       $0x1,%rdx
  1.54 â       pcmpeqd   (%rax),%xmm4
 54.64 â       pcmpeqd   0x10(%rax),%xmm3
  1.62 â       movdqa    %xmm6,%xmm1
  0.99 â       add       $0x40,%rax
  0.12 â       pcmpeqd   -0x20(%rax),%xmm2
  3.03 â       pcmpeqd   -0x10(%rax),%xmm1
  1.32 â       pand      %xmm5,%xmm4
  1.25 â       pand      %xmm5,%xmm3
  1.55 â       movdqa    %xmm4,%xmm15
  0.24 â       punpckhdq %xmm0,%xmm4

&lt;/code&gt;
    &lt;p&gt;Confirmed. We're using 128bit vector instructions, this should be up to 4x faster than the original.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;NOTE: These are 128-bit vector instructions, but I expected 256-bit. I dug deeper here and found claims that Gen1 EPYC had unoptimized 256-bit instructions. I forced the compiler to use 256-bit instructions and found it was actually slower. Looks like the compiler was smart enough to know that here.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Let's benchmark this unrolled version with the data as page cache in memory.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_unrolled ./mnt/datafile.bin 53687091200
unrolled loop found 167802249 10s processed at 5.51 GB/s
&lt;/code&gt;
    &lt;p&gt;We're still nowhere close to hitting the memory bus speed limit of 13GB/s but 50% faster than the original is a win. There must be some other bottleneck.&lt;/p&gt;
    &lt;head rend="h2"&gt;Can the SSDs beat that?&lt;/head&gt;
    &lt;p&gt;5.51GB/s? On paper the SSDs can read at 6.2GB/s, but the first run from disk only did 0.61GB/s. How can I meet or beat this performance sourcing the data directly from disk?&lt;/p&gt;
    &lt;p&gt;Consider how the default mmap() mechanism works, it is a background IO pipeline to transparently fetch the data from disk. When you read the empty buffer from userspace it triggers a fault, the kernel handles the fault by reading the data from the filesystem, which then queues up IO from disk. Unfortunately these legacy mechanisms just aren't set up for serious high performance IO. Note that at 610MB/s it's faster than what a disk SATA can do. On the other hand, it only managed 10% of our disk's potential. Clearly we're going to have to do something else.&lt;/p&gt;
    &lt;p&gt;SSDs don't just automatically read data at multigigabyte speeds. You need to put some real effort into an IO pipeline to get serious performance.&lt;/p&gt;
    &lt;p&gt;I made a io_uring based IO engine, a kind of userspace driver, that can hit these speeds. The main thread will request data, the IO engine will handle the IO, then the main thread will do the counting when the data is in a buffer. We will use a set of queues to manage the IO requests, responses, and buffers. The IO engine will start 6 workers, target a queue depth of 8192, and have a buffer size of 16KB.&lt;/p&gt;
    &lt;p&gt;I wish I had tighter code here, but A) I didnât have time to clean it up B) some of the complexity is intractable. The IO engine code was a lot to scroll through so I moved it to github link&lt;/p&gt;
    &lt;code&gt;#include "io_engine.h"
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;getopt.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

#define DEFAULT_WORKERS 6
#define DEFAULT_BLOCK_SIZE 16384
#define DEFAULT_QUEUE_DEPTH 8192

// Count the number of "10" (int format) in the buffer
static inline size_t count_tens_unrolled(void* data, size_t size_bytes) {
    const size_t total = size_bytes / sizeof(int);
    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned(data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    return (t0 + t1) + (t2 + t3);
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);

    // Set up the io engine
    ioengine_t* na = ioengine_alloc(filename, size_bytes, DEFAULT_QUEUE_DEPTH, DEFAULT_BLOCK_SIZE, DEFAULT_WORKERS);

    sleep(1);

    // Use the background workers to read file directly
    size_t total_blocks = na-&amp;gt;file_size / na-&amp;gt;block_size;
    uint64_t uid = 1;
    size_t count = 0;

    long start = get_time_us();

    // Read all blocks
    size_t blocks_queued = 0;
    size_t blocks_read = 0;
    int buffer_queued = 0;
    while (blocks_read &amp;lt; total_blocks) {
        //// Queue IO phase //////
        //     Do we have more blocks to queue up?
        if (buffer_queued &amp;lt; na-&amp;gt;num_io_buffers/2 &amp;amp;&amp;amp; blocks_queued &amp;lt;= total_blocks) {
            // Calculate how many blocks on average we want our workers to queue up
            size_t free_buffers = (size_t)(na-&amp;gt;num_io_buffers - buffer_queued - 4); // hold back a few buffers
            size_t blocks_remaining = total_blocks - blocks_queued;  // how many blocks have we not queued
            size_t blocks_to_queue = free_buffers &amp;gt; blocks_remaining ? blocks_remaining : free_buffers;
            int blocks_to_queue_per_worker = (int) (blocks_to_queue + na-&amp;gt;num_workers - 1) / na-&amp;gt;num_workers;
            // Iterate through workers and assign work
            for (int i = 0; i &amp;lt; na-&amp;gt;num_workers; i++) {
                worker_thread_data_t* worker = &amp;amp;na-&amp;gt;workers[i];
                // Try to queue N blocks to this worker
                for (int j = 0; j &amp;lt; blocks_to_queue_per_worker; j++) {
                    if (blocks_queued == total_blocks) break;
                    int bgio_tail = worker-&amp;gt;bgio_tail;
                    int bgio_head = worker-&amp;gt;bgio_head;
                    int bgio_next = (bgio_tail + 1) % worker-&amp;gt;num_max_bgio;
                    int next_bhead = (worker-&amp;gt;buffer_head + 1) % worker-&amp;gt;num_max_bgio;
                    if (bgio_next == bgio_head) break;  // queue for send requests is full
                    if (next_bhead == worker-&amp;gt;buffer_tail) break; // queue for recieving completed IO is full
                    // Queue this block with the worker.  We have to track which buffer it's going to.
                    int buffer_idx = worker-&amp;gt;buffer_start_idx + worker-&amp;gt;buffer_head;
                    na-&amp;gt;buffer_state[buffer_idx] = BUFFER_PREFETCHING;
                    worker-&amp;gt;bgio_uids[bgio_tail] = (uid++)&amp;lt;&amp;lt;16; // unique id helps track IOs in io_uring, we encode 4 bytes later
                    worker-&amp;gt;bgio_buffer_idx[bgio_tail] = buffer_idx;
                    worker-&amp;gt;bgio_block_idx[bgio_tail] = blocks_queued++;  // block sized index into file
                    worker-&amp;gt;bgio_queued[bgio_tail] = -1;  // Requested but not yet queued
                    int next_tail = (bgio_tail + 1) % worker-&amp;gt;num_max_bgio;
                    worker-&amp;gt;bgio_tail = next_tail;
                    // Log the buffer in an ordered queue for us to read
                    worker-&amp;gt;complete_ring[worker-&amp;gt;buffer_head] = buffer_idx;
                    worker-&amp;gt;buffer_head = next_bhead;
                    buffer_queued++;
                }
                // Tell the worker to submit IOs as a group
                worker-&amp;gt;bgio_submit++;
            }
        }

        //// Completion Phase //////
        //     Iterate through worker and check if they have complete IOs
        for (int i = 0; i &amp;lt; na-&amp;gt;num_workers; i++) {
            worker_thread_data_t* worker = &amp;amp;na-&amp;gt;workers[i];
            int current = worker-&amp;gt;buffer_tail;
            // We know what IO's we're waiting on, but we have to poll
            //  to see if they are done.
            for (int scan = 0; scan &amp;lt; worker-&amp;gt;num_max_bgio; scan++) {
                // Scan until we get to the end of the list
                if (current == worker-&amp;gt;buffer_head) break;
                int buffer_idx = worker-&amp;gt;complete_ring[current];
                int state = na-&amp;gt;buffer_state[buffer_idx];
                if (state == BUFFER_PREFETCHED) {
                    // This buffer is completed - Process this buffer.
                    count += count_tens_unrolled(na-&amp;gt;io_buffers[buffer_idx], na-&amp;gt;block_size);
                    na-&amp;gt;buffer_state[buffer_idx] = BUFFER_UNUSED;
                    blocks_read++;
                    buffer_queued--;
                }
                current = (current + 1) % worker-&amp;gt;num_max_bgio;
            }
            // IO's might have been completed out of order, advance the tail when we can
            current = worker-&amp;gt;buffer_tail;
            while (current != worker-&amp;gt;buffer_head) {
                int buffer_idx = worker-&amp;gt;complete_ring[current];
                int state = na-&amp;gt;buffer_state[buffer_idx];
                if (state != BUFFER_UNUSED) break;
                current = (current + 1) % worker-&amp;gt;num_max_bgio;
            }
            worker-&amp;gt;buffer_tail = current;
            worker-&amp;gt;bgio_submit++;  // probably unnecessary
        }
    }
    long elapsed = get_time_us() - start;
    printf("diskbased found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));

    // Cleanup I/O system
    ioengine_free(na);

    return 0;
}
&lt;/code&gt;
    &lt;p&gt;I hope all this extra code makes it faster.&lt;/p&gt;
    &lt;code&gt;â¯ sudo ./diskbased/benchmark ./mnt/datafile.bin 53687091200
diskbased found 167802249 10s processed at 5.81 GB/s
&lt;/code&gt;
    &lt;p&gt;Boom! Disk is faster than memory! It takes several hundred lines of code but now we can source the data from my SSDs faster than the copy from the page cache in memory.&lt;/p&gt;
    &lt;head rend="h2"&gt;So what's going on here?&lt;/head&gt;
    &lt;p&gt;Of course my 6GB/s disk stripe isnât actually faster than the memory bus, even on this weird hack of a system. So what is happening? Where is the bottleneck? It's got to be the way the data is being read from the page cache in memory.&lt;/p&gt;
    &lt;p&gt;What if we replace the mmap() with a read() from disk into a preallocated buffer. That way we can measure the counting with the data in-memory without any page cache related overhead mmap() can introduce.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY|O_DIRECT);
    void *buf;
    posix_memalign(&amp;amp;buf, 4096, size_bytes);
    int *data = buf;

    size_t off = 0;
    while (off &amp;lt; size_bytes) {
        ssize_t n = read(fd, (char*)data + off, size_bytes - off);
        off += (size_t)n;   // YOLO: assume n &amp;gt; 0 until done
    }

    long start = get_time_us();
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));


    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned((void*)data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    elapsed = get_time_us() - start;

    printf("unrolled loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;If we keep the dataset smaller than a numa domain and we bind this to a single numa node to prevent numa overheads we see that the theoretical memory bandwidth we projected seems to be the primary bottleneck for the unrolled loop as we hoped to see at the outset.&lt;/p&gt;
    &lt;code&gt;â¯  sudo numactl --cpunodebind=0   ./in_ram mnt/datafile.bin 2147483648
simple loop 6709835 10s processed at 4.76 GB/s
unrolled loop 6709835 10s processed at 13.04 GB/s
&lt;/code&gt;
    &lt;p&gt;But this isn't useful to compare the with the other runs with the 50GB dataset. However if we do the full 50GB dataset the performance suffers. We have to get much of the data across numa domains which is going to be higher cost.&lt;/p&gt;
    &lt;code&gt;â¯ sudo ./in_ram ./mnt/datafile.bin 53687091200
simple loop 167802249 10s processed at 3.76 GB/s
unrolled loop 167802249 10s processed at 7.90 GB/s
&lt;/code&gt;
    &lt;p&gt;Comparing the results of "fully in-memory (50GB)" which is pre-loaded in memory before measuring against the "unrolled loop" that is only cached in memory we see 40% overhead. That's 2.75 seconds out of 9 seconds that was spent waiting on the caching system instead of counting. Why so much?&lt;/p&gt;
    &lt;p&gt;mmap()&lt;/p&gt;
    &lt;p&gt;The mmap() call presents the process with a buffer that is a blank slate even when the data is already in memory. The buffer is populated page by page as it's accessed from the page cache. This isn't a copy, it's just the operating system mapping the cached memory into the process. This costs more than it might seem. The worst case with mmap() the counting has to pause at every 4KB page boundary while the kernel processes a fault, tracks down the page of data in the page cache, then updates the page table of the process to insert the memory into the process. Fundamentally this is a process that is limited by the memory latency, not the CPU speed or memory bandwidth. With the potential for TLB walks and searching lists that track the page cache, weâre taking potentially dozens of CPU cache misses and several microseconds of waiting on memory for every 4KB page.&lt;/p&gt;
    &lt;p&gt;direct IO&lt;/p&gt;
    &lt;p&gt;Using our direct from disk approach uses pipelines and streams which avoids the kind of memory latency dominated bottleneck that mmap() has. In our case we're limited by the bandwidth of our disks yet because of the pipelining, the larger latency of the IOs doesn't get in the critical path of the counting very much. Allowing for higher throughput.&lt;/p&gt;
    &lt;head rend="h2"&gt;Scaling&lt;/head&gt;
    &lt;p&gt;Consider the implications of these experiments as we scale. The well vetted solution to get data from memory to a process is slower than using the disk directly. This isn't because the memory is slower than the disk. The memory has higher bandwidth than the disk, not by an order of magnitude, but a decent margin. But the latency of the memory is orders of magnitude lower than the disk. Nevertheless the way the data in memory is accessed is the culprit. Its a synchronous approach that assumes memory operations are cheap and low latency. These accesses add up and it ends up waiting on memory latencies. The disk method on the other hand is as a streaming approach built to leverage bandwidth and hide latencies.&lt;/p&gt;
    &lt;p&gt;extending the existing rig&lt;/p&gt;
    &lt;p&gt;If I got a few more of these disks I could push the IO bandwidth to be greater than the 13GB/s per thread memory bandwidth limit. IO is DMA'ed to buffers that are pretty small compared to the total dataset. These buffers scale with the throughput capabilities of the CPU and the disks, not the dataset size. The buffers can be located in a single numa domain allowing us to avoid the overhead of accessing the buffers between NUMA domains. Add more disks to this system I might be able to create a disk based solution to count at the full 13GB/s rather than be limited to the 7.90GB/s we see with the in memory example at the full 50GB dataset. With such a system our throughput would not be affected by the dataset size, unlike the in-memory case, which has numa overhead and eventually runs out of memory to scale.&lt;/p&gt;
    &lt;p&gt;faster than memory is possible&lt;/p&gt;
    &lt;p&gt;On a proper modern server the CPUs will let you do IO directly to the L3 cache, bypassing memory altogether. Because PCIe bandwidth is higher than memory bandwidth, on paper we could even get more max bandwidth than we can get from memory if we carefully pin the buffers into the CPU cache. I haven't confirm this works in practice, however, it could be made to work and is the sort of thing that CPU designs will be forced to lean into to push performance forward.&lt;/p&gt;
    &lt;p&gt;memory is changing too&lt;/p&gt;
    &lt;p&gt;This isn't just about disks vs memory. Similar techniques and principles apply to memory. Memory bandwidth is still scaling even if the latency is not. This means to take advantage of memory performance you have to actually treat it more like a disk and less like Random Access Memory. To scale performance with generational updates you have to make sure to stream data from memory into the CPU caches in blocks, similar to how data is streamed from disk to memory. If not you end up with 90s level memory throughput. A custom mechanism to cache data in memory could easily avoid the memory latency problems seen with the default mmap() solution with much less code than the io_uring solution.&lt;/p&gt;
    &lt;head rend="h2"&gt;Is this worth it?&lt;/head&gt;
    &lt;p&gt;I'm not going to say that going to the effort of implementing something like this is always worth it. The mmap() method is sure elegant from a coding perspective, especially when compared to all the code I had to write to get the io_uring setup working. Sometimes the simple way is the way to go.&lt;/p&gt;
    &lt;p&gt;Is using 6 cores of IO for 1 core of compute is always the right answer? Probably not. This was an extreme situation to prove a point. In realworld situations you'll need to look at the tradeoffs and decide what's best for your use case. Correctly understanding the strengths and weaknesses of the hardware can open up a number of possibilities where you can get a lot more performance for a lot less money.&lt;/p&gt;
    &lt;p&gt;The kind of overhead demonstrated with mmap() isnât going to go away, new hardware isn't going to fix it. At the same time disk bandwidth and the number of cores are scaling each generation. But doing things that scale performance with new technology is going to take extra code and effort.&lt;/p&gt;
    &lt;p&gt;But don't just blow this stuff off. Sure you can dedicate a server with 3TB of memory to serve 10K client connections. Memory in the cloud is like ~$5/GB/month, if you can afford it, then you do you. However it is worth considering that humanity doesn't have the silicon fabs or the power plants to support this for every moron vibe coder out there making an app. I figure either the karmic debt to the planet, or a vengeful AI demigod hungry for silicon and electricity will come for those that don't heed this warning, eventually. Either way my conscience is clear.&lt;/p&gt;
    &lt;head rend="h2"&gt;Recap&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Memory is slow - when you use it oldschool.&lt;/item&gt;
      &lt;item&gt;Disk is fast - when you are clever with it.&lt;/item&gt;
      &lt;item&gt;Test the dogma - compounded exponentials are flipping somethings from true to false.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Bad news is that this cleverness requires extra code and effort.&lt;/p&gt;
    &lt;p&gt;Good news is we now have AI to write and test the extra code this cleverness requires.&lt;/p&gt;
    &lt;p&gt;Better news is that, for those that are willing to learn, AI's don't do this unless you know how to ask them.&lt;/p&gt;
    &lt;p&gt;Lean into things that scale, avoid things that donât.&lt;/p&gt;
    &lt;head rend="h2"&gt;Next Time&lt;/head&gt;
    &lt;p&gt;What will be revealed in the next episode?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Is O(ân) actually faster than O(log n)? Will the foundations of Computer Science survive this unveiling?&lt;/item&gt;
      &lt;item&gt;Will traditional code be consumed into the latent space of our AI overlords?&lt;/item&gt;
      &lt;item&gt;Is AI hiding these performance gains from me? Is AI even capable of writing optimized code?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Jared Hulbert&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;A few notes for the "um actually" haters commenting on Hacker News:&lt;/p&gt;
      &lt;item&gt;This is not and does not claim to be an academic paper.&lt;/item&gt;
      &lt;item&gt;I do not intend to prove that NAND is a drop in replacement for DRAM.&lt;/item&gt;
      &lt;item&gt;Tis but a humble and hopefully fun exercise in exploring the limits and trends of modern hardware and the tradeoffs needed to maximize performance.&lt;/item&gt;
      &lt;item&gt;As I stated before I have no problem with your choice to ignore this and write lazy code that will perform just as fast on new hardware in 15 years as it does on todays hardware. In fact I applaud your choice. Jeff Bezos has an orbital yacht to build, someone has to pay for it, why not you?&lt;/item&gt;
      &lt;item&gt;I am not an AI. I am a human with a computer that don't write perfect.&lt;/item&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;source code can be found here.&lt;/p&gt;
    &lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.bitflux.ai/blog/memory-is-slow-part2/"/></entry><entry><id>https://news.ycombinator.com/item?id=45132810</id><title>What Is the Fourier Transform?</title><updated>2025-09-05T06:15:13.287785+00:00</updated><content>&lt;doc fingerprint="b00b98134830c362"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;What Is the Fourier Transform?&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;As we listen to a piece of music, our ears perform a calculation. The high-pitched flutter of the flute, the middle tones of the violin, and the low hum of the double bass fill the air with pressure waves of many different frequencies. When the combined sound wave descends through the ear canal and into the spiral-shaped cochlea, hairs of different lengths resonate to the different pitches, separating the messy signal into buckets of elemental sounds.&lt;/p&gt;
    &lt;p&gt;It took mathematicians until the 19th century to master this same calculation.&lt;/p&gt;
    &lt;p&gt;In the early 1800s, the French mathematician Jean-Baptiste Joseph Fourier discovered a way to take any function and decompose it into a set of fundamental waves, or frequencies. Add these constituent frequencies back together, and you’ll get your original function. The technique, today called the Fourier transform, allowed the mathematician — previously an ardent proponent of the French revolution — to spur a mathematical revolution as well.&lt;/p&gt;
    &lt;p&gt;Out of the Fourier transform grew an entire field of mathematics, called harmonic analysis, which studies the components of functions. Soon enough, mathematicians began to discover deep connections between harmonic analysis and other areas of math and physics, from number theory to differential equations to quantum mechanics. You can also find the Fourier transform at work in your computer, allowing you to compress files, enhance audio signals and more.&lt;/p&gt;
    &lt;p&gt;“It’s hard to overestimate the influence of Fourier analysis in math,” said Leslie Greengard of New York University and the Flatiron Institute. “It touches almost every field of math and physics and chemistry and everything else.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Flames of Passion&lt;/head&gt;
    &lt;p&gt;Fourier was born in 1768 amid the chaos of prerevolutionary France. Orphaned at 10 years old, he was educated at a convent in his hometown of Auxerre. He spent the next decade conflicted about whether to dedicate his life to religion or to math, eventually abandoning his religious training and becoming a teacher. He also promoted revolutionary efforts in France until, during the Reign of Terror in 1794, the 26-year-old was arrested and imprisoned for expressing beliefs that were considered anti-revolutionary. He was slated for the guillotine.&lt;/p&gt;
    &lt;p&gt;Before he could be executed, the Terror came to an end. And so, in 1795, he returned to teaching mathematics. A few years later, he was appointed as a scientific adviser to Napoleon Bonaparte and joined his army during the invasion of Egypt. It was there that Fourier, while also pursuing research into Egyptian antiquities, began the work that would lead him to develop his transform: He wanted to understand the mathematics of heat conduction. By the time he returned to France in 1801 — shortly before the French army was driven out of Egypt, the stolen Rosetta stone surrendered to the British — Fourier could think of nothing else.&lt;/p&gt;
    &lt;p&gt;If you heat one side of a metal rod, the heat will spread until the whole rod has the same temperature. Fourier argued that the distribution of heat through the rod could be written as a sum of simple waves. As the metal cools, these waves lose energy, causing them to smooth out and eventually disappear. The waves that oscillate more quickly — meaning they have more energy — decay first, followed eventually by the lower frequencies. It’s like a symphony that ends with each instrument fading to silence, from piccolos to tubas.&lt;/p&gt;
    &lt;p&gt;The proposal was radical. When Fourier presented it at a meeting of the Paris Institute in 1807, the renowned mathematician Joseph-Louis Lagrange reportedly declared the work “nothing short of impossible.”&lt;/p&gt;
    &lt;p&gt;What troubled his peers most were strange cases where the heat distribution might be sharply irregular — like a rod that is exactly half cold and half hot. Fourier maintained that the sudden jump in temperature could still be described mathematically: It would just require adding infinitely many simpler curves instead of a finite number. But most mathematicians at the time believed that no number of smooth curves could ever add up to a sharp corner.&lt;/p&gt;
    &lt;p&gt;Today, we know that Fourier was broadly right.&lt;/p&gt;
    &lt;p&gt;“You can represent anything as a sum of these very, very simple oscillations,” said Charles Fefferman, a mathematician at Princeton University. “It’s known that if you have a whole lot of tuning forks, and you set them perfectly, they can produce Beethoven’s Ninth Symphony.” The process only fails for the most bizarre functions, like those that oscillate wildly no matter how much you zoom in on them.&lt;/p&gt;
    &lt;p&gt;So how does the Fourier transform work?&lt;/p&gt;
    &lt;head rend="h2"&gt;A Well-Trained Ear&lt;/head&gt;
    &lt;p&gt;Performing a Fourier transform is akin to sniffing a perfume and distinguishing its list of ingredients, or hearing a complex jazzy chord and distinguishing its constituent notes.&lt;/p&gt;
    &lt;p&gt;Mathematically, the Fourier transform is a function. It takes a given function — which can look complicated — as its input. It then produces as its output a set of frequencies. If you write down the simple sine and cosine waves that have these frequencies, and then add them together, you’ll get the original function.&lt;/p&gt;
    &lt;p&gt;To achieve this, the Fourier transform essentially scans all possible frequencies and determines how much each contributes to the original function. Let’s look at a simple example.&lt;/p&gt;
    &lt;p&gt;Consider the following function:&lt;/p&gt;
    &lt;p&gt;The Fourier transform checks how much each frequency contributes to this original function. It does so by multiplying waves together. Here’s what happens if we multiply the original by a sine wave with a frequency of 3:&lt;/p&gt;
    &lt;p&gt;There are lots of large peaks, which means the frequency 3 contributes to the original function. The average height of the peaks reveals how large the contribution is.&lt;/p&gt;
    &lt;p&gt;Now let’s test if the frequency 5 is present. Here’s what you get when you multiply the original function by a sine wave with the frequency 5:&lt;/p&gt;
    &lt;p&gt;There are some large peaks but also large valleys. The new graph averages out to around zero. This indicates that the frequency 5 does not contribute to the original function.&lt;/p&gt;
    &lt;p&gt;The Fourier transform does this for all possible frequencies, multiplying the original function by both sine and cosine waves. (In practice, it runs this comparison on the complex plane, using a combination of real and imaginary numbers.)&lt;/p&gt;
    &lt;p&gt;In this way, the Fourier transform can decompose a complicated-looking function into just a few numbers. This has made it a crucial tool for mathematicians: If they are stumped by a problem, they can try transforming it. Often, the problem becomes much simpler when translated into the language of frequencies.&lt;/p&gt;
    &lt;p&gt;If the original function has a sharp edge, like the square wave below (which is often found in digital signals), the Fourier transform will produce an infinite set of frequencies that, when added together, approximate the edge as closely as possible. This infinite set is called the Fourier series, and — despite mathematicians’ early hesitation to accept such a thing — it is now an essential tool in the analysis of functions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Encore&lt;/head&gt;
    &lt;p&gt;The Fourier transform also works on higher-dimensional objects such as images. You can think of a grayscale image as a two-dimensional function that tells you how bright each pixel is. The Fourier transform decomposes this function into a set of 2D frequencies. The sine and cosine waves defined by these frequencies form striped patterns oriented in different directions. These patterns — and simple combinations of them that resemble checkerboards — can be added together to re-create any image.&lt;/p&gt;
    &lt;p&gt;Any 8-by-8 image, for example, can be built from some combination of the 64 building blocks below. A compression algorithm can then remove high-frequency information, which corresponds to small details, without drastically changing how the image looks to the human eye. This is how JPEGs compress complex images into much smaller amounts of data.&lt;/p&gt;
    &lt;p&gt;In the 1960s, the mathematicians James Cooley and John Tukey came up with an algorithm that could perform a Fourier transform much more quickly — aptly called the fast Fourier transform. Since then, the Fourier transform has been implemented practically every time there is a signal to process. “It’s now a part of everyday life,” Greengard said.&lt;/p&gt;
    &lt;p&gt;It has been used to study the tides, to detect gravitational waves, and to develop radar and magnetic resonance imaging. It allows us to reduce noise in busy audio files, and to compress and store all sorts of data. In quantum mechanics — the physics of the very small — it even provides the mathematical foundation for the uncertainty principle, which says that it’s impossible to know the precise position and momentum of a particle at the same time. You can write down a function that describes a particle’s possible positions; the Fourier transform of that function will describe the particle’s possible momenta. When your function can tell you where a particle will be located with high probability — represented by a sharp peak in the graph of the function — the Fourier transform will be very spread out. It will be impossible to determine what the particle’s momentum should be. The opposite is also true.&lt;/p&gt;
    &lt;p&gt;The Fourier transform has spread its roots throughout pure mathematics research, too. Harmonic analysis — which studies the Fourier transform, as well as how to reverse it to rebuild the original function — is a powerful framework for studying waves. Mathematicians have also found that harmonic analysis has deep and unexpected connections to number theory. They’ve used these connections to explore relationships among the integers, including the distribution of prime numbers, one of the greatest mysteries in mathematics.&lt;/p&gt;
    &lt;p&gt;“If people didn’t know about the Fourier transform, I don’t know what percent of math would then disappear,” Fefferman said. “But it would be a big percent.”&lt;/p&gt;
    &lt;p&gt;Editor’s note: The Flatiron Institute is funded by the Simons Foundation, which also funds this editorially independent magazine. Simons Foundation funding decisions have no influence on our coverage. More information about the relationship between Quanta Magazine and the Simons Foundation is available here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/what-is-the-fourier-transform-20250903/"/></entry><entry><id>https://news.ycombinator.com/item?id=45133109</id><title>I ditched Spotify and set up my own music stack</title><updated>2025-09-05T06:15:13.144190+00:00</updated><content>&lt;doc fingerprint="2c6370656bbaefb9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why I Ditched Spotify, and How I Set Up My Own Music Stack&lt;/head&gt;
    &lt;head rend="h2"&gt;Why I Ditched Spotify, and How I Set Up My Own Music Stack&lt;/head&gt;
    &lt;p&gt;For years, I relied on Spotify like millions of others. The convenience was undeniable stream anything, anywhere, discover new music through algorithms, and share playlists with friends. But over time, several issues became impossible to ignore: artists getting paid fractions of pennies per stream, fake Artists and ghost Tracks, AI music and impersonation, creepy age verification complicity and the fact that despite paying monthly, I never actually owned anything. So I decided to take back control of my music experience. Here's how I built my own self-hosted music streaming setup that gives me everything Spotify offered and more.&lt;/p&gt;
    &lt;p&gt;There are components of this post which may be improved if you zoom in with your device. The mermaid diagram and code blocks in particular may be hard to read on smaller screens.&lt;/p&gt;
    &lt;head rend="h2"&gt;High Level Overview&lt;/head&gt;
    &lt;head rend="h2"&gt;The Components&lt;/head&gt;
    &lt;head rend="h3"&gt;Music Player: Navidrome&lt;/head&gt;
    &lt;p&gt;At the core of my setup is Navidrome, an open-source music server that handles streaming your personal music collection.&lt;/p&gt;
    &lt;p&gt;To access my music from anywhere, I expose Navidrome via a CloudFlare Tunnel, which provides secure access without exposing my home IP address or dealing with port forwarding.&lt;/p&gt;
    &lt;p&gt;For client apps, I use:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Browser: Navidrome's built-in web player works perfectly&lt;/item&gt;
      &lt;item&gt;iOS: Play:Sub connects seamlessly&lt;/item&gt;
      &lt;item&gt;Android: Symfonium offers excellent playback quality and features&lt;/item&gt;
      &lt;item&gt;Desktop: Feishin provides a native app experience with synced lyrics&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Scrobbling: (Internet slang) To publish one's music-listening habits to the Internet via software, in order to track when and how often certain songs are played.&lt;/p&gt;
    &lt;p&gt;Every track I play through this setup automatically scrobbles to my Last.fm account, which becomes important for music discovery later.&lt;/p&gt;
    &lt;head rend="h3"&gt;Music Collection Management: Lidarr&lt;/head&gt;
    &lt;p&gt;Lidarr helps manage my music collection by tracking artists and albums I own or purchase. It can monitor for new releases from favorite artists and helps organize my library.&lt;/p&gt;
    &lt;p&gt;Lidarr is just a tool. Like any tool, it can be misused. Yes, people could point it at less-than-legal sources. No, I'm not telling you to do that. If you want to support artists, buy their work. If you don't, don't pretend Spotify streams are "support."&lt;/p&gt;
    &lt;p&gt;Important Note: Always ensure you're obtaining music through legal channels such as:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Digital purchases (Bandcamp, iTunes, Amazon, etc.)&lt;/item&gt;
      &lt;item&gt;Ripping CDs you've purchased&lt;/item&gt;
      &lt;item&gt;Free legal downloads offered by artists&lt;/item&gt;
      &lt;item&gt;Music available under Creative Commons licenses&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;My setup uses sabnzbd integrated with Lidarr for handling downloads of content I've purchased. Both services run in Docker containers and are NOT exposed to the internet for security.&lt;/p&gt;
    &lt;head rend="h3"&gt;Synced Lyrics: lrcget-kasm&lt;/head&gt;
    &lt;p&gt;A feature I missed from Spotify was synced lyrics. lrcget-kasm fills this gap by mass-downloading LRC synced lyrics files for my music library.&lt;/p&gt;
    &lt;p&gt;Since lrcget is GUI-only (no CLI version yet), I'm using a containerized version of it via Kasm and access it through my browser. It's a bit resource-intensive, so I only run it when adding new music or updating lyrics.&lt;/p&gt;
    &lt;p&gt;I've opened a feature request for a CLI version, which would make this process more automation-friendly.&lt;/p&gt;
    &lt;head rend="h3"&gt;Music Discovery: Lidify&lt;/head&gt;
    &lt;p&gt;One of Spotify's strongest features was music discovery. For this, I use Lidify, which connects to my Lidarr library and Last.fm account to generate recommendations.&lt;/p&gt;
    &lt;p&gt;I've also connected my Last.fm scrobbles to ListenBrainz, which promises to build weekly discovery playlists similar to Spotify's in the future.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Results&lt;/head&gt;
    &lt;p&gt;After several months with this setup, I'm extremely satisfied with the results:&lt;/p&gt;
    &lt;head rend="h3"&gt;How My Solution Compares to Spotify&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Feature&lt;/cell&gt;
        &lt;cell role="head"&gt;Spotify&lt;/cell&gt;
        &lt;cell role="head"&gt;My Self-Hosted Stack&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Music Quality&lt;/cell&gt;
        &lt;cell&gt;Up to 320kbps&lt;/cell&gt;
        &lt;cell&gt;Unlimited (FLAC/lossless)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Monthly Cost&lt;/cell&gt;
        &lt;cell&gt;$9.99-$14.99&lt;/cell&gt;
        &lt;cell&gt;One-time server setup + storage&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Artist Payment&lt;/cell&gt;
        &lt;cell&gt;~$0.003-0.005 per stream&lt;/cell&gt;
        &lt;cell&gt;Direct support via purchases&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Music Ownership&lt;/cell&gt;
        &lt;cell&gt;Rental only&lt;/cell&gt;
        &lt;cell&gt;Full ownership forever&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Offline Access&lt;/cell&gt;
        &lt;cell&gt;Limited downloads&lt;/cell&gt;
        &lt;cell&gt;Complete library available&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Privacy&lt;/cell&gt;
        &lt;cell&gt;Data collection &amp;amp; tracking&lt;/cell&gt;
        &lt;cell&gt;Complete privacy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Content Permanence&lt;/cell&gt;
        &lt;cell&gt;Can disappear anytime&lt;/cell&gt;
        &lt;cell&gt;Never removed unless I choose&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The initial setup took a weekend, but maintenance is minimal. When I want new music, Lidarr handles it automatically. If I need to manually add something, I just drop the files in the right folder and Navidrome indexes them immediately.&lt;/p&gt;
    &lt;p&gt;Is it for everyone? No. But if you care about music, value ownership, and have basic technical skills, building your own music streaming solution is both achievable and rewarding. The freedom from corporate streaming platforms is worth the effort.&lt;/p&gt;
    &lt;head rend="h2"&gt;Supporting Artists&lt;/head&gt;
    &lt;p&gt;Moving away from Spotify doesn't mean abandoning artists. In fact, I now support musicians more directly by:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Purchasing music directly from platforms like Bandcamp where artists receive 82-90% of sales&lt;/item&gt;
      &lt;item&gt;Buying physical media from official stores&lt;/item&gt;
      &lt;item&gt;Supporting Patreon/subscription services for favorite artists&lt;/item&gt;
      &lt;item&gt;Attending concerts and buying merchandise&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Buying a $10 album on Bandcamp puts about $8.20-$9.00 in the artist's pocket. To match that on Spotify, you're talking roughly 1.6k-3k streams of that album per listener. If the artist has a label taking a cut on Spotify, the stream counts needed go up further.&lt;/p&gt;
    &lt;p&gt;My self-hosted setup is about controlling my listening experience and owning what I pay for, not avoiding fair compensation to artists.&lt;/p&gt;
    &lt;head rend="h2"&gt;What's Next?&lt;/head&gt;
    &lt;p&gt;I'm continually refining this setup. Future improvements include automating the lyrics process and exploring more discovery tools. The beauty of a self-hosted solution is that it can evolve with my needs, rather than changing at the whim of a company's business model.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://leshicodes.github.io/blog/spotify-migration/"/></entry><entry><id>https://news.ycombinator.com/item?id=45133289</id><title>Unix Conspiracy (1991)</title><updated>2025-09-05T06:15:04.191375+00:00</updated><content>&lt;doc fingerprint="edac295e98ad8fb4"&gt;
  &lt;main&gt;
    &lt;p&gt;[ITS] According to a conspiracy theory long popular among ITS and TOPS-20 fans, Unix's growth is the result of a plot, hatched during the 1970s at Bell Labs, whose intent was to hobble AT&amp;amp;T's competitors by making them dependent upon a system whose future evolution was to be under AT&amp;amp;T's control. This would be accomplished by disseminating an operating system that is apparently inexpensive and easily portable, but also relatively unreliable and insecure (so as to require continuing upgrades from AT&amp;amp;T). This theory was lent a substantial impetus in 1984 by the paper referenced in the back door entry.&lt;/p&gt;
    &lt;p&gt;In this view, Unix was designed to be one of the first computer viruses (see virus) — but a virus spread to computers indirectly by people and market forces, rather than directly through disks and networks. Adherents of this ‘Unix virus’ theory like to cite the fact that the well-known quotation “Unix is snake oil” was uttered by DEC president Kenneth Olsen shortly before DEC began actively promoting its own family of Unix workstations. (Olsen now claims to have been misquoted.)&lt;/p&gt;
    &lt;p&gt;If there was ever such a conspiracy, it got thoroughly out of the plotters' control after 1990. AT&amp;amp;T sold its Unix operation to Novell around the same time Linux and other free-Unix distributions were beginning to make noise.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="http://www.catb.org/~esr/jargon/html/U/Unix-conspiracy.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45133652</id><title>Evolving the OCaml Programming Language (2025) [pdf]</title><updated>2025-09-05T06:15:03.707788+00:00</updated><content/><link href="https://kcsrk.info/slides/Evolution_Ashoka_2025.pdf"/></entry><entry><id>https://news.ycombinator.com/item?id=45133935</id><title>Forking Chrome to render in a terminal (2023)</title><updated>2025-09-05T06:15:03.392620+00:00</updated><content>&lt;doc fingerprint="afa2e9556fb0038d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Forking Chrome to render in a terminal&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;January 27, 2023&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I wrote about forking Chrome to turn HTML to SVG two months ago, today we're going to do something similar by making it render into a terminal.&lt;/p&gt;
    &lt;p&gt;Let me introduce you to the Carbonyl web browser!&lt;/p&gt;
    &lt;head rend="h2"&gt;Drawing&lt;/head&gt;
    &lt;p&gt;There isn't much you can draw in a terminal, you're guaranteed to be able to render monospace characters in a fixed grid, and that's it. Escape sequences exist to perform actions like moving the cursor, changing the text color, or mouse tracking. Some came from the days of physical terminals like the DEC VT100, others came from the xterm project.&lt;/p&gt;
    &lt;p&gt;Assuming a popular terminal emulator, we can:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Move the cursor&lt;/item&gt;
      &lt;item&gt;Write Unicode characters&lt;/item&gt;
      &lt;item&gt;Set a character's background and foreground color&lt;/item&gt;
      &lt;item&gt;Use a 6x6x6 RGB palette, or 24 bits RGB if &lt;code&gt;COLORTERM&lt;/code&gt;is set the&lt;code&gt;truecolor&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;One of the unicode characters we can render is the lower half block element &lt;code&gt;U+2584&lt;/code&gt;: &lt;code&gt;▄&lt;/code&gt;. Knowing that cells generally have an aspect ratio of 1:2, we can render perfectly square pixels by setting the background color to the top pixel color, and the foregound color to the bottom pixel color.&lt;/p&gt;
    &lt;p&gt;Let's hook &lt;code&gt;html2svg&lt;/code&gt;'s output into a Rust program:&lt;/p&gt;
    &lt;code&gt;fn move_cursor((x, y): (usize, usize)) {
    println!("\x1b[{};{}H", y + 1, x + 1)
}

fn set_foreground((r, g, b): (u8, u8, u8)) {
    println!("\x1b[38;2;{};{};{}m", r, g, b)
}

fn set_background((r, g, b): (u8, u8, u8)) {
    println!("\x1b[48;2;{};{};{}m", r, g, b)
}

fn print_pixels_pair(
    top: (u8, u8, u8),
    bottom: (u8, u8, u8),
    cursor: (usize, usize)
) {
    move_cursor(cursor);
    set_background(top);
    set_foreground(bottom);
    println!("▄");
}
&lt;/code&gt;
    &lt;p&gt;Not bad. To render text, we need to create a new Skia device using C++, lets call it &lt;code&gt;TextCaptureDevice&lt;/code&gt;. We'll make it call a &lt;code&gt;draw_text&lt;/code&gt; function written in Rust. Just like in &lt;code&gt;html2svg&lt;/code&gt;, we need to convert glyph IDs into unicode characters.&lt;/p&gt;
    &lt;code&gt;class TextCaptureDevice: public SkClipStackDevice {
  void onDrawGlyphRunList(SkCanvas*,
                          const sktext::GlyphRunList&amp;amp; glyphRunList,
                          const SkPaint&amp;amp;,
                          const SkPaint&amp;amp; paint) override {
    // Get the text position
    auto position = localToDevice().mapRect(glyphRunList.origin());

    for (auto&amp;amp; glyphRun : glyphRunList) {
      auto runSize = glyphRun.runSize();
      SkAutoSTArray&amp;lt;64, SkUnichar&amp;gt; unichars(runSize);

      // Convert glyph IDs to Unicode characters
      SkFontPriv::GlyphsToUnichars(glyphRun.font(),
                                  glyphRun.glyphsIDs().data(),
                                  runSize,
                                  unichars.get());

      // Draw that text on the terminal
      draw_text(unichars.data(), runSize, position, paint.getColor());
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;Better! But the text is scrambled at the center. Our &lt;code&gt;TextCaptureDevice&lt;/code&gt; does not account for occlusion, drawing a rectangle does not clear the text behind it.&lt;/p&gt;
    &lt;p&gt;Let's add some code to the &lt;code&gt;drawRect&lt;/code&gt; and &lt;code&gt;drawRRect&lt;/code&gt; methods to clear the text if we're filling with a solid color:&lt;/p&gt;
    &lt;code&gt;void drawRRect(const SkRRect&amp;amp; rect, const SkPaint&amp;amp; paint) override {
    drawRect(rect.rect(), paint);
}

void drawRect(const SkRect&amp;amp; rect, const SkPaint&amp;amp; paint) override {
    if (
        paint.getStyle() == SkPaint::Style::kFill_Style &amp;amp;&amp;amp;
        paint.getAlphaf() == 1.0
    ) {
        clear_text(localToDevice().mapRect(rect));
    }
}
&lt;/code&gt;
    &lt;p&gt;The gray background behind text elements is caused by the software rasterizer rendering text in our bitmap. Let's remove it:&lt;/p&gt;
    &lt;code&gt;void SkBitmapDevice::onDrawGlyphRunList(SkCanvas* canvas,
                                        const sktext::GlyphRunList&amp;amp; glyphRunList,
                                        const SkPaint&amp;amp; initialPaint,
                                        const SkPaint&amp;amp; drawingPaint) {
-    SkASSERT(!glyphRunList.hasRSXForm());
-    LOOP_TILER( drawGlyphRunList(canvas, &amp;amp;fGlyphPainter, glyphRunList, drawingPaint), nullptr )
}
&lt;/code&gt;
    &lt;p&gt;That was the easy part, let's handle inputs!&lt;/p&gt;
    &lt;head rend="h2"&gt;Input&lt;/head&gt;
    &lt;code&gt;fn report_mouse_move((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[&amp;lt;35;{};{}M", y + 1, x + 1)
}
fn report_mouse_down((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[&amp;lt;0;{};{}M", y + 1, x + 1)
}
fn report_mouse_up((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[&amp;lt;0;{};{}m", y + 1, x + 1)
}
&lt;/code&gt;
    &lt;p&gt;Some sequences exist to get a terminal emulator to track and report mouse events. For example, if you print &lt;code&gt;\x1b[?1003h&lt;/code&gt;, the terminal should start sending events using this format:&lt;/p&gt;
    &lt;p&gt;These are similar to the sequences we use for styling our output. The &lt;code&gt;\x1b[&lt;/code&gt; prefix is called the Control Sequence Introducer.&lt;/p&gt;
    &lt;code&gt;carbonyl::browser-&amp;gt;BrowserMainThread()-&amp;gt;PostTask(
    FROM_HERE,
    base::BindOnce(
        &amp;amp;HeadlessBrowserImpl::OnMouseDownInput,
        x,
        y
    )
);
&lt;/code&gt;
    &lt;p&gt;We need to notify the browser to wrap this up, but there is a catch: we need to block a thread to read stdin, but the browser methods should be called from the main thread. Thankfully, messages passing is available almost everywhere through the &lt;code&gt;TaskRunner&lt;/code&gt;
class.&lt;/p&gt;
    &lt;code&gt;for &amp;amp;key in input {
    sequence = match sequence {
        Sequence::Char =&amp;gt; match key {
            0x1b =&amp;gt; Sequence::Escape,
            0x03 =&amp;gt; emit!(Event::Exit),
            key =&amp;gt; emit!(Event::KeyPress { key }),
        },
        Sequence::Escape =&amp;gt; match key {
            b'[' =&amp;gt; Sequence::Control,
            b'P' =&amp;gt; Sequence::DeviceControl(DeviceControl::new()),
            0x1b =&amp;gt;
                emit!(Event::KeyPress { key: 0x1b }; continue),
            key =&amp;gt; {
                emit!(Event::KeyPress { key: 0x1b });
                emit!(Event::KeyPress { key })
            }
        },
        Sequence::Control =&amp;gt; match key {
            b'&amp;lt;' =&amp;gt; Sequence::Mouse(Mouse::new()),
            b'A' =&amp;gt; emit!(Event::KeyPress { key: 0x26 }),
            b'B' =&amp;gt; emit!(Event::KeyPress { key: 0x28 }),
            b'C' =&amp;gt; emit!(Event::KeyPress { key: 0x27 }),
            b'D' =&amp;gt; emit!(Event::KeyPress { key: 0x25 }),
            _ =&amp;gt; Sequence::Char,
        },
        Sequence::Mouse(ref mut mouse) =&amp;gt; parse!(mouse, key),
        Sequence::DeviceControl(ref mut dcs) =&amp;gt; parse!(dcs, key),
    }
}
&lt;/code&gt;
    &lt;head rend="h2"&gt;Pipe&lt;/head&gt;
    &lt;p&gt;We have something that sorts of work, at the cost of a steady 400% CPU usage, and that's not counting iTerm2 which uses ~200%. We've got a few problems:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;We need too much resources to render at 5 FPS&lt;/item&gt;
      &lt;item&gt;We render every time, even when nothing changes&lt;/item&gt;
      &lt;item&gt;We print all characters even if they didn't change on an individual level&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Modern browsers employ a multi-process architecture to improve security. It separates websites into different processes, reducing the potential damage caused by vulnerabilities. The renderer process is running in an OS-level sandboxed environment that blocks certain system calls, such as file-system access. The GPU process, is also considered unprivileged and cannot reach renderer process in order to protect against vulnerabilities in GPU APIs such as WebGL. In contrast, the browser process, considered privileged, can communicate freely with any process.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;CapturePaintPreview&lt;/code&gt; is great for &lt;code&gt;html2svg&lt;/code&gt;, but it's not designed for real-time rendering. It's using IPC calls to correctly support out-of-process iframes, making roundtrips between the browser, GPU, and renderer processes. It downloads hardware accelerated images from the GPU, explaining the surprising memory bandwidth usage. We can disable the fetching, and even disable hardware acceleration, but we still have an expensive IPC machinery holding us back.&lt;/p&gt;
    &lt;p&gt;Software rendering is still very common, it even used to be the default if you can believe it. It was fairly easy back in the single-process days, but nowadays shared memory regions are configured to efficiently render using multiple processes. If we can get our pixels into one of these memory regions, we would just have to notify our browser process using a simple IPC message.&lt;/p&gt;
    &lt;code&gt;void LayeredWindowUpdater::OnAllocatedSharedMemory(
    const gfx::Size&amp;amp; pixel_size,
    base::UnsafeSharedMemoryRegion region
) {
    if (region.IsValid())
        shm_mapping_ = region.Map();
}

void LayeredWindowUpdater::Draw(
    const gfx::Rect&amp;amp; damage_rect,
    DrawCallback draw_callback
) {
    carbonyl_draw_bitmap(
        shm_mapping_.GetMemoryAs&amp;lt;uint8_t&amp;gt;(),
        shm_mapping_.size()
    );

    std::move(draw_callback).Run();
}
&lt;/code&gt;
    &lt;p&gt;In order to setup this shared memory, we need to implement a &lt;code&gt;HostDisplayClient&lt;/code&gt; and a &lt;code&gt;SoftwareOutputDevice&lt;/code&gt; to manage a custom &lt;code&gt;LayeredWindowUpdater&lt;/code&gt; which implements &lt;code&gt;OnAllocatedSharedMemory()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;HostDisplayClient&lt;/code&gt; runs in the browser process and is called by the GPU process through IPC. To wrap this up we need to make the GPU process use our custom display client by adding the following to &lt;code&gt;VizProcessTransportFactory::OnEstablishedGpuChannel()&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;compositor_data.display_client =
-      std::make_unique&amp;lt;HostDisplayClient&amp;gt;(compositor);
+      std::make_unique&amp;lt;carbonyl::HostDisplayClient&amp;gt;();
&lt;/code&gt;
    &lt;p&gt;We solved the bitmap problem, now how can we extract text data? This data lives in the renderer process, but our windowing code lives in the browser process. We need to make the renderer interact with the browser process.&lt;/p&gt;
    &lt;head rend="h2"&gt;Mojo&lt;/head&gt;
    &lt;code&gt;// Our C++ bindings will be in the carbonyl::mojom namespace
module carbonyl.mojom;

// Import existing bindings to common structures
import "ui/gfx/geometry/mojom/geometry.mojom";
import "skia/public/mojom/skcolor.mojom";

// Define a structure to hold text to render
struct TextData {
    // An UTF-8 string with the contents
    string contents;
    // Bounds, size only defined for clearing
    gfx.mojom.RectF bounds;
    // Color of the text
    skia.mojom.SkColor color;
};

// The browser process runs this service
interface CarbonylRenderService {
    // The renderer process calls this method
    DrawText(array&amp;lt;TextData&amp;gt; data);
};
&lt;/code&gt;
    &lt;p&gt;Mojo is a library for inter-process communication. It defines an IDL for serializing data which supports native handles (i.e. file descriptors, shared memory regions, callbacks), and can be used to generate C++, Java (Android), and JavaScript (DevTools) bindings. It's extensively documented, and fairly simple to use.&lt;/p&gt;
    &lt;p&gt;We'll start by making an interface &lt;code&gt;CarbonylRenderService&lt;/code&gt; that runs on the browser process, with a method &lt;code&gt;DrawText&lt;/code&gt; called from the renderer process.&lt;/p&gt;
    &lt;p&gt;This &lt;code&gt;.mojom&lt;/code&gt; code generates C++ temporary files which we can then include to write the implementation code.&lt;/p&gt;
    &lt;p&gt;Mojo receivers such as our service are part of the native handles we can send between processes, to register the implementation we just need to add it to the &lt;code&gt;BrowserInterfaceBroker&lt;/code&gt;, which will get called by the renderer through &lt;code&gt;BrowserInterfaceBrokerProxy&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;map-&amp;gt;Add&amp;lt;carbonyl::mojom::CarbonylRenderService&amp;gt;(
    base::BindRepeating(&amp;amp;RenderFrameHostImpl::GetCarbonylRenderService,
                        base::Unretained(host)));
&lt;/code&gt;
    &lt;code&gt;GetBrowserInterfaceBroker().GetInterface(
  std::move(carbonyl_render_service_receiver_)
);
&lt;/code&gt;
    &lt;p&gt;Now, we need to get our text data without any expensive round-trip. Blink has a &lt;code&gt;GetPaintRecord()&lt;/code&gt; method to get the latest paint data for a page, but it's not behind a public API, which we need because our code runs in the content renderer. Ideally we should hook into the compositor (&lt;code&gt;cc&lt;/code&gt;), but it's way more involved. It's dirty but we can workaround this by casting to the private &lt;code&gt;blink::WebViewImpl&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;auto* view = static_cast&amp;lt;blink::WebViewImpl*&amp;gt;(GetWebFrame()-&amp;gt;View());

view-&amp;gt;MainFrameImpl()-&amp;gt;GetFrame()-&amp;gt;View()-&amp;gt;GetPaintRecord().Playback(&amp;amp;canvas);
carbonyl_render_service_-&amp;gt;DrawText(std::move(data));
&lt;/code&gt;
    &lt;p&gt;Surprise after the first run: the text content doesn't follow the bitmap. Aaah, scrolling and animating is done on the compositor thread, which frees the main thread and makes everything smoother. Let's procastinate doing things right by adding &lt;code&gt;--disable-threaded-scrolling&lt;/code&gt; &lt;code&gt;--disable-threaded-animation&lt;/code&gt; to the command line arguments.&lt;/p&gt;
    &lt;p&gt;Pretty smooth, it'll be even smoother when threaded compositing is fixed! And we've fixed our biggest problem: we don't use any CPU when idling, and scrolling consumes ~15%.&lt;/p&gt;
    &lt;head rend="h2"&gt;Layout&lt;/head&gt;
    &lt;code&gt;auto font = state.StyleBuilder().GetFontDescription();

font.SetStretch(ExtraExpandedWidthValue());
font.SetKerning(FontDescription::kNoneKerning);
font.SetComputedSize(11.75 / 7.0);
font.SetGenericFamily(FontDescription::kMonospaceFamily);
font.SetIsAbsoluteSize(true);
state.StyleBuilder().SetFontDescription(font);
state.StyleBuilder().SetLineHeight(Length::Fixed(14.0 / 7.0));
&lt;/code&gt;
    &lt;p&gt;Thing is, we can only render one font-size, but Blink doesn't know that. This causes the layout to be messed up, with text chunks overlapping or overly spaced. This is especially visible on websites with a lot of textual content and links like Wikipedia.&lt;/p&gt;
    &lt;p&gt;Another dirty - yet effective - hack we can use is forcing a monospaced font on every element. We can do that by adding some code to &lt;code&gt;StyleResolver::ResolveStyle&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;LoDPI&lt;/head&gt;
    &lt;code&gt;// static
float Display::GetForcedDeviceScaleFactor() {
    return 1.0 / 7.0;
}

// static
bool Display::HasForceDeviceScaleFactor() {
    return true;
}
&lt;/code&gt;
    &lt;p&gt;One expensive step in our rendering pipeline is downscaling: we need to resize the framebuffer from its virtual space to its physical space. What we're doing is kind of the opposite of HiDPI rendering, whose most common ratio is 2, which means 1 pixel on the web equals 4 pixels on the screen. Our ratio is &lt;code&gt;1 / 7&lt;/code&gt; which means 49 pixels on the web renders to 1 block on our terminal.&lt;/p&gt;
    &lt;p&gt;The annoying thing about HiDPI is that it can make rendering ~4x slower, whereas Carbonyl LoDPI® makes rendering run ~49x faster. We just need to force our scaling into the &lt;code&gt;Display&lt;/code&gt; class.&lt;/p&gt;
    &lt;head rend="h2"&gt;Color&lt;/head&gt;
    &lt;p&gt;I looked for examples of RGB color conversion to &lt;code&gt;xterm-256&lt;/code&gt; but the code I found was either wrong or slow because it did a nearest neighbor search. We're going to do it for every pixel so it should run fast.&lt;/p&gt;
    &lt;p&gt;The formula for the conversion is fairly simple, assuming color values between 0 and 1: &lt;code&gt;16 + r * 5 * 36 + g * 5 * 6 + b * 5&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;pub fn to_xterm(&amp;amp;self) -&amp;gt; u8 {
    let r = (self.r as f32 - (95.0 - 40.0)).max(0.0) / 40.0;
    let g = (self.g as f32 - (95.0 - 40.0)).max(0.0) / 40.0;
    let b = (self.b as f32 - (95.0 - 40.0)).max(0.0) / 40.0;

    (16.0 +
        r.round() * 36.0 +
        g.round() * 6.0 +
        b.round()) as u8
}
&lt;/code&gt;
    &lt;p&gt;The twist that most code online gets wrong is that the 6 color levels are not linear: 0, 95, 135, 175, 215, 255; there is a 95 gap between the first and second values, and 40 for the rest.&lt;/p&gt;
    &lt;p&gt;It makes sense to limit the dark range, color differences are more visible with bright colors. For us, it means that we can convert a value between 0 and 255 using &lt;code&gt;max(0, color - 95 - 40) / 40&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;pub fn to_xterm(&amp;amp;self) -&amp;gt; u8 {
    if self.max_val() - self.min_val() &amp;lt; 8 {
        match self.r {
            0..=4 =&amp;gt; 16,
            5..=8 =&amp;gt; 232,
            238..=246 =&amp;gt; 255,
            247..=255 =&amp;gt; 231,
            r =&amp;gt; 232 + (r - 8) / 10,
        }
    } else {
        let scale = 5.0 / 200.0;

        (16.0
            + self
                .cast::&amp;lt;f32&amp;gt;()
                .mul_add(scale, scale * -55.0)
                .max(0.0)
                .round()
                .dot((36.0, 6.0, 1.0))) as u8
    }
}
&lt;/code&gt;
    &lt;p&gt;The conversion itself can be thought of as a dot product of &lt;code&gt;(r, g, b)&lt;/code&gt; and &lt;code&gt;(36, 6, 1)&lt;/code&gt;. We can move the substraction to an &lt;code&gt;mul_add&lt;/code&gt; call to help the compiler use a fused multiply-add instruction.&lt;/p&gt;
    &lt;p&gt;The last step is grayscale: our xterm profile offers 256 colors, there are the 216 colors from the RGB cube (&lt;code&gt;6 * 6 * 6&lt;/code&gt;), the 16 configurable system colors, and 24 gray levels which go from &lt;code&gt;rgb(8,8,8)&lt;/code&gt; to &lt;code&gt;rgb(238,238,238)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;To find out if a color is on a grayscale, we can substract its minimal value to its maximum value and check if it's under a threshold, let's say 8.&lt;/p&gt;
    &lt;p&gt;We still have one tiny problem: how can you detect if a terminal supports true-color or 256 colors? A quick Google search leads us to the &lt;code&gt;COLORTERM&lt;/code&gt; environment variable,
which is &lt;code&gt;24bit&lt;/code&gt; or &lt;code&gt;truecolor&lt;/code&gt; if true-color is supported. But that won't work in
Docker or SSH, which are our primary targets.&lt;/p&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Code =&amp;gt; match key {
        b'0' | b'1' =&amp;gt; Type(key),
        _ =&amp;gt; control_flow!(break)?,
    },
&lt;/code&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Type(code) =&amp;gt; match key {
        b'$' =&amp;gt; Status(StatusParser::new(code)),
        b'+' =&amp;gt; Resource(ResourceParser::new(code)),
        _ =&amp;gt; control_flow!(break)?,
    },
&lt;/code&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Status(ref mut status) =&amp;gt; return status.parse(key),
    Resource(ref mut resource) =&amp;gt; return resource.parse(key),
};
&lt;/code&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Start =&amp;gt; match key {
        b'r' =&amp;gt; Value,
        _ =&amp;gt; control_flow!(break)?,
    },
&lt;/code&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Value =&amp;gt; match key {
&lt;/code&gt;
    &lt;code&gt;        // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;        0x1b =&amp;gt; self.terminate(),
&lt;/code&gt;
    &lt;code&gt;        // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;        b';' =&amp;gt; self.push_value(),
&lt;/code&gt;
    &lt;code&gt;        // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;        char =&amp;gt; self.push_char(char),
    },
&lt;/code&gt;
    &lt;code&gt;    // ^[P1$r0;48:2:1:13:37:42m^[\&lt;/code&gt;
    &lt;code&gt;    Terminator =&amp;gt; control_flow!(break self.parse_event(key))?,
};
&lt;/code&gt;
    &lt;p&gt;A trick we can use is a DCS (Device Control Sequence) to fetch a setting value, like the current background color. If we set an RGB value and get an RGB value back, we can enable true-color.&lt;/p&gt;
    &lt;p&gt;You can try it by running the following on your terminal:&lt;/p&gt;
    &lt;code&gt;$ printf "\e[48;2;13;37;42m\eP\$qm\e\\"; cat
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;\e&lt;/code&gt;: start escape sequence&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;[&lt;/code&gt;: introduce control sequence&lt;/item&gt;&lt;item&gt;&lt;code&gt;48&lt;/code&gt;: set foreground&lt;/item&gt;&lt;item&gt;&lt;code&gt;2&lt;/code&gt;: using an RGB color&lt;/item&gt;&lt;item&gt;&lt;code&gt;13&lt;/code&gt;: R is 13&lt;/item&gt;&lt;item&gt;&lt;code&gt;37&lt;/code&gt;: G is 37&lt;/item&gt;&lt;item&gt;&lt;code&gt;42&lt;/code&gt;: B is 42&lt;/item&gt;&lt;item&gt;&lt;code&gt;m&lt;/code&gt;: select graphic rendition&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;\e&lt;/code&gt;: start escape sequence&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;P&lt;/code&gt;: introduce device control sequence&lt;/item&gt;&lt;item&gt;&lt;code&gt;$&lt;/code&gt;: enter status mode&lt;/item&gt;&lt;item&gt;&lt;code&gt;q&lt;/code&gt;: query current setting&lt;/item&gt;&lt;item&gt;&lt;code&gt;m&lt;/code&gt;: select graphic rendition&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If the commands are supported, you should get the following output with a dark turquoise background:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt; ^[P1$r0;48:2:1:13:37:42m^[\ &lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;This is what the terminal emulator sends to stdin, and what we can parse to toggle true-color on.&lt;/p&gt;
    &lt;head rend="h2"&gt;Title&lt;/head&gt;
    &lt;p&gt;A few xterm sequences allow setting the terminal window title, we could use that to display the current page title.&lt;/p&gt;
    &lt;code&gt;fn set_title(title: &amp;amp;str) {
    // Set icon name and window title to string
    println!("\x1b]0;{}\x07", title);
    // Set icon name to string
    println!("\x1b]1;{}\x07", title);
    // Set window title to string
    println!("\x1b]2;{}\x07", title);
}
&lt;/code&gt;
    &lt;p&gt;To get notified when the title changes, we can simply implement &lt;code&gt;WebContentsObserver::TitleWasSet()&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;void HeadlessWebContentsImpl::TitleWasSet(content::NavigationEntry* entry) {
    carbonyl::Renderer::Main()-&amp;gt;SetTitle(
        base::UTF16ToUTF8(entry-&amp;gt;GetTitleForDisplay())
    );
}
&lt;/code&gt;
    &lt;head rend="h2"&gt;Final thoughts&lt;/head&gt;
    &lt;p&gt;That's all for today folks, check out Carbonyl on GitHub!&lt;/p&gt;
    &lt;p&gt;This was my first Rust project and I finally get the hype now. What a cool language!&lt;/p&gt;
    &lt;head rend="h3"&gt;Stay tuned&lt;/head&gt;
    &lt;p&gt;The post for next month will be a visual introduction to Fourier Analysis. After that, we'll look into a speculative JS VM in Rust.&lt;/p&gt;
    &lt;p&gt;Use the RSS feed to stay tuned, you can also watch the website repo for releases on GitHub.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://fathy.fr/carbonyl"/></entry><entry><id>https://news.ycombinator.com/item?id=45133938</id><title>Fil's Unbelievable Garbage Collector</title><updated>2025-09-05T06:15:03.074096+00:00</updated><content>&lt;doc fingerprint="da4929d184b21ed4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Fil's Unbelievable Garbage Collector&lt;/head&gt;
    &lt;p&gt;Fil-C uses a parallel concurrent on-the-fly grey-stack Dijkstra accurate non-moving garbage collector called FUGC (Fil's Unbelievable Garbage Collector). You can find the source code for the collector itself in fugc.c, though be warned, that code cannot possibly work without lots of support logic in the rest of the runtime and in the compiler.&lt;/p&gt;
    &lt;p&gt;Let's break down FUGC's features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Parallel: marking and sweeping happen in multiple threads, in parallel. The more cores you have, the faster the collector finishes.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Concurrent: marking and sweeping happen on some threads other than the mutator threads (i.e. your program's threads). Mutator threads don't have to stop and wait for the collector. The interaction between the collector thread and mutator threads is mostly non-blocking (locking is only used on allocation slow paths).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;On-the-fly: there is no global stop-the-world, but instead we use "soft handshakes" (aka "ragged safepoints"). This means that the GC may ask threads to do some work (like scan stack), but threads do this asynchronously, on their own time, without waiting for the collector or other threads. The only "pause" threads experience is the callback executed in response to the soft handshake, which does work bounded by that thread's stack height. That "pause" is usually shorter than the slowest path you might take through a typical&lt;/p&gt;&lt;code&gt;malloc&lt;/code&gt;implementation.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grey-stack: the collector assumes it must rescan thread stacks to fixpoint. That is, GC starts with a soft handshake to scan stack, and then marks in a loop. If this loop runs out of work, then FUGC does another soft handshake. If that reveals more objects, then concurrent marking resumes. This prevents us from having a load barrier (no instrumentation runs when loading a pointer from the heap into a local variable). Only a store barrier is necessary, and that barrier is very simple. This fixpoint converges super quickly because all newly allocated objects during GC are pre-marked.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Dijkstra: storing a pointer field in an object that's in the heap or in a global variable while FUGC is in its marking phase causes the newly pointed-to object to get marked. This is called a Dijkstra barrier and it is a kind of store barrier. Due to the grey stack, there is no load barrier like in the classic Dijkstra collector. The FUGC store barrier uses a compare-and-swap with relaxed memory ordering on the slowest path (if the GC is running and the object being stored was not already marked).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Accurate: the GC accurately (aka precisely, aka exactly) finds all pointers to objects, nothing more, nothing less.&lt;/p&gt;&lt;code&gt;llvm::FilPizlonator&lt;/code&gt;ensures that the runtime always knows where the root pointers are on the stack and in globals. The Fil-C runtime has a clever API and Ruby code generator for tracking pointers in low-level code that interacts with pizlonated code. All objects know where their outgoing pointers are - they can only be in the InvisiCap auxiliary allocation.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Non-moving: the GC doesn't move objects. This makes concurrency easy to implement and avoids a lot of synchronization between mutator and collector. However, FUGC will "move" pointers to free objects (it will repoint the capability pointer to the free singleton so it doesn't have to mark the freed allocation).&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This makes FUGC an advancing wavefront garbage collector. Advancing wavefront means that the mutator cannot create new work for the collector by modifying the heap. Once an object is marked, it'll stay marked for that GC cycle. It's also an incremental update collector, since some objects that would have been live at the start of GC might get freed if they become free during the collection cycle.&lt;/p&gt;
    &lt;p&gt;FUGC relies on safepoints, which comprise:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Pollchecks emitted by the compiler. The&lt;/p&gt;&lt;code&gt;llvm::FilPizlonator&lt;/code&gt;compiler pass emits pollchecks often enough that only a bounded amount of progress is possible before a pollcheck happens. The fast path of a pollcheck is just a load-and-branch. The slow path runs a pollcheck callback, which does work for FUGC.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Soft handshakes, which request that a pollcheck callback is run on all threads and then waits for this to happen.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Enter/exit functionality. This is for allowing threads to block in syscalls or long-running runtime functions without executing pollchecks. Threads that are in the exited state will have pollcheck callbacks executed by the collector itself (when it does the soft handshake). The only way for a Fil-C program to block is either by looping while entered (which means executing a pollcheck at least once per loop iteration, often more) or by calling into the runtime and then exiting.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Safepointing is essential for supporting threading (Fil-C supports pthreads just fine) while avoiding a large class of race conditions. For example, safepointing means that it's safe to load a pointer from the heap and then use it; the GC cannot possibly delete that memory until the next pollcheck or exit. So, the compiler and runtime just have to ensure that the pointer becomes tracked for stack scanning at some point between when it's loaded and when the next pollcheck/exit happens, and only if the pointer is still live at that point.&lt;/p&gt;
    &lt;p&gt;The safepointing functionality also supports stop-the-world, which is currently used to implement &lt;code&gt;fork(2)&lt;/code&gt; and for debugging FUGC (if you set the &lt;code&gt;FUGC_STW&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt; then the
collector will stop the world and this is useful for triaging GC bugs; if the bug reproduces in STW
then it means it's not due to issues with the store barrier). The safepoint infrastructure also allows
safe signal delivery; Fil-C makes it possible to use signal handling in a practical way. Safepointing is
a common feature of virtual machines that support multiple threads and accurate garbage collection,
though usually, they are only used to stop the world rather than to request asynchronous activity from all
threads. See here for a write-up about
how OpenJDK does it. The Fil-C implementation is in &lt;code&gt;filc_runtime.c&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Here's the basic flow of the FUGC collector loop:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Wait for the GC trigger.&lt;/item&gt;
      &lt;item&gt;Turn on the store barrier, then soft handshake with a no-op callback.&lt;/item&gt;
      &lt;item&gt;Turn on black allocation (new objects get allocated marked), then soft handshake with a callback that resets thread-local caches.&lt;/item&gt;
      &lt;item&gt;Mark global roots.&lt;/item&gt;
      &lt;item&gt;Soft handshake with a callback that requests stack scan and another reset of thread-local caches. If all collector mark stacks are empty after this, go to step 7.&lt;/item&gt;
      &lt;item&gt;Tracing: for each object in the mark stack, mark its outgoing references (which may grow the mark stack). Do this until the mark stack is empty. Then go to step 5.&lt;/item&gt;
      &lt;item&gt;Turn off the store barrier and prepare for sweeping, then soft handshake to reset thread-local caches again.&lt;/item&gt;
      &lt;item&gt;Perform the sweep. During the sweep, objects are allocated black if they happen to be allocated out of not-yet-swept pages, or white if they are allocated out of alraedy-swept pages.&lt;/item&gt;
      &lt;item&gt;Victory! Go back to step 1.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you're familiar with the literature, FUGC is sort of like the DLG (Doligez-Leroy-Gonthier) collector (published in two papers because they had a serious bug in the first one), except it uses the Dijkstra barrier and a grey stack, which simplifies everything but isn't as academically pure (FUGC fixpoints, theirs doesn't). I first came up with the grey-stack Dijkstra approach when working on Fiji VM's CMR and Schism garbage collectors. The main advantage of FUGC over DLG is that it has a simpler (cheaper) store barrier and it's a slightly more intuitive algorithm. While the fixpoint seems like a disadvantage, in practice it converges after a few iterations.&lt;/p&gt;
    &lt;p&gt;Additionally, FUGC relies on a sweeping algorithm based on bitvector SIMD. This makes sweeping insanely fast compared to marking. This is made thanks to the Verse heap config that I added to libpas. FUGC typically spends &amp;lt;5% of its time sweeping.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bonus Features&lt;/head&gt;
    &lt;p&gt;FUGC supports a most of C-style, Java-style, and JavaScript-style memory management. Let's break down what that means.&lt;/p&gt;
    &lt;head rend="h3"&gt;Freeing Objects&lt;/head&gt;
    &lt;p&gt;If you call &lt;code&gt;free&lt;/code&gt;, the runtime will flag the object as free and all subsequent accesses to the object will trap. Additionally, FUGC will not scan outgoing references from the object (since they cannot be accessed anymore).&lt;/p&gt;
    &lt;p&gt;Also, FUGC will redirect all capability pointers (lowers in InvisiCaps jargon) to free objects to point at the free singleton object instead. This allows freed object memory to really be reclaimed.&lt;/p&gt;
    &lt;p&gt;This means that freeing objects can be used to prevent GC-induced leaks. Surprisingly, a program that works fine with &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; (no leaks, no crashes) that gets converted to GC the naive way (&lt;code&gt;malloc&lt;/code&gt; allocates from the GC and &lt;code&gt;free&lt;/code&gt; is a no-op) may end up leaking due to dangling pointers that the program never accesses. Those dangling pointers will be treated as live by the GC. In FUGC, if you freed those pointers, then FUGC will really kill them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Finalizers&lt;/head&gt;
    &lt;p&gt;FUGC supports finalizer queues using the &lt;code&gt;zgc_finq&lt;/code&gt; API in stdfil.h. This feature allows you to implement finalizers in the style of Java, except that you get to set up your own finalizer queues and choose which thread processes them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Weak References&lt;/head&gt;
    &lt;p&gt;FUGC supports weak references using the &lt;code&gt;zweak&lt;/code&gt; API in stdfil.h. Weak references work just like the weak references in Java, except there are no reference queues. Fil-C does not support phantom or soft references.&lt;/p&gt;
    &lt;head rend="h3"&gt;Weak Maps&lt;/head&gt;
    &lt;p&gt;FUGC supports weak maps using the &lt;code&gt;zweak_map&lt;/code&gt; API in stdfil.h. This API works almost exactly like the JavaScript WeakMap, except that Fil-C's weak maps allow you to iterate all of their elements and get a count of elements.&lt;/p&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;FUGC allows Fil-C to give the strongest possible guarantees on misuse of &lt;code&gt;free&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Freeing an object and then accessing it is guaranteed to result in a trap. Unlike tag-based approaches, which will trap on use after free until until memory reclamation is forced, FUGC means you will trap even after memory is reclaimed (due to lower repointing to the free singleton).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Freeing an object twice is guaranteed to result in a trap.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Failing to free an object means the object gets reclaimed for you.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://fil-c.org/fugc"/></entry><entry><id>https://news.ycombinator.com/item?id=45135263</id><title>Swimming in Tech Debt</title><updated>2025-09-05T06:15:02.705952+00:00</updated><content>&lt;doc fingerprint="43255b5b50b7438"&gt;
  &lt;main&gt;
    &lt;p&gt;F e t c h i n g y o u r b o o k . . . Swimming in Tech Debt - Help This Book&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://helpthisbook.com/lou-franco/swimming-in-tech-debt"/></entry><entry><id>https://news.ycombinator.com/item?id=45135302</id><title>Why RDF Is the Natural Knowledge Layer for AI Systems</title><updated>2025-09-05T06:15:01.160565+00:00</updated><content>&lt;doc fingerprint="ef43a02a3d8486ba"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why RDF Is the Natural Knowledge Layer for AI Systems&lt;/head&gt;
    &lt;p&gt;Part 1 of 6 in the series “LLMs Need Knowledge Graphs. Use RDF or End Up Rebuilding It.”&lt;/p&gt;
    &lt;p&gt;The Big Picture: Knowledge graphs triple LLM accuracy on enterprise data. But here’s what nobody tells you upfront: every knowledge graph converges on the same patterns, the same solutions. This series reveals why RDF isn’t just one option among many — it’s the natural endpoint of knowledge representation. By Post 6, you’ll see real enterprises learning this lesson at great cost — or great savings.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Knowledge Layer Revolution&lt;/head&gt;
    &lt;p&gt;Your AI is struggling with your data. You know this because you’ve watched it happen-confident answers that are completely wrong, hallucinations about basic facts, inability to connect information from different systems.&lt;/p&gt;
    &lt;p&gt;You’re not alone. When large language models try to answer business questions using enterprise SQL databases, errors are common. Without additional context and structure, LLMs often struggle to interpret schemas and relationships correctly.&lt;/p&gt;
    &lt;p&gt;But something remarkable happens when you add a knowledge layer between your data and your AI. When that same data is transformed into a knowledge graph, accuracy more than triples. The improvement is dramatic.&lt;/p&gt;
    &lt;p&gt;This finding comes from research my colleagues (Juan Sequeda and Dean Allemang) and I published together (“Benchmarking the Abilities of LLMs for Supporting Enterprise Knowledge Graph Construction from Relational Databases”, 2023). We discovered that LLMs perform dramatically better with knowledge graphs — the structure aligns naturally with how they process information.&lt;/p&gt;
    &lt;p&gt;When teams embark on building a knowledge layer, they face a critical early decision: use the established RDF standards, or build something custom. Many choose to build their own solution, viewing RDF as overly complex or academic. They start with property graphs, custom schemas, or proprietary platforms that promise quick wins.&lt;/p&gt;
    &lt;p&gt;But I’ve spent years working at the intersection of knowledge representation and AI, watching these projects evolve. The pattern is remarkably consistent. Teams that choose not to use RDF inevitably find themselves rebuilding its core features: global identifiers for entities, protocols for data federation, ways to express relationships and metadata consistently. What starts as “we’ll keep it simple” becomes “we need a canonical ID system” becomes “we’re building our own semantic layer.”&lt;/p&gt;
    &lt;p&gt;Uber discovered this after building their own graph system. Neo4j reversed course after years of positioning against RDF. The market has spoken: you need these capabilities. The only question is whether you’ll build them yourself or use what already exists.&lt;/p&gt;
    &lt;p&gt;This series reveals why RDF isn’t just another technology choice — it’s the natural endpoint of knowledge representation. Not because of ideology or standards bodies, but because the problems of representing knowledge at scale force convergent evolution.&lt;/p&gt;
    &lt;p&gt;Let me show you why, starting with the most fundamental challenge every knowledge layer must solve.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why LLMs Struggle with Traditional Databases&lt;/head&gt;
    &lt;p&gt;LLMs are pattern-matching machines trained on natural language. When they encounter a SQL schema, they’re forced to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Guess what &lt;code&gt;cust_id&lt;/code&gt;vs&lt;code&gt;customer_id&lt;/code&gt;vs&lt;code&gt;custID&lt;/code&gt;mean&lt;/item&gt;
      &lt;item&gt;Infer relationships from cryptic foreign key names&lt;/item&gt;
      &lt;item&gt;Navigate ambiguous table names (is &lt;code&gt;orders&lt;/code&gt;for customer orders or supply orders?)&lt;/item&gt;
      &lt;item&gt;Understand domain-specific abbreviations without context&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The result is poor performance — not because LLMs are bad at reasoning, but because SQL schemas optimize for storage efficiency rather than semantic clarity.&lt;/p&gt;
    &lt;p&gt;You can improve SQL schemas for semantic clarity — using descriptive names, normalizing relationships properly, maintaining clean metadata. But this requires constant discipline, adds significant overhead, and fights against SQL’s natural optimization patterns. Database administrators rightfully focus on performance and maintainability, leading to denormalization, cryptic but efficient column names, and other practices that prioritize machine efficiency over semantic clarity. Even with perfect discipline, SQL’s fundamental separation of data (in tables) from metadata (in schemas) makes it harder for AI systems to understand how the model evolves. When your knowledge representation is spread across DDL statements, foreign key constraints, and actual data, LLMs struggle to build a coherent semantic picture.&lt;/p&gt;
    &lt;p&gt;Knowledge graphs, on the other hand, are organized the way we actually think about facts and relationships. They represent knowledge directly, not as a “projection” into tables and columns. While you can store facts in relational databases, you’re always forcing a graph-shaped understanding into a table-shaped container.&lt;/p&gt;
    &lt;head rend="h2"&gt;## The Pattern Every Enterprise Follows When Building a Knowledge Graph&lt;/head&gt;
    &lt;p&gt;Watch for this progression in your organization:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;“We need a knowledge graph for our AI”&lt;/item&gt;
      &lt;item&gt;“RDF seems too complex, let’s use property graphs”&lt;/item&gt;
      &lt;item&gt;“We need global identifiers for our merger”&lt;/item&gt;
      &lt;item&gt;“How do we federate queries across departments?”&lt;/item&gt;
      &lt;item&gt;“Our custom solution is becoming unmaintainable”&lt;/item&gt;
      &lt;item&gt;“Maybe we should have used RDF from the start”&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This series will show you why this pattern is inevitable — and how to skip to the end.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why Knowledge Graphs Change Everything&lt;/head&gt;
    &lt;p&gt;Knowledge graphs represent information the way LLMs (and humans) “think”:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Explicit relationships: No guessing what foreign keys mean&lt;/item&gt;
      &lt;item&gt;Rich context: Every entity and relationship can be described&lt;/item&gt;
      &lt;item&gt;Natural language alignment: Triples mirror subject-verb-object sentences&lt;/item&gt;
      &lt;item&gt;Semantic clarity: Types, hierarchies, and constraints are explicit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As Dan Bennett explains in his excellent primer on knowledge graphs, “We can state anything about anything using this model” — and crucially, “A single row is meaningful. It contains a single fact.” This isn’t just a technical preference — it’s about fundamental representation. Knowledge graphs store the atomic truths about your business directly, while relational databases require reconstructing those truths from scattered pieces. When an LLM can traverse relationships explicitly rather than inferring them from column names, accuracy triples. The knowledge graph becomes a bridge between human meaning and machine processing.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Knowledge Graph Gold Rush… and Its Hidden Challenge&lt;/head&gt;
    &lt;p&gt;The 3x accuracy improvement has triggered a gold rush. Enterprises are racing to build knowledge graphs. But here’s what the research papers don’t always mention: building a production knowledge graph requires solving fundamental problems that have existed since humans started organizing information.&lt;/p&gt;
    &lt;p&gt;And this is where our story really begins.&lt;/p&gt;
    &lt;head rend="h2"&gt;The First Problem: Identity&lt;/head&gt;
    &lt;p&gt;Knowledge graphs must answer a deceptively simple question: “How do we know two things are the same thing?”&lt;/p&gt;
    &lt;p&gt;It starts innocently enough. Customer #12345 in your sales system needs to match up with &lt;code&gt;cust_12345&lt;/code&gt; in your support system. But then it gets messier:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;When an LLM sees “Apple” in your data, is it the fruit or the company?&lt;/item&gt;
      &lt;item&gt;Is employee “A. Johnson” the same as “Alice Johnson” in HR?&lt;/item&gt;
      &lt;item&gt;When you reference Database → Schema → Table → Column, which specific column across all your systems?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Without solving identity, you get:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data silos that refuse to talk to each other&lt;/item&gt;
      &lt;item&gt;Integration projects that never truly end&lt;/item&gt;
      &lt;item&gt;LLMs hallucinating because they can’t distinguish between entities&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Every graph database, every knowledge graph platform, every enterprise data mesh must solve this. And RDF solved it 25 years ago by building on the architecture of the most successful distributed system ever created — the World Wide Web.&lt;/p&gt;
    &lt;head rend="h2"&gt;Enter IRIs: The Web’s Gift to Data&lt;/head&gt;
    &lt;p&gt;The solution has been staring us in the face since the invention of the web itself: International Resource Identifiers (IRIs). Just as URLs gave us a way to uniquely identify any document on the web, IRIs give us a way to uniquely identify anything at all.&lt;/p&gt;
    &lt;p&gt;Here’s what this looks like in practice:&lt;/p&gt;
    &lt;code&gt;# IRIs provide globally unique identifiers&lt;lb/&gt;tc:employee-alice-johnson a :Employee ;&lt;lb/&gt;    :name "Alice Johnson" ;&lt;lb/&gt;    :employeeId "E12345" .&lt;lb/&gt;&lt;lb/&gt;# Different system, same person - unified by IRI&lt;lb/&gt;dir:staff-ajohnson &lt;lb/&gt;    owl:sameAs tc:employee-alice-johnson .&lt;/code&gt;
    &lt;p&gt;Notice how this reads almost like English sentences? That’s not an accident-RDF’s triple structure mirrors how we naturally express facts.&lt;/p&gt;
    &lt;p&gt;The keen-eyed reader might notice these identifiers don’t look like typical URLs. We’re using prefixed names (like &lt;code&gt;tc:employee-alice-johnson&lt;/code&gt;) that expand to full IRIs (like &lt;code&gt;&amp;lt;http://timecard.example.com/employee-alice-johnson&amp;gt;&lt;/code&gt;). Think of it like using domain names instead of IP addresses—both point to the same place, but one is much easier for humans to work with.&lt;/p&gt;
    &lt;p&gt;The magic isn’t in the syntax-it’s in the properties:&lt;/p&gt;
    &lt;p&gt;Global Uniqueness: By using domain-based namespacing, collisions become virtually impossible. Your customer #12345 at &lt;code&gt;data.example.com&lt;/code&gt; will never be confused with someone else's customer #12345.&lt;/p&gt;
    &lt;p&gt;Dereferenceable: IRIs can be designed to return more information when accessed, following web architecture principles. While not automatic, making your IRIs dereferenceable is a semantic web best practice that elegantly bridges your knowledge graph with the existing infrastructure of the web. Just as clicking a link can take you to a webpage, systems can potentially follow well-designed IRIs to discover more context.&lt;/p&gt;
    &lt;p&gt;Hierarchical: IRIs naturally organize into hierarchies (&lt;code&gt;/customer/12345/orders/...&lt;/code&gt;). These structured IRIs are invaluable for humans (and AI!) to quickly understand what they represent. But-and this is crucial-you should never parse them programmatically. The hierarchical structure is a scheme for generating meaningful identifiers and making them readable, but machines should treat them as opaque strings.&lt;/p&gt;
    &lt;p&gt;International: Unlike traditional URIs, IRIs support the full range of Unicode characters. Your customers in Tokyo, Moscow, and Cairo can all have identifiers in their own scripts.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Build-vs-Buy Moment Every Enterprise Faces&lt;/head&gt;
    &lt;p&gt;At this point, you might be thinking: “We don’t need all this. We’ll just build a simple mapping table.”&lt;/p&gt;
    &lt;p&gt;Let me save you three years and several million dollars. Here’s how it actually plays out:&lt;/p&gt;
    &lt;p&gt;Year 1: “We’ll just map customer IDs between systems” ($500K, 2 engineers)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Build a mapping table&lt;/item&gt;
      &lt;item&gt;Works great for 2–3 systems&lt;/item&gt;
      &lt;item&gt;The solution seems complete&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Year 2: “We need to handle entities beyond customers” ($2M, 5 engineers)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Extend to products, employees, locations&lt;/item&gt;
      &lt;item&gt;Mapping tables multiply&lt;/item&gt;
      &lt;item&gt;Performance degrades&lt;/item&gt;
      &lt;item&gt;Hire more engineers&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Year 3: “We need globally unique identifiers” ($5M total, still not done)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Invent your own URI scheme&lt;/item&gt;
      &lt;item&gt;Build a resolution service&lt;/item&gt;
      &lt;item&gt;Handle international characters&lt;/item&gt;
      &lt;item&gt;Use or end up reinventing IRIs&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The BBC chose differently. They adopted RDF from the start. During the 2010 World Cup, their semantic web platform automatically generated over 700 pages — far more than manual curation would have allowed. By the 2012 Olympics, they expected 10 million page views per day across 10,000 Olympic pages. The result? Dramatically reduced costs while delivering richer content experiences.&lt;/p&gt;
    &lt;p&gt;I’ve seen this pattern play out several times firsthand, gone through it myself, and heard the same story from veterans with decades of experience. The ending is always the same: organizations converge on globally unique, hierarchical, dereferenceable identifiers. Also known as… IRIs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Back to Our LLM Problem&lt;/head&gt;
    &lt;p&gt;Consider this SQL query an LLM might need to construct:&lt;/p&gt;
    &lt;code&gt;-- LLM has to guess: are these the same customer?&lt;lb/&gt;SELECT * FROM orders o &lt;lb/&gt;JOIN customers c ON o.customer_id = c.id&lt;lb/&gt;JOIN crm_records r ON r.cust_num = c.customer_number&lt;/code&gt;
    &lt;p&gt;The LLM has to infer that &lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;cust_num&lt;/code&gt;, and &lt;code&gt;customer_number&lt;/code&gt; might refer to the same entity. It's making educated guesses based on naming patterns. Sometimes it's right. Usually-84% of the time, according to the research-it's not.&lt;/p&gt;
    &lt;p&gt;Now look at the same information in RDF:&lt;/p&gt;
    &lt;code&gt;# In RDF, identity is explicit&lt;lb/&gt;tc:employee-alice-johnson&lt;lb/&gt;    org:worksIn facilities:building-west-tower ;&lt;lb/&gt;    org:reportsTo tc:employee-bob-smith ;&lt;lb/&gt;    foaf:account it:users-ajohnson .&lt;lb/&gt;# No guessing needed!&lt;/code&gt;
    &lt;p&gt;The relationships are explicit. The identities are unambiguous. The LLM doesn’t need to infer-it can simply follow the links.&lt;/p&gt;
    &lt;head rend="h2"&gt;From Theory to Practice&lt;/head&gt;
    &lt;p&gt;Starting with IRIs doesn’t require a massive transformation. You can begin simply:&lt;/p&gt;
    &lt;code&gt;tc:employee-alice-johnson a :Employee ;&lt;lb/&gt;    :email "alice.johnson@techcorp.com" ;&lt;lb/&gt;    :employeeId "E12345" ;&lt;lb/&gt;    :department tc:dept-engineering .&lt;/code&gt;
    &lt;p&gt;As your system grows, you can connect to other identifiers:&lt;/p&gt;
    &lt;code&gt;# Link internal and external identifiers&lt;lb/&gt;tc:employee-alice-johnson &lt;lb/&gt;    owl:sameAs hr:employee-alice-johnson ;&lt;lb/&gt;    owl:sameAs dir:staff-ajohnson ;&lt;lb/&gt;    rdfs:seeAlso &amp;lt;https://linkedin.com/in/alice-johnson&amp;gt; .&lt;/code&gt;
    &lt;p&gt;Suddenly, your customer data can connect to your CRM, to social media, to any system that uses IRIs. No integration project required-just shared identity.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why This Matters for Your LLM Initiative&lt;/head&gt;
    &lt;p&gt;This accuracy jump isn’t just about having more data. It’s about having unambiguous data. Here’s what proper identity gives LLMs:&lt;/p&gt;
    &lt;p&gt;Disambiguation: When the LLM sees “Johnson” in a query, it can determine whether you mean &lt;code&gt;alice-johnson&lt;/code&gt;, &lt;code&gt;bob-johnson&lt;/code&gt;, or other employees with that surname-no guessing required.&lt;/p&gt;
    &lt;p&gt;Context Traversal: The LLM can follow relationships confidently. “What projects does Alice’s manager oversee?” becomes a simple graph traversal instead of a complex inference problem. Each step of inference is an opportunity for hallucination-even a small error rate compounds dramatically when multiplied across multiple hops. By making these relationships explicit in the graph, we turn risky inference into deterministic traversal.&lt;/p&gt;
    &lt;p&gt;Source Attribution: Every fact can specify its origin. The LLM can qualify its answers: “According to the HR system, Alice reports to Bob, but the project management system shows her working directly with the CTO on the AI initiative.”&lt;/p&gt;
    &lt;head rend="h2"&gt;The Payoff: Intelligence Emerges&lt;/head&gt;
    &lt;p&gt;When you solve identity properly, something magical happens:&lt;/p&gt;
    &lt;p&gt;LLMs can traverse relationships confidently. No more ambiguity about which “customer” or “product” you mean. The IRI is the answer.&lt;/p&gt;
    &lt;p&gt;Federated queries become natural. IRIs work across system boundaries by design. Your data can live anywhere and still connect.&lt;/p&gt;
    &lt;p&gt;Knowledge accumulates automatically. New facts enhance rather than confuse. Every system can contribute to the growing understanding.&lt;/p&gt;
    &lt;p&gt;Provenance is built-in. Every fact can specify who said it, when, and with what confidence. Critical for AI explainability.&lt;/p&gt;
    &lt;p&gt;This is why knowledge graphs triple LLM accuracy. It’s not about the graph structure alone-it’s about solving identity in a way that eliminates ambiguity.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Inevitable Convergence&lt;/head&gt;
    &lt;p&gt;Here’s the uncomfortable truth: complex data systems eventually build these same features:&lt;/p&gt;
    &lt;p&gt;What You’ll Call It:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;“Entity Resolution Pipeline”&lt;/item&gt;
      &lt;item&gt;“Master Data Management”&lt;/item&gt;
      &lt;item&gt;“Canonical ID Service”&lt;/item&gt;
      &lt;item&gt;“Universal Resource Registry”&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;What You’re Actually Building:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Globally unique identifiers (IRIs)&lt;/item&gt;
      &lt;item&gt;Namespace management (IRI prefixes)&lt;/item&gt;
      &lt;item&gt;Entity equivalence (&lt;code&gt;owl:sameAs&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Distributed resolution (HTTP dereferencing)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The only difference? You’ll spend 2–3 years and millions of dollars building a worse version of what RDF gives you for free.&lt;/p&gt;
    &lt;p&gt;This isn’t speculation. Look at any mature data platform:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uber spent years building “algebraic property graphs” to avoid RDF, then presented it as a cautionary tale&lt;/item&gt;
      &lt;item&gt;Neo4j went from “RDF is too complex” to maintaining comprehensive RDF toolkits&lt;/item&gt;
      &lt;item&gt;Google’s Knowledge Graph uses RDF under the hood&lt;/item&gt;
      &lt;item&gt;Major platforms converge on the same patterns&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Organizations need an identity system. The question becomes whether to build one that works at web scale from day one, or one that will need to be rebuilt when your data outgrows its original scope.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Choice: Build on RDF or Rebuild RDF?&lt;/head&gt;
    &lt;p&gt;The proven approach? Start with RDF. Use the battle-tested solution that powers DBpedia, Wikidata, and enterprise knowledge graphs worldwide.&lt;/p&gt;
    &lt;p&gt;As Juan Sequeda wisely advises in his foreword to the Neo4j whitepaper Knowledge Graphs — Data in Context:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;“One of my mantras is don’t boil the ocean. This means that your knowledge graph journey should start simple, be practical, and focus on the business return…”&lt;/p&gt;&lt;lb/&gt;Source (Neo4j Whitepaper PDF)&lt;/quote&gt;
    &lt;p&gt;But do start with the right foundation. Because those identifiers determine everything else.&lt;/p&gt;
    &lt;p&gt;Tim Berners-Lee’s first rule of Linked Data couldn’t be simpler:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;“Use URIs as names for things.”&lt;/p&gt;&lt;lb/&gt;Source (W3C Linked Data Principles)&lt;/quote&gt;
    &lt;p&gt;Twenty-five years later, enterprises are still learning this lesson the hard way.&lt;/p&gt;
    &lt;p&gt;Dean Allemang, reflecting on their research showing 3x improvement in LLM accuracy, summed it up perfectly:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;“The bottom line is it works three times better, and that’s pretty cool.”&lt;/p&gt;&lt;lb/&gt;Source (Knowledge Graph Insights Podcast)&lt;/quote&gt;
    &lt;p&gt;Three times better. That’s the difference between an LLM that frustrates users and one that delivers value. All because you solved identity properly.&lt;/p&gt;
    &lt;p&gt;The question isn’t whether you’ll build these features. Most enterprises do.&lt;/p&gt;
    &lt;p&gt;The question is whether you’ll choose to start with the solution that already exists.&lt;/p&gt;
    &lt;p&gt;Key Takeaways&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;LLMs triple their accuracy with knowledge graphs: From SQL to knowledge graphs (Sequeda et al., 2023)&lt;/item&gt;
      &lt;item&gt;Identity is the foundation problem: Every knowledge graph must solve “are these the same thing?”&lt;/item&gt;
      &lt;item&gt;RDF/IRIs solved this 25 years ago: Global uniqueness, dereferenceability, no central authority&lt;/item&gt;
      &lt;item&gt;You’ll build these features anyway: Mature data platforms converge on IRI-like solutions&lt;/item&gt;
      &lt;item&gt;Understanding foundations enables implementation: This series equips you to understand RDF before diving into LLM integration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Next: RDF Triples: Smallest Atom of Meaning, Largest Scope of Use — How do you represent knowledge once you can identify anything? Enter the RDF triple-the atom of meaning that scales to the universe.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bryon.io/why-rdf-is-the-natural-knowledge-layer-for-ai-systems-a5fd0b43d4c5"/></entry></feed>