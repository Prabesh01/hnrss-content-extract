<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-07T13:02:24.795867+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45474397</id><title>Building a Synthetic Cell Together</title><updated>2025-10-07T13:02:31.017877+00:00</updated><content>&lt;doc fingerprint="ff51d09bc9950378"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Abstract&lt;/head&gt;
    &lt;p&gt;Synthetic cells (SynCells) are artificial constructs designed to mimic cellular functions, offering insights into fundamental biology, as well as promising impact in the fields of medicine, biotechnology, and bioengineering. Achieving a functional SynCell from the bottom up, i.e. by assembling it from molecular components, requires a global collaboration to overcome the many challenges of engineering and assembling life-like modules while addressing biosafety, equity, and ethical concerns in order to guide responsible innovation. Here, we highlight major scientific hurdles, such as the integration of functional modules by ensuring compatibility across diverse synthetic subsystems, and we propose strategies to advance the field.&lt;/p&gt;
    &lt;head rend="h3"&gt;Similar content being viewed by others&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;Building a SynCell from molecular components is a staggering aim that involves a broad range of scientific challenges. However, the field is still in an explorative phase, and the approach and even the ultimate goal are not unanimously agreed upon1. Building SynCells from the ground up is a highly multidisciplinary undertaking requiring international collaborations. To this end, 36 senior scientists and 12 promising junior researchers from all around the globe gathered in Shenzhen, China, in October 2024, for the inaugural ‘SynCell Global Summit’. For the first time, this meeting brought together scientists from SynCell communities in Africa, Asia, Australia, Europe and the US. The attendees engaged in extensive discussions on challenging ideas, debated the limitations of the current approaches and worked towards establishing a consensus on the future direction of SynCell research. Researchers presented their initiatives, biofoundries, and funding programs, collectively striving to shape a unified vision for advancing the field. This article provides a brief overview of the outcomes of the summit on SynCell state-of-the-art research, major scientific challenges, and proposes synergistic efforts for the advancement of the field.&lt;/p&gt;
    &lt;head rend="h3"&gt;The bottom-up approach to SynCells: many benefits&lt;/head&gt;
    &lt;p&gt;There are diverse motivations for building a SynCell. For some, the drive stems from understanding, in a simplified context, the intricate processes found in living cells2 and from probing origins-of-life theories3. Others view SynCells as minimal and well controllable biomimetic systems with augmented chemistries and functions for applications in therapeutics4, energy production5, and biomanufacturing6. Notably, the SynCell community is inspired by the possibility of creating a living system, characterized by the ability to self-reproduce and evolve, from non-living building blocks. If so, the minimal conditions to “reboot” cellular life can test our fundamental understanding of life and its basic unit, the cell.&lt;/p&gt;
    &lt;p&gt;The term “SynCell” is often used for engineered cell-sized systems capable of performing life-like functions, such as information processing, motility, growth and division, signaling, or metabolism (Fig. 1a)7. Alternatively, it can be defined as a physicochemical system that sustains itself and replicates in an environment capable of open-ended evolution (Fig. 1b)8. The first definition emphasizes a modular approach to reconstituting all the biological features, excluding replication and evolution, while the second definition emphasizes the ability of a fully interoperable SynCell to replicate and evolve, which is key in addressing the fundamental evolution of life.&lt;/p&gt;
    &lt;p&gt;Given the multidisciplinary challenge of building SynCells and their far-reaching potential impact, it is critical to promote global collaborations while striking a balance between exploration and unification of modules. The field will benefit from exploring different approaches, rather than be divided by definitions.&lt;/p&gt;
    &lt;head rend="h3"&gt;Current achievements in SynCell research&lt;/head&gt;
    &lt;p&gt;SynCells are far less complex than biological cells, however to date, only a few cellular functions have been reconstructed outside of the cellular context with much work still needed to achieve fully integrated systems7. Their exact nature (i.e., structure and function) varies greatly from SynCell to SynCell and is dictated by which life-like property is reconstructed, and in turn, which structural chassis has been chosen to facilitate it. However, key properties of living cells often involve compartmentalization and the coupling of genotype and phenotype through information processing. Therefore, the bottom-up approach to mimicking cellular functions typically comprises the use of molecular building blocks such as membranes, genetic material, and proteins. For example, taking inspiration from cell membranes, phospholipids to create lipid vesicles are widely used as an approach to creating SynCell structural chassis9. Other explored approaches include emulsion droplets10, liquid-liquid phase separated systems11, proteinosomes12, or hydrogels13.&lt;/p&gt;
    &lt;p&gt;Moreover, an essential cornerstone of cellular function is the coupling of genotype with phenotype. To this end, the assembly of transcription-translation (TX-TL) systems has been widely explored, either based on cellular extracts or reconstructed from purified components14,15, and then further integrated with compartmentalization to achieve SynCells programmed to communicate16, as well as interact with living cells17.&lt;/p&gt;
    &lt;p&gt;Furthermore, efforts in creating SynCells stretch beyond compartmentalization and information processing and include the engineering of systems capable other life-like features, such as self-powering18,19, self-propelling20,21, as well as partially regenerating their own components22.&lt;/p&gt;
    &lt;p&gt;Building blocks used in the assembly of SynCells reach beyond those found in nature. The option to explore non-natural components in the design of SynCells, such as polymerosomes23 or nanoparticles24, is one of the benefits synthetic systems hold over their biological counterparts, as these approaches have the potential to expand the functional capabilities of SynCells beyond those found in nature.&lt;/p&gt;
    &lt;p&gt;Conversely, natural building blocks can also be utilized in non-canonical ways. For example, the modularity of DNA or RNA has been used outside the context of information storage to create DNA-based25, or RNA-based26 cytoskeletons, as well as to establish collective behaviors27 or even to design programmable genetic networks that allow synthetic cells to sense environmental changes, and respond dynamically28.&lt;/p&gt;
    &lt;p&gt;While a plethora of life-like modules have been so far engineered, and further exploration is encouraged, challenges discussed in the followings need to be tackled in order to advance the field.&lt;/p&gt;
    &lt;head rend="h3"&gt;Building a SynCell is an integration challenge&lt;/head&gt;
    &lt;p&gt;Many tasks must be accomplished to cooperatively develop a SynCell. This cooperation and compatibility-driven approach can focus our efforts towards achieving a common ultimate goal of creating a “living” system capable of self-reproducing and undergoing evolution. For this, three major scientific challenges were discussed during the summit. First, to develop functional SynCell modules that are essential for life to fully recapitulate cellular behaviors. This requires developing techniques that allow reproducible, modular and integrable designs of SynCells in order to favor compatibility for subsequent integration. Second, to overcome existing incompatibilities between diverse chemical/synthetic sub-systems developed by many groups with diverse expertise, which hampers our capacity to integrate such modules into a single system to allow the emergence of more complex life-like systems. Additionally, when aiming at building a SynCell, the complexity of combining and integrating components in an interoperable and functional way scales exponentially with module numbers. Third, SynCell technologies need to be safeguarded against accidental and intentional misuse, to enable broad and responsible adoption. Below, we present a brief exploration of these main challenges, focusing on some of the critical SynCell modules and highlighting recent progress in the development of these (Table 1).&lt;/p&gt;
    &lt;head rend="h3"&gt;SynCell modules&lt;/head&gt;
    &lt;head rend="h4"&gt;Growth&lt;/head&gt;
    &lt;p&gt;De novo production and self-replication of all the essential components, e.g., ribosome biogenesis29,30, lipid synthesis31, and replication of (genomic) DNA32, is required to keep SynCells self-sustaining22,33 and replicable30. The current state-of-the-art is still far from achieving doubling of cellular components, and is therefore one of the biggest challenges in the SynCell effort, in which cell-free protein synthesis, either via cell extract15, or purified components (e.g., PURE system)14 will take a critical role. Indeed, reconstruction of all needed components, as well as maximizing both the protein synthesis capacity and controllability of cell-free gene expression, are key challenges. While the major components for replication, transcription, and translation have been identified through biochemical and molecular biology studies, achieving the implementation of a synthetic central dogma with an efficiency and controllability comparable or even superior to living systems remains a substantial challenge.&lt;/p&gt;
    &lt;head rend="h4"&gt;Autonomous division&lt;/head&gt;
    &lt;p&gt;Cell division is a biophysical process that requires the coordination of many proteins that often compose higher-order macromolecular assemblies to support large-scale mechanical deformation and rearrangement of the membrane. While certain elements have been realized, e.g., contractile ring formation34,35 or final abscission36, a controlled synthetic divisome has not yet been realized, calling for extensive biophysical characterizations towards better understanding and controllability of division in synthetic systems.&lt;/p&gt;
    &lt;head rend="h4"&gt;Metabolism and transportation&lt;/head&gt;
    &lt;p&gt;Energy supply, anabolism, and catabolism are pivotal and ubiquitous functions that keep living systems out of thermodynamic equilibrium. While metabolic networks providing energy37,38 and building blocks39 have been reconstituted in vitro as well as recently integrated with genetic modules40 for SynCells, improvements in metabolic flux, efficiencies, as well as coupling with complementing pathways sharing essential metabolites are awaited. Developments in programmable degradation and efficient recycling systems for damaged macromolecules41, metabolic intermediates42, or end-products of metabolic pathways43 together with the transport of molecular fuels/wastes across the membrane44 would improve the stability and longevity of the entire system that currently are limited.&lt;/p&gt;
    &lt;head rend="h4"&gt;Minimal synthetic genome for a SynCell&lt;/head&gt;
    &lt;p&gt;As the top-down JCVI minimal cell projects demonstrated, chemical synthesis of a synthetic genome is doable45. Based on the size of this top-down minimized genome (473 genes), a synthetic genome synthetized from the bottom-up capable of encoding only essential features and their spatiotemporal control may need 200–500 genes. Nevertheless, our grasp of the architecture of a fully functional minimal genome is still minimal.&lt;/p&gt;
    &lt;head rend="h4"&gt;Spatial organization and initial conditions&lt;/head&gt;
    &lt;p&gt;The cellular interior is a highly orchestrated architecture of biomolecules within a micrometer-sized environment. It is a challenging mission to find the proper “initial” conditions to boot up a bottom-up SynCell. Currently, there is no blueprint guiding us in integrating different modules in a spatially ordered manner within a SynCell. Future work needs to focus on how to get a better understanding, control, and simplified view of spatial coordination to successfully boot up a SynCell. Coacervates46, emulsion droplets47, hydrogels48, lipid vesicles49, as well as polymersomes50 are studied to assure out-of-equilibrium conditions and provide the genotype/phenotype coupling that is essential for an evolving system. However, their compatibility with other modules, standardization, reproducibility, and automation are pressing challenges for achieving SynCells. Other compartmentalization strategies, such as liquid-liquid phase-separation, could facilitate localizing and concentrating biomolecular components within the SynCell to tune biochemical reactions51.&lt;/p&gt;
    &lt;head rend="h3"&gt;Integration and scalability&lt;/head&gt;
    &lt;p&gt;A defining characteristic of a living SynCell is the presence of a functional cell cycle, where processes such as DNA replication, segregation, cell growth, and division are seamlessly coordinated and tightly integrated. This ensures the SynCell can propagate and maintain its biological functions in a controlled and sustainable manner. As a building strategy, the modular approach that is so pervasive in engineering greatly inspires the current approaches in building a SynCell, giving rise to a vast catalog of key modules of cellular functions and SynCell chassis. A highlight of the summit was a discussion on how to integrate these disparate modules into a functioning whole52,53. Here are countless numbers of possible combinations and arrangements of essential building blocks in a single SynCell, and the parameter space is too large to explore. This is underscored by a lack of theoretical frameworks that predict the behaviors and robustness of reconstituted systems, especially when multiple modules are combined. Thus, it was proposed that efficient optimization systems, both experimentally and computationally, through machine learning approaches are highly desired to accelerate the parameter-sweeping processes. The implementation of efficient optimization systems are additionally paramount to ensure the scalability of SynCell production, which must be considered toward the implementation of SynCells as a practical, widely used technology54.&lt;/p&gt;
    &lt;head rend="h3"&gt;Ethics, biosafety and security&lt;/head&gt;
    &lt;p&gt;Beyond the scientific challenges, ethical, biosafety, inequality, and other societal concerns were discussed during the summit. Some of the potential risks posed by SynCells are the possibility of disruption of ecosystems and risks to human health, if SynCells were to be injudiciously released into the environment. Another concern is the dual-use aspects of this technology, including accidental and intentional misuse. Recently highlighted concerns about specific types of SynCell technologies, such as Mirror Cells, bring urgency to those discussions55. The all-continent representation was key in nurturing exchanges on the importance of inclusive accessibility to SynCell research and its outcomes. The summit further explored safeguards for the foundational research and emerging applications of SynCells, utilizing both existing regulations, and discussing the need for novel safety mechanisms that can and should be hardwired into future SynCell designs. Furthermore, scientists should engage with the general public to ensure our efforts and current regulations are informed.&lt;/p&gt;
    &lt;head rend="h3"&gt;Paths to overcoming the current challenges&lt;/head&gt;
    &lt;p&gt;Technological developments offer exciting opportunities to tackle these challenges. On the one hand, with AI-aided protein design, the time has come to create de novo proteins for SynCells. For example, proteins that hold different cellular functions56 and binders57 suited for a wide variety of different compounds can now be designed, which enables us to build SynCells with wholly new elements instead of those borrowed from nature. On the other hand, biofoundries offer integrated ‘design, build, test, learn (DBTL)’ platforms, incorporating the techniques of bioinformatics, mathematical modeling, big data analysis, and artificial intelligence to design new enzymes58, reaction networks59, and pathways60, as well as conducting automatic detection, sorting, and re-encapsulation in a fully continuous and autonomous way. Indeed, there is great potential in going beyond pure engineering design. Emphasis was put on moving towards directed evolution strategies for systems optimization and development. Finally, combining computational and evolutionary approaches can help us tackle the multiscale complexities of soft matter, biomolecules, and nonlinear dynamics.&lt;/p&gt;
    &lt;p&gt;During the summit, an AI-based automated DBTL evolutionary workflow was proposed to go through the aforementioned bottlenecks, starting with simple vesicle phenotypes and cell-free gene expression. The parameter space includes biochemical variables such as the genotype, molecular composition, pH, and temperature. This approach is a primitive form of AI machine learning, which offers a way to rapidly go through parameter space. The phenotype is characterized, which can give quick information closer to our objective function. Active learning algorithms are used to learn optimal parameters from the generated experimental conditions and suggest new experiments. A similar approach has already been adapted to optimize cell-free gene expression from mycoplasma JCVI lysate61. Collecting standard and quantitative AI-ready data across labs is the key to integration, which needs effective and reliable global cooperation.&lt;/p&gt;
    &lt;p&gt;Building open-access data repositories to facilitate the sharing of experimental protocols, data, and module blueprints will help promote the existence of universal module interfaces for off-the-shelf unification of individual modules62.&lt;/p&gt;
    &lt;head rend="h3"&gt;SynCells have many potential applications&lt;/head&gt;
    &lt;p&gt;It is equally important to consider how SynCell can benefit human society. SynCells hold the promise of simplicity, programmability, and controllability, which are considered main advantages over natural cells, offering an alternative approach to challenges within biomedicine, metabolic engineering for sustainability, materials science, food biotechnology, and R&amp;amp;D tool development. Although potential applications of SynCells have been demonstrated in many areas, such as biomedical application4,63,64 or biosensors28, the community must in the short-term (5 or 10 years) provide proofs of concept for such benefits. The application-focused design approach starts by identifying a specific unmet need in our society and fabricating relatively simple SynCells with the prime aim of tackling this challenge using our current expertise and toolbox. In this regard, the need to consider critical technical bottlenecks that must be tackled to facilitate the future widespread use of SynCells is emphasized, including cost, stability, shelf life, and production throughput. Similar to major technological shifts in the past, the drive toward SynCells is poised to catalyze a wave of advancements across biotechnology, nanotechnology, and molecular engineering, leading to innovations, such as improved drug delivery systems, cell-free biosensors and novel biomaterials.&lt;/p&gt;
    &lt;head rend="h3"&gt;Outlook&lt;/head&gt;
    &lt;p&gt;There are good reasons to expect that it will be possible to build a living SynCell from nonliving components. The ability to build a living SynCell from nonliving components represents a paradigm shift in our understanding of life and our capacity to engineer it. It bridges the gap between living and nonliving matter, offering unprecedented opportunities to explore the boundaries of biology and harness its principles for innovative applications. This effort not only pushes the limits of science and technology but also inspires new ways of thinking about life itself. This comes with the responsibility to ensure biosafety, inclusiveness, and benefit to society. To this end, the community should initiate open and transparent dialog with the general public and listen to the concerns and what the audience expects from SynCell to widely benefit human society. SynCell research should be developed as an Open Science and engage researchers in reflecting on possible abuse of the knowledge created and make recommendations to policymakers about how SynCell research should be governed. There is a broad consensus among the SynCell community to promote such collaboration and communication. The next Global SynCell Summit is planned to take place in April 2026 in Delft, the Netherlands. This and related future meetings (e.g., the SynCell2025 meeting in September 2025 in Stanford, US) will help to continuously clarify and focus the goals and efforts of this exciting emerging field.&lt;/p&gt;
    &lt;head rend="h2"&gt;References&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Adamala, K. P. et al. Present and future of synthetic cell development. Nat. Rev. Mol. Cell. Biol. 25, 162–167 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Schwille, P. et al. MaxSynBio: avenues towards creating cells from the bottom up. Angew. Chem. Int. Ed. 57, 13382–13392 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rothschild, L. J. et al. Building synthetic cells─from the technology infrastructure to cellular entities. ACS Synth. Biol. 13, 974–997 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Siquenique, S., Ackerman, S., Schroeder, A. &amp;amp; Sarmento, B. Bioengineering lipid-based synthetic cells for therapeutic protein delivery. Trends Biotechnol. 43, 348–363 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hwang, S.-W., Kim, M. &amp;amp; Liu, A. P. Towards synthetic cells with self-producing energy. ChemPlusChem 89, e202400138 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rebasa-Vallverdu, A., Antuch, M., Rosetti, B., Braidotti, N. &amp;amp; Gobbo, P. Higher-order behaviours in bio-inspired materials. ChemSystemsChem 6, e202400014 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Guindani, C., da Silva, L. C., Cao, S., Ivanov, T. &amp;amp; Landfester, K. Synthetic cells: from simple bio-inspired modules to sophisticated integrated systems. Angew. Chem. Int. Ed. Engl. 61, e202110855 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kriebisch, C. M. E. et al. A roadmap toward the synthesis of life. Chem 11, 102399 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Van de Cauter, L., van Buren, L., Koenderink, G. H. &amp;amp; Ganzinger, K. A. Exploring giant unilamellar vesicle production for artificial cells — current challenges and future directions. Small Methods 7, 2300416 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Shang, L. &amp;amp; Zhao, Y. Droplet-templated synthetic cells. Matter 4, 95–115 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lin, Z., Beneyton, T., Baret, J.-C. &amp;amp; Martin, N. Coacervate droplets for synthetic cells. Small Methods 7, 2300496 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Maffeis, V., Heuberger, L., Nikoletić, A., Schoenenberger, C.-A. &amp;amp; Palivan, C. G. Synthetic cells revisited: artificial cell construction using polymeric building blocks. Adv. Sci. 11, 2305837 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Allen, M. E., Hindley, J. W., Baxani, D. K., Ces, O. &amp;amp; Elani, Y. Hydrogels as functional components in artificial cell systems. Nat. Rev. Chem. 6, 562–578 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Shimizu, Y. et al. Cell-free translation reconstituted with purified components. Nat. Biotechnol. 19, 751–755 (2001).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Garamella, J., Marshall, R., Rustad, M. &amp;amp; Noireaux, V. The &amp;amp; All, E. coli TX-TL Toolbox 2.0: A Platform for Cell-Free Synthetic Biology. ACS Synth. Biol. 5, 344–355 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Niederholtmeyer, H., Chaggan, C. &amp;amp; Devaraj, N. K. Communication and quorum sensing in non-living mimics of eukaryotic cells. Nat. Commun. 9, 5027 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Li, S. et al. Regulation of species metabolism in synthetic community systems by environmental pH oscillations. Nat. Commun. 14, 7507 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Berhanu, S., Ueda, T. &amp;amp; Kuruma, Y. Artificial photosynthetic cell producing energy for protein synthesis. Nat. Commun. 10, 1325 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Miller, T. E. et al. Light-powered CO2 fixation in a chloroplast mimic with natural and synthetic parts. Science 368, 649–654 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Joseph, A. et al. Chemotactic synthetic vesicles: design and applications in blood-brain barrier crossing. Sci. Adv. 3, e1700362 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Fu, M. et al. Mechanochemical feedback loop drives persistent motion of liposomes. Nat. Phys. 19, 1211–1218 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lavickova, B., Laohakunakorn, N. &amp;amp; Maerkl, S. J. A partially self-regenerating synthetic cell. Nat. Commun. 11, 6340 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rideau, E., Dimova, R., Schwille, P., Wurm, F. R. &amp;amp; Landfester, K. Liposomes and polymersomes: a comparative review towards cell mimicking. Chem. Soc. Rev. 47, 8572–8610 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Qian, X., Westensee, I. N., Brodszkij, E. &amp;amp; Städler, B. Cell mimicry as a bottom-up strategy for hierarchical engineering of nature-inspired entities. WIREs Nanomed. Nanobiotechnol. 13, e1683 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jahnke, K., Huth, V., Mersdorf, U., Liu, N. &amp;amp; Göpfrich, K. Bottom-Up Assembly of Synthetic Cells with a DNA Cytoskeleton. ACS Nano 16, 7233–7241 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tran, M. P. et al. Genetic encoding and expression of RNA origami cytoskeletons in synthetic cells. Nat. Nanotechnol. 20, 664–671 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Joesaar, A. et al. DNA-based communication in populations of synthetic protocells. Nat. Nanotechnol. 14, 369–378 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Boyd, M. A. &amp;amp; Kamat, N. P. Designing artificial cells towards a new generation of biosensors. Trends Biotechnol. 39, 927–939 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Levy, M., Falkovich, R., Daube, S. S. &amp;amp; Bar-Ziv, R. H. Autonomous synthesis and assembly of a ribosomal subunit on a chip. Sci. Adv. 6, eaaz6020 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kosaka, Y. et al. Autonomous ribosome biogenesis in vitro. Nat. Commun. 16, 514 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Eto, S. et al. Phospholipid synthesis inside phospholipid membrane vesicles. Commun. Biol. 5, 1016 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Abil, Z. et al. Darwinian evolution of self-replicating DNA in a synthetic protocell. Nat. Commun. 15, 9091 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hagino, K., Masuda, K., Shimizu, Y. &amp;amp; Ichihashi, N. Sustainable regeneration of 20 aminoacyl-tRNA synthetases in a reconstituted system toward self-synthesizing artificial systems. Sci. Adv. 11, eadt6269 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Litschel, T. et al. Reconstitution of contractile actomyosin rings in vesicles. Nat. Commun. 12, 2254 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kohyama, S., Merino-Salomón, A. &amp;amp; Schwille, P. In vitro assembly, positioning and contraction of a division ring in minimal cells. Nat. Commun. 13, 6098 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;De Franceschi, N., Barth, R., Meindlhumer, S., Fragasso, A. &amp;amp; Dekker, C. Dynamin A as a one-component division machinery for synthetic cells. Nat. Nanotechnol. 19, 70–76 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yang, B. et al. Construction of the glycolysis metabolic pathway inside an artificial cell for the synthesis of amino acid and its reversible deformation. JACS 146, 21847–21858 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Luo, S. et al. ATP production from electricity with a new-to-nature electrobiological module. Joule 7, 1745–1758 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Schwander, T., Schada von Borzyskowski, L., Burgener, S., Cortina, N. S. &amp;amp; Erb, T. J. A synthetic pathway for the fixation of carbon dioxide in vitro. Science 354, 900–904 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Giaveri, S. et al. Integrated translation and metabolism in a partially self-synthesizing biochemical network. Science 385, 174–178 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Giaveri, S. et al. Nature-inspired circular-economy recycling for proteins: proof of concept. Adv. Mater. 33, 2104581 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Diehl, C., Gerlinger, P. D., Paczia, N. &amp;amp; Erb, T. J. Synthetic anaplerotic modules for the direct synthesis of complex molecules from CO2. Nat. Chem. Biol. 19, 168–175 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Opgenorth, P. H., Korman, T. P. &amp;amp; Bowie, J. U. A synthetic biochemistry module for production of bio-based chemicals from glucose. Nat. Chem. Biol. 12, 393–395 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Heinen, L., van den Noort, M., King, M. S., Kunji, E. R. S. &amp;amp; Poolman, B. Synthetic syntrophy for adenine nucleotide cross-feeding between metabolically active nanoreactors. Nat. Nanotechnol. 20, 112–120 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hutchison, C. A. et al. Design and synthesis of a minimal bacterial genome. Science 351, aad6253 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ianeselli, A. et al. Non-equilibrium conditions inside rock pores drive fission, maintenance and selection of coacervate protocells. Nat. Chem. 14, 32–39 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Koga, S., Williams, D. S., Perriman, A. W. &amp;amp; Mann, S. Peptide–nucleotide microdroplets as a step towards a membrane-free protocell model. Nat. Chem. 3, 720–724 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Allen, M. E. et al. Biomimetic behaviors in hydrogel artificial cells through embedded organelles. PNAS 120, e2307772120 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Buddingh, B. C., Elzinga, J. &amp;amp; van Hest, J. C. M. Intercellular communication between artificial cells by allosteric amplification of a molecular signal. Nat. Commun. 11, 1652 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Belluati, A. et al. Artificial cell synthesis using biocatalytic polymerization-induced self-assembly. Nat. Chem. 16, 564–574 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pilkington, C. P., Gispert, I., Chui, S. Y., Seddon, J. M. &amp;amp; Elani, Y. Engineering a nanoscale liposome-in-liposome for in situ biochemical synthesis and multi-stage release. Nat. Chem. 16, 1612–1620 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Olivi, L. et al. Towards a synthetic cell cycle. Nat. Commun. 12, 4531 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Abil, Z., Giaveri, S., Erb, T. J. &amp;amp; Rothschild, L. J. Integrating metabolism and evolution towards the realization of synthetic life. Nat. Rev. Bioeng. 3, 9–10 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sharf-Pauker, N. et al. Scaling up synthetic cell production using robotics and machine learning toward therapeutic applications. Adv. Biol. 9, 2400671 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Adamala, K. P. et al. Confronting risks of mirror life. Science 386, 1351–1353 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Goverde, C. A. et al. Computational design of soluble and functional membrane protein analogues. Nature 631, 449–458 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;An, L. et al. Binding and sensing diverse small molecules using shape-complementary pseudocycles. Science 385, 276–282 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ding, K. et al. Machine learning-guided co-optimization of fitness and diversity facilitates combinatorial library design in enzyme engineering. Nat. Commun. 15, 6392 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;van Sluijs, B. et al. Iterative design of training data to control intricate enzymatic reaction networks. Nat. Commun. 15, 1602 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pandi, A. et al. A versatile active learning workflow for optimization of genetic and metabolic networks. Nat. Commun. 13, 3876 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sakai, A. et al. Cell-free expression system derived from a near-minimal synthetic bacterium. ACS Synth. Biol. 12, 1616–1623 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Staufer, O. et al. Building a community to engineer synthetic cells and organelles from the bottom-up. eLife 10, e73556 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sato, W., Zajkowski, T., Moser, F. &amp;amp; Adamala, K. P. Synthetic cells in biomedical applications. WIREs Nanomed. Nanobiotechnol. 14, e1761 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Westensee, I. N., de Dios Andres, P. &amp;amp; Städler, B. From single-compartment artificial cells to tissue-like materials. Adv. Mater. Technol. 9, 2301804 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Li, F., Baranwal, A. K. &amp;amp; Maerkl, S. J. Continuous in situ synthesis of a complete set of tRNAs sustains steady-state translation in a recombinant cell-free system. Nat. Commun. 16, 6212 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stewart, J. M. et al. Modular RNA motifs for orthogonal phase separated compartments. Nat. Commun. 15, 6244 (2024).&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;We are grateful to all the participants of the 1st Synthetic Cell Global Summit for their insights covered in this work, to the Summit co-organizers: Matthew Chang, George Church, Cees Dekker, Jay Kiesling, Ariel Lindner, Chenli Liu and Petra Schwille, and to our hosts, the Shenzhen Institute of Advanced Technology and the Chinese Academy of Science.&lt;/p&gt;
    &lt;head rend="h2"&gt;Author information&lt;/head&gt;
    &lt;head rend="h3"&gt;Authors and Affiliations&lt;/head&gt;
    &lt;head rend="h3"&gt;Contributions&lt;/head&gt;
    &lt;p&gt;I.N.W., S.G., and A.B.L. wrote the manuscript with contributions from Z.A., S.K., M.Fu, A.L., K.A., W.C., C.D., N.D., J.F., K.H., K.J., X.L., C.L., S.M., V.N., and P.S.&lt;/p&gt;
    &lt;head rend="h3"&gt;Corresponding authors&lt;/head&gt;
    &lt;head rend="h2"&gt;Ethics declarations&lt;/head&gt;
    &lt;head rend="h3"&gt;Competing interests&lt;/head&gt;
    &lt;p&gt;The authors declare no competing interests.&lt;/p&gt;
    &lt;head rend="h2"&gt;Peer review&lt;/head&gt;
    &lt;head rend="h3"&gt;Peer review information&lt;/head&gt;
    &lt;p&gt;Nature Communications thanks Nico Claassens and the other, anonymous, reviewer(s) for their contribution to the peer review of this work.&lt;/p&gt;
    &lt;head rend="h2"&gt;Additional information&lt;/head&gt;
    &lt;p&gt;Publisher’s note Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rights and permissions&lt;/head&gt;
    &lt;p&gt;Open Access This article is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License, which permits any non-commercial use, sharing, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if you modified the licensed material. You do not have permission under this licence to share adapted material derived from this article or parts of it. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by-nc-nd/4.0/.&lt;/p&gt;
    &lt;head rend="h2"&gt;About this article&lt;/head&gt;
    &lt;head rend="h3"&gt;Cite this article&lt;/head&gt;
    &lt;p&gt;Giaveri, S., Abil, Z., Kohyama, S. et al. Building a Synthetic Cell Together. Nat Commun 16, 7488 (2025). https://doi.org/10.1038/s41467-025-62778-8&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Received:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Accepted:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Published:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;DOI: https://doi.org/10.1038/s41467-025-62778-8&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nature.com/articles/s41467-025-62778-8"/><published>2025-10-04T16:14:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45491470</id><title>Compiling a Forth</title><updated>2025-10-07T13:02:30.760096+00:00</updated><content>&lt;doc fingerprint="22047e11e047ab00"&gt;
  &lt;main&gt;
    &lt;p&gt;I was curious how Forth worked so I built a bytecode compiler and a VM for a Forth-like language, as well as some visualizations to show how it all works.&lt;/p&gt;
    &lt;p&gt;You don't need to know anything about Forth to follow along, aside from the fact it's a stack-oriented language.&lt;/p&gt;
    &lt;p&gt;Here's a small program that prints the number three.&lt;/p&gt;
    &lt;quote&gt;3 .&lt;/quote&gt;
    &lt;p&gt;The number (&lt;code&gt;3&lt;/code&gt;) is pushed to the data stack, and then the dot (&lt;code&gt;.&lt;/code&gt;) pops it from the data stack and prints it.&lt;/p&gt;
    &lt;p&gt;We'll need more Forth features than this to build interesting programs.&lt;/p&gt;
    &lt;p&gt;Forth has two built-in stacks. The data stack (sometimes just called "the stack") and the return stack. When a word is called in Forth (words are like functions) the address of the next instruction is pushed to the return stack. When the word finishes executing, the return stack is popped into the instruction pointer.&lt;/p&gt;
    &lt;quote&gt;\ (1) word declaration: PRINT10\ (3) the word body is executed10 .\ (4) ";" compiles an exit – at runtime it pops the return stack\ into the instruction pointer.;\ (2) instruction pointer lands on a word,\ the next address is pushed to the return stack,\ and the instruction pointer is set to the word addressPRINT10\ (5) next address is executed&lt;/quote&gt;
    &lt;p&gt;As well as words, my compiler also supports &lt;code&gt;DO&lt;/code&gt;/&lt;code&gt;LOOP&lt;/code&gt;s. These use the return stack too. When &lt;code&gt;DO&lt;/code&gt; executes, it pops the limit and the iterator from the data stack and stores them in the return stack. This allows the inner loop to freely operate on the data stack. When &lt;code&gt;LOOP&lt;/code&gt; executes, it pops the limit and iterator from the return stack, adds one to the iterator and compares it to the limit (and exits or loops again).&lt;/p&gt;
    &lt;p&gt;There are also variables, which can be declared with &lt;code&gt;VARIABLE X&lt;/code&gt;, loaded with &lt;code&gt;X @&lt;/code&gt;, and stored with &lt;code&gt;1 X !&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Putting these features together, here's how you can build &lt;code&gt;10&lt;/code&gt; by adding &lt;code&gt;1&lt;/code&gt; repeatedly.&lt;/p&gt;
    &lt;quote&gt;VARIABLE A: RUN0 A ! \ initialize A10 0 DO \ push limit and iterator for DO\ DO places these on the return stackA @ 1 + A ! \ A = A + 1LOOP \ increment i and exits when i == limitA @ . \ prints 10;RUN&lt;/quote&gt;
    &lt;p&gt;This set of features is enough for us to calculate numbers from the Fibonacci series, which is the example program I'll be using throughout the rest of this post.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tokenizing&lt;/head&gt;
    &lt;p&gt;Tokenization translates raw text into meaningful symbols.&lt;/p&gt;
    &lt;p&gt;To turn source code into tokens, we scan through the code, skipping over whitespace and appending tokens to a list. Syntax that's a single character is turned straight into a token but multi-character syntax needs to be grouped together. For example, entire comments are discarded, and while they are being discarded, we need to track that we're "within" a comment.&lt;/p&gt;
    &lt;p&gt;Identifiers, like keywords like &lt;code&gt;DO&lt;/code&gt; or &lt;code&gt;LOOP&lt;/code&gt;, or custom variables like &lt;code&gt;MYLONGVAR&lt;/code&gt;, become single tokens.&lt;/p&gt;
    &lt;p&gt;First, a visualization of what's happening:&lt;/p&gt;
    &lt;p&gt;And here's a trimmed version of my tokenizer:&lt;/p&gt;
    &lt;quote&gt;function tokenize(source: string): Token[] {const tokens: Token[] = [];let index = 0;while (index &amp;lt; source.length) {// Consume and discard everything on a line after '\'if (source[index] === "\\") {const commentStart = index;while (index &amp;lt; source.length &amp;amp;&amp;amp; source[index] !== "\n") {index++;}index++;continue;}// Skip over whitespaceif (isWhitespace(source[index])) {index++;continue;}if (source[index] === "@") {tokens.push({ type: "load" });index++;continue;}// Handle identifiersif (isLetter(source[index])) {const start = index;let value = "";while (isLetter(source[index])) {value += source[index];index++;}// Special-case the keywordsif (value === "DO") {tokens.push({ type: "do" });continue;}if (value === "LOOP") {tokens.push({ type: "loop" });continue;}tokens.push({ type: "identifier", value });continue;}// .. trimmed other tokens, see source}return tokens;}&lt;/quote&gt;
    &lt;p&gt;With our list of tokens, we're ready to start generating bytecode for the VM.&lt;/p&gt;
    &lt;head rend="h2"&gt;Generating Bytecode&lt;/head&gt;
    &lt;p&gt;Usually, in a compiler, the step after tokenization is called parsing where an abstract syntax tree is built. However, the feature set of my Forth is so small, that I decided to generate bytecode directly from the list of tokens.&lt;/p&gt;
    &lt;p&gt;After bytecode generation, my VM needs two things:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A list of operations for the VM's instruction pointer to navigate&lt;/item&gt;
      &lt;item&gt;The number of variables that the program refers to&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The latter tells the VM how many variables to allocate (a zero-initialized array). Variables in source (e.g., &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;) become integer indices into this array.&lt;/p&gt;
    &lt;p&gt;This means that my bytecode generation step needs to keep track of variables that have been seen before so that I can output the correct memory address (i.e. an index into the variable table).&lt;/p&gt;
    &lt;p&gt;I'll show the full list of bytecode operations and then a few of the steps for handling specific tokens.&lt;/p&gt;
    &lt;quote&gt;type Op = {op: "lit", // Push value or address to DSvalue: number;} | {op: "load", // Pop address from DS, push value at address} | {op: "store", // Pop address from DS, pop value from DS, store value at address} | {op: "dup2", // Duplicate top two values on DS [a, b] -&amp;gt; [a, b, a, b]} | {op: "add", // Pop top two values from DS, push sum to DS} | {op: "eq", // Pop top two values from DS, push 1 if equal, 0 if not} | {op: "jz", // Pop value from DS, if zero, jump to addressaddress: number;} | {op: "jmp", // Jump to addressaddress: number;} | {op: "call", // Push IP to RS, jump to addressaddress: number;} | {op: "ret", // Pop IP from RS, jump to IP} | {op: "rs_push", // Pop from DS, push to RS} | {op: "rs_pop", // Pop from RS, push to DS} | {op: "drop", // Discard top value from DS} | {op: "print", // Pop value from DS, print it}&lt;/quote&gt;
    &lt;p&gt;The bytecode generation step scans through the list of tokens and, as it processes them, it appends to a list of bytecode and increments the variable count to set up the correct references.&lt;/p&gt;
    &lt;p&gt;Identifier tokens are either variable references, or words (function calls).&lt;/p&gt;
    &lt;quote&gt;function compile(tokens: Token[]) {// Bytecode that runs in the VMconst bytecode: Bytecode[] = [];// Word -&amp;gt; bytecode offsets (for calls)const wordTable: { [key: string]: number } = {};// Variable -&amp;gt; memory addressconst variableTable: { [key: string]: number } = {};// ..let index = 0;while (index &amp;lt; tokens.length) {const token = tokens[index];if (token.type === "identifier") {if (token.value === "VARIABLE") {const nextToken = tokens[index + 1];// Store a binding of variable name to memory addressvariableTable[nextToken.value] = Object.keys(variableTable).length;index += 2;continue;}// If the variable has been declared as a word like `: FIB10`// then we have previously stored the bytecode offset which we// will set the instruction pointer to at runtimeif (wordTable[token.value] !== undefined) {bytecode.push({ op: "call", address: wordTable[token.value] });index++;continue;}// If it's not a variable declaration, or a word, then we// look up the memory addressbytecode.push({ op: "lit", value: variableTable[token.value] });index++;continue;}// ..&lt;/quote&gt;
    &lt;p&gt;Setting up the &lt;code&gt;DO&lt;/code&gt;/&lt;code&gt;LOOP&lt;/code&gt; bytecode generation was the trickiest part of this project. It's a minefield of possible off-by-one errors. It's also not easy to read and understand but I've chosen to put it here anyway because even just glancing over it should help you understand how the loop variables (limit, iterator) and instruction pointer jumps are combined to execute loops in Forth.&lt;/p&gt;
    &lt;quote&gt;// .. still inside compile()if (token.type === "do") {index++;// Expect: DS has [limit, start] (start is top)// Move both to RS: start then limit (RS top becomes limit)bytecode.push({ op: "rs_push" }) // start -&amp;gt; RSbytecode.push({ op: "rs_push" }) // limit -&amp;gt; RS// Mark first instruction of loop bodyloopStart.push(bytecode.length);continue;}if (token.type === "loop") {// Pop limit and i from RS (RS top is limit)bytecode.push({ op: "rs_pop" }) // limit -&amp;gt; DSbytecode.push({ op: "rs_pop" }) // i -&amp;gt; DS// Increment ibytecode.push({ op: "lit", value: 1 })bytecode.push({ op: "add" }) // i on DS// Duplicate i and limit for compare and possible restorebytecode.push({ op: "dup2" })bytecode.push({ op: "eq" }) // eq flag on DSconst loopStartAddress = loopStart.pop(); // first instr of loop body// Branch: continue when not equal (eq==0), exit when equalconst continueAddress = bytecode.length + 4; // skip equal-path (2 drops + jmp)bytecode.push({ op: "jz", address: continueAddress })// Equal path (fallthrough): cleanup and exitbytecode.push({ op: "drop" }) // drop ibytecode.push({ op: "drop" }) // drop limitconst afterBlockAddress = bytecode.length + 1 /* jmp */ + 3 /* continue block */;bytecode.push({ op: "jmp", address: afterBlockAddress })// Continue path:// address == continueAddressbytecode.push({ op: "rs_push" }) // i -&amp;gt; RS (top)bytecode.push({ op: "rs_push" }) // limit -&amp;gt; RSbytecode.push({ op: "jmp", address: loopStartAddress })index++;continue;}// .. trimmed other tokens, see source&lt;/quote&gt;
    &lt;p&gt;The rest of the token branches are more straightforward. Tokens like dot, store, load, and print all map directly to bytecode operations.&lt;/p&gt;
    &lt;p&gt;The colon token branch sets the bytecode offset for the word name which allows identifiers to become word calls as we saw above.&lt;/p&gt;
    &lt;p&gt;Now we've earned a visualization break.&lt;/p&gt;
    &lt;head rend="h2"&gt;VM&lt;/head&gt;
    &lt;p&gt;Writing the VM felt a little bit like dessert. Manually stepping through the bytecode as I worked on the generation logic gave me fairly good confidence that I was heading in the right direction, I only came across one or two off-by-one bugs when putting the VM together. Essentially, I had designed it ahead-of-time.&lt;/p&gt;
    &lt;p&gt;The VM scans through the bytecode operations using the instruction pointer (which starts at &lt;code&gt;0&lt;/code&gt;). The instruction pointer can jump around as it encounters &lt;code&gt;jmp&lt;/code&gt; (jump to offset) or &lt;code&gt;jz&lt;/code&gt; (conditional jump).&lt;/p&gt;
    &lt;p&gt;It manages the data stack, return stack, and the variable table (i.e. memory addresses).&lt;/p&gt;
    &lt;p&gt;Here's a trimmed version of the VM:&lt;/p&gt;
    &lt;quote&gt;function vm(program: Program) =&amp;gt; {const dataStack: number[] = [];const returnStack: number[] = [];const variableTable: number[] = new Array(program.variableCount).fill(0);let ip = 0;while (ip &amp;lt; program.bytecode.length) {const cur = program.bytecode[ip];if (cur.op === "lit") {dataStack.push(cur.value); // Literal or memory addressip++;continue;} else if (cur.op === "store") {const address = dsPop();const value = dsPop();variableTable[address] = value;ip++;continue;} else if (cur.op === "jmp") {ip = cur.address;continue;} else if (cur.op === "jz") {if (dsPop() === 0) {ip = cur.address;continue;}ip++;continue;} else if (cur.op === "call") {ip++returnStack.push(ip);ip = cur.address;continue;} else if (cur.op === "ret") {ip = rsPop();continue;}// .. trimmed other ops, see source}}&lt;/quote&gt;
    &lt;p&gt;The code for my compiler and VM are embedded in this website. I've been iterating on it by just running the TypeScript file:&lt;/p&gt;
    &lt;quote&gt;bun ./components/visuals/forth/components.tsx55 # 10th Fibonacci number&lt;/quote&gt;
    &lt;p&gt;The visuals are React components with sleeps. In order to display the progress of the different steps (tokenizing, bytecode generation, VM), I first got each working and then added a callback which takes the current data and then sleeps.&lt;/p&gt;
    &lt;p&gt;So the VM function is actually async and accepts this callback:&lt;/p&gt;
    &lt;quote&gt;// VMasync function vm(program: Program, callback:(highlight: { ip: number },dataStack: number[],returnStack: number[],variableTable: number[]) =&amp;gt; Promise&amp;lt;void&amp;gt;) {// .. inside VM loopawait callback({ ip }, dataStack, returnStack, variableTable);// ..}&lt;/quote&gt;
    &lt;p&gt;And the component calls it and passes &lt;code&gt;setState&lt;/code&gt; functions:&lt;/p&gt;
    &lt;quote&gt;// Componentexport function VM() {// .. inside useEffectawait vm(program, async (highlight, newDataStack, newReturnStack, newVariableTable) =&amp;gt; {setHighlightIP(highlight.ip);setDataStack([...newDataStack]);setReturnStack([...newReturnStack]);setVariableTable([...newVariableTable]);await new Promise(resolve =&amp;gt; setTimeout(resolve, 500));});// ..}&lt;/quote&gt;
    &lt;p&gt;For the Forth code snippets in this post, I had to write a Prism plugin to get syntax highlighting working. Now that I've learned how to do this, I'll be using this method for syntax highlighting for the more esoteric (or, original) programming languages I write about!&lt;/p&gt;
    &lt;head rend="h2"&gt;Discrepancies&lt;/head&gt;
    &lt;p&gt;I described my compiler/VM as Forth-like because it's a little bit different from how Forth works.&lt;/p&gt;
    &lt;p&gt;My implementation compiles to bytecode ahead-of-time. Forth is traditionally interactive. Words are interpreted and executed as they are entered, and only colon definitions are compiled. Forth uses threaded code where words contain lists of addresses pointing to other words instead of a different bytecode offset.&lt;/p&gt;
    &lt;p&gt;Real Forth uses a dynamic dictionary that can be altered at runtime with new variables or word definitions. As I mentioned earlier, my word bodies are compiled with jump-over logic in the main execution stream. Also, my variables compile to &lt;code&gt;lit address&lt;/code&gt; operations but real Forth variables return their address when executed directly.&lt;/p&gt;
    &lt;p&gt;These are just a few of the differences but I feel like my Forth-like compiler and VM capture enough of the spirit of Forth!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://healeycodes.com/compiling-a-forth"/><published>2025-10-06T13:52:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45491609</id><title>Show HN: Kent Dybvig's Scheme Machine in 400 Lines of C (Heap-Memory Model)</title><updated>2025-10-07T13:02:30.371164+00:00</updated><content>&lt;doc fingerprint="c5d093b93a485002"&gt;
  &lt;main&gt;
    &lt;p&gt; Created &lt;relative-time&gt;February 17, 2023 12:42&lt;/relative-time&gt;&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;tool-tip&gt;Save swatson555/8cc36d8d022d7e5cc44a5edb2c4f7d0b to your computer and use it in GitHub Desktop.&lt;/tool-tip&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt; Heap based scheme machine. &lt;/p&gt;
    &lt;p&gt; This file contains hidden or bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters &lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;/* Heap based virtual machine described in section 3.4 of Three Implementation Models for Scheme, Dybvig&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;*/&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;#include &amp;lt;string.h&amp;gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;#include &amp;lt;assert.h&amp;gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char token[128][32];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int lexer(char* input) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int ii = 0; // input index&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int ti = 0; // token index&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;while(input[ii] != '\0')&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;switch(input[ii]) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Ignore whitespace and newlines&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;case ' ':&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;case '\n':&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ii;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Turn a left parenthesis into a token.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;case '(':&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][0] = '(';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][1] = '\0';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ii;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ti;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Turn a right parenthesis into a token.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;case ')':&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][0] = ')';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][1] = '\0';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ii;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ti;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Turn an apostrophe into a token.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;case '\'':&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][0] = '\'';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][1] = '\0';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ii;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ti;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Anything else is a symbol&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;default:&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;for(int i = 0;; ++i) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if(input[ii] != ' ' &amp;amp;&amp;amp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;input[ii] != ')' &amp;amp;&amp;amp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;input[ii] != '(' &amp;amp;&amp;amp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;input[ii] != '\n' &amp;amp;&amp;amp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;input[ii] != '\0') {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][i] = input[ii++];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;token[ti][i] = '\0';&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;++ti;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;break;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return ti;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int curtok;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char* nexttok() {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return token[curtok++];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char* peektok() {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return token[curtok];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;typedef struct Pair {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;} Pair;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;typedef struct Text {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char* car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;struct Text* cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;} Text;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair text[1280];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* textptr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int istext(void* x) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return x &amp;gt;= (void*)&amp;amp;text &amp;amp;&amp;amp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;x &amp;lt; (void*)&amp;amp;text[1280];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* cons(void* x, void* y) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;assert(istext(textptr));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;textptr-&amp;gt;car = x;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;textptr-&amp;gt;cdr = y;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return textptr++;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read(char* ln);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read_exp();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read_list();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read(char* ln) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// Initialize the lexer and list memory.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;curtok = 0;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;textptr = text;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;lexer(ln);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return read_exp();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read_exp() {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char* tok = nexttok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (tok[0] == '(' &amp;amp;&amp;amp; peektok()[0] == ')') {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;nexttok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return NULL;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (tok[0] == '\'')&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("quote", cons(read_exp(), NULL));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (tok[0] == '(')&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return read_list();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return tok;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* read_list() {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char* tok = peektok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if(tok[0] == ')') {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;nexttok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return NULL;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if(tok[0] == '.') {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;nexttok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;tok = read_exp();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;nexttok();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return tok;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* fst = read_exp();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* snd = read_list();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons(fst, snd);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print(void* exp);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_exp(void* exp);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_list(Pair* list);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_cons(Pair* pair);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print(void* exp) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_exp(exp);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("\n");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_exp(void* exp) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (istext(exp)) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* pair = exp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if(!istext(pair-&amp;gt;cdr) &amp;amp;&amp;amp; pair-&amp;gt;cdr != NULL) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("(");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_cons(exp);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf(")");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("(");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_list(exp);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("%s", exp ? (char*)exp : "()");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_list(Pair* list) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (list-&amp;gt;cdr == NULL) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_exp(list-&amp;gt;car);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf(")");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if(!istext(list-&amp;gt;cdr) &amp;amp;&amp;amp; list-&amp;gt;cdr != NULL) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_cons(list);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf(")");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_exp(list-&amp;gt;car);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf(" ");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_list(list-&amp;gt;cdr);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void print_cons(Pair* pair) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_exp(pair-&amp;gt;car);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf(" . ");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print_exp(pair-&amp;gt;cdr);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* compile(void* exp, void* next) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (istext(exp)) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* p = exp;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (strcmp(p-&amp;gt;car, "quote") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("constant", cons(p-&amp;gt;cdr-&amp;gt;car, cons(next, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(p-&amp;gt;car, "lambda") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("close", cons(p-&amp;gt;cdr-&amp;gt;car, cons(compile(p-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car, cons("return", NULL)), cons(next, NULL))));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(p-&amp;gt;car, "if") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return compile(p-&amp;gt;cdr-&amp;gt;car, cons("test", cons(compile(p-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car, next),&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;cons(compile(p-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car, next),&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;NULL))));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(p-&amp;gt;car, "set!") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return compile(p-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car, cons("assign", cons(p-&amp;gt;cdr-&amp;gt;car, cons(next, NULL))));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(p-&amp;gt;car, "call/cc") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* c = cons("conti", cons(cons("argument", cons(compile(p-&amp;gt;cdr-&amp;gt;car, cons("apply", NULL)), NULL)), NULL));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* n = next;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (strcmp(n-&amp;gt;car, "return") == 0)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return c;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("frame", cons(next, cons(c, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* args = (Pair*)p-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* c = compile(p-&amp;gt;car, cons("apply", NULL));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;while (args) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;c = compile(args-&amp;gt;car, cons("argument", cons(c, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;args = args-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* n = next;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (strcmp(n-&amp;gt;car, "return") == 0)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return c;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("frame", cons(next, cons(c, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if(isdigit(*((char*)exp))) { // a number&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("constant", cons(exp, cons(next, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if(strcmp(exp, "#t") == 0) { // a boolean&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("constant", cons(exp, cons(next, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if(strcmp(exp, "#f") == 0) { // a boolean&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("constant", cons(exp, cons(next, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else { // a symbol&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons("refer", cons(exp, cons(next, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* get(void* env, char* var) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* e = env;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;while(env) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* cur = e-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* vars = cur-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Pair* vals = cur-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;while (vars &amp;amp;&amp;amp; vals) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (strcmp(vars-&amp;gt;car, var) == 0)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return vals-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;vars = vars-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;vals = vals-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;e = e-&amp;gt;cdr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;fprintf(stderr, "No definition in environment for %s.\n", var);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;assert(0);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void set(void* env, char* var, char* val) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* ref = get(env, var);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;ref = val;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* extend(void* env, void* vars, void* vals) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons(cons(vars, vals), env);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* callframe(void* next, void* env, void* rib, void* stack) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons(next, cons(env, cons(rib, cons(stack, NULL))));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* closure(void* body, void* env, void* vars) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return cons(body, cons(env, cons(vars, NULL)));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* continuation(void* stack) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return closure(cons("nuate", cons(stack, cons("v", NULL))), NULL, cons("v", NULL));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* accum;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* next;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* env;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* rib;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* stack;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void virtmach() {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* n = next;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;if (strcmp(n-&amp;gt;car, "halt") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "refer") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;accum = get(env, n-&amp;gt;cdr-&amp;gt;car);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "constant") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;accum = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "close") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* vars = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* body = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* x = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;accum = closure(body, env, vars);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = x;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "test") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* consequent = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* alternate = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = strcmp(accum, "#f") == 0 ? alternate : consequent;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "assign") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;set(env, n-&amp;gt;cdr-&amp;gt;car, accum);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "conti") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;accum = continuation(stack);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "nuate") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;stack = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;accum = get(env, n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = cons("return", NULL);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "frame") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;stack = callframe(n-&amp;gt;cdr-&amp;gt;car, env, rib, stack);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;rib = NULL;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "argument") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;rib = cons(accum, rib);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = n-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "apply") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* a = accum;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* body = a-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* clos = a-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;void* vars = a-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;env = extend(env, vars, rib);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;rib = NULL;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = body;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else if (strcmp(n-&amp;gt;car, "return") == 0) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text* s = stack;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = s-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;env = s-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;rib = s-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;stack = s-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;cdr-&amp;gt;car;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;else {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;fprintf(stderr, "Unhandled operation.\n");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;assert(0);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;int main(int argc, char** argv) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;// note! repl implies there's a top-level but there isn't...&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("Lisp REPL\n\n");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("&amp;gt;&amp;gt; ");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;char buffer[256];&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;while (fgets(buffer, 256, stdin)) {&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;next = compile(read(buffer), cons("halt", NULL));&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;virtmach();&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;print(accum);&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;printf("&amp;gt;&amp;gt; ");&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;return 0;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;}&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Sign up for free to join this conversation on GitHub. Already have an account? Sign in to comment &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://gist.github.com/swatson555/8cc36d8d022d7e5cc44a5edb2c4f7d0b"/><published>2025-10-06T14:06:29+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45491621</id><title>Mise: Monorepo Tasks</title><updated>2025-10-07T13:02:29.940217+00:00</updated><content>&lt;doc fingerprint="6c502c738fd7a4ba"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Introducing Monorepo Tasks #6564&lt;/head&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;We're excited to announce Monorepo Tasks, a powerful new feature that brings first-class monorepo support to mise tasks! 🚀&lt;/p&gt;
          &lt;head&gt;What is it?&lt;/head&gt;
          &lt;p&gt;Monorepo Tasks allows you to manage tasks across multiple projects in a single repository, with each project maintaining its own tools, environment variables, and tasks. Think of it as bringing the power of tools like Bazel or Turborepo to mise's task system, but with mise's signature simplicity.&lt;/p&gt;
          &lt;head&gt;Key Features&lt;/head&gt;
          &lt;head&gt;🎯 Unified Task Namespace&lt;/head&gt;
          &lt;p&gt;All tasks across your monorepo are automatically discovered and prefixed with their location:&lt;/p&gt;
          &lt;code&gt;mise //projects/frontend:build
mise //projects/backend:test
mise //services/api:deploy&lt;/code&gt;
          &lt;head&gt;🌳 Smart Tool &amp;amp; Environment Inheritance&lt;/head&gt;
          &lt;p&gt;Define common tools at the root, override them where needed:&lt;/p&gt;
          &lt;code&gt;# Root mise.toml
[tools]
node = "20"      # Inherited everywhere
python = "3.12"

# projects/legacy-app/mise.toml
[tools]
node = "14"      # Override just for this project
# python still inherited!&lt;/code&gt;
          &lt;head&gt;🎭 Powerful Wildcard Patterns&lt;/head&gt;
          &lt;p&gt;Run tasks across multiple projects with ease:&lt;/p&gt;
          &lt;code&gt;# Run tests in ALL projects
mise //...:test

# Run all build tasks under services/
mise //services/...:build

# Run ALL tasks in frontend (wildcards need quotes)
mise '//projects/frontend:*'

# Run all test:* tasks everywhere
mise '//...:test:*'&lt;/code&gt;
          &lt;head&gt;✨ Consistent Execution Anywhere&lt;/head&gt;
          &lt;p&gt;Run tasks from anywhere in the monorepo - they always execute with the correct context, tools, and environment from their config_root.&lt;/p&gt;
          &lt;head&gt;🔒 Automatic Trust Propagation&lt;/head&gt;
          &lt;p&gt;Trust your monorepo root once, and all descendant configs are automatically trusted.&lt;/p&gt;
          &lt;head&gt;Quick Start&lt;/head&gt;
          &lt;p&gt;1. Enable the feature in your root &lt;/p&gt;
          &lt;code&gt;experimental_monorepo_root = true

[tools]
node = "20"
python = "3.12"&lt;/code&gt;
          &lt;p&gt;2. Set the experimental flag:&lt;/p&gt;
          &lt;code&gt;export MISE_EXPERIMENTAL=1&lt;/code&gt;
          &lt;p&gt;3. Add tasks to your projects:&lt;/p&gt;
          &lt;code&gt;# projects/frontend/mise.toml
[tasks.build]
run = "npm run build"

[tasks.test]
run = "npm test"&lt;/code&gt;
          &lt;p&gt;4. Run tasks from anywhere:&lt;/p&gt;
          &lt;code&gt;mise //projects/frontend:build
mise //...:test  # Run tests in all projects!&lt;/code&gt;
          &lt;head&gt;Example Monorepo Structure&lt;/head&gt;
          &lt;p&gt;Run all service builds: &lt;/p&gt;
          &lt;head&gt;Why This Matters&lt;/head&gt;
          &lt;p&gt;Managing monorepos is hard. Coordinating tools, tasks, and environments across dozens of projects is even harder. With Monorepo Tasks, you get:&lt;/p&gt;
          &lt;head&gt;How Does This Compare to Other Tools?&lt;/head&gt;
          &lt;p&gt;The monorepo ecosystem is rich with excellent tools, each with different strengths. Here's how mise's Monorepo Tasks compares:&lt;/p&gt;
          &lt;head&gt;Simple Task Runners&lt;/head&gt;
          &lt;p&gt;Taskfile and Just are fantastic for single-project task automation. They're lightweight and easy to set up, but they weren't designed with monorepos in mind. While you can have multiple Taskfiles/Justfiles in a repo, they don't provide unified task discovery, cross-project wildcards, or automatic tool/environment inheritance across projects.&lt;/p&gt;
          &lt;p&gt;mise's advantage: Automatic task discovery across the entire monorepo with a unified namespace and powerful wildcard patterns.&lt;/p&gt;
          &lt;head&gt;JavaScript-Focused Tools&lt;/head&gt;
          &lt;p&gt;Nx, Turborepo, and Lerna are powerful tools specifically designed for JavaScript/TypeScript monorepos.&lt;/p&gt;
          &lt;p&gt;mise's advantage: Language-agnostic support. While these tools excel in JS/TS ecosystems, mise works equally well with Rust, Go, Python, Ruby, or any mix of languages. You also get unified tool version management (not just tasks) and environment variables across your entire stack.&lt;/p&gt;
          &lt;head&gt;Large-Scale Build Systems&lt;/head&gt;
          &lt;p&gt;Bazel (Google) and Buck2 (Meta) are industrial-strength build systems designed for massive, multi-language monorepos at companies with thousands of engineers.&lt;/p&gt;
          &lt;p&gt;Both are extremely powerful but come with significant complexity:&lt;/p&gt;
          &lt;p&gt;mise's advantage: Simplicity through non-hermetic builds. mise doesn't try to control your entire build environment in isolation - instead, it manages tools and tasks in a flexible, practical way. This "non-hermetic" approach means you can use mise without restructuring your entire codebase or learning a new language. You get powerful monorepo task management with simple TOML configuration - enough power for most teams without the enterprise-level complexity that hermetic builds require.&lt;/p&gt;
          &lt;head&gt;Other Notable Tools&lt;/head&gt;
          &lt;p&gt;Rush (Microsoft) offers strict dependency management and build orchestration for JavaScript monorepos, with a focus on safety and convention adherence.&lt;/p&gt;
          &lt;p&gt;Moon is a newer Rust-based build system that aims to be developer-friendly while supporting multiple languages.&lt;/p&gt;
          &lt;head&gt;The mise Sweet Spot&lt;/head&gt;
          &lt;p&gt;mise's Monorepo Tasks aims to hit the sweet spot between simplicity and power:&lt;/p&gt;
          &lt;p&gt;When to choose mise:&lt;/p&gt;
          &lt;p&gt;When to consider alternatives:&lt;/p&gt;
          &lt;p&gt;The best tool is the one that fits your team's needs. mise's Monorepo Tasks is designed for teams who want powerful monorepo management without the complexity overhead, especially when working across multiple languages.&lt;/p&gt;
          &lt;head&gt;Try It Out!&lt;/head&gt;
          &lt;p&gt;This feature is experimental, which means:&lt;/p&gt;
          &lt;p&gt;Read the full documentation: Monorepo Tasks Guide&lt;/p&gt;
          &lt;head&gt;We Want Your Feedback!&lt;/head&gt;
          &lt;p&gt;Please try it out and let us know:&lt;/p&gt;
          &lt;p&gt;Share your experience in the comments below! 👇&lt;/p&gt;
          &lt;p&gt;Special shoutout to the mise community for the feedback and ideas that led to this feature. Happy building! 🛠️&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
    &lt;head rend="h2"&gt;Replies: 3 comments 11 replies&lt;/head&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Does this support &lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Excited to see this! We're currently using turbo in a mixed Rust/wasm/TS/Python/Go repo, and it's been a bit of a mixed bag (admittedly, I don't know how much of that is because we're unwilling to invest effort into modelling task inputs/outputs correctly in turbo).&lt;/p&gt;
          &lt;p&gt;Compounding the issue is that what we really want a whole bunch of things out of it:&lt;/p&gt;
          &lt;p&gt;Absent these, I don't really see us adopting this anytime soon unfortunately.&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;The &lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/jdx/mise/discussions/6564"/><published>2025-10-06T14:07:46+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45492803</id><title>OpenZL: An open source format-aware compression framework</title><updated>2025-10-07T13:02:29.750180+00:00</updated><content>&lt;doc fingerprint="b69d42b82801cb99"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OpenZL is a new open source data compression framework that offers lossless compression for structured data.&lt;/item&gt;
      &lt;item&gt;OpenZL is designed to offer the performance of a format-specific compressor with the easy maintenance of a single executable binary.&lt;/item&gt;
      &lt;item&gt;You can get started with OpenZL today by visiting our Quick Start guide and the OpenZL GitHub repository.&lt;/item&gt;
      &lt;item&gt;Learn more about the theory behind OpenZL in this whitepaper.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Today, we are excited to announce the public release of OpenZL, a new data compression framework. OpenZL offers lossless compression for structured data, with performance comparable to specialized compressors. It accomplishes this by applying a configurable sequence of transforms to the input, revealing hidden order in the data, which can then be more easily compressed. Despite applying distinct transformation permutations for every file type, all OpenZL files can be decompressed using the same universal OpenZL decompressor.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Decade of Lessons&lt;/head&gt;
    &lt;p&gt;When Zstandard was announced, it came with a simple pitch: It promised the same or better compression ratio of prior default but at the much increased speed required by datacenter workloads. By pairing strong entropy coding with a design that fully utilized modern CPU capabilities, Zstandard offered a substantial improvement that justified its presence in datacenters.&lt;/p&gt;
    &lt;p&gt;However, while it was improved over time, remaining within the Zstandard framework offers diminishing returns. So we started looking for the next great leap in data compression.&lt;/p&gt;
    &lt;p&gt;In this quest, one pattern kept repeating: Using generic methods on structured data leaves compression gains on the table. Data isn’t just byte soup. It can be columnar, encode enums, be restricted to specific ranges, or carry highly repetitive fields. More importantly, it has predictable shapes. A bespoke compressor that leans into that structure can beat general-purpose tools on both ratio and speed. But there’s a catch — every bespoke scheme means another compressor and decompressor to create, ship, audit, patch, and trust.&lt;/p&gt;
    &lt;p&gt;OpenZL is our answer to the tension between the performance of format-specific compressors and the maintenance simplicity of a single executable binary.&lt;/p&gt;
    &lt;head rend="h2"&gt;Make the Structure Explicit&lt;/head&gt;
    &lt;p&gt;General compressors rely on a one-size fits all processing strategy, or alternatively spend a lot of their cycles guessing which techniques to use. OpenZL saves those cycles by making the structure an explicit input parameter. Compression can then focus on a sequence of reversible steps that surface patterns before coding.&lt;/p&gt;
    &lt;p&gt;As a user, you provide OpenZL with the data shape (via a preset or a thin format description). Then the trainer, an offline optimization component, builds an effective compression config that can be re-employed for similar data. During encoding that config resolves into a concrete decode recipe that’s embedded into the frame. The universal decoder will directly execute that recipe, without any out-of-band information.&lt;/p&gt;
    &lt;head rend="h2"&gt;An Example Compression Using OpenZL&lt;/head&gt;
    &lt;p&gt;As an example, let’s compress sao, which is part of the Silesia Compression Corpus. This file follows a well-defined format featuring an array of records, each one describing a star. Providing this information to OpenZL is enough to give it an edge over generic lossless compressors, which only see bytes.&lt;/p&gt;
    &lt;p&gt;Comparison on a M1 cpu, using clang-17&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Compressor&lt;/cell&gt;
        &lt;cell&gt;zstd -3&lt;/cell&gt;
        &lt;cell&gt;xz -9&lt;/cell&gt;
        &lt;cell&gt;OpenZL&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Compressed Size&lt;/cell&gt;
        &lt;cell&gt;5,531,935 B&lt;/cell&gt;
        &lt;cell&gt;4,414,351 B&lt;/cell&gt;
        &lt;cell&gt;3,516,649 B&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Compression Ratio&lt;/cell&gt;
        &lt;cell&gt;x1.31&lt;/cell&gt;
        &lt;cell&gt;x1.64&lt;/cell&gt;
        &lt;cell&gt;x2.06&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Compression Speed&lt;/cell&gt;
        &lt;cell&gt;220 MB/s&lt;/cell&gt;
        &lt;cell&gt;3.5 MB/s&lt;/cell&gt;
        &lt;cell&gt;340 MB/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Decompression Speed&lt;/cell&gt;
        &lt;cell&gt;850 MB/s&lt;/cell&gt;
        &lt;cell&gt;45 MB/s&lt;/cell&gt;
        &lt;cell&gt;1200 MB/s&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Crucially, OpenZL produces a higher compression ratio while preserving or even improving speed, which is critical for data center processing pipelines.&lt;/p&gt;
    &lt;p&gt;For illustration, this result is achieved using the following simple graph:&lt;/p&gt;
    &lt;head rend="h3"&gt;A Brief Explanation&lt;/head&gt;
    &lt;p&gt;So what is happening in this example?&lt;/p&gt;
    &lt;p&gt;We start by separating the header from the rest, a large table of structures. Then each field gets extracted into its own stream: the array of structures becomes a structure of arrays. After that point, we expect that each stream contains homogeneous data of the same type and semantic meaning. We can now focus on finding an optimal compression strategy for each one.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;SRA0 is a position on the X axis. Due to the way the table is generated, the index is mostly sorted, inviting the use of delta to reduce the range of values represented. This mechanically makes the resulting stream easier to compress.&lt;/item&gt;
      &lt;item&gt;SDEC0 is a position on the Y axis. It’s not as well sorted as the X axis, but we can at least exploit the fact that it’s bounded between a minimum and a maximum. This makes the higher bytes more predictable, which can be exploited for better compression with the transpose operation.&lt;/item&gt;
      &lt;item&gt;The other fields (IS, MAG, XRPM, XDPM) share a common property: their cardinality is much lower than their quantities, and there is no relation between 2 consecutive values. This makes them a good target for tokenize, which will convert the stream into a dictionary and an index list.&lt;/item&gt;
      &lt;item&gt;The resulting dictionaries and index lists are very different. They benefit from completely different compression strategies. So they are sent to dedicated processing graphs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The graph continues beyond these steps. But at some point, we can also stop making decisions. The main work is to group data into homogeneous streams. After that, one can count on openzl to take care of the rest.&lt;/p&gt;
    &lt;p&gt;To go even further, we would like to generate compression strategies that are specifically fine-tuned for each stream. This is where the offline trainer stage comes into play.&lt;/p&gt;
    &lt;head rend="h2"&gt;Generate a Compressor Automatically&lt;/head&gt;
    &lt;p&gt;It’s possible to take full control of the compression process, but it’s also not required. A faster strategy is to just describe your data and let the system learn a compression config.&lt;/p&gt;
    &lt;p&gt;Describe the input: With the Simple Data Description Language (SDDL), you sketch how the bytes map to fields — rows, columns, enums, nested records. SDDL is for parsing only; it just tells OpenZL the shape of your data. Alternatively, you can write your own parser function directly using one of the supported languages, and register it with OpenZL to delegate the logic.&lt;/p&gt;
    &lt;p&gt;Learn the config: Starting from a preset, a parser function or an SDDL description, the trainer runs a budgeted search over transform choices and parameters to produce a Plan. It can provide a full set of speed/ratio tradeoffs, or directly target the best configuration respecting some speed constraints. Internally it uses a cluster finder (to group fields that behave alike) and a graph explorer (to try candidate subgraphs and keep score).&lt;/p&gt;
    &lt;p&gt;Resolve at encode-time: While compressing, the encoder turns the Plan into a concrete recipe — the Resolved Graph. If the Plan has control points, it picks the branch that fits the data and records that choice into the frame.&lt;/p&gt;
    &lt;p&gt;Decode without coordination: Each frame chunk carries its own resolved graph. The single decoder checks it, enforces limits, and runs the steps in order. When a plan improves, you just roll out the new plan, no new decompressor needed. Old data keeps decoding; new data get improved gains.&lt;/p&gt;
    &lt;p&gt;In practice the loop is straightforward: describe (SDDL) → train (produce a plan) → compress (emit frames with resolved graphs) → decode anywhere with the same binary.&lt;/p&gt;
    &lt;head rend="h2"&gt;Embracing Changes: Re-Training and In-Flight Control&lt;/head&gt;
    &lt;p&gt;In the real world, data evolves constantly, in both structure and content. A compressor built for one version of a schema would have a short lifetime.&lt;/p&gt;
    &lt;p&gt;Thankfully, with the flexibility offered by compression plans, we can react swiftly to data changes. At Meta, this is the core mission of Managed Compression, originally created to automate dictionary compression with Zstandard, and presented in an earlier blog on how we improved compression at with Zstandard.&lt;/p&gt;
    &lt;p&gt;OpenZL offers a training process that updates compression plans to maintain or improve compression performance, based on provided data samples. Now the synergy with Managed Compression is apparent: Each registered use case is monitored, sampled, periodically re-trained, and receives new configs when they prove beneficial. The decompression side continues to decode both old and new data without any change.&lt;/p&gt;
    &lt;p&gt;Runtime Adaptation: A compression config can include control points that read lightweight statistics at compression time (e.g., string repetition stats, run-length, histogram skew, delta variance) and choose the best branch of the Plan to go to next. Many technologies can be used, and textbook classifiers qualify. Control points handle bursts, outliers, and seasonal shifts without brute-force exploration: exploration is bounded, in order to maintain speed expectations. Taken branches are then recorded into the frame, and the decoder just executes the recorded path.&lt;/p&gt;
    &lt;p&gt;This gives the best of both worlds: dynamic behavior at compression time to handle variations and exceptions — without turning compression into an unbounded search problem — and with zero complexity added to the decoder.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Advantages of the Universal Decoder&lt;/head&gt;
    &lt;p&gt;OpenZL is capable of compressing a vast array of data formats, and they can all be decompressed with a single decompressor binary. Even when the compression configuration changes, the decoder does not. This may sound like operational minutiae, but it’s critical to OpenZL’s deployment success.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;One audited surface: Security and correctness reviews focus on a single binary with consistent invariants, fuzzing, and hardening; there’s no myriad of per-format tools that can drift apart.&lt;/item&gt;
      &lt;item&gt;Fleet-wide improvements: A decoder update (security or performance — SIMD kernels, memory bounds, scheduling) benefits every compressed file, even those that predate the change.&lt;/item&gt;
      &lt;item&gt;Operational clarity: Same binary, same CLI, same metrics and dashboards across datasets; patching and rollout are uneventful by design.&lt;/item&gt;
      &lt;item&gt;Continuous training: With one decoder and many compression plans, we can keep improving while the system is live. Train a plan offline, try it on a small slice, then roll it out like any other config change. Backward compatibility is built-in — old frames still decode while new frames get better.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In other words, it’s possible to afford domain-specific compression without fragmenting the ecosystem.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results With OpenZL&lt;/head&gt;
    &lt;p&gt;When OpenZL is able to understand and parse the file format, it is able to offer large improvements in compression ratio, while still providing fast compression and decompression speed. However, this is no magic bullet. When OpenZL doesn’t understand the input file format, it simply falls back to zstd.&lt;/p&gt;
    &lt;p&gt;OpenZL, through its offline training capabilities, is also able to offer a wide range of configurations in the tradeoff space of compression ratio, compression speed, and decompression speed. Unlike traditional compressors, which offer configuration by setting a compression level, OpenZL offers configuration by serializing the compressor graph. This allows an immense amount of flexibility to select diverse tradeoffs.&lt;/p&gt;
    &lt;p&gt;These results are based on datasets we’ve developed for our whitepaper. The datasets were chosen because they are highly structured and in a format that OpenZL supports. Every figure below is produced with scripts in the OpenZL repository so they can be reproduced, and the input data and logs from our runs have been uploaded to GitHub.&lt;/p&gt;
    &lt;p&gt;Note that data points connected by a line are pareto-optimal. All such points have the property that there is no point in the same dataset which beats them in both metrics.&lt;/p&gt;
    &lt;head rend="h3"&gt;When It’s Not Useful&lt;/head&gt;
    &lt;p&gt;OpenZL relies on a description of some structure to leverage its set of transforms. When there is no structure, there is no advantage. This is typically the case in pure text documents, such as enwik or dickens. In these cases, OpenZL falls back to zstd, offering essentially the same level of performance.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting Started With OpenZL&lt;/head&gt;
    &lt;p&gt;OpenZL’s selection of codecs is well-suited to compressing vector, tabular, or tree-structured data, and can be expected to perform well with numeric, string, or binary data. Common examples include timeseries datasets, ML tensors, and database tables. Keep in mind that we are bound by the limits of information theory, so the input needs to have some order that can be uncovered. As time goes on, we plan to incorporate additional codecs, as described in the next section.&lt;/p&gt;
    &lt;p&gt;If your data fits one of the above categories, then give it a try! Visit the OpenZL site and our Quick Start guide to get started.&lt;/p&gt;
    &lt;p&gt;If you want to dive into the code, check out the GitHub repository for source, documentation, and examples. We welcome contributions and feedback from the community!&lt;/p&gt;
    &lt;head rend="h2"&gt;Where We’re Going&lt;/head&gt;
    &lt;p&gt;OpenZL’s general direction is set: make it easier to expose structures, and exploit it with automated compression plans for evolving data.&lt;/p&gt;
    &lt;p&gt;Next up: We’re extending the transform library for time-series and grid-shaped data, improving performance of codecs, and enabling the trainer to find better compression plans faster. We also are actively working to extend SDDL to describe nested data formats more flexibly. Finally, the automated compressor explorer is getting better at proposing safe, testable changes to a compression plan within a specified budget.&lt;/p&gt;
    &lt;p&gt;Where the community can help: If you have a format or a dataset with obvious structure, try compressing it with an OpenZL prebuilt Plan. If it’s promising, try generating a new plan with the trainer or customizing it with our documentation to improve it. If it’s a format that the public might want, send it to us in a PR.&lt;/p&gt;
    &lt;p&gt;You can also contribute to the OpenZL core. If you have a knack for optimizing C/C++, help us speed up the engine or add transforms to cover new data formats. If your super power is reliability, the project would surely benefit from more validation rules and resource caps. And if you care about benchmarks, add your dataset to the harness so others can reproduce your results.&lt;/p&gt;
    &lt;p&gt;How to engage: Open an issue on the GitHub issue board. If you have a use-case for which you would expect OpenZL to do better, provide a few small samples, so that we can analyze them together. You may also contribute to codec optimizations, and propose new graphs, parsers or control points. All these topics do not impact the universality of the decoder.&lt;/p&gt;
    &lt;p&gt;We believe OpenZL opens up a new universe of possibilities to the data compression field, and we’re excited to see what the open source community will do with it!&lt;/p&gt;
    &lt;p&gt;To learn more about Meta Open Source, visit our website, subscribe to our YouTube channel, or follow us on Facebook, Threads, X, Bluesky and LinkedIn.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://engineering.fb.com/2025/10/06/developer-tools/openzl-open-source-format-aware-compression-framework/"/><published>2025-10-06T16:01:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45493358</id><title>Ladybird passes the Apple 90% threshold on web-platform-tests</title><updated>2025-10-07T13:02:29.459720+00:00</updated><content>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://twitter.com/awesomekling/status/1974781722953953601"/><published>2025-10-06T16:52:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45494558</id><title>Apps SDK</title><updated>2025-10-07T13:02:29.308753+00:00</updated><content>&lt;doc fingerprint="9dca97fe33d1af9f"&gt;
  &lt;main&gt;
    &lt;p&gt;Our framework to build apps for ChatGPT.&lt;/p&gt;
    &lt;p&gt;Design components and conversational flows that feel native to ChatGPT.&lt;/p&gt;
    &lt;p&gt;Build apps that meet our quality, safety, and policy standards.&lt;/p&gt;
    &lt;p&gt;Identify and prioritize Apps SDK use cases.&lt;/p&gt;
    &lt;p&gt;Create and configure an MCP server.&lt;/p&gt;
    &lt;p&gt;Learn how to deploy your MCP server&lt;/p&gt;
    &lt;p&gt;Improve discovery and behavior with rich metadata.&lt;/p&gt;
    &lt;p&gt;Security and privacy considerations for Apps SDK.&lt;/p&gt;
    &lt;p&gt;Troubleshoot issues in Apps SDK apps.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://developers.openai.com/apps-sdk/"/><published>2025-10-06T18:27:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45496533</id><title>CodeMender: an AI agent for code security</title><updated>2025-10-07T13:02:28.974925+00:00</updated><content>&lt;doc fingerprint="b750e3f46eb396bc"&gt;
  &lt;main&gt;
    &lt;p&gt;Responsibility &amp;amp; Safety&lt;/p&gt;
    &lt;head rend="h1"&gt;Introducing CodeMender: an AI agent for code security&lt;/head&gt;
    &lt;p&gt;Using advanced AI to fix critical software vulnerabilities&lt;/p&gt;
    &lt;p&gt;Today, we’re sharing early results from our research on CodeMender, a new AI-powered agent that improves code security automatically.&lt;/p&gt;
    &lt;p&gt;Software vulnerabilities are notoriously difficult and time-consuming for developers to find and fix, even with traditional, automated methods like fuzzing. Our AI-based efforts like Big Sleep and OSS-Fuzz have demonstrated AI’s ability to find new zero-day vulnerabilities in well-tested software. As we achieve more breakthroughs in AI-powered vulnerability discovery, it will become increasingly difficult for humans alone to keep up.&lt;/p&gt;
    &lt;p&gt;CodeMender helps solve this problem by taking a comprehensive approach to code security that’s both reactive, instantly patching new vulnerabilities, and proactive, rewriting and securing existing code and eliminating entire classes of vulnerabilities in the process. Over the past six months that we’ve been building CodeMender, we have already upstreamed 72 security fixes to open source projects, including some as large as 4.5 million lines of code.&lt;/p&gt;
    &lt;p&gt;By automatically creating and applying high-quality security patches, CodeMender’s AI-powered agent helps developers and maintainers focus on what they do best — building good software.&lt;/p&gt;
    &lt;head rend="h2"&gt;CodeMender in action&lt;/head&gt;
    &lt;p&gt;CodeMender operates by leveraging the thinking capabilities of recent Gemini Deep Think models to produce an autonomous agent capable of debugging and fixing complex vulnerabilities.&lt;/p&gt;
    &lt;p&gt;To do this, the CodeMender agent is equipped with robust tools that let it reason about code before making changes, and automatically validate those changes to make sure they’re correct and don’t cause regressions.&lt;/p&gt;
    &lt;p&gt;While large language models are rapidly improving, mistakes in code security could be costly. CodeMender’s automatic validation process ensures that code changes are correct across many dimensions by only surfacing for human review high-quality patches that, for example, fix the root cause of the issue, are functionally correct, cause no regressions and follow style guidelines.&lt;/p&gt;
    &lt;p&gt;As part of our research, we also developed new techniques and tools that let CodeMender reason about code and validate changes more effectively. This includes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Advanced program analysis: We developed tools based on advanced program analysis that include static analysis, dynamic analysis, differential testing, fuzzing and SMT solvers. Using these tools to systematically scrutinize code patterns, control flow and data flow, CodeMender can better identify the root causes of security flaws and architectural weaknesses.&lt;/item&gt;
      &lt;item&gt;Multi-agent systems: We developed special-purpose agents that enable CodeMender to tackle specific aspects of an underlying problem. For example, CodeMender uses a large language model-based critique tool that highlights the differences between the original and modified code in order to verify that the proposed changes do not introduce regressions, and self-correct as needed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Fixing vulnerabilities&lt;/head&gt;
    &lt;p&gt;To effectively patch a vulnerability, and prevent it from re-emerging, Code Mender uses a debugger, source code browser, and other tools to pinpoint root causes and devise patches. We have added two examples of CodeMender patching vulnerabilities in the video carousel below.&lt;/p&gt;
    &lt;p&gt;Example #1: Identifying the root cause of a vulnerability&lt;/p&gt;
    &lt;p&gt;Here’s a snippet of the agent's reasoning about the root cause for a CodeMender-generated patch, after analyzing the results of debugger output and a code search tool.&lt;/p&gt;
    &lt;p&gt;Although the final patch in this example only changed a few lines of code, the root cause of the vulnerability was not immediately clear. In this case, the crash report showed a heap buffer overflow, but the actual problem was elsewhere — an incorrect stack management of Extensible Markup Language (XML) elements during parsing.&lt;/p&gt;
    &lt;p&gt;Example #2: Agent is able to create non-trivial patches&lt;/p&gt;
    &lt;p&gt;In this example, the CodeMender agent was able to come up with a non-trivial patch that deals with a complex object lifetime issue.&lt;/p&gt;
    &lt;p&gt;The agent was not only able to figure out the root cause of the vulnerability, but was also able to modify a completely custom system for generating C code within the project.&lt;/p&gt;
    &lt;head rend="h2"&gt;Proactively rewriting existing code for better security&lt;/head&gt;
    &lt;p&gt;We also designed CodeMender to proactively rewrite existing code to use more secure data structures and APIs.&lt;/p&gt;
    &lt;p&gt;For example, we deployed CodeMender to apply -fbounds-safety annotations to parts of a widely used image compression library called libwebp. When -fbounds-safety annotations are applied, the compiler adds bounds checks to the code to prevent an attacker from exploiting a buffer overflow or underflow to execute arbitrary code.&lt;/p&gt;
    &lt;p&gt;A few years ago, a heap buffer overflow vulnerability in libwebp (CVE-2023-4863) was used by a threat actor as part of a zero-click iOS exploit. With -fbounds-safety annotations, this vulnerability, along with most other buffer overflows in the project where we've applied annotations, would’ve been rendered unexploitable forever.&lt;/p&gt;
    &lt;p&gt;In the video carousel below we show examples of the agent’s decision-making process, including the validation steps.&lt;/p&gt;
    &lt;p&gt;Example #1: Agent’s reasoning steps&lt;/p&gt;
    &lt;p&gt;In this example, the CodeMender agent is asked to address the following -fbounds-safety error on bit_depths pointer:&lt;/p&gt;
    &lt;p&gt;Example #2: Agent automatically corrects errors and test failures&lt;/p&gt;
    &lt;p&gt;Another of CodeMender’s key features is its ability to automatically correct new errors and any test failures that arise from its own annotations. Here is an example of the agent recovering from a compilation error.&lt;/p&gt;
    &lt;p&gt;Example #3: Agent validates the changes&lt;/p&gt;
    &lt;p&gt;In this example, the CodeMender agent modifies a function and then uses the LLM judge tool configured for functional equivalence to verify that the functionality remains intact. When the tool detects a failure, the agent self-corrects based on the LLM judge's feedback.&lt;/p&gt;
    &lt;head rend="h2"&gt;Making software secure for everyone&lt;/head&gt;
    &lt;p&gt;While our early results with CodeMender are promising, we’re taking a cautious approach, focusing on reliability. Currently, all patches generated by CodeMender are reviewed by human researchers before they’re submitted upstream.&lt;/p&gt;
    &lt;p&gt;Using CodeMender, we've already begun submitting patches to various critical open-source libraries, many of which have already been accepted and upstreamed. We’re gradually ramping up this process to ensure quality and systematically address feedback from the open-source community.&lt;/p&gt;
    &lt;p&gt;We’ll also be gradually reaching out to interested maintainers of critical open source projects with CodeMender-generated patches. By iterating on feedback from this process, we hope to release CodeMender as a tool that can be used by all software developers to keep their codebases secure.&lt;/p&gt;
    &lt;p&gt;We will have a number of techniques and results to share, which we intend to publish as technical papers and reports in the coming months. With CodeMender, we've only just begun to explore AI’s incredible potential to enhance software security for everyone.&lt;/p&gt;
    &lt;p&gt;Acknowledgements&lt;/p&gt;
    &lt;p&gt;Credits (listed in alphabetical order):&lt;/p&gt;
    &lt;p&gt;Alex Rebert, Arman Hasanzadeh, Carlo Lemos, Charles Sutton, Dongge Liu, Gogul Balakrishnan, Hiep Chu, James Zern, Koushik Sen, Lihao Liang, Max Shavrick, Oliver Chang and Petros Maniatis.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://deepmind.google/discover/blog/introducing-codemender-an-ai-agent-for-code-security/"/><published>2025-10-06T21:28:56+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45497027</id><title>RediShell: Critical remote code execution vulnerability in Redis</title><updated>2025-10-07T13:02:28.710504+00:00</updated><content>&lt;doc fingerprint="3f7819f38f20f501"&gt;
  &lt;main&gt;
    &lt;p&gt;Wiz Research has uncovered a critical Remote Code Execution (RCE) vulnerability, CVE-2025-49844 which we've dubbed #RediShell, in the widely used Redis in-memory data structure store. The vulnerability has been assigned a CVSS score of 10.0 - the highest possible severity.&lt;/p&gt;
    &lt;p&gt;The vulnerability exploits a Use-After-Free (UAF) memory corruption bug that has existed for approximately 13 years in the Redis source code. This flaw allows a post auth attacker to send a specially crafted malicious Lua script (a feature supported by default in Redis) to escape from the Lua sandbox and achieve arbitrary native code execution on the Redis host. This grants an attacker full access to the host system, enabling them to exfiltrate, wipe, or encrypt sensitive data, hijack resources, and facilitate lateral movement within cloud environments.&lt;/p&gt;
    &lt;p&gt;Given that Redis is used in an estimated 75% of cloud environments, the potential impact is extensive. Organizations are strongly urged to patch instances immediately by prioritizing those that are exposed to the internet.&lt;/p&gt;
    &lt;p&gt;On October 3, Redis released a security advisory along with a patched version of Redis. We extend our gratitude to the entire Redis team for their collaboration throughout the disclosure process. We greatly appreciate their transparency, responsiveness, and partnership during this engagement.&lt;/p&gt;
    &lt;p&gt;In this post, we will provide a high-level overview of our discovery and its implications. Given the prevalence and sensitivity of this vulnerability, we will defer some of the technical details to a future installment, omitting exploit information for now to allow impacted organizations sufficient time to address the vulnerability.&lt;/p&gt;
    &lt;p&gt;Organizations utilizing Redis are strongly encouraged to update their Redis instances to the latest version immediately.&lt;/p&gt;
    &lt;p&gt;Vulnerability Meets Ubiquity: The Redis Risk Multiplier&lt;/p&gt;
    &lt;p&gt;The newly disclosed RediShell (CVE-2025-49844) vulnerability in Redis has been assigned a CVSS score of 10.0 - a rating rarely seen, with only around 300 vulnerabilities receiving it in the past year. It’s also the first Redis vulnerability to be rated as critical. The score reflects not just the technical severity of remote code execution, but also how Redis is commonly used and deployed. Redis is widely used in cloud environments for caching, session management, and pub/sub messaging. While Redis has had a strong security history, the combination of this flaw and common deployment practices significantly increases its potential impact.&lt;/p&gt;
    &lt;p&gt;Scope&lt;/p&gt;
    &lt;p&gt;Wiz Research discovered a Remote Code Execution vulnerability CVE-2025-49844 affecting the widely used Redis database. The vulnerability is a Use-After-Free (UAF) memory corruption that allows an attacker to send a malicious Lua script that leads to arbitrary code execution outside Redis’s Lua interpreter sandbox, gaining access to the host.&lt;/p&gt;
    &lt;p&gt;The urgency with which you should address this vulnerability depends on how Redis was installed and its exposure level.&lt;/p&gt;
    &lt;p&gt;Exposure Analysis&lt;/p&gt;
    &lt;p&gt;Our analysis across cloud environments revealed the extensive scope of this vulnerability:&lt;/p&gt;
    &lt;p&gt;Approximately 330,000 Redis instances are exposed to the internet at the time of this blog post&lt;/p&gt;
    &lt;p&gt;About 60,000 instances have no authentication configured&lt;/p&gt;
    &lt;p&gt;57% of cloud environments install Redis as container images, many without proper security hardening&lt;/p&gt;
    &lt;p&gt;The official Redis container, by default, does not require authentication. Our analysis shows that 57% of cloud environments install Redis as an image. If not installed carefully, these instances may lack authentication entirely. The combination of no authentication and exposure to the internet is highly dangerous, allowing anyone to query the Redis instance and, specifically, send Lua scripts (which are enabled by default). This enables attackers to exploit the vulnerability and achieve RCE within the environment.&lt;/p&gt;
    &lt;p&gt;High Risk - Internal Network Exposure:&lt;/p&gt;
    &lt;p&gt;More Redis instances are exposed to internal networks where authentication may not be prioritized, allowing any host in the local network to connect to the database server. An attacker with a foothold in the cloud environment could gain access to sensitive data and exploit the vulnerability to run arbitrary code for lateral movement into sensitive networks.&lt;/p&gt;
    &lt;p&gt;Attack Flow and Impact&lt;/p&gt;
    &lt;p&gt;The attack sequence demonstrates how an attacker can exploit RediShell (CVE-2025-49844) to achieve comprehensive system compromise:&lt;/p&gt;
    &lt;p&gt;Initial Exploitation&lt;/p&gt;
    &lt;p&gt;Attacker sends a malicious Lua script to exploit the use-after-free vulnerability&lt;/p&gt;
    &lt;p&gt;Sandbox Escape&lt;/p&gt;
    &lt;p&gt;Script escapes the Lua sandbox and achieves arbitrary code execution&lt;/p&gt;
    &lt;p&gt;Establishes reverse shell for persistent access&lt;/p&gt;
    &lt;p&gt;System Compromise&lt;/p&gt;
    &lt;p&gt;Steals credentials (.ssh keys, IAM tokens, certificates)&lt;/p&gt;
    &lt;p&gt;Installs malware or crypto miners&lt;/p&gt;
    &lt;p&gt;Exfiltrates sensitive data from Redis and host&lt;/p&gt;
    &lt;p&gt;Lateral Movement&lt;/p&gt;
    &lt;p&gt;Uses stolen IAM tokens to access other cloud services&lt;/p&gt;
    &lt;p&gt;Escalates privileges and moves to additional systems&lt;/p&gt;
    &lt;p&gt;The Result: Host Remote Code Execution&lt;/p&gt;
    &lt;p&gt;**We recommend that all Redis users upgrade their instances immediately, as this vulnerability poses a significant risk.**&lt;/p&gt;
    &lt;p&gt;Disclosure Timeline&lt;/p&gt;
    &lt;p&gt;May 16, 2025: Initial vulnerability report sent to Redis in Pwn2Own Berlin.&lt;/p&gt;
    &lt;p&gt;Oct 3, 2025: Redis publishes the security bulletin and assigned CVE-2025-49844.&lt;/p&gt;
    &lt;p&gt;Oct 6, 2025: Wiz Research publishes this blog post.&lt;/p&gt;
    &lt;p&gt;Recommended Actions&lt;/p&gt;
    &lt;p&gt;Update Redis Immediately: Upgrade to the latest patched version. Prioritize any internet-exposed or unauthenticated instances.&lt;/p&gt;
    &lt;p&gt;Security Hardening:&lt;/p&gt;
    &lt;p&gt;Enable Redis Authentication: Use the requirepass directive.&lt;/p&gt;
    &lt;p&gt;Disable Unnecessary Commands: This includes Lua scripting if it's not being used. You can achieve this by revoking user scripting permissions via Redis ACLs or by disabling scripting commands.&lt;/p&gt;
    &lt;p&gt;Run with Minimal Privileges: Operate Redis using a non-root user account.&lt;/p&gt;
    &lt;p&gt;Enable Logging and Monitoring: Activate Redis logging and monitoring to track activity and identify potential issues.&lt;/p&gt;
    &lt;p&gt;Restrict Redis Access: Limit access to authorized networks only.&lt;/p&gt;
    &lt;p&gt;How Wiz can help&lt;/p&gt;
    &lt;p&gt;Wiz customers can use the pre-built query and advisory in the Wiz Threat Center to assess the risk in their environment.&lt;/p&gt;
    &lt;p&gt;Wiz identifies both internal and publicly exposed Redis instances in your environment affected by CVE-2025-49844, and alerts you to instances that have been misconfigured to allow unauthenticated access or use weak or default passwords.&lt;/p&gt;
    &lt;p&gt;Conclusion: treat with urgency&lt;/p&gt;
    &lt;p&gt;RediShell (CVE-2025-49844) represents a critical security vulnerability that affects all Redis versions due to its root cause in the underlying Lua interpreter. With hundreds of thousands of exposed instances worldwide, this vulnerability poses a significant threat to organizations across all industries.&lt;/p&gt;
    &lt;p&gt;The combination of widespread deployment, default insecure configurations, and the severity of the vulnerability creates an urgent need for immediate remediation. Organizations must prioritize updating their Redis instances and implementing proper security controls to protect against exploitation.&lt;/p&gt;
    &lt;p&gt;This vulnerability also highlights how deeply today’s cloud environments depend on open-source technologies like Redis. That shared reliance is what motivated us, alongside other cloud providers, to launchZeroDay.Cloud, a community-driven effort to identify and responsibly disclose critical zero-day vulnerabilities in the open-source software powering the cloud. Redis, along with other core open-source technologies, is part of that effort.&lt;/p&gt;
    &lt;p&gt;Wiz Research will continue to monitor the threat landscape and provide additional technical details in future publications so that organizations have time to implement necessary security measures.&lt;/p&gt;
    &lt;p&gt;For technical questions about this research, please contact: research@wiz.io&lt;/p&gt;
    &lt;p&gt;---&lt;/p&gt;
    &lt;p&gt;This research was conducted by the Wiz Research team. We thank the Redis security team for their professional handling of this disclosure and their commitment to user security.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.wiz.io/blog/wiz-research-redis-rce-cve-2025-49844"/><published>2025-10-06T22:30:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45497384</id><title>Microsoft is plugging more holes that let you use Windows 11 without MS account</title><updated>2025-10-07T13:02:28.490388+00:00</updated><content>&lt;doc fingerprint="2798ea1532e6f0d7"&gt;
  &lt;main&gt;
    &lt;p&gt;Microsoft is cracking down on bypass methods that let Windows 11 installs use a local account, and avoid an internet requirement during the setup process. In a new Windows 11 test build released today, Microsoft says it’s removing known workarounds for creating local accounts as they can apparently cause issues during the setup process.&lt;/p&gt;
    &lt;head rend="h1"&gt;Microsoft is plugging more holes that let you use Windows 11 without an online account&lt;/head&gt;
    &lt;p&gt;Microsoft really doesn’t want you creating a local account on Windows 11.&lt;/p&gt;
    &lt;p&gt;Microsoft really doesn’t want you creating a local account on Windows 11.&lt;/p&gt;
    &lt;p&gt;“We are removing known mechanisms for creating a local account in the Windows Setup experience (OOBE),” says Amanda Langowski, the lead for the Windows Insider Program. “While these mechanisms were often used to bypass Microsoft account setup, they also inadvertently skip critical setup screens, potentially causing users to exit OOBE with a device that is not fully configured for use.”&lt;/p&gt;
    &lt;p&gt;The changes mean Windows 11 users will need to complete the OOBE screens with an internet connection and Microsoft account in future versions of the OS.&lt;/p&gt;
    &lt;p&gt;Microsoft already removed the “bypassnro” workaround earlier this year, and today’s changes also disable the “start ms-cxh:localonly” command that Windows 11 users discovered after Microsoft’s previous changes. Using this command now resets the OOBE process and it fails to bypass the Microsoft account requirement.&lt;/p&gt;
    &lt;p&gt;These workarounds have been widely used to avoid a Microsoft account or internet access on Windows 11 Pro and Home installs in recent years. They’re easy to use, so you don’t have to create a custom unattended answer file to force Windows 11 to create a local account.&lt;/p&gt;
    &lt;p&gt;A lot of Windows users simply want to avoid using a Microsoft account or just want to customize the user folder name that Windows 11 creates from the email address of a Microsoft account. Thankfully, Microsoft is now adding a way to name your default user folder during the setup process, although you’ll need to use a command to get a custom folder name. Hopefully this will eventually become a simple option during the setup process.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theverge.com/news/793579/microsoft-windows-11-local-account-bypass-workaround-changes"/><published>2025-10-06T23:15:26+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45497624</id><title>The least amount of CSS for a decent looking site (2023)</title><updated>2025-10-07T13:02:28.401384+00:00</updated><content>&lt;doc fingerprint="8c8abb396bb90f9d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The least amount of CSS for a decent looking site&lt;/head&gt;
    &lt;p&gt;Summary: People often over-engineer solutions, and it leads to them running into problems with their CSS. In this article, we'll take a look at the least amount of CSS that you need to make a decent looking page.&lt;/p&gt;
    &lt;p&gt;The fun part of making a website is that if you write your HTML and nothing else, you have a responsive website.&lt;/p&gt;
    &lt;p&gt;Granted, if you have images they can cause some overflow issues.&lt;/p&gt;
    &lt;p&gt;So we can start things off by fixing that:&lt;/p&gt;
    &lt;code&gt;img {
  max-width: 100%;
  display: block;
}&lt;/code&gt;
    &lt;p&gt;It’s possible you have videos or SVGs that are also causing problems (less likely with SVGs though), so if you need, you can expand upon this a little bit.&lt;/p&gt;
    &lt;code&gt;img,
svg,
video {
  max-width: 100%;
  display: block;
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Improving the typography&lt;/head&gt;
    &lt;p&gt;The first thing we can do is change the font family since the default is never very exciting.&lt;/p&gt;
    &lt;p&gt;We’ll just use a basic &lt;code&gt;system-ui&lt;/code&gt; for this example. It has pretty good support these days, and looks good on every system without having to worry about loading in any extra fonts.&lt;/p&gt;
    &lt;p&gt;In general, the font-size is a little small as well, so we can bump it up, and the default line-height is always a bit tight, so anything within the 1.5 to 1.7 range should do:&lt;/p&gt;
    &lt;code&gt;body {
  font-family: System UI;
  font-size: 1.25rem;
  line-height: 1.5;
}&lt;/code&gt;
    &lt;p&gt;Though not perfect, this is already a huge improvement over the regular defaults.&lt;/p&gt;
    &lt;head rend="h2"&gt;Adding Dark Mode Support&lt;/head&gt;
    &lt;p&gt;Many people love dark mode, so let’s enable it based on a user’s system preferences.&lt;/p&gt;
    &lt;p&gt;We can do this by using the &lt;code&gt;color-scheme&lt;/code&gt; property:&lt;/p&gt;
    &lt;code&gt;html {
  color-scheme: light dark;
}&lt;/code&gt;
    &lt;p&gt;This will set the user-agent-styles to either a light or dark theme, based on the users system preferences.&lt;/p&gt;
    &lt;p&gt;If you’d prefer, we can do this without CSS as well!&lt;/p&gt;
    &lt;code&gt;&amp;lt;html lang="en" color-scheme="light dark"&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;
    &lt;head rend="h3"&gt;A small note on following the system preferences&lt;/head&gt;
    &lt;p&gt;While this is really handy, it is a best practice to allow users to manually toggle the color-scheme as well.&lt;/p&gt;
    &lt;p&gt;Some people prefer a dark system theme, but light website themes, and vice-versa.&lt;/p&gt;
    &lt;head rend="h2"&gt;Restraining Content Width&lt;/head&gt;
    &lt;p&gt;Line-length is one of the most important things when it comes to the readability of text.&lt;/p&gt;
    &lt;p&gt;We generally want to try and fall somewhere in the 45-90 characters per line range (for body text, not headlines).&lt;/p&gt;
    &lt;p&gt;To make the website more readable, we’ll limit the content width using a &lt;code&gt;main&lt;/code&gt; element and some CSS magic:&lt;/p&gt;
    &lt;code&gt;main {
  max-width: min(70ch, 100% - 4rem);
  margin-inline: auto;
}&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;min()&lt;/code&gt; function here will pick whatever is smallest, either &lt;code&gt;70ch&lt;/code&gt; or &lt;code&gt;100% - 4rem&lt;/code&gt;. Because we are inside a &lt;code&gt;min()&lt;/code&gt; function, we don’t need to use a &lt;code&gt;calc()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Whatever the output from that min() function, the width is less than 100%, so the page will be stuck to the left side of the viewport.&lt;/p&gt;
    &lt;p&gt;We can then use margin-inline: auto to center it, as this acts on the margins on the inline axis, so in any horizontal writing modes, that means both the margin-left and margin-right are auto.&lt;/p&gt;
    &lt;p&gt;You might want to switch out the main selector for a .container or .wrapper so you can have more control over where you use it.&lt;/p&gt;
    &lt;p&gt;And with that, our final CSS file looks like this:&lt;/p&gt;
    &lt;code&gt;html {
  color-scheme: light dark;
}

body {
  font-family: system-ui;
  font-size: 1.25rem;
  line-height: 1.5;
}

img,
svg,
video {
  max-width: 100%;
  display: block;
}

main {
  max-width: min(70ch, 100% - 4rem);
  margin-inline: auto;
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Build on top of this&lt;/head&gt;
    &lt;p&gt;This is just a quick start to get things off the ground, though it could be used for a very simple page as well.&lt;/p&gt;
    &lt;p&gt;For the most part, though, you’ll probably want to build on top of this, but it should be able to act as a nice jumping off point!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://thecascade.dev/article/least-amount-of-css/"/><published>2025-10-06T23:47:24+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45499170</id><title>Pdoc – Generate API documentation for Python projects</title><updated>2025-10-07T13:02:28.240776+00:00</updated><content>&lt;doc fingerprint="16c91461fc9ed2c5"&gt;
  &lt;main&gt;&lt;p&gt;&lt;code&gt;pdoc&lt;/code&gt; auto-generates API documentation that follows your project's Python module hierarchy.
                It requires no configuration, has first-class support for type annotations,
                cross-links between identifiers, comes with an integrated live-reloading web server,
                and understands numpydoc or Google-style docstrings.
            &lt;/p&gt;&lt;head rend="h2"&gt;Installation&lt;/head&gt;&lt;p&gt;Latest Release: 15.0.4&lt;/p&gt; Documentation Changelog PyPI GitHub &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://pdoc.dev/"/><published>2025-10-07T03:40:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45499281</id><title>California law forces Netflix, Hulu to turn down ad volumes</title><updated>2025-10-07T13:02:28.163961+00:00</updated><content/><link href="https://www.politico.com/news/2025/10/06/dial-it-down-california-forces-netflix-hulu-to-lower-ad-volume-00595663"/><published>2025-10-07T04:03:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45500485</id><title>Deloitte to refund the Australian government after using AI in $440k report</title><updated>2025-10-07T13:02:28.041133+00:00</updated><content>&lt;doc fingerprint="b60d88152e1fdfd2"&gt;
  &lt;main&gt;
    &lt;p&gt;Deloitte will provide a partial refund to the federal government over a $440,000 report that contained several errors, after admitting it used generative artificial intelligence to help produce it.&lt;/p&gt;
    &lt;p&gt;The Department of Employment and Workplace Relations (DEWR) confirmed Deloitte would repay the final instalment under its contract, which will be made public after the transaction is finalised. It comes as one Labor senator accused the consultancy firm of having a “human intelligence problem”.&lt;/p&gt;
    &lt;p&gt;Deloitte was commissioned by the department to review the targeted compliance framework and its IT system, used to automate penalties in the welfare system if mutual obligations weren’t met by jobseekers, in December 2024.&lt;/p&gt;
    &lt;p&gt;Sign up: AU Breaking News email&lt;/p&gt;
    &lt;p&gt;The subsequent report found widespread issues, including a lack of “traceability” between the rules of the framework and the legislation behind it, as well as “system defects”. It said an IT system was “driven by punitive assumptions of participant non-compliance”.&lt;/p&gt;
    &lt;p&gt;It was first published on 4 July. It was re-uploaded to the DEWR website on Friday, after the Australian Financial Review in August reported that multiple errors had been found, including nonexistent references and citations.&lt;/p&gt;
    &lt;p&gt;University of Sydney academic, Dr Christopher Rudge, who first highlighted the errors, said the report contained “hallucinations” where AI models may fill in gaps, misinterpret data, or try to guess answers.&lt;/p&gt;
    &lt;p&gt;“Instead of just substituting one hallucinated fake reference for a new ‘real’ reference, they’ve substituted the fake hallucinated references and in the new version, there’s like five, six or seven or eight in their place,” he said.&lt;/p&gt;
    &lt;p&gt;“So what that suggests is that the original claim made in the body of the report wasn’t based on any one particular evidentiary source.”&lt;/p&gt;
    &lt;p&gt;The updated review noted a “small number of corrections to references and footnotes”, but the department has said there have been no changes to the review’s recommendations.&lt;/p&gt;
    &lt;p&gt;“Deloitte conducted the independent assurance review and has confirmed some footnotes and references were incorrect,” a spokesperson for the department said.&lt;/p&gt;
    &lt;p&gt;“The substance of the independent review is retained, and there are no changes to the recommendations.”&lt;/p&gt;
    &lt;p&gt;In the updated version of the report, Deloitte added reference to the use of generative AI in its appendix. It states that a part of the report “included the use of a generative artificial intelligence (AI) large language model (Azure OpenAI GPT – 4o) based tool chain licensed by DEWR and hosted on DEWR’s Azure tenancy.”&lt;/p&gt;
    &lt;p&gt;Deloitte did not state that artificial intelligence was the reason behind the errors in its original report. It also stood by the original findings of the review.&lt;/p&gt;
    &lt;p&gt;“The updates made in no way impact or affect the substantive content, findings and recommendations in the report,” it stated in the amended version.&lt;/p&gt;
    &lt;p&gt;A spokesperson for Deloitte said “the matter has been resolved directly with the client”.&lt;/p&gt;
    &lt;p&gt;Rudge said that, despite his criticism, he hesitates to say the whole report should be “regarded as illegitimate”, because the conclusions concur with other widespread evidence.&lt;/p&gt;
    &lt;p&gt;Labor senator Deborah O’Neill, who was on a senate inquiry into the integrity of consulting firms, said it looked like “AI is being left to do the heavy lifting”.&lt;/p&gt;
    &lt;p&gt;“Deloitte has a human intelligence problem. This would be laughable if it wasn’t so lamentable. A partial refund looks like a partial apology for substandard work,” she said.&lt;/p&gt;
    &lt;p&gt;“Anyone looking to contract these firms should be asking exactly who is doing the work they are paying for, and having that expertise and no AI use verified.&lt;/p&gt;
    &lt;p&gt;“Perhaps instead of a big consulting firm, procurers would be better off signing up for a ChatGPT subscription.”&lt;/p&gt;
    &lt;p&gt;The AFR found several incorrect references in the original report, including nonexistent reports by professors at the University of Sydney and the Lund University in Sweden.&lt;/p&gt;
    &lt;p&gt;The paper also reported a made-up reference to a court decision in a robodebt case, Deanna Amato v Commonwealth. Deloitte wrote in its final report that the update “amend[ed] the summary of the Amato proceeding which contained errors”.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theguardian.com/australia-news/2025/oct/06/deloitte-to-pay-money-back-to-albanese-government-after-using-ai-in-440000-report"/><published>2025-10-07T07:51:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45501114</id><title>The Mondrian introduction to functional optics</title><updated>2025-10-07T13:02:27.966212+00:00</updated><content>&lt;doc fingerprint="13dc85e44d4ba5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Mondrian introduction to functional optics&lt;/head&gt;
    &lt;p&gt;In this post I’d like to try to discuss what functional optics are, without going too much into why they are so cool, and you should use them, or how they are implemented1 and should be used with a specific language and library.&lt;/p&gt;
    &lt;p&gt;I personally think that functional optics should be a really easy concept to grasp, but currently learning them is harder than it should be mostly due to library implementation details, quite obscure documentation and an exotic usage of weird symbols.&lt;/p&gt;
    &lt;p&gt;Since a picture is worth a thousand words, I will introduce and use a graphical notation to illustrate the concepts we will discuss.&lt;/p&gt;
    &lt;head rend="h2"&gt;Types and values&lt;/head&gt;
    &lt;p&gt;Let’s start introducing our graphical notation from its basic building blocks.&lt;/p&gt;
    &lt;p&gt;We can represent a type with a simple coloured rectangle&lt;/p&gt;
    &lt;p&gt;A value for a given type will be represented as a horizontal line spanning the width of the rectangle&lt;/p&gt;
    &lt;head rend="h2"&gt;Sums and products&lt;/head&gt;
    &lt;p&gt;When considering algebraic data types, we have two ways of combining types, using products and sums.&lt;/p&gt;
    &lt;p&gt;The product of two types &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; is a new type, which we will denote by &lt;code&gt;A*B&lt;/code&gt;, whose values are composed of a value of type &lt;code&gt;A&lt;/code&gt; and a value of type &lt;code&gt;B&lt;/code&gt;. An example of a product type is a tuple like &lt;code&gt;(Int, String)&lt;/code&gt; where each value is pair composed of an integer and a string.&lt;/p&gt;
    &lt;p&gt;Graphically we can represent a product type as two side by side rectangles&lt;/p&gt;
    &lt;p&gt;When it comes to values, we need to upgrade a little bit our graphical interpretation. Since a value in a product type is composed of values of its components, we will just represent it as piecewise horizontal line, composed by horizontal lines (possible at different heights) spanning its horizontal sub-rectangles.&lt;/p&gt;
    &lt;p&gt;On the other hand, the sum of two types is represented by two rectangles one on top of the other&lt;/p&gt;
    &lt;p&gt;A value of a sum type is a horizontal line spanning the width of the whole rectangle. If it is a horizontal line in the top rectangle, it means that we are selecting the first type, and we’re using one of its values.&lt;/p&gt;
    &lt;p&gt;If it is a horizontal line in the bottom rectangle, it means that we are selecting the second type and one of its values.&lt;/p&gt;
    &lt;p&gt;More generally, for any algebraic data type, we can represent it as a sum of products by stacking a series of rectangles one on top of the other, each one potentially divided horizontally in multiple sub-rectangles.&lt;/p&gt;
    &lt;p&gt;In general, we can continue to split any sub-rectangle horizontally or vertically (if you prefer a top-down point of view) or you can place two rectangles side by side or top to bottom.&lt;/p&gt;
    &lt;p&gt;A value of such a type is a piecewise horizontal line which can not cross a horizontal division.&lt;/p&gt;
    &lt;head rend="h2"&gt;Optics&lt;/head&gt;
    &lt;p&gt;Now that we have this graphical representation to represent data types, we can use it to discuss various kinds of optics.&lt;/p&gt;
    &lt;p&gt;In general, we can think of an optic as a way to select, given our graphical representation of a type, one (or more) rectangle inside a given rectangle representing a type. For example in the following picture we are selecting the rectangle with the red boundary inside the main rectangle representing a complex type.&lt;/p&gt;
    &lt;p&gt;If call the main type &lt;code&gt;A&lt;/code&gt; and the selected type &lt;code&gt;B&lt;/code&gt;, we will denote the optic selecting &lt;code&gt;B&lt;/code&gt; inside &lt;code&gt;A&lt;/code&gt; with &lt;code&gt;Optic A B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Before going into inspecting the various kinds of optics, let’s try to see if can can already derive some properties of optics just by looking at their graphical representation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Compositionality&lt;/head&gt;
    &lt;p&gt;One thing that we can notice is that optics compose really well. Suppose we have a type &lt;code&gt;A&lt;/code&gt; represented by the following diagram&lt;/p&gt;
    &lt;p&gt;We can first select a sub-rectangle identifying a type &lt;code&gt;B&lt;/code&gt; with an &lt;code&gt;Optic A B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Starting now with the type &lt;code&gt;B&lt;/code&gt; we can use an &lt;code&gt;Optic B C&lt;/code&gt; to select a type &lt;code&gt;C&lt;/code&gt; inside &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Using now the &lt;code&gt;Optic A B&lt;/code&gt; and the &lt;code&gt;Optic B C&lt;/code&gt; we just chose, we can compose them to obtain an &lt;code&gt;Optic A C&lt;/code&gt; which directly selects &lt;code&gt;C&lt;/code&gt; inside &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;This optic composition operation is actually associative and has an identity element, turning optics into a Category.&lt;/p&gt;
    &lt;p&gt;Let’s now start to have a look at some specific families of optics.&lt;/p&gt;
    &lt;head rend="h2"&gt;Iso&lt;/head&gt;
    &lt;p&gt;The simplest optic we can define for any type &lt;code&gt;A&lt;/code&gt; is the one that we can obtain by selecting the whole rectangle.&lt;/p&gt;
    &lt;p&gt;With such a selection we can see that for any value of the outer type &lt;code&gt;A&lt;/code&gt;, we actually have a value of the type identified by the red rectangle, which we will call &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;This means that, given an &lt;code&gt;Iso A B&lt;/code&gt;, we can actually define a function &lt;code&gt;view :: A -&amp;gt; B&lt;/code&gt; that for any value of &lt;code&gt;A&lt;/code&gt; gives us a value of &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;But in this special case also the converse holds! For any value of &lt;code&gt;B&lt;/code&gt;, since &lt;code&gt;B&lt;/code&gt; is actually &lt;code&gt;A&lt;/code&gt; itself, we have in fact a value of &lt;code&gt;A&lt;/code&gt;. This gives rise to a function &lt;code&gt;review :: B -&amp;gt; A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In fact &lt;code&gt;review . view = id_A&lt;/code&gt; and &lt;code&gt;view . review = id_B&lt;/code&gt; giving rise to a proper isomorphism.&lt;/p&gt;
    &lt;head rend="h2"&gt;Lens&lt;/head&gt;
    &lt;p&gt;In our graphical representation, a &lt;code&gt;Lens&lt;/code&gt; is a vertical slice of the main rectangle.&lt;/p&gt;
    &lt;p&gt;Any vertical slice cuts out a piece out of any horizontal line. In other terms, given a value of the type &lt;code&gt;A&lt;/code&gt; represented by the main rectangle, we have a way to obtain a value of type &lt;code&gt;B&lt;/code&gt; represented by our vertical slice. This means that also in this case we are able to define a function &lt;code&gt;view :: A -&amp;gt; B&lt;/code&gt; which allows us to focus from the main type to one of its component.&lt;/p&gt;
    &lt;p&gt;On the other hand, it’s not possible with &lt;code&gt;Lens&lt;/code&gt;es as it was with &lt;code&gt;Iso&lt;/code&gt;s to build back a value of type &lt;code&gt;A&lt;/code&gt; from a value of type &lt;code&gt;B&lt;/code&gt;, since a value of type &lt;code&gt;B&lt;/code&gt; is only a part of value of type &lt;code&gt;A&lt;/code&gt;. What is actually possible, though, is to update only the part included in the red rectangle of a value of type &lt;code&gt;A&lt;/code&gt;. In other terms, given a &lt;code&gt;Lens A B&lt;/code&gt;, we can define a function &lt;code&gt;set :: B -&amp;gt; A -&amp;gt; A&lt;/code&gt; which takes a value of type &lt;code&gt;B&lt;/code&gt; and a value of type &lt;code&gt;A&lt;/code&gt; and updates the section of the latter identified by the &lt;code&gt;Lens&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Having a look at the graphical representations of the &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions, we can convince ourselves that the following properties hold:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;If we &lt;code&gt;set&lt;/code&gt;a value and then we&lt;code&gt;view&lt;/code&gt;it, we must get back what we put in:&lt;code&gt;view (set b a) == b&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;If we &lt;code&gt;set&lt;/code&gt;what we get out of a&lt;code&gt;view&lt;/code&gt;, nothing changes:&lt;code&gt;set (view a) a == a&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Setting a value twice is the same thing as setting it once: &lt;code&gt;set b (set b a) == set b a&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Moreover, we can notice that composing two lenses with the operation described in the Compositionality section gives us back another lens. A vertical slice of a vertical slice is in fact still a vertical slice of the original rectangle. In other terms this means that &lt;code&gt;Lens&lt;/code&gt;es form a subcategory of the bigger category of &lt;code&gt;Optic&lt;/code&gt;s.&lt;/p&gt;
    &lt;p&gt;Composing adequately &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; we can also define a function &lt;code&gt;over :: (B -&amp;gt; B) -&amp;gt; A -&amp;gt; A&lt;/code&gt; as &lt;code&gt;over f a = set (f $ view a) a&lt;/code&gt;. This means that if we have a function &lt;code&gt;f :: B -&amp;gt; B&lt;/code&gt; which can transform values of type &lt;code&gt;B&lt;/code&gt;, we can use our lens to extract a &lt;code&gt;B&lt;/code&gt; from an &lt;code&gt;A&lt;/code&gt; via &lt;code&gt;view&lt;/code&gt;, use &lt;code&gt;f&lt;/code&gt; to transform the result, and eventually use &lt;code&gt;set&lt;/code&gt; to update the &lt;code&gt;B&lt;/code&gt; part inside the original &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Prism&lt;/head&gt;
    &lt;p&gt;If vertical slices are &lt;code&gt;Lens&lt;/code&gt;es, it is only natural to wonder what are horizontal slices. They correspond to &lt;code&gt;Prism&lt;/code&gt;s, and they are the dual concept of &lt;code&gt;Lens&lt;/code&gt;es. Where a &lt;code&gt;Lens&lt;/code&gt; represents a component in a product type, a &lt;code&gt;Prism&lt;/code&gt; represents a component in a sum type.&lt;/p&gt;
    &lt;p&gt;Looking at values, we can notice that a value in the main type could either be a value of the inner type or it could be completely outside of it. This implies that, given a &lt;code&gt;Prism A B&lt;/code&gt;, we can define a function &lt;code&gt;preview :: A -&amp;gt; Maybe B&lt;/code&gt; which, given a value &lt;code&gt;a :: A&lt;/code&gt; returns a &lt;code&gt;Just b&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; was inside the sub-rectangle identified by &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;Nothing&lt;/code&gt; otherwise.&lt;/p&gt;
    &lt;p&gt;On the other hard, since a &lt;code&gt;Prism&lt;/code&gt; constitutes a horizontal slice of the main rectangle, if we have a value of the sub-rectangle, we can always interpret it a value of the main rectangle. In other words, this means that for a &lt;code&gt;Prism A B&lt;/code&gt; we can always define a function &lt;code&gt;review :: B -&amp;gt; A&lt;/code&gt; constructing a value of type &lt;code&gt;A&lt;/code&gt; from a value of type &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Again, having a look at the graphical representation we can convince ourselves that the following properties hold for &lt;code&gt;Prism&lt;/code&gt;s:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;If we preview through a &lt;code&gt;Prism&lt;/code&gt;what we just built using the same&lt;code&gt;Prism&lt;/code&gt;, we will get a value back:&lt;code&gt;preview (review b) == Just b&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;If when we preview we get a &lt;code&gt;Just&lt;/code&gt;, then reviewing the result through the same&lt;code&gt;Prism&lt;/code&gt;will get us to the initial value:&lt;code&gt;preview s == Just a =&amp;gt; review a == s&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For a &lt;code&gt;Prism A B&lt;/code&gt; it is also possible to define a function &lt;code&gt;set :: B -&amp;gt; A -&amp;gt; A&lt;/code&gt; as &lt;code&gt;set = flip $ const review&lt;/code&gt;. This means that, being able to construct an &lt;code&gt;A&lt;/code&gt; from a &lt;code&gt;B&lt;/code&gt;, we are able to substitute a &lt;code&gt;B&lt;/code&gt; inside an &lt;code&gt;A&lt;/code&gt; just by discarding the initial &lt;code&gt;A&lt;/code&gt; and building a new one from &lt;code&gt;B&lt;/code&gt;. Graphically, we can interpret this as using the &lt;code&gt;B&lt;/code&gt; value in the inner rectangle to build an &lt;code&gt;A&lt;/code&gt; value, forgetting about the initial &lt;code&gt;A&lt;/code&gt; value.&lt;/p&gt;
    &lt;p&gt;At this point we can also define another function &lt;code&gt;over :: (B -&amp;gt; B) -&amp;gt; A -&amp;gt; A&lt;/code&gt; which allows us to update the &lt;code&gt;B&lt;/code&gt; part inside an &lt;code&gt;A&lt;/code&gt;. We can define it as &lt;code&gt;over f a = maybe a review (f &amp;lt;$&amp;gt; preview a)&lt;/code&gt;. In words, we use &lt;code&gt;preview&lt;/code&gt; to get a &lt;code&gt;Maybe B&lt;/code&gt; and we map &lt;code&gt;f&lt;/code&gt; over it to get another &lt;code&gt;Maybe B&lt;/code&gt;; if we have a value &lt;code&gt;Just b&lt;/code&gt;, then we can use it to construct an &lt;code&gt;A&lt;/code&gt; using &lt;code&gt;review&lt;/code&gt;; on the other hand, if we ended up with a &lt;code&gt;Nothing&lt;/code&gt;, we just keep the initial &lt;code&gt;A&lt;/code&gt;. Graphically, we can interpret this as follows: if the &lt;code&gt;A&lt;/code&gt; value is inside the &lt;code&gt;B&lt;/code&gt; sub-rectangle, we apply &lt;code&gt;f&lt;/code&gt; and then we use the result to build a new &lt;code&gt;A&lt;/code&gt; value; if the value is not in &lt;code&gt;B&lt;/code&gt;, we just leave it alone.&lt;/p&gt;
    &lt;p&gt;Looking at the graphical interpretation, it’s easy to convince ourselves that the composition of two &lt;code&gt;Prism&lt;/code&gt;s is still a &lt;code&gt;Prism&lt;/code&gt;, given that a horizontal slice of a horizontal slice is still a horizontal slice of the main rectangle. In other terms, also &lt;code&gt;Prism&lt;/code&gt;s form a subcategory of the category of &lt;code&gt;Optic&lt;/code&gt;s.&lt;/p&gt;
    &lt;head rend="h2"&gt;Affine traversals&lt;/head&gt;
    &lt;p&gt;Now that we discussed &lt;code&gt;Lens&lt;/code&gt;es and &lt;code&gt;Prism&lt;/code&gt;s, one natural question which might arise is what happens when we try to compose a &lt;code&gt;Lens&lt;/code&gt; and a &lt;code&gt;Prism&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In the picture above we see a &lt;code&gt;Lens&lt;/code&gt; (the blue rectangle) composed with a &lt;code&gt;Prism&lt;/code&gt; (the red rectangle). What we get out of the composition is the lower right rectangle, which is neither a &lt;code&gt;Lens&lt;/code&gt;, nor a &lt;code&gt;Prism&lt;/code&gt;, with respect to the main rectangle. It’s just a single inner rectangle.&lt;/p&gt;
    &lt;p&gt;On the other hand, if you think about it, every inner rectangle of the main rectangle could be obtained by composing &lt;code&gt;Lens&lt;/code&gt;es and &lt;code&gt;Prism&lt;/code&gt;s.&lt;/p&gt;
    &lt;p&gt;An &lt;code&gt;Optic&lt;/code&gt; identifying an inner rectangle is called an &lt;code&gt;AffineTraversal&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Combining the intuitions we had for &lt;code&gt;Lens&lt;/code&gt;es and &lt;code&gt;Prism&lt;/code&gt;s, it’s actually possible to define functions &lt;code&gt;set :: B -&amp;gt; A -&amp;gt; A&lt;/code&gt; and &lt;code&gt;over :: (B -&amp;gt; B) -&amp;gt; A -&amp;gt; A&lt;/code&gt; also for &lt;code&gt;AffineTraversal&lt;/code&gt;s.&lt;/p&gt;
    &lt;p&gt;Moreover, the graphical representation suggests us that also &lt;code&gt;AffineTraversal&lt;/code&gt;s for a subcategory of &lt;code&gt;Optic&lt;/code&gt;s, since a sub-rectangle of a sub-rectangle is actually a sub-rectangle of the initial one.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why stop at one?&lt;/head&gt;
    &lt;p&gt;All the &lt;code&gt;Optic&lt;/code&gt;s that we discussed so far focus on a single sub-rectangle. But, if we want, we can consider also &lt;code&gt;Optic&lt;/code&gt;s which focus on multiple sub-rectangles at the same time.&lt;/p&gt;
    &lt;p&gt;We will denote by &lt;code&gt;Traversal A B&lt;/code&gt; the &lt;code&gt;Optic&lt;/code&gt;s which focus on multiple sub-rectangles of type &lt;code&gt;B&lt;/code&gt; inside a main rectangle of type &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;For &lt;code&gt;Traversal&lt;/code&gt;s we can still define &lt;code&gt;set :: B -&amp;gt; A -&amp;gt; A&lt;/code&gt; which replaces all the selected sub-rectangles of type &lt;code&gt;B&lt;/code&gt;, inside the main rectangle of type &lt;code&gt;A&lt;/code&gt;, with the same vale &lt;code&gt;b&lt;/code&gt; of type &lt;code&gt;B&lt;/code&gt;, to produce a new &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Similarly, we can define &lt;code&gt;over :: (B -&amp;gt; B) -&amp;gt; A -&amp;gt; A&lt;/code&gt; which applies a function to all the selected sub-rectangles of type &lt;code&gt;B&lt;/code&gt;, inside the main rectangle of type &lt;code&gt;A&lt;/code&gt;, to produce a new &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Another relevant function which makes sense to consider for &lt;code&gt;Traversal&lt;/code&gt;s is &lt;code&gt;toListOf :: A -&amp;gt; [B]&lt;/code&gt;, which extracts all the values of the selected sub-rectangles of type &lt;code&gt;B&lt;/code&gt; from the main rectangle of type &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;As usual, we can notice that &lt;code&gt;Traversal A B&lt;/code&gt; form a subcategory of &lt;code&gt;Optic A B&lt;/code&gt;, since a selection of sub-rectangles inside a selection 0f sub-rectangles is still a selection of sub-rectangles of the main rectangle.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;The graphical representation we just introduced in this post provides us with a tool to navigate various kinds of &lt;code&gt;Optic&lt;/code&gt;s and their operations. I hope it can provide a concrete way to understand the basic ideas behind &lt;code&gt;Lens&lt;/code&gt;es, &lt;code&gt;Prism&lt;/code&gt;s and other &lt;code&gt;Optic&lt;/code&gt;s and make it easier to use them.&lt;/p&gt;
    &lt;p&gt;Such a representation could also help to explore and shed some light on the mysterious world of &lt;code&gt;Optic&lt;/code&gt;s. One could try to search for other sub-categories in a graphical fashion and then ask what do they correspond to in other &lt;code&gt;Optic&lt;/code&gt; representation. For example, what is the sub-category of &lt;code&gt;Optics&lt;/code&gt; made by multiple horizontal slices? Or the one made by multiple vertical slices?&lt;/p&gt;
    &lt;p&gt;I need also to mention that such a representation is not able, as far as I can see, to fully represent the whole universe of &lt;code&gt;Optic&lt;/code&gt;s. For example, it’s hard to distinguish a &lt;code&gt;Traversal&lt;/code&gt; from a &lt;code&gt;Fold&lt;/code&gt;, or describe what &lt;code&gt;Grate&lt;/code&gt;s are.&lt;/p&gt;
    &lt;p&gt;All in all, I’m confident that describing and explaining optics in this graphical fashion could help people understand their beauty and usefulness! Thanks for reading up to here!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="http://marcosh.github.io/post/2025/10/07/the-mondrian-introduction-to-functional-optics.html"/><published>2025-10-07T09:35:53+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45501189</id><title>Nobel Prize in Physics 2025</title><updated>2025-10-07T13:02:27.651966+00:00</updated><content>&lt;doc fingerprint="715db15f2195d5ea"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Popular information&lt;/head&gt;
    &lt;p&gt;Popular science background: Quantum properties on a human scale (pdf)&lt;lb/&gt;Populärvetenskaplig information: Kvantegenskaper på mänsklig skala (pdf)&lt;/p&gt;
    &lt;head rend="h2"&gt;Quantum properties on a human scale&lt;/head&gt;
    &lt;p&gt;The Nobel Prize laureates in physics for 2025, John Clarke, Michel H. Devoret and John M. Martinis, used a series of experiments to demonstrate that the bizarre properties of the quantum world can be made concrete in a system big enough to be held in the hand. Their superconducting electrical system could tunnel from one state to another, as if it were passing straight through a wall. They also showed that the system absorbed and emitted energy in doses of specific sizes, just as predicted by quantum mechanics.&lt;/p&gt;
    &lt;head rend="h3"&gt;A series of groundbreaking experiments&lt;/head&gt;
    &lt;p&gt;Quantum mechanics describes properties that are significant on a scale that involves single particles. In quantum physics, these phenomena are called microscopic, even when they are much smaller than can be seen using an optical microscope. This contrasts with macroscopic phenomena, which consist of a large number of particles. For example, an everyday ball is built up of an astronomical amount of molecules and displays no quantum mechanical effects. We know that the ball will bounce back every time it is thrown at a wall. A single particle, however, will sometimes pass straight through an equivalent barrier in its microscopic world and appear on the other side. This quantum mechanical phenomenon is called tunnelling.&lt;/p&gt;
    &lt;p&gt;This year’s Nobel Prize in Physics recognises experiments that demonstrated how quantum tunnelling can be observed on a macroscopic scale, involving many particles. In 1984 and 1985, John Clarke, Michel Devoret and John Martinis conducted a series of experiments at the University of California, Berkeley. They built an electrical circuit with two superconductors, components that can conduct a current without any electrical resistance. They separated these with a thin layer of material that did not conduct any current at all. In this experiment, they showed that they could control and investigate a phenomenon in which all the charged particles in the superconductor behave in unison, as if they are a single particle that fills the entire circuit.&lt;/p&gt;
    &lt;p&gt;This particle-like system is trapped in a state in which current flows without any voltage – a state from which it does not have enough energy to escape. In the experiment, the system shows its quantum character by using tunnelling to escape the zero-voltage state, generating an electrical voltage. The laureates were also able to show that the system is quantised, which means it only absorbs or emits energy in specific amounts.&lt;/p&gt;
    &lt;head rend="h3"&gt;Tunnels and crossings&lt;/head&gt;
    &lt;p&gt;To help them, the laureates had concepts and experimental tools that had been developed over decades. Together with the theory of relativity, quantum physics is the foundation of what has come to be called modern physics, and researchers have spent the last century exploring what it entails.&lt;/p&gt;
    &lt;p&gt;Individual particles’ ability to tunnel is well known. In 1928, the physicist George Gamow realised that tunnelling is the reason why some heavy atomic nuclei tend to decay in a particular manner. The interaction between the forces in the nucleus creates a barrier around it, holding in the particles it contains. However, despite this, a small piece of the atomic nucleus can sometimes split off, move outside the barrier and escape – leaving behind a nucleus that has been transformed into another element. Without tunnelling, this type of nuclear decay could not occur.&lt;/p&gt;
    &lt;p&gt;Tunnelling is a quantum mechanical process, which entails that chance plays a role. Some types of atomic nuclei have a tall, wide barrier, so it can take a long while for a piece of the nucleus to appear outside it, while other types decay more easily. If we only look at a single atom, we cannot predict when this will happen, but by watching the decay of a large number of nuclei of the same type, we can measure an expected time before tunnelling occurs. The most common way of describing this is through the concept of half-life, which is how long it takes for half the nuclei in a sample to decay.&lt;/p&gt;
    &lt;p&gt;Physicists were quick to wonder whether it would be possible to investigate a type of tunnelling that involves more than one particle at a time. One approach to new types of experiments originated in a phenomenon that arises when some materials get extremely cold.&lt;/p&gt;
    &lt;p&gt;In an ordinary conductive material, current flows because there are electrons that are free to move through the entire material. In some materials, the individual electrons that push their way through the conductor may become organised, forming a synchronised dance that flows without any resistance. The material has become a superconductor and the electrons are joined together as pairs. These are called Cooper pairs, after Leon Cooper who, along with John Bardeen and Robert Schrieffer, provided a detailed description of how superconductors work (Nobel Prize in Physics 1972).&lt;/p&gt;
    &lt;p&gt;Cooper pairs behave completely differently to ordinary electrons. Electrons have a great deal of integrity and like to stay at a distance from each other – two electrons cannot be in the same place if they have the same properties. We can see this in an atom, for example, where the electrons divide themselves into different energy levels, called shells. However, when the electrons in a superconductor join up as pairs, they lose a bit of their individuality; while two separate electrons are always distinct, two Cooper pairs can be exactly the same. This means the Cooper pairs in a superconductor can be described as a single unit, one quantum mechanical system. In the language of quantum mechanics, they are then described as a single wave function. This wave function describes the probability of observing the system in a given state and with given properties.&lt;/p&gt;
    &lt;p&gt;If two superconductors are joined together with a thin insulating barrier between them, it creates a Josephson junction. This component is named after Brian Josephson, who performed quantum mechanical calculations for the junction. He discovered that interesting phenomena arise when the wave functions on each side of the junction are considered (Nobel Prize in Physics 1973). The Josephson junction rapidly found areas of application, including in precise measurements of fundamental physical constants and magnetic fields.&lt;/p&gt;
    &lt;p&gt;The construction also provided tools for exploring the fundamentals of quantum physics in a new way. One person who did so was Anthony Leggett (Nobel Prize in Physics 2003), whose theoretical work on macroscopic quantum tunnelling at a Josephson junction inspired new types of experiments.&lt;/p&gt;
    &lt;head rend="h3"&gt;The research group starts its work&lt;/head&gt;
    &lt;p&gt;These subjects were a perfect match for John Clarke’s research interests. He was a professor at the University of California, Berkeley, in the US, where he had moved after completing his doctoral degree at the University of Cambridge, UK, in 1968. At UC Berkeley he built up his research group and specialised in exploring a range of phenomena using superconductors and the Josephson junction.&lt;/p&gt;
    &lt;p&gt;By the mid-1980s, Michel Devoret had joined John Clarke’s research group as a postdoc, after receiving his doctorate in Paris. This group also included the doctoral student John Martinis. Together, they took on the challenge of demonstrating macroscopic quantum tunnelling. Vast amounts of care and precision were necessary to screen the experimental setup from all the interference that could affect it. They succeeded in refining and measuring all the properties of their electrical circuit, allowing them to understand it in detail.&lt;/p&gt;
    &lt;p&gt;To measure the quantum phenomena, they fed a weak current into the Josephson junction and measured the voltage, which is related to the electrical resistance in the circuit. The voltage over the Josephson junction was initially zero, as expected. This is because the wave function for the system is enclosed in a state that does not allow a voltage to arise. Then they studied how long it took for the system to tunnel out of this state, causing a voltage. Because quantum mechanics entails an element of chance, they took numerous measurements and plotted their results as graphs, from which they could read the duration of the zero-voltage state. This is similar to how measurements of the half-lives of atomic nuclei are based on statistics of numerous instances of decay.&lt;/p&gt;
    &lt;p&gt;The tunnelling demonstrates how the experimental setup’s Cooper pairs, in their synchronised dance, behave like a single giant particle. The researchers obtained further confirmation of this when they saw that the system had quantised energy levels. Quantum mechanics was named after the observation that the energy in microscopic processes is divided into separate packages, quanta. The laureates introduced microwaves of varying wavelengths into the zero-voltage state. Some of these were absorbed, and the system then moved to a higher energy level. This showed that the zero-voltage state had a shorter duration when the system contained more energy – which is exactly what quantum mechanics predicts. A microscopic particle shut behind a barrier functions in the same way.&lt;/p&gt;
    &lt;head rend="h3"&gt;Practical and theoretical benefit&lt;/head&gt;
    &lt;p&gt;This experiment has consequences for the understanding of quantum mechanics. Other types of quantum mechanical effects that are demonstrated on the macroscopic scale are composed of many tiny individual pieces and their separate quantum properties. The microscopic components are then combined to cause macroscopic phenomena such as lasers, superconductors and superfluid liquids. However, this experiment instead created a macroscopic effect – a measurable voltage – from a state that is in itself macroscopic, in the form of a common wave function for vast numbers of particles.&lt;/p&gt;
    &lt;p&gt;Theorists like Anthony Leggett have compared the laureates’ macroscopic quantum system with Erwin Schrödinger’s famous thought experiment featuring a cat in a box, where the cat would be both alive and dead if we did not look inside. (Erwin Schrödinger received the Nobel Prize in Physics 1933.) The intention of his thought experiment was to show the absurdity of this situation, because the special properties of quantum mechanics are often erased at a macroscopic scale. The quantum properties of an entire cat cannot be demonstrated in a laboratory experiment.&lt;/p&gt;
    &lt;p&gt;However, Legget has argued that the series of experiments conducted by John Clarke, Michel Devoret and John Martinis showed that there are phenomena that involve vast numbers of particles which together behave just as quantum mechanics predicts. The macroscopic system that consists of many Cooper pairs is still many orders of magnitude smaller than a kitten – but because the experiment measures the quantum mechanical properties that apply to the system as a whole, for a quantum physicist it is fairly similar to Schrödinger’s imaginary cat.&lt;/p&gt;
    &lt;p&gt;This type of macroscopic quantum state offers new potential for experiments using the phenomena that govern the microscopic world of particles. It can be regarded as a form of artificial atom on a large scale – an atom with cables and sockets that can be connected into new test set-ups or utilised in new quantum technology. For example, artificial atoms are used to simulate other quantum systems and aid in understanding them.&lt;/p&gt;
    &lt;p&gt;Another example is the quantum computer experiment subsequently performed by Martinis, in which he utilised exactly the energy quantisation that he and the other two laureates had demonstrated. He used a circuit with quantised states as information-bearing units – a quantum bit. The lowest energy state and the first step upward functioned as zero and one, respectively. Superconducting circuits are one of the techniques being explored in attempts to construct a future quantum computer.&lt;/p&gt;
    &lt;p&gt;This year’s laureates have thus contributed to both practical benefit in physics laboratories and to providing new information for the theoretical understanding of our physical world.&lt;/p&gt;
    &lt;head rend="h3"&gt;Further reading&lt;/head&gt;
    &lt;p&gt;Additional information on this year’s prizes, including a scientific background in English, is available on the website of the Royal Swedish Academy of Sciences, www.kva.se, and at www.nobelprize.org, where you can watch video from the press conferences, the Nobel Prize lectures and more. Information on exhibitions and activities related to the Nobel Prizes and the prize in economic sciences is available at www.nobelprizemuseum.se.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Royal Swedish Academy of Sciences has decided to award the Nobel Prize in Physics 2025 to&lt;/head&gt;
    &lt;p&gt;JOHN CLARKE&lt;lb/&gt;Born 1942 in Cambridge, UK. PhD 1968 from University of Cambridge, UK. Professor at University of California, Berkeley, USA.&lt;/p&gt;
    &lt;p&gt;MICHEL H. DEVORET&lt;lb/&gt;Born 1953 in Paris, France. PhD 1982 from Paris-Sud University, France. Professor at Yale University, New Haven, CT and University of California, Santa Barbara, USA.&lt;/p&gt;
    &lt;p&gt;JOHN M. MARTINIS&lt;lb/&gt;Born 1958. PhD 1987 from University of Californa, Berkeley, USA. Professor at University of California, Santa Barbara, USA.&lt;/p&gt;
    &lt;p&gt;“for the discovery of macroscopic quantum mechanical tunnelling and energy quantisation in an electric circuit”&lt;/p&gt;
    &lt;p&gt;Science Editors: Ulf Danielsson, Göran Johansson and Eva Lindroth, the Nobel Committee for Physics&lt;lb/&gt;Text: Anna Davour&lt;lb/&gt;Translation: Clare Barnes&lt;lb/&gt;Illustrations: Johan Jarnestad&lt;lb/&gt;Editor: Sara Gustavsson&lt;lb/&gt;© The Royal Swedish Academy of Sciences&lt;/p&gt;
    &lt;head rend="h3"&gt;Nobel Prize announcements 2025&lt;/head&gt;
    &lt;p&gt;Don't miss the Nobel Prize announcements 6–13 October. All announcements are streamed live here on nobelprize.org.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nobelprize.org/prizes/physics/2025/popular-information/"/><published>2025-10-07T09:50:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45501279</id><title>Like Vercel, but open source and for all language</title><updated>2025-10-07T13:02:27.010978+00:00</updated><content>&lt;doc fingerprint="c1875194e4671d1"&gt;
  &lt;main&gt;
    &lt;p&gt;An open-source and self-hostable alternative to Vercel, Render, Netlify and the likes. It allows you to build and deploy any app (Python, Node.js, PHP, ...) with zero-downtime updates, real-time logs, team management, customizable environments and domains, etc.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Git-based deployments: Push to deploy from GitHub with zero-downtime rollouts and instant rollback.&lt;/item&gt;
      &lt;item&gt;Multi-language support: Python, Node.js, PHP... basically anything that can run on Docker.&lt;/item&gt;
      &lt;item&gt;Environment management: Multiple environments with branch mapping and encrypted environment variables.&lt;/item&gt;
      &lt;item&gt;Real-time monitoring: Live and searchable build and runtime logs.&lt;/item&gt;
      &lt;item&gt;Team collaboration: Role-based access control with team invitations and permissions.&lt;/item&gt;
      &lt;item&gt;Custom domains: Support for custom domain and automatic Let's Encrypt SSL certificates.&lt;/item&gt;
      &lt;item&gt;Self-hosted and open source: Run on your own servers, MIT licensed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;User documentation: devpu.sh/docs&lt;/item&gt;
      &lt;item&gt;Technical documentation: ARCHITECTURE&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;&lt;g-emoji&gt;⚠️&lt;/g-emoji&gt;Supported on Ubuntu/Debian. Other distros may work but aren't officially supported (yet).&lt;/quote&gt;
    &lt;p&gt;Log in your server, run the following command and follow instructions:&lt;/p&gt;
    &lt;code&gt;curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/install.sh | sudo bash&lt;/code&gt;
    &lt;p&gt;You user must have sudo privileges.&lt;/p&gt;
    &lt;p&gt;You will need a fresh Ubuntu/Debian server you can SSH into with sudo privileges. We recommend a CPX31 from Hetzner.&lt;/p&gt;
    &lt;p&gt;You can use the provisioning script to get a server up and running:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Sign in or sign up for a Hetzner account: Hetzner Cloud Console&lt;/item&gt;
      &lt;item&gt;Generate an API token: Creating an API token&lt;/item&gt;
      &lt;item&gt;Provision a server (requires &lt;code&gt;--token&lt;/code&gt;; optional:&lt;code&gt;--user&lt;/code&gt;,&lt;code&gt;--name&lt;/code&gt;,&lt;code&gt;--region&lt;/code&gt;,&lt;code&gt;--type&lt;/code&gt;):Tip: run&lt;quote&gt;curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/provision-hetzner.sh | bash -s -- --token &amp;lt;hetzner_api_key&amp;gt; [--user &amp;lt;login_user&amp;gt;] [--name &amp;lt;hostname&amp;gt;] [--region &amp;lt;fsn1|nbg1|hel1|ash|hil|sin&amp;gt;] [--type &amp;lt;cpx11|cpx21|cpx31|cpx41|cpx51&amp;gt;]&lt;/quote&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/provision-hetzner.sh | bash -s -- --help&lt;/code&gt;to list regions and types (with specs). Defaults: region&lt;code&gt;hil&lt;/code&gt;, type&lt;code&gt;cpx31&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Configure DNS Records: Go to your DNS provider and create two A records pointing at the server IP for &lt;code&gt;APP_HOSTNAME&lt;/code&gt;(e.g.&lt;code&gt;app.devpu.sh&lt;/code&gt;) and a wildcard on subdomains of&lt;code&gt;DEPLOY_DOMAIN&lt;/code&gt;(e.g.&lt;code&gt;*.devpush.app&lt;/code&gt;). If you're using Cloudflare, set SSL/TLS to "Full (strict)" and keep the records proxied.&lt;/item&gt;
      &lt;item&gt;SSH into your new server: The provision script will have created a user for you. &lt;quote&gt;ssh &amp;lt;login_user&amp;gt;@&amp;lt;server_ip&amp;gt;&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Run hardening for system and SSH:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/harden.sh | sudo bash -s -- --ssh&lt;/code&gt;
    &lt;p&gt;Even if you already have a server, we recommend you harden security (ufw, fail2ban, disabled root SSH, etc). You can do that using &lt;code&gt;scripts/prod/harden.sh&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;SSH into the server: &lt;quote&gt;ssh &amp;lt;login_user&amp;gt;@&amp;lt;server_ip&amp;gt;&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Install /dev/push: &lt;code&gt;curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/install.sh | sudo bash&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Switch to &lt;code&gt;devpush&lt;/code&gt;user:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sudo -iu devpush&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Edit &lt;code&gt;.env&lt;/code&gt;:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;cd devpush &amp;amp;&amp;amp; vi .env&lt;/code&gt;
    &lt;p&gt;Tip: you will need to fill in at least the following: &lt;code&gt;LE_EMAIL&lt;/code&gt;, &lt;code&gt;APP_HOSTNAME&lt;/code&gt;, &lt;code&gt;DEPLOY_DOMAIN&lt;/code&gt;, &lt;code&gt;EMAIL_SENDER_ADDRESS&lt;/code&gt;, &lt;code&gt;RESEND_API_KEY&lt;/code&gt; and your GitHub app settings (see [environment-variables] for details). &lt;code&gt;SERVER_IP&lt;/code&gt;, &lt;code&gt;SECRET_KEY&lt;/code&gt;, &lt;code&gt;ENCRYPTION_KEY&lt;/code&gt;, &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt; should be pre-filled. You can ignore all commented out environment variables.
5. Start services:&lt;/p&gt;
    &lt;code&gt;scripts/prod/start.sh --migrate&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Visit your URL: &lt;code&gt;https://&amp;lt;APP_HOSTNAME&amp;gt;&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The follwing commands must be run as &lt;code&gt;devpush&lt;/code&gt; user (&lt;code&gt;su - devpush&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;In most cases, you can run an update with:&lt;/p&gt;
    &lt;code&gt;scripts/prod/update.sh --all&lt;/code&gt;
    &lt;p&gt;Alternatively, you can force a full upgrade (with downtime) using:&lt;/p&gt;
    &lt;code&gt;scripts/prod/update.sh --full -y&lt;/code&gt;
    &lt;p&gt;You can update specific components:&lt;/p&gt;
    &lt;code&gt;scripts/prod/update.sh --components &amp;lt;component_name&amp;gt;&lt;/code&gt;
    &lt;quote&gt;&lt;g-emoji&gt;⚠️&lt;/g-emoji&gt;Development scripts target macOS for now.&lt;/quote&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install Colima and the Loki Docker plugin: &lt;quote&gt;scripts/dev/install.sh&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Set up environment variables: &lt;quote&gt;cp .env.dev.example .env&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Start the stack (streams logs): &lt;quote&gt;scripts/dev/start.sh&lt;/quote&gt;&lt;list rend="ul"&gt;&lt;item&gt;Add &lt;code&gt;--prune&lt;/code&gt;to prune dangling images before build&lt;/item&gt;&lt;item&gt;Add &lt;code&gt;--cache&lt;/code&gt;to use the build cache (default is no cache)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Add &lt;/item&gt;
      &lt;item&gt;Initialize your database once containers are up: &lt;quote&gt;scripts/dev/db-migrate.sh&lt;/quote&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;See the scripts section for more dev utilities.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The app is mounted inside containers, so code changes reflect immediately. Some SSE endpoints may require closing browser tabs to trigger a reload.&lt;/item&gt;
      &lt;item&gt;The workers require a restart: &lt;quote&gt;docker-compose restart worker-arq&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;To apply migrations: &lt;quote&gt;scripts/dev/db-migrate.sh&lt;/quote&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Area&lt;/cell&gt;
        &lt;cell role="head"&gt;Script&lt;/cell&gt;
        &lt;cell role="head"&gt;What it does&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/install.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Setup Colima and install Loki Docker plugin&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/start.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Start stack with logs (foreground); supports &lt;code&gt;--prune&lt;/code&gt;, &lt;code&gt;--cache&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/build-runners.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Build runner images (default no cache; &lt;code&gt;--cache&lt;/code&gt; to enable)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/db-generate.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Generate Alembic migration (prompts for message)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/db-migrate.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Apply Alembic migrations&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/db-reset.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Drop and recreate &lt;code&gt;public&lt;/code&gt; schema in DB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Dev&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/dev/clean.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Stop stack and clean dev data (&lt;code&gt;--hard&lt;/code&gt; for global)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/provision-hetzner.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Provision a Hetzner server (API token, regions from API, fixed sizes)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/install.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Server setup: Docker, Loki plugin, user, clone repo, create &lt;code&gt;.env&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/harden.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;System hardening (UFW, fail2ban, unattended-upgrades); add &lt;code&gt;--ssh&lt;/code&gt; to harden SSH&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/start.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Start services; optional &lt;code&gt;--migrate&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/stop.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Stop services (&lt;code&gt;--down&lt;/code&gt; for hard stop)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/restart.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Restart services; optional &lt;code&gt;--migrate&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/update.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Update by tag; &lt;code&gt;--all&lt;/code&gt; (app+workers), &lt;code&gt;--full&lt;/code&gt; (downtime), or &lt;code&gt;--components&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/db-migrate.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Apply DB migrations in production&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/check-env.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Validate required keys exist in &lt;code&gt;.env&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/update/app.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Blue‑green update for app&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/update/worker-arq.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Drain‑aware blue‑green update for &lt;code&gt;worker-arq&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Prod&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;scripts/prod/update/worker-monitor.sh&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Blue‑green update for &lt;code&gt;worker-monitor&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Variable&lt;/cell&gt;
        &lt;cell role="head"&gt;Comments&lt;/cell&gt;
        &lt;cell role="head"&gt;Default&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;APP_NAME&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;App name.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;/dev/push&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;APP_DESCRIPTION&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;App description.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;Deploy your Python app without touching a server.&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;URL_SCHEME&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;http&lt;/code&gt; (development) or &lt;code&gt;https&lt;/code&gt; (production).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;https&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;LE_EMAIL&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Email used to register the Let's Encrypt (ACME) account in Traefik; receives certificate issuance/renewal/expiry notifications.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;APP_HOSTNAME&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Domain for the app (e.g. &lt;code&gt;app.devpu.sh&lt;/code&gt;).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DEPLOY_DOMAIN&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Domain used for deployments (e.g. &lt;code&gt;devpush.app&lt;/code&gt; if you want your deployments available at &lt;code&gt;*.devpush.app&lt;/code&gt;).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;APP_HOSTNAME&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;SERVER_IP&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Public IP of the server&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;SECRET_KEY&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;App secret for sessions/CSRF. Generate: &lt;code&gt;openssl rand -hex 32&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;ENCRYPTION_KEY&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Fernet key (urlsafe base64, 32 bytes). Generate: `openssl rand -base64 32&lt;/cell&gt;
        &lt;cell&gt;tr '+/' '-_'&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;EMAIL_LOGO&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;URL for email logo image. Only helpful for testing, as the app will use &lt;code&gt;app/logo-email.png&lt;/code&gt; if left empty.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;EMAIL_SENDER_NAME&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Name displayed as email sender for invites/login.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;EMAIL_SENDER_ADDRESS&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Email sender used for invites/login.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;RESEND_API_KEY&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;API key for Resend.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_ID&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub App ID.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_NAME&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub App name.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_PRIVATE_KEY&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub App private key (PEM format).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_WEBHOOK_SECRET&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub webhook secret for verifying webhook payloads.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_CLIENT_ID&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub OAuth app client ID.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GITHUB_APP_CLIENT_SECRET&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;GitHub OAuth app client secret.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GOOGLE_CLIENT_ID&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Google OAuth client ID.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;GOOGLE_CLIENT_SECRET&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Google OAuth client secret.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;POSTGRES_DB&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;PostgreSQL database name.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;devpush&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;POSTGRES_USER&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;PostgreSQL username.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;devpush-app&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;PostgreSQL password. Generate: `openssl rand -base64 24&lt;/cell&gt;
        &lt;cell&gt;tr -d '\n'`&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;REDIS_URL&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Redis connection URL.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;redis://redis:6379&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DOCKER_HOST&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Docker daemon host address.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;tcp://docker-proxy:2375&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;UPLOAD_DIR&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Directory for file uploads.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;/app/upload&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;TRAEFIK_CONFIG_DIR&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Traefik configuration directory.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;/data/traefik&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DEFAULT_CPU_QUOTA&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Default CPU quota for containers (microseconds).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;100000&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DEFAULT_MEMORY_MB&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Default memory limit for containers (MB).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;4096&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;JOB_TIMEOUT&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Job timeout in seconds.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;320&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;JOB_COMPLETION_WAIT&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Job completion wait time in seconds.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;300&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DEPLOYMENT_TIMEOUT&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Deployment timeout in seconds.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;300&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;LOG_LEVEL&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Logging level.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;WARNING&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;DB_ECHO&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Enable SQL query logging.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;ENV&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Environment (development/production).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;development&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;ACCESS_DENIED_MESSAGE&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Message shown to users who are denied access based on sign-in access control.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;Sign-in not allowed for this email.&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;ACCESS_DENIED_WEBHOOK&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Optional webhook to receive denied events (read more about Sign-in access control).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;LOGIN_HEADER&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;HTML snippet displayed above the login form.&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;TOASTER_HEADER&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;HTML snippet displayed at the top of the toaster (useful to display a permanent toast on all pages).&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;""&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;You will need to configure a GitHub App with the following settings:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Identifying and authorizing users: &lt;list rend="ul"&gt;&lt;item&gt;Callback URL: add two callback URLs with your domain:&lt;/item&gt;&lt;item&gt;Expire user authorization tokens: No&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Post installation: &lt;list rend="ul"&gt;&lt;item&gt;Setup URL: https://example.com/api/github/install/callback&lt;/item&gt;&lt;item&gt;Redirect on update: Yes&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Webhook: &lt;list rend="ul"&gt;&lt;item&gt;Active: Yes&lt;/item&gt;&lt;item&gt;Webhook URL: https://example.com/api/github/webhook&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Permissions: &lt;list rend="ul"&gt;&lt;item&gt;Repository permissions &lt;list rend="ul"&gt;&lt;item&gt;Administration: Read and write&lt;/item&gt;&lt;item&gt;Checks: Read and write&lt;/item&gt;&lt;item&gt;Commit statuses: Read and write&lt;/item&gt;&lt;item&gt;Contents: Read and write&lt;/item&gt;&lt;item&gt;Deployments: Read and write&lt;/item&gt;&lt;item&gt;Issues: Read and write&lt;/item&gt;&lt;item&gt;Metadata: Read-only&lt;/item&gt;&lt;item&gt;Pull requests: Read and write&lt;/item&gt;&lt;item&gt;Webhook: Read and write&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Account permissions: &lt;list rend="ul"&gt;&lt;item&gt;Email addresses: Read-only&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Repository permissions &lt;/item&gt;
      &lt;item&gt;Subscribe to events: &lt;list rend="ul"&gt;&lt;item&gt;Installation target&lt;/item&gt;&lt;item&gt;Push&lt;/item&gt;&lt;item&gt;Repository&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Provide an access rules file to restrict who can sign up/sign in.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Development: edit &lt;code&gt;./access.json&lt;/code&gt;. If missing, running&lt;code&gt;scripts/dev/start.sh&lt;/code&gt;will sed an allow‑all file.&lt;/item&gt;
      &lt;item&gt;Production: edit &lt;code&gt;/srv/devpush/access.json&lt;/code&gt;on the server.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Rules format (any/all may be used):&lt;/p&gt;
    &lt;code&gt;{
  "emails": ["alice@example.com"],
  "domains": ["example.com"],
  "globs": ["*@corp.local", "*.dept.example.com"],
  "regex": ["^[^@]+@(eng|research)\\.example\\.com$"]
}&lt;/code&gt;
    &lt;p&gt;Globs use shell-style wildcards; regex are Python patterns. If the file is missing or empty, all valid emails are allowed.&lt;/p&gt;
    &lt;p&gt;Additionally, if you set the &lt;code&gt;ACCESS_DENIED_WEBHOOK&lt;/code&gt; environment variable, denied sign-in attempts will be posted to the provided URL with the following payload:&lt;/p&gt;
    &lt;code&gt;{
  "email": "user@example.com",
  "provider": "google",
  "ip": "203.0.113.10",
  "user_agent": "Mozilla/5.0"
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/hunvreus/devpush"/><published>2025-10-07T10:07:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45501488</id><title>The Quiet Driving Force Behind Rising Curtailment Costs in Great Britain</title><updated>2025-10-07T13:02:26.286228+00:00</updated><content>&lt;doc fingerprint="adccd1134ab717cb"&gt;
  &lt;main&gt;
    &lt;p&gt;By Callum MacIver and Keith Bell.&lt;/p&gt;
    &lt;p&gt;The curtailment of output from wind farms due to lack of network capacity and the associated costs of balancing the system have become a key focal point in the current debate in the electricity sector about the extent to which the system is “broken”. They are also a key driver behind calls being made in some quarters for radical market reform to better align what the market dispatches with the physical realities of the system, i.e. to reduce the need for the system operator to take balancing actions. In this blog, we set out to dig a little deeper into the current state of wind curtailment. In particular, we seek to examine the role of transmission system availability (or rather unavailability), something that is often absent from the discussion. Spoiler: It is very influential! But first, some background is required.&lt;/p&gt;
    &lt;p&gt;The National Energy System Operator (NESO) is tasked with balancing generation and demand in real-time in Great Britain (GB) via the Balancing Mechanism (BM). The market provides NESO with a set of half-hourly generator, storage and interconnector ‘physical notifications’ based on those actors’ positions in forward, day-ahead and intra-day trading markets. At ‘gate closure’ – 1 hour ahead of each delivery period – NESO takes over. Their task involves managing any errors in forecasts of supply or demand, or subsequent changes in circumstance. It also increasingly involves unravelling any market dispatches that are not physically feasible within the system, respecting various constraints such as limits to the amount of power transmission lines can carry without becoming too hot, i.e. thermal constraints, voltage limits and a need for a certain minimum amount of system inertia. Costs arise due to each of these factors, but thermal constraints are the single biggest driver of the high and increasing costs for system balancing, in the main due to the need to curtail surplus wind energy in export-constrained areas of the network. This usually means turning wind farm output down in Scotland, because we can’t safely export it south, and replacing that energy in the South, typically with gas generation. This comes at a premium to consumers. The curtailed wind farms still get paid for their original transactions in the market; they might then get paid some more for turning down in the BM, e.g. to cover any lost income from the government-backed Renewables Obligation or Contracts for Difference (CfDs) they miss out on by not being able to generate and which their initial business case – and price that they bid into CfD auctions – assumed they would get. The gas generators also then get paid to generate more and, because this is at short notice, they often charge a premium over their ‘short-run cost’ (the cost of the gas) for doing so. This typically results in the order of a 30% uplift in asking price compared with what they might have charged in the day ahead market.&lt;/p&gt;
    &lt;p&gt;System balancing costs caused by thermal constraints are generally stated as the sum of the ‘bids’ to turn down (usually wind) and the ‘offers’ to turn up (usually gas). Each of these are, in principle, competitively priced in the BM. NESO tries to choose the cheapest bids and offers to minimise consumer costs.&lt;/p&gt;
    &lt;p&gt;Balancing costs have been on a rising trend in recent years. A number of fantastic public data sources developed by curious individuals are now tracking and bringing to life the vast and often otherwise impenetrable market data that is made available by Elexon (the entity that oversees settlement of BM transactions). Below, we make use of one of those resources from Robin Hawkes to show the combined total balancing costs in each year since 2016 alongside the cost per MWh of curtailed energy (turn down + turn-up actions).&lt;/p&gt;
    &lt;p&gt;Many stories emerge from this data. In one sense, it provides confirmation of one widespread contention: that under a ‘connect and manage’ philosophy (a government policy first introduced in 2009 to allow wind farms to connect before the main network infrastructure had been developed to accommodate them[1]) we’ve built a lot of renewables, particularly in Scotland, without at the same time undertaking sufficient upgrades of the North to South transmission network. Thermal constraint volumes are certainly on an upward trend, but, perhaps surprisingly, it is not a straightforward story of inexorably rising constraint volumes, and therefore rising costs. After a jump in 2020, constraint volumes remained relatively flat through to 2023 (with a noticeable dip in 2021, which was a very low wind output year). However, constraint costs did rise significantly over that period. As Figure 2 shows more clearly, it is the cost of turning up gas that has been big a driving force behind those rising costs. Those with a working memory of the energy price crisis may notice that the sharp rise in costs in 2021 and 2022, followed by a slow reduction, mirrors very closely the cost curve of wholesale gas over the period.&lt;/p&gt;
    &lt;p&gt;Between 2023 and 2024 we have seen a very large increase in constrained volumes, so even with average balancing costs turning back down towards pre-crisis levels (in part due to lower turn-down prices for wind energy), total costs are on the rise again.&lt;/p&gt;
    &lt;p&gt;What this recent rise in constraint volumes means on the ground is some very high levels of curtailment being bought from a number of Scottish wind farms. Somewhat perversely, in the competitive world of the BM, the cheapest – and therefore first – wind farms to be instructed by NESO to turn down output to manage thermal constraints tend to be the biggest, newest and shiniest additions to the fleet. Another new public resource from James Twallin estimates the impact of this for each wind farm in stark detail. Seagreen (with a capacity of 1075 MW), Viking (433 MW) and Moray East (950 MW) – three flagship renewables projects in Scotland delivered in recent years – all show startling levels of curtailment across the past couple of years according to Twallin’s estimates (66%, 60% and 38% respectively) – see, for example, Figure 3.&lt;/p&gt;
    &lt;p&gt;We’re simply throwing away more than half the energy that could be produced by some new projects. It’s not a good look and it does little for public perception of renewables and the push for net zero. It should of course be noted that, for many other wind farms in the North and other parts of GB, curtailment is close to zero, with the data appearing to show an average fleet curtailment level since the beginning of 2023 of around 11.5% of the available energy.&lt;/p&gt;
    &lt;p&gt;How did we arrive at this sorry state of affairs? Well, that brings us to the oft-ignored elephant in the room: transmission capacity. There are two parts to this story, one more obvious than the other. As alluded to earlier, the main bottleneck in the network in recent years lies in getting power out of Scotland and into England – the main constraint boundary on the border is known to those in the business as the ‘B6 boundary’. There are two high-voltage transmission corridors on the onshore network across B6 with a nominal ‘secure’ power transfer limit across the border of around 4.5 GW. (‘Secure’ means that a single fault event wouldn’t lead to overloads on the network or any system instability). In 2018 the Western HVDC Link was added – a 420 km, 2.2 GW subsea cable running from Hunterston in Ayrshire to Connah’s Quay in North Wales bringing us to an existing theoretical secure transfer capability on the B6 boundary of around 6.7 GW. Another key bottleneck is the ‘B4 boundary’ which delineates the two transmission network areas within Scotland (run by SSEN Transmission in the North and ScottishPower Transmission in the South) – this has a present-day nominal secure transfer capacity of 3.4 GW. This is important because lots of the wind in Scotland is located in the far North, including all of that new capacity from Seagreen, Viking and Moray East, totalling around 2.5 GW. The B4 boundary is therefore often the primary pinch point on the system.&lt;/p&gt;
    &lt;p&gt;A number of new subsea HVDC links are planned along the east coast of GB, first proposed the best part of 15 years ago, one with a capacity of 2 GW running from Peterhead to Drax and another from Torness to Hawthorn Pit, the combination of which would considerably increase capacity to transfer power across the B4 and B6 boundaries. Ten years ago in the 2015 NOA assessment the system operator (now NESO) suggested that the Peterhead project should proceed with an expected required delivery date of 2023. We are now in 2025 and the latest version of that Peterhead project has only recently been given final sign off and put into construction (Eastern Green Link (EGL) 2) with delivery expected in 2029. Like buses, we might end up with a long delay but two coming along at once with the Torness to Hawthorn Pit project also now due for delivery by April 2029 (Eastern Green Link (EGL) 1). The original timeline for the shorter EGL 1 project was for delivery in late 2027 but the project is now subject to a 16-month delay relating to procurement issues (including a dispute with Ofgem about financial penalties relating to the delay). Three further EGL projects have also been announced for delivery in the mid 2030s to help accommodate the vast amount of new wind capacity expected to connect in Scotland to meet Clean Power goals. The required upgrades are belatedly on their way, it would seem, but the first of these will be more than half a decade late. No wonder we find ourselves in this world of high constraint volumes. It could be a long four years with little hope for short term improvement before the cavalry starts to arrive.&lt;/p&gt;
    &lt;p&gt;It seems clear we haven’t built out enough North to South transmission capacity quickly enough, and that lies at the root of our current issues… but is there more to the story?&lt;/p&gt;
    &lt;p&gt;As avid attendees of NESO’s Operational Transparency Forum (OTF) on a Wednesday morning (along with a couple of hundred other energy geeks), one thing has been niggling at us for a while. Each week they show a chart of the operational availability of the main boundaries on the network. Through this, we start to see an additional problem. It is not the maximum secure transfer capability that matters, but how much of that you can utilise in real-time. Figure 4 shows that, very often, the real-time capacity on the B4 and B6 boundaries is well below the maximum level, often even below 50%.&lt;/p&gt;
    &lt;p&gt;We looked into these data for 2024 to give an idea of the pattern across the year and found that average available transfer capability on the two key boundaries in the North was in the region of 60%, with significant periods in the vicinity of 40%. The data are a little messy, but translating them into a MW reduction on the maximum possible capacity gives the chart in Figure 5. It is quite illuminating – not only have we, up to now, failed to add a 2 GW link across the congested Scottish boundaries, but B4 spent more than half of 2024 with an additional equivalent scale 2 GW reduction in operating capacity. The B6 reduction was even higher. Why?&lt;/p&gt;
    &lt;p&gt;Well, ironically, it is due to the implementation of network upgrades. Unfortunately, to upgrade the existing network or make a new connection into it, circuits must be taken out of service to perform the work safely. In one recent transparency forum, we asked NESO how long this work would last and whether upgrades in capacity could help to reduce constraint costs while we wait for the subsea links in 2029. The reply came: “Due to ongoing project work for increased power flow from North to South across two Transmission Owner (TO) regions and the interaction of the outage plans, increased capacity across the boundary will be limited and intermittent till 2029. The works include installing 2 phase shifting transformers to control the power flow, and upgrading an existing major power carrying corridor from 275kV to 400kV, benefits of which will be realised after all works are completed.”&lt;/p&gt;
    &lt;p&gt;All this begs the obvious question: how important has this operational reduction in capacity been to the curtailment volumes and costs we started out by discussing, particularly the step change in curtailed volumes from 2024? One of the authors of this blog, Callum MacIver, undertook a simplified analysis to give an idea of what the impact of additional network capacity across the B4 and B6 boundaries would have been since the start of 2024 up to the present. Using data, provided again by Robin Hawkes and his Wasted Wind website, the timeseries of combined wind curtailment was constructed from the beginning of 2024 to present. The peak half-hourly curtailed power averaged as much 7.4 GW. Assuming that the overwhelming majority of this constrained volume was in Scottish territory, Callum was able to look at three hypothetical cases in which available capacity over the period was a fixed 500 MW, 1000 MW and 2000 MW higher across both of the B4 and B6 boundaries than the reality. He then estimated the impact that each of these hypotheticals would have had on curtailed volumes and associated constraint costs over the period.&lt;/p&gt;
    &lt;p&gt;What we find is that even a modest increase in the capacity across these boundaries of 500 MW (well inside the amount by which the real capacity was reduced for the majority of the year) could have reduced curtailment costs by as much as 25% from the £1.65bn total in the 15 month period from the start of 2024 to the end of April 2025. A 1000 MW uplift in capacity would have tackled nearly half of the problem (45%) while if we’d delivered a 2000 MW uplift, in line with delivering the Peterhead Eastern Link project to its original schedule of 2023, then a full 73% of the thermal constraint costs could potentially have been avoided.&lt;/p&gt;
    &lt;p&gt;For 2024 only, we also ran a scenario where the B4 link was available at full capacity (with a matching MW uprating of B6) – this indicated a roughly 60% reduction in curtailment volumes and costs. It would seem that the issue of reduced operational capacity on the existing network – due largely to outages to facilitate increases in capacity – is at least as important a driving force behind present-day constraint levels as the issue of simply not having built enough new transmission capacity. The cavalry might be due in 2029 but it’s as if part of it is already here but taking up resources while it does its work. When both parts have done their work – the onshore reinforcements currently under way and the offshore EGLs – we can expect dramatic reductions in wind curtailment.&lt;/p&gt;
    &lt;p&gt;A number of thoughts flow from these findings:&lt;/p&gt;
    &lt;p&gt;Callum MacIver is a Research Fellow in the Department of Electronic and Electrical Engineering at University of Strathclyde. Keith Bell holds the Scottish Power Chair in Future Power Systems at University of Strathclyde. Both Callum and Keith are active in the UKERC research theme on Delivering Energy Infrastructure.&lt;/p&gt;
    &lt;p&gt;[1] See https://www.neso.energy/publications/beyond-2030&lt;/p&gt;
    &lt;p&gt;[2] See https://www.gov.uk/guidance/electricity-network-delivery-and-access&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ukerc.ac.uk/news/transmission-network-unavailability-the-quiet-driving-force-behind-rising-curtailment-costs-in-great-britain/"/><published>2025-10-07T10:42:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45502173</id><title>disk-perf-git-and-pnpm aims to prove that something is wrong with APFS on macOS</title><updated>2025-10-07T13:02:25.825346+00:00</updated><content>&lt;doc fingerprint="23acf9ad7b2715df"&gt;
  &lt;main&gt;
    &lt;p&gt;This repo aims to prove that something is wrong with APFS on macOS, but is also a good stress test in general when changing machine tooling that wants to oberve fs events (such as security tooling / EDR / virus scanners / etc).&lt;/p&gt;
    &lt;p&gt;Steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Setup&lt;/item&gt;
      &lt;item&gt;Gather Results&lt;/item&gt;
      &lt;item&gt;Report / PR with your Results ❤️&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;have &lt;code&gt;node&lt;/code&gt; @ &amp;gt;= 22.11
have &lt;code&gt;pnpm&lt;/code&gt; @ &amp;gt;= 10.2&lt;/p&gt;
    &lt;p&gt;(if you have proto (with auto-install) or volta installed, these versions will be selected for you)&lt;/p&gt;
    &lt;code&gt;git clone https://github.com/NullVoxPopuli/disk-perf-git-and-pnpm.git
cd disk-perf-git-and-pnpm

pnpm install # Fill the cache so we don't hit the network during testing&lt;/code&gt;
    &lt;p&gt;Since you've installed all the dependencies already, we can start with the clean test:&lt;/p&gt;
    &lt;code&gt;time ( git clean -Xfd; git clean -fd )&lt;/code&gt;
    &lt;p&gt;Windows Powershell:&lt;/p&gt;
    &lt;code&gt;(Measure-Command { git clean -Xfd; git clean -fd }).ToString()&lt;/code&gt;
    &lt;p&gt;And then once that finishes, we can run the install test:&lt;/p&gt;
    &lt;code&gt;time ( pnpm install )&lt;/code&gt;
    &lt;p&gt;Windows Powershell:&lt;/p&gt;
    &lt;code&gt;(Measure-Command { pnpm install }).ToString()&lt;/code&gt;
    &lt;head&gt;If using zsh&lt;/head&gt;
    &lt;p&gt;your time will be &lt;code&gt;total&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;0.01s user 0.00s system 94% cpu 0.007 total
#.                              ^ this number&lt;/code&gt;
    &lt;p&gt;and round to the tenths decimal place&lt;/p&gt;
    &lt;head&gt;if using bash&lt;/head&gt;
    &lt;p&gt;your time will be &lt;code&gt;real&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;real    2.02s # this number
user    0.00s
sys     0.01s&lt;/code&gt;
    &lt;p&gt;and round to the tenths decimal place&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Apple Menu&lt;/item&gt;
      &lt;item&gt;"About this Mac" (a window appears)&lt;/item&gt;
      &lt;item&gt;"More Info..." (a window appears)&lt;/item&gt;
      &lt;item&gt;scroll down and click "System Report..." (a window appears)&lt;/item&gt;
      &lt;item&gt;in the left nav of this third window, click "NVMExpress"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;and interact with the results here&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;Date&lt;/cell&gt;
        &lt;cell role="head"&gt;CPU&lt;/cell&gt;
        &lt;cell role="head"&gt;RAM (GB)&lt;/cell&gt;
        &lt;cell role="head"&gt;Clean (s)&lt;/cell&gt;
        &lt;cell role="head"&gt;Install (s)&lt;/cell&gt;
        &lt;cell role="head"&gt;OS&lt;/cell&gt;
        &lt;cell role="head"&gt;FileSystem&lt;/cell&gt;
        &lt;cell role="head"&gt;Disk&lt;/cell&gt;
        &lt;cell role="head"&gt;Notable Software Changes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-07&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 5 7640U 12 Core&lt;/cell&gt;
        &lt;cell&gt;92&lt;/cell&gt;
        &lt;cell&gt;6.8&lt;/cell&gt;
        &lt;cell&gt;5.9&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.1&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;WD Black SN850 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-24&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 5 7640U throttle to ~550Mhz&lt;/cell&gt;
        &lt;cell&gt;92&lt;/cell&gt;
        &lt;cell&gt;56&lt;/cell&gt;
        &lt;cell&gt;44&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.10&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;WD Black SN850 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-07&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 9 7900X 12/24 Core&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;6.0&lt;/cell&gt;
        &lt;cell&gt;4.3&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.1&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;Samsung SSD 980 Pro 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-07&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 9 7900X 12/24 Core&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;3.3&lt;/cell&gt;
        &lt;cell&gt;4.0&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.1&lt;/cell&gt;
        &lt;cell&gt;tmpfs (ramdisk)&lt;/cell&gt;
        &lt;cell&gt;G.Skill F5-6000J3040G32G&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-09&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Pro&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;42.2&lt;/cell&gt;
        &lt;cell&gt;44.0&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512R 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-08&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Max&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;31.5&lt;/cell&gt;
        &lt;cell&gt;44.2&lt;/cell&gt;
        &lt;cell&gt;macOS 14.7.3&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024R 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-08&lt;/cell&gt;
        &lt;cell&gt;Apple M4&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;29.6&lt;/cell&gt;
        &lt;cell&gt;31.4&lt;/cell&gt;
        &lt;cell&gt;macOS 15.2&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-09&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 7 7800X3D 8 Core&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;17.1&lt;/cell&gt;
        &lt;cell&gt;16.1&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 22.04.3&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;Corsair MP600 PRO LPX&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-09&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 7 7800X3D 8 Core&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;65.5&lt;/cell&gt;
        &lt;cell&gt;42.3&lt;/cell&gt;
        &lt;cell&gt;Windows 10 Pro 22H2&lt;/cell&gt;
        &lt;cell&gt;NTFS&lt;/cell&gt;
        &lt;cell&gt;Corsair MP600 PRO LPX&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-09&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 5 7800X3D 8 Core&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;69.5&lt;/cell&gt;
        &lt;cell&gt;73.3&lt;/cell&gt;
        &lt;cell&gt;Windows 11 Pro 23H2&lt;/cell&gt;
        &lt;cell&gt;NTFS&lt;/cell&gt;
        &lt;cell&gt;WD Black SN850x 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-09&lt;/cell&gt;
        &lt;cell&gt;AMD Ryzen 5 7800X3D 8 Core&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;23.7&lt;/cell&gt;
        &lt;cell&gt;19.0&lt;/cell&gt;
        &lt;cell&gt;W11 Pro 23H2 / WSL2 / Ubuntu 24.04&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;WD Black SN850x 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-10&lt;/cell&gt;
        &lt;cell&gt;Intel i5-1145G7 8 Core&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;1.9&lt;/cell&gt;
        &lt;cell&gt;15.3&lt;/cell&gt;
        &lt;cell&gt;Debian Trixie&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;BC711 NVMe SK hynix 512GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-12&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Max&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;87.7&lt;/cell&gt;
        &lt;cell&gt;macOS 14.6.1&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP2048R 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-12&lt;/cell&gt;
        &lt;cell&gt;Apple M4 Pro (14 Cores)&lt;/cell&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;30.1&lt;/cell&gt;
        &lt;cell&gt;65.1&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP2048Z 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-13&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Ultra&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;45.2&lt;/cell&gt;
        &lt;cell&gt;137.5&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024R 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-14&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (6 vCPU)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;3.2&lt;/cell&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z&lt;/cell&gt;
        &lt;cell&gt;Parallels VM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-14&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (6 vCPU)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;2.8&lt;/cell&gt;
        &lt;cell&gt;11.9&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04&lt;/cell&gt;
        &lt;cell&gt;Ext4 LVM2 Encrypted&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z&lt;/cell&gt;
        &lt;cell&gt;Parallels VM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-14&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (6 vCPU)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;1.6&lt;/cell&gt;
        &lt;cell&gt;10.7&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04&lt;/cell&gt;
        &lt;cell&gt;tmpfs (ramdisk)&lt;/cell&gt;
        &lt;cell&gt;Hynix LPDDR5 / Virtual RAM&lt;/cell&gt;
        &lt;cell&gt;Parallels VM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-15&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Pro&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;44.5&lt;/cell&gt;
        &lt;cell&gt;50.2&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512R 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-19&lt;/cell&gt;
        &lt;cell&gt;Apple M1&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;37.8&lt;/cell&gt;
        &lt;cell&gt;33.3&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3.1&lt;/cell&gt;
        &lt;cell&gt;APFS (Encypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512Q 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-19&lt;/cell&gt;
        &lt;cell&gt;Apple M1 Pro&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;59.4&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;macOS 14.7.3&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024R 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-21&lt;/cell&gt;
        &lt;cell&gt;Apple M3&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;36.23&lt;/cell&gt;
        &lt;cell&gt;30.3&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0256Z 256GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-20&lt;/cell&gt;
        &lt;cell&gt;Apple M4 Max (16 Cores)&lt;/cell&gt;
        &lt;cell&gt;128&lt;/cell&gt;
        &lt;cell&gt;36.7&lt;/cell&gt;
        &lt;cell&gt;64.5&lt;/cell&gt;
        &lt;cell&gt;macOS 15.2&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP2048Z 2TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-20&lt;/cell&gt;
        &lt;cell&gt;Apple M3&lt;/cell&gt;
        &lt;cell&gt;24&lt;/cell&gt;
        &lt;cell&gt;46.6&lt;/cell&gt;
        &lt;cell&gt;44.6&lt;/cell&gt;
        &lt;cell&gt;macOS ??&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-21&lt;/cell&gt;
        &lt;cell&gt;Intel Core i7 14700K (20 Cores)&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;3.1&lt;/cell&gt;
        &lt;cell&gt;13.8&lt;/cell&gt;
        &lt;cell&gt;W10 22H2 / WSL2 / Ubuntu 24.04&lt;/cell&gt;
        &lt;cell&gt;Ext4&lt;/cell&gt;
        &lt;cell&gt;WD Black 2TB SN850&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-22&lt;/cell&gt;
        &lt;cell&gt;Apple M3 Pro&lt;/cell&gt;
        &lt;cell&gt;18&lt;/cell&gt;
        &lt;cell&gt;37.7&lt;/cell&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z 1TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-24&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Pro&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;34.6&lt;/cell&gt;
        &lt;cell&gt;32.0&lt;/cell&gt;
        &lt;cell&gt;macOS 13.6&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512Z&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-25&lt;/cell&gt;
        &lt;cell&gt;Apple M3&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;34.213&lt;/cell&gt;
        &lt;cell&gt;27.851&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3.1&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-25&lt;/cell&gt;
        &lt;cell&gt;Apple M3 Pro (12 Core, 6p6e)&lt;/cell&gt;
        &lt;cell&gt;36&lt;/cell&gt;
        &lt;cell&gt;47.8&lt;/cell&gt;
        &lt;cell&gt;52.6&lt;/cell&gt;
        &lt;cell&gt;macOS 14.7.4&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512Z 500GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-25&lt;/cell&gt;
        &lt;cell&gt;Apple M3 Pro (12 Core, 6p6e)&lt;/cell&gt;
        &lt;cell&gt;36&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;53.3&lt;/cell&gt;
        &lt;cell&gt;macOS 14.7.4&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512Z 500GB&lt;/cell&gt;
        &lt;cell&gt;Spotlight disabled&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-25&lt;/cell&gt;
        &lt;cell&gt;Apple M3 Pro (12 Core, 6p6e)&lt;/cell&gt;
        &lt;cell&gt;36&lt;/cell&gt;
        &lt;cell&gt;26.3&lt;/cell&gt;
        &lt;cell&gt;19.9&lt;/cell&gt;
        &lt;cell&gt;macOS 14.7.4&lt;/cell&gt;
        &lt;cell&gt;APFS&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP0512Z 500GB&lt;/cell&gt;
        &lt;cell&gt;Spotlight disabled, &lt;code&gt;csrutil disable&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-26&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (12 Core, 8p4e)&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;41.4&lt;/cell&gt;
        &lt;cell&gt;39.8&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3.1&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z 1TB&lt;/cell&gt;
        &lt;cell&gt;Spotlight disabled, Kandji, SentinelOne&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-26&lt;/cell&gt;
        &lt;cell&gt;Apple M4 Pro (14 Cores) (6 core vCPU)&lt;/cell&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;2.5&lt;/cell&gt;
        &lt;cell&gt;16.9&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.10&lt;/cell&gt;
        &lt;cell&gt;Ext4 Unencrypted&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP2048Z 2TB&lt;/cell&gt;
        &lt;cell&gt;UTM VM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-28&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (6 vCPU)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;11.9&lt;/cell&gt;
        &lt;cell&gt;15.7&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.2&lt;/cell&gt;
        &lt;cell&gt;Ext4 LVM2 Encrypted&lt;/cell&gt;
        &lt;cell&gt;APPLE SSD AP1024Z&lt;/cell&gt;
        &lt;cell&gt;Parallels VM, SentinelOne&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-02-28&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (6 vCPU)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;9.1&lt;/cell&gt;
        &lt;cell&gt;13.3&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.2&lt;/cell&gt;
        &lt;cell&gt;tmpfs (ramdisk)&lt;/cell&gt;
        &lt;cell&gt;Hynix LPDDR5 / Virtual RAM&lt;/cell&gt;
        &lt;cell&gt;Parallels VM, SentinelOne&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-04-26&lt;/cell&gt;
        &lt;cell&gt;Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;103.98&lt;/cell&gt;
        &lt;cell&gt;116.62&lt;/cell&gt;
        &lt;cell&gt;macOS 15.4.1&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;Apple SSD AP1024N&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-04-27&lt;/cell&gt;
        &lt;cell&gt;Apple M4 Pro (14 Core, 10p4e)&lt;/cell&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;64.48&lt;/cell&gt;
        &lt;cell&gt;145.40&lt;/cell&gt;
        &lt;cell&gt;macOS 15.3.2&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;Apple SSD AP1024Z&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2025-04-27&lt;/cell&gt;
        &lt;cell&gt;Apple M4 Pro (14 Core, 10p4e)&lt;/cell&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;3.209&lt;/cell&gt;
        &lt;cell&gt;17.302&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 24.04.2&lt;/cell&gt;
        &lt;cell&gt;btrfs&lt;/cell&gt;
        &lt;cell&gt;Apple SSD AP1024Z&lt;/cell&gt;
        &lt;cell&gt;Ubuntu machine running in OrbStack&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;2025-10-06&lt;/cell&gt;
        &lt;cell&gt;Apple M2 Max (12 Core, 8p4e)&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;46.730&lt;/cell&gt;
        &lt;cell&gt;54.603&lt;/cell&gt;
        &lt;cell&gt;macOS 15.5&lt;/cell&gt;
        &lt;cell&gt;APFS (Encrypted)&lt;/cell&gt;
        &lt;cell&gt;Apple SSD AP1024Z 1TB&lt;/cell&gt;
        &lt;cell&gt;Kandji, Code42, SentinelOne, tested in excluded directory&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;If you're using macOS, and your file system performance is unbearable, there are some options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;https://gist.github.com/boxabirds/b92fec28c58e6c2cc9513f16c2bbeb91 &lt;list rend="ul"&gt;&lt;item&gt;Put everything in a RAM disk:&lt;/item&gt;&lt;item&gt;or OverlayFS via Docker&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;use a Linux VM to get ext4 speeds&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/NullVoxPopuli/disk-perf-git-and-pnpm"/><published>2025-10-07T12:14:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45502387</id><title>Provision (YC S22) Is Hiring</title><updated>2025-10-07T13:02:25.275190+00:00</updated><content>&lt;doc fingerprint="62df618ee7cc4f56"&gt;
  &lt;main&gt;
    &lt;p&gt;Ironclad for construction&lt;/p&gt;
    &lt;p&gt;Refer to our hiring document, here&lt;/p&gt;
    &lt;p&gt;We typically schedule three interviews that can be completed in the span of a week:&lt;/p&gt;
    &lt;p&gt;Provision makes collaborative document management software for the construction industry. Instead of manually reading through thousands of pages of documents and revisions, Provision organizes and extracts information so constructors can save hundreds of hours per bid and make more money.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ycombinator.com/companies/provision/jobs/JJ9fZxg-fullstack-software-engineer-in-person-toronto-canada"/><published>2025-10-07T12:41:40+00:00</published></entry></feed>