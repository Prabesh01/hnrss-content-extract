<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-31T02:25:08.521520+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45743232</id><title>Show HN: Front End Fuzzy and Substring and Prefix Search</title><updated>2025-10-31T02:25:19.397718+00:00</updated><content>&lt;doc fingerprint="fb17e2f42efbe30c"&gt;
  &lt;main&gt;
    &lt;p&gt;@m31coding/fuzzy-search is a frontend library for searching objects with ids (entities) by their names and features (terms). It is&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fast: A query takes usually well below 10 ms.&lt;/item&gt;
      &lt;item&gt;Accurate: Powered by a suffix array and n-grams with a novel approach of character sorting.&lt;/item&gt;
      &lt;item&gt;Multilingual: The language-agnostic design of the algorithm enables operation across all languages.&lt;/item&gt;
      &lt;item&gt;Flexible: Entities and their terms can be inserted, updated and removed.&lt;/item&gt;
      &lt;item&gt;Reliable: Well tested standalone library with no dependencies.&lt;/item&gt;
      &lt;item&gt;Universal: Works seamlessly in both frontend and backend (Node.js) environments.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Install the package via npm:&lt;/p&gt;
    &lt;code&gt;npm install @m31coding/fuzzy-search&lt;/code&gt;
    &lt;p&gt;The following files are available in the dist folder for different use cases:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;fuzzy-search.module.js (ESM)&lt;/item&gt;
      &lt;item&gt;fuzzy-search.cjs (CommonJS)&lt;/item&gt;
      &lt;item&gt;fuzzy-search.umd.js (UMD)&lt;/item&gt;
      &lt;item&gt;fuzzy-search.modern.js (Modern mode)&lt;/item&gt;
      &lt;item&gt;fuzzy-search.d.ts (TypeScript definitions)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This library uses microbundle. Please consult their documentation for more information on how to use the different files.&lt;/p&gt;
    &lt;p&gt;The most important definitions can be found in the folder interfaces. For creating a searcher, use the SearcherFactory. Here is a basic usage example (esm module syntax):&lt;/p&gt;
    &lt;code&gt;import * as fuzzySearch from './path/to/fuzzy-search.module.js';

const searcher = fuzzySearch.SearcherFactory.createDefaultSearcher();

const persons = [
  { id: 23501, firstName: 'Alice', lastName: 'King' },
  { id: 99234, firstName: 'Bob', lastName: 'Bishop' },
  { id: 5823, firstName: 'Carol', lastName: 'Queen' },
  { id: 11923, firstName: 'Charlie', lastName: 'Rook' }
];

function log&amp;lt;T&amp;gt;(obj: T): void {
  console.log(JSON.stringify(obj, null, 2));
}

const indexingMeta = searcher.indexEntities(
  persons,
  (e) =&amp;gt; e.id,
  (e) =&amp;gt; [e.firstName, e.lastName, `${e.firstName} ${e.lastName}`]
);
log(indexingMeta);
/* {
  "entries": {
    "numberOfTerms": 12,
    "indexingDurationTotal": 1,
    ...
  }
} */

const result = searcher.getMatches(new fuzzySearch.Query('alice kign'));
log(result);
/* {
  "matches": [
    {
      "entity": {
        "id": 23501,
        "firstName": "Alice",
        "lastName": "King"
      },
      "quality": 0.8636363636363635,
      "matchedString": "Alice King"
    }
  ],
  "query": {
    "string": "alice kign",
    "topN": 10,
    "searchers": [
      {
        "type": "fuzzy",
        "minQuality": 0.3
      },
      {
        "type": "substring",
        "minQuality": 0
      },
      {
        "type": "prefix",
        "minQuality": 0
      }
    ]
  },
  "meta": {
    "entries": {
      "queryDuration": 1
    }
  }
} */

const removalResult = searcher.removeEntities([99234, 5823]);
log(removalResult);
/* {
  "removedEntities": [
    99234,
    5823
  ],
  "meta": {
    "entries": {
      "removalDuration": 0
    }
  }
} */

const persons2 = [
  { id: 723, firstName: 'David', lastName: 'Knight' }, // new
  { id: 2634, firstName: 'Eve', lastName: 'Pawn' }, // new
  { id: 23501, firstName: 'Allie', lastName: 'King' }, // updated
  { id: 11923, firstName: 'Charles', lastName: 'Rook' } // updated
];

const upsertMeta = searcher.upsertEntities(
  persons2,
  (e) =&amp;gt; e.id,
  (e) =&amp;gt; [e.firstName, e.lastName, `${e.firstName} ${e.lastName}`]
);
log(upsertMeta);
/* {
  "entries": {
    "numberOfTerms": 12,
    "upsertDuration": 0,
    ...
  }
} */

const result2 = searcher.getMatches(new fuzzySearch.Query('allie'));
log(result2);
/* {
  "matches": [
    {
      "entity": {
        "id": 23501,
        "firstName": "Allie",
        "lastName": "King"
      },
      "quality": 3,
      "matchedString": "Allie"
    }
  ],
  "query": {
    "string": "allie",
    "topN": 10,
    "searchers": [
      {
        "type": "fuzzy",
        "minQuality": 0.3
      },
      {
        "type": "substring",
        "minQuality": 0
      },
      {
        "type": "prefix",
        "minQuality": 0
      }
    ]
  },
  "meta": {
    "entries": {
      "queryDuration": 0
    }
  }
} */&lt;/code&gt;
    &lt;p&gt;The following parameters are available when creating a query:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Parameter&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Default&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;The query string.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;topN&lt;/cell&gt;
        &lt;cell&gt;number&lt;/cell&gt;
        &lt;cell&gt;10&lt;/cell&gt;
        &lt;cell&gt;The maximum number of matches to return. Provide Infinity to return all matches.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;searchers&lt;/cell&gt;
        &lt;cell&gt;SearcherSpec[]&lt;/cell&gt;
        &lt;cell&gt;[new FuzzySearcher(0.3), new SubstringSearcher(0), new PrefixSearcher(0)]&lt;/cell&gt;
        &lt;cell&gt;The searchers to use and the minimum quality thresholds for their matches.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;A fuzzy search minimum quality threshold below 0.3 is not recommended, as the respective matches are most likely irrelevant.&lt;/p&gt;
    &lt;p&gt;If the data terms contain characters and strings in non-latin scripts (such as Arabic, Cyrillic, Greek, Han, ... see also ISO 15924), the default configuration must be adjusted before creating the searcher:&lt;/p&gt;
    &lt;code&gt;const config = fuzzySearch.Config.createDefaultConfig();
config.normalizerConfig.allowCharacter = (_c) =&amp;gt; true;
const searcher = fuzzySearch.SearcherFactory.createSearcher(config);&lt;/code&gt;
    &lt;p&gt;Moreover, if your dataset is large (&amp;gt; 100.000 terms), you may index the searcher in a web worker to avoid blocking the main thread, as shown in this usage example.&lt;/p&gt;
    &lt;p&gt;If your objects cannot be identified by a unique id, you can also pass &lt;code&gt;(e) =&amp;gt; e&lt;/code&gt; for the &lt;code&gt;getId&lt;/code&gt; parameter of both &lt;code&gt;indexEntities&lt;/code&gt; and &lt;code&gt;upsertEntities&lt;/code&gt;. Just be aware that the &lt;code&gt;getId&lt;/code&gt; function is used for equality checks and the creation of Maps, particularly utilized by the &lt;code&gt;upsertEntities&lt;/code&gt; and &lt;code&gt;removeEntities&lt;/code&gt; methods. For indexing plain strings, you can call:&lt;/p&gt;
    &lt;code&gt;const indexingMeta = searcher.indexEntities(
  ["Alice", "Bob", "Carol", "Charlie"],
  (e) =&amp;gt; e,
  (e) =&amp;gt; [e]
);&lt;/code&gt;
    &lt;p&gt;To try the demo and usage examples locally, clone the repository and execute the commands:&lt;/p&gt;
    &lt;code&gt;npm install
npm run build&lt;/code&gt;
    &lt;p&gt;To proceed, open the html file of interest (e.g., &lt;code&gt;fuzzy-search-demo.html&lt;/code&gt;) with a local webserver. If you use VS Code, you may use the Live Server extension for this purpose.&lt;/p&gt;
    &lt;p&gt;This library was optimized for fast querying. At its core, a searcher employs integer indexes that can not be easily updated. The upsert operation is implemented by reindexing a secondary searcher, which is initially empty. Removal is implemented by blacklisting entities.&lt;/p&gt;
    &lt;p&gt;Consequently, repeated upsert operations with a large number of entities may be costly. In such cases, consider reindexing the searcher from scratch by calling the &lt;code&gt;index&lt;/code&gt; method eventually.&lt;/p&gt;
    &lt;p&gt;Query strings and data terms are normalized in the following normalization pipeline (order matters):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Null and undefined strings are replaced by an empty string.&lt;/item&gt;
      &lt;item&gt;Strings are lowercased and normalized to NFKC.&lt;/item&gt;
      &lt;item&gt;Replacements are applied to characters such as å -&amp;gt; aa, æ -&amp;gt; ae. See also Latin replacements.&lt;/item&gt;
      &lt;item&gt;Strings are normalized to NFKD.&lt;/item&gt;
      &lt;item&gt;Space equivalent characters are replaced by a space.&lt;/item&gt;
      &lt;item&gt;Surrogate characters, padding characters and other non-allowed characters are removed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;
      &lt;p&gt;Normalization to NFKC decomposes characters by compatibility, then re-composes them by canonical equivalence. This ensures that the characters in the replacement table always match. Normalization to NFKD decomposes the characters by compatibility but does not re-compose them, allowing undesired characters to be removed thereafter.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The default normalizer config adopts the following values:&lt;/p&gt;
    &lt;code&gt;config.normalizerConfig.replacements = [fuzzySearch.LatinReplacements.Value];
let spaceEquivalentCharacters = new Set(['_', '-', '–', '/', ',', '\t']);
config.normalizerConfig.treatCharacterAsSpace = (c) =&amp;gt; spaceEquivalentCharacters.has(c);
config.normalizerConfig.allowCharacter = (c) =&amp;gt; {
  return fuzzySearch.StringUtilities.isAlphanumeric(c);
};&lt;/code&gt;
    &lt;p&gt;With this pipeline and configuration, the string &lt;code&gt;Thanh Việt Đoàn&lt;/code&gt; is normalized to &lt;code&gt;thanh viet doan&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The general idea of n-grams and the sorting trick is outlined in this blog post. In short, the data terms and the query string are padded on the left, right and middle (replacement of spaces) with &lt;code&gt;$$&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, and &lt;code&gt;!$$&lt;/code&gt;, respectively, before they are broken down into 3-grams. For example, the string &lt;code&gt;sarah&lt;/code&gt; becomes &lt;code&gt;$$sarah!&lt;/code&gt; after padding and the resulting 3-grams are:&lt;/p&gt;
    &lt;code&gt;$$s, $sa, sar, ara, rah, ah!
&lt;/code&gt;
    &lt;p&gt;The more common 3-grams between the query and the term, the higher the quality of the match. By padding the front with two characters, and the back with one character, more weight is given to the beginning of the string.&lt;/p&gt;
    &lt;p&gt;In addition, the characters of the 3-grams that don't contain '$' are sorted:&lt;/p&gt;
    &lt;code&gt;$$s, $sa, ars, aar, ahr, !ah
&lt;/code&gt;
    &lt;p&gt;Sorting the characters increases the number of common n-grams for transposition errors, one of the most common types of errors in human typing. Not sorting the first n-grams assumes that transpositions are less likely to occur at the beginning of a string.&lt;/p&gt;
    &lt;p&gt;The quality is then computed by dividing the number of common n-grams by the number of n-grams of the longer string, query or term. Moreover, a 5% penalty is given if the query string does not match the term exactly. This accounts for the fact that even if two strings have the same 3-grams, they are not necessarily the same, i.e., compare &lt;code&gt;aabaaa&lt;/code&gt; and &lt;code&gt;aaabaa&lt;/code&gt;. With this approach, the following quality values are obtained:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Query&lt;/cell&gt;
        &lt;cell role="head"&gt;Term&lt;/cell&gt;
        &lt;cell role="head"&gt;Padded query&lt;/cell&gt;
        &lt;cell role="head"&gt;Padded term&lt;/cell&gt;
        &lt;cell role="head"&gt;Common 3-grams&lt;/cell&gt;
        &lt;cell role="head"&gt;Quality&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;$$sarah!&lt;/cell&gt;
        &lt;cell&gt;$$sarah!&lt;/cell&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;6 / 6 = 1.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;sarha&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;$$arah!&lt;/cell&gt;
        &lt;cell&gt;$$sarah!&lt;/cell&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;5 / 6 * 0.95 = 0.79&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;sar&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;$$sar!&lt;/cell&gt;
        &lt;cell&gt;$$sarah!&lt;/cell&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;3 / 6 * 0.95 = 0.475&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;arah&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;$$arah!&lt;/cell&gt;
        &lt;cell&gt;$$sarah!&lt;/cell&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;3 / 6 * 0.95 = 0.475&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;quote&gt;
      &lt;p&gt;Note that I refrain from explicitly computing the Damereau-Levenshtein distance between strings, in order to keep the queries fast.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Padding strings in the middle allows for extending the algorithm across word boundaries. &lt;code&gt;sarah wolff&lt;/code&gt; becomes &lt;code&gt;$$sarah!$$wolff!&lt;/code&gt; and matches &lt;code&gt;wolff sarah&lt;/code&gt; with a quality of 0.95, if 3-grams that end with a '$' are discarded.&lt;/p&gt;
    &lt;p&gt;The overall approach outlined above can be summarized as: remove n-grams that end with '$', sort n-grams that don't contain '$'. The default fuzzy search configuration appears in the code as follows:&lt;/p&gt;
    &lt;code&gt;config.fuzzySearchConfig.paddingLeft = '$$';
config.fuzzySearchConfig.paddingRight = '!';
config.fuzzySearchConfig.paddingMiddle = '!$$';
config.fuzzySearchConfig.ngramN = 3;
config.fuzzySearchConfig.transformNgram = (ngram) =&amp;gt;
  ngram.endsWith('$') ? null
  : ngram.indexOf('$') === -1 ? ngram.split('').sort().join('')
  : ngram;
config.fuzzySearchConfig.inequalityPenalty = 0.05;&lt;/code&gt;
    &lt;p&gt;Substring and prefix search is realized with a single suffix array created by An efficient, versatile approach to suffix sorting.&lt;/p&gt;
    &lt;p&gt;The base quality of a prefix or substring match is simply computed by dividing the query length by the term length. For example, the query &lt;code&gt;sa&lt;/code&gt; matches the term &lt;code&gt;sarah&lt;/code&gt; with a quality of 2/5 = 0.4, and the query &lt;code&gt;ara&lt;/code&gt; matches the same term with a quality of 3/5 = 0.6.&lt;/p&gt;
    &lt;p&gt;A quality offset of +2 and +1 is added to prefix and substring matches, respectively, as explained in the next section.&lt;/p&gt;
    &lt;p&gt;The final qualities of the examples are:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Query&lt;/cell&gt;
        &lt;cell role="head"&gt;Term&lt;/cell&gt;
        &lt;cell role="head"&gt;Searcher&lt;/cell&gt;
        &lt;cell role="head"&gt;Quality&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;sa&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;Prefix&lt;/cell&gt;
        &lt;cell&gt;2 / 5 + 2 = 2.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;ara&lt;/cell&gt;
        &lt;cell&gt;sarah&lt;/cell&gt;
        &lt;cell&gt;Substring&lt;/cell&gt;
        &lt;cell&gt;3 / 5 + 1 = 1.6&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The default configuration for the searchers is as follows:&lt;/p&gt;
    &lt;code&gt;config.substringSearchConfig.suffixArraySeparator = '$';&lt;/code&gt;
    &lt;p&gt;The matches of the searchers are mixed with a simple approach. Prefix matches get a quality offset of +2, substring matches of +1, and fuzzy matches keep their original quality. The rationale is that, for the same query length, prefix matches are more relevant than substring matches. Additionally, fuzzy matches are only relevant if there are no prefix or substring matches.&lt;/p&gt;
    &lt;p&gt;The default configuration has been chosen carefully. There are only a few specific scenarios that require adjustments. Consult the file default-config.ts for all configuration options and their default values.&lt;/p&gt;
    &lt;p&gt;This library is free. If you find it valuable and wish to express your support, please leave a star. You are kindly invited to contribute. If you see the possibility for enhancement, please create a GitHub issue and you will receive timely feedback.&lt;/p&gt;
    &lt;p&gt;Happy coding!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/m31coding/fuzzy-search"/><published>2025-10-29T06:12:46+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45746020</id><title>Zig's New Async I/O</title><updated>2025-10-31T02:25:18.908850+00:00</updated><content>&lt;doc fingerprint="cf269e50298fb69c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Zig's New Async I/O (Text Version)&lt;/head&gt;
    &lt;p&gt;In celebration of the std.Io introduction patchset landing today, here is the text version of a short, interactive demo I gave at Zigtoberfest 2025.&lt;/p&gt;
    &lt;p&gt;This is a preview of the new async I/O primitives that will be available in the upcoming Zig 0.16.0, to be released in about 3-4 months. There is a lot more to get into, but for now here is an introduction into some of the core synchronization API that will be available for all Zig code to use.&lt;/p&gt;
    &lt;p&gt;To begin, let's try to keep it simple and understand the basics, and then we'll then slowly add more asynchronous things into it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 0&lt;/head&gt;
    &lt;p&gt;With our first example, there is nothing asynchronous here. It's basically "Hello, World!" in Zig.&lt;/p&gt;
    &lt;code&gt;const std = @import("std");

pub fn main() !void {
    doWork();
}

fn doWork() void {
    std.debug.print("working\n", .{});
    var timespec: std.posix.timespec = .{ .sec = 1, .nsec = 0 };
    _ = std.posix.system.nanosleep(&amp;amp;timespec, &amp;amp;timespec);
}&lt;/code&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example0.zig 0s working 1s $&lt;/quote&gt;
    &lt;head rend="h2"&gt;Example 1&lt;/head&gt;
    &lt;p&gt;Next, we're going to set up a little bit. Still not using async/await yet, but I need some tools in my toolbox before we add complexity.&lt;/p&gt;
    &lt;code&gt;const std = @import("std");
const Io = std.Io;
const Allocator = std.mem.Allocator;
const assert = std.debug.assert;

fn juicyMain(gpa: Allocator, io: Io) !void {
    _ = gpa;

    doWork(io);
}

fn doWork(io: Io) void {
    std.debug.print("working\n", .{});
    io.sleep(.fromSeconds(1), .awake) catch {};
}

pub fn main() !void {
    // Set up allocator.
    var debug_allocator: std.heap.DebugAllocator(.{}) = .init;
    defer assert(debug_allocator.deinit() == .ok);
    const gpa = debug_allocator.allocator();

    // Set up our I/O implementation.
    var threaded: std.Io.Threaded = .init(gpa);
    defer threaded.deinit();
    const io = threaded.io();

    return juicyMain(gpa, io);
}&lt;/code&gt;
    &lt;p&gt;Output (same as before):&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example0.zig 0s working 1s $&lt;/quote&gt;
    &lt;p&gt;Setting up a &lt;code&gt;std.Io&lt;/code&gt; implementation is a lot like setting up an allocator.
You typically do it once, in main(), and then pass the instance throughout the application.
Reusable code should accept an Allocator parameter if it needs to allocate, and it should accept
an Io parameter if it needs to perform I/O operations.&lt;/p&gt;
    &lt;p&gt;In this case, this is an Io implementation based on threads. This is not using KQueue, this is not using IO_Uring, this is not using an event loop. It is a threaded implementation of the new &lt;code&gt;std.Io&lt;/code&gt; interface.&lt;/p&gt;
    &lt;p&gt;This setup will be the same in all the examples, so now we can focus on our example code, which is the same as last time. Still nothing interesting - we just call &lt;code&gt;doWork&lt;/code&gt; which of course is just calling sleep().&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 2&lt;/head&gt;
    &lt;p&gt;Redundant setup code omitted from here on out.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    _ = gpa;

    var future = io.async(doWork, .{io});

    future.await(io); // idempotent
}

fn doWork(io: Io) void {
    std.debug.print("working\n", .{});
    io.sleep(.fromSeconds(1), .awake) catch {};
}&lt;/code&gt;
    &lt;p&gt;Output (same as before):&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example0.zig 0s working 1s $&lt;/quote&gt;
    &lt;p&gt;Now we're using async/await to call doWork. What async/await means to Zig is to decouple the calling of the function to the returning of the function.&lt;/p&gt;
    &lt;p&gt;This code is the same as before. It's exactly the same, because we didn't put any code between the async and await. We do the call, and then immediately wait for the return.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 3&lt;/head&gt;
    &lt;p&gt;In the next example, we have two things at the same time:&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    _ = gpa;

    var a = io.async(doWork, .{ io, "hard" });
    var b = io.async(doWork, .{ io, "on an excuse not to drink Spezi" });

    a.await(io);
    b.await(io);
}

fn doWork(io: Io, flavor_text: []const u8) void {
    std.debug.print("working {s}\n", .{flavor_text});
    io.sleep(.fromSeconds(1), .awake) catch {};
}&lt;/code&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example3.zig 0s working on an excuse not to drink Spezi 0s working hard 1s $&lt;/quote&gt;
    &lt;p&gt;If you look carefully, you can see that it did not wait two seconds; it waited one second because these operations are happening at the same time. This demonstrates why using async/await is useful - you can express asynchrony. Depending on the I/O implementation that you choose, it may be able to take advantage of the asynchrony that you have expressed and make your code go faster. For example in this case, &lt;code&gt;std.Io.Threaded&lt;/code&gt; was able to do two seconds of work in one second
of actual time.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 4&lt;/head&gt;
    &lt;p&gt;Let's start to bring the example closer to a real world scenario by introducing failure.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    var a = io.async(doWork, .{ gpa, io, "hard" });
    var b = io.async(doWork, .{ gpa, io, "on an excuse not to drink Spezi" });

    try a.await(io);
    try b.await(io);
}

fn doWork(gpa: Allocator, io: Io, flavor_text: []const u8) !void {
    // Simulate an error occurring:
    if (flavor_text[0] == 'h') return error.OutOfMemory;

    const copied_string = try gpa.dupe(u8, flavor_text);
    defer gpa.free(copied_string);
    std.debug.print("working {s}\n", .{copied_string});
    io.sleep(.fromSeconds(1), .awake) catch {};
}&lt;/code&gt;
    &lt;p&gt;It's the same code as before, except the first task will return an error.&lt;/p&gt;
    &lt;p&gt;Guess what happens when this code is run?&lt;/p&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example4.zig 0s working on an excuse not to drink Spezi 1s error(gpa): memory address 0x7f99ce6c0080 leaked: 1s /home/andy/src/zig/lib/std/Io/Threaded.zig:466:67: 0x1053aae in async (std.zig) 1s const ac: *AsyncClosure = @ptrCast(@alignCast(gpa.alignedAlloc(u8, .of(AsyncClosure), n) catch { 1s ^ 1s /home/andy/src/zig/lib/std/Io.zig:1548:40: 0x1164f94 in async__anon_27344 (std.zig) 1s future.any_future = io.vtable.async( 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example4.zig:8:21: 0x116338a in juicyMain (example4.zig) 1s var b = io.async(doWork, .{ gpa, io, "on an excuse not to drink Spezi" }); 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example4.zig:35:21: 0x1163663 in main (example4.zig) 1s return juicyMain(gpa, io); 1s ^ 1s /home/andy/src/zig/lib/std/start.zig:696:37: 0x1163c83 in callMain (std.zig) 1s const result = root.main() catch |err| { 1s ^ 1s /home/andy/src/zig/lib/std/start.zig:237:5: 0x1162f61 in _start (std.zig) 1s asm volatile (switch (native_arch) { 1s ^ 1s 1s thread 1327233 panic: reached unreachable code 1s error return context: 1s /home/andy/src/zig/lib/std/Io.zig:1003:13: 0x11651a8 in await (std.zig) 1s return f.result; 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example4.zig:10:5: 0x11633e8 in juicyMain (example4.zig) 1s try a.await(io); 1s ^ 1s 1s stack trace: 1s /home/andy/src/zig/lib/std/debug.zig:409:14: 0x103e5a9 in assert (std.zig) 1s if (!ok) unreachable; // assertion failure 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example4.zig:27:17: 0x1163698 in main (example4.zig) 1s defer assert(debug_allocator.deinit() == .ok); 1s ^ 1s /home/andy/src/zig/lib/std/start.zig:696:37: 0x1163c83 in callMain (std.zig) 1s const result = root.main() catch |err| { 1s ^ 1s /home/andy/src/zig/lib/std/start.zig:237:5: 0x1162f61 in _start (std.zig) 1s asm volatile (switch (native_arch) { 1s ^ 1s fish: Job 1, 'zig run example4.zig' terminated by signal SIGABRT (Abort) 1s $&lt;/quote&gt;
    &lt;p&gt;The problem is that when the first &lt;code&gt;try&lt;/code&gt; activates, it skips the second &lt;code&gt;await&lt;/code&gt; which
is then caught by the leak checker.&lt;/p&gt;
    &lt;p&gt;This is a bug. It's unfortunate though, isn't it? Because we would like to write the code this way.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 5&lt;/head&gt;
    &lt;p&gt;Here's a fix:&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    var a = io.async(doWork, .{ gpa, io, "hard" });
    var b = io.async(doWork, .{ gpa, io, "on an excuse not to drink Spezi" });

    const a_result = a.await(io);
    const b_result = b.await(io);

    try a_result;
    try b_result;
}

fn doWork(gpa: Allocator, io: Io, flavor_text: []const u8) !void {
    // Simulate an error occurring:
    if (flavor_text[0] == 'h') return error.OutOfMemory;

    const copied_string = try gpa.dupe(u8, flavor_text);
    defer gpa.free(copied_string);
    std.debug.print("working {s}\n", .{copied_string});
    io.sleep(.fromSeconds(1), .awake) catch {};
}&lt;/code&gt;
    &lt;p&gt;We do the awaits, then we do the tries. This will fix the problem.&lt;/p&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example5.zig 0s working on an excuse not to drink Spezi 1s error: OutOfMemory 1s /home/andy/src/zig/lib/std/Io.zig:1003:13: 0x11651d8 in await (std.zig) 1s return f.result; 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example5.zig:13:5: 0x1163416 in juicyMain (example5.zig) 1s try a_result; 1s ^ 1s /home/andy/misc/talks/zigtoberfest/async-io-examples/example5.zig:38:5: 0x11636e9 in main (example5.zig) 1s return juicyMain(gpa, io); 1s ^ 1s $&lt;/quote&gt;
    &lt;p&gt;This failed successfully. The error was handled and no resources leaked. But it's a footgun. Let's find a better way to express this...&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 6&lt;/head&gt;
    &lt;p&gt;This is where cancellation comes in. cancellation is an extremely handy primitive, because now we can use &lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, and &lt;code&gt;await&lt;/code&gt; like normal,
and not only do we fix the bug, but we also get more optimal code.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    var a = io.async(doWork, .{ gpa, io, "hard" });
    defer a.cancel(io) catch {};

    var b = io.async(doWork, .{ gpa, io, "on an excuse not to drink Spezi" });
    defer b.cancel(io) catch {};

    try a.await(io);
    try b.await(io);
}

fn doWork(gpa: Allocator, io: Io, flavor_text: []const u8) !void {
    // Simulate an error occurring:
    if (flavor_text[0] == 'h') return error.OutOfMemory;

    const copied_string = try gpa.dupe(u8, flavor_text);
    defer gpa.free(copied_string);
    std.debug.print("working {s}\n", .{copied_string});
    io.sleep(.fromSeconds(1), .awake) catch {};
}&lt;/code&gt;
    &lt;p&gt;Thanks to cancellation, we now get instant results, because the moment that the first task returns an error, the cancels get run.&lt;/p&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example6.zig 0s working on an excuse not to drink Spezi 0s error: OutOfMemory 0s /home/andy/misc/talks/zigtoberfest/async-io-examples/example6.zig:13:5: 0x116348c in juicyMain (example6.zig) 0s try a.await(io); 0s ^ 0s /home/andy/misc/talks/zigtoberfest/async-io-examples/example6.zig:38:5: 0x1163909 in main (example6.zig) 0s return juicyMain(gpa, io); 0s ^ 0s $&lt;/quote&gt;
    &lt;p&gt;&lt;code&gt;cancel&lt;/code&gt; is your best friend, because it's going to prevent you from leaking the
resource, and it's going to make your code run more optimally.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;cancel&lt;/code&gt; is trivial to understand: it has identical semantics as &lt;code&gt;await&lt;/code&gt;, except
that it also requests cancellation. The conditions under which cancellation requests are honored
are defined by each I/O implementation.&lt;/p&gt;
    &lt;p&gt;Both &lt;code&gt;cancel&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are idempotent with respect to themselves and each other.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 7&lt;/head&gt;
    &lt;p&gt;Next, let's introduce another real-world scenario: resource allocation. In this case, we allocate a string on success, which the caller needs to manage.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(gpa: Allocator, io: Io) !void {
    var a = io.async(doWork, .{ gpa, io, "hard" });
    defer if (a.cancel(io)) |s| gpa.free(s) else |_| {};

    var b = io.async(doWork, .{ gpa, io, "on an excuse not to drink Spezi" });
    defer if (b.cancel(io)) |s| gpa.free(s) else |_| {};

    const a_string = try a.await(io);
    const b_string = try b.await(io);
    std.debug.print("finished {s}\n", .{a_string});
    std.debug.print("finished {s}\n", .{b_string});
}

fn doWork(gpa: Allocator, io: Io, flavor_text: []const u8) ![]u8 {
    const copied_string = try gpa.dupe(u8, flavor_text);
    std.debug.print("working {s}\n", .{copied_string});
    io.sleep(.fromSeconds(1), .awake) catch {};
    return copied_string;
}&lt;/code&gt;
    &lt;p&gt;Now we see why &lt;code&gt;cancel&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; have the same API.
The deferred cancel calls above free the allocated resource, handling both
successful calls (resource allocated) and failed calls (resource not allocated).&lt;/p&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example7.zig 0s working on an excuse not to drink Spezi 0s working hard 1s finished hard 1s finished on an excuse not to drink Spezi 1s $&lt;/quote&gt;
    &lt;p&gt;The important thing here is that by doing resource management like this, we are able to write standard, idiomatic Zig code below, using &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt;
like normal without worrying about special resource management cases.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 8&lt;/head&gt;
    &lt;p&gt;Now we're switching gears a little bit. It's time to learn why asynchrony is not concurrency.&lt;/p&gt;
    &lt;p&gt;In this example we have a producer sending one item across an unbuffered queue to a consumer.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(io: Io) !void {
    var queue: Io.Queue([]const u8) = .init(&amp;amp;.{});

    var producer_task = io.async(producer, .{
        io, &amp;amp;queue, "never gonna give you up",
    });
    defer producer_task.cancel(io) catch {};

    var consumer_task = io.async(consumer, .{ io, &amp;amp;queue });
    defer _ = consumer_task.cancel(io) catch {};

    const result = try consumer_task.await(io);
    std.debug.print("message received: {s}\n", .{result});
}

fn producer(
    io: Io,
    queue: *Io.Queue([]const u8),
    flavor_text: []const u8,
) !void {
    try queue.putOne(io, flavor_text);
}

fn consumer(
    io: Io,
    queue: *Io.Queue([]const u8),
) ![]const u8 {
    return queue.getOne(io);
}&lt;/code&gt;
    &lt;p&gt;We use &lt;code&gt;async&lt;/code&gt; to spawn the producer and &lt;code&gt;async&lt;/code&gt; to spawn the consumer.&lt;/p&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example8.zig 0s message received: never gonna give you up 0s $&lt;/quote&gt;
    &lt;p&gt;This incorrectly succeeds. Depending on your perspective, we either got "lucky" or "unlucky" due to the thread pool having spare concurrency that happened to be available.&lt;/p&gt;
    &lt;p&gt;To observe the problem, we can artificially limit the &lt;code&gt;std.Io.Threaded&lt;/code&gt; instance to
use a thread pool size of one:&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 9&lt;/head&gt;
    &lt;code&gt;// Set up our I/O implementation.
    var threaded: std.Io.Threaded = .init(gpa);
    threaded.cpu_count = 1;
    defer threaded.deinit();
    const io = threaded.io();

    return juicyMain(io);
}&lt;/code&gt;
    &lt;p&gt;Output: (deadlock)&lt;/p&gt;
    &lt;p&gt;Now that it's only using one thread, it deadlocks, because the consumer is waiting to get something from the queue, and the producer is scheduled to run, but it has not run yet.&lt;/p&gt;
    &lt;p&gt;The problem is that we needed concurrency, but we asked for asynchrony.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example 10&lt;/head&gt;
    &lt;p&gt;In order to fix this, we use &lt;code&gt;io.concurrent&lt;/code&gt; instead of &lt;code&gt;io.async&lt;/code&gt;.
This one can fail with &lt;code&gt;error.ConcurrencyUnavailable&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;fn juicyMain(io: Io) !void {
    var queue: Io.Queue([]const u8) = .init(&amp;amp;.{});

    var producer_task = try io.concurrent(producer, .{
        io, &amp;amp;queue, "never gonna give you up",
    });
    defer producer_task.cancel(io) catch {};

    var consumer_task = try io.concurrent(consumer, .{ io, &amp;amp;queue });
    defer _ = consumer_task.cancel(io) catch {};

    const result = try consumer_task.await(io);
    std.debug.print("message received: {s}\n", .{result});
}

fn producer(
    io: Io,
    queue: *Io.Queue([]const u8),
    flavor_text: []const u8,
) !void {
    try queue.putOne(io, flavor_text);
}

fn consumer(
    io: Io,
    queue: *Io.Queue([]const u8),
) ![]const u8 {
    return queue.getOne(io);
}&lt;/code&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;quote&gt;0s $ zig run example10.zig 0s message received: never gonna give you up 0s $&lt;/quote&gt;
    &lt;p&gt;Now the code is fixed because we correctly expressed that we needed concurrency, which &lt;code&gt;std.Io.Threaded&lt;/code&gt; honored by oversubscribing.&lt;/p&gt;
    &lt;p&gt;If I add &lt;code&gt;-fsingle-threaded&lt;/code&gt; which truly limits the executable to one thread,
oversubscription is not available, causing this output:&lt;/p&gt;
    &lt;quote&gt;error: ConcurrencyUnavailable /home/andy/src/zig/lib/std/Io/Threaded.zig:529:34: 0x1051863 in concurrent (std.zig) if (builtin.single_threaded) return error.ConcurrencyUnavailable; ^ /home/andy/src/zig/lib/std/Io.zig:1587:25: 0x1158b5f in concurrent__anon_26591 (std.zig) future.any_future = try io.vtable.concurrent( ^ /home/andy/misc/talks/zigtoberfest/async-io-examples/example10.zig:9:25: 0x1157198 in juicyMain (example10.zig) var producer_task = try io.concurrent(producer, .{ ^ /home/andy/misc/talks/zigtoberfest/async-io-examples/example10.zig:48:5: 0x115776a in main (example10.zig) return juicyMain(io); ^&lt;/quote&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;There are proof-of-concept &lt;code&gt;std.Io&lt;/code&gt; implementations using IoUring and KQueue combined
with stackful coroutines which show a lot of promise, however that work depends on some language
enhancements to be practical. There is also ongoing design work about stackless coroutines. Here
are some relevant issues to track for those interested:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Restricted Function Types&lt;/item&gt;
      &lt;item&gt;Builtin function to tell you the maximum stack size of a given function&lt;/item&gt;
      &lt;item&gt;Eliminate Stack Overflow&lt;/item&gt;
      &lt;item&gt;Stackless Coroutines&lt;/item&gt;
      &lt;item&gt;Juicy Main&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These APIs are not set in stone. It will probably take a few iterations to get it right. Please try them out in real world applications and let us know how it goes! Let's collaborate on making the I/O interface practical and optimal.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://andrewkelley.me/post/zig-new-async-io-text-version.html"/><published>2025-10-29T12:35:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45746482</id><title>Israel demanded Google and Amazon use secret 'wink' to sidestep legal orders</title><updated>2025-10-31T02:25:18.610305+00:00</updated><content>&lt;doc fingerprint="3f28bb48b4a475c0"&gt;
  &lt;main&gt;
    &lt;p&gt;When Google and Amazon negotiated a major $1.2bn cloud-computing deal in 2021, their customer – the Israeli government – had an unusual demand: agree to use a secret code as part of an arrangement that would become known as the “winking mechanism”.&lt;/p&gt;
    &lt;p&gt;The demand, which would require Google and Amazon to effectively sidestep legal obligations in countries around the world, was born out of Israel’s concerns that data it moves into the global corporations’ cloud platforms could end up in the hands of foreign law enforcement authorities.&lt;/p&gt;
    &lt;p&gt;Like other big tech companies, Google and Amazon’s cloud businesses routinely comply with requests from police, prosecutors and security services to hand over customer data to assist investigations.&lt;/p&gt;
    &lt;p&gt;This process is often cloaked in secrecy. The companies are frequently gagged from alerting the affected customer their information has been turned over. This is either because the law enforcement agency has the power to demand this or a court has ordered them to stay silent.&lt;/p&gt;
    &lt;p&gt;For Israel, losing control of its data to authorities overseas was a significant concern. So to deal with the threat, officials created a secret warning system: the companies must send signals hidden in payments to the Israeli government, tipping it off when it has disclosed Israeli data to foreign courts or investigators.&lt;/p&gt;
    &lt;p&gt;To clinch the lucrative contract, Google and Amazon agreed to the so-called winking mechanism, according to leaked documents seen by the Guardian, as part of a joint investigation with Israeli-Palestinian publication +972 Magazine and Hebrew-language outlet Local Call.&lt;/p&gt;
    &lt;p&gt;Based on the documents and descriptions of the contract by Israeli officials, the investigation reveals how the companies bowed to a series of stringent and unorthodox “controls” contained within the 2021 deal, known as Project Nimbus. Both Google and Amazon’s cloud businesses have denied evading any legal obligations.&lt;/p&gt;
    &lt;p&gt;The strict controls include measures that prohibit the US companies from restricting how an array of Israeli government agencies, security services and military units use their cloud services. According to the deal’s terms, the companies cannot suspend or withdraw Israel’s access to its technology, even if it’s found to have violated their terms of service.&lt;/p&gt;
    &lt;p&gt;Israeli officials inserted the controls to counter a series of anticipated threats. They feared Google or Amazon might bow to employee or shareholder pressure and withdraw Israel’s access to its products and services if linked to human rights abuses in the occupied Palestinian territories.&lt;/p&gt;
    &lt;p&gt;They were also concerned the companies could be vulnerable to overseas legal action, particularly in cases relating to the use of the technology in the military occupation of the West Bank and Gaza.&lt;/p&gt;
    &lt;p&gt;The terms of the Nimbus deal would appear to prohibit Google and Amazon from the kind of unilateral action taken by Microsoft last month, when it disabled the Israeli military’s access to technology used to operate an indiscriminate surveillance system monitoring Palestinian phone calls.&lt;/p&gt;
    &lt;p&gt;Microsoft, which provides a range of cloud services to Israel’s military and public sector, bid for the Nimbus contract but was beaten by its rivals. According to sources familiar with negotiations, Microsoft’s bid suffered as it refused to accept some of Israel’s demands.&lt;/p&gt;
    &lt;p&gt;As with Microsoft, Google and Amazon’s cloud businesses have faced scrutiny in recent years over the role of their technology – and the Nimbus contract in particular – in Israel’s two-year war on Gaza.&lt;/p&gt;
    &lt;p&gt;During its offensive in the territory, where a UN commission of inquiry concluded that Israel has committed genocide, the Israeli military has relied heavily on cloud providers to store and analyse large volumes of data and intelligence information.&lt;/p&gt;
    &lt;p&gt;One such dataset was the vast collection of intercepted Palestinian calls that until August was stored on Microsoft’s cloud platform. According to intelligence sources, the Israeli military planned to move the data to Amazon Web Services (AWS) datacentres.&lt;/p&gt;
    &lt;p&gt;Amazon did not respond to the Guardian’s questions about whether it knew of Israel’s plan to migrate the mass surveillance data to its cloud platform. A spokesperson for the company said it respected “the privacy of our customers and we do not discuss our relationship without their consent, or have visibility into their workloads” stored in the cloud.&lt;/p&gt;
    &lt;p&gt;Asked about the winking mechanism, both Amazon and Google denied circumventing legally binding orders. “The idea that we would evade our legal obligations to the US government as a US company, or in any other country, is categorically wrong,” a Google spokesperson said.&lt;/p&gt;
    &lt;p&gt;Referring to statements Google has previously made claiming Israel had agreed to abide by Google policies, the spokesperson added: “We’ve been very clear about the Nimbus contract, what it’s directed to, and the terms of service and acceptable use policy that govern it. Nothing has changed. This appears to be yet another attempt to falsely imply otherwise.”&lt;/p&gt;
    &lt;p&gt;However, according to the Israeli government documents detailing the controls inserted into the Nimbus agreement, officials concluded they had extracted important concessions from Google and Amazon after the companies agreed to adapt internal processes and “subordinate” their standard contractual terms in favour of Israel’s demands.&lt;/p&gt;
    &lt;p&gt;A government memo circulated several months after the deal was signed stated: “[The companies] understand the sensitivities of the Israeli government and are willing to accept our requirements.”&lt;/p&gt;
    &lt;head rend="h2"&gt;How the secret code works&lt;/head&gt;
    &lt;p&gt;Named after the towering cloud formations, the Nimbus contract – which runs for an initial seven years with the possibility of extension – is a flagship Israeli government initiative to store information from across the public sector and military in commercially owned datacentres.&lt;/p&gt;
    &lt;p&gt;Even though its data would be stored in Google and Amazon’s newly built Israel-based datacentres, Israeli officials feared developments in US and European laws could create more direct routes for law enforcement agencies to obtain it via direct requests or court-issued subpoenas.&lt;/p&gt;
    &lt;p&gt;With this threat in mind, Israeli officials inserted into the Nimbus deal a requirement for the companies to a send coded message – a “wink” – to its government, revealing the identity of the country they had been compelled to hand over Israeli data to, but were gagged from saying so.&lt;/p&gt;
    &lt;p&gt;Leaked documents from Israel’s finance ministry, which include a finalised version of the Nimbus agreement, suggest the secret code would take the form of payments – referred to as “special compensation” – made by the companies to the Israeli government.&lt;/p&gt;
    &lt;p&gt;According to the documents, the payments must be made “within 24 hours of the information being transferred” and correspond to the telephone dialing code of the foreign country, amounting to sums between 1,000 and 9,999 shekels.&lt;/p&gt;
    &lt;p&gt;Under the terms of the deal, the mechanism works like this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;If either Google or Amazon provides information to authorities in the US, where the dialing code is +1, and they are prevented from disclosing their cooperation, they must send the Israeli government 1,000 shekels.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If, for example, the companies receive a request for Israeli data from authorities in Italy, where the dialing code is +39, they must send 3,900 shekels.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If the companies conclude the terms of a gag order prevent them from even signaling which country has received the data, there is a backstop: the companies must pay 100,000 shekels ($30,000) to the Israeli government.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Legal experts, including several former US prosecutors, said the arrangement was highly unusual and carried risks for the companies as the coded messages could violate legal obligations in the US, where the companies are headquartered, to keep a subpoena secret.&lt;/p&gt;
    &lt;p&gt;“It seems awfully cute and something that if the US government or, more to the point, a court were to understand, I don’t think they would be particularly sympathetic,” a former US government lawyer said.&lt;/p&gt;
    &lt;p&gt;Several experts described the mechanism as a “clever” workaround that could comply with the letter of the law but not its spirit. “It’s kind of brilliant, but it’s risky,” said a former senior US security official.&lt;/p&gt;
    &lt;p&gt;Israeli officials appear to have acknowledged this, documents suggest. Their demands about how Google and Amazon respond to a US-issued order “might collide” with US law, they noted, and the companies would have to make a choice between “violating the contract or violating their legal obligations”.&lt;/p&gt;
    &lt;p&gt;Neither Google nor Amazon responded to the Guardian’s questions about whether they had used the secret code since the Nimbus contract came into effect.&lt;/p&gt;
    &lt;p&gt;“We have a rigorous global process for responding to lawful and binding orders for requests related to customer data,” Amazon’s spokesperson said. “We do not have any processes in place to circumvent our confidentiality obligations on lawfully binding orders.”&lt;/p&gt;
    &lt;p&gt;Google declined to comment on which of Israel’s stringent demands it had accepted in the completed Nimbus deal, but said it was “false” to “imply that we somehow were involved in illegal activity, which is absurd”.&lt;/p&gt;
    &lt;p&gt;A spokesperson for Israel’s finance ministry said: “The article’s insinuation that Israel compels companies to breach the law is baseless.”&lt;/p&gt;
    &lt;head rend="h2"&gt;‘No restrictions’&lt;/head&gt;
    &lt;p&gt;Israeli officials also feared a scenario in which its access to the cloud providers’ technology could be blocked or restricted.&lt;/p&gt;
    &lt;p&gt;In particular, officials worried that activists and rights groups could place pressure on Google and Amazon, or seek court orders in several European countries, to force them to terminate or limit their business with Israel if their technology were linked to human rights violations.&lt;/p&gt;
    &lt;p&gt;To counter the risks, Israel inserted controls into the Nimbus agreement which Google and Amazon appear to have accepted, according to government documents prepared after the deal was signed.&lt;/p&gt;
    &lt;p&gt;The documents state that the agreement prohibits the companies from revoking or restricting Israel’s access to their cloud platforms, either due to changes in company policy or because they find Israel’s use of their technology violates their terms of service.&lt;/p&gt;
    &lt;p&gt;Provided Israel does not infringe on copyright or resell the companies’ technology, “the government is permitted to make use of any service that is permitted by Israeli law”, according to a finance ministry analysis of the deal.&lt;/p&gt;
    &lt;p&gt;Both companies’ standard “acceptable use” policies state their cloud platforms should not be used to violate the legal rights of others, nor should they be used to engage in or encourage activities that cause “serious harm” to people.&lt;/p&gt;
    &lt;p&gt;However, according to an Israeli official familiar with the Nimbus project, there can be “no restrictions” on the kind of information moved into Google and Amazon’s cloud platforms, including military and intelligence data. The terms of the deal seen by the Guardian state that Israel is “entitled to migrate to the cloud or generate in the cloud any content data they wish”.&lt;/p&gt;
    &lt;p&gt;Israel inserted the provisions into the deal to avoid a situation in which the companies “decide that a certain customer is causing them damage, and therefore cease to sell them services”, one document noted.&lt;/p&gt;
    &lt;p&gt;The Intercept reported last year the Nimbus project was governed by an “amended” set of confidential policies, and cited a leaked internal report suggesting Google understood it would not be permitted to restrict the types of services used by Israel.&lt;/p&gt;
    &lt;p&gt;Last month, when Microsoft cut off Israeli access to some cloud and artificial intelligence services, it did so after confirming reporting by the Guardian and its partners, +972 and Local Call, that the military had stored a vast trove of intercepted Palestinian calls in the company’s Azure cloud platform.&lt;/p&gt;
    &lt;p&gt;Notifying the Israeli military of its decision, Microsoft said that using Azure in this way violated its terms of service and it was “not in the business of facilitating the mass surveillance of civilians”.&lt;/p&gt;
    &lt;p&gt;Under the terms of the Nimbus deal, Google and Amazon are prohibited from taking such action as it would “discriminate” against the Israeli government. Doing so would incur financial penalties for the companies, as well as legal action for breach of contract.&lt;/p&gt;
    &lt;p&gt;The Israeli finance ministry spokesperson said Google and Amazon are “bound by stringent contractual obligations that safeguard Israel’s vital interests”. They added: “These agreements are confidential and we will not legitimise the article’s claims by disclosing private commercial terms.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theguardian.com/us-news/2025/oct/29/google-amazon-israel-contract-secret-code"/><published>2025-10-29T13:20:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45751868</id><title>Independently verifying Go's reproducible builds</title><updated>2025-10-31T02:25:18.285438+00:00</updated><content>&lt;doc fingerprint="2e81393b0f9635b2"&gt;
  &lt;main&gt;
    &lt;p&gt;October 29, 2025&lt;/p&gt;
    &lt;head rend="h2"&gt;I'm Independently Verifying Go's Reproducible Builds&lt;/head&gt;
    &lt;p&gt;When you try to compile a Go module that requires a newer version of the Go toolchain than the one you have installed, the go command automatically downloads the newer toolchain and uses it for compiling the module. (And only that module; your system's go installation is not replaced.) This useful feature was introduced in Go 1.21 and has let me quickly adopt new Go features in my open source projects without inconveniencing people with older versions of Go.&lt;/p&gt;
    &lt;p&gt;However, the idea of downloading a binary and executing it on demand makes a lot of people uncomfortable. It feels like such an easy vector for a supply chain attack, where Google, or an attacker who has compromised Google or gotten a misissued SSL certificate, could deliver a malicious binary. Many developers are more comfortable getting Go from their Linux distribution, or compiling it from source themselves.&lt;/p&gt;
    &lt;p&gt;To address these concerns, the Go project did two things:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;They made it so every version of Go starting with 1.21 could be easily reproduced from its source code. Every time you compile a Go toolchain, it produces the exact same Zip archive, byte-for-byte, regardless of the current time, your operating system, your architecture, or other aspects of your environment (such as the directory from which you run the build).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;They started publishing the checksum of every toolchain Zip archive in a public transparency log called the Go Checksum Database. The go command verifies that the checksum of a downloaded toolchain is published in the Checksum Database for anyone to see.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These measures mean that:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;You can be confident that the binaries downloaded and executed by the go command are the exact same binaries you would have gotten had you built the toolchain from source yourself. If there's a backdoor, the backdoor has to be in the source code.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;You can be confident that the binaries downloaded and executed by the go command are the same binaries that everyone else is downloading. If there's a backdoor, it has to be served to the whole world, making it easier to detect.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;But these measures mean nothing if no one is checking that the binaries are reproducible, or that the Checksum Database isn't presenting inconsistent information to different clients. Although Google checks reproducibility and publishes a report, this doesn't help if you think Google might try to slip in a backdoor themselves. There needs to be an independent third party doing the checks.&lt;/p&gt;
    &lt;p&gt;Why not me? I was involved in Debian's Reproducible Builds project back in the day and developed some of the core tooling used to make Debian packages reproducible (strip-nondeterminism and disorderfs). I also have extensive experience monitoring Certificate Transparency logs and have detected misbehavior by numerous logs since 2017. And I do not work for Google (though I have eaten their food).&lt;/p&gt;
    &lt;p&gt;In fact, I've been quietly operating an auditor for the Go Checksum Database since 2020 called Source Spotter (à la Cert Spotter). Source Spotter monitors the Checksum Database, making sure it doesn't present inconsistent information or publish more than one checksum for a given module and version. I decided to extend Source Spotter to also verify toolchain reproducibility.&lt;/p&gt;
    &lt;p&gt; The Checksum Database was originally intended for recording the checksums of Go modules. Essentially, it's a verifiable, append-only log of records which say that a particular version (e.g. &lt;code&gt;v0.4.0&lt;/code&gt;) of a module (e.g. &lt;code&gt;src.agwa.name/snid&lt;/code&gt;) has a particular SHA-256 hash.  Go repurposed
it for recording toolchain checksums.  Toolchain records have the pseudo-module
&lt;code&gt;golang.org/toolchain&lt;/code&gt; and versions that look like &lt;code&gt;v0.0.1-goVERSION.GOOS-GOARCH&lt;/code&gt;.  For example, the Go1.24.2 toolchain for linux/amd64 has the module version &lt;code&gt;v0.0.1-go1.24.2.linux-amd64&lt;/code&gt;.
&lt;/p&gt;
    &lt;p&gt; When Source Spotter sees a new version of the &lt;code&gt;golang.org/toolchain&lt;/code&gt; pseudo-module,
it downloads the corresponding source code, builds it in an AWS Lambda function by running &lt;code&gt;make.bash -distpack&lt;/code&gt;,
and compares the checksum
of the resulting Zip file to the checksum published in the Checksum Database.  Any mismatches
are published on a webpage and
in an Atom feed which I monitor.
&lt;/p&gt;
    &lt;p&gt;So far, Source Spotter has successfully reproduced every toolchain since Go 1.21.0, for every architecture and operating system. As of publication time, that's 2,672 toolchains!&lt;/p&gt;
    &lt;head rend="h4"&gt;Bootstrap Toolchains&lt;/head&gt;
    &lt;p&gt;Since the Go toolchain is written in Go, building it requires an earlier version of the Go toolchain to be installed already.&lt;/p&gt;
    &lt;p&gt;When reproducing Go 1.21, 1.22, and 1.23, Source Spotter uses a Go 1.20.14 toolchain that I built from source. I started by building Go 1.4.3 using a C compiler. I used Go 1.4.3 to build Go 1.17.13, which I used to build Go 1.20.14. To mitigate Trusting Trust attacks, I repeated this process on both Debian and Amazon Linux using both GCC and Clang for the Go 1.4 build. I got the exact same bytes every time, which I believe makes a compiler backdoor vanishingly unlikely. The scripts I used for this are open source.&lt;/p&gt;
    &lt;p&gt;When reproducing Go 1.24 or higher, Source Spotter uses a binary toolchain downloaded from the Go module proxy that it previously verified as being reproducible from source.&lt;/p&gt;
    &lt;head rend="h4"&gt;Problems Encountered&lt;/head&gt;
    &lt;p&gt;Compared to reproducing a typical Debian package, it was really easy to reproduce the same bytes when building the Go toolchains. Nevertheless, there were some bumps along the way:&lt;/p&gt;
    &lt;p&gt;First, the Darwin (macOS) toolchains published by Google contain signatures produced by Google's private key. Obviously, Source Spotter can't reproduce these. Instead, Source Spotter has to download the toolchain (making sure it matches the checksum published in the Checksum Database) and strip the signatures to produce a new checksum that is verified against the reproduced toolchain. I reused code written by Google to strip the signatures and I honestly have no clue what it's doing and whether it could potentially strip a backdoor. A review from someone versed in Darwin binaries would be very helpful!&lt;/p&gt;
    &lt;p&gt; Second, to reproduce the linux-arm toolchains, Source Spotter has to set &lt;code&gt;GOARM=6&lt;/code&gt; in the environment... except when reproducing Go 1.21.0, which
Google accidentally built using &lt;code&gt;GOARM=7&lt;/code&gt;.
I don't understand why cmd/dist (the tool used to build the
toolchain) doesn't set this environment variable along with the many other environment variables it sets.
&lt;/p&gt;
    &lt;p&gt;Finally, the Checksum Database contains a toolchain for Go 1.9.2rc2, which is not a valid version number. It turns out this version was released by mistake. To avoid raising an error for an invalid version number, Source Spotter has to special case it. Not a huge deal, but I found it interesting because it demonstrates one of the downsides of transparency logs: you can't fix or remove entries that were added by mistake!&lt;/p&gt;
    &lt;head rend="h4"&gt;Source Code Transparency&lt;/head&gt;
    &lt;p&gt;Although the toolchain binaries are published in the Checksum Database, the source code is not. This means Google could serve Source Spotter, and only Source Spotter, source code which contains a backdoor. To mitigate this, Source Spotter publishes the checksums of every source tarball it builds.&lt;/p&gt;
    &lt;p&gt; Filippo suggested that Source Spotter build from Go's Git repository and publish the Git commit IDs instead, since lots of Go developers have the Go Git repository checked out and it would be relatively easy for them to compare the state of their repos against what Source Spotter has seen. Regrettably, Git commit IDs are SHA-1, but this is mitigated by Git's use of Marc Stevens' collision detection, so the benefits may be worth the risk. I think building from Git is a good idea, and to bootstrap it, Filippo used Magic Wormhole to send me the output of &lt;code&gt;git show-ref --tags&lt;/code&gt; from his repo while we were both
at the Transparency.dev Summit last week.
&lt;/p&gt;
    &lt;p&gt;Ultimately, I would like to see the Go project publish source tarballs in the Checksum Database.&lt;/p&gt;
    &lt;head rend="h4"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Thanks to Go's Checksum Database and reproducible toolchains, Go developers get the usability benefits of a centralized package repository and binary toolchains without sacrificing the security benefits of decentralized packages and building from source. The Go team deserves enormous credit for making this a reality, particularly for building a system that is not too hard for a third party to verify. They've raised the bar, and I hope other language and package ecosystems can learn from what they've done.&lt;/p&gt;
    &lt;p&gt;Learn more by visiting the Source Spotter website or the GitHub repo.&lt;/p&gt;
    &lt;head rend="h3"&gt;Post a Comment&lt;/head&gt;
    &lt;p&gt;Your comment will be public. To contact me privately, email me. Please keep your comment polite, on-topic, and comprehensible. Your comment may be held for moderation before being published.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.agwa.name/blog/post/verifying_go_reproducible_builds"/><published>2025-10-29T19:32:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45755027</id><title>NPM flooded with malicious packages downloaded more than 86k times</title><updated>2025-10-31T02:25:17.844504+00:00</updated><content>&lt;doc fingerprint="771a9388954b799"&gt;
  &lt;main&gt;
    &lt;p&gt;Attackers are exploiting a major weakness that has allowed them access to the NPM code repository with more than 100 credential-stealing packages since August, mostly without detection.&lt;/p&gt;
    &lt;p&gt;The finding, laid out Wednesday by security firm Koi, brings attention to an NPM practice that allows installed packages to automatically pull down and run unvetted packages from untrusted domains. Koi said a campaign it tracks as PhantomRaven has exploited NPM’s use of “Remote Dynamic Dependencies” to flood NPM with 126 malicious packages that have been downloaded more than 86,000 times. Some 80 of those packages remained available as of Wednesday morning, Koi said.&lt;/p&gt;
    &lt;head rend="h2"&gt;A blind spot&lt;/head&gt;
    &lt;p&gt;“PhantomRaven demonstrates how sophisticated attackers are getting [better] at exploiting blind spots in traditional security tooling,” Koi’s Oren Yomtov wrote. “Remote Dynamic Dependencies aren’t visible to static analysis.”&lt;/p&gt;
    &lt;p&gt;Remote Dynamic Dependencies provide greater flexibility in accessing dependencies—the code libraries that are mandatory for many other packages to work. Normally, dependencies are visible to the developer installing the package. They’re usually downloaded from NPM’s trusted infrastructure.&lt;/p&gt;
    &lt;p&gt;RDD works differently. It allows a package to download dependencies from untrusted websites, even those that connect over HTTP, which is unencrypted. The PhantomRaven attackers exploited this leniency by including code in the 126 packages uploaded to NPM. The code downloads malicious dependencies from URLs, including http://packages.storeartifact.com/npm/unused-imports. Koi said these dependencies are “invisible” to developers and many security scanners. Instead, they show the package contains “0 Dependencies.” An NPM feature causes these invisible downloads to be automatically installed.&lt;/p&gt;
    &lt;p&gt;Compounding the weakness, the dependencies are downloaded “fresh” from the attacker server each time a package is installed, rather than being cached, versioned, or otherwise static, as Koi explained:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arstechnica.com/security/2025/10/npm-flooded-with-malicious-packages-downloaded-more-than-86000-times/"/><published>2025-10-30T00:37:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45758421</id><title>Show HN: In a single HTML file, an app to encourage my children to invest</title><updated>2025-10-31T02:25:17.520309+00:00</updated><content>&lt;doc fingerprint="26c9c0412db7d00b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;I Built an App to Encourage My Kids to Invest â Just One HTML File&lt;/head&gt;
    &lt;p&gt;âWhat comes with the milk, leaves with the soulâ&lt;lb/&gt; â Russian proverb.&lt;/p&gt;
    &lt;p&gt;Access the app:&lt;lb/&gt; Click here to open and install D-i&lt;del&gt;n&lt;/del&gt;vestments&lt;/p&gt;
    &lt;p&gt;One thing that school doesnât teach you (not even high school) is how to manage your personal finances.&lt;/p&gt;
    &lt;p&gt;As my eldest sonâs birthday was approaching, we suggested that instead of asking for physical gifts, he ask for their equivalent in money. That way, he gathered a decent amount of capital for his first investment adventure.&lt;/p&gt;
    &lt;p&gt;I explained to my kids that investing is like having a magic box that generates more money over time. To make it more visual and interactive, I decided to create a small app where they could see their investment grow day by day.&lt;/p&gt;
    &lt;head rend="h1"&gt;From Idea to App&lt;/head&gt;
    &lt;p&gt;My first idea was to build a physical piggy bank with a display, showing the accumulated amount. However, that mixed up the concept of saving with investing, and also required buying extra hardware.&lt;/p&gt;
    &lt;p&gt;So I looked for a quicker, cheaper way: revive an old smartphone and create a simple app using plain HTML.&lt;/p&gt;
    &lt;p&gt;The result was D-i&lt;del&gt;n&lt;/del&gt;vestments, a mix between Diversions and Investments.&lt;/p&gt;
    &lt;head rend="h1"&gt;How It Works&lt;/head&gt;
    &lt;p&gt;The app is essentially a single HTML file that installs on the phone as a PWA (Progressive Web App).&lt;/p&gt;
    &lt;p&gt;The phone is attached to the fridge and works as a panel or dashboard where my kids can see their money growing each day.&lt;/p&gt;
    &lt;p&gt;I act as their investment agent, assigning realistic interest rates â high enough to keep them motivated, but moderate enough to reflect how the real world works.&lt;/p&gt;
    &lt;head rend="h2"&gt;Configuration Screen&lt;/head&gt;
    &lt;p&gt;The app includes a screen where you can enter:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The kidsâ names&lt;/item&gt;
      &lt;item&gt;The invested amount&lt;/item&gt;
      &lt;item&gt;The interest rate&lt;/item&gt;
      &lt;item&gt;The start date&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;With that data, the app automatically calculates and displays:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Daily gain&lt;/item&gt;
      &lt;item&gt;Weekly gain&lt;/item&gt;
      &lt;item&gt;Monthly gain&lt;/item&gt;
      &lt;item&gt;Total updated balance&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Materials Used&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;An old smartphone&lt;/item&gt;
      &lt;item&gt;A suction mount to attach it to the fridge&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The D-iNvestments app, in HTML format&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Installation&lt;/head&gt;
    &lt;p&gt;The process is as simple as opening the link from a smartphone and tapping âInstallâ when prompted by the browser.&lt;lb/&gt; From then on, it behaves like a native app.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Access the app:&lt;/p&gt;&lt;lb/&gt;Click here to open and install D-i&lt;del&gt;n&lt;/del&gt;vestments&lt;/quote&gt;
    &lt;head rend="h1"&gt;Final Reflection&lt;/head&gt;
    &lt;p&gt;The goal wasnât just to teach my kids the value of money, but to show them visually how investment and time work as allies.&lt;/p&gt;
    &lt;p&gt;Each day, as they watch their small fund grow, they grasp the magic of compound interest â and that, more than any gift, is a lesson I hope will stay with them for life.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;ð¬ Want to comment or improve the app? Contact me at:&lt;/p&gt;&lt;lb/&gt;@roberdam&lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://roberdam.com/en/dinversiones.html"/><published>2025-10-30T10:39:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45760321</id><title>Show HN: I made a heatmap diff viewer for code reviews</title><updated>2025-10-31T02:25:17.146898+00:00</updated><content>&lt;doc fingerprint="5f30552b55a047fe"&gt;
  &lt;main&gt;
    &lt;p&gt;Heatmap color-codes every diff line/token by how much human attention it probably needs. Unlike PR-review bots, we try to flag not just by “is it a bug?” but by “is it worth a second look?” (examples: hard-coded secret, weird crypto mode, gnarly logic).&lt;/p&gt;
    &lt;p&gt;To try it, replace github.com with 0github.com in any GitHub pull request url. Under the hood, we clone the repo into a VM, spin up gpt-5-codex for every diff, and ask it to output a JSON data structure that we parse into a colored heatmap.&lt;/p&gt;
    &lt;p&gt;Examples:&lt;/p&gt;
    &lt;p&gt;Heatmap is open source:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://0github.com"/><published>2025-10-30T14:21:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45760878</id><title>Free software scares normal people</title><updated>2025-10-31T02:25:16.973283+00:00</updated><content>&lt;doc fingerprint="a23b437c2441cdbd"&gt;
  &lt;main&gt;
    &lt;p&gt;I’m the person my friends and family come to for computer-related help. (Maybe you, gentle reader, can relate.) This experience has taught me which computing tasks are frustrating for normal people.&lt;/p&gt;
    &lt;p&gt;Normal people often struggle with converting video. They will need to watch, upload, or otherwise do stuff with a video, but the format will be weird. (Weird, broadly defined, is anything that won’t play in QuickTime or upload to Facebook.)&lt;/p&gt;
    &lt;p&gt;I would love to recommend Handbrake to them, but the user interface is by and for power users. Opening it makes normal people feel unpleasant feelings.&lt;/p&gt;
    &lt;p&gt;This problem is rampant in free software. The FOSS world is full of powerful tools that only have a “power user” UI. As a result, people give up. Or worse: they ask people like you and I to do it for them.&lt;/p&gt;
    &lt;p&gt;I want to make the case to you that you can (and should) solve this kind of problem in a single evening.&lt;/p&gt;
    &lt;p&gt;Take the example of Magicbrake, a simple front end I built. It hides the power and flexibility of Handbrake. It does only the one thing most people need Handbrake for: taking a weird video file and making it normal. (Normal, for our purposes, means a small MP4 that works just about anywhere.)&lt;/p&gt;
    &lt;p&gt;There is exactly one button.&lt;/p&gt;
    &lt;p&gt;This is a fast and uncomplicated thing to do. Unfortunately, the people who have the ability to solve problems like this are often disinclined to do it.&lt;/p&gt;
    &lt;p&gt;“Why would you make Handbrake less powerful on purpose?”&lt;/p&gt;
    &lt;p&gt;“What if someone wants a different format?”&lt;/p&gt;
    &lt;p&gt;“What about [feature/edge case]?”&lt;/p&gt;
    &lt;p&gt;The answer to all these questions is the same: a person who needs or wants that stuff can use Handbrake. If they don’t need everything Handbrake can do and find it bewildering, they can use this. Everyone wins.&lt;/p&gt;
    &lt;p&gt;It’s a bit like obscuring the less-used functions on a TV remote with tape. The functions still exist if you need them, but you’re not required to contend with them just to turn the TV on.&lt;/p&gt;
    &lt;p&gt;People benefit from stuff like this, and I challenge you to make more of it. Opportunities are everywhere. The world is full of media servers normal people can’t set up. Free audio editing software that requires hours of learning to be useful for simple tasks. Network monitoring tools that seem designed to ward off the uninitiated. Great stuff normal people don’t use. All because there’s only one UI, and it’s designed to do everything.&lt;/p&gt;
    &lt;p&gt;80% of the people only need 20% of the features. Hide the rest from them and you’ll make them more productive and happy. That’s really all it takes.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://danieldelaney.net/normal/"/><published>2025-10-30T15:07:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45761027</id><title>PlanetScale Offering $5 Databases</title><updated>2025-10-31T02:25:16.805234+00:00</updated><content>&lt;doc fingerprint="27dfe46f2515530c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;$5 PlanetScale&lt;/head&gt;
    &lt;p&gt;By Sam Lambert |&lt;/p&gt;
    &lt;p&gt;PlanetScale is synonymous with quality, performance, and reliability. Up until now, the entry level PlanetScale cluster configuration was 3 node, multi-AZ, and highly available. At $30 a month this is incredible value, however, not everyone wants or needs HA.&lt;/p&gt;
    &lt;p&gt;Every day we get requests for an entry level tier that is more accessible to builders on day 1. People want the quality of PlanetScale and our game changing features like Insights without the cost overhead of 3 nodes.&lt;/p&gt;
    &lt;p&gt;Over the next couple of months we will be rolling out a single node, non-HA mode for PlanetScale Postgres and introducing a new node type: The &lt;code&gt;PS-5&lt;/code&gt; which is priced at $5 a month. Single node is perfect for development, testing, and non-critical workloads. Customers will be able to vertically scale a single node to meet their needs without having to add replicas or sacrifice durability.&lt;/p&gt;
    &lt;p&gt;You can sign up here to be notified when single node releases.&lt;/p&gt;
    &lt;p&gt;Our starter pricing is now:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Node Class&lt;/cell&gt;
        &lt;cell role="head"&gt;Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Price&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;PS-5 (arm and intel)&lt;/cell&gt;
        &lt;cell&gt;Single node&lt;/cell&gt;
        &lt;cell&gt;$5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;PS-10 (arm)&lt;/cell&gt;
        &lt;cell&gt;Single node&lt;/cell&gt;
        &lt;cell&gt;$10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;PS-10 (intel)&lt;/cell&gt;
        &lt;cell&gt;Single node&lt;/cell&gt;
        &lt;cell&gt;$13&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;PS-10 (arm)&lt;/cell&gt;
        &lt;cell&gt;HA (3 node)&lt;/cell&gt;
        &lt;cell&gt;$30&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;PS-10 (intel)&lt;/cell&gt;
        &lt;cell&gt;HA (3 node)&lt;/cell&gt;
        &lt;cell&gt;$39&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;If you're bullish on your company's future, you know you'll need to scale eventually, and the database is usually the first bottleneck. We talk to startups daily who experienced unexpected fast growth and have to scramble through emergency migrations to PlanetScale to handle the load, a stressful process when you're in the spotlight. With more approachable pricing from day 1, you can now start small and grow to hyper scale without ever changing your database platform or dealing with a complex migration.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://planetscale.com/blog/5-dollar-planetscale"/><published>2025-10-30T15:20:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45761042</id><title>ZOZO's Contact Solver for physics-based simulations</title><updated>2025-10-31T02:25:16.019396+00:00</updated><content>&lt;doc fingerprint="3d32dd780db6c590"&gt;
  &lt;main&gt;&lt;p&gt;A contact solver for physics-based simulations involving 👚 shells, 🪵 solids and 🪢 rods. All made by ZOZO.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;💪 Robust: Contact resolutions are completely penetration-free. No snagging intersections.&lt;/item&gt;&lt;item&gt;⏲ Scalable: An extreme case includes beyond 150M contacts. Not just one million.&lt;/item&gt;&lt;item&gt;🚲 Cache Efficient: All on the GPU runs in single precision. No double precision.&lt;/item&gt;&lt;item&gt;🥼 Inextensible: Cloth never extends beyond very strict upper bounds, such as 1%.&lt;/item&gt;&lt;item&gt;📐 Physically Accurate: Our deformable solver is driven by the Finite Element Method.&lt;/item&gt;&lt;item&gt;⚔️ Highly Stressed: We run GitHub Actions to run stress tests 10 times in a row.&lt;/item&gt;&lt;item&gt;🚀 Massively Parallel: Both contact and elasticity solvers are run on the GPU.&lt;/item&gt;&lt;item&gt;🐳 Docker Sealed: Everything is designed to work out of the box.&lt;/item&gt;&lt;item&gt;🌐 JupyterLab Included: Open your browser and run examples right away (Video).&lt;/item&gt;&lt;item&gt;🐍 Documented Python APIs: Our Python code is fully docstringed and lintable (Video).&lt;/item&gt;&lt;item&gt;☁️ Cloud-Ready: Our solver can be seamlessly deployed on major cloud platforms.&lt;/item&gt;&lt;item&gt;✨ Stay Clean: You can remove all traces after use.&lt;/item&gt;&lt;/list&gt;&lt;list rend="ul"&gt;&lt;item&gt;📝 Change History&lt;/item&gt;&lt;item&gt;🎓 Technical Materials&lt;/item&gt;&lt;item&gt;⚡️ Requirements&lt;/item&gt;&lt;item&gt;💨 Getting Started&lt;/item&gt;&lt;item&gt;🐍 How To Use&lt;/item&gt;&lt;item&gt;📚 Python APIs and Parameters&lt;/item&gt;&lt;item&gt;🔍 Obtaining Logs&lt;/item&gt;&lt;item&gt;🖼️ Catalogue&lt;/item&gt;&lt;item&gt;🚀 GitHub Actions&lt;/item&gt;&lt;item&gt;📡 Deploying on Cloud Services&lt;/item&gt;&lt;item&gt;✒️ Citation&lt;/item&gt;&lt;item&gt;🙏 Acknowledgements&lt;/item&gt;&lt;/list&gt;&lt;list rend="ul"&gt;&lt;item&gt;🧑 💻 Setting Up Your Development Environment (Markdown)&lt;/item&gt;&lt;item&gt;🐞 Bug Fixes and Updates (Markdown)&lt;/item&gt;&lt;/list&gt;&lt;list rend="ul"&gt;&lt;item&gt;(2025.10.03) Massive refactor of the codebase (Markdown). Note that this change includes breaking changes to our Python APIs.&lt;/item&gt;&lt;item&gt;(2025.08.09) Added a hindsight note in eigensystem analysis to acknowledge prior work by Poya et al. (2023).&lt;/item&gt;&lt;item&gt;(2025.05.01) Simulation states now can be saved and loaded (Video).&lt;/item&gt;&lt;item&gt;(2025.04.02) Added 9 examples. See the catalogue.&lt;/item&gt;&lt;item&gt;(2025.03.03) Added a budget table on AWS.&lt;/item&gt;&lt;item&gt;(2025.02.28) Added a reference branch and a Docker image of our TOG paper.&lt;/item&gt;&lt;item&gt;(2025.2.26) Added Floating Point-Rounding Errors in ACCD in hindsight.&lt;/item&gt;&lt;item&gt;(2025.2.7) Updated the trapped example (Video) with squishy balls.&lt;/item&gt;&lt;/list&gt;&lt;head&gt;More history records&lt;/head&gt;- (2025.1.8) Added a [domino example](./examples/domino.ipynb) [(Video)](https://drive.google.com/file/d/1N9y8eZrjSQhAUhKwiO9w8jW_T18zPnYf/view). - (2025.1.5) Added a [single twist example](./examples/twist.ipynb) [(Video)](https://drive.google.com/file/d/1LDFKS-iBvl2uDdPVKaazQL25tYGEEyXr/view). - (2024.12.31) Added full documentation for Python APIs, parameters, and log files [(GitHub Pages)](https://st-tech.github.io/ppf-contact-solver). - (2024.12.27) Line search for strain limiting is improved [(Markdown)](./articles/bug.md#new-strain-limiting-line-search) - (2024.12.23) Added [(Bug Fixes and Updates)](./articles/bug.md) - (2024.12.21) Added a [house of cards example](./examples/cards.ipynb) [(Video)](https://drive.google.com/file/d/1PMdDnlyCsjinbvICKph_0UcXUfUvvUmZ/view) - (2024.12.18) Added a [frictional contact example](./examples/friction.ipynb): armadillo sliding on the slope [(Video)](https://drive.google.com/file/d/12WGdfDTFIwCT0UFGEZzfmQreM6WSSHet/view) - (2024.12.18) Added a [hindsight](./articles/hindsight.md) noting that the tilt angle was not&lt;list rend="ul"&gt;&lt;item&gt;📚 Published in ACM Transactions on Graphics (TOG) Vol.43, No.6&lt;/item&gt;&lt;item&gt;🎥 Main video (Video)&lt;/item&gt;&lt;item&gt;🎥 Additional video examples (Directory)&lt;/item&gt;&lt;item&gt;🎥 Presentation videos (Short) (Long)&lt;/item&gt;&lt;item&gt;📃 Main paper (PDF) (Hindsight)&lt;/item&gt;&lt;item&gt;📊 Supplementary PDF (PDF)&lt;/item&gt;&lt;item&gt;🤖 Supplementary scripts (Directory)&lt;/item&gt;&lt;item&gt;🔍 Singular-value eigenanalysis (Markdown)&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The main branch is undergoing frequent updates and will deviate from the paper 🚧. To retain consistency with the paper, we have created a new branch &lt;code&gt;sigasia-2024&lt;/code&gt;.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;🛠️ Only maintenance updates are planned for this branch.&lt;/item&gt;&lt;item&gt;🚫 General users should not use this branch as it is not optimized for best performance.&lt;/item&gt;&lt;item&gt;🚫 All algorithmic changes listed in this (Markdown) are excluded from this branch.&lt;/item&gt;&lt;item&gt;📦 We also provide a pre-compiled Docker image: &lt;code&gt;ghcr.io/st-tech/ppf-contact-solver-compiled-sigasia-2024:latest&lt;/code&gt;of this branch.&lt;/item&gt;&lt;item&gt;🌐 Template Link for vast.ai&lt;/item&gt;&lt;item&gt;🌐 Template Link for RunPods&lt;/item&gt;&lt;/list&gt;&lt;list rend="ul"&gt;&lt;item&gt;🔥 A modern NVIDIA GPU (CUDA 12.8 or newer)&lt;/item&gt;&lt;item&gt;🐳 A Docker environment (see below)&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Install a 🎮 NVIDIA driver (Link) on your 💻 host system and follow the 📝 instructions below specific to the 🖥️ operating system to get a 🐳 Docker running:&lt;/p&gt;&lt;table&gt;&lt;row span="2"&gt;&lt;cell role="head"&gt;🐧 Linux&lt;/cell&gt;&lt;cell role="head"&gt;🪟 Windows&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;Install the Docker engine from here (Link). Also, install the NVIDIA Container Toolkit (Link). Just to make sure that the Container Toolkit is loaded, run &lt;code&gt;sudo service docker restart&lt;/code&gt;.&lt;/cell&gt;&lt;cell&gt;Install the Docker Desktop (Link). You may need to log out or reboot after the installation. After logging back in, launch Docker Desktop to ensure that Docker is running.&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;Next, run the following command to start the 📦 container:&lt;/p&gt;&lt;code&gt;$MY_WEB_PORT = 8080  # Web port number for web interface
$IMAGE_NAME = "ghcr.io/st-tech/ppf-contact-solver-compiled:latest"
docker run --rm --gpus all -p ${MY_WEB_PORT}:8080 $IMAGE_NAME&lt;/code&gt;&lt;code&gt;MY_WEB_PORT=8080  # Web port number for web interface
IMAGE_NAME=ghcr.io/st-tech/ppf-contact-solver-compiled:latest
docker run --rm --gpus all -p ${MY_WEB_PORT}:8080 $IMAGE_NAME&lt;/code&gt;&lt;p&gt;⏳ Wait for a while until the container becomes a steady state. Next, open your 🌐 browser and navigate to http://localhost:8080, where &lt;code&gt;8080&lt;/code&gt; is the port number specified in the &lt;code&gt;MY_WEB_PORT&lt;/code&gt; variable.
Keep your terminal window open.&lt;/p&gt;&lt;p&gt;🎉 Now you are ready to go! 🚀&lt;/p&gt;&lt;p&gt;To shut down the container, just press &lt;code&gt;Ctrl+C&lt;/code&gt; in the terminal.
The container will be removed and all traces will be 🧹 cleaned up.&lt;/p&gt;&lt;p&gt;If you wish to build the container from scratch 🛠️, please refer to the cleaner installation guide (Markdown) 📝.&lt;/p&gt;&lt;p&gt;Our frontend is accessible through 🌐 a browser using our built-in JupyterLab 🐍 interface. All is set up when you open it for the first time. Results can be interactively viewed through the browser and exported as needed.&lt;/p&gt;&lt;p&gt;This allows you to interact with the simulator on your 💻 laptop while the actual simulation runs on a remote headless server over 🌍 the internet. This means that you don't have to own ⚙️ NVIDIA hardware, but can rent it at vast.ai or RunPod for less than 💵 $0.5 per hour. For example, this (Video) was recorded on a vast.ai instance. The experience is 👍 good!&lt;/p&gt;&lt;p&gt;Our Python interface is designed with the following principles in mind:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;🛠️ Dynamic Tri/Tet Creation: Relying on non-integrated third-party tools for triangulation, tetrahedralization, and loading can make it difficult to dynamically adjust resolutions. Our built-in tri/tet creation tools eliminate this limitation.&lt;/item&gt;&lt;item&gt;🚫 No Mesh Data: Preparing mesh data using external tools can be cumbersome. Our frontend minimizes this effort by allowing meshes to be created on the fly or downloaded when needed.&lt;/item&gt;&lt;item&gt;🔗 Method Chaining: We adopt the method chaining style from JavaScript, making the API intuitive and easy to understand.&lt;/item&gt;&lt;item&gt;📦 Single Import for Everything: All frontend features are accessible by simply importing with &lt;code&gt;from frontend import App&lt;/code&gt;.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Here's an example of draping five sheets over a sphere with two corners pinned. Please look into the examples directory for more examples.&lt;/p&gt;&lt;code&gt;# import our frontend
from frontend import App

# make an app
app = App.create("drape")

# create a square mesh resolution 128 spanning the xz plane
V, F = app.mesh.square(res=128, ex=[1, 0, 0], ey=[0, 0, 1])

# add to the asset and name it "sheet"
app.asset.add.tri("sheet", V, F)

# create an icosphere mesh radius 0.5
V, F = app.mesh.icosphere(r=0.5, subdiv_count=4)

# add to the asset and name it "sphere"
app.asset.add.tri("sphere", V, F)

# create a scene
scene = app.scene.create()

# define gap between sheets
gap = 0.01

for i in range(5):

    # add the sheet asset to the scene
    obj = scene.add("sheet")

    # pick two corners
    corner = obj.grab([1, 0, -1]) + obj.grab([-1, 0, -1])

    # place it with an vertical offset and pin the corners
    obj.at(0, gap * i, 0).pin(corner)

    # set fiber directions required for Baraff-Witkin
    obj.direction([1, 0, 0], [0, 0, 1])

    # set the strainlimiting of 5%
    obj.param.set("strain-limit", 0.05)

# add a sphere mesh at a lower position with jitter and set it static collider
scene.add("sphere").at(0, -0.5 - gap, 0).jitter().pin()

# compile the scene and report stats
scene = scene.build().report()

# preview the initial scene
scene.preview()

# create a new session with the compiled scene
session = app.session.create(scene)

# set session params
session.param.set("frames", 100).set("dt", 0.01)

# build this session
session = session.build()

# start the simulation and live-preview the results (image right)
session.start().preview()

# also show streaming logs
session.stream()

# or interactively view the animation sequences
session.animate()

# export all simulated frames
session.export.animation()&lt;/code&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;p&gt;Full API documentation 📖 is available on our GitHub Pages. The major APIs are documented using docstrings ✍️ and compiled with Sphinx ⚙️. We have also included&lt;/p&gt;&lt;code&gt;jupyter-lsp&lt;/code&gt;to provide interactive linting assistance 🛠️ and display docstrings as you type. See this video (Video) for an example. The behaviors can be changed through the settings.&lt;/item&gt;&lt;item&gt;&lt;p&gt;A list of parameters used in&lt;/p&gt;&lt;code&gt;param.set(key,value)&lt;/code&gt;is documented here: (Global Parameters) (Object Parameters).&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;📊 Logs for the simulation can also be queried through the Python APIs 🐍. Here's an example of how to get a list of recorded logs 📝, fetch them 📥, and compute the average 🧮.&lt;/p&gt;&lt;code&gt;# get a list of log names
logs = session.get.log.names()
print(logs)
assert "time-per-frame" in logs
assert "newton-steps" in logs

# get a list of time per video frame
msec_per_video = session.get.log.numbers("time-per-frame")

# compute the average time per video frame
print("avg per frame:", sum([n for _, n in msec_per_video]) / len(msec_per_video))

# get a list of newton steps
newton_steps = session.get.log.numbers("newton-steps")

# compute the average of consumed newton steps
print("avg newton steps:", sum([n for _, n in newton_steps]) / len(newton_steps))

# Last 8 lines. Omit for everything.
print("==== log stream ====")
for line in session.get.log.stdout(n_lines=8):
    print(line)&lt;/code&gt;&lt;p&gt;Below are some representatives. &lt;code&gt;vid_time&lt;/code&gt; refers to the video time in seconds and is recorded as &lt;code&gt;float&lt;/code&gt;.
&lt;code&gt;ms&lt;/code&gt; refers to the consumed simulation time in milliseconds recorded as &lt;code&gt;int&lt;/code&gt;.
&lt;code&gt;vid_frame&lt;/code&gt; is the video frame count recorede as &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;&lt;table&gt;&lt;row span="3"&gt;&lt;cell role="head"&gt;Name&lt;/cell&gt;&lt;cell role="head"&gt;Description&lt;/cell&gt;&lt;cell role="head"&gt;Format&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;time-per-frame&lt;/cell&gt;&lt;cell&gt;Time per video frame&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_frame,ms)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;matrix-assembly&lt;/cell&gt;&lt;cell&gt;Matrix assembly time&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,ms)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;pcg-linsolve&lt;/cell&gt;&lt;cell&gt;Linear system solve time&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,ms)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;line-search&lt;/cell&gt;&lt;cell&gt;Line search time&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,ms)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;time-per-step&lt;/cell&gt;&lt;cell&gt;Time per step&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,ms)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;newton-steps&lt;/cell&gt;&lt;cell&gt;Newton iterations per step&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,count)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;num-contact&lt;/cell&gt;&lt;cell&gt;Contact count&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list[(vid_time,count)]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;max-sigma&lt;/cell&gt;&lt;cell&gt;Max stretch&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;list(vid_time,float)&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;The full list of log names and their descriptions is documented here: (GitHub Pages).&lt;/p&gt;&lt;p&gt;Note that some entries have multiple records at the same video time ⏱️. This occurs because the same operation is executed multiple times 🔄 within a single step during the inner Newton's iterations 🧮. For example, the linear system solve is performed at each Newton's step, so if multiple Newton's steps are 🔁 executed, multiple linear system solve times appear in the record at the same 📊 video time.&lt;/p&gt;&lt;p&gt;If you would like to retrieve the raw log stream, you can do so by&lt;/p&gt;&lt;code&gt;# Last 8 lines. Omit for everything.
for line in session.get.log.stdout(n_lines=8):
    print(line)&lt;/code&gt;&lt;p&gt;This will output something like:&lt;/p&gt;&lt;code&gt;* dt: 1.000e-03
* max_sigma: 1.045e+00
* avg_sigma: 1.030e+00
------ newton step 1 ------
   ====== contact_matrix_assembly ======
   &amp;gt; dry_pass...0 msec
   &amp;gt; rebuild...7 msec
   &amp;gt; fillin_pass...0 msec
&lt;/code&gt;&lt;p&gt;If you would like to read &lt;code&gt;stderr&lt;/code&gt;, you can do so using &lt;code&gt;session.get.stderr()&lt;/code&gt; (if it exists). They return &lt;code&gt;list[str]&lt;/code&gt;.
All the log files 📂 are available ✅ and can be fetched ⬇️ during the simulation 💻.&lt;/p&gt;&lt;p&gt;Below is a table summarizing the estimated costs for running our examples on a NVIDIA L4 instance &lt;code&gt;g6.2xlarge&lt;/code&gt; at Amazon Web Services US regions (&lt;code&gt;us-east-1&lt;/code&gt; and &lt;code&gt;us-east-2&lt;/code&gt;).&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;💰 Uptime cost is approximately $1 per hour.&lt;/item&gt;&lt;item&gt;⏳ Deployment time is approximately 8 minutes ($0.13). Instance loading takes 3 minutes, and Docker pull &amp;amp; load takes 5 minutes.&lt;/item&gt;&lt;item&gt;🎮 The NVIDIA L4 delivers 30.3 TFLOPS for FP32, offering approximately 36% of the performance of an RTX 4090.&lt;/item&gt;&lt;item&gt;🎥 Video frame rate is 60fps.&lt;/item&gt;&lt;/list&gt;&lt;table&gt;&lt;row span="9"&gt;&lt;cell role="head"&gt;Example&lt;/cell&gt;&lt;cell role="head"&gt;Cost&lt;/cell&gt;&lt;cell role="head"&gt;Time&lt;/cell&gt;&lt;cell role="head"&gt;#Frame&lt;/cell&gt;&lt;cell role="head"&gt;#Vert&lt;/cell&gt;&lt;cell role="head"&gt;#Face&lt;/cell&gt;&lt;cell role="head"&gt;#Tet&lt;/cell&gt;&lt;cell role="head"&gt;#Seg&lt;/cell&gt;&lt;cell role="head"&gt;Max Strain&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;trapped&lt;/cell&gt;&lt;cell&gt;$0.37&lt;/cell&gt;&lt;cell&gt;22.6m&lt;/cell&gt;&lt;cell&gt;300&lt;/cell&gt;&lt;cell&gt;263K&lt;/cell&gt;&lt;cell&gt;299K&lt;/cell&gt;&lt;cell&gt;885K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;twist&lt;/cell&gt;&lt;cell&gt;$0.91&lt;/cell&gt;&lt;cell&gt;55m&lt;/cell&gt;&lt;cell&gt;500&lt;/cell&gt;&lt;cell&gt;203K&lt;/cell&gt;&lt;cell&gt;406K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;stack&lt;/cell&gt;&lt;cell&gt;$0.60&lt;/cell&gt;&lt;cell&gt;36.2m&lt;/cell&gt;&lt;cell&gt;120&lt;/cell&gt;&lt;cell&gt;166.7K&lt;/cell&gt;&lt;cell&gt;327.7K&lt;/cell&gt;&lt;cell&gt;8.8K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;trampoline&lt;/cell&gt;&lt;cell&gt;$0.74&lt;/cell&gt;&lt;cell&gt;44.5m&lt;/cell&gt;&lt;cell&gt;120&lt;/cell&gt;&lt;cell&gt;56.8K&lt;/cell&gt;&lt;cell&gt;62.2K&lt;/cell&gt;&lt;cell&gt;158.0K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;1%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;needle&lt;/cell&gt;&lt;cell&gt;$0.31&lt;/cell&gt;&lt;cell&gt;18.4m&lt;/cell&gt;&lt;cell&gt;120&lt;/cell&gt;&lt;cell&gt;86K&lt;/cell&gt;&lt;cell&gt;168.9K&lt;/cell&gt;&lt;cell&gt;8.8K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;cards&lt;/cell&gt;&lt;cell&gt;$0.29&lt;/cell&gt;&lt;cell&gt;17.5m&lt;/cell&gt;&lt;cell&gt;300&lt;/cell&gt;&lt;cell&gt;8.7K&lt;/cell&gt;&lt;cell&gt;13.8K&lt;/cell&gt;&lt;cell&gt;1.9K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;domino&lt;/cell&gt;&lt;cell&gt;$0.12&lt;/cell&gt;&lt;cell&gt;4.3m&lt;/cell&gt;&lt;cell&gt;250&lt;/cell&gt;&lt;cell&gt;0.5K&lt;/cell&gt;&lt;cell&gt;0.8K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;drape&lt;/cell&gt;&lt;cell&gt;$0.10&lt;/cell&gt;&lt;cell&gt;3.5m&lt;/cell&gt;&lt;cell&gt;100&lt;/cell&gt;&lt;cell&gt;81.9K&lt;/cell&gt;&lt;cell&gt;161.3K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;curtain&lt;/cell&gt;&lt;cell&gt;$0.33&lt;/cell&gt;&lt;cell&gt;19.6m&lt;/cell&gt;&lt;cell&gt;300&lt;/cell&gt;&lt;cell&gt;64K&lt;/cell&gt;&lt;cell&gt;124K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;friction&lt;/cell&gt;&lt;cell&gt;$0.17&lt;/cell&gt;&lt;cell&gt;10m&lt;/cell&gt;&lt;cell&gt;700&lt;/cell&gt;&lt;cell&gt;1.1K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;1K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;hang&lt;/cell&gt;&lt;cell&gt;$0.12&lt;/cell&gt;&lt;cell&gt;7.5m&lt;/cell&gt;&lt;cell&gt;200&lt;/cell&gt;&lt;cell&gt;16.3K&lt;/cell&gt;&lt;cell&gt;32.2K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;1%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;belt&lt;/cell&gt;&lt;cell&gt;$0.19&lt;/cell&gt;&lt;cell&gt;11.4m&lt;/cell&gt;&lt;cell&gt;200&lt;/cell&gt;&lt;cell&gt;12.3K&lt;/cell&gt;&lt;cell&gt;23.3K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;codim&lt;/cell&gt;&lt;cell&gt;$0.36&lt;/cell&gt;&lt;cell&gt;21.6m&lt;/cell&gt;&lt;cell&gt;240&lt;/cell&gt;&lt;cell&gt;122.7K&lt;/cell&gt;&lt;cell&gt;90K&lt;/cell&gt;&lt;cell&gt;474.1K&lt;/cell&gt;&lt;cell&gt;1.3K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;fishingknot&lt;/cell&gt;&lt;cell&gt;$0.38&lt;/cell&gt;&lt;cell&gt;22.5m&lt;/cell&gt;&lt;cell&gt;830&lt;/cell&gt;&lt;cell&gt;19.6K&lt;/cell&gt;&lt;cell&gt;36.9K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;fitting&lt;/cell&gt;&lt;cell&gt;$0.03&lt;/cell&gt;&lt;cell&gt;1.54m&lt;/cell&gt;&lt;cell&gt;240&lt;/cell&gt;&lt;cell&gt;28.4K&lt;/cell&gt;&lt;cell&gt;54.9K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;10%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;noodle&lt;/cell&gt;&lt;cell&gt;$0.14&lt;/cell&gt;&lt;cell&gt;8.45m&lt;/cell&gt;&lt;cell&gt;240&lt;/cell&gt;&lt;cell&gt;116.2K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;116.2K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;ribbon&lt;/cell&gt;&lt;cell&gt;$0.23&lt;/cell&gt;&lt;cell&gt;13.9m&lt;/cell&gt;&lt;cell&gt;480&lt;/cell&gt;&lt;cell&gt;34.9K&lt;/cell&gt;&lt;cell&gt;52.9K&lt;/cell&gt;&lt;cell&gt;8.8K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;5%&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;woven&lt;/cell&gt;&lt;cell&gt;$0.58&lt;/cell&gt;&lt;cell&gt;34.6m&lt;/cell&gt;&lt;cell&gt;450&lt;/cell&gt;&lt;cell&gt;115.6K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;115.4K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="9"&gt;&lt;cell&gt;yarn&lt;/cell&gt;&lt;cell&gt;$0.01&lt;/cell&gt;&lt;cell&gt;0.24m&lt;/cell&gt;&lt;cell&gt;120&lt;/cell&gt;&lt;cell&gt;28.5K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;28.5K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;roller&lt;/cell&gt;&lt;cell&gt;$0.03&lt;/cell&gt;&lt;cell&gt;2.08m&lt;/cell&gt;&lt;cell&gt;240&lt;/cell&gt;&lt;cell&gt;21.4K&lt;/cell&gt;&lt;cell&gt;22.2K&lt;/cell&gt;&lt;cell&gt;61.0K&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;Large scale examples are run on a vast.ai instance with an RTX 4090. At the moment, not all large scale examples are ready yet, but they will be added/updated one by one. The author is actively woriking on it.&lt;/p&gt;&lt;table&gt;&lt;row span="4"&gt;&lt;cell&gt;large-twist (Video)&lt;/cell&gt;&lt;cell&gt;TBA&lt;/cell&gt;&lt;cell&gt;TBA&lt;/cell&gt;&lt;cell&gt;TBA&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;table&gt;&lt;row span="9"&gt;&lt;cell role="head"&gt;Example&lt;/cell&gt;&lt;cell role="head"&gt;Commit&lt;/cell&gt;&lt;cell role="head"&gt;#Vert&lt;/cell&gt;&lt;cell role="head"&gt;#Face&lt;/cell&gt;&lt;cell role="head"&gt;#Tet&lt;/cell&gt;&lt;cell role="head"&gt;#Seg&lt;/cell&gt;&lt;cell role="head"&gt;#Contact&lt;/cell&gt;&lt;cell role="head"&gt;#Frame&lt;/cell&gt;&lt;cell role="head"&gt;Time/Frame&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;large-twist&lt;/cell&gt;&lt;cell&gt;cbafbd2&lt;/cell&gt;&lt;cell&gt;3.2M&lt;/cell&gt;&lt;cell&gt;6.4M&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;N/A&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;56.7M&lt;/cell&gt;&lt;cell&gt;2,000&lt;/cell&gt;&lt;cell&gt;46.4s&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;We implemented GitHub Actions that test all of our examples except for large scale ones, which take from hours to days to finish. We perform explicit intersection checks 🔍 at the end of each step, which raises an error ❌ if an intersection is detected. This ensures that all steps are confirmed to be penetration-free if tests are pass ✅. The runner types are described as follows:&lt;/p&gt;&lt;p&gt;The tested 🚀 runner of this action is the Ubuntu NVIDIA GPU-Optimized Image for AI and HPC with an NVIDIA Tesla T4 (16 GB VRAM) with Driver version 570.133.20. This is not a self-hosted runner, meaning that each time the runner launches, all environments are 🌱 fresh.&lt;/p&gt;&lt;p&gt;We use the GitHub-hosted runner 🖥️, but the actual simulation runs on a &lt;code&gt;g6e.2xlarge&lt;/code&gt; AWS instance 🌐.
Since we start with a fresh 🌱 instance, the environment is clean 🧹 every time.
We take advantage of the ability to deploy on the cloud; this action is performed in parallel, which reduces the total action time.&lt;/p&gt;&lt;p&gt;We generate zipped action artifacts 📦 for each run. These artifacts include:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;📝 Logs: Detailed logs of the simulation runs.&lt;/item&gt;&lt;item&gt;📊 Metrics: Performance metrics and statistics.&lt;/item&gt;&lt;item&gt;📹 Videos: Simulated animations.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Please note that these artifacts will be deleted after a month.&lt;/p&gt;&lt;p&gt;We know that you can't judge the reliability of contact resolution by simply watching a single success 🎥 video example. To ensure greater transparency, we implemented GitHub Actions to run many of our examples via automated GitHub Actions ⚙️, not just once, but 10 times in a row 🔁. This means that a single failure out of 10 tests is considered a failure of the entire test suite!&lt;/p&gt;&lt;p&gt;Also, we apply small jitters to the position of objects in the scene 🔄, so at each run, the scene is slightly different.&lt;/p&gt;&lt;p&gt;Our contact solver is designed for heavy use in cloud services ☁️, enabling:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;💰 Cost-Effective Development: Quickly deploy testing environments 🚀 and delete 🗑️ them when not in use, saving costs.&lt;/item&gt;&lt;item&gt;📈 Flexible Scalability: Scale as needed based on demand 📈. For example, you can launch multiple instances before a specific deadline ⏰.&lt;/item&gt;&lt;item&gt;🌍 High Accessibility: Allow anyone with an internet connection 🌍 to try our solver, even on a smartphone 📱 or tablet 🖥️.&lt;/item&gt;&lt;item&gt;🐛 Easier Bug Tracking: Users and developers can easily share the same hardware, kernel, and driver environment, making it easier to track and fix bugs.&lt;/item&gt;&lt;item&gt;🛠️ Free Maintenance Cost: No need to maintain hardware for everyday operations or introduce redundancy for malfunctions.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This is made possible with our purely web-based frontends 🌐 and scalable capability 🧩. Our main target is the NVIDIA L4 🖱️, a data-center-targeted GPU 🖥️ that offers reasonable pricing 💲, delivering both practical performance 💪 and scalability 📊 without investing in expensive hardware 💻.&lt;/p&gt;&lt;p&gt;Below, we describe how to deploy our solver on major cloud services ☁️. These instructions are up to date as of late 2024 📅 and are subject to change 🔄.&lt;/p&gt;&lt;p&gt;Important: For all the services below, don't forget to ❌ delete the instance after use, or you’ll be 💸 charged for nothing.&lt;/p&gt;&lt;head rend="h3"&gt;📦 Deploying on vast.ai&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Select our template (Link).&lt;/item&gt;&lt;item&gt;Create an instance and click &lt;code&gt;Open&lt;/code&gt;button.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;📦 Deploying on RunPod&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Follow this link (Link) and deploy an instance using our template.&lt;/item&gt;&lt;item&gt;Click &lt;code&gt;Connect&lt;/code&gt;button and open the&lt;code&gt;HTTP Services&lt;/code&gt;link.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;📦 Deploying on Scaleway&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Set zone to &lt;code&gt;fr-par-2&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Select type &lt;code&gt;L4-1-24G&lt;/code&gt;or&lt;code&gt;GPU-3070-S&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Choose &lt;code&gt;Ubuntu Jammy GPU OS 12&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Do not skip the Docker container creation in the installation process; it is required.&lt;/item&gt;&lt;item&gt;This setup costs approximately €0.76 per hour.&lt;/item&gt;&lt;item&gt;CLI instructions are described in (Markdown).&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;📦 Deploying on Amazon Web Services&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Amazon Machine Image (AMI): &lt;code&gt;Deep Learning Base AMI with Single CUDA (Ubuntu 22.04)&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Instance Type: &lt;code&gt;g6.2xlarge&lt;/code&gt;(Recommended)&lt;/item&gt;&lt;item&gt;This setup costs around $1 per hour.&lt;/item&gt;&lt;item&gt;Do not skip the Docker container creation in the installation process; it is required.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;📦 Deploying on Google Compute Engine&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;p&gt;Select&lt;/p&gt;&lt;code&gt;GPUs&lt;/code&gt;. We recommend the GPU type&lt;code&gt;NVIDIA L4&lt;/code&gt;because it's affordable and accessible, as it does not require a high quota. You may select&lt;code&gt;T4&lt;/code&gt;instead for testing purposes.&lt;/item&gt;&lt;item&gt;&lt;p&gt;Do not check&lt;/p&gt;&lt;code&gt;Enable Virtual Workstation (NVIDIA GRID)&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;p&gt;We recommend the machine type&lt;/p&gt;&lt;code&gt;g2-standard-8&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;p&gt;Choose the OS type&lt;/p&gt;&lt;code&gt;Deep Learning VM with CUDA 12.4 M129&lt;/code&gt;and set the disk size to&lt;code&gt;50GB&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;p&gt;As of late 2024, this configuration costs approximately $0.86 per hour in&lt;/p&gt;&lt;code&gt;us-central1 (Iowa)&lt;/code&gt;and $1.00 per hour in&lt;code&gt;asia-east1 (Taiwan)&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;p&gt;Port number&lt;/p&gt;&lt;code&gt;8080&lt;/code&gt;is reserved by the OS image. Set&lt;code&gt;$MY_WEB_PORT&lt;/code&gt;to&lt;code&gt;8888&lt;/code&gt;. When connecting via&lt;code&gt;gcloud&lt;/code&gt;, use the following format:&lt;code&gt;gcloud compute ssh --zone "xxxx" "instance-name" -- -L 8080:localhost:8888&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;p&gt;Do not skip the Docker container creation in the installation process; it is required.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;CLI instructions are described in (Markdown).&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;code&gt;@software{ppf-contact-solver-2024,
    title = {ZOZO's Contact Solver},
    author = {Ryoichi Ando},
    note = {https://github.com/st-tech/ppf-contact-solver},
    year = 2024,
}&lt;/code&gt;&lt;p&gt;The author thanks ZOZO, Inc. for permitting the release of the code and the team members for assisting with the internal paperwork for this project.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/st-tech/ppf-contact-solver"/><published>2025-10-30T15:21:46+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45761445</id><title>Affinity Studio now free</title><updated>2025-10-31T02:25:15.420267+00:00</updated><content>&lt;doc fingerprint="3bd67e5e966d06c5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Get Affinity&lt;/head&gt;
    &lt;p&gt;Available on desktop for&lt;/p&gt;
    &lt;p&gt;The all-in-one creative app, with everything you need to craft designs, edit images, and lay it all out, without ever leaving your document or paying a thing.&lt;/p&gt;
    &lt;quote&gt;$0, free&lt;/quote&gt;
    &lt;p&gt;To download Affinity, sign in with your Canva account (or create one for free).&lt;/p&gt;
    &lt;head rend="h2"&gt;One powerful app. No cost.&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Fully-featured toolsets&lt;/p&gt;
        &lt;p&gt;From vector to pixel to layout, Affinity has all the studio-grade tools you need under one roof.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Customizable studios&lt;/p&gt;
        &lt;p&gt;Mix and match your favorite tools to build your very own creative studios.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Non-destructive editing&lt;/p&gt;
        &lt;p&gt;Experiment as much you want, keep your original files intact.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pixel-perfect export&lt;/p&gt;
        &lt;p&gt;Full control over how your work leaves the app, whether it’s by object, slice, or doc.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;What you’ll get&lt;/head&gt;
    &lt;p&gt;With Affinity, you’ll get all the professional tools you need for your design, photo editing, and page layout projects, free of charge. If you’re on a Canva premium plan, you’ll also be able to unlock Canva AI tools directly in Affinity for a super-powered workflow.&lt;/p&gt;
    &lt;p&gt;+ Canva premium plans&lt;/p&gt;
    &lt;head rend="h2"&gt;Design workflows&lt;/head&gt;
    &lt;p&gt;Access all vector design, photo editing, and page layout tools in one app&lt;/p&gt;
    &lt;p&gt;Combine vector and pixel work on the same .af document&lt;/p&gt;
    &lt;p&gt;Customize your workspace with floating toolbars and studio presets&lt;/p&gt;
    &lt;p&gt;Real-time performance engine for ultra-smooth editing&lt;/p&gt;
    &lt;p&gt;Non-destructive editing across layers, filters, and adjustments&lt;/p&gt;
    &lt;p&gt;Import PSD, AI, PDF, SVG, IDML and more with high fidelity&lt;/p&gt;
    &lt;p&gt;Export with one-click presets or custom slice-based output&lt;/p&gt;
    &lt;p&gt;Quick export direct to Canva&lt;/p&gt;
    &lt;head rend="h2"&gt;Powerful photo editing&lt;/head&gt;
    &lt;p&gt;Live filters and adjustments with instant preview&lt;/p&gt;
    &lt;p&gt;Full RAW editing, tone mapping, and lens correction&lt;/p&gt;
    &lt;p&gt;Advanced retouching: inpainting brush, healing tools, dodge and burn&lt;/p&gt;
    &lt;p&gt;Batch processing with recordable macros, HDR merge, panorama stitching, and more&lt;/p&gt;
    &lt;head rend="h2"&gt;Pro vector design&lt;/head&gt;
    &lt;p&gt;Precision drawing with pen, node, and pencil tools&lt;/p&gt;
    &lt;p&gt;Live shape editing, booleans, and shape builder&lt;/p&gt;
    &lt;p&gt;Flexible gradients with full control&lt;/p&gt;
    &lt;p&gt;Trace pixel images&lt;/p&gt;
    &lt;p&gt;Pixel-perfect vector tools for illustration and layout&lt;/p&gt;
    &lt;head rend="h2"&gt;Advanced page layout&lt;/head&gt;
    &lt;p&gt;Linked text frames with autoflow and live text wrapping&lt;/p&gt;
    &lt;p&gt;Smart master pages with overrides and reusable layouts&lt;/p&gt;
    &lt;p&gt;Pro typography: ligatures, stylistic sets, drop caps, and variable fonts&lt;/p&gt;
    &lt;p&gt;Print-ready output: CMYK, spot colours, preflight, bleed, and slug support&lt;/p&gt;
    &lt;p&gt;Data merge from .csv with tokens, image merge, and conditional logic&lt;/p&gt;
    &lt;head rend="h2"&gt;Canva AI Studio&lt;/head&gt;
    &lt;p&gt;Generative Fill, Expand, and Edit&lt;/p&gt;
    &lt;p&gt;Generate Images and Vectors&lt;/p&gt;
    &lt;p&gt;Remove Background and Subject Selection&lt;/p&gt;
    &lt;p&gt;Colorize, Depth Selection, and Super Resolution&lt;/p&gt;
    &lt;p&gt;Portrait Blur and Portrait Lighting&lt;/p&gt;
    &lt;p&gt;Full AI generation history&lt;/p&gt;
    &lt;head rend="h2"&gt;Need Affinity for your organization?&lt;/head&gt;
    &lt;p&gt;Skip the individual downloads and get your entire team on Affinity with SSO via a Canva Enterprise or Canva Districts account. Choose an option below to get started.&lt;/p&gt;
    &lt;head rend="h2"&gt;FAQs&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Yes, Affinity really is free. That doesn’t mean you’re getting a watered-down version of the app though. You can use every tool in the Pixel, Vector, and Layout studios, plus all of the customization and export features, as much as you want, with no restrictions or payment needed. The app will also receive free updates with new features and improvements added.&lt;/p&gt;
        &lt;p&gt;If you’re on a Canva premium plan (Pro, Business, Enterprise, Education), you’ll also be able to unlock Canva’s powerful AI tools within Affinity via the Canva AI Studio.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. Affinity is now brought to you by Canva, and your Canva account gives you access to Affinity and other Canva products and features.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No. You can access all of Affinity’s vector, layout, and pixel tools for free without a Canva subscription. If you’d like to unlock Canva AI tools within Affinity, however, you will need a premium Canva plan.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;This is a brand-new product that gives you advanced photo editing, graphic design, and page layout tools under one roof. It includes highly requested features such as Image Trace, ePub support, mesh gradients, hatch fills, live glitch filter, as well as custom capabilities that allow you to rearrange panels and combine tools to build your own unique studios. Plus, with a Canva premium plan, you can unlock incredibly powerful AI tools such as Generative Fill, Generative Expand, Generate Image/Vector, and more — directly in Affinity.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. With a Canva premium plan you can unlock Canva AI features in Affinity.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No, these are only available to those with Canva premium accounts.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is currently available on Windows and macOS (iPadOS coming soon!).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;We’re busy building our iPad version — stay tuned for updates!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is optimized for the latest hardware, including Apple silicon.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Absolutely! The new desktop version of Affinity can open all files created in Affinity V2 or V1 apps. However, Affinity V1 and V2 cannot open files that are created or saved in the newer app, Affinity by Canva.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No, it’s the same app, just available on different operating systems.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes, you can install Affinity on as many devices as you like.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes! It’s easy to import PSDs, AIs, IDMLs, DWGs, and other file types into Affinity, with structure, layers, and creative intent preserved.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is available in English, French, German, Italian, Spanish, Portuguese, Japanese, Chinese, Bahasa Indonesian, and Turkish. Keep an eye out for more languages coming soon!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Get in touch to speak to our team about how your organization can get set up with Affinity, including SSO.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Then all you need to do is stay in one of our pre-built studios: Pixel, Vector or Layout. You’ll find all your favorite tools there, plus some new ones. Since it’s all free, just think of the other creative toolsets as an added bonus!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;That’s totally fine. Your Affinity V2 license (via Serif) remains valid and Serif will continue to keep activation servers online. But please note that these apps won’t receive future updates.&lt;/p&gt;
        &lt;p&gt;For the best experience, we recommend using the new Affinity by Canva app.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;No. The new desktop version of Affinity can open all files created in V2, but older versions (including V2 on iPad) cannot open newer Affinity (.af) files, meaning you won’t be able to work across both platforms.&lt;/p&gt;&lt;lb/&gt;We don’t have a release date for the new Affinity on iPad yet, so recommend continuing to run V2 independently while you enjoy the new Affinity on desktop.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. The new Affinity by Canva app will receive free updates and new features over time.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;You will need to be online to download and activate your license with your free Canva account. From then on, there is no requirement to be online, even with extended offline periods.&lt;/p&gt;
        &lt;p&gt;There are a couple of things to keep in mind:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;There are some features which do require you to be online, if you choose to use them, such as product help, lessons, stock libraries and integrations with Canva including AI tools.&lt;/item&gt;
          &lt;item&gt;We’ll also be releasing new updates and patches regularly, so we recommend connecting from time to time to keep your app up to date, but it's not a requirement of use.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;You need a Canva premium plan to unlock all of Canva’s AI features in Affinity. Simply download the Affinity app via our Downloads page and follow the prompts once you click ‘Canva AI Studio’.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.affinity.studio/get-affinity"/><published>2025-10-30T15:54:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45762012</id><title>Launch HN: Propolis (YC X25) – Browser agents that QA your web app autonomously</title><updated>2025-10-31T02:25:14.998710+00:00</updated><link href="https://app.propolis.tech/#/launch"/><published>2025-10-30T16:40:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45762259</id><title>The ear does not do a Fourier transform (2024)</title><updated>2025-10-31T02:25:14.728410+00:00</updated><content>&lt;doc fingerprint="a63e213260f69383"&gt;
  &lt;main&gt;
    &lt;p&gt;Let’s talk about how the cochlea computes!&lt;/p&gt;
    &lt;p&gt;The tympanic membrane (eardrum) is vibrated by changes in air pressure (sound waves). Bones in the middle ear amplify and send these vibrations to the fluid-filled, snail-shaped cochlea. Vibrations travel through the fluid to the basilar membrane, which remarkably performs frequency separation1: the stiffer, lighter base resonates with high frequency components of the signal, and the more flexible, heavier apex resonates with lower frequencies. Between the two ends, the resonant frequencies decrease logarithmically in space2.&lt;/p&gt;
    &lt;p&gt;The hair cells on different parts of the basilar membrane wiggle back and forth at the frequency corresponding to their position on the membrane. But how do wiggling hair cells translate to electrical signals? This mechanoelectrical transduction process feels like it could be from a Dr. Seuss world: springs connected to the ends of hair cells open and close ion channels at the frequency of the vibration, which then cause neurotransmitter release. Bruno calls them “trapdoors”. Here’s a visualization:&lt;/p&gt;
    &lt;p&gt;It’s clear that the hardware of the ear is well-equipped for frequency analysis. Nerve fibers serve as filters to extract temporal and frequency information about a signal. Below are examples of filters (not necessarily of the ear) shown in the time domain. On the left are filters that are more localized in time, i.e. when a filter is applied to a signal, it is clear when in the signal the corresponding frequency occurred. On the right are filters that have less temporal specificity, but are more uniformly distributed across frequencies compared to the left one.&lt;/p&gt;
    &lt;p&gt;Wouldn’t it be convenient if the cochlea were doing a Fourier transform, which would fit cleanly into how we often analyze signals in engineering? But no 🙅🏻♀️! A Fourier transform has no explicit temporal precision, and resembles something closer to the waveforms on the right; this is not what the filters in the cochlea look like.&lt;/p&gt;
    &lt;p&gt;We can visualize different filtering schemes, or tiling of the time-frequency domain, in the following figure. In the leftmost box, where each rectangle represents a filter, a signal could be represented at a high temporal resolution (similar to left filters above), but without information about its constituent frequencies. On the other end of the spectrum, the Fourier transform performs precise frequency decomposition, but we cannot tell when in the signal that frequency occurred (similar to right filters)3. What the cochlea is actually doing is somewhere between a wavelet and Gabor. At high frequencies, frequency resolution is sacrificed for temporal resolution, and vice versa at low frequencies.&lt;/p&gt;
    &lt;p&gt;Why would this type of frequency-temporal precision tradeoff be a good representation? One theory, explored in Lewicki 2002, is that these filters are a strategy to reduce the redundancy in the representation of natural sounds. Lewicki performed independent component analysis (ICA) to produce filters maximizing statistical independence, comparing environmental sounds, animal vocalizations, and human speech. The tradeoffs look different for each one, and you can kind of map them to somewhere in the above cartoon.&lt;/p&gt;
    &lt;p&gt;It appears that human speech occupies a distinct time-frequency space. Some speculate that speech evolved to fill a time-frequency space that wasn’t yet occupied by other existing sounds.&lt;/p&gt;
    &lt;p&gt;To drive the theory home, one that we have been hinting at since the outset: forming ecologically-relevant representations makes sense, as behavior is dependent on the environment. It appears that for audition, as well as other sensory modalities, we are doing this. This is a bit of a teaser for efficient coding, which we will get to soon.&lt;/p&gt;
    &lt;p&gt;We’ve talked about some incredible mechanisms that occur at the beginning of the sensory coding process, but it’s truly just the tiny tip of the ice burg. We also glossed over how these computations occur. The next lecture will zoom into the biophysics of computation in neurons.&lt;/p&gt;
    &lt;p&gt;We call this tonotopic organization, which is a mapping from frequency to space. This type of organization also exists in the cortex for other senses in addition to audition, such as retinotopy for vision and somatotopy for touch.&lt;/p&gt;
    &lt;p&gt;The relationship between human pitch perception and frequency is logarithmic. Coincidence? 😮&lt;/p&gt;
    &lt;p&gt;One could argue we should be comparing to a short-time Fourier transform, but this has resolution issues, and is still not what the cochlea appears to be doing.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.dissonances.blog/p/the-ear-does-not-do-a-fourier-transform"/><published>2025-10-30T17:01:20+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45763877</id><title>Minecraft HDL, an HDL for Redstone</title><updated>2025-10-31T02:25:14.096089+00:00</updated><content>&lt;doc fingerprint="3271921d09773db1"&gt;
  &lt;main&gt;
    &lt;p&gt;Minecraft HDL is a digital synthesis flow for minecraft redstone circuits. It is an attempt to use industry standard design tools and methods to generate digital circuits with redstone.&lt;/p&gt;
    &lt;p&gt;This file &lt;code&gt;multiplexer4_1.v&lt;/code&gt; is a 6 input - 1 output circuit that selects one of the first 4 inputs (a, b, c, d) as the output based on the value of the last 2 inputs (x, y)&lt;/p&gt;
    &lt;code&gt;module multiplexer4_1 ( a ,b ,c ,d ,x ,y ,dout ); 
 
output dout ; 
input a, b, c, d, x, y; 
 
assign dout = (a &amp;amp; (~x) &amp;amp; (~y)) | 
     (b &amp;amp; (~x) &amp;amp; (y)) |  
     (c &amp;amp; x &amp;amp; (~y)) | 
     (d &amp;amp; x &amp;amp; y); 
endmodule &lt;/code&gt;
    &lt;p&gt;When synthesized through Minecraft HDL it produces this circuit:&lt;/p&gt;
    &lt;p&gt;With the 6 inputs on the right and the single output on the left&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Screenshots &amp;amp; Sample Circuits&lt;/item&gt;
      &lt;item&gt;Getting Started - Installing and Using MinecraftHDL&lt;/item&gt;
      &lt;item&gt;Background Theory - Digital Design &amp;amp; Verilog&lt;/item&gt;
      &lt;item&gt;How MinecraftHDL Works - Read Our Paper&lt;/item&gt;
      &lt;item&gt;Developper Info - If you want to fork or contribute&lt;/item&gt;
      &lt;item&gt;Quick Overview - Check out our poster&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;MinecraftHDL was the final undergraduate design project made by three students in the Electrical, Computer &amp;amp; Software Engineering department at McGill University.&lt;/p&gt;
    &lt;p&gt;It is by no means bug-free or even complete; It produces objectively inferior circuits to 'hand-made' redstone designs, and is not intended to be used in modded survival. It can generate almost any verilog circuit, however only simple designs will actually be testable in-game since any moderately-complex design will end up being longer than the maximum number of blocks loaded in Minecraft.&lt;/p&gt;
    &lt;p&gt;Additionally, we are currently unable to synthesize sequential circuits, aka any circuits with a loopback or feedback. That means no memory, no counters or any circuit that could hold a state.&lt;/p&gt;
    &lt;p&gt;MinecraftHDL is an educational tool to illustrate on a macro-scopic scale how microelectronic digital circuits are designed and produced. It is a great way to introduce younger audiences to the world of digital design and can also be used to illustrate the difference between software and hardware design to undergraduate engineers taking their first RTL class.&lt;/p&gt;
    &lt;p&gt;Supervisor: Brett H. Meyer - Website&lt;lb/&gt; Students: Francis O'Brien - Website&lt;lb/&gt; Omar Ba Mashmos&lt;lb/&gt; Andrew Penhale&lt;/p&gt;
    &lt;p&gt;To show how easy it is to make a circuit with MinecraftHDL here is a gif of me creating a circuit, synthesizing, and generating it in minecraft in less than a minute!&lt;/p&gt;
    &lt;p&gt;The circuit I generate above is a 2bit adder. It takes two numbers of two bits and adds them. At the end of the gif I set both input numbers to '11' which is the binary representation of the number 3. Then I move to the output and we see that O3=1, O2=1, and O1=0, this gives the binary number '110' which is indeed 6.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/itsfrank/MinecraftHDL"/><published>2025-10-30T18:59:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45765664</id><title>Denmark reportedly withdraws Chat Control proposal following controversy</title><updated>2025-10-31T02:25:13.620616+00:00</updated><content>&lt;doc fingerprint="f3c7115416b5d37e"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Denmark reportedly withdraws Chat Control proposal following controversy&lt;/head&gt;
    &lt;p&gt;Denmark’s justice minister on Thursday said he will no longer push for an EU law requiring the mandatory scanning of electronic messages, including on end-to-end encrypted platforms.&lt;/p&gt;
    &lt;p&gt;Earlier in its European Council presidency, Denmark had brought back a draft law which would have required the scanning, sparking an intense backlash. Known as Chat Control, the measure was intended to crack down on the trafficking of child sex abuse materials (CSAM).&lt;/p&gt;
    &lt;p&gt;After days of silence, the German government on October 8 announced it would not support the proposal, tanking the Danish effort.&lt;/p&gt;
    &lt;p&gt;Danish Justice Minister Peter Hummelgaard told reporters on Thursday that his office will support voluntary CSAM detections.&lt;/p&gt;
    &lt;p&gt;"This will mean that the search warrant will not be part of the EU presidency's new compromise proposal, and that it will continue to be voluntary for the tech giants to search for child sexual abuse material," Hummelgaard said, according to local news reports.&lt;/p&gt;
    &lt;p&gt;The current model allowing for voluntary scanning expires in April, Hummelgaard said.&lt;/p&gt;
    &lt;p&gt;"Right now we are in a situation where we risk completely losing a central tool in the fight against sexual abuse of children,” he said. "That's why we have to act no matter what. We owe it to all the children who are subjected to monstrous abuse."&lt;/p&gt;
    &lt;p&gt;Meredith Whittaker, the president of the Signal Foundation, lobbied hard against the original measure, saying the organization would leave the European market if the provision was adopted.&lt;/p&gt;
    &lt;p&gt;“What they propose is in effect a mass surveillance free-for-all, opening up everyone’s intimate and confidential communications, whether government officials, military, investigative journalists, or activists,” she said at the time.&lt;/p&gt;
    &lt;p&gt;Suzanne Smalley&lt;/p&gt;
    &lt;p&gt;is a reporter covering privacy, disinformation and cybersecurity policy for The Record. She was previously a cybersecurity reporter at CyberScoop and Reuters. Earlier in her career Suzanne covered the Boston Police Department for the Boston Globe and two presidential campaign cycles for Newsweek. She lives in Washington with her husband and three children.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://therecord.media/demark-reportedly-withdraws-chat-control-proposal"/><published>2025-10-30T21:35:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45765787</id><title>Phone numbers for use in TV shows, films and creative works</title><updated>2025-10-31T02:25:12.836744+00:00</updated><content>&lt;doc fingerprint="c83d86dd4cb0f56b"&gt;
  &lt;main&gt;
    &lt;p&gt; On this page &lt;/p&gt;
    &lt;p&gt;Looking for info about unwanted calls? Learn more about phone scams and how you can make your number more private.&lt;/p&gt;
    &lt;head rend="h2"&gt;Geographical numbers&lt;/head&gt;
    &lt;p&gt;You can use the following prefixes and first 4 digits, then any 4 digits you like (shown here as 'xxxx').&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Region&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Number range&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;Central East (covering NSW and ACT)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(02) 5550 xxxx and (02) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;South East (covering VIC and TAS)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(03) 5550 xxxx and (03) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;North East (covering QLD)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(07) 5550 xxxx and (07) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Central West (covering SA, WA and NT)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(08) 5550 xxxx and (08) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Mobile numbers&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;0491 570 006&lt;/item&gt;
      &lt;item&gt;0491 570 156&lt;/item&gt;
      &lt;item&gt;0491 570 157&lt;/item&gt;
      &lt;item&gt;0491 570 158&lt;/item&gt;
      &lt;item&gt;0491 570 159&lt;/item&gt;
      &lt;item&gt;0491 570 110&lt;/item&gt;
      &lt;item&gt;0491 570 313&lt;/item&gt;
      &lt;item&gt;0491 570 737&lt;/item&gt;
      &lt;item&gt;0491 571 266&lt;/item&gt;
      &lt;item&gt;0491 571 491&lt;/item&gt;
      &lt;item&gt;0491 571 804&lt;/item&gt;
      &lt;item&gt;0491 572 549&lt;/item&gt;
      &lt;item&gt;0491 572 665&lt;/item&gt;
      &lt;item&gt;0491 572 983&lt;/item&gt;
      &lt;item&gt;0491 573 770&lt;/item&gt;
      &lt;item&gt;0491 573 087&lt;/item&gt;
      &lt;item&gt;0491 574 118&lt;/item&gt;
      &lt;item&gt;0491 574 632&lt;/item&gt;
      &lt;item&gt;0491 575 254&lt;/item&gt;
      &lt;item&gt;0491 575 789&lt;/item&gt;
      &lt;item&gt;0491 576 398&lt;/item&gt;
      &lt;item&gt;0491 576 801&lt;/item&gt;
      &lt;item&gt;0491 577 426&lt;/item&gt;
      &lt;item&gt;0491 577 644&lt;/item&gt;
      &lt;item&gt;0491 578 957&lt;/item&gt;
      &lt;item&gt;0491 578 148&lt;/item&gt;
      &lt;item&gt;0491 578 888&lt;/item&gt;
      &lt;item&gt;0491 579 212&lt;/item&gt;
      &lt;item&gt;0491 579 760&lt;/item&gt;
      &lt;item&gt;0491 579 455&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Freephone and local rate numbers&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1800 160 401&lt;/item&gt;
      &lt;item&gt;1800 975 707&lt;/item&gt;
      &lt;item&gt;1800 975 708&lt;/item&gt;
      &lt;item&gt;1800 975 709&lt;/item&gt;
      &lt;item&gt;1800 975 710&lt;/item&gt;
      &lt;item&gt;1800 975 711&lt;/item&gt;
      &lt;item&gt;1300 975 707&lt;/item&gt;
      &lt;item&gt;1300 975 708&lt;/item&gt;
      &lt;item&gt;1300 975 709&lt;/item&gt;
      &lt;item&gt;1300 975 710&lt;/item&gt;
      &lt;item&gt;1300 975 711&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.acma.gov.au/phone-numbers-use-tv-shows-films-and-creative-works"/><published>2025-10-30T21:49:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45766253</id><title>A change of address led to our Wise accounts being shut down</title><updated>2025-10-31T02:25:10.438604+00:00</updated><content>&lt;doc fingerprint="72c0a9533044ffc4"&gt;
  &lt;main&gt;
    &lt;p&gt;For years, one of my businesses has been a regular user of Wise (formerly TransferWise). Wise is a financial service that lets you send and receive money across currencies, often at a better rate and lower fee than traditional banks. Sounds great, right?&lt;/p&gt;
    &lt;p&gt;Until it isn’t.&lt;/p&gt;
    &lt;p&gt;This is our story – a sobering, frustrating, and frankly appalling experience that ended with our business and personal accounts being shut down, without any meaningful reason, support, or recourse.&lt;/p&gt;
    &lt;p&gt;And all we did? We updated our address.&lt;/p&gt;
    &lt;head rend="h2"&gt;🏢 A Routine Change Turned Nightmare&lt;/head&gt;
    &lt;p&gt;Like many businesses, we recently moved into a new office. Alongside the usual updates to suppliers and records, we updated our physical address with Wise. Not long after, we received an email requesting us to verify the new address.&lt;/p&gt;
    &lt;p&gt;Fair enough – we had no problem with that.&lt;/p&gt;
    &lt;p&gt;Wise provided a dropdown list of acceptable documents: a lease agreement, rates notice, tax document, utilities bill, or telecommunications bill. Due to our company structure, most of those documents are in the name of our parent company or show our PO Box (which NZ Post requires, since they won’t deliver to our street address). But we had a telecommunications bill that ticked every box:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Correct entity name ✅&lt;/item&gt;
      &lt;item&gt;Correct physical street address ✅&lt;/item&gt;
      &lt;item&gt;Even detailed our fibre connection at the new premises ✅&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So we uploaded it – and assumed that would be the end of it.&lt;/p&gt;
    &lt;p&gt;We were so wrong.&lt;/p&gt;
    &lt;head rend="h2"&gt;📞 The Call That Made No Sense&lt;/head&gt;
    &lt;p&gt;Days later, we received an email: our document was rejected.&lt;/p&gt;
    &lt;p&gt;No clear reason. So, I called Wise and explained the situation to the customer service representative.&lt;/p&gt;
    &lt;p&gt;Her response left me stunned.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“The document was rejected because it was a tax invoice, not a bill.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Wait… what?&lt;/p&gt;
    &lt;p&gt;I paused, trying to process this. I politely explained that in New Zealand, a “tax invoice” is a legal form of a bill – even down to the name “tax invoice” being a legal requirement by IRD, and that’s how telecommunications companies issue invoices here. But she refused to accept it.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“It needs to say Telecommunications Bill at the top,” she insisted.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;“A tax invoice isn’t acceptable.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is simply not true, and completely out of touch with New Zealand’s business documentation standards. The rep wouldn’t budge.&lt;/p&gt;
    &lt;head rend="h2"&gt;🧠 The “Solution” That Was Beyond Belief&lt;/head&gt;
    &lt;p&gt;Still trying to find a solution, I asked: what do you recommend I do then?&lt;/p&gt;
    &lt;p&gt;Her answer?&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“You should find a local shared workspace, lease a desk under your company name, change your registered office to that address, and use that lease document to verify your address with us.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Yes, you read that right.&lt;/p&gt;
    &lt;p&gt;Wise’s advice was to artificially lease a desk we didn’t need, change our registered address, and use that document – just to verify an address we actually operate from.&lt;/p&gt;
    &lt;p&gt;I asked to speak to a manager. That request was refused. She told me, flatly:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“I am providing you with the correct information.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;A bit more back and forth… then the call was disconnected.&lt;/p&gt;
    &lt;head rend="h2"&gt;📞 A Glimmer of Hope – Then The Hammer Falls&lt;/head&gt;
    &lt;p&gt;Later that day, I received a call back from Wise – not from a manager (because apparently, Wise doesn’t have managers), but from a more “senior” representative.&lt;/p&gt;
    &lt;p&gt;This rep was more empathetic and agreed the document should have been acceptable. She escalated the issue, resubmitted the document herself, and said she’d personally follow up if it was rejected again.&lt;/p&gt;
    &lt;p&gt;Progress, I thought.&lt;/p&gt;
    &lt;p&gt;Until the next morning.&lt;/p&gt;
    &lt;head rend="h2"&gt;🚫 “We’ve Restricted Your Account”&lt;/head&gt;
    &lt;p&gt;I woke to an email with a stunning subject line:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“We’ve restricted your account”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Just like that, our entire business account was locked. No warning. No reason. No discussion.&lt;/p&gt;
    &lt;p&gt;We could no longer send or receive money, use our Wise cards, or even contact support. The email stated:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“Due to our current risk policies, your account will be closed in a few months. You will not be able to use support channels.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Even worse? My personal Wise account was locked too. The same personal account which did have its address fully verified, by a rates invoice for my personal address.&lt;/p&gt;
    &lt;p&gt;Both had funds inside.&lt;/p&gt;
    &lt;head rend="h2"&gt;🧾 An “Appeal” That Wasn’t an Appeal&lt;/head&gt;
    &lt;p&gt;The email offered an option to appeal. Naturally, I did.&lt;/p&gt;
    &lt;p&gt;The appeal process asked for our articles of incorporation and share registry. No problem.&lt;/p&gt;
    &lt;p&gt;Then it asked us to provide our preferred currency, and bank account details to refund the balances.&lt;/p&gt;
    &lt;p&gt;Wait… I thought this was an appeal? A chance to discuss and resolve the issue?&lt;/p&gt;
    &lt;p&gt;Nope.&lt;/p&gt;
    &lt;p&gt;That was the end. There was no opportunity to explain anything, no communication, no questions asked. The decision was made, and we were locked out, permanently.&lt;/p&gt;
    &lt;head rend="h2"&gt;🔁 Let’s Recap&lt;/head&gt;
    &lt;p&gt;To summarise the absurdity of this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;We moved office, and updated our address with Wise&lt;/item&gt;
      &lt;item&gt;We provided a legal, NZ-compliant telecommunications bill showing our entity and address&lt;/item&gt;
      &lt;item&gt;It was rejected because it was labelled a “Tax Invoice”&lt;/item&gt;
      &lt;item&gt;A rep told us to lease a coworking desk elsewhere just to get a different document&lt;/item&gt;
      &lt;item&gt;A senior rep agreed we were right, and escalated it&lt;/item&gt;
      &lt;item&gt;Then our accounts were shut down – with no explanation or recourse&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Even trying to call support now gets an automated message: “Because your account is restricted, we cannot connect you.”&lt;/p&gt;
    &lt;head rend="h2"&gt;⚠️ Our Final Word: Be Very, Very Careful&lt;/head&gt;
    &lt;p&gt;We had used Wise for years. Regular monthly supplier payments. International stock orders. Five-figure transactions. Never a problem – until this. A minor change triggered a totally flawed process that completely shut us out, with no transparency or logical path to resolution.&lt;/p&gt;
    &lt;p&gt;We’re not alone – a quick search shows many others facing similar horror stories with Wise.&lt;/p&gt;
    &lt;p&gt;So this is my word of warning:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;💡 Don’t put all your eggs in the Wise basket.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;If you’re a business, don’t rely on them as your sole means of transferring funds. For us, it’s back to traditional banks – slower, yes, but at least they have humans you can talk to, and actual escalation paths.&lt;/p&gt;
    &lt;head rend="h2"&gt;🧾 28th October update on our Wise debacle – it gets worse.&lt;/head&gt;
    &lt;p&gt;Following the so-called “appeal” (which gave us no option to provide any information), we received the unsurprising outcome: Wise has decided to keep our accounts closed as we had breached their acceptable use policy. 🤨&lt;/p&gt;
    &lt;p&gt;What was surprising, however, was the reason they gave after I queried what was breached in Wise’s Acceptable Use Policy:&lt;/p&gt;
    &lt;p&gt;I was told my personal account was being closed for allegedly breaching their Acceptable Use Policy — specifically, section 1.4.e, which states “you may not use your personal Wise account to receive business payments.”&lt;/p&gt;
    &lt;p&gt;That’s… news to me.&lt;/p&gt;
    &lt;p&gt;I’ve never used my personal account for business transactions — in fact, over 99% of transfers were to overseas family members. When I asked for clarification or examples, I got none. Just a vague statement and the very strange line:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“Just because we can’t offer you our services going forward doesn’t mean that we think your business activities are illegal or illegitimate — it just means that we don’t support those types of activities.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;What activities?! Again, no explanation provided.&lt;/p&gt;
    &lt;p&gt;To make matters worse — our business account’s refund transfer failed. Why? Because it requires documentation — the same documentation Wise previously rejected for address verification, claiming a telecommunications tax invoice isn’t a bill.&lt;/p&gt;
    &lt;p&gt;After a few days, the transfer was then cancelled as of course, Wise was unable to “verify” us.&lt;/p&gt;
    &lt;p&gt;So now our funds are in limbo, their support ticket is marked “final response,” and our attempts to get clarity have gone nowhere. We’ve escalated the issue to Financial Services Complaints Ltd, Wise’s dispute resolution provider in New Zealand.&lt;/p&gt;
    &lt;p&gt;🎯 TL;DR: Nothing resolved.&lt;/p&gt;
    &lt;p&gt;Funds stuck. No clear reason. No accountability. Wise still gets a 0/10 from us.&lt;/p&gt;
    &lt;p&gt;This isn’t just poor service — it’s unacceptable.&lt;/p&gt;
    &lt;p&gt;Think twice before trusting Wise with your money.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://shaun.nz/why-were-never-using-wise-again-a-cautionary-tale-from-a-business-burned/"/><published>2025-10-30T22:41:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45766937</id><title>Kimi Linear: An Expressive, Efficient Attention Architecture</title><updated>2025-10-31T02:25:09.763391+00:00</updated><content>&lt;doc fingerprint="b7db115e8c4b8fd0"&gt;
  &lt;main&gt;
    &lt;p&gt;(a) On MMLU-Pro (4k context length), Kimi Linear achieves 51.0 performance with similar speed as full attention. On RULER (128k context length), it shows Pareto-optimal performance (84.3) and a 3.98x speedup. (b) Kimi Linear achieves 6.3x faster TPOT compared to MLA, offering significant speedups at long sequence lengths (1M tokens).&lt;/p&gt;
    &lt;p&gt;Kimi Linear is a hybrid linear attention architecture that outperforms traditional full attention methods across various contexts, including short, long, and reinforcement learning (RL) scaling regimes. At it's core is Kimi Delta Attention (KDA)—a refined version of Gated DeltaNet that introduces a more efficient gating mechanism to optimize the use of finite-state RNN memory.&lt;/p&gt;
    &lt;p&gt;Kimi Linear achieves superior performance and hardware efficiency, especially for long-context tasks. It reduces the need for large KV caches by up to 75% and boosts decoding throughput by up to &lt;/p&gt;
    &lt;p&gt;We open-sourced the KDA kernel in FLA, and released two versions model checkpoints trained with 5.7T tokens.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;#Total Params&lt;/cell&gt;
        &lt;cell role="head"&gt;#Activated Params&lt;/cell&gt;
        &lt;cell role="head"&gt;Context Length&lt;/cell&gt;
        &lt;cell role="head"&gt;Download Link&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Kimi-Linear-Base&lt;/cell&gt;
        &lt;cell&gt;48B&lt;/cell&gt;
        &lt;cell&gt;3B&lt;/cell&gt;
        &lt;cell&gt;1M&lt;/cell&gt;
        &lt;cell&gt;🤗 Hugging Face&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Kimi-Linear-Instruct&lt;/cell&gt;
        &lt;cell&gt;48B&lt;/cell&gt;
        &lt;cell&gt;3B&lt;/cell&gt;
        &lt;cell&gt;1M&lt;/cell&gt;
        &lt;cell&gt;🤗 Hugging Face&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kimi Delta Attention (KDA): A linear attention mechanism that refines the gated delta rule with finegrained gating.&lt;/item&gt;
      &lt;item&gt;Hybrid Architecture: A 3:1 KDA-to-global MLA ratio reduces memory usage while maintaining or surpassing the quality of full attention.&lt;/item&gt;
      &lt;item&gt;Superior Performance: Outperforms full attention in a variety of tasks, including long-context and RL-style benchmarks on 1.4T token training runs with fair comparisons.&lt;/item&gt;
      &lt;item&gt; High Throughput: Achieves up to &lt;math-renderer&gt;$6\times$&lt;/math-renderer&gt;faster decoding and significantly reduces time per output token (TPOT).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To use the Kimi Linear model, we recommend the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Language: &lt;code&gt;python&lt;/code&gt;&amp;gt;= 3.10&lt;/item&gt;
      &lt;item&gt;Package: &lt;code&gt;torch&lt;/code&gt;&amp;gt;= 2.6&lt;/item&gt;
      &lt;item&gt;Package: &lt;code&gt;fla-core&lt;/code&gt;&amp;gt;= 0.4.0&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;pip install -U fla-core&lt;/code&gt;
    &lt;p&gt;Example Code:&lt;/p&gt;
    &lt;code&gt;from transformers import AutoModelForCausalLM, AutoTokenizer

model_name = "moonshotai/Kimi-Linear-48B-A3B-Instruct"
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype="auto",
    device_map="auto",
    trust_remote_code=True
)
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)

messages = [
    {"role": "system", "content": "You are a helpful assistant provided by Moonshot-AI."},
    {"role": "user", "content": "Is 123 a prime?"}
]
input_ids = tokenizer.apply_chat_template(
    messages, 
    add_generation_prompt=True, 
    return_tensors="pt"
).to(model.device)
generated_ids = model.generate(inputs=input_ids, max_new_tokens=500)
response = tokenizer.batch_decode(generated_ids)[0]
print(response)&lt;/code&gt;
    &lt;p&gt;For deployment, you can use the latest vllm to create an OpenAI-compatible API endpoint.&lt;/p&gt;
    &lt;code&gt;vllm serve moonshotai/Kimi-Linear-48B-A3B-Instruct \
  --port 8000 \
  --tensor-parallel-size 4 \
  --max-model-len 1048576 \
  --trust-remote-code&lt;/code&gt;
    &lt;p&gt;If you found our work useful, please cite&lt;/p&gt;
    &lt;code&gt;@article{kimi2025kda,
  title  = {Kimi Linear: An Expressive, Efficient Attention Architecture},
  author = {kimi Team},
  year   = {2025},
  url    = {https://github.com/MoonshotAI/Kimi-Linear/blob/master/tech_report.pdf}
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/MoonshotAI/Kimi-Linear"/><published>2025-10-31T00:07:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45767257</id><title>Roadmap for Improving the Type Checker</title><updated>2025-10-31T02:25:09.319911+00:00</updated><content>&lt;doc fingerprint="97a8d1dba2a69fd6"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;head rend="h1"&gt;Roadmap for improving the type checker&lt;/head&gt;
      &lt;p&gt;In the past, we've released various "manifestos" and "roadmaps" to discuss planned improvements to the language. This post is also a roadmap of sorts, but instead, the focus is on the implementation rather than user-visible language changes (however, I will briefly mention a few potential language changes at the very end).&lt;/p&gt;
      &lt;p&gt;Specifically, I'm going to talk about some work we are doing to improve expression type checking in the Swift compiler. This includes changes that have already shipped in Swift 6.2, changes that are on the &lt;code&gt;main&lt;/code&gt; development branch, changes that we plan on working on next, and more tentative longer-term plans.&lt;/p&gt;
      &lt;p&gt;Before talking about specific improvements, I'm going to start with a rather long explanation of this part of the compiler implementation, which to my knowledge has not been summarized in one place yet.&lt;/p&gt;
      &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
      &lt;p&gt;This is all, of course, about the dreaded &lt;code&gt;the compiler is unable to type-check this expression in reasonable time&lt;/code&gt; error. This error can appear with both valid and invalid code, and the various workarounds are unsatisfactory, to say the least. Splitting up an expression into smaller pieces, introducing type annotations, or attempting other refactorings will sometimes allow valid code to type check, or in the invalid case, surface an actionable diagnostic. However, this breaks flow and becomes a frustrating process of trial and error "shotgun debugging" even for the most experienced Swift programmers. The compiler doesn't even tell you if your expression is valid or not!&lt;/p&gt;
      &lt;head rend="h3"&gt;Type-based overloading&lt;/head&gt;
      &lt;p&gt;Swift supports overloading, where multiple declarations in the same scope can share the same name. Swift allows two forms of overloading: by argument labels, or by type. The former case is ultimately handled by name lookup, because argument labels are specified at the call site. Argument label lookup does not introduce any algorithmic complexity in the type checker, so I won't discuss it further. Type-based overloading, on the other hand, requires the type checker to reason about the types of expressions before it can decide the correct overload to pick, which is a more difficult problem. So in the rest of this post, when I talk about overloading, I'm specifically referring to overloading based on types---either parameter or result types.&lt;/p&gt;
      &lt;head rend="h3"&gt;Constraint solving&lt;/head&gt;
      &lt;p&gt;The Swift compiler implements overload resolution by transforming expression type checking into a constraint solving problem. The compiler always looks at a single expression at a time (with some exceptions, such as multi-statement closures), and proceeds to type-check each expression in turn.&lt;/p&gt;
      &lt;p&gt;First, we introduce type variables to represent the unknown type of each sub-expression in the syntax tree. Next, we generate constraints to describe relationships among type variables. Examples of constraints include "type &lt;code&gt;X&lt;/code&gt; is a subtype of type &lt;code&gt;Y&lt;/code&gt;", "type &lt;code&gt;X&lt;/code&gt; is the result of calling function type &lt;code&gt;Y&lt;/code&gt; with arguments &lt;code&gt;Z&lt;/code&gt;", and crucially for overload resolution, what are called disjunction constraints. A disjunction constraint has the form "type &lt;code&gt;X&lt;/code&gt; is either &lt;code&gt;Y1&lt;/code&gt;, or &lt;code&gt;Y2&lt;/code&gt;, or &lt;code&gt;Y3&lt;/code&gt;, ... or &lt;code&gt;Yn&lt;/code&gt;", where each &lt;code&gt;Yn&lt;/code&gt; is the type of an overloaded declaration with the same name.&lt;/p&gt;
      &lt;p&gt;Once we have our type variables and constraints, we proceed to solve the constraint system by attempting to assign a concrete type to each type variable, in a manner that is consistent with the set of constraints. A set of such assignments is called a solution. The constraint solving process can produce zero, one, or many solutions. If no solution was found, the expression is erroneous. If one solution was found, we're done; if multiple solutions were found, we first attempt to rank the solutions in case one of them is clearly "better" than the others. If this ranking fails to produce a winner, we diagnose an ambiguity error.&lt;/p&gt;
      &lt;head rend="h3"&gt;Algorithmic complexity&lt;/head&gt;
      &lt;p&gt;The algorithmic complexity in constraint solving arises as a result of these disjunction constraints, because in the worst case, there is no better approach to solving such a constraint system except to attempt each combination of disjunction choices.&lt;/p&gt;
      &lt;p&gt;This is somewhat like solving a Sudoku. You can write down a number in a blank square, and then check that the result is a valid board. If it is, you try to fill in another square, and so on. On the other hand, if you get stuck, you backtrack by erasing a previously filled in square, and attempt to place a number somewhere else. If you're lucky and make perfect a guess at each step, you can fill in the whole board without backtracking. At the other extreme, you might end up attempting every possible path to a solution, which can take a long time.&lt;/p&gt;
      &lt;p&gt;For a more detailed overview of constraint solving in the Swift type checker, see swift/docs/TypeChecker.md at main · swiftlang/swift · GitHub. For an explanation of why overload resolution is inherently hard, and why every known approach has exponential running time in the worst case, see How does compiler compile SwiftUI code? - #4 by Slava_Pestov and Lambda Expressions vs. Anonymous Methods, Part Five | Microsoft Learn.&lt;/p&gt;
      &lt;head rend="h3"&gt;What does &lt;code&gt;reasonable time&lt;/code&gt; mean?&lt;/head&gt;
      &lt;p&gt;Since constraint solving with disjunctions takes exponential time in the worst case, it will always be possible to write down a short program that would require an inordinate amount of time to type check, so the type checker must limit the total amount of work that it does, and fail if this limit is reached.&lt;/p&gt;
      &lt;p&gt;The Swift type checker imposes two such limits:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Every time we attempt a disjunction choice, we increment a counter. The counter is reset to zero at the start of each expression, and if the value exceeds one million, we give up.&lt;/item&gt;
        &lt;item&gt;The constraint solver also allocates various data structures in a per-expression arena, which is then torn down in one shot once type checking this expression ends. If the total size of the arena exceeds 512 megabytes, we give up.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;In the past, Swift also had a wall-clock time limit, but this is no longer enabled by default, because it is non-deterministic across machines. Counting operations is a better approach, and most "too complex" expressions don't take longer than 4 seconds on a typical machine in practice.&lt;/p&gt;
      &lt;head rend="h3"&gt;Invalid expressions, salvage mode, and diagnostics&lt;/head&gt;
      &lt;p&gt;In ordinary type checking, the solver stops and backtracks immediately when a constraint fails, but this does not in itself produce precise error messages.&lt;/p&gt;
      &lt;p&gt;To get good diagnostics after a failure, we restart the solving process again, this time with an expanded search space. This is called "salvage mode." In salvage mode, a failure to solve a constraint is handled differently. Instead of simply failing the constraint and stopping the solver, we proceed as if the failed constraint succeeded, but we also record a fix.&lt;/p&gt;
      &lt;p&gt;For example, if an expression does not type-check because &lt;code&gt;Int&lt;/code&gt; does not conform to &lt;code&gt;Sequence&lt;/code&gt;, then this conformance constraint will fail on the first attempt. We then restart type checking in salvage mode. When the bogus constraint comes up again, we pretend that &lt;code&gt;Int&lt;/code&gt; actually does conform to &lt;code&gt;Sequence&lt;/code&gt;, but we record a fix, and continue solving more constraints until we're done.&lt;/p&gt;
      &lt;p&gt;Once we finish solving the constraint system in salvage mode, the collected fixes are then analyzed to produce a diagnostic. Finally, if salvage mode fails but no fixes are recorded, we emit the &lt;code&gt;failed to produce diagnostic&lt;/code&gt; error.&lt;/p&gt;
      &lt;p&gt;For more details about the diagnostic architecture, see New Diagnostic Architecture Overview | Swift.org.&lt;/p&gt;
      &lt;head rend="h1"&gt;Goals and non-goals&lt;/head&gt;
      &lt;p&gt;While the worst case behavior is unavoidable, it does not have to be the case that type checking must take exponential time on all expressions, even when complex overload sets are involved. In fact, most expressions do type-check rather quickly, even today. It is also true that for any given single "hard" expression, it is possible to devise a heuristic that will solve it quickly, because in the extreme case, you can hard-code knowledge of that specific problem instance in the constraint solver (of course, we won't do that).&lt;/p&gt;
      &lt;p&gt;The main goal then, is to devise sufficiently-general heuristics which can quickly solve most realistic problem instances, without hard-coding too many special cases, so that hopefully, the exponential running time only appears with pathological examples which are unlikely to occur in practice. The primary way to accomplish this is to attempt disjunction choices in the right order---this includes both choosing the next disjunction to attempt, and the next choice within a disjunction to attempt. Also, we can avoid considering disjunction choices that lead to contradictions. By doing this, we can find the valid solutions more quickly, and spend less time exploring long "dead ends."&lt;/p&gt;
      &lt;p&gt;A secondary goal is to improve the auxiliary data structures and algorithms used in the constraint solver, so that even if an exhaustive search must be attempted on a given expression, as will sometimes be the case, we burn less CPU time while considering the same search space.&lt;/p&gt;
      &lt;p&gt;There are also two non-goals worth mentioning:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Removing overloading from the language. Without disjunction constraints, a constraint system can almost always be solved very quickly. However, this would be such a major change to the language, and break so many existing APIs, that it is not feasible to attempt at this point, even as a new language mode.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Removing bidirectional inference. We can also imagine a language design where expressions are type-checked in a strictly bottom-up fashion, starting from the leaves, like in many other C-family languages. This is another drastic simplification that essentially trivializes the whole problem. However, this would require giving up on language features such as polymorphic literals, leading-dot member syntax, closures with inferred types, and parts of generics. All of these are features that make Swift into the expressive language it is today.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h1"&gt;Recent improvements&lt;/head&gt;
      &lt;head rend="h2"&gt;Swift 6.2&lt;/head&gt;
      &lt;p&gt;In Swift 6.2, we spent time profiling the type checker with various larger projects, as well as individual slow expressions, both valid and invalid. This uncovered some bottlenecks, including with the backtracking implementation, various graph algorithms such as computing connected components, and other miscellaneous algorithms.&lt;/p&gt;
      &lt;p&gt;The first example is an invalid expression where we can see a small improvement. Consider the last line of the below code listing, which appeared in this blog post:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let address = "127.0.0.1"
let username = "steve"
let password = "1234"
let channel = 11

let url = "http://" + username 
            + ":" + password 
            + "@" + address 
            + "/api/" + channel 
            + "/picture"
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;The expression is invalid as written, because there is no overload of &lt;code&gt;+&lt;/code&gt; taking an &lt;code&gt;Int&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt;. On my machine, Swift 6.1 spends 10 seconds to produce an &lt;code&gt;unable to type-check&lt;/code&gt; error, while in Swift 6.2, we get the same error in 6 seconds. Of course, this is not the desired end state, since we should instead produce a meaningful diagnostic. However, this example specifically illustrates that the type checker is able to do the same amount of work in less time.&lt;/p&gt;
      &lt;p&gt;For a more realistic example, I measured a project that makes heavy use of overloading and generics, and saw that total type checking time improved from 42 seconds in Swift 6.1, down to 34 seconds in Swift 6.2.&lt;/p&gt;
      &lt;head rend="h2"&gt;Swift 6.3&lt;/head&gt;
      &lt;head rend="h3"&gt;Optimized disjunction selection&lt;/head&gt;
      &lt;p&gt;Recent &lt;code&gt;main&lt;/code&gt; development snapshots introduced a large set of changes that @xedin has been working on for several years now, to improve disjunction selection, by collecting more information to decide what disjunction should be attempted next. Unlike the targeted optimizations in Swift 6.2 which offered incremental wins without reducing the fundamental complexity of the problem, the disjunction selection changes allow the type checker to quickly solve many expressions that we were formerly unable to type-check. The new algorithm can also drastically speed up expressions that would type check, but were just under the limit and thus slow.&lt;/p&gt;
      &lt;p&gt;These changes replace some older optimizations that would look at the entire expression before solving begins, to attempt "pre-solving" certain sub-expressions. These hacks were rather brittle in practice, so a small change to an expression could defeat the entire hack.&lt;/p&gt;
      &lt;p&gt;The optimized disjunction selection algorithm instead runs as part of the constraint solver, making it more robust and predictable. The biggest wins can be seen with expressions that involve math operators and literals. Here is a typical example. The Swift 6.2 compiler was unable to type check the below expression, but the compiler from &lt;code&gt;main&lt;/code&gt; type checks this successfully, in 4 milliseconds:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;func test(n: Int) -&amp;gt; Int {
  return n == 0 ? 0 : (0..&amp;lt;n).reduce(0) { x, y in
    (x &amp;gt; 0 &amp;amp;&amp;amp; y % 2 == 0) ? (((x + y) - (x + y)) / (y - x)) + ((x + y) / (y - x)) : x
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;The invalid expression from above, where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, is still rejected, however with the new algorithm, it only takes the compiler 2 seconds to reach the limit.&lt;/p&gt;
      &lt;p&gt;Finally, on the same project I mentioned in the Swift 6.2 summary above, the new algorithm yields a further reduction in total type checking time, down to 12 seconds.&lt;/p&gt;
      &lt;p&gt;(If you find an expression that type checks on a released version of Swift but fails on a &lt;code&gt;main&lt;/code&gt; development snapshot, please file a GitHub issue.)&lt;/p&gt;
      &lt;head rend="h3"&gt;Optimized constraint solver arena usage&lt;/head&gt;
      &lt;p&gt;Recent &lt;code&gt;main&lt;/code&gt; development snapshots also introduce an optimization which eliminates a source of exponential space usage in the constraint solver. This optimization is still disabled by default, but we hope to enable it soon. (You can enable it with the &lt;code&gt;-solver-enable-prepared-overloads&lt;/code&gt; frontend flag on a &lt;code&gt;main&lt;/code&gt; development snapshot if you'd like to test it now.)&lt;/p&gt;
      &lt;p&gt;This optimization works as follows. Previously, when attempting a disjunction choice for a generic overload, the solver would generate new type variables and constraints corresponding to the generic parameters and &lt;code&gt;where&lt;/code&gt; clause requirements of the generic overload. If the same overload had to be attempted multiple times, in combination with other overload choices, the same type variables and constraints would be generated every time. These type variables and constraints are allocated in the constraint solver's arena. This space optimization instead allocates these structures once, the first time a disjunction choice is attempted.&lt;/p&gt;
      &lt;p&gt;For many expressions, this leads to a drastic reduction in constraint solver arena usage. In some instances, it will transform an exponential space problem into a polynomial space problem, even if it still requires exponential time. Furthermore, since less space also means less time, the primary benefit here is again a reduction in total type checking time. In the future, pre-generating these structures will also enable further improvements to the disjunction choice algorithm.&lt;/p&gt;
      &lt;p&gt;On the invalid expression from earlier, where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, the constraint solver arena space optimization further reduces the time to reach the limit, down to 1.7 seconds. (That's a more than 5x improvement since Swift 6.1.)&lt;/p&gt;
      &lt;p&gt;Finally, with the same test project I mentioned twice above, this optimization decreases total type checking time from 12 seconds, down to 10 seconds. (That's a more than 4x improvement since Swift 6.1.)&lt;/p&gt;
      &lt;head rend="h3"&gt;Expanding our test suite to cover more fast and slow expressions&lt;/head&gt;
      &lt;p&gt;To help prevent performance regressions in the future, and to track progress on solving the problem, we have added more test cases to our suite. These have been reduced from user-reported slow expressions in GitHub issues for the Swift project.&lt;/p&gt;
      &lt;p&gt;Some of the test cases also use our &lt;code&gt;scale-test&lt;/code&gt; tool, which repeats a common element of an expression (think adding &lt;code&gt;+ 1 + 1 + 1 ...&lt;/code&gt;), measures the performance of each instance, and then attempts to guess if the resulting problem scales in polynomial or exponential time. This helps catch more subtle issues where a given expression might still appear to be "fast", but becomes slow if you make it just a little bit longer.&lt;/p&gt;
      &lt;p&gt;These test cases are found in the validation-test/Sema/type_checker_perf directory in the Swift repo. The recently added test cases are in Sema: Collected expression checking performance test cases from GitHub issues by slavapestov · Pull Request #84450 · swiftlang/swift · GitHub, with a few more in Even more type checker perf tests by slavapestov · Pull Request #84890 · swiftlang/swift · GitHub. We hope to continue expanding the type checker performance test suite over time.&lt;/p&gt;
      &lt;head rend="h1"&gt;Future improvements&lt;/head&gt;
      &lt;p&gt;Disclaimer: all of the below is subject to change as our plans evolve.&lt;/p&gt;
      &lt;head rend="h2"&gt;Optimizing bindings&lt;/head&gt;
      &lt;p&gt;Imagine we're solving a constraint system, and we're left with a single unsolved constraint, a conversion from a type variable &lt;code&gt;T0&lt;/code&gt; to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;. At this point, in order to proceed, we must "guess" the concrete type to bind to &lt;code&gt;T0&lt;/code&gt;. While &lt;code&gt;T0&lt;/code&gt; might just be &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, another valid choice is &lt;code&gt;Int&lt;/code&gt;, because &lt;code&gt;Int&lt;/code&gt; converts to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;. The bindings subsystem in the constraint solver is responsible for tracking the potential bindings for each type variable by considering unsolved conversion constraints, and ultimately, attempting various potential bindings until a solution is found.&lt;/p&gt;
      &lt;p&gt;The book-keeping for bindings is rather complicated, and must be updated incrementally as constraints are solved and new constraints are introduced. Another complication is that to choose the next binding to attempt, we must consider all type variables and all of their potential bindings, and rank them according to a heuristic.&lt;/p&gt;
      &lt;p&gt;Today, this ranking process indeed considers all type variables and all bindings, and ultimately picks just one type variable and just one binding to attempt. This must be repeated for each unbound type variable, which of course results in a quadratic time algorithm.&lt;/p&gt;
      &lt;p&gt;Thus, even in a constraint system without a large number of complex overloads, it is sometimes possible to observe algorithmic complexity due to bindings. Now, most expressions do not involve a large number of type variables---it is far more common to see a large number of disjunction choices instead. But one situation where a large number of type variables are generated is if you write an array or dictionary literal with a large number of elements.&lt;/p&gt;
      &lt;p&gt;We plan on overhauling the data structures for tracking potential bindings, both to eliminate some duplicate bookkeeping (&lt;code&gt;BindingSet&lt;/code&gt; and &lt;code&gt;PotentialBindings&lt;/code&gt; in the implementation) and to make the choice of the next binding to attempt something that can be done in constant or logarithmic time, instead of the current situation where it is linear in the number of type variables. This will radically speed up the type checking of large array and dictionary literals.&lt;/p&gt;
      &lt;p&gt;Since solving constraints can introduce new bindings, an important decision problem is whether a binding set is "complete". Today, this check is very conservative, so we often don't attempt bindings until we've gone far down a path of disjunction choices. More accurate computation of when a binding set is complete would allow bindings to be attempted sooner, which would reduce algorithmic complexity of type-checking many common expressions.&lt;/p&gt;
      &lt;p&gt;Another improvement to the bindings logic would allow the solver to reach a contradiction by considering contradictory bindings. Today, if a type variable &lt;code&gt;T0&lt;/code&gt; is subject to two conversion constraints, for example to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;, we don't reach a contradiction until we attempt every possible concrete type for &lt;code&gt;T0&lt;/code&gt;. But in this case, there is no concrete type that converts to both &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;, and so a contradiction could be reached faster, avoiding wasting time exploring dead ends.&lt;/p&gt;
      &lt;p&gt;These improvements to the binding logic should speed up many expressions, including long collection literals as I mentioned, and also the aforesaid invalid expression where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, where we should finally be able to quickly produce an actionable diagnostic.&lt;/p&gt;
      &lt;head rend="h2"&gt;Removing more performance hacks&lt;/head&gt;
      &lt;p&gt;While the new disjunction selection algorithm subsumed many old performance hacks, some hacks remain. Once again, these hacks tend to be applicable in narrow cases only, which introduces performance cliffs when small changes are made to an expression, and they also have "load-bearing" semantic effects which complicate the language model. These will be generalized or subsumed by existing optimizations over time.&lt;/p&gt;
      &lt;p&gt;It's worth noting that fixing some of these might be source-breaking in extreme edge cases, but we think this is worth the small inconvenience it may cause. Aside from improving performance, this will make the language semantics easier to reason about, and also improve diagnostics.&lt;/p&gt;
      &lt;p&gt;To make this more concrete, here are a few random examples of hacks that we hope to eliminate:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Subscripting of &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt; types is handled in a special way, with a narrow optimization that dates back all the way to Swift 1.0 (&lt;code&gt;inferCollectionSubscriptResultType()&lt;/code&gt;). It can result in strange overload resolution behavior in some cases, and of course it doesn't generalize to subscripts on user-defined types.&lt;/item&gt;
        &lt;item&gt;When simplifying a function call constraint, we look for the case where all overloads have a common return type (&lt;code&gt;simplifyAppliedOverloadsImpl()&lt;/code&gt;). This does not handle generic return types at all, and has some strange edge-case behaviors.&lt;/item&gt;
        &lt;item&gt;There is an optimization that kicks in when a generic overload set has exactly two overloads (&lt;code&gt;tryOptimizeGenericDisjunction()&lt;/code&gt;). This is an obvious performance cliff if a third overload is added, even if its not used in the expression.&lt;/item&gt;
        &lt;item&gt;A set of optimizations attempt to skip some disjunction choices entirely, and "partition" overload sets for math operators into generic, concrete, and SIMD overloads. This is too specific to math operators, and again leads to strange behavior where a concrete overload is chosen even though a generic overload would result in better solutions or diagnostics.&lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h2"&gt;Optimizing the handling of partial solutions&lt;/head&gt;
      &lt;p&gt;One of the steps in our constraint solver algorithm constructs a constraint graph, where the vertices are type variables, and the edges relate each pair of type variables that appear in the same constraint. An important optimization detects a situation where this graph has more than one connected component, in which case each component can be solved independently. The "partial solutions" that we obtain from solving each component are then merged to form a solution for the overall constraint system.&lt;/p&gt;
      &lt;p&gt;In many situations, this can avoid exponential behavior. However, in other situations where a large number of partial solutions are produced, building the data structures representing these partial solutions, and the merging algorithm itself, can dominate type checking time for a given expression.&lt;/p&gt;
      &lt;p&gt;By building upon the "trail" data structure for speeding up backtracking that was introduced in Swift 6.2, we hope to reduce the overhead caused by partial solutions in those pathological cases. A specific class of expression where this tends to arise is when you have a large collection literal and each element is itself a complex expression.&lt;/p&gt;
      &lt;head rend="h2"&gt;Improving salvage mode&lt;/head&gt;
      &lt;p&gt;While not strictly performance-related, we would also like to eliminate more cases where salvage mode fails to record any fixes, which as I mentioned above, results in the unhelpful &lt;code&gt;failed to produce diagnostic&lt;/code&gt; error.&lt;/p&gt;
      &lt;p&gt;In fact, another odd situation can arise with salvage mode today: there are known examples where normal type checking fails, but salvage mode then succeeds, in which case we accept the expression. This is a performance problem right off the bat, because such an expression must essentially be type checked twice before a solution is found, even though it is valid.&lt;/p&gt;
      &lt;p&gt;This is also not intended by design, and it involves certain corners of the language which are not well-understood or tested. Fixing these situations will improve performance in pathological cases, while also cleaning up these edge cases in the language, and improving test coverage. Ultimately, if salvage succeeds in this way, we plan to have the solver emit another "fallback diagnostic" instead of silently proceeding.&lt;/p&gt;
      &lt;p&gt;Finally, if normal type-checking produces multiple valid solutions, we still enter salvage mode today, before we generate an ambiguity diagnostic. This should not be necessary, and addressing this will speed up diagnostics for certain invalid ambiguous expressions. This will also reduce the probability that salvage mode, which must do more work by design, will then fail with an "unable to type-check" error, instead of emitting an actionable diagnostic using information already gleaned from normal type checking.&lt;/p&gt;
      &lt;head rend="h1"&gt;Longer-term future improvements&lt;/head&gt;
      &lt;p&gt;I'm going to end this post with more tentative ideas, that while not fully fleshed out, have the potential drastically improve type checking performance.&lt;/p&gt;
      &lt;head rend="h2"&gt;Changes to operator lookup&lt;/head&gt;
      &lt;p&gt;So far, I've only talked about changes which are (mostly) source-compatible, and this has been our main focus to date. However, while we've ruled out drastic solutions such as removing overloading or bidirectional inference entirely, we are considering some more targeted language changes, which would be rolled out with upcoming features or language modes.&lt;/p&gt;
      &lt;p&gt;Consider the &lt;code&gt;==&lt;/code&gt; operator. This operator is heavily-overloaded, but most overloads are implementations of the &lt;code&gt;Equatable&lt;/code&gt;  protocol's &lt;code&gt;==&lt;/code&gt; requirement. In principle, we could avoid attempting each one in turn, simplifying the constraint system that we generate for any expression that involves &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
      &lt;p&gt;We plan to investigate a scheme where we prune overload sets to hide overloads that witness a protocol requirement, which will simplify overload sets for &lt;code&gt;==&lt;/code&gt; as well as many other (but not all) operators.&lt;/p&gt;
      &lt;p&gt;This will require changing the rules for solution ranking, which today always prefer concrete overloads; however, we will need to prefer the generic &lt;code&gt;Equatable.==&lt;/code&gt; overload in many instances as well. For this reason, such a change might be slightly source breaking, at least in pathological cases, but it might be possible to stage in a way that avoids disruption for realistic programs.&lt;/p&gt;
      &lt;head rend="h2"&gt;Changes to polymorphic literals&lt;/head&gt;
      &lt;p&gt;A common misconception is that polymorphic literals, like integers and strings, themselves introduce overloads, where every concrete type conforming to an &lt;code&gt;ExpressibleBy*&lt;/code&gt; protocol adds a disjunction choice to the literal. This isn't quite right; a literal such as &lt;code&gt;"hello world"&lt;/code&gt; will type check if a concrete type is known from the surrounding code, and if that fails, via a default type, which is &lt;code&gt;String&lt;/code&gt; in this case. So while this acts as a disjunction of sorts, in this case the disjunction only has two choices, and often the default is not attempted at all.&lt;/p&gt;
      &lt;p&gt;However, an integer literal such as &lt;code&gt;123&lt;/code&gt; actually has two default types, &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt;, and the resulting disjunction has three choices. It might be worth considering a language change where floating point literals must be spelled with a decimal point. Today, expressions involving mixed integer and double literals can be particularly tricky to type check, for this reason.&lt;/p&gt;
      &lt;head rend="h2"&gt;Improved constraint solving techniques&lt;/head&gt;
      &lt;p&gt;Once we are further along with various refactorings and cleanups described above, we will be in a position to implement more advanced constraint solving techniques, such as those commonly used in SAT solvers today. "SAT," or Boolean formula satisfiability, is a related problem to operator overloading. (Like overload resolution, SAT takes exponential time to solve in the worst case, but unlike overload resolution, the "domain" of each type variable is a true or false value. Instead of "constraints", the problem instance consists of a Boolean formula built up from "and", "or", and "not" operations.) Many of the techniques used to speed up SAT solvers can be applied to constraint solving.&lt;/p&gt;
      &lt;p&gt;A solver that supports non-chronological backtracking can jump back over more than one disjunction choice once it detects a contradiction. This avoids the exploration of more dead-ends that necessarily fail, because some constraint further up is already unsatisfiable.&lt;/p&gt;
      &lt;p&gt;Another technique is clause learning. The "naive" approach to constraint solving will discard all state changes when backtracking after a contradiction is discovered. In a solver with clause learning, the algorithm will, roughly speaking, "learn" facts as it goes, recording new constraints that result from backtracking. This ensures that if the same situation arises again, the contradiction can be detected sooner because of the "learned" constraint.&lt;/p&gt;
      &lt;p&gt;(For those curious to learn more about SAT solvers, here is a blog post I saw the other day with a good summary: SATisfying Solutions to Difficult Problems! - Vaibhav Sagar. A book with a decent introduction is "The Satisfiability Problem" by Schóning and Torán. An in-depth treatment appears in Knuth Volume 4B. Finally, a recent academic paper titled The simple essence of overloading by Beneš and Brachthäuser, outlines an interesting approach to overload resolution where the problem is reduced to a binary decision diagram. Some of the ideas here may apply to Swift type checking as well.)&lt;/p&gt;
      &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
      &lt;p&gt;There are quite a number of interesting improvements that can be made to the Swift type checker, and we look forward to sharing more updates as we make progress in this area.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://forums.swift.org/t/roadmap-for-improving-the-type-checker/82952"/><published>2025-10-31T01:00:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45767325</id><title>ICE and the Smartphone Panopticon</title><updated>2025-10-31T02:25:09.056784+00:00</updated><content>&lt;doc fingerprint="bdd5b2b089ecd0d9"&gt;
  &lt;main&gt;
    &lt;p&gt;Last week, as ICE raids ramped up in New York, city residents set about resisting in the ways they had available: confronting agents directly on sidewalks, haranguing them as they processed down blocks, and recording them on phone cameras held aloft. Relentless documentation has proved something of an effective tool against President Donald Trump’s empowerment of ICE; agents have taken to wearing masks in fear of exposure, and the proliferation of imagery showing armed police and mobilized National Guard troops in otherwise calm cities has underlined the cruel absurdity of their activities. Activist memes have been minted on social media: a woman on New York’s Canal Street, dressed in a polka-dotted office-casual dress, flipping ICE agents off; a man in Washington, D.C., throwing a Subway sandwich at a federal agent in August. The recent “No Kings” marches were filled with protesters in inflatable frog costumes, inspired by a similarly outfitted man who got pepper-sprayed protesting outside the U.S. Immigration and Customs Enforcement Building in Portland, Oregon. Some might write the memes off as resistance porn, but digital content is at least serving as a lively defense mechanism in the absence of functional politics.&lt;/p&gt;
    &lt;p&gt;At the same time, social media has served as a reinvigorated source of transparency in recent weeks, harking back to the days when Twitter became an organizing tool during the Arab Spring, in the early twenty-tens, or when Facebook and Instagram helped fuel the Black Lives Matter marches of 2020. The grassroots optimism of that earlier social-media era is long gone, though, replaced by a sense of posting as a last resort. After Trump authorized the deployment of the National Guard in Chicago earlier this month, the governor of Illinois, J. B. Pritzker, told residents to “record and narrate what you see—put it on social media.” But, if the anti-MAGA opposition is taking advantage of the internet, ICE and the Trump Administration are, too. Right-wing creators have been using the same channels to identify and publicize targets for raids. According to reporting in Semafor, the Trump-friendly YouTuber Nick Shirley’s videos of African migrant vendors on Canal Street seemed to help drive recent ICE sweeps of the area. ICE itself is also working to monitor social media. The investigative outlet The Lever found documents revealing that the agency has enlisted an A.I.-driven surveillance product called Zignal Labs that creates “curated detection feeds” to aid in criminal investigations. According to reporting in Wired, ICE also has plans to build out a team of dozens of analysts to monitor social media and identify targets. Recent videos, identified by 404 Media and other publications, have purportedly shown ICE agents using technology developed by the data-analytics firm Palantir, founded by Peter Thiel and others, to scan social-media accounts, government records, and biometrics data of those they detain. Social media has become a political panopticon in which your posts are a conduit for your politics, and what you post can increasingly be used against you.&lt;/p&gt;
    &lt;p&gt;Meanwhile, a new wave of digital tools has emerged to help surveil the surveillants. The apps ICEBlock, Red Dot, and DEICER all allow users to pinpoint where ICE agents are active, forming an online version of a whisper network to alert potential targets. Eyes Up provides a way for users to record and upload footage of abusive law-enforcement activity, building an archive of potential evidence. Its creator is a software developer named Mark (who uses only his first name to separate the project from his professional work); he was inspired to create Eyes Up earlier this year, when he began seeing clips of ICE abductions and harassment circulating on social media and worried about their shelf life. As he put it to me, “They could disappear at any given moment, whether the platforms decide to moderate, whether the individual deletes their account or the post.”&lt;/p&gt;
    &lt;p&gt;Ultimately, the app itself was also vulnerable to sudden disappearance. After launching, on September 1st, Eyes Up accumulated thousands of downloads and thousands of minutes of uploaded footage. Then, on October 3rd, Mark received a notice that Apple was removing the app from its store on the grounds that it may “harm a targeted individual or group.” Eyes Up is not alone. ICEBlock and Red Dot have been blocked from both Apple and Google’s app stores, the two largest marketplaces; DEICER, like Eyes Up, was removed by Apple. Pressure on the tech platforms seemed to come from the Trump Administration; after a deadly shooting at an ICE field office in Dallas in late September, the Attorney General, Pam Bondi, said in a statement to Fox News Digital that ICEBlock “put ICE agents at risk just for doing their jobs.” Mark is contesting Apple’s decision about Eyes Up through its official channels, and the creator of ICEBlock, Joshua Aaron, has argued that his app should be treated no differently than services, such as Google’s Waze, that allow users to warn one another of highway speed traps. But for now they must try to make do with a limited reach.&lt;/p&gt;
    &lt;p&gt;The politicized removal of these tools reflects an irony—ICE is aggrieved that its own tactics have been turned against it. Mark described a “double standard”: applications of technology that are friendly to the Administration’s goals are going unchallenged, in part because tech companies have become increasingly willing to support the President’s whims. “It’s clear whose rules they’re following, who they are trying to win over,” Mark said. Like other forms of self expression, digital-communication technology has become dangerously circumscribed under Trump; only the tools that exist independent of Big Tech seem like safe bets for dissent. Posting clips of the polka-dotted-dress lady on social media might be cathartic, but it will take the resistance only so far.&lt;/p&gt;
    &lt;p&gt;Still, we record and we post because it’s better than the alternative, which is suffering governmental predations in silence. This past weekend, a friend of mine in Washington, D.C., where I live, sent a photo she had taken of armed National Guard members patrolling the Sunday-morning farmers’ market in Dupont Circle. Trump’s militarized policing has operated on and off in the city since August, when the Administration seized control of the local police force, and residents have become all too accustomed to seeing camouflaged troops intrude on our daily routines. Most often, I encounter them walking through largely empty residential streets in the middle of the afternoon, and I take photos with my phone to mark the ominous superfluity of the exercise: our President’s extreme and dangerous response to a nonexistent emergency. Sharing footage is a small reminder that this is really happening. ♦&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.newyorker.com/culture/infinite-scroll/ice-and-the-smartphone-panopticon"/><published>2025-10-31T01:13:56+00:00</published></entry></feed>