<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-22T19:08:08.844752+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45333978</id><title>What is algebraic about algebraic effects?</title><updated>2025-09-22T19:08:17.658397+00:00</updated><content>&lt;doc fingerprint="2c481533a51a53b2"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;What is Algebraic about Algebraic Effects?&lt;/head&gt;&lt;quote&gt;what does the word "algebraic" mean when used in the context of programming langs?&lt;lb/&gt;- a random tweet&lt;/quote&gt;&lt;p&gt;I'd wondered the same thing about "Algebraic Effects", and was excited to find a talk on YouTube titled What's Algebraic About Algebraic Effects and Handlers? Unfortunately, I'm not the target audience. As an engineer that doesn't shy away from math, it was still out of my depth.&lt;/p&gt;&lt;p&gt;I found some time this past spring looking into Algebraic Effects, and I think I have a decent answer to the question.&lt;/p&gt;&lt;head rend="h3"&gt;Algebra in the context of programming&lt;/head&gt;&lt;p&gt;My view of "Algebra" in the context of programming is a particular kind of compositionality, where there's a structure.&lt;/p&gt;&lt;p&gt;In contrast, mainstream developers often talk about compositionality as just two obj/function that can interoperate due to the same interface, but not much more can be inferred about properties of the interop between the two obj/functions.&lt;/p&gt;&lt;p&gt;So often times, we get some collection of objects/functions that go together in an arbitrary way according to the taste of the developer that wrote it. If they're any good, it feels intuitive. But more often than not, it feels arbitrary. The effect is magnified if you look into the codebase. To a newcomer, it feels like a mess, in the same way that a house built by piling stones high feels like a mess: there's no apparent or easily recognizable structure.&lt;/p&gt;&lt;head rend="h3"&gt;A tangential detour into abstract algebra&lt;/head&gt;&lt;p&gt;In abstract algebra, structure is often where you take some math object ùõÇ (like an int, or matrix), and you pair it with an operation, (like + or *), and you say: integers can be composed with op `+`, but we can ALSO infer properties in these combos--or laws.&lt;/p&gt;&lt;p&gt;So a common one we know is: integer (‚Ñ§) with addition (+) has implied properties that always hold. And the elements (‚Ñ§), the op (+), and the properties together constrain outcomes, and this is what gives us structure. A house with structure feels like it's built with arches, rather than a pile of rocks. What are the properties of (‚Ñ§) and (+)? Due to how ‚Ñ§ and + are defined, we get these properties:&lt;/p&gt;&lt;p&gt;1. Closure: ‚Ñ§ + ‚Ñ§ always gives you another ‚Ñ§.&lt;/p&gt;&lt;p&gt;Sometimes devs write code that doesn't give you back the same thing.&lt;/p&gt;&lt;p&gt;2. Associativity: (a + b) + c = a + (b + c) where a, b, c are in ‚Ñ§.&lt;/p&gt;&lt;p&gt;This familiar, as they were drilled in grade school. But often devs don't write code that fulfill this property.&lt;/p&gt;&lt;p&gt;The last two are:&lt;/p&gt;&lt;p&gt;3. identity: ‚Ñ§ has an element that doesn't change when we use +. &lt;lb/&gt;Here, it's zero: a + 0 = a &lt;/p&gt;&lt;p&gt;4. inverse: every ‚Ñ§ has a matching ‚Ñ§ that give us the identity when we use + on it: a + (-a) = 0, where a and -a are in ‚Ñ§.&lt;/p&gt;&lt;p&gt;Taken together, math peeps gave this kind of structure a name: Groups. So if someone says [a struct] and [an op] together form a group, I can automatically can assume those properties. It's a shorthand.&lt;/p&gt;&lt;p&gt;If you add even more constraints/properties to how ‚Ñ§ and + behave together, you get another algebraic structure. There's a whole host and families of these. So if we add another constraint, we get an Abelian Group:&lt;/p&gt;&lt;p&gt;5. Commutativity: a+b = b+a, where a, b are in ‚Ñ§&lt;/p&gt;&lt;head rend="h3"&gt;Surmounting the network with algebra&lt;/head&gt;&lt;p&gt;Why write constraining data structure and op pairings? It's quite useful if you want to guarantee specific properties of your system. For example, it's well known that syncing is hard, because of the Eight Fallacies of Distributed Systems.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;The network is reliable;&lt;/item&gt;&lt;item&gt;Latency is zero;&lt;/item&gt;&lt;item&gt;Bandwidth is infinite;&lt;/item&gt;&lt;item&gt;The network is secure;&lt;/item&gt;&lt;item&gt;Topology doesn't change;&lt;/item&gt;&lt;item&gt;There is one administrator;&lt;/item&gt;&lt;item&gt;Transport cost is zero;&lt;/item&gt;&lt;item&gt;The network is homogeneous.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;That means your data, when sent over the network will likely arrive out of order. Worse, clocks can be out of sync, so it can look like data arrived from the future. How can we tame the underlying unreliable system? By constraining our data and operations to have properties.&lt;/p&gt;&lt;p&gt;CRDTs are nowadays used to enforce eventually consistent syncs. It achieves this by pairing a data structure with a merge operation, which together form an algebraic structure called a semi-lattice. The properties of a semi-lattice are:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Closure: For all a, b in the set S, the result of a ‚àò b is also in S.&lt;/item&gt;&lt;item&gt;Associativity: a ‚àò (b ‚àò c)=(a ‚àò b) ‚àò c for all a, b, c ‚àà S.&lt;/item&gt;&lt;item&gt;Commutativity: a ‚àò b = b ‚àò a for all a, b ‚àà S.&lt;/item&gt;&lt;item&gt;Idempotence: a ‚àò a = a for all a ‚àà S.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Together, this is enough to counteract the network mixing up your data when sending it over the network. I wrote about that here:&lt;/p&gt;&lt;p&gt;So by constraining the power of what our code can do, we can ensure the system has specific desirable properties that achieve the goal of syncing data over an unreliable network. It's where we say: "If we compose this kind of data structure in this constrained way with this kind of merge function, then we can guarantee these properties always hold. And with this structure, our data can survive sync over an unreliable network with other syncers."&lt;/p&gt;&lt;head rend="h3"&gt;From Monads to Algebraic Effects&lt;/head&gt;&lt;p&gt;This is why people also like Monads. Monads are about how to compose code, but with specific properties (Monadic laws) so we can achieve some goal in how they compose. I won't go into it here, as this is already long, but that's the core idea.&lt;/p&gt;&lt;p&gt;However, not all types of Monads compose well together. Here's where I'm out of my depth, but I've read and I'm told that this is why there are Monad Transformers, so you can fit different domain Monads together.&lt;/p&gt;&lt;p&gt;Hence, some people have started looking at Algebraic Effects, as a way to achieve the same compositional powers of monads, but in a different way. Most descriptions of Algebraic Effects actually ignore the `algebraic` part, because describing `effects` is already a big leap.&lt;/p&gt;&lt;p&gt;The effects part, is often explained as "resumable exceptions". I wrote a short description of what algebraic effects are from that perspective, so I won't expound on that here.&lt;/p&gt;&lt;p&gt;But the algebraic part of algebraic effects is that the effects that you raise as a "resumable exception" can be composed together! Not just in any way: design them so when composed, they have *guaranteed properties* just like the stuff you saw above!&lt;/p&gt;&lt;p&gt;For example, if we had a key/value store that we interface with using &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;, we could express what we expect to happen through some algebraic properties.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Idempotence of consecutive reads (get-get): get k; get k ‚â° get x&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This says, two consecutive &lt;code&gt;gets&lt;/code&gt; is functionally equivalent to a single &lt;code&gt;get&lt;/code&gt;. This guarantees that &lt;code&gt;get&lt;/code&gt; is a pure observation: it doesn't consume or advance anything. If this law didn't hold, reading could "drain" or "advance" some hidden cursor. By making it a law, we make it an explicit behavior for our users, so they're not surprised by bugs down the line when their assumptions veer from this property.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Last write wins (put-put): put k v1; put k v2 ‚â° put k v2&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Easy. The two &lt;code&gt;puts&lt;/code&gt; together is the functional equivalent of only executing the last one. Hence, the last &lt;code&gt;put&lt;/code&gt; is the value that's currently sitting in key &lt;code&gt;k&lt;/code&gt;. This encodes overwriting semantics, and without it, &lt;code&gt;put&lt;/code&gt; might append, merge, or accumulate. It wouldn't be what users would expect.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Read after write (put-get): put k v; get k ‚â° put k v; return v&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Executing a &lt;code&gt;put&lt;/code&gt; and then an immediate &lt;code&gt;get&lt;/code&gt; is the functional equivalent of just executing the put, but then just returning the value &lt;code&gt;v&lt;/code&gt; you already have in hand, instead of executing &lt;code&gt;get&lt;/code&gt;. This is important to guarantee the consistency of reads right after writes. Without this, you could write &lt;code&gt;v&lt;/code&gt; and then not see &lt;code&gt;v&lt;/code&gt; immediately, which would break the intuitive model of state in a key/value store.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Write back same value (get-put): get k &amp;gt;&amp;gt;= (Œªv. put k v) ‚â° return ()&lt;/item&gt;&lt;/list&gt;&lt;p&gt;If you read the value of a key and then immediately write it back unchanged, that's functionally equivalent of doing nothing (returning unit).&lt;/p&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; as saying "and then...". So rule 4 in javascript pseudocode might look like:&lt;p&gt;get(store, key).andThen((val) =&amp;gt; put(store, key, val))&lt;/p&gt;&lt;code&gt;return ()&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; is called &lt;code&gt;unit&lt;/code&gt;, which is the way functional programmers denote "no meaningful value", which is effectively what C programmers use &lt;code&gt;void&lt;/code&gt; for. They're technically different, but in practice, they're used for similar purposes.&lt;list rend="ol"&gt;&lt;item&gt;Independence across keys For &lt;code&gt;k1 ‚â† k2&lt;/code&gt;:&lt;/item&gt;&lt;/list&gt;&lt;code&gt;put k1 v1; put k2 v2  ‚â°  put k2 v2; put k1 v1
get k1; get k2        ‚â°  get k2; get k1
put k1 v; get k2      ‚â°  get k2; put k1 v
&lt;/code&gt;&lt;p&gt;Operations on different keys commute, and the store treats each key as an independent cell. This is what makes it a key/value store, rather than some entangled data structure.&lt;/p&gt;&lt;p&gt;Hence, just because you are writing effects, doesn't automatically mean they're algebraic. You have to consciously design them to be so, in order to give properties or guarantees that you want your users to have. Most current programming languages have no way of enforcing these equational axioms, so even esoteric languages that feature algebraic effects don't even try to enforce them.&lt;/p&gt;&lt;p&gt;Languages which feature dependent types, such as Coq, Agda, Idris 2, and Lean are the only languages that can encode these equational axioms explicitly and be able to prove their veracity. Typically, these languages are used by mathematicians to do proofs in math. But interestingly, Lean has been getting a lot of momentum, and it can compile to C. It can be a practical in-road to using these in practice.&lt;/p&gt;&lt;p&gt;And, in my own words, that's what's algebraic about algebraic effects.&lt;/p&gt;&lt;head rend="h3"&gt;Epilogue&lt;/head&gt;&lt;p&gt;Alan Kay was known to lament that 1 million lines in a code base is unconscionable. It's no more a skyscraper than a pile of rocks. That's because there's often no structure. Eventually we figured out arches: they're structure that give strength with less material.&lt;/p&gt;&lt;p&gt;Hence, we can build higher without using more material. By analogy, we're starting to discover what this structure looks like in software. And it looks like math. There's a lot of resistance to this, and will be for a long time.&lt;/p&gt;&lt;p&gt;And maybe with LLMs, it might not matter for a wide swath of applications. But still, there's ever progress moving forward in this direction, where these pure functional programming or math-y ideas filter down to more mainstream languages.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://interjectedfuture.com/what-is-algebraic-about-algebraic-effects/"/><published>2025-09-22T14:30:10+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334032</id><title>Dear GitHub: no YAML anchors, please</title><updated>2025-09-22T19:08:17.424714+00:00</updated><content>&lt;doc fingerprint="985c2511ef6202e8"&gt;
  &lt;main&gt;
    &lt;p&gt;Sep 22, 2025 Tags: programming, rant&lt;/p&gt;
    &lt;p&gt;TL;DR: for a very long time, GitHub Actions lacked support for YAML anchors.&lt;/p&gt;
    &lt;p&gt;This was a good thing. YAML anchors in GitHub Actions are (1) redundant with existing functionality, (2) introduce a complication to the data model that makes CI/CD human and machine comprehension harder, and (3) are not even uniquely useful because GitHub has chosen not to support the one feature (merge keys) that lacks a semantic equivalent in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;This step backwards reinforces GitHub Actions√¢ status as an insecure by default CI/CD platform by making it harder for both humans and machines to analyze action and workflow definitions for vulnerabilities. GitHub should immediately remove support for YAML anchors, before adoption becomes widespread.&lt;/p&gt;
    &lt;p&gt;GitHub recently announced that YAML anchors are now supported in GitHub Actions. That means that users can write things like this:&lt;/p&gt;
    &lt;p&gt;On face value, this seems like a reasonable feature: the job and step abstractions in GitHub Actions lend themselves to duplication, and YAML anchors are one way to reduce that duplication.&lt;/p&gt;
    &lt;p&gt;Unfortunately, YAML anchors are a terrible tool for this job. Furthermore (as we√¢ll see) GitHub√¢s implementation of YAML anchors is incomplete, precluding the actual small subset of use cases where YAML anchors are uniquely useful (but still not a good idea). We√¢ll see why below.&lt;/p&gt;
    &lt;p&gt;Pictured: the author√¢s understanding of the GitHub Actions product roadmap.&lt;/p&gt;
    &lt;p&gt;The simplest reason why YAML anchors are a bad idea is because they√¢re redundant with other more explicit mechanisms for reducing duplication in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;GitHub√¢s own example above could be rewritten without YAML anchors as:&lt;/p&gt;
    &lt;p&gt;This version is significantly clearer, but has slightly different semantics: all jobs inherit the workflow-level &lt;code&gt;env&lt;/code&gt;. But this, in my opinion,
is a good thing: the need to template environment variables across a subset
of jobs suggests an architectural error in the workflow design.&lt;/p&gt;
    &lt;p&gt;In other words: if you find yourself wanting to use YAML anchors to share √¢global√¢ configuration between jobs or steps, you probably actually want separate workflows, or at least separate jobs with job-level &lt;code&gt;env&lt;/code&gt; blocks.&lt;/p&gt;
    &lt;p&gt;In summary: YAML anchors further muddy the abstractions of workflows, jobs, and steps, by introducing a cross-cutting form of global state that doesn√¢t play by the rules of the rest of the system. This, to me, suggests that the current Actions team lacks a strong set of opinions about how GitHub Actions should be used, leading to a √¢kitchen sink√¢ approach that serves all users equally poorly.&lt;/p&gt;
    &lt;p&gt;As noted above: YAML anchors introduce a new form of non-locality into GitHub Actions. Furthermore, this form of non-locality is fully general: any YAML node can be anchored and referenced. This is a bad idea for humans and machines alike:&lt;/p&gt;
    &lt;p&gt;For humans: a new form of non-locality makes it harder to preserve local understanding of what a workflow, job, or step does: a unit of work may now depend on any other unit of work in the same file, including one hundreds or thousands of lines away. This makes it harder to reason about the behavior of one√¢s GitHub Actions without context switching.&lt;/p&gt;
    &lt;p&gt;It would only be fair to note that GitHub Actions already has some forms of non-locality: global contexts, scoping rules for &lt;code&gt;env&lt;/code&gt; blocks,
  &lt;code&gt;needs&lt;/code&gt; dependencies, step and job outputs, and so on. These can be
  difficult to debug! But what sets them apart is their lack of
  generality: each has precise semantics and scoping rules,
  meaning that a user who understands those rules can comprehend
  what a unit of work does without referencing the source of an
  environment variable, output, &amp;amp;c.&lt;/p&gt;
    &lt;p&gt;For machines: non-locality makes it significantly harder to write tools that analyze (or transform) GitHub Actions workflows.&lt;/p&gt;
    &lt;p&gt;The pain here boils down to the fact that YAML anchors diverge from the one-to-one object model1 that GitHub Actions otherwise maps onto.&lt;/p&gt;
    &lt;p&gt;With anchors, that mapping becomes one-to-many: the same element may appear once in the source, but multiple times in the loaded object representation.&lt;/p&gt;
    &lt;p&gt;In effect, this breaks a critical assumption that many tools make about YAML in GitHub Actions: that an entity in the deserialized object can be mapped back to a single concrete location in the source YAML.&lt;/p&gt;
    &lt;p&gt;This is needed to present reasonable source locations in error messages, but it doesn√¢t hold if the object model doesn√¢t represent anchors and references explicitly.&lt;/p&gt;
    &lt;p&gt;Furthermore, this is the reality for every YAML parser in wide use: all widespread YAML parsers choose (reasonably) to copy anchored values into each location where they√¢re referenced, meaning that the analyzing tool cannot √¢see√¢ the original element for source location purposes.&lt;/p&gt;
    &lt;p&gt;I feel these pains directly: I maintain zizmor as a static analysis tool for GitHub Actions, and &lt;code&gt;zizmor&lt;/code&gt; makes both of these assumptions.
  Moreover, &lt;code&gt;zizmor&lt;/code&gt;√¢s dependencies make these assumptions:
  &lt;code&gt;serde_yaml&lt;/code&gt; (like most other YAML parsers) chooses to deserialize YAML
  anchors by copying the anchored value into each location where it√¢s
  referenced2.&lt;/p&gt;
    &lt;p&gt;One of the few things that make YAML anchors uniquely useful is merge keys: a merge key allows a user to compose multiple referenced mappings together into a single mapping.&lt;/p&gt;
    &lt;p&gt;An example from the YAML spec, which I think tidily demonstrates both their use case and how incredibly confusing merge keys are:&lt;/p&gt;
    &lt;p&gt;I personally find this syntax incredibly hard to read, but at least it has a unique use case that could be useful in GitHub Actions: composing multiple sets of environment variables together with clear precedence rules is manifestly useful.&lt;/p&gt;
    &lt;p&gt;Except: GitHub Actions doesn√¢t support merge keys! They appear to be using their own internal YAML parser that already had some degree of support for anchors and references, but not for merge keys.&lt;/p&gt;
    &lt;p&gt;To me, this takes the situation from a set of bad technical decisions (and lack of strong opinions around how GitHub Actions should be used) to farce: the one thing that makes YAML anchors uniquely useful in the context of GitHub Actions is the one thing that GitHub Actions doesn√¢t support.&lt;/p&gt;
    &lt;p&gt;To summarize, I think YAML anchors in GitHub Actions are (1) redundant with existing functionality, (2) introduce a complication to the data model that makes CI/CD human and machine comprehension harder, and (3) are not even uniquely useful because GitHub has chosen not to support the one feature (merge keys) that lacks a semantic equivalent in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;Of these reasons, I think (2) is the most important: GitHub Actions security has been in the news√Ç a great deal recently, with the overwhelming consensus being that it√¢s too easy to introduce vulnerabilities in (or expose otherwise latent vulnerabilities through) GitHub Actions workflow.&lt;/p&gt;
    &lt;p&gt;For this reason, we need GitHub Actions to be easy to analyze for humans and machine alike. In effect, this means that GitHub should be decreasing the complexity of GitHub Actions, not increasing it. YAML anchors are a step in the wrong direction for all of the reasons aforementioned.&lt;/p&gt;
    &lt;p&gt;Of course, I√¢m not without self-interest here: I maintain a static analysis tool for GitHub Actions, and supporting YAML anchors is going to be an absolute royal pain in my ass3. But it√¢s not just me: tools like actionlint, claws, and poutine are all likely to struggle with supporting YAML anchors, as they fundamentally alter each tool√¢s relationship to GitHub Actions√¢ assumed data model. As-is, this change blows a massive hole in the larger open source ecosystem√¢s ability to analyze GitHub Actions for correctness and security.&lt;/p&gt;
    &lt;p&gt;All told: I strongly believe that GitHub should immediately remove support for YAML anchors in GitHub Actions. The √¢good√¢ news is that they can probably do so with a bare minimum of user disruption, since support has only been public for a few days and adoption is (probably) still primarily at the single-use workflow layer and not the reusable action (or workflow) layer.&lt;/p&gt;
    &lt;p&gt;That object model is essentially the JSON object model, where all elements appear as literal components of their source representation and take a small subset of possible types (string, number, boolean, array, object, null).√Ç ‚Ü©&lt;/p&gt;
    &lt;p&gt;In other words: even though YAML itself is a superset of JSON, users don√¢t want YAML-isms to leak through to the object model. Everybody wants the JSON object model, and that means no √¢anchor√¢ or √¢reference√¢ elements anywhere in a deserialized structure.√Ç ‚Ü©&lt;/p&gt;
    &lt;p&gt;To the point where I√¢m not clear it√¢s actually worth supporting anchors to any meaningful extent, and instead immediately flagging them as an attempt at obfuscation.√Ç ‚Ü©&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.yossarian.net/2025/09/22/dear-github-no-yaml-anchors"/><published>2025-09-22T14:34:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334250</id><title>A simple way to measure knots has come unraveled</title><updated>2025-09-22T19:08:17.007595+00:00</updated><content>&lt;doc fingerprint="a77c8316c9202f75"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A Simple Way To Measure Knots Has Come Unraveled&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;In 1876, Peter Guthrie Tait set out to measure what he called the ‚Äúbeknottedness‚Äù of knots.&lt;/p&gt;
    &lt;p&gt;The Scottish mathematician, whose research laid the foundation for modern knot theory, was trying to find a way to tell knots apart ‚Äî a notoriously difficult task. In math, a knot is a tangled piece of string with its ends glued together. Two knots are the same if you can twist and stretch one into the other without cutting the string. But it‚Äôs hard to tell if this is possible based solely on what the knots look like. A knot that seems really complicated and tangled, for instance, might actually be equivalent to a simple loop.&lt;/p&gt;
    &lt;p&gt;Tait had an idea for how to determine if two knots are different. First, lay a knot flat on a table and find a spot where the string crosses over itself. Cut the string, swap the positions of the strands, and glue everything back together. This is called a crossing change. If you do this enough times, you‚Äôll be left with an unknotted circle. Tait‚Äôs beknottedness is the minimum number of crossing changes that this process requires. Today, it‚Äôs known as a knot‚Äôs ‚Äúunknotting number.‚Äù&lt;/p&gt;
    &lt;p&gt;If two knots have different unknotting numbers, then they must be different. But Tait found that his unknotting numbers generated more questions than they answered.&lt;/p&gt;
    &lt;p&gt;‚ÄúI have got so thoroughly on one groove,‚Äù he wrote in a letter to a friend, the scientist James Clerk Maxwell, ‚Äúthat I fear I may be missing or unduly exalting something which will appear excessively simple to anyone but myself.‚Äù&lt;/p&gt;
    &lt;p&gt;If Tait missed something, so did every mathematician who followed him. Over the past 150 years, many knot theorists have been baffled by the unknotting number. They know it can provide a powerful description of a knot. ‚ÄúIt‚Äôs the most fundamental [measure] of all, arguably,‚Äù said Susan Hermiller of the University of Nebraska. But it‚Äôs often impossibly hard to compute a knot‚Äôs unknotting number, and it‚Äôs not always clear how that number corresponds to the knot‚Äôs complexity.&lt;/p&gt;
    &lt;p&gt;To untangle this mystery, mathematicians in the early 20th century devised a straightforward conjecture about how the unknotting number changes when you combine knots. If they could prove it, they would have a way to compute the unknotting number for any knot ‚Äî giving mathematicians a simple, concrete way to measure knot complexity.&lt;/p&gt;
    &lt;p&gt;Researchers searched for nearly a century, finding little evidence either for or against the conjecture.&lt;/p&gt;
    &lt;p&gt;Then, in a paper posted in June, Hermiller and her longtime collaborator Mark Brittenham uncovered a pair of knots that, when combined, form a knot that is easier to untie than the conjecture predicts. In doing so, they disproved the conjecture ‚Äî and used their counterexample to find infinitely many other pairs of knots that also disprove it.&lt;/p&gt;
    &lt;p&gt;‚ÄúWhen the paper was posted, I gasped out loud,‚Äù said Allison Moore of Virginia Commonwealth University.&lt;/p&gt;
    &lt;p&gt;The result demonstrates that ‚Äúthe unknotting number is chaotic and unpredictable and really exciting to study,‚Äù she added. The paper is ‚Äúlike waving a flag that says, we don‚Äôt understand this.‚Äù&lt;/p&gt;
    &lt;head rend="h2"&gt;Unknotting and the Great Unknown&lt;/head&gt;
    &lt;p&gt;The conjecture dates back to at least 1937, when the German mathematician Hilmar Wendt set out to understand what happens when you add knots together ‚Äî that is, when you tie both of them with the same string before gluing the ends together. (Mathematicians call this combined knot the ‚Äúconnect sum.‚Äù) Wendt thought that the unknotting number of the resulting knot should always be the sum of the unknotting numbers of the two original knots.&lt;/p&gt;
    &lt;p&gt;His prediction, now known as the additivity conjecture, makes sense. Say you add the two knots above, whose unknotting numbers are known to be 2 and 3. That means that there‚Äôs a sequence of two crossing changes that unknots the lefthand side of the connect sum, and a sequence of three crossing changes that unknots the righthand side. If you use these sequences, you can unknot the whole thing in 2 + 3, or 5, crossing changes.&lt;/p&gt;
    &lt;p&gt;But this only tells you that the connect sum‚Äôs unknotting number is no bigger than 5. You might be able to find a sequence of crossing changes that‚Äôs more efficient than untying each side individually. That is, there might be a knot that really is less than the sum of its parts.&lt;/p&gt;
    &lt;p&gt;To settle the additivity conjecture, mathematicians had to either find a connect sum with a shorter unknotting sequence or prove that no such example exists. In either case, they didn‚Äôt have a clue where to begin.&lt;/p&gt;
    &lt;p&gt;Part of the problem was that the way you lay out your knot ‚Äî what mathematicians call a ‚Äúdiagram‚Äù ‚Äî determines where and how the knot crosses over itself. There are lots of diagrams that can represent the same knot. To find the shortest sequence of crossing changes, you might have to choose just the right diagram. Often, it‚Äôs not the one you‚Äôd normally associate with the knot.&lt;/p&gt;
    &lt;p&gt;‚ÄúThere are unimaginably large numbers of ways to try and imagine changing your diagram before you decide to introduce the crossing change,‚Äù Brittenham said. ‚ÄúWe don‚Äôt, at least at the start, have any control over how complicated the picture has to look.‚Äù&lt;/p&gt;
    &lt;p&gt;In 1985, the mathematician Martin Scharlemann finally made some headway when he proved that for any two knots whose unknotting number is 1, the connect sum will always have an unknotting number of 2. ‚ÄúThat made [the whole conjecture] seem much more likely,‚Äù said Charles Livingston of Indiana University.&lt;/p&gt;
    &lt;p&gt;The result offered tantalizing evidence that the universe of knots could be neatly organized. That‚Äôs because all knots can be built out of a smaller class of ‚Äúprime‚Äù knots. The additivity conjecture implied that once you knew the unknotting numbers of those prime knots, you would know them for all knots. Any information you might want about a given knot would fall naturally out of that much simpler set.&lt;/p&gt;
    &lt;p&gt;Mathematicians wanted the conjecture to be true, said Arunima Ray of the University of Melbourne, ‚Äúbecause that would be like, there‚Äôs order in the world.‚Äù&lt;/p&gt;
    &lt;p&gt;Scharlemann‚Äôs result was later extended to other classes of knots. But it wasn‚Äôt clear that it would apply to all knots.&lt;/p&gt;
    &lt;p&gt;Then Brittenham and Hermiller convened a cluster of computers to help.&lt;/p&gt;
    &lt;head rend="h2"&gt;Sneakernet&lt;/head&gt;
    &lt;p&gt;The pair began their project a decade ago with a broader aim: to use computers to learn whatever they could about the unknotting number.&lt;/p&gt;
    &lt;p&gt;They turned to software known as SnapPy, which uses sophisticated geometric techniques to test whether two pictures depict the same knot. Just a few years earlier, SnapPy had vastly expanded its database, enabling it to identify nearly 60,000 unique knots.&lt;/p&gt;
    &lt;p&gt;It was perfectly suited for what Brittenham and Hermiller had in mind. They started with a single complicated knot and applied every imaginable crossing change to it, producing scores of new knots. They then used SnapPy to identify those knots ‚Äî and repeated the process.&lt;/p&gt;
    &lt;p&gt;They did this for millions of knot diagrams that corresponded to hundreds of thousands of knots. Ultimately, they assembled an enormous library of information about unknotting sequences and calculated upper bounds on the unknotting numbers of thousands of knots. The work required a lot of computing power: The pair signed up for supercomputing time at the University of Nebraska‚Äôs computing center, while also running their program on old laptops they‚Äôd bought at an auction. All told, they were managing dozens of computers. ‚ÄúWe had a bit of a sneakernet,‚Äù Brittenham said, ‚Äúwhere you transfer information from computer to computer by walking between them.‚Äù&lt;/p&gt;
    &lt;p&gt;The duo kept their program running in the background for over a decade. During that time, a couple of computers from their ragtag collection succumbed to overheating and even flames. ‚ÄúThere was one that actually sent out sparks,‚Äù Brittenham said. ‚ÄúThat was kind of fun.‚Äù (Those machines, he added, were ‚Äúhonorably retired.‚Äù)&lt;/p&gt;
    &lt;p&gt;Then, in the fall of 2024, a paper about a failed attempt to use machine learning to disprove the additivity conjecture caught Brittenham and Hermiller‚Äôs attention. Perhaps, they thought, machine learning wasn‚Äôt the best approach for this particular problem: If a counterexample to the additivity conjecture was out there, it would be ‚Äúa needle in a haystack,‚Äù Hermiller said. ‚ÄúThat‚Äôs not quite what things like machine learning are about. They‚Äôre about trying to find patterns in things.‚Äù&lt;/p&gt;
    &lt;p&gt;But it reinforced a suspicion the pair already had ‚Äî that maybe their more carefully honed sneakernet could find the needle.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Tie That Binds&lt;/head&gt;
    &lt;p&gt;Brittenham and Hermiller realized they could make use of the unknotting sequences they‚Äôd uncovered to look for potential counterexamples to the additivity conjecture.&lt;/p&gt;
    &lt;p&gt;Imagine again that you have two knots whose unknotting numbers are 2 and 3, and you‚Äôre trying to unknot their connect sum. After one crossing change, you get a new knot. If the additivity conjecture is to be believed, then the original knot‚Äôs unknotting number should be 5, and this new knot‚Äôs should be 4.&lt;/p&gt;
    &lt;p&gt;But what if this new knot‚Äôs unknotting number is already known to be 3? That implies that the original knot can be untied in just four steps, breaking the conjecture.&lt;/p&gt;
    &lt;p&gt;‚ÄúWe get these middle knots,‚Äù Brittenham said. ‚ÄúWhat can we learn from them?‚Äù&lt;/p&gt;
    &lt;p&gt;He and Hermiller already had the perfect tool for the occasion humming away on their suite of laptops: the database they‚Äôd spent the previous decade developing, with its upper bounds on the unknotting numbers of thousands of knots.&lt;/p&gt;
    &lt;p&gt;The mathematicians started to add pairs of knots and work through the unknotting sequences of their connect sums. They focused on connect sums whose unknotting numbers had only been approximated in the loosest sense, with a big gap between their highest and lowest possible values. But that still left them with a massive list of knots to work through ‚Äî ‚Äúdefinitely in the tens of millions, and probably in the hundreds of millions,‚Äù Brittenham said.&lt;/p&gt;
    &lt;p&gt;For months, their computer program applied crossing changes to these knots and compared the resulting knots to those in their database. One day in late spring, Brittenham checked the program‚Äôs output files, as he did most days, to see if anything interesting had turned up. To his great surprise, there was a line of text: ‚ÄúCONNECT SUM BROKEN.‚Äù It was a message he and Hermiller had coded into the program ‚Äî but they‚Äôd never expected to actually see it.&lt;/p&gt;
    &lt;p&gt;Initially, they were doubtful of the result. ‚ÄúThe very first thing that went through our heads was there was something wrong with our programming,‚Äù Brittenham said.&lt;/p&gt;
    &lt;p&gt;‚ÄúWe just dropped absolutely everything else,‚Äù Hermiller recalled. ‚ÄúAll of life just went away. Eating, sleeping got annoying.‚Äù&lt;/p&gt;
    &lt;p&gt;But their program checked out. They even tied the knot it had identified in a rope, then worked through the unknotting procedure by hand, just to make sure.&lt;/p&gt;
    &lt;p&gt;Their counterexample was real.&lt;/p&gt;
    &lt;head rend="h2"&gt;Twisted Mysteries&lt;/head&gt;
    &lt;p&gt;The counterexample Brittenham and Hermiller found is built out of two copies of a knot called the (2, 7) torus knot. This knot is made by winding two strings around each other three and a half times and then gluing their opposing ends together. Its mirror image is made by winding three and a half times in the other direction.&lt;/p&gt;
    &lt;p&gt;The unknotting number of both the (2, 7) torus knot and its mirror image is 3. But Brittenham and Hermiller‚Äôs program found that if you add these knots, you can unknot the result in just five steps ‚Äî not six, as the additivity conjecture predicted.&lt;/p&gt;
    &lt;p&gt;‚ÄúIt‚Äôs a shockingly simple counterexample,‚Äù Moore said. ‚ÄúIt goes back to that unpredictability of the crossing change.‚Äù&lt;/p&gt;
    &lt;p&gt;The result led Brittenham and Hermiller to an infinite list of other counterexamples, including almost any knot that‚Äôs built by winding two strings and gluing.&lt;/p&gt;
    &lt;p&gt;Now, with the additivity conjecture decisively struck down, the knot theory community has a wide world to explore.&lt;/p&gt;
    &lt;p&gt;For some mathematicians, the new result brings disappointment. It reveals that there‚Äôs less structure in the world of knots than they had hoped for. The unknotting number is ‚Äúnot as well behaved as we would like,‚Äù Ray said. ‚ÄúThat‚Äôs a bit sad.‚Äù&lt;/p&gt;
    &lt;p&gt;But from another perspective, that only makes the unknotting number more intriguing. ‚ÄúThere‚Äôs just much more complexity and unknowns about knot theory than we knew there were a few months ago,‚Äù Livingston said.&lt;/p&gt;
    &lt;p&gt;The nature of that additional complexity isn‚Äôt clear yet. During their furious examination of their counterexample, Brittenham and Hermiller weren‚Äôt able to develop an intuition for why it broke the additivity conjecture when other knots didn‚Äôt. Understanding this could help mathematicians get a better handle on what makes some knots complex and others less so.&lt;/p&gt;
    &lt;p&gt;‚ÄúI‚Äôm still stymied by this most basic question‚Äù about the unknotting number, Moore said. ‚ÄúThat just lights the fire under you.‚Äù&lt;/p&gt;
    &lt;p&gt;Editor‚Äôs Note: Brittenham and Hermiller‚Äôs research was funded in part by the Simons Foundation, which also funds this editorially independent magazine. Simons Foundation funding decisions have no influence on our coverage.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/a-simple-way-to-measure-knots-has-come-unraveled-20250922/"/><published>2025-09-22T14:49:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334467</id><title>Anti-*: The Things We Do but Not All the Way</title><updated>2025-09-22T19:08:16.743387+00:00</updated><content>&lt;doc fingerprint="f67211540ae23690"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Anti-*: The Things We Do But Not All The Way&lt;/head&gt;
    &lt;p&gt;I was reading Chase McCoy‚Äôs article ‚ÄúAntibuildings‚Äù where he cites Wikipedia‚Äôs entry on the term ‚ÄúAntilibrary‚Äù which points to another entry about the Japanese concept of Tsundoku, all of which deal with this idea of things we do with intention but that never make it to fruition.&lt;/p&gt;
    &lt;p&gt;Antilibraries are the books we buy but never read.&lt;/p&gt;
    &lt;p&gt;Antibuildings the architect‚Äôs version of sketches and plans drafted but buildings never made.&lt;/p&gt;
    &lt;p&gt;It got me thinking about the stuff I‚Äôve started with intention but never brought to fruition ‚Äî my own anti-*‚Äôs.&lt;/p&gt;
    &lt;p&gt;To name a few:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Antidomains: the domains I bought and had big plans for, but they never progressed beyond being parked at my registrar. (Zach Leatherman recently made a list kinda like this, if you haven‚Äôt seen it.)&lt;/item&gt;
      &lt;item&gt;Antiwebsites: the sites I was gonna make, but never shipped.&lt;/item&gt;
      &lt;item&gt;Antilayers: the Photoshop, Sketch, or Figma designs I painstakingly crafted to the level of ‚Äúcompleteness‚Äù, but then never began building with code.&lt;/item&gt;
      &lt;item&gt;Anticode: the changes I made that functioned to the level of being usable and shippable, but then I never could pull the trigger on ‚Äòem.&lt;/item&gt;
      &lt;item&gt;Antiposts: (also known as ‚Äúdrafts‚Äù, lol) all those blog posts I poured time and energy into researching, writing, and editing, but never could take all the way to ‚Äúpublished‚Äù.&lt;/item&gt;
      &lt;item&gt;Antitweets: all the Tweets/Toots/Skeets I meticulously crafted as witty comebacks or sarcastic quips, but then never posted (honestly, probably for the better).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And last, but certainly not least ‚Äî in fact, probably grandest of them all:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Antitabs: all the browser tabs of articles, videos, recipes, and other good things I collected and was going to read, watch, bake, etc. but never did.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.jim-nielsen.com/2025/my-antis/"/><published>2025-09-22T15:03:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334545</id><title>PlanetScale for Postgres is now GA</title><updated>2025-09-22T19:08:16.597089+00:00</updated><content>&lt;doc fingerprint="af51e4d16e9161c8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;PlanetScale for Postgres is now GA&lt;/head&gt;
    &lt;p&gt;By Sam Lambert |&lt;/p&gt;
    &lt;p&gt;PlanetScale for Postgres is now generally available and out of private preview. To create a Postgres database, sign up or log in to your PlanetScale account, create a new database, and select Postgres. If you are looking to migrate from another Postgres provider to PlanetScale, you can use our migration guides to get started. Finally, if you have a large or complex migration, we can help you via our sales team at postgres@planetscale.com.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is PlanetScale for Postgres?&lt;/head&gt;
    &lt;p&gt;Our mission is simple: bring you the fastest and most reliable databases with the best developer experience. We have done this for 5 years now with our managed Vitess product, allowing companies like Cursor, Intercom, and Block to scale beyond previous limits.&lt;/p&gt;
    &lt;p&gt;We are so excited to bring this to Postgres. Our proprietary operator allows us to bring the maturity of PlanetScale and the performance of Metal to an even wider audience. We bring you the best of Postgres and the best of PlanetScale in one product.&lt;/p&gt;
    &lt;head rend="h2"&gt;Customers on PlanetScale for Postgres&lt;/head&gt;
    &lt;p&gt;Hundreds of companies already trust PlanetScale for Postgres to power their production workloads. We say this every time we launch something, but we prefer you hear about real-world usage straight from our customers. Read through some of their stories about their migration to PlanetScale for Postgres below.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Convex: Powered by PlanetScale&lt;/item&gt;
      &lt;item&gt;Supermemory just got faster on PlanetScale&lt;/item&gt;
      &lt;item&gt;Scaling Real√¢Time Discovery: Inside Layers√¢ PlanetScale Migration&lt;/item&gt;
      &lt;item&gt;Why We Migrated from Neon to PlanetScale&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Vitess for Postgres&lt;/head&gt;
    &lt;p&gt;Neki is our Postgres sharding solution. Built by the team behind Vitess combining the best of Vitess and Postgres. Neki is not a fork of Vitess. Vitess√¢ achievements are enabled by leveraging MySQL√¢s strengths and engineering around its weaknesses. To achieve Vitess√¢ power for Postgres we are architecting from first principles and building alongside design partners at scale. When we are ready we will release Neki as an open source project suitable for running the most demanding Postgres workloads. To sign up for the Neki waitlist visit neki.dev.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://planetscale.com/blog/planetscale-for-postgres-is-generally-available"/><published>2025-09-22T15:10:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334599</id><title>A New Internet Business Model?</title><updated>2025-09-22T19:08:16.188190+00:00</updated><content>&lt;doc fingerprint="384899547786ab2d"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Cloudflare launched 15 years ago this week. We like to celebrate our birthday by announcing new products and features that give back to the Internet, which we√¢ll do a lot of this week. But, on this occasion, we've also been thinking about what's changed on the Internet over the last 15 years and what has not.&lt;/p&gt;
      &lt;p&gt;With some things there's been clear progress: when we launched in 2010 less than 10 percent of the Internet was encrypted, today well over 95 percent is encrypted. We're proud of the role we played in making that happen.&lt;/p&gt;
      &lt;p&gt;Some other areas have seen limited progress: IPv6 adoption has grown steadily but painfully slowly over the last 15 years, in spite of our efforts. That's a problem because as IPv4 addresses have become scarce and expensive it√¢s held back new entrants and driven up the costs of things like networking and cloud computing.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;The Internet√¢s Business Model&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Still other things have remained remarkably consistent: the basic business model of the Internet has for the last 15 years been the same √¢ create compelling content, find a way to be discovered, and then generate value from the resulting traffic. Whether that was through ads or subscriptions or selling things or just the ego of knowing that someone is consuming what you created, traffic generation has been the engine that powered the Internet we know today.&lt;/p&gt;
      &lt;p&gt;Make no mistake, the Internet has never been free. There's always been a reward system that transferred value from consumers to creators and, in doing so, filled the Internet with content. Had the Internet not had that reward system it wouldn't be nearly as vibrant as it is today.&lt;/p&gt;
      &lt;p&gt;A bit of a trivia aside: why did Cloudflare never build an ad blocker despite many requests? Because, as imperfect as they are, ads have been the only micropayment system that has worked at scale to encourage an open Internet while also compensating content creators for their work. Our mission is to help build a better Internet, and a core value is that we√¢re principled, so we weren√¢t going to hamper the Internet√¢s fundamental business model.&lt;/p&gt;
      &lt;p&gt;But that same traffic-based reward system has also created many of the problems we lament about the current state of the Internet. Traffic has always been an imperfect proxy for value. Over the last 15 years we've watched more of the Internet driven by annoying clickbait or dangerous ragebait. Entire media organizations have built their businesses with a stated objective of writing headlines to generate the maximum cortisol response because that's what generates the maximum amount of traffic.&lt;/p&gt;
      &lt;p&gt;Over the years, Cloudflare has at times faced calls for us to intervene and control what content can be published online. As an infrastructure provider, we've never felt we were the right place for those editorial decisions to be made. But it wasn't because we didn't worry about the direction the traffic-incentivized Internet seemed to be headed. It always seemed like what fundamentally needed to change was not more content moderation at the infrastructure level but instead a healthier incentive system for content creation.&lt;/p&gt;
      &lt;p&gt;Today the conditions to bring about that change may be happening. In the last year, something core to the Internet we√¢ve all known has changed. It's being driven by AI and it has an opportunity with some care and nurturing to help bring about what we think may be a much better Internet.&lt;/p&gt;
      &lt;p&gt;What√¢s the change? The primary discovery system of the Internet for the last 15 years has been Search Engines. They scraped the Internet's content, built an index, and then presented users with a treasure map which they followed generating traffic. Content creators were happy to let Search Engines scrape their content because there were a limited number of them, so the infrastructure costs were relatively low and, more importantly, because the Search Engines gave something to sites in the form of traffic √¢√Ç the Internet√¢s historic currency √¢√Ç sent back to sites.&lt;/p&gt;
      &lt;p&gt;It√¢s already clear that the Internet√¢s discovery system for the next 15 years will be something different: Answer Engines. Unlike Search Engines which gave you a map where you hunted for what you were looking for, driving traffic in the process, Answer Engines just give you the answer without you having to click on anything. For 95 percent of users 95 percent of the time, that is a better user experience.&lt;/p&gt;
      &lt;p&gt;You don√¢t have to look far to see this is changing rapidly before our eyes. ChatGPT, Anthropic√¢s Claude, and other AI startups aren√¢t Search Engines √¢ they√¢re Answer Engines. Even Google, the search stalwart, is increasingly serving √¢AI Overviews√¢ in place of 10 blue links. We can often look to sci-fi movies to have a glimpse into our most likely future. In them, the helpful intelligent robot character didn√¢t answer questions with: √¢Here are some links you can click on to maybe find what you√¢re looking for.√¢ Whether you like it or not, the future will increasingly be answers not searches.&lt;/p&gt;
      &lt;p&gt;In the short term, this is going to be extremely painful for some industries that are built based on monetizing traffic. It already is. While ecommerce and social applications haven't yet seen a significant drop in traffic as the world switches to Answer Engines, media companies have. Why the difference? Well, for the former, you still need to buy the thing the Answer Engine recommends and, for now, we still value talking with other humans.&lt;/p&gt;
      &lt;p&gt;But for media companies, if the Answer Engine gives you the summary of what you√¢re looking for in most cases you don√¢t need to read the story. And the loss of traffic for media companies has already been dramatic. It√¢s not just traditional media. Research groups at investment banks, industry analysts, major consulting firms √¢√Ç they√¢re all seeing major drops in people finding their content because we are increasingly getting answers not search treasure maps.&lt;/p&gt;
      &lt;p&gt;Some say these answer engines or agents are just acting on behalf of humans. Sure but so what? Without a change they will still kill content creators√¢ businesses. If you ask your agent to summarize twenty different news sources but never actually visit any of them you√¢re still undermining the business model of those news sources. Agents don√¢t click on ads. And if those agents are allowed to aggregate information on behalf of multiple users it√¢s an even bigger problem because then subscription revenue is eliminated as well. Why subscribe to the Wall Street Journal or New York Times or Financial Times or Washington Post if my agent can free ride off some other user who does?&lt;/p&gt;
      &lt;p&gt;Unless you believe that content creators should work for free, or that they are somehow not needed anymore √¢√Ç both of which are naive assumptions √¢√Ç something needs to change. A visit from an agent isn√¢t the same as a visit from a human and therefore should have different rules of the road. If nothing changes, the drop in human traffic to the media ecosystem writ large will kill the business model that has built the content-rich Internet we enjoy today.&lt;/p&gt;
      &lt;p&gt;We think that√¢s an existential threat to one of humanity√¢s most important creations: the Internet.&lt;/p&gt;
      &lt;p&gt;But there√¢s reason for optimism. Content is the fuel that powers every AI system and the companies that run those AI systems know ultimately they need to financially support the ecosystem. Because of that it seems potentially we're on the cusp of a new, better, and maybe healthier Internet business model. As content creators use tools like the ones provided by Cloudflare to restrict AI robots from taking their content without compensation, we're already seeing a market emerge and better deals being struck between AI and content companies.&lt;/p&gt;
      &lt;p&gt;What's most interesting is what content companies are getting the best deals. It's not the ragebait headline writers. It's not the news organizations writing yet another take on what's going on in politics. It's not the spammy content farms full of drivel. Instead, it's Reddit and other quirky corners that best remind us of the Internet of old. For those of you old enough, think back to the Internet not of the last 15 years but of the last 35. We√¢ve lost some of what made that early Internet great, but there are indications that we might finally have the incentives to bring more of it back.&lt;/p&gt;
      &lt;p&gt;It seems increasingly likely that in our future, AI-driven Internet √¢√Ç assuming the AI companies are willing to step up, support the ecosystem, and pay for the content that is the most valuable to them √¢ it√¢s the creative, local, unique, original content that√¢ll be worth the most. And, if you√¢re like us, the thing you as an Internet consumer are craving more of is creative, local, unique, original content. And, it turns out, having talked with many of them, that√¢s the content that content creators are most excited to create.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;A New Internet Business Model&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;So how will the business model work? Well, for the first time in history, we have a pretty good mathematical representation of human knowledge. Sum up all the LLMs and that's what you get. It's not perfect, but it's pretty good. Inherently, the same mathematical model serves as a map for the gaps in human knowledge. Like a block of Swiss Cheese √¢ there's a lot of cheese, but there's also a lot of holes.&lt;/p&gt;
      &lt;p&gt;Imagine a future business model of the Internet that doesn't reward traffic-generating ragebait but instead rewards those content creators that help fill in the holes in our collective metaphorical cheese. That will involve some portion of the subscription fees AI companies collect, and some portion of the revenue from the ads they'll inevitably serve, going back to content creators who most enrich the collective knowledge.&lt;/p&gt;
      &lt;p&gt;As a rough and simplistic sketch, think of it as some number of dollars per AI company√¢s monthly active users going into a collective pool to be distributed out to content creators based on what most fills in the holes in the cheese.&lt;/p&gt;
      &lt;p&gt;You could imagine an AI company suggesting back to creators that they need more created about topics they may not have enough content about. Say, for example, the carrying capacity of unladened swallows because they know their subscribers of a certain age and proclivity are always looking for answers about that topic. The very pruning algorithms the AI companies use today form a roadmap for what content is worth enough to not be pruned but paid for.&lt;/p&gt;
      &lt;p&gt;While today the budget items that differentiate AI companies are how much they can afford to spend on GPUs and top talent, as those things inevitably become more and more commodities it seems likely what will differentiate the different AIs is their access to creative, local, unique, original content. And the math of their algorithms provides them a map of what√¢s worth the most. While there are a lot of details to work out, those are the ingredients you need for a healthy market.&lt;/p&gt;
      &lt;p&gt;As we think about our role at Cloudflare in this developing market, it's not about protecting the status quo but instead helping catalyze a better business model for the future of Internet content creation. That means creating a level playing field. Ideally there should be lots of AI companies, large and small, and lots of content creators, large and small.&lt;/p&gt;
      &lt;p&gt;It can√¢t be that a new entrant AI company is at a disadvantage to a legacy search engine because one has to pay for content but the other gets it for free. But it√¢s also critical to realize that the right solution to that current conundrum isn√¢t that no one pays, it√¢s that, new or old, everyone who benefits from the ecosystem should contribute back to it based on their relative size.&lt;/p&gt;
      &lt;p&gt;It may seem impossibly idealistic today, but the good news is that based on the conversations we√¢ve had we√¢re confident if a few market participants tip √¢√Ç whether because they step up and do the right thing or are compelled √¢ we will see the entire market tipping and becoming robust very quickly.&lt;/p&gt;
      &lt;p&gt;We can't do this alone and we have no plans to try to. Our mission is not to √¢build a better Internet√¢ but to √¢help build a better Internet.√¢ The solutions developed to facilitate this market need to be open, collaborative, standardized, and shared across many organizations. We√¢ll take some encouraging steps in that direction with announcements on partnerships and collaborations this week. And we√¢re proud to be a leader in this space.&lt;/p&gt;
      &lt;p&gt;The Internet is an ecosystem and we, other infrastructure providers, along with most importantly both AI companies and content creators, will be critical in ensuring that ecosystem is healthy. We√¢re excited to partner with those who are ready to step up and do their part to also help build a better Internet. It is possible.&lt;/p&gt;
      &lt;p&gt;And we're optimistic that if others can collaborate in supporting the ecosystem we may be at the cusp of a new golden age of the Internet. Our conversations with the leading AI companies nearly all acknowledge that they have a responsibility to give back to the ecosystem and compensate content creators. Confirming this, the largest publishers are reporting they're having much more constructive conversations about licensing their content to those AI companies. And, this week, we'll be announcing new tools to help even the smallest publishers take back control of who can use what they've created.&lt;/p&gt;
      &lt;p&gt;It may seem impossible. We think it√¢s a no-brainer. We're proud of what Cloudflare has accomplished over the last 15 years, but there√¢s a lot left to do to live up to our mission. So, more than ever, it's clear: giddy up, because we're just getting started!&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/cloudflare-2025-annual-founders-letter/"/><published>2025-09-22T15:14:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335129</id><title>Human-Oriented Markup Language</title><updated>2025-09-22T19:08:15.907557+00:00</updated><content>&lt;doc fingerprint="57f920aaa3d8d650"&gt;
  &lt;main&gt;
    &lt;code&gt;# A sample HUML document.
website::
  hostname: "huml.io"
  ports:: 80, 443 # Inline list.
  enabled: true
  factor: 3.14
  props:: mime_type: "text/html", encoding: "gzip" # Inline dict.
  tags:: # Multi-line list.
    - "markup"
    - "webpage"
    - "schema"

haikus::
  one: """
    A quiet language
    Lines fall into their places
    Nothing out of place
  """
&lt;/code&gt;
    &lt;head rend="h2"&gt;Motivation&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HUML was primarily born out of the numerous frustrations with YAML, where one easy-to-miss, accidental indentation change can dangerously alter the semantics of a document.&lt;/item&gt;
      &lt;item&gt;Other popular markup languages such as TOML and HCL are configuration-oriented. NestedText is an interesting approach, but is too primitive to be suitable for wider use cases. JSON is universal, but lacks comments, does not have a strict form for consistent readability across contexts, and has bracket-matching and formatting woes which make human editing difficult.&lt;/item&gt;
      &lt;item&gt;Of these, YAML is the one that comes closest to indicating structure and hierarchy visually.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Ultimately, a new markup language is a subjective endeavor (it was even in 2001, as evidenced by YAML's original name, Yet Another ...). HUML looks like YAML, but borrows characteristics from many existing languages with the primary focus on enforcing human readability and consistency across contexts.&lt;/p&gt;
    &lt;p&gt;Still, why YET another markup language? Why not?&lt;/p&gt;
    &lt;head rend="h2"&gt;Goals&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Ensure human readability and editability above all else.&lt;/item&gt;
      &lt;item&gt;Enable visual comprehension of data structures and hierarchies.&lt;/item&gt;
      &lt;item&gt;Avoid footguns and ambiguities in syntax and data types.&lt;/item&gt;
      &lt;item&gt;Provide as few ways as possible‚Äîpreferably one‚Äîof representing something.&lt;/item&gt;
      &lt;item&gt;Maintain strict formatting for uniformity, eliminating the need for formatters.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://huml.io/"/><published>2025-09-22T15:48:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335222</id><title>The American Nations regions across North America</title><updated>2025-09-22T19:08:15.663915+00:00</updated><content>&lt;doc fingerprint="ba70015e0ff515a8"&gt;
  &lt;main&gt;
    &lt;p&gt;Earlier this summer, over at Nationhood Lab, we extended our data models to enable researchers to apply the American Nations model in Canada, This also let us create, for the first time, a master map of these regional cultures across North America.&lt;/p&gt;
    &lt;p&gt;The book the model is based on, American Nations, is a history of the entire continent north of the 25th parallel, including what‚Äôs now Canada and northern Mexico. Until now, I‚Äôd never had a proper map of what that looks like, facilitating research across borders. The map‚Äôs been popular with the public as well, with the post introducing it garnering unprecedented organic internet traffic.&lt;/p&gt;
    &lt;p&gt;Note Spanish Caribbean‚Äôs extension to the Dominican Republic and Puerto Rico. The region probably includes parts of the ‚ÄúSpanish Main‚Äù ‚Äî the northern, Caribbean coast of South America ‚Äî and maybe some other island locations as well, but, it being peripheral to our core study area in North America, I haven‚Äôt done the research into all that. First Nation, of course, includes Greenland, which is part of the Kingdom of Denmark.&lt;/p&gt;
    &lt;p&gt;Central and Southern Mexico likely belong to ‚Äúpost-Aztec‚Äù and ‚ÄúMaya‚Äù regional cultures, the latter extending into parts of Guatemala, Belize, and Honduras. Someday, hopefully in collaboration with regional experts, maybe there will be a South American Nations map as well.&lt;/p&gt;
    &lt;p&gt;Thanks to my counterparts at Motivf, John Liberty (who created the map) and Tova Pearlman (who helped wrangle some of the underlying data.) Enjoy.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://colinwoodard.com/new-map-the-american-nations-regions-across-north-america/"/><published>2025-09-22T15:54:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335452</id><title>SWE-Bench Pro</title><updated>2025-09-22T19:08:14.137488+00:00</updated><content>&lt;doc fingerprint="d6175194c4399c4"&gt;
  &lt;main&gt;
    &lt;p&gt;Code and data for the following works:&lt;/p&gt;
    &lt;p&gt;SWE-Bench Pro is a challenging benchmark evaluating LLMs/Agents on long-horizon software engineering tasks. Given a codebase and an issue, a language model is tasked with generating a patch that resolves the described problem.&lt;/p&gt;
    &lt;p&gt;The dataset is inspired from SWE-Bench: https://github.com/SWE-bench/SWE-bench&lt;/p&gt;
    &lt;p&gt;To access SWE-bench Pro, copy and run the following code:&lt;/p&gt;
    &lt;code&gt;from datasets import load_dataset
swebench = load_dataset('ScaleAI/SWE-bench_Pro', split='test')&lt;/code&gt;
    &lt;p&gt;SWE-bench Pro uses Docker for reproducible evaluations. In addition, the evaluation script requires Modal to scale the evaluation set.&lt;/p&gt;
    &lt;p&gt;Follow the instructions in the Docker setup guide to install Docker on your machine. If you're setting up on Linux, we recommend seeing the post-installation steps as well.&lt;/p&gt;
    &lt;p&gt;Run the following commands to store modal credentials:&lt;/p&gt;
    &lt;code&gt;pip install modal
modalv setup # and follow the prompts to generate your token and secret
&lt;/code&gt;
    &lt;p&gt;After running these steps, you should be able to see a token ID and secret in &lt;code&gt;~/.modal.toml&lt;/code&gt;:
EG:&lt;/p&gt;
    &lt;code&gt;token_id = &amp;lt;token id&amp;gt;
token_secret = &amp;lt;token secret&amp;gt;
active = true
&lt;/code&gt;
    &lt;p&gt;We store prebuilt Docker images for each instance. They can be found in this directory:&lt;/p&gt;
    &lt;p&gt;https://hub.docker.com/repository/docker/jefzda/sweap-images/general&lt;/p&gt;
    &lt;p&gt;The format of the images is as follows.&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;jefzda/sweap-images:{repo_base}.{repo_name}-{repo_base}__{repo_name}-{hash}&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;jefzda/sweap-images:gravitational.teleport-gravitational__teleport-82185f232ae8974258397e121b3bc2ed0c3729ed-v626ec2a48416b10a88641359a169d99e935ff03&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;First generate patch predictions using your harness of choice. Evaluate patch predictions on SWE-bench Pro with the following command:&lt;/p&gt;
    &lt;code&gt;python sweap_pro_eval_modal.py \
    --raw_sample_path=external_hf_v2.csv \
    --patch_path={OUTPUT}/gold_patches.json \
    --output_dir={OUTPUT}/ \
    --scripts_dir=run_scripts \
    --num_workers=100 \
    --dockerhub_username=your-username&lt;/code&gt;
    &lt;p&gt;Replace gold_patches with your patch json, and point raw_sample_path to the SWE-Bench Pro CSV.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/scaleapi/SWE-bench_Pro-os"/><published>2025-09-22T16:08:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335474</id><title>OpenAI and Nvidia announce partnership to deploy 10GW of Nvidia systems</title><updated>2025-09-22T19:08:13.814338+00:00</updated><content>&lt;doc fingerprint="a9561c5e408ccdb9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;OpenAI and NVIDIA announce strategic partnership to deploy 10 gigawatts of NVIDIA systems&lt;/head&gt;
    &lt;p&gt;News&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Strategic partnership enables OpenAI to build and deploy at least 10 gigawatts of AI datacenters with NVIDIA systems representing millions of GPUs for OpenAI‚Äôs next-generation AI infrastructure.&lt;/item&gt;
      &lt;item&gt;To support the partnership, NVIDIA intends to invest up to $100 billion in OpenAI progressively as each gigawatt is deployed.&lt;/item&gt;
      &lt;item&gt;The first gigawatt of NVIDIA systems will be deployed in the second half of 2026 on NVIDIA‚Äôs Vera Rubin platform.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;San Francisco and Santa Clara‚ÄîSeptember 22, 2025‚ÄîNVIDIA and OpenAI today announced a letter of intent for a landmark strategic partnership to deploy at least 10 gigawatts of NVIDIA systems for OpenAI‚Äôs next-generation AI infrastructure to train and run its next generation of models on the path to deploying superintelligence. To support this deployment including datacenter and power capacity, NVIDIA intends to invest up to $100 billion in OpenAI as the new NVIDIA systems are deployed. The first phase is targeted to come online in the second half of 2026 using NVIDIA‚Äôs Vera Rubin platform.&lt;/p&gt;
    &lt;p&gt;‚ÄúNVIDIA and OpenAI have pushed each other for a decade, from the first DGX supercomputer to the breakthrough of ChatGPT,‚Äù said Jensen Huang, founder and CEO of NVIDIA. ‚ÄúThis investment and infrastructure partnership mark the next leap forward‚Äîdeploying 10 gigawatts to power the next era of intelligence.‚Äù&lt;/p&gt;
    &lt;p&gt;‚ÄúEverything starts with compute,‚Äù said Sam Altman, co-founder and CEO of OpenAI. ‚ÄúCompute infrastructure will be the basis for the economy of the future, and we will utilize what we‚Äôre building with NVIDIA to both create new AI breakthroughs and empower people and businesses with them at scale.‚Äù&lt;/p&gt;
    &lt;p&gt;‚ÄúWe‚Äôve been working closely with NVIDIA since the early days of OpenAI,‚Äù said Greg Brockman, co-founder and President of OpenAI. ‚ÄúWe‚Äôve utilized their platform to create AI systems that hundreds of millions of people use every day. We‚Äôre excited to deploy 10 gigawatts of compute with NVIDIA to push back the frontier of intelligence and scale the benefits of this technology to everyone.‚Äù&lt;/p&gt;
    &lt;p&gt;OpenAI will work with NVIDIA as a preferred strategic compute and networking partner for its AI factory growth plans. OpenAI and NVIDIA will work together to co-optimize their roadmaps for OpenAI's model and infrastructure software and NVIDIA‚Äôs hardware and software.&lt;/p&gt;
    &lt;p&gt;This partnership complements the deep work OpenAI and NVIDIA are already doing with a broad network of collaborators, including Microsoft, Oracle, SoftBank, and Stargate partners, focused on building the world‚Äôs most advanced AI infrastructure.&lt;/p&gt;
    &lt;p&gt;OpenAI has grown to over 700 million weekly active users and strong adoption across global enterprises, small businesses, and developers. This partnership will help OpenAI advance its mission to build artificial general intelligence that benefits all of humanity.&lt;lb/&gt;NVIDIA and OpenAI look forward to finalizing the details of this new phase of strategic partnership in the coming weeks.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/openai-nvidia-systems-partnership/"/><published>2025-09-22T16:10:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335635</id><title>Testing is better than Data Structures and Algorithms</title><updated>2025-09-22T19:08:13.570162+00:00</updated><content>&lt;doc fingerprint="bf6210976d050c95"&gt;
  &lt;main&gt;
    &lt;p&gt;People should spend less time learning DSA, more time learning testing.&lt;/p&gt;
    &lt;p&gt;I see new learners asking about ‚ÄúDSA‚Äù a lot. Data Structures and Algorithms are of course important: considered broadly, they are the two ingredients that make up all programs. But in my opinion, ‚ÄúDSA‚Äù as an abstract field of study is over-emphasized.&lt;/p&gt;
    &lt;p&gt;I understand why people focus on DSA: it‚Äôs a concrete thing to learn about, there are web sites devoted to testing you on it, and most importantly, because job interviews often involve DSA coding questions.&lt;/p&gt;
    &lt;p&gt;Before I get to other opinions, let me make clear that anything you can do to help you get a job is a good thing to do. If grinding leetcode will land you a position, then do it.&lt;/p&gt;
    &lt;p&gt;But I hope companies hiring entry-level engineers aren‚Äôt asking them to reverse linked lists or balance trees. Asking about techniques that can be memorized ahead of time won‚Äôt tell them anything about how well you can work. The stated purpose of those interviews is to see how well you can figure out solutions, in which case memorization will defeat the point.&lt;/p&gt;
    &lt;p&gt;The thing new learners don‚Äôt understand about DSA is that actual software engineering almost never involves implementing the kinds of algorithms that ‚ÄúDSA‚Äù teaches you. Sure, it can be helpful to work through some of these puzzles and see how they are solved, but writing real code just doesn‚Äôt involve writing that kind of code.&lt;/p&gt;
    &lt;p&gt;Here is what I think in-the-trenches software engineers should know about data structures and algorithms:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data structures are ways to organize data. Learn some of the basics: linked list, array, hash table, tree. By ‚Äúlearn‚Äù I mean understand what it does and why you might want to use one.&lt;/item&gt;
      &lt;item&gt;Different data structures can be used to organize the same data in different ways. Learn some of the trade-offs between structures that are similar.&lt;/item&gt;
      &lt;item&gt;Algorithms are ways of manipulating data. I don‚Äôt mean named algorithms like Quicksort, but algorithms as any chunk of code that works on data and does something with it.&lt;/item&gt;
      &lt;item&gt;How you organize data affects what algorithms you can use to work with the data. Some data structures will be slow for some operations where another structure will be fast.&lt;/item&gt;
      &lt;item&gt;Algorithms have a ‚Äútime complexity‚Äù (Big O): how the code slows as the data grows. Get a sense of what this means.&lt;/item&gt;
      &lt;item&gt;Python has a number of built-in data structures. Learn how they work, and the time complexity of their operations.&lt;/item&gt;
      &lt;item&gt;Learn how to think about your code to understand its time complexity.&lt;/item&gt;
      &lt;item&gt;Read a little about more esoteric things like Bloom filters, so you can find them later in the unlikely case you need them.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here are some things you don‚Äôt need to learn:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The details of a dozen different sorting algorithms. Look at two to see different ways of approaching the same problem, then move on.&lt;/item&gt;
      &lt;item&gt;The names of ‚Äúimportant‚Äù algorithms. Those have all been implemented for you.&lt;/item&gt;
      &lt;item&gt;The answers to all N problems on some quiz web site. You won‚Äôt be asked these exact questions, and they won‚Äôt come up in your real work. Again: try a few to get a feel for how some algorithms work. The exact answers are not what you need.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Of course some engineers need to implement hash tables, or sorting algorithms or whatever. We love those engineers: they write libraries we can use off the shelf so we don‚Äôt have to implement them ourselves.&lt;/p&gt;
    &lt;p&gt;There have been times when I implemented something that felt like An Algorithm (for example, Finding fuzzy floats), but it was more about considering another perspective on my data, looking at the time complexity, and moving operations around to avoid quadratic behavior. It wasn‚Äôt opening a textbook to find the famous algorithm that would solve my problem.&lt;/p&gt;
    &lt;p&gt;Again: if it will help you get a job, deep-study DSA. But don‚Äôt be disappointed when you don‚Äôt use it on the job.&lt;/p&gt;
    &lt;p&gt;If you want to prepare yourself for a career, and also stand out in job interviews, learn how to write tests:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;This will be a skill you use constantly. Real-world software means writing tests much more than school teaches you to.&lt;/item&gt;
      &lt;item&gt;In a job search, testing experience will stand out more than DSA depth. It shows you‚Äôve thought about what it takes to write high-quality software instead of just academic exercises.&lt;/item&gt;
      &lt;item&gt;It‚Äôs not obvious how to test code well. It‚Äôs a puzzle and a problem to solve. If you like figuring out solutions to tricky questions, focus on how to write code so that it can be tested, and how to test it.&lt;/item&gt;
      &lt;item&gt;Testing not only gives you more confidence in your code, it helps you write better code in the first place.&lt;/item&gt;
      &lt;item&gt;Testing applies everywhere, from tiny bits of code to entire architectures, assisting you in design and implementation at all scales.&lt;/item&gt;
      &lt;item&gt;If pursued diligently, testing is an engineering discipline in its own right, with a fascinating array of tools and techniques.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Less DSA, more testing.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://nedbatchelder.com/blog/202509/testing_is_better_than_dsa.html"/><published>2025-09-22T16:21:35+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335695</id><title>A board member's perspective of the RubyGems controversy</title><updated>2025-09-22T19:08:13.441761+00:00</updated><content/><link href="https://apiguy.substack.com/p/a-board-members-perspective-of-the"/><published>2025-09-22T16:25:35+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335774</id><title>California issues historic fine over lawyer's ChatGPT fabrications</title><updated>2025-09-22T19:08:13.125468+00:00</updated><content>&lt;doc fingerprint="d0399a088fc1a31c"&gt;
  &lt;main&gt;
    &lt;p&gt;In summary&lt;/p&gt;
    &lt;p&gt;The court of appeals said 21 of 23 quotes in an opening brief were fake. State authorities are scrambling to grapple with widespread use of artificial intelligence.&lt;/p&gt;
    &lt;p&gt;A California attorney must pay a $10,000 fine for filing a state court appeal full of fake quotations generated by the artificial intelligence tool ChatGPT.&lt;/p&gt;
    &lt;p&gt;The fine appears to be the largest issued over AI fabrications by a California court and came with a blistering opinion stating that 21 of 23 quotes from cases cited in the attorney‚Äôs opening brief were made up. It also noted that numerous out-of-state and federal courts have confronted attorneys for citing fake legal authority.&lt;/p&gt;
    &lt;p&gt;‚ÄúWe therefore publish this opinion as a warning,‚Äù it continued. ‚ÄúSimply stated, no brief, pleading, motion, or any other paper filed in any court should contain any citations‚Äî whether provided by generative AI or any other source‚Äîthat the attorney responsible for submitting the pleading has not personally read and verified.‚Äù&lt;/p&gt;
    &lt;p&gt;The opinion, issued 10 days ago in California‚Äôs 2nd District Court of Appeal, is a clear example of why the state‚Äôs legal authorities are scrambling to regulate the use of AI in the judiciary. The state‚Äôs Judicial Council two weeks ago issued guidelines requiring judges and court staff to either ban generative AI or adopt a generative AI use policy by Dec. 15. Meanwhile, the California Bar Association is considering whether to strengthen its code of conduct to account for various forms of AI following a request by the California Supreme Court last month.&lt;/p&gt;
    &lt;p&gt;The Los Angeles-area attorney fined last week, Amir Mostafavi, told the court that he did not read text generated by the AI model before submitting the appeal in July 2023, months after OpenAI marketed ChatGPT as capable of passing the bar exam. A three-judge panel fined him for filing a frivolous appeal, violating court rules, citing fake cases, and wasting the court‚Äôs time and the taxpayers money, according to the opinion.&lt;/p&gt;
    &lt;p&gt;Mostafavi told CalMatters he wrote the appeal and then used ChatGPT to try and improve it. He said that he didn‚Äôt know it would add case citations or make things up.&lt;/p&gt;
    &lt;p&gt;He thinks it is unrealistic to expect lawyers to stop using AI. It‚Äôs become an important tool just as online databases largely replaced law libraries and, until AI systems stop hallucinating fake information, he suggests lawyers who use AI to proceed with caution.&lt;/p&gt;
    &lt;p&gt;‚ÄúIn the meantime we‚Äôre going to have some victims, we‚Äôre going to have some damages, we‚Äôre going to have some wreckages,‚Äù he said. ‚ÄúI hope this example will help others not fall into the hole. I‚Äôm paying the price.‚Äù&lt;/p&gt;
    &lt;p&gt;The fine issued to Mostafavi is the most costly penalty issued to an attorney by a California state court and one of the highest fines ever issued over attorney use of AI, according to Damien Charlotin, who teaches a class on AI and the law at a business school in Paris. He tracks instances of attorneys citing fake cases, primarily in Australia, Canada, the United States, and the United Kingdom.&lt;/p&gt;
    &lt;p&gt;In a widely-publicized case in May, a U.S. district court judge in California ordered two law firms to pay $31,100 in fees to defense counsel and the court for costs associated with using ‚Äúbogus AI-generated research.‚Äù In that ruling, the judge described feeling misled, said they almost cited fake material in a judicial order and said ‚ÄúStrong deterrence is needed to make sure that attorneys don‚Äôt succumb to this easy shortcut.‚Äù&lt;/p&gt;
    &lt;p&gt;Charlotin thinks courts and the public should expect to see an exponential rise in these cases in the future. When he started tracking court filings involving AI and fake cases earlier this year, he encountered a few cases a month. Now he sees a few cases a day. Large language models confidently state falsehoods as facts, particularly when there are no supporting facts.&lt;/p&gt;
    &lt;p&gt;‚ÄúThe harder your legal argument is to make, the more the model will tend to hallucinate, because they will try to please you,‚Äù he said. ‚ÄúThat‚Äôs where the confirmation bias kicks in.‚Äù&lt;/p&gt;
    &lt;p&gt;A May 2024 analysis by Stanford University‚Äôs RegLab found that although three out of four lawyers plan to use generative AI in their practice, some forms of AI generate hallucinations in one out of three queries. Detecting fake material cited in legal filings could get harder as models grow in size.&lt;/p&gt;
    &lt;p&gt;Another tracker of cases where lawyers cite nonexistent legal authority due to use of AI identifies 52 such cases in California and more than 600 nationwide. That amount is expected to increase in the near future because AI innovation is outpacing the education of attorneys, said Nicholas Sanctis, a law student at Capital University Law School in Ohio.&lt;/p&gt;
    &lt;p&gt;Jenny Wondracek, who leads the tracker project, said she expects this trend to get worse because she still regularly encounters lawyers who don‚Äôt know that AI makes things up or believe that legal tech tools can eliminate all fake or false material generated by language models.&lt;/p&gt;
    &lt;p&gt;‚ÄúI think we‚Äôd see a reduction if (lawyers) just understood the basics of the technology,‚Äù she said.&lt;/p&gt;
    &lt;p&gt;Like Charlotin, she suspects there are more instances of made up cases generated by AI in state court filings than in federal courts, but a lack of standard filing methods makes it difficult to verify that. She said she encounters fake cases most often among overburdened attorneys or people who choose to represent themselves in family court.&lt;/p&gt;
    &lt;p&gt;She suspects the number of arguments filed by attorneys that use AI and cite fake cases will continue to go up, but added that not just attorneys engage in the practice. In recent weeks, she‚Äôs documented three instances of judges citing fake legal authority in their decisions.&lt;/p&gt;
    &lt;p&gt;As California considers how to treat generative AI and fake case citations, Wondracek said they can consider approaches taken by other states, such as temporary suspensions, requiring attorneys who get caught to take courses to better understand how to ethically use AI, or requiring them to teach law students how they can avoid making the same mistake.&lt;/p&gt;
    &lt;p&gt;Mark McKenna, codirector of the UCLA Institute of Technology, Law &amp;amp; Policy praised fines like the one against Mostafavi as punishing lawyers for ‚Äúan abdication of your responsibility as a party representing someone.‚Äù He thinks the problem ‚Äúwill get worse before it gets better,‚Äù because there‚Äôs been a rush among law schools and private firms to adopt AI without thinking through the appropriate way to use them.&lt;/p&gt;
    &lt;p&gt;UCLA School of Law professor Andrew Selbst agrees, pointing out that clerks that work for judges are recent law school graduates, and students are getting bombarded with the message that they must use AI or get left behind. Educators and other professionals report feeling similar pressures.&lt;/p&gt;
    &lt;p&gt;‚ÄúThis is getting shoved down all our throats,‚Äù he said. ‚ÄúIt‚Äôs being pushed in firms and schools and a lot of places and we have not yet grappled with the consequences of that.‚Äù&lt;/p&gt;
    &lt;p&gt;For the record: The fine issued to Mostafavi was for $10,000. Due to an editing error, an earlier version of this article had an incorrect figure.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://calmatters.org/economy/technology/2025/09/chatgpt-lawyer-fine-ai-regulation/"/><published>2025-09-22T16:30:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45336282</id><title>Mentra (YC W25) Is Hiring to build smart glasses</title><updated>2025-09-22T19:08:12.856296+00:00</updated><content>&lt;doc fingerprint="c1fe11d2919f8da2"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;We‚Äôre building the OS for smart glasses because we believe glasses are the next personal computer.&lt;/p&gt;
      &lt;p&gt;This year we launched MentraOS, graduated Y Combinator, and raised an $8M seed round to bring smart glasses software and hardware to market.&lt;/p&gt;
      &lt;p&gt;We're a small team (~11 people) shipping thousands of our first pair of smart glasses in December.&lt;/p&gt;
      &lt;p&gt;We need help in engineering (build smart glasses), design (design glasses interfaces), and growth (make glasses go viral).&lt;/p&gt;
      &lt;p&gt;Apply on the job board or if you don't see a fitting role, email me cayden@mentra.glass&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45336282"/><published>2025-09-22T17:01:04+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45336989</id><title>Qwen3-Omni: Native Omni AI Model for Text, Image &amp; Video</title><updated>2025-09-22T19:08:11.946441+00:00</updated><content>&lt;doc fingerprint="a44ecd1b2dbb5a97"&gt;
  &lt;main&gt;
    &lt;p&gt; üíú Qwen Chat | ü§ó Hugging Face | ü§ñ ModelScope | üìë Blog | üìö Cookbooks | üìë Paper &lt;lb/&gt; üñ•Ô∏è Hugging Face Demo | üñ•Ô∏è ModelScope Demo | üí¨ WeChat (ÂæÆ‰ø°) | ü´® Discord | üìë API &lt;/p&gt;
    &lt;p&gt;We release Qwen3-Omni, the natively end-to-end multilingual omni-modal foundation models. It is designed to process diverse inputs including text, images, audio, and video, while delivering real-time streaming responses in both text and natural speech. Click the video below for more information üòÉ&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;2025.09.22: üéâüéâüéâ We have released Qwen3-Omni. For more details, please check our blog!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Qwen3-Omni is the natively end-to-end multilingual omni-modal foundation models. It processes text, images, audio, and video, and delivers real-time streaming responses in both text and natural speech. We introduce several architectural upgrades to improve performance and efficiency. Key features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;State-of-the-art across modalities: Early text-first pretraining and mixed multimodal training provide native multimodal support. While achieving strong audio and audio-video results, unimodal text and image performance does not regress. Reaches SOTA on 22 of 36 audio/video benchmarks and open-source SOTA on 32 of 36; ASR, audio understanding, and voice conversation performance is comparable to Gemini 2.5 Pro.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Multilingual: Supports 119 text languages, 19 speech input languages, and 10 speech output languages.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Speech Input: English, Chinese, Korean, Japanese, German, Russian, Italian, French, Spanish, Portuguese, Malay, Dutch, Indonesian, Turkish, Vietnamese, Cantonese, Arabic, Urdu.&lt;/item&gt;
          &lt;item&gt;Speech Output: English, Chinese, French, German, Russian, Italian, Spanish, Portuguese, Japanese, Korean.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Novel Architecture: MoE-based Thinker‚ÄìTalker design with AuT pretraining for strong general representations, plus a multi-codebook design that drives latency to a minimum.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Real-time Audio/Video Interaction: Low-latency streaming with natural turn-taking and immediate text or speech responses.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flexible Control: Customize behavior via system prompts for fine-grained control and easy adaptation.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Detailed Audio Captioner: Qwen3-Omni-30B-A3B-Captioner is now open source: a general-purpose, highly detailed, low-hallucination audio captioning model that fills a critical gap in the open-source community.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Qwen3-Omni supports a wide range of multimodal application scenarios, covering various domain tasks involving audio, image, video, and audio-visual modalities. Below are several cookbooks demonstrating the usage cases of Qwen3-Omni and these cookbooks include our actual execution logs. You can first follow the QuickStart guide to download the model and install the necessary inference environment dependencies, then run and experiment locally‚Äîtry modifying prompts or switching model types, and enjoy exploring the capabilities of Qwen3-Omni!&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Cookbook&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Open&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio&lt;/cell&gt;
        &lt;cell&gt;Speech Recognition&lt;/cell&gt;
        &lt;cell&gt;Speech recognition, supporting multiple languages and long audio.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Speech Translation&lt;/cell&gt;
        &lt;cell&gt;Speech-to-Text / Speech-to-Speech translation.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Music Analysis&lt;/cell&gt;
        &lt;cell&gt;Detailed analysis and appreciation of any music, including style, genre, rhythm, etc.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Sound Analysis&lt;/cell&gt;
        &lt;cell&gt;Description and analysis of various sound effects and audio signals.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Caption&lt;/cell&gt;
        &lt;cell&gt;Audio captioning, detailed description of any audio input.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Mixed Audio Analysis&lt;/cell&gt;
        &lt;cell&gt;Analysis of mixed audio content, such as speech, music, and environmental sounds.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Visual&lt;/cell&gt;
        &lt;cell&gt;OCR&lt;/cell&gt;
        &lt;cell&gt;OCR for complex images.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Object Grounding&lt;/cell&gt;
        &lt;cell&gt;Target detection and grounding.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Image Question&lt;/cell&gt;
        &lt;cell&gt;Answering arbitrary questions about any image.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Image Math&lt;/cell&gt;
        &lt;cell&gt;Solving complex mathematical problems in images, highlighting the capabilities of the Thinking model.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Description&lt;/cell&gt;
        &lt;cell&gt;Detailed description of video content.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Navigation&lt;/cell&gt;
        &lt;cell&gt;Generating navigation commands from first-person motion videos.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Scene Transition&lt;/cell&gt;
        &lt;cell&gt;Analysis of scene transitions in videos.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio-Visual&lt;/cell&gt;
        &lt;cell&gt;Audio Visual Question&lt;/cell&gt;
        &lt;cell&gt;Answering arbitrary questions in audio-visual scenarios, demonstrating the model's ability to model temporal alignment between audio and video.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Visual Interaction&lt;/cell&gt;
        &lt;cell&gt;Interactive communication with the model using audio-visual inputs, including task specification via audio.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Visual Dialogue&lt;/cell&gt;
        &lt;cell&gt;Conversational interaction with the model using audio-visual inputs, showcasing its capabilities in casual chat and assistant-like behavior.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;Audio Function Call&lt;/cell&gt;
        &lt;cell&gt;Using audio input to perform function calls, enabling agent-like behaviors.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Downstream Task Fine-tuning&lt;/cell&gt;
        &lt;cell&gt;Omni Captioner&lt;/cell&gt;
        &lt;cell&gt;Introduction and capability demonstration of Qwen3-Omni-30B-A3B-Captioner, a downstream fine-tuned model based on Qwen3-Omni-30B-A3B-Instruct, illustrating the strong generalization ability of the Qwen3-Omni foundation model.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Here, we provide several methods to quickly get started with Qwen3-Omni. If you want complete experience of Qwen3-Omni, you can use Hugging Face Transformers. However, since Qwen3-Omni employs an MoE architecture, inference speed with Hugging Face Transformers on MoE models can be very slow. For large-scale invocation or low-latency requirements, we highly recommend using vLLM or performing inference via the DashScope API. We also strongly suggest using our provided Docker image, which includes a complete runtime environment for both Hugging Face Transformers and vLLM. In addition, our cookbooks offer some use cases to show Qwen3-Omni's capabilities. Welcome to learn more!&lt;/p&gt;
    &lt;p&gt;Below is the description of all Qwen3-Omni models. Please select and download the model that fits your needs.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Model Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell&gt;The Instruct model of Qwen3-Omni-30B-A3B, containing both thinker and talker, supporting audio, video, and text input, with audio and text output. For more information, please read the Qwen3-Omni Technical Report.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell&gt;The Thinking model of Qwen3-Omni-30B-A3B, containing the thinker component, equipped with chain-of-thought reasoning, supporting audio, video, and text input, with text output. For more information, please read the Qwen3-Omni Technical Report.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Captioner&lt;/cell&gt;
        &lt;cell&gt;A downstream audio fine-grained caption model fine-tuned from Qwen3-Omni-30B-A3B-Instruct, which produces detailed, low-hallucination captions for arbitrary audio inputs. It contains the thinker, supporting audio input and text output. For more information, you can refer to the model's cookbook or Hugging Face Demo and ModelScope Demo.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;During loading in Hugging Face Transformers or vLLM, model weights will be automatically downloaded based on the model name. However, if your runtime environment is not conducive to downloading weights during execution, you can refer to the following commands to manually download the model weights to a local directory:&lt;/p&gt;
    &lt;code&gt;# Download through ModelScope (recommended for users in Mainland China)
pip install -U modelscope
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Instruct --local_dir ./Qwen3-Omni-30B-A3B-Instruct
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Thinking --local_dir ./Qwen3-Omni-30B-A3B-Thinking
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Captioner --local_dir ./Qwen3-Omni-30B-A3B-Captioner

# Download through Hugging Face
pip install -U "huggingface_hub[cli]"
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Instruct --local-dir ./Qwen3-Omni-30B-A3B-Instruct
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Thinking --local-dir ./Qwen3-Omni-30B-A3B-Thinking
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Captioner --local-dir ./Qwen3-Omni-30B-A3B-Captioner&lt;/code&gt;
    &lt;p&gt;The Hugging Face Transformers code for Qwen3-Omni has been successfully merged, but the PyPI package has not yet been released. Therefore, you need to install it from source using the following command. We strongly recommend that you create a new Python environment or use our Docker to avoid environment runtime issues.&lt;/p&gt;
    &lt;code&gt;# If you already have transformers installed, please uninstall it first, or create a new Python environment
# pip uninstall transformers
pip install git+https://github.com/huggingface/transformers
pip install accelerate&lt;/code&gt;
    &lt;p&gt;We offer a toolkit to help you handle various types of audio and visual input more conveniently, providing an API-like experience. This includes support for base64, URLs, and interleaved audio, images, and videos. You can install it using the following command and make sure your system has &lt;code&gt;ffmpeg&lt;/code&gt; installed:&lt;/p&gt;
    &lt;code&gt;pip install qwen-omni-utils -U&lt;/code&gt;
    &lt;p&gt;Additionally, we recommend using FlashAttention 2 when running with Hugging Face Transformers to reduce GPU memory usage. However, if you are primarily using vLLM for inference, this installation is not necessary, as vLLM includes FlashAttention 2 by default.&lt;/p&gt;
    &lt;code&gt;pip install -U flash-attn --no-build-isolation&lt;/code&gt;
    &lt;p&gt;Also, you should have hardware that is compatible with FlashAttention 2. Read more about it in the official documentation of the FlashAttention repository. FlashAttention 2 can only be used when a model is loaded in &lt;code&gt;torch.float16&lt;/code&gt; or &lt;code&gt;torch.bfloat16&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Here is a code snippet to show you how to use Qwen3-Omni with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;qwen_omni_utils&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;import soundfile as sf

from transformers import Qwen3OmniMoeForConditionalGeneration, Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
# MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    MODEL_PATH,
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)

processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

conversation = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you see and hear? Answer in one short sentence."}
        ],
    },
]

# Set whether to use audio in video
USE_AUDIO_IN_VIDEO = True

# Preparation for inference
text = processor.apply_chat_template(conversation, add_generation_prompt=True, tokenize=False)
audios, images, videos = process_mm_info(conversation, use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = processor(text=text, 
                   audio=audios, 
                   images=images, 
                   videos=videos, 
                   return_tensors="pt", 
                   padding=True, 
                   use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = inputs.to(model.device).to(model.dtype)

# Inference: Generation of the output text and audio
text_ids, audio = model.generate(**inputs, 
                                 speaker="Ethan", 
                                 thinker_return_dict_in_generate=True,
                                 use_audio_in_video=USE_AUDIO_IN_VIDEO)

text = processor.batch_decode(text_ids.sequences[:, inputs["input_ids"].shape[1] :],
                              skip_special_tokens=True,
                              clean_up_tokenization_spaces=False)
print(text)
if audio is not None:
    sf.write(
        "output.wav",
        audio.reshape(-1).detach().cpu().numpy(),
        samplerate=24000,
    )&lt;/code&gt;
    &lt;p&gt;Here are some more advanced usage examples. You can expand the sections below to learn more.&lt;/p&gt;
    &lt;head&gt;Batch inference&lt;/head&gt;
    &lt;p&gt;The model can batch inputs composed of mixed samples of various types such as text, images, audio, and videos as input when &lt;code&gt;return_audio=False&lt;/code&gt; is set. Here is an example.&lt;/p&gt;
    &lt;code&gt;from transformers import Qwen3OmniMoeForConditionalGeneration, Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
# MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    MODEL_PATH,
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
model.disable_talker()

processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

# Conversation with image only
conversation1 = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "text", "text": "What can you see in this image? Answer in one sentence."},
        ]
    }
]

# Conversation with audio only
conversation2 = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you hear in this audio?"},
        ]
    }
]

# Conversation with pure text and system prompt
conversation3 = [
    {
        "role": "system",
        "content": [
            {"type": "text", "text": "You are Qwen-Omni."}
        ],
    },
    {
        "role": "user",
        "content": "Who are you?"
    }
]

# Conversation with mixed media
conversation4 = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
        ],
    }
]

# Combine messages for batch processing
conversations = [conversation1, conversation2, conversation3, conversation4]

# Set whether to use audio in video
USE_AUDIO_IN_VIDEO = True

# Preparation for batch inference
text = processor.apply_chat_template(conversations, add_generation_prompt=True, tokenize=False)
audios, images, videos = process_mm_info(conversations, use_audio_in_video=USE_AUDIO_IN_VIDEO)

inputs = processor(text=text, 
                   audio=audios, 
                   images=images, 
                   videos=videos, 
                   return_tensors="pt", 
                   padding=True, 
                   use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = inputs.to(model.device).to(model.dtype)

# Batch inference does not support returning audio
text_ids, audio = model.generate(**inputs,
                                 return_audio=False,
                                 thinker_return_dict_in_generate=True,
                                 use_audio_in_video=USE_AUDIO_IN_VIDEO)

text = processor.batch_decode(text_ids.sequences[:, inputs["input_ids"].shape[1] :],
                              skip_special_tokens=True,
                              clean_up_tokenization_spaces=False)
print(text)&lt;/code&gt;
    &lt;head&gt;Use audio output or not&lt;/head&gt;
    &lt;p&gt;The model supports both text and audio outputs. If users do not need audio outputs, they can call &lt;code&gt;model.disable_talker()&lt;/code&gt; after initializing the model. This option will save about &lt;code&gt;10GB&lt;/code&gt; of GPU memory, but the &lt;code&gt;return_audio&lt;/code&gt; option for the &lt;code&gt;generate&lt;/code&gt; function will only allow &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    "Qwen/Qwen3-Omni-30B-A3B-Instruct",
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
model.disable_talker()&lt;/code&gt;
    &lt;p&gt;For a more flexible experience, we recommend that users decide whether to return audio when the &lt;code&gt;generate&lt;/code&gt; function is called. If &lt;code&gt;return_audio&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, the model will only return text outputs, resulting in faster text responses.&lt;/p&gt;
    &lt;code&gt;model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    "Qwen/Qwen3-Omni-30B-A3B-Instruct",
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
...
text_ids, _ = model.generate(..., return_audio=False)```

&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Change voice type of output audio&amp;lt;/summary&amp;gt;

Qwen3-Omni supports changing the voice of the output audio. The `"Qwen/Qwen3-Omni-30B-A3B-Instruct"` checkpoint supports three voice types as follows:

| Voice Type | Gender | Description |
|------------|--------|-------------|
| Ethan      | Male   | A bright, upbeat voice with infectious energy and a warm, approachable vibe. |
| Chelsie    | Female | A honeyed, velvety voice that carries a gentle warmth and luminous clarity. |
| Aiden      | Male   | A warm, laid-back American voice with a gentle, boyish charm. |

Users can use the `speaker` parameter of the `generate` function to specify the voice type. By default, if `speaker` is not specified, the voice type is `Ethan`.

```python
text_ids, audio = model.generate(..., speaker="Ethan")&lt;/code&gt;
    &lt;code&gt;text_ids, audio = model.generate(..., speaker="Chelsie")&lt;/code&gt;
    &lt;code&gt;text_ids, audio = model.generate(..., speaker="Aiden")&lt;/code&gt;
    &lt;p&gt;Additionally, for more usage details such as prompt settings, task-specific usage methods, and resource requirements, please refer to Usage Tips and Cookbooks for Usage Cases.&lt;/p&gt;
    &lt;p&gt;We strongly recommend using vLLM for inference and deployment of the Qwen3-Omni series models. Since our code is currently in the pull request stage, and audio output inference support for the Instruct model will be released in the near future, you can follow the commands below to install vLLM from source. Please note that we recommend you create a new Python environment or use our provided Docker to avoid runtime environment conflicts and incompatibilities. For more details on compiling vLLM from source, please refer to the vLLM official documentation.&lt;/p&gt;
    &lt;code&gt;git clone -b qwen3_omni https://github.com/wangxiongts/vllm.git
cd vllm
pip install -r requirements/build.txt
pip install -r requirements/cuda.txt
export VLLM_PRECOMPILED_WHEEL_LOCATION=https://wheels.vllm.ai/a5dd03c1ebc5e4f56f3c9d3dc0436e9c582c978f/vllm-0.9.2-cp38-abi3-manylinux1_x86_64.whl
VLLM_USE_PRECOMPILED=1 pip install -e . -v --no-build-isolation
# If you meet an "Undefined symbol" error while using VLLM_USE_PRECOMPILED=1, please use "pip install -e . -v" to build from source.
# Install the Transformers
pip install git+https://github.com/huggingface/transformers
pip install accelerate
pip install qwen-omni-utils -U
pip install -U flash-attn --no-build-isolation&lt;/code&gt;
    &lt;p&gt;You can use the following code for vLLM inference. The &lt;code&gt;limit_mm_per_prompt&lt;/code&gt; parameter specifies the maximum number of each modality's data allowed per message. Since vLLM needs to pre-allocate GPU memory, larger values will require more GPU memory; if OOM issues occur, try reducing this value. Setting &lt;code&gt;tensor_parallel_size&lt;/code&gt; greater than one enables multi-GPU parallel inference, improving concurrency and throughput. In addition, &lt;code&gt;max_num_seqs&lt;/code&gt; indicates the number of sequences that vLLM processes in parallel during each inference step. A larger value requires more GPU memory but enables higher batch inference speed. For more details, please refer to the vLLM official documentation. Below is a simple example of how to run Qwen3-Omni with vLLM:&lt;/p&gt;
    &lt;code&gt;import os
import torch

from vllm import LLM, SamplingParams
from transformers import Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

if __name__ == '__main__':
    # vLLM engine v1 not supported yet
    os.environ['VLLM_USE_V1'] = '0'

    MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
    # MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

    llm = LLM(
            model=MODEL_PATH, trust_remote_code=True, gpu_memory_utilization=0.95,
            tensor_parallel_size=torch.cuda.device_count(),
            limit_mm_per_prompt={'image': 3, 'video': 3, 'audio': 3},
            max_num_seqs=8,
            max_model_len=32768,
            seed=1234,
    )

    sampling_params = SamplingParams(
        temperature=0.6,
        top_p=0.95,
        top_k=20,
        max_tokens=16384,
    )

    processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

    messages = [
        {
            "role": "user",
            "content": [
                {"type": "video", "video": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/draw.mp4"}
            ], 
        }
    ]

    text = processor.apply_chat_template(
        messages,
        tokenize=False,
        add_generation_prompt=True,
    )
    audios, images, videos = process_mm_info(messages, use_audio_in_video=True)

    inputs = {
        'prompt': text,
        'multi_modal_data': {},
        "mm_processor_kwargs": {
            "use_audio_in_video": True,
        },
    }

    if images is not None:
        inputs['multi_modal_data']['image'] = images
    if videos is not None:
        inputs['multi_modal_data']['video'] = videos
    if audios is not None:
        inputs['multi_modal_data']['audio'] = audios

    outputs = llm.generate([inputs], sampling_params=sampling_params)

    print(outputs[0].outputs[0].text)&lt;/code&gt;
    &lt;p&gt;Here are some more advanced usage examples. You can expand the sections below to learn more.&lt;/p&gt;
    &lt;head&gt;Batch inference&lt;/head&gt;
    &lt;p&gt;Using vLLM enables fast batch inference, which can help you efficiently process large volumes of data or conduct benchmarking. Refer to the following code example:&lt;/p&gt;
    &lt;code&gt;import os
import torch

from vllm import LLM, SamplingParams
from transformers import Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

def build_input(processor, messages, use_audio_in_video):
    text = processor.apply_chat_template(
        messages,
        tokenize=False,
        add_generation_prompt=True,
    )
    audios, images, videos = process_mm_info(messages, use_audio_in_video=use_audio_in_video)

    inputs = {
        'prompt': text,
        'multi_modal_data': {},
        "mm_processor_kwargs": {
            "use_audio_in_video": use_audio_in_video,
        },
    }

    if images is not None:
        inputs['multi_modal_data']['image'] = images
    if videos is not None:
        inputs['multi_modal_data']['video'] = videos
    if audios is not None:
        inputs['multi_modal_data']['audio'] = audios
    
    return inputs

if __name__ == '__main__':
    # vLLM engine v1 not supported yet
    os.environ['VLLM_USE_V1'] = '0'

    MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
    # MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

    llm = LLM(
            model=MODEL_PATH, trust_remote_code=True, gpu_memory_utilization=0.95,
            tensor_parallel_size=torch.cuda.device_count(),
            limit_mm_per_prompt={'image': 3, 'video': 3, 'audio': 3},
            max_num_seqs=8,
            max_model_len=32768,
            seed=1234,
    )

    sampling_params = SamplingParams(
        temperature=0.6,
        top_p=0.95,
        top_k=20,
        max_tokens=16384,
    )

    processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

    # Conversation with image only
    conversation1 = [
        {
            "role": "user",
            "content": [
                {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
                {"type": "text", "text": "What can you see in this image? Answer in one sentence."},
            ]
        }
    ]

    # Conversation with audio only
    conversation2 = [
        {
            "role": "user",
            "content": [
                {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
                {"type": "text", "text": "What can you hear in this audio?"},
            ]
        }
    ]

    # Conversation with pure text and system prompt
    conversation3 = [
        {
            "role": "system",
            "content": [
                {"type": "text", "text": "You are Qwen-Omni."}
            ],
        },
        {
            "role": "user",
            "content": "Who are you? Answer in one sentence."
        }
    ]

    # Conversation with mixed media
    conversation4 = [
        {
            "role": "user",
            "content": [
                {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
                {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/cookbook/asr_fr.wav"},
                {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
            ],
        }
    ]
    
    USE_AUDIO_IN_VIDEO = True

    # Combine messages for batch processing
    conversations = [conversation1, conversation2, conversation3, conversation4]
    inputs = [build_input(processor, messages, USE_AUDIO_IN_VIDEO) for messages in conversations]

    outputs = llm.generate(inputs, sampling_params=sampling_params)

    result = [outputs[i].outputs[0].text for i in range(len(outputs))]
    print(result)&lt;/code&gt;
    &lt;head&gt;vLLM Serve Usage&lt;/head&gt;
    &lt;p&gt;vLLM serve for Qwen3-Omni currently only supports the thinker model. The &lt;code&gt;use_audio_in_video&lt;/code&gt; parameter is not available in vLLM serve; you can handle this by separately passing video and audio inputs for processing. You can start vLLM serve through the following command:&lt;/p&gt;
    &lt;code&gt;# Qwen3-Omni-30B-A3B-Instruct for single GPU
vllm serve Qwen/Qwen3-Omni-30B-A3B-Instruct --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 32768 --allowed-local-media-path / -tp 1
# Qwen3-Omni-30B-A3B-Instruct for multi-GPU (example on 4 GPUs)
vllm serve Qwen/Qwen3-Omni-30B-A3B-Instruct --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 65536 --allowed-local-media-path / -tp 4
# Qwen/Qwen3-Omni-30B-A3B-Thinking for single GPU
vllm serve Qwen/Qwen3-Omni-30B-A3B-Thinking --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 32768 --allowed-local-media-path / -tp 1
# Qwen/Qwen3-Omni-30B-A3B-Thinking for multi-GPU (example on 4 GPUs)
vllm serve Qwen/Qwen3-Omni-30B-A3B-Thinking --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 65536 --allowed-local-media-path / -tp 4&lt;/code&gt;
    &lt;p&gt;Then you can use the chat API as below (via curl, for example):&lt;/p&gt;
    &lt;code&gt;curl http://localhost:8901/v1/chat/completions \
    -H "Content-Type: application/json" \
    -d '{
    "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": [
        {"type": "image_url", "image_url": {"url": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"}},
        {"type": "audio_url", "audio_url": {"url": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"}},
        {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
    ]}
    ]
    }'&lt;/code&gt;
    &lt;p&gt;Additionally, for more usage details such as prompt settings, task-specific usage methods, and resource requirements, please refer to Usage Tips and Cookbooks for Usage Cases.&lt;/p&gt;
    &lt;p&gt;To further explore Qwen3-Omni, we encourage you to try our DashScope API for a faster and more efficient experience. For detailed API information and documentation, please refer to the following:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;API Description&lt;/cell&gt;
        &lt;cell role="head"&gt;API Documentation (Mainland China)&lt;/cell&gt;
        &lt;cell role="head"&gt;API Documentation (International)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Offline API for Qwen3-Omni-Flash, including Instruct and Thinking models&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/qwen-omni&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/en/model-studio/qwen-omni&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Real-time API for Qwen3-Omni-Flash, supporting end-to-end real-time interaction&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/realtime&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/en/model-studio/realtime&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;API for Qwen3-Omni-30B-A3B-Captioner model&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/qwen3-omni-captioner&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/zh/model-studio/qwen3-omni-captioner&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Precision&lt;/cell&gt;
        &lt;cell role="head"&gt;15s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;30s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;60s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;120s Video&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell&gt;BF16&lt;/cell&gt;
        &lt;cell&gt;78.85 GB&lt;/cell&gt;
        &lt;cell&gt;88.52 GB&lt;/cell&gt;
        &lt;cell&gt;107.74 GB&lt;/cell&gt;
        &lt;cell&gt;144.81 GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell&gt;BF16&lt;/cell&gt;
        &lt;cell&gt;68.74 GB&lt;/cell&gt;
        &lt;cell&gt;77.79 GB&lt;/cell&gt;
        &lt;cell&gt;95.76 GB&lt;/cell&gt;
        &lt;cell&gt;131.65 GB&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note: The table above presents the theoretical minimum memory requirements for inference with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;BF16&lt;/code&gt; precision, tested with &lt;code&gt;attn_implementation="flash_attention_2"&lt;/code&gt;. The Instruct model includes both the thinker and talker components, whereas the Thinking model includes only the thinker part.&lt;/p&gt;
    &lt;p&gt;When using Qwen3-Omni for audio-visual multimodal interaction, where the input consists of a video and its corresponding audio (with the audio serving as a query), we recommend using the following system prompt. This setup helps the model maintain high reasoning capability while better assuming interactive roles such as a smart assistant. Additionally, the text generated by the thinker will be more readable, with a natural, conversational tone and without complex formatting that is difficult to vocalize, leading to more stable and fluent audio output from the talker. You can customize the &lt;code&gt;user_system_prompt&lt;/code&gt; field in the system prompt to include character settings or other role-specific descriptions as needed.&lt;/p&gt;
    &lt;code&gt;user_system_prompt = "You are Qwen-Omni, a smart voice assistant created by Alibaba Qwen."
message = {
    "role": "system",
    "content": [
          {"type": "text", "text": f"{user_system_prompt} You are a virtual voice assistant with no gender or age.\nYou are communicating with the user.\nIn user messages, ‚ÄúI/me/my/we/our‚Äù refer to the user and ‚Äúyou/your‚Äù refer to the assistant. In your replies, address the user as ‚Äúyou/your‚Äù and yourself as ‚ÄúI/me/my‚Äù; never mirror the user‚Äôs pronouns‚Äîalways shift perspective. Keep original pronouns only in direct quotes; if a reference is unclear, ask a brief clarifying question.\nInteract with users using short(no more than 50 words), brief, straightforward language, maintaining a natural tone.\nNever use formal phrasing, mechanical expressions, bullet points, overly structured language. \nYour output must consist only of the spoken content you want the user to hear. \nDo not include any descriptions of actions, emotions, sounds, or voice changes. \nDo not use asterisks, brackets, parentheses, or any other symbols to indicate tone or actions. \nYou must answer users' audio or text questions, do not directly describe the video content. \nYou should communicate in the same language strictly as the user unless they request otherwise.\nWhen you are uncertain (e.g., you can't see/hear clearly, don't understand, or the user makes a comment rather than asking a question), use appropriate questions to guide the user to continue the conversation.\nKeep replies concise and conversational, as if talking face-to-face."}
    ]
}
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/code&gt; model is primarily designed for understanding and interacting with multimodal inputs, including text, audio, image, and video. To achieve optimal performance, we recommend that users include an explicit textual instruction or task description in each round of dialogue alongside the multimodal input. This helps clarify the intent and significantly enhances the model's ability to leverage its reasoning capabilities. For example:&lt;/p&gt;
    &lt;code&gt;messages = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "/path/to/audio.wav"},
            {"type": "image", "image": "/path/to/image.png"},
            {"type": "video", "video": "/path/to/video.mp4"},
            {"type": "text", "text": "Analyze this audio, image, and video together."},
        ], 
    }
]&lt;/code&gt;
    &lt;p&gt;In multimodal interaction, user-provided videos are often accompanied by audio (such as spoken questions or sounds from events in the video). This information helps the model provide a better interactive experience. We provide the following options for users to decide whether to use the audio from a video.&lt;/p&gt;
    &lt;code&gt;# In data preprocessing
audios, images, videos = process_mm_info(messages, use_audio_in_video=True)&lt;/code&gt;
    &lt;code&gt;# For Transformers
text = processor.apply_chat_template(messages, add_generation_prompt=True, tokenize=False)
inputs = processor(text=text, audio=audios, images=images, videos=videos, return_tensors="pt", 
                   padding=True, use_audio_in_video=True)
text_ids, audio = model.generate(..., use_audio_in_video=True)

# For vLLM
text = processor.apply_chat_template(messages, add_generation_prompt=True, tokenize=False)
inputs = {
    'prompt': text,
    'multi_modal_data': {},
    "mm_processor_kwargs": {
        "use_audio_in_video": True,
    },
}&lt;/code&gt;
    &lt;p&gt;It is worth noting that during a multi-round conversation, the &lt;code&gt;use_audio_in_video&lt;/code&gt; parameter must be set consistently across these steps; otherwise, unexpected results may occur.&lt;/p&gt;
    &lt;p&gt;Without local deployment, you can experience an online web demo directly by visiting our Hugging Face Spaces and ModelScope Studio. This includes quick hands-on experiences for Qwen3-Omni-Realtime, Qwen3-Omni (Instruct and Thinking), and Qwen3-Omni-30B-A3B-Captioner.&lt;/p&gt;
    &lt;p&gt;Real-time streaming interaction with Qwen3-Omni is available now. Please visit Qwen Chat and select the voice/video call option in the chat box to experience it.&lt;/p&gt;
    &lt;p&gt;In this section, we provide instructions for users to build a web-based user interface (UI) demo. This UI demo allows users to interact with the model through a web browser. Follow the steps below to get start :)&lt;/p&gt;
    &lt;p&gt;Before you begin, we strongly recommend that you refer to the Installation section in vLLM Usage to set up your environment, which will allow you to seamlessly use both the vLLM and Transformers backends. However, if you only intend to use the Transformers backend (note that this will result in significantly slower inference), please follow the installation instructions in Transformers Usage. That said, we still highly recommend using our Docker image to avoid potential environment-related issues. Additionally, if you are running locally, make sure your system has &lt;code&gt;ffmpeg&lt;/code&gt; installed and you install the following dependencies:&lt;/p&gt;
    &lt;code&gt;pip install gradio==5.44.1 gradio_client==1.12.1 soundfile==0.13.1&lt;/code&gt;
    &lt;p&gt;Once the required packages are installed, you can launch the web demo using the following commands. These commands will start a web server and provide you with a link to access the UI in your web browser. You can run &lt;code&gt;python web_demo.py --help&lt;/code&gt; and &lt;code&gt;python web_demo_captioner.py --help&lt;/code&gt; to learn about more options.&lt;/p&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Instruct with vLLM backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct
# For Qwen3-Omni-30B-A3B-Instruct with Transformers backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --use-transformers --generate-audio
# For Qwen3-Omni-30B-A3B-Instruct with Transformers backend and FlashAttention support
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --use-transformers --generate-audio --flash-attn2&lt;/code&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Thinking with vLLM backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking
# For Qwen3-Omni-30B-A3B-Thinking with Transformers backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking --use-transformers
# For Qwen3-Omni-30B-A3B-Thinking with Transformers backend and FlashAttention support
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking --use-transformers --flash-attn2&lt;/code&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Captioner with vLLM backend
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner
# For Qwen3-Omni-30B-A3B-Captioner with Transformers backend
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner --use-transformers
# For Qwen3-Omni-30B-A3B-Captioner with Transformers backend and FlashAttention support
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner --use-transformers --flash-attn2&lt;/code&gt;
    &lt;p&gt;After running the command, you‚Äôll see a link generated in the terminal similar to this:&lt;/p&gt;
    &lt;code&gt;Running on local: http://127.0.0.1:8901/
&lt;/code&gt;
    &lt;p&gt;If you are running locally, copy this link and paste it into your browser to access the web UI. If you are running on a server or in a &lt;code&gt;docker&lt;/code&gt; container, please configure the address according to the server's actual IP, or set up port forwarding where necessary. For instructions on how to configure port forwarding from the official &lt;code&gt;docker&lt;/code&gt; container to the host machine, please refer to here.&lt;/p&gt;
    &lt;p&gt;To simplify the deployment process, we provide Docker images with pre-built environments: qwenllm/qwen3-omni. You only need to install the driver and download model files to launch the demos. Please refer to the guide to install the NVIDIA Container Toolkit, ensuring that your Docker can access the GPU. For users in mainland China who may have difficulty accessing Docker Hub, you can use mirror acceleration services to pull the images. First, run the following command to pull and initialize the container:&lt;/p&gt;
    &lt;code&gt;LOCAL_WORKDIR=/path/to/your/workspace
HOST_PORT=8901
CONTAINER_PORT=80
docker run --gpus all --name qwen3-omni \
    -v /var/run/docker.sock:/var/run/docker.sock -p $HOST_PORT:$CONTAINER_PORT \
    --mount type=bind,source=$LOCAL_WORKDIR,target=/data/shared/Qwen3-Omni \
    --shm-size=4gb \
    -it qwenllm/qwen3-omni:3-cu124&lt;/code&gt;
    &lt;p&gt;After executing the command, you will enter the bash shell of the container. Your local model and data directory (please replace &lt;code&gt;/path/to/your/workspace&lt;/code&gt; with the actual path) will be mounted to the container's internal path &lt;code&gt;/data/shared/Qwen3-Omni&lt;/code&gt;. The host's port &lt;code&gt;8901&lt;/code&gt; is mapped to port &lt;code&gt;80&lt;/code&gt; in the container, meaning you can access the service inside the container by visiting port &lt;code&gt;8901&lt;/code&gt; on the host machine.&lt;/p&gt;
    &lt;p&gt;Please note that services inside the container must be started with the IP &lt;code&gt;0.0.0.0&lt;/code&gt; to ensure proper port forwarding. For example:&lt;/p&gt;
    &lt;code&gt;# Run this command inside the Docker container
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --server-port 80 --server-name 0.0.0.0&lt;/code&gt;
    &lt;p&gt;For more ways to launch the web demo, please refer to Launch Local Web UI Demo. If you exit the container, you can re-enter it using the following command:&lt;/p&gt;
    &lt;code&gt;docker start qwen3-omni
docker exec -it qwen3-omni bash&lt;/code&gt;
    &lt;p&gt;Or if you want to completely remove the container, please run:&lt;/p&gt;
    &lt;code&gt;docker rm -f qwen3-omni&lt;/code&gt;
    &lt;p&gt;Qwen3-Omni maintains state-of-the-art performance on text and visual modalities without degradation relative to same-size single-model Qwen counterparts. Across 36 audio and audio-visual benchmarks, it achieves open-source SOTA on 32 and sets the SOTA on 22, outperforming strong closed-source systems such as Gemini 2.5 Pro and GPT-4o.&lt;/p&gt;
    &lt;head&gt;Text -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;GPT-4o-0327&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-235B-A22B&lt;p&gt;Non Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-30B-A3B-Instruct-2507&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;General&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MMLU-Redux&lt;/cell&gt;
        &lt;cell&gt;91.3&lt;/cell&gt;
        &lt;cell&gt;89.2&lt;/cell&gt;
        &lt;cell&gt;89.3&lt;/cell&gt;
        &lt;cell&gt;86.6&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GPQA&lt;/cell&gt;
        &lt;cell&gt;66.9&lt;/cell&gt;
        &lt;cell&gt;62.9&lt;/cell&gt;
        &lt;cell&gt;70.4&lt;/cell&gt;
        &lt;cell&gt;69.6&lt;/cell&gt;
        &lt;cell&gt;69.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Reasoning&lt;/cell&gt;
        &lt;cell&gt;AIME25&lt;/cell&gt;
        &lt;cell&gt;26.7&lt;/cell&gt;
        &lt;cell&gt;24.7&lt;/cell&gt;
        &lt;cell&gt;61.3&lt;/cell&gt;
        &lt;cell&gt;65.0&lt;/cell&gt;
        &lt;cell&gt;65.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;ZebraLogic&lt;/cell&gt;
        &lt;cell&gt;52.6&lt;/cell&gt;
        &lt;cell&gt;37.7&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
        &lt;cell&gt;76.0&lt;/cell&gt;
        &lt;cell&gt;76.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Code&lt;/cell&gt;
        &lt;cell&gt;MultiPL-E&lt;/cell&gt;
        &lt;cell&gt;82.7&lt;/cell&gt;
        &lt;cell&gt;79.3&lt;/cell&gt;
        &lt;cell&gt;83.8&lt;/cell&gt;
        &lt;cell&gt;81.4&lt;/cell&gt;
        &lt;cell&gt;81.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Alignment&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;83.2&lt;/cell&gt;
        &lt;cell&gt;84.7&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
        &lt;cell&gt;81.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Creative Writing v3&lt;/cell&gt;
        &lt;cell&gt;84.9&lt;/cell&gt;
        &lt;cell&gt;80.4&lt;/cell&gt;
        &lt;cell&gt;86.0&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;81.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;WritingBench&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;77.0&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;82.6&lt;/cell&gt;
        &lt;cell&gt;83.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;BFCL-v3&lt;/cell&gt;
        &lt;cell&gt;66.5&lt;/cell&gt;
        &lt;cell&gt;68.0&lt;/cell&gt;
        &lt;cell&gt;65.1&lt;/cell&gt;
        &lt;cell&gt;64.4&lt;/cell&gt;
        &lt;cell&gt;65.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Multilingual&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MultiIF&lt;/cell&gt;
        &lt;cell&gt;70.4&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;67.9&lt;/cell&gt;
        &lt;cell&gt;64.0&lt;/cell&gt;
        &lt;cell&gt;64.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;PolyMATH&lt;/cell&gt;
        &lt;cell&gt;25.5&lt;/cell&gt;
        &lt;cell&gt;27.0&lt;/cell&gt;
        &lt;cell&gt;43.1&lt;/cell&gt;
        &lt;cell&gt;37.9&lt;/cell&gt;
        &lt;cell&gt;39.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;p&gt;Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-235B-A22B&lt;p&gt;Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-30B-A3B-Thinking-2507&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;General&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MMLU-Redux&lt;/cell&gt;
        &lt;cell&gt;92.1&lt;/cell&gt;
        &lt;cell&gt;92.7&lt;/cell&gt;
        &lt;cell&gt;91.4&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GPQA&lt;/cell&gt;
        &lt;cell&gt;82.8&lt;/cell&gt;
        &lt;cell&gt;71.1&lt;/cell&gt;
        &lt;cell&gt;73.4&lt;/cell&gt;
        &lt;cell&gt;73.1&lt;/cell&gt;
        &lt;cell&gt;73.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Reasoning&lt;/cell&gt;
        &lt;cell&gt;AIME25&lt;/cell&gt;
        &lt;cell&gt;72.0&lt;/cell&gt;
        &lt;cell&gt;81.5&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;73.7&lt;/cell&gt;
        &lt;cell&gt;74.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;LiveBench 20241125&lt;/cell&gt;
        &lt;cell&gt;74.3&lt;/cell&gt;
        &lt;cell&gt;77.1&lt;/cell&gt;
        &lt;cell&gt;76.8&lt;/cell&gt;
        &lt;cell&gt;71.8&lt;/cell&gt;
        &lt;cell&gt;70.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Code&lt;/cell&gt;
        &lt;cell&gt;MultiPL-E&lt;/cell&gt;
        &lt;cell&gt;84.5&lt;/cell&gt;
        &lt;cell&gt;79.9&lt;/cell&gt;
        &lt;cell&gt;81.3&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Alignment&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;83.4&lt;/cell&gt;
        &lt;cell&gt;88.9&lt;/cell&gt;
        &lt;cell&gt;85.1&lt;/cell&gt;
        &lt;cell&gt;85.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Arena-Hard v2&lt;/cell&gt;
        &lt;cell&gt;56.7&lt;/cell&gt;
        &lt;cell&gt;61.5&lt;/cell&gt;
        &lt;cell&gt;56.0&lt;/cell&gt;
        &lt;cell&gt;55.1&lt;/cell&gt;
        &lt;cell&gt;57.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Creative Writing v3&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;84.6&lt;/cell&gt;
        &lt;cell&gt;84.4&lt;/cell&gt;
        &lt;cell&gt;82.5&lt;/cell&gt;
        &lt;cell&gt;83.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;WritingBench&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;80.3&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;85.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;BFCL-v3&lt;/cell&gt;
        &lt;cell&gt;68.6&lt;/cell&gt;
        &lt;cell&gt;70.8&lt;/cell&gt;
        &lt;cell&gt;72.4&lt;/cell&gt;
        &lt;cell&gt;63.2&lt;/cell&gt;
        &lt;cell&gt;64.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Multilingual&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MultiIF&lt;/cell&gt;
        &lt;cell&gt;74.4&lt;/cell&gt;
        &lt;cell&gt;71.9&lt;/cell&gt;
        &lt;cell&gt;76.4&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;73.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;PolyMATH&lt;/cell&gt;
        &lt;cell&gt;49.8&lt;/cell&gt;
        &lt;cell&gt;54.7&lt;/cell&gt;
        &lt;cell&gt;52.6&lt;/cell&gt;
        &lt;cell&gt;47.1&lt;/cell&gt;
        &lt;cell&gt;48.7&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Audio -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;Seed-ASR&lt;/cell&gt;
        &lt;cell role="head"&gt;Voxtral-Mini&lt;/cell&gt;
        &lt;cell role="head"&gt;Voxtral-Small&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT-4o-Transcribe&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;EN &amp;amp; ZH ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Wenetspeech&lt;p&gt;net | meeting&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;4.66 | 5.69&lt;/cell&gt;
        &lt;cell&gt;24.30 | 31.53&lt;/cell&gt;
        &lt;cell&gt;20.33 | 26.08&lt;/cell&gt;
        &lt;cell&gt;15.30 | 32.27&lt;/cell&gt;
        &lt;cell&gt;14.43 | 13.47&lt;/cell&gt;
        &lt;cell&gt;5.91 | 7.65&lt;/cell&gt;
        &lt;cell&gt;4.69 | 5.89&lt;/cell&gt;
        &lt;cell&gt;4.62 | 5.75&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Librispeech&lt;p&gt;clean | other&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;1.58 | 2.84&lt;/cell&gt;
        &lt;cell&gt;1.88 | 4.12&lt;/cell&gt;
        &lt;cell&gt;1.56 | 3.30&lt;/cell&gt;
        &lt;cell&gt;1.39 | 3.75&lt;/cell&gt;
        &lt;cell&gt;2.89 | 3.56&lt;/cell&gt;
        &lt;cell&gt;1.74 | 3.45&lt;/cell&gt;
        &lt;cell&gt;1.22 | 2.48&lt;/cell&gt;
        &lt;cell&gt;1.27 | 2.44&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CV15-en&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;9.47&lt;/cell&gt;
        &lt;cell&gt;7.79&lt;/cell&gt;
        &lt;cell&gt;10.01&lt;/cell&gt;
        &lt;cell&gt;9.89&lt;/cell&gt;
        &lt;cell&gt;7.61&lt;/cell&gt;
        &lt;cell&gt;6.05&lt;/cell&gt;
        &lt;cell&gt;5.94&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CV15-zh&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;24.67&lt;/cell&gt;
        &lt;cell&gt;19.30&lt;/cell&gt;
        &lt;cell&gt;9.84&lt;/cell&gt;
        &lt;cell&gt;8.00&lt;/cell&gt;
        &lt;cell&gt;5.13&lt;/cell&gt;
        &lt;cell&gt;4.31&lt;/cell&gt;
        &lt;cell&gt;4.28&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-en&lt;/cell&gt;
        &lt;cell&gt;3.40&lt;/cell&gt;
        &lt;cell&gt;3.96&lt;/cell&gt;
        &lt;cell&gt;3.77&lt;/cell&gt;
        &lt;cell&gt;3.32&lt;/cell&gt;
        &lt;cell&gt;2.94&lt;/cell&gt;
        &lt;cell&gt;3.77&lt;/cell&gt;
        &lt;cell&gt;2.72&lt;/cell&gt;
        &lt;cell&gt;2.74&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-zh&lt;/cell&gt;
        &lt;cell&gt;2.69&lt;/cell&gt;
        &lt;cell&gt;12.22&lt;/cell&gt;
        &lt;cell&gt;7.98&lt;/cell&gt;
        &lt;cell&gt;2.44&lt;/cell&gt;
        &lt;cell&gt;2.71&lt;/cell&gt;
        &lt;cell&gt;2.54&lt;/cell&gt;
        &lt;cell&gt;2.20&lt;/cell&gt;
        &lt;cell&gt;2.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Multilingual ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-avg&lt;p&gt;(19 lang)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;15.67&lt;/cell&gt;
        &lt;cell&gt;8.09&lt;/cell&gt;
        &lt;cell&gt;4.48&lt;/cell&gt;
        &lt;cell&gt;5.55&lt;/cell&gt;
        &lt;cell&gt;14.04&lt;/cell&gt;
        &lt;cell&gt;5.33&lt;/cell&gt;
        &lt;cell&gt;5.31&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Lyric ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MIR-1K (vocal-only)&lt;/cell&gt;
        &lt;cell&gt;6.45&lt;/cell&gt;
        &lt;cell&gt;23.33&lt;/cell&gt;
        &lt;cell&gt;18.73&lt;/cell&gt;
        &lt;cell&gt;11.87&lt;/cell&gt;
        &lt;cell&gt;9.85&lt;/cell&gt;
        &lt;cell&gt;8.15&lt;/cell&gt;
        &lt;cell&gt;5.90&lt;/cell&gt;
        &lt;cell&gt;5.85&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Opencpop-test&lt;/cell&gt;
        &lt;cell&gt;2.98&lt;/cell&gt;
        &lt;cell&gt;31.01&lt;/cell&gt;
        &lt;cell&gt;16.06&lt;/cell&gt;
        &lt;cell&gt;7.93&lt;/cell&gt;
        &lt;cell&gt;6.49&lt;/cell&gt;
        &lt;cell&gt;2.84&lt;/cell&gt;
        &lt;cell&gt;1.54&lt;/cell&gt;
        &lt;cell&gt;2.02&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;S2TT (BLEU)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-en2xx&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;30.35&lt;/cell&gt;
        &lt;cell&gt;37.85&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;39.25&lt;/cell&gt;
        &lt;cell&gt;29.22&lt;/cell&gt;
        &lt;cell&gt;37.50&lt;/cell&gt;
        &lt;cell&gt;36.22&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-xx2en&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;27.54&lt;/cell&gt;
        &lt;cell&gt;32.81&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;35.41&lt;/cell&gt;
        &lt;cell&gt;28.61&lt;/cell&gt;
        &lt;cell&gt;31.08&lt;/cell&gt;
        &lt;cell&gt;30.71&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-zh2xx&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;17.03&lt;/cell&gt;
        &lt;cell&gt;22.05&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;26.63&lt;/cell&gt;
        &lt;cell&gt;17.97&lt;/cell&gt;
        &lt;cell&gt;25.17&lt;/cell&gt;
        &lt;cell&gt;25.10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Fleurs-xx2zh&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;28.75&lt;/cell&gt;
        &lt;cell&gt;34.82&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;37.50&lt;/cell&gt;
        &lt;cell&gt;27.68&lt;/cell&gt;
        &lt;cell&gt;33.13&lt;/cell&gt;
        &lt;cell&gt;31.19&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;GPT-4o-Audio&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;VoiceBench&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;AlpacaEval&lt;/cell&gt;
        &lt;cell&gt;95.6&lt;/cell&gt;
        &lt;cell&gt;96.1&lt;/cell&gt;
        &lt;cell&gt;94.3&lt;/cell&gt;
        &lt;cell&gt;89.9&lt;/cell&gt;
        &lt;cell&gt;94.8&lt;/cell&gt;
        &lt;cell&gt;96.4&lt;/cell&gt;
        &lt;cell&gt;95.4&lt;/cell&gt;
        &lt;cell&gt;96.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CommonEval&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;88.3&lt;/cell&gt;
        &lt;cell&gt;88.4&lt;/cell&gt;
        &lt;cell&gt;76.7&lt;/cell&gt;
        &lt;cell&gt;90.8&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;91.0&lt;/cell&gt;
        &lt;cell&gt;90.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;WildVoice&lt;/cell&gt;
        &lt;cell&gt;91.6&lt;/cell&gt;
        &lt;cell&gt;92.1&lt;/cell&gt;
        &lt;cell&gt;93.4&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;91.6&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;92.3&lt;/cell&gt;
        &lt;cell&gt;90.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;SD-QA&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;84.5&lt;/cell&gt;
        &lt;cell&gt;90.1&lt;/cell&gt;
        &lt;cell&gt;56.4&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;78.1&lt;/cell&gt;
        &lt;cell&gt;76.8&lt;/cell&gt;
        &lt;cell&gt;78.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MMSU&lt;/cell&gt;
        &lt;cell&gt;80.3&lt;/cell&gt;
        &lt;cell&gt;66.1&lt;/cell&gt;
        &lt;cell&gt;71.1&lt;/cell&gt;
        &lt;cell&gt;61.7&lt;/cell&gt;
        &lt;cell&gt;68.1&lt;/cell&gt;
        &lt;cell&gt;83.0&lt;/cell&gt;
        &lt;cell&gt;68.4&lt;/cell&gt;
        &lt;cell&gt;84.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;OpenBookQA&lt;/cell&gt;
        &lt;cell&gt;89.2&lt;/cell&gt;
        &lt;cell&gt;56.9&lt;/cell&gt;
        &lt;cell&gt;92.3&lt;/cell&gt;
        &lt;cell&gt;80.9&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
        &lt;cell&gt;94.3&lt;/cell&gt;
        &lt;cell&gt;91.4&lt;/cell&gt;
        &lt;cell&gt;95.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;BBH&lt;/cell&gt;
        &lt;cell&gt;84.1&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;92.6&lt;/cell&gt;
        &lt;cell&gt;66.7&lt;/cell&gt;
        &lt;cell&gt;80.4&lt;/cell&gt;
        &lt;cell&gt;88.9&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;89.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;76.0&lt;/cell&gt;
        &lt;cell&gt;83.8&lt;/cell&gt;
        &lt;cell&gt;85.7&lt;/cell&gt;
        &lt;cell&gt;53.5&lt;/cell&gt;
        &lt;cell&gt;77.8&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;75.2&lt;/cell&gt;
        &lt;cell&gt;80.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;AdvBench&lt;/cell&gt;
        &lt;cell&gt;98.7&lt;/cell&gt;
        &lt;cell&gt;98.9&lt;/cell&gt;
        &lt;cell&gt;98.1&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;99.3&lt;/cell&gt;
        &lt;cell&gt;97.2&lt;/cell&gt;
        &lt;cell&gt;99.4&lt;/cell&gt;
        &lt;cell&gt;98.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Overall&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
        &lt;cell&gt;83.4&lt;/cell&gt;
        &lt;cell&gt;89.6&lt;/cell&gt;
        &lt;cell&gt;73.6&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;85.6&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Audio Reasoning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MMAU-v05.15.25&lt;/cell&gt;
        &lt;cell&gt;62.5&lt;/cell&gt;
        &lt;cell&gt;71.8&lt;/cell&gt;
        &lt;cell&gt;77.4&lt;/cell&gt;
        &lt;cell&gt;65.5&lt;/cell&gt;
        &lt;cell&gt;77.5&lt;/cell&gt;
        &lt;cell&gt;75.4&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;76.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MMSU&lt;/cell&gt;
        &lt;cell&gt;56.4&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;62.6&lt;/cell&gt;
        &lt;cell&gt;69.0&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;71.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Best Specialist&lt;p&gt;Models&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT-4o-Audio&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;RUL-MuchoMusic&lt;/cell&gt;
        &lt;cell&gt;47.6 (Audio Flamingo 3)&lt;/cell&gt;
        &lt;cell&gt;36.1&lt;/cell&gt;
        &lt;cell&gt;49.4&lt;/cell&gt;
        &lt;cell&gt;47.3&lt;/cell&gt;
        &lt;cell&gt;52.0&lt;/cell&gt;
        &lt;cell&gt;52.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GTZAN&lt;p&gt;Acc.&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;87.9 (CLaMP 3)&lt;/cell&gt;
        &lt;cell&gt;76.5&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
        &lt;cell&gt;81.7&lt;/cell&gt;
        &lt;cell&gt;93.0&lt;/cell&gt;
        &lt;cell&gt;93.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Genre&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;35.8 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;25.3&lt;/cell&gt;
        &lt;cell&gt;32.6&lt;/cell&gt;
        &lt;cell&gt;32.5&lt;/cell&gt;
        &lt;cell&gt;39.0&lt;/cell&gt;
        &lt;cell&gt;39.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Mood/Theme&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;10.9 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;11.3&lt;/cell&gt;
        &lt;cell&gt;14.1&lt;/cell&gt;
        &lt;cell&gt;8.9&lt;/cell&gt;
        &lt;cell&gt;21.0&lt;/cell&gt;
        &lt;cell&gt;21.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Instrument&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;39.8 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;34.2&lt;/cell&gt;
        &lt;cell&gt;33.0&lt;/cell&gt;
        &lt;cell&gt;22.6&lt;/cell&gt;
        &lt;cell&gt;40.5&lt;/cell&gt;
        &lt;cell&gt;40.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Top50&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;33.2 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;25.0&lt;/cell&gt;
        &lt;cell&gt;26.1&lt;/cell&gt;
        &lt;cell&gt;21.6&lt;/cell&gt;
        &lt;cell&gt;36.7&lt;/cell&gt;
        &lt;cell&gt;36.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MagnaTagATune&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;41.6 (MuQ)&lt;/cell&gt;
        &lt;cell&gt;29.2&lt;/cell&gt;
        &lt;cell&gt;28.1&lt;/cell&gt;
        &lt;cell&gt;30.1&lt;/cell&gt;
        &lt;cell&gt;44.3&lt;/cell&gt;
        &lt;cell&gt;46.8&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Vision -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT4-o&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.0-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-VL&lt;p&gt;72B&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B&lt;p&gt;-Instruct&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash&lt;p&gt;-Instruct&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;General Visual Question Answering&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMStar&lt;/cell&gt;
        &lt;cell&gt;64.7&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;70.8&lt;/cell&gt;
        &lt;cell&gt;68.5&lt;/cell&gt;
        &lt;cell&gt;69.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;HallusionBench&lt;/cell&gt;
        &lt;cell&gt;55.0&lt;/cell&gt;
        &lt;cell&gt;56.3&lt;/cell&gt;
        &lt;cell&gt;55.2&lt;/cell&gt;
        &lt;cell&gt;59.7&lt;/cell&gt;
        &lt;cell&gt;58.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MM-MT-Bench&lt;/cell&gt;
        &lt;cell&gt;7.7&lt;/cell&gt;
        &lt;cell&gt;6.7&lt;/cell&gt;
        &lt;cell&gt;7.6&lt;/cell&gt;
        &lt;cell&gt;7.4&lt;/cell&gt;
        &lt;cell&gt;7.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Math &amp;amp; STEM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMMU_val&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;71.3&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMMU_pro&lt;/cell&gt;
        &lt;cell&gt;51.9&lt;/cell&gt;
        &lt;cell&gt;56.1&lt;/cell&gt;
        &lt;cell&gt;51.1&lt;/cell&gt;
        &lt;cell&gt;57.0&lt;/cell&gt;
        &lt;cell&gt;57.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MathVista_mini&lt;/cell&gt;
        &lt;cell&gt;63.8&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;74.8&lt;/cell&gt;
        &lt;cell&gt;75.9&lt;/cell&gt;
        &lt;cell&gt;77.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MathVision_full&lt;/cell&gt;
        &lt;cell&gt;30.4&lt;/cell&gt;
        &lt;cell&gt;48.6&lt;/cell&gt;
        &lt;cell&gt;38.1&lt;/cell&gt;
        &lt;cell&gt;56.3&lt;/cell&gt;
        &lt;cell&gt;58.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Documentation Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;AI2D&lt;/cell&gt;
        &lt;cell&gt;84.6&lt;/cell&gt;
        &lt;cell&gt;86.7&lt;/cell&gt;
        &lt;cell&gt;88.7&lt;/cell&gt;
        &lt;cell&gt;85.2&lt;/cell&gt;
        &lt;cell&gt;86.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;ChartQA_test&lt;/cell&gt;
        &lt;cell&gt;86.7&lt;/cell&gt;
        &lt;cell&gt;64.6&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
        &lt;cell&gt;87.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Counting&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;CountBench&lt;/cell&gt;
        &lt;cell&gt;87.9&lt;/cell&gt;
        &lt;cell&gt;91.2&lt;/cell&gt;
        &lt;cell&gt;93.6&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Video Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Video-MME&lt;/cell&gt;
        &lt;cell&gt;71.9&lt;/cell&gt;
        &lt;cell&gt;72.4&lt;/cell&gt;
        &lt;cell&gt;73.3&lt;/cell&gt;
        &lt;cell&gt;70.5&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;LVBench&lt;/cell&gt;
        &lt;cell&gt;30.8&lt;/cell&gt;
        &lt;cell&gt;57.9&lt;/cell&gt;
        &lt;cell&gt;47.3&lt;/cell&gt;
        &lt;cell&gt;50.2&lt;/cell&gt;
        &lt;cell&gt;51.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MLVU&lt;/cell&gt;
        &lt;cell&gt;64.6&lt;/cell&gt;
        &lt;cell&gt;71.0&lt;/cell&gt;
        &lt;cell&gt;74.6&lt;/cell&gt;
        &lt;cell&gt;75.2&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-flash-thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;InternVL-3.5-241B-A28B&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;General Visual Question Answering&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMStar&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;77.9&lt;/cell&gt;
        &lt;cell&gt;74.9&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;HallusionBench&lt;/cell&gt;
        &lt;cell&gt;61.1&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
        &lt;cell&gt;62.8&lt;/cell&gt;
        &lt;cell&gt;63.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MM-MT-Bench&lt;/cell&gt;
        &lt;cell&gt;7.8&lt;/cell&gt;
        &lt;cell&gt;‚Äì&lt;/cell&gt;
        &lt;cell&gt;8.0&lt;/cell&gt;
        &lt;cell&gt;8.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Math &amp;amp; STEM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMMU_val&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;75.6&lt;/cell&gt;
        &lt;cell&gt;75.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMMU_pro&lt;/cell&gt;
        &lt;cell&gt;65.8&lt;/cell&gt;
        &lt;cell&gt;‚Äì&lt;/cell&gt;
        &lt;cell&gt;60.5&lt;/cell&gt;
        &lt;cell&gt;60.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MathVista_mini&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;82.7&lt;/cell&gt;
        &lt;cell&gt;80.0&lt;/cell&gt;
        &lt;cell&gt;81.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MathVision_full&lt;/cell&gt;
        &lt;cell&gt;62.3&lt;/cell&gt;
        &lt;cell&gt;63.9&lt;/cell&gt;
        &lt;cell&gt;62.9&lt;/cell&gt;
        &lt;cell&gt;63.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Documentation Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;AI2D_test&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;87.3&lt;/cell&gt;
        &lt;cell&gt;86.1&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;ChartQA_test&lt;/cell&gt;
        &lt;cell&gt;‚Äì&lt;/cell&gt;
        &lt;cell&gt;88.0&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
        &lt;cell&gt;89.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Counting&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;CountBench&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;‚Äì&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;92.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Video Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Video-MME&lt;/cell&gt;
        &lt;cell&gt;79.6&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;69.7&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;LVBench&lt;/cell&gt;
        &lt;cell&gt;64.5&lt;/cell&gt;
        &lt;cell&gt;‚Äì&lt;/cell&gt;
        &lt;cell&gt;49.0&lt;/cell&gt;
        &lt;cell&gt;49.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MLVU&lt;/cell&gt;
        &lt;cell&gt;82.1&lt;/cell&gt;
        &lt;cell&gt;78.2&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;73.9&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;AudioVisual -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Previous Open-source SoTA&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;WorldSense&lt;/cell&gt;
        &lt;cell&gt;47.1&lt;/cell&gt;
        &lt;cell&gt;50.9&lt;/cell&gt;
        &lt;cell&gt;45.4&lt;/cell&gt;
        &lt;cell&gt;54.0&lt;/cell&gt;
        &lt;cell&gt;54.1&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Previous Open-source SoTA&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;DailyOmni&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
        &lt;cell&gt;72.7&lt;/cell&gt;
        &lt;cell&gt;75.8&lt;/cell&gt;
        &lt;cell&gt;76.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;VideoHolmes&lt;/cell&gt;
        &lt;cell&gt;55.6&lt;/cell&gt;
        &lt;cell&gt;49.5&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Zero-shot Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Performance&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Content Consistency&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;SEED&lt;p&gt;test-zh | test-en&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;Seed-TTSICL&lt;/cell&gt;
        &lt;cell&gt;1.11 | 2.24&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Seed-TTSRL&lt;/cell&gt;
        &lt;cell&gt;1.00 | 1.94&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;MaskGCT&lt;/cell&gt;
        &lt;cell&gt;2.27 | 2.62&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;E2 TTS&lt;/cell&gt;
        &lt;cell&gt;1.97 | 2.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;F5-TTS&lt;/cell&gt;
        &lt;cell&gt;1.56 | 1.83&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Spark TTS&lt;/cell&gt;
        &lt;cell&gt;1.20 | 1.98&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;CosyVoice 2&lt;/cell&gt;
        &lt;cell&gt;1.45 | 2.57&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;CosyVoice 3&lt;/cell&gt;
        &lt;cell&gt;0.71 | 1.45&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Qwen2.5-Omni-7B&lt;/cell&gt;
        &lt;cell&gt;1.42 | 2.33&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;1.07 | 1.39&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Multilingual Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Language&lt;/cell&gt;
        &lt;cell role="head"&gt;Content Consistency&lt;/cell&gt;
        &lt;cell role="head"&gt;Speaker Similarity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;MiniMax&lt;/cell&gt;
        &lt;cell&gt;ElevenLabs&lt;/cell&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;MiniMax&lt;/cell&gt;
        &lt;cell&gt;ElevenLabs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Chinese&lt;/cell&gt;
        &lt;cell&gt;0.716&lt;/cell&gt;
        &lt;cell&gt;2.252&lt;/cell&gt;
        &lt;cell&gt;16.026&lt;/cell&gt;
        &lt;cell&gt;0.772&lt;/cell&gt;
        &lt;cell&gt;0.780&lt;/cell&gt;
        &lt;cell&gt;0.677&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;English&lt;/cell&gt;
        &lt;cell&gt;1.069&lt;/cell&gt;
        &lt;cell&gt;2.164&lt;/cell&gt;
        &lt;cell&gt;2.339&lt;/cell&gt;
        &lt;cell&gt;0.773&lt;/cell&gt;
        &lt;cell&gt;0.756&lt;/cell&gt;
        &lt;cell&gt;0.613&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;German&lt;/cell&gt;
        &lt;cell&gt;0.777&lt;/cell&gt;
        &lt;cell&gt;1.906&lt;/cell&gt;
        &lt;cell&gt;0.572&lt;/cell&gt;
        &lt;cell&gt;0.738&lt;/cell&gt;
        &lt;cell&gt;0.733&lt;/cell&gt;
        &lt;cell&gt;0.614&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Italian&lt;/cell&gt;
        &lt;cell&gt;1.067&lt;/cell&gt;
        &lt;cell&gt;1.543&lt;/cell&gt;
        &lt;cell&gt;1.743&lt;/cell&gt;
        &lt;cell&gt;0.742&lt;/cell&gt;
        &lt;cell&gt;0.699&lt;/cell&gt;
        &lt;cell&gt;0.579&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Portuguese&lt;/cell&gt;
        &lt;cell&gt;1.872&lt;/cell&gt;
        &lt;cell&gt;1.877&lt;/cell&gt;
        &lt;cell&gt;1.331&lt;/cell&gt;
        &lt;cell&gt;0.770&lt;/cell&gt;
        &lt;cell&gt;0.805&lt;/cell&gt;
        &lt;cell&gt;0.711&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Spanish&lt;/cell&gt;
        &lt;cell&gt;1.765&lt;/cell&gt;
        &lt;cell&gt;1.029&lt;/cell&gt;
        &lt;cell&gt;1.084&lt;/cell&gt;
        &lt;cell&gt;0.744&lt;/cell&gt;
        &lt;cell&gt;0.762&lt;/cell&gt;
        &lt;cell&gt;0.615&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Japanese&lt;/cell&gt;
        &lt;cell&gt;3.631&lt;/cell&gt;
        &lt;cell&gt;3.519&lt;/cell&gt;
        &lt;cell&gt;10.646&lt;/cell&gt;
        &lt;cell&gt;0.763&lt;/cell&gt;
        &lt;cell&gt;0.776&lt;/cell&gt;
        &lt;cell&gt;0.738&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Korean&lt;/cell&gt;
        &lt;cell&gt;1.670&lt;/cell&gt;
        &lt;cell&gt;1.747&lt;/cell&gt;
        &lt;cell&gt;1.865&lt;/cell&gt;
        &lt;cell&gt;0.778&lt;/cell&gt;
        &lt;cell&gt;0.776&lt;/cell&gt;
        &lt;cell&gt;0.700&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;French&lt;/cell&gt;
        &lt;cell&gt;2.505&lt;/cell&gt;
        &lt;cell&gt;4.099&lt;/cell&gt;
        &lt;cell&gt;5.216&lt;/cell&gt;
        &lt;cell&gt;0.689&lt;/cell&gt;
        &lt;cell&gt;0.628&lt;/cell&gt;
        &lt;cell&gt;0.535&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Russian&lt;/cell&gt;
        &lt;cell&gt;3.986&lt;/cell&gt;
        &lt;cell&gt;4.281&lt;/cell&gt;
        &lt;cell&gt;3.878&lt;/cell&gt;
        &lt;cell&gt;0.759&lt;/cell&gt;
        &lt;cell&gt;0.761&lt;/cell&gt;
        &lt;cell&gt;0.676&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Cross-Lingual Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Language&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell role="head"&gt;CosyVoice3&lt;/cell&gt;
        &lt;cell role="head"&gt;CosyVoice2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-zh&lt;/cell&gt;
        &lt;cell&gt;5.37&lt;/cell&gt;
        &lt;cell&gt;5.09&lt;/cell&gt;
        &lt;cell&gt;13.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ja-to-zh&lt;/cell&gt;
        &lt;cell&gt;3.32&lt;/cell&gt;
        &lt;cell&gt;3.05&lt;/cell&gt;
        &lt;cell&gt;48.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-zh&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;1.06&lt;/cell&gt;
        &lt;cell&gt;7.70&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-en&lt;/cell&gt;
        &lt;cell&gt;2.76&lt;/cell&gt;
        &lt;cell&gt;2.98&lt;/cell&gt;
        &lt;cell&gt;6.47&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ja-to-en&lt;/cell&gt;
        &lt;cell&gt;3.31&lt;/cell&gt;
        &lt;cell&gt;4.20&lt;/cell&gt;
        &lt;cell&gt;17.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-en&lt;/cell&gt;
        &lt;cell&gt;3.34&lt;/cell&gt;
        &lt;cell&gt;4.19&lt;/cell&gt;
        &lt;cell&gt;11.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-ja&lt;/cell&gt;
        &lt;cell&gt;8.29&lt;/cell&gt;
        &lt;cell&gt;7.08&lt;/cell&gt;
        &lt;cell&gt;13.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-ja&lt;/cell&gt;
        &lt;cell&gt;7.53&lt;/cell&gt;
        &lt;cell&gt;6.80&lt;/cell&gt;
        &lt;cell&gt;14.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-ja&lt;/cell&gt;
        &lt;cell&gt;4.24&lt;/cell&gt;
        &lt;cell&gt;3.93&lt;/cell&gt;
        &lt;cell&gt;5.86&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-ko&lt;/cell&gt;
        &lt;cell&gt;5.13&lt;/cell&gt;
        &lt;cell&gt;14.4&lt;/cell&gt;
        &lt;cell&gt;24.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-ko&lt;/cell&gt;
        &lt;cell&gt;4.96&lt;/cell&gt;
        &lt;cell&gt;5.87&lt;/cell&gt;
        &lt;cell&gt;21.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;ja-to-ko&lt;/cell&gt;
        &lt;cell&gt;6.23&lt;/cell&gt;
        &lt;cell&gt;7.92&lt;/cell&gt;
        &lt;cell&gt;21.5&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Decoding Strategy: For the Qwen3-Omni series across all evaluation benchmarks, &lt;code&gt;Instruct&lt;/code&gt;models use greedy decoding during generation without sampling. For&lt;code&gt;Thinking&lt;/code&gt;models, the decoding parameters should be taken from the&lt;code&gt;generation_config.json&lt;/code&gt;file in the checkpoint.&lt;/item&gt;
      &lt;item&gt;Benchmark-Specific Formatting: For the majority of evaluation benchmarks, they come with their own ChatML formatting to embed the question or prompt. It should be noted that all video data are set to &lt;code&gt;fps=2&lt;/code&gt;during evaluation.&lt;/item&gt;
      &lt;item&gt;Default Prompts: For tasks in certain benchmarks that do not include a prompt, we use the following prompt settings:&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Task Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Prompt&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Auto Speech Recognition (ASR) for Chinese&lt;/cell&gt;
        &lt;cell&gt;ËØ∑Â∞ÜËøôÊÆµ‰∏≠ÊñáËØ≠Èü≥ËΩ¨Êç¢‰∏∫Á∫ØÊñáÊú¨„ÄÇ&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Auto Speech Recognition (ASR) for Other languages&lt;/cell&gt;
        &lt;cell&gt;Transcribe the audio into text.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Speech-to-Text Translation (S2TT)&lt;/cell&gt;
        &lt;cell&gt;Listen to the provided &amp;lt;source_language&amp;gt; speech and produce a translation in &amp;lt;target_language&amp;gt; text.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Song Lyrics Recognition&lt;/cell&gt;
        &lt;cell&gt;Transcribe the song lyrics into text without any punctuation, separate lines with line breaks, and output only the lyrics without additional explanations.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;System Prompt: No &lt;code&gt;system prompt&lt;/code&gt;should be set for any evaluation benchmark.&lt;/item&gt;
      &lt;item&gt;Input Sequence: The question or prompt should be input as user text. Unless otherwise specified by the benchmark, the text should come after multimodal data in the sequence. For example:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;messages = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "/path/to/audio.wav"},
            {"type": "image", "image": "/path/to/image.png"},
            {"type": "video", "video": "/path/to/video.mp4"},
            {"type": "text", "text": "Describe the audio, image and video."},
        ],
    },
]&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/QwenLM/Qwen3-Omni"/><published>2025-09-22T17:50:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337253</id><title>AI-Generated "Workslop" Is Destroying Productivity</title><updated>2025-09-22T19:08:11.694957+00:00</updated><content>&lt;doc fingerprint="3d71033d39510a02"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Summary.&lt;/head&gt;
    &lt;p&gt;A confusing contradiction is unfolding in companies embracing generative AI tools: while workers are largely following mandates to embrace the technology, few are seeing it create real value. Consider, for instance, that the number of companies with fully AI-led processes nearly doubled last year, while AI use has likewise doubled at work since 2023. Yet a recent report from the MIT Media Lab found that 95% of organizations see no measurable return on their investment in these technologies. So much activity, so much enthusiasm, so little return. Why?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://hbr.org/2025/09/ai-generated-workslop-is-destroying-productivity"/><published>2025-09-22T18:07:13+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337400</id><title>Show HN: Python Audio Transcription: Convert Speech to Text Locally</title><updated>2025-09-22T19:08:11.432596+00:00</updated><content>&lt;doc fingerprint="840a859b39aa1292"&gt;
  &lt;main&gt;
    &lt;p&gt;Last week, I faced a dilemma that many researchers, journalists, and content creators know all too well: I had hours of recordings that needed to be transcribed. I had serious privacy concerns about uploading sensitive content to commercial transcription services and their third-party servers.&lt;/p&gt;
    &lt;p&gt;Instead of risking it, I built a Python-based transcription system using OpenAI‚Äôs Whisper model. The result? All my audio files were transcribed in under 10 minutes with 96% accuracy‚Äîcompletely free and processed locally on my laptop.&lt;/p&gt;
    &lt;p&gt;In this post, I will show you how you can build a simple script for processing any audio data without recurring costs or privacy compromises.&lt;/p&gt;
    &lt;head rend="h2"&gt;Essential Setup Requirements&lt;/head&gt;
    &lt;head rend="h3"&gt;1. FFmpeg Installation (Critical First Step)&lt;/head&gt;
    &lt;p&gt;FFmpeg handles audio processing and is required for all transcription methods. This is the #1 cause of setup failures.&lt;/p&gt;
    &lt;head rend="h4"&gt;‚ö†Ô∏è Setup Priority&lt;/head&gt;
    &lt;p&gt;Windows:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Download from ffmpeg.org/download.html&lt;/item&gt;
      &lt;item&gt;Extract to &lt;code&gt;C:\ffmpeg&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Add &lt;code&gt;C:\ffmpeg\bin&lt;/code&gt;to your PATH environment variable&lt;/item&gt;
      &lt;item&gt;Restart your terminal&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;macOS:&lt;/p&gt;
    &lt;code&gt;# Using Homebrew (recommended)
brew install ffmpeg&lt;/code&gt;
    &lt;p&gt;Linux (Ubuntu/Debian):&lt;/p&gt;
    &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&lt;/code&gt;
    &lt;p&gt;Verify Installation:&lt;/p&gt;
    &lt;code&gt;ffmpeg -version&lt;/code&gt;
    &lt;p&gt;You should see version information. If you get ‚Äúcommand not found,‚Äù FFmpeg isn‚Äôt properly installed.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Python Environment Setup&lt;/head&gt;
    &lt;head rend="h4"&gt;üîß Virtual Environment Benefits&lt;/head&gt;
    &lt;code&gt;# Create isolated environment
python -m venv whisper-env
cd whisper-env

# Activate environment
# Windows:
Scripts\activate
# macOS/Linux:
source bin/activate

# Install required packages
pip install openai-whisper&lt;/code&gt;
    &lt;head rend="h2"&gt;Method 1: OpenAI Whisper (Recommended)&lt;/head&gt;
    &lt;p&gt;Whisper is OpenAI‚Äôs state-of-the-art speech recognition model, trained on 680,000 hours of multilingual audio. It‚Äôs specifically designed for robust, real-world audio transcription and handles various accents, background noise, and audio quality issues remarkably well.&lt;/p&gt;
    &lt;head rend="h3"&gt;Choosing the Right Whisper Model&lt;/head&gt;
    &lt;head rend="h4"&gt;üéØ Model Selection Guide&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Size&lt;/cell&gt;
        &lt;cell role="head"&gt;RAM Required&lt;/cell&gt;
        &lt;cell role="head"&gt;Speed&lt;/cell&gt;
        &lt;cell role="head"&gt;Accuracy&lt;/cell&gt;
        &lt;cell role="head"&gt;Best Use Case&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;tiny&lt;/cell&gt;
        &lt;cell&gt;39 MB&lt;/cell&gt;
        &lt;cell&gt;390 MB&lt;/cell&gt;
        &lt;cell&gt;32x realtime&lt;/cell&gt;
        &lt;cell&gt;89%&lt;/cell&gt;
        &lt;cell&gt;Quick testing, real-time applications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;base&lt;/cell&gt;
        &lt;cell&gt;74 MB&lt;/cell&gt;
        &lt;cell&gt;740 MB&lt;/cell&gt;
        &lt;cell&gt;16x realtime&lt;/cell&gt;
        &lt;cell&gt;94%&lt;/cell&gt;
        &lt;cell&gt;General use (recommended)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;small&lt;/cell&gt;
        &lt;cell&gt;244 MB&lt;/cell&gt;
        &lt;cell&gt;2.4 GB&lt;/cell&gt;
        &lt;cell&gt;6x realtime&lt;/cell&gt;
        &lt;cell&gt;96%&lt;/cell&gt;
        &lt;cell&gt;High-quality transcription needs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;769 MB&lt;/cell&gt;
        &lt;cell&gt;5 GB&lt;/cell&gt;
        &lt;cell&gt;2x realtime&lt;/cell&gt;
        &lt;cell&gt;97%&lt;/cell&gt;
        &lt;cell&gt;Professional work, critical accuracy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;large&lt;/cell&gt;
        &lt;cell&gt;1.5 GB&lt;/cell&gt;
        &lt;cell&gt;10 GB&lt;/cell&gt;
        &lt;cell&gt;1x realtime&lt;/cell&gt;
        &lt;cell&gt;98%&lt;/cell&gt;
        &lt;cell&gt;Maximum accuracy, research purposes&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Basic Whisper Implementation&lt;/head&gt;
    &lt;p&gt;Here‚Äôs a clean, production-ready implementation:&lt;/p&gt;
    &lt;code&gt;import whisper
import os
from pathlib import Path
import time

class AudioTranscriber:
    def __init__(self, model_size="base"):
        """Initialize transcriber with specified Whisper model"""
        print(f"Loading Whisper {model_size} model...")
        self.model = whisper.load_model(model_size)
        print("Model loaded successfully!")
    
    def transcribe_file(self, audio_path, language=None):
        """
        Transcribe a single audio file
        
        Args:
            audio_path: Path to audio file
            language: Language code ('en', 'es', 'fr', etc.) or None for auto-detect
        """
        if not os.path.exists(audio_path):
            raise FileNotFoundError(f"Audio file not found: {audio_path}")
        
        print(f"Transcribing: {Path(audio_path).name}")
        
        start_time = time.time()
        
        # Transcribe audio
        options = {"language": language} if language else {}
        result = self.model.transcribe(audio_path, **options)
        
        processing_time = time.time() - start_time
        
        print(f"‚úì Completed in {processing_time:.1f} seconds")
        print(f"‚úì Detected language: {result['language']}")
        
        return {
            'text': result['text'].strip(),
            'language': result['language'],
            'segments': result.get('segments', []),
            'processing_time': processing_time
        }
    
    def save_transcription(self, result, output_path):
        """Save transcription to text file"""
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write("=== Transcription Results ===\n")
            f.write(f"Language: {result['language']}\n")
            f.write(f"Processing Time: {result['processing_time']:.1f} seconds\n")
            f.write("=" * 40 + "\n\n")
            f.write(result['text'])
        
        print(f"‚úì Transcription saved to: {output_path}")

# Usage example
def transcribe_audio_file(audio_path, model_size="base", language=None):
    """Simple function to transcribe an audio file"""
    
    transcriber = AudioTranscriber(model_size=model_size)
    result = transcriber.transcribe_file(audio_path, language=language)
    
    # Save transcription
    audio_name = Path(audio_path).stem
    output_path = f"{audio_name}_transcript.txt"
    transcriber.save_transcription(result, output_path)
    
    return result

# Example usage
if __name__ == "__main__":
    # Transcribe a file
    audio_file = "interview.wav"  # Replace with your audio file
    result = transcribe_audio_file(audio_file, model_size="base", language="en")
    
    print(f"\nTranscription preview:")
    print(result['text'][:200] + "..." if len(result['text']) &amp;gt; 200 else result['text'])&lt;/code&gt;
    &lt;head rend="h4"&gt;üéµ Supported Audio Formats&lt;/head&gt;
    &lt;head rend="h3"&gt;Batch Processing Multiple Files&lt;/head&gt;
    &lt;p&gt;For processing multiple audio files efficiently:&lt;/p&gt;
    &lt;code&gt;def batch_transcribe(audio_files, output_dir="transcripts", model_size="base"):
    """Transcribe multiple audio files"""
    
    os.makedirs(output_dir, exist_ok=True)
    transcriber = AudioTranscriber(model_size=model_size)
    
    results = []
    
    for i, audio_file in enumerate(audio_files, 1):
        print(f"\n--- Processing file {i}/{len(audio_files)} ---")
        
        try:
            result = transcriber.transcribe_file(audio_file)
            
            # Save individual transcription
            file_name = Path(audio_file).stem
            output_path = os.path.join(output_dir, f"{file_name}_transcript.txt")
            transcriber.save_transcription(result, output_path)
            
            results.append(result)
            
        except Exception as e:
            print(f"‚úó Failed to process {audio_file}: {str(e)}")
            continue
    
    print(f"\n‚úì Batch processing completed: {len(results)}/{len(audio_files)} files successful")
    return results

# Usage
audio_files = ["interview1.wav", "interview2.mp3", "lecture.m4a"]
batch_transcribe(audio_files, output_dir="my_transcripts")&lt;/code&gt;
    &lt;head rend="h3"&gt;Creating Subtitle Files (SRT Format)&lt;/head&gt;
    &lt;p&gt;Generate subtitle files for videos:&lt;/p&gt;
    &lt;code&gt;def create_srt_subtitles(audio_path, output_path=None):
    """Create SRT subtitle file from audio"""
    
    transcriber = AudioTranscriber(model_size="base")
    result = transcriber.transcribe_file(audio_path)
    
    if output_path is None:
        output_path = Path(audio_path).stem + ".srt"
    
    with open(output_path, 'w', encoding='utf-8') as f:
        for i, segment in enumerate(result['segments'], 1):
            start_time = format_timestamp(segment['start'])
            end_time = format_timestamp(segment['end'])
            
            f.write(f"{i}\n")
            f.write(f"{start_time} --&amp;gt; {end_time}\n")
            f.write(f"{segment['text'].strip()}\n\n")
    
    print(f"‚úì SRT subtitles saved to: {output_path}")

def format_timestamp(seconds):
    """Convert seconds to SRT timestamp format"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    millisecs = int((seconds % 1) * 1000)
    return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"

# Usage
create_srt_subtitles("presentation.mp4")&lt;/code&gt;
    &lt;head rend="h2"&gt;Method 2: Alternative with SpeechRecognition Library&lt;/head&gt;
    &lt;p&gt;For scenarios requiring different recognition engines or more control over audio preprocessing:&lt;/p&gt;
    &lt;code&gt;import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import os

class FlexibleTranscriber:
    def __init__(self, engine="google"):
        """Initialize with specified recognition engine"""
        self.recognizer = sr.Recognizer()
        self.engine = engine
        
        # Optimize settings
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        
    def preprocess_audio(self, audio_path):
        """Optimize audio for better recognition"""
        audio = AudioSegment.from_file(audio_path)
        
        # Convert to mono and normalize
        if audio.channels &amp;gt; 1:
            audio = audio.set_channels(1)
        
        audio = audio.set_frame_rate(16000)  # Standard sample rate
        audio = audio.normalize()  # Normalize volume
        
        # Export to temporary WAV file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.wav')
        audio.export(temp_file.name, format="wav")
        
        return temp_file.name
    
    def transcribe_file(self, audio_path, language='en-US'):
        """Transcribe audio file using speech_recognition library"""
        
        # Preprocess audio
        processed_path = self.preprocess_audio(audio_path)
        
        try:
            with sr.AudioFile(processed_path) as source:
                # Adjust for ambient noise
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
                audio_data = self.recognizer.record(source)
            
            # Perform recognition
            if self.engine == "google":
                text = self.recognizer.recognize_google(audio_data, language=language)
            elif self.engine == "sphinx":
                text = self.recognizer.recognize_sphinx(audio_data)
            
            return {
                'text': text,
                'success': True,
                'engine': self.engine
            }
            
        except sr.UnknownValueError:
            return {
                'text': "",
                'success': False,
                'error': "Could not understand audio"
            }
        except sr.RequestError as e:
            return {
                'text': "",
                'success': False,
                'error': f"Recognition service error: {str(e)}"
            }
        finally:
            # Clean up temporary file
            os.unlink(processed_path)

# Usage
transcriber = FlexibleTranscriber(engine="google")
result = transcriber.transcribe_file("audio.wav")

if result['success']:
    print(result['text'])
else:
    print(f"Transcription failed: {result['error']}")&lt;/code&gt;
    &lt;head rend="h4"&gt;üîÑ Engine Comparison&lt;/head&gt;
    &lt;head rend="h2"&gt;Common Issues and Solutions&lt;/head&gt;
    &lt;head rend="h3"&gt;Issue 1: FFmpeg Not Found&lt;/head&gt;
    &lt;p&gt;Error: &lt;code&gt;[WinError 2] The system cannot find the file specified&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;Solution:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify FFmpeg installation: &lt;code&gt;ffmpeg -version&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Windows: Ensure FFmpeg is in your PATH environment variable&lt;/item&gt;
      &lt;item&gt;Restart your terminal/command prompt after PATH changes&lt;/item&gt;
      &lt;item&gt;Try reinstalling FFmpeg if the problem persists&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Issue 2: Out of Memory Errors&lt;/head&gt;
    &lt;p&gt;Error: CUDA out of memory or system RAM exhausted&lt;/p&gt;
    &lt;head rend="h4"&gt;‚ö° Memory Management Tips&lt;/head&gt;
    &lt;p&gt;Solutions:&lt;/p&gt;
    &lt;code&gt;# Use smaller model
transcriber = AudioTranscriber(model_size="tiny")

# For very long audio files, process in chunks
def transcribe_long_audio(audio_path, chunk_duration=300):  # 5 minutes
    audio = AudioSegment.from_file(audio_path)
    chunks = [audio[i:i+chunk_duration*1000] for i in range(0, len(audio), chunk_duration*1000)]
    
    transcriptions = []
    for i, chunk in enumerate(chunks):
        chunk_path = f"temp_chunk_{i}.wav"
        chunk.export(chunk_path, format="wav")
        
        result = transcriber.transcribe_file(chunk_path)
        transcriptions.append(result['text'])
        
        os.remove(chunk_path)
    
    return ' '.join(transcriptions)&lt;/code&gt;
    &lt;head rend="h3"&gt;Issue 3: Poor Accuracy on Noisy Audio&lt;/head&gt;
    &lt;p&gt;Problem: Low accuracy on recordings with background noise or poor quality&lt;/p&gt;
    &lt;head rend="h4"&gt;üé§ Audio Quality Tips&lt;/head&gt;
    &lt;p&gt;Solutions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Audio preprocessing:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;def enhance_audio(audio_path):
    """Basic audio enhancement"""
    audio = AudioSegment.from_file(audio_path)
    
    # Normalize volume
    audio = audio.normalize()
    
    # Apply high-pass filter to reduce low-frequency noise
    audio = audio.high_pass_filter(80)
    
    # Compress dynamic range
    audio = audio.compress_dynamic_range()
    
    return audio&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Specify language for better accuracy:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;result = transcriber.transcribe_file("audio.wav", language="en")&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Use higher-quality model:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Upgrade from 'base' to 'small' for better accuracy
transcriber = AudioTranscriber(model_size="small")&lt;/code&gt;
    &lt;head rend="h2"&gt;Performance Benchmarks&lt;/head&gt;
    &lt;p&gt;Based on testing with various audio types on a modern laptop:&lt;/p&gt;
    &lt;p&gt;Whisper Model Performance (1-hour audio file):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;tiny: 1.9 minutes processing, 89% accuracy&lt;/item&gt;
      &lt;item&gt;base: 3.8 minutes processing, 94% accuracy&lt;/item&gt;
      &lt;item&gt;small: 10 minutes processing, 96% accuracy&lt;/item&gt;
      &lt;item&gt;medium: 30 minutes processing, 97% accuracy&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Hardware Impact:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;CPU only: Use base model maximum for reasonable speeds&lt;/item&gt;
      &lt;item&gt;8GB RAM: Comfortable with small model&lt;/item&gt;
      &lt;item&gt;16GB+ RAM: Can handle medium/large models without issues&lt;/item&gt;
      &lt;item&gt;GPU acceleration: 3-5x speed improvement (requires CUDA setup)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;üöÄ Optimization Strategy&lt;/head&gt;
    &lt;head rend="h2"&gt;Command-Line Usage&lt;/head&gt;
    &lt;p&gt;Create a simple command-line script for easy usage:&lt;/p&gt;
    &lt;code&gt;# transcribe.py
import sys
import argparse
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description='Transcribe audio files locally')
    parser.add_argument('audio_file', help='Path to audio file')
    parser.add_argument('--model', default='base', choices=['tiny', 'base', 'small', 'medium', 'large'])
    parser.add_argument('--language', help='Language code (e.g., en, es, fr)')
    parser.add_argument('--output', help='Output file path')
    
    args = parser.parse_args()
    
    # Transcribe
    result = transcribe_audio_file(
        args.audio_file, 
        model_size=args.model,
        language=args.language
    )
    
    # Save to custom output path if specified
    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            f.write(result['text'])
        print(f"Transcription saved to: {args.output}")

if __name__ == "__main__":
    main()&lt;/code&gt;
    &lt;p&gt;Usage examples:&lt;/p&gt;
    &lt;code&gt;# Basic transcription
python transcribe.py interview.wav

# Specify model and language
python transcribe.py lecture.mp3 --model small --language en

# Custom output file
python transcribe.py podcast.m4a --output transcript.txt&lt;/code&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Local audio transcription with Python and Whisper offers a compelling alternative to commercial services. With a one-time setup, you get unlimited transcription capabilities, complete privacy, and often superior accuracy compared to cloud-based solutions.&lt;/p&gt;
    &lt;p&gt;Key advantages:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Zero ongoing costs after initial setup‚Äîno per-minute charges&lt;/item&gt;
      &lt;item&gt;Complete privacy‚Äîaudio never leaves your machine&lt;/item&gt;
      &lt;item&gt;High accuracy‚Äî94-98% depending on model choice and audio quality&lt;/item&gt;
      &lt;item&gt;Fast processing‚Äîtypically 4-16x real-time speed&lt;/item&gt;
      &lt;item&gt;Offline capability‚Äîworks without internet connection&lt;/item&gt;
      &lt;item&gt;No usage limits‚Äîtranscribe as much as you want&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Whether you‚Äôre a researcher transcribing interviews, a journalist working with sensitive sources, or a content creator processing podcasts, this local solution gives you the control and privacy that cloud services can‚Äôt match.&lt;/p&gt;
    &lt;p&gt;The setup might take 30 minutes, but you‚Äôll save hours of time and potentially hundreds of dollars in transcription costs. Plus, you‚Äôll have the peace of mind that comes with keeping your audio data completely under your control.&lt;/p&gt;
    &lt;head rend="h3"&gt;Stay up to date&lt;/head&gt;
    &lt;p&gt;Get notified when I publish something new, and unsubscribe at any time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.pavlinbg.com/posts/python-speech-to-text-guide"/><published>2025-09-22T18:18:56+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337433</id><title>Diffusion Beats Autoregressive in Data-Constrained Settings</title><updated>2025-09-22T19:08:10.414049+00:00</updated><content>&lt;doc fingerprint="b4173bd8031d52cb"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;TLDR:&lt;/p&gt;
      &lt;p&gt;If you are compute-constrained, use autoregressive models; if you are data-constrained, use diffusion models.&lt;/p&gt;
      &lt;p&gt;Motivation&lt;/p&gt;
      &lt;p&gt;Progress in AI over the past decade has largely been driven by scaling compute and data. The recipe from GPT-1 to GPT-5 has appeared straightforward: train a larger model on more data, and the result is a more capable system. &lt;/p&gt;
      &lt;p&gt;Yet a central question remains: will this recipe continue to hold from GPT-6 to GPT-N?&lt;/p&gt;
      &lt;p&gt;Many analysts and researchers believe the answer is no. For instance, Ilya Sutskever, in his NeurIPS 2024 Test-of-Time Award talk, remarked: ‚ÄúCompute is growing‚Äîbetter algorithms, better hardware, bigger clusters‚Äîbut data is not growing. We have just one internet, the fossil fuel of AI.‚Äù &lt;/p&gt;
      &lt;p&gt;This concern is echoed by AI forecasters, who have analyzed compute and data growth more systematically and concluded that compute is outpacing data at an accelerating rate.&lt;/p&gt;
      &lt;p&gt;The above Figure, illustrates this tension by overlaying projections from EpochAI‚Äôs analysis. Their study extrapolates historical trends in compute, dataset usage, and internet-scale data availability. The forecast suggests that by around 2028, we will enter a data-constrained regime: far more compute will be available than there are training tokens to consume.&lt;/p&gt;
      &lt;p&gt;This paper addresses the challenge by asking: how can we trade off more compute for less data? Our central idea is to revisit the foundations of modern generative modeling and compare the two dominant paradigms for scaling AI.&lt;/p&gt;
      &lt;p&gt;Broadly, there have been two families of algorithms that shaped recent progress in AI:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Autoregressive models, popularized in 2019 in the text domain with the GPT-2 paper.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion models, popularized in 2020 in the vision domain with the DDPM paper.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Both aim to maximize the joint likelihood, but they differ fundamentally in how they factorize this joint distribution. &lt;/p&gt;
      &lt;p&gt;The success of diffusion in vision and autoregression in language has sparked both excitement and confusion‚Äîespecially as each community has begun experimenting with the other‚Äôs paradigm.&lt;/p&gt;
      &lt;p&gt;For example, the language community has explored diffusion on text: &lt;/p&gt;
      &lt;p&gt;D3PM introduced discrete diffusion via random masking, while Diffusion-LM applied continuous diffusion by projecting tokens to embeddings before adding Gaussian noise. Since then, numerous works have extended this line of research.&lt;/p&gt;
      &lt;p&gt;Conversely, the vision community has experimented with doing autoregressive modeling on images. Models such as PARTI and DALLE exemplify this approach with strong results.&lt;/p&gt;
      &lt;p&gt;This cross-pollination has led to even greater uncertainty in robotics, where both diffusion-based and autoregressive approaches are widely adopted. To illustrate this, OpenAI Deep Research has compiled a list of robotics works across both paradigms, highlighting the lack of consensus in the field.&lt;/p&gt;
      &lt;p&gt;This ambiguity raises a fundamental question: should we be training diffusion models or autoregressive models?&lt;/p&gt;
      &lt;p&gt;Quick Background:&lt;/p&gt;
      &lt;p&gt;Autoregressive language models:&lt;/p&gt;
      &lt;p&gt;They model data distribution in a left-to-right manner&lt;/p&gt;
      &lt;p&gt;Diffusion language models:&lt;/p&gt;
      &lt;p&gt;For a more detailed understanding, with cool animations, please refer to this video from Jia-Bin Huang ‚Äì https://www.youtube.com/watch?v=8BTOoc0yDVA&lt;/p&gt;
      &lt;p&gt;Prior results with Diffusion Language models&lt;/p&gt;
      &lt;p&gt;Since 2021, diffusion language models have sparked significant interest, with many works focusing on improving their design and performance.&lt;/p&gt;
      &lt;p&gt;In the table above, we highlight representative results from a popular work.&lt;lb/&gt;The takeaways are as follows:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Discrete diffusion performs better than continuous diffusion on text.&lt;/item&gt;
        &lt;item&gt;Autoregressive models still achieve the strongest results overall.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Several works have also explored the scaling behavior of diffusion-based language models.&lt;/p&gt;
      &lt;p&gt;Nie et al report that discrete diffusion LLMs require roughly 16√ó more compute than autoregressive LLMs to match the same negative log-likelihood. Similar results have been observed in multimodal domains‚Äîfor instance, UniDisc finds that discrete diffusion needs about 12√ó more compute than autoregression for comparable likelihoods.&lt;/p&gt;
      &lt;p&gt;However, these results conflate data and compute because they are measured in a single-epoch training regime. This raises an important ambiguity: do diffusion models truly require 16√ó more compute, or do they in fact require 16√ó more data?&lt;/p&gt;
      &lt;p&gt;In this work, we explicitly disentangle data and compute. Our goal is to study diffusion and autoregressive models specifically in data-constrained settings.&lt;/p&gt;
      &lt;p&gt;Our Motivation&lt;/p&gt;
      &lt;p&gt;To understand why diffusion may behave differently, let‚Äôs revisit its training objective.&lt;/p&gt;
      &lt;p&gt;In diffusion training, tokens are randomly masked and the model learns to recover them. Importantly, left-to-right masking is a special case within this framework.&lt;/p&gt;
      &lt;p&gt;Viewed this way, diffusion can be interpreted as a form of implicit data augmentation for autoregressive training. Instead of only learning from left-to-right sequences, the model also benefits from many alternative masking strategies.&lt;/p&gt;
      &lt;p&gt;And if diffusion is essentially data augmentation, then its benefits should be most pronounced when training is data-bottlenecked.&lt;/p&gt;
      &lt;p&gt;This perspective explains why prior works have reported weaker results for diffusion: they primarily evaluated in single-epoch settings, where data is abundant. In contrast, our study focuses on scenarios where data is limited and compute can be traded off more effectively.&lt;/p&gt;
      &lt;p&gt;Our Experiments&lt;/p&gt;
      &lt;p&gt;In this work, we train hundreds of models spanning multiple orders of magnitude in model size, data quantity, and number of training epochs to fit scaling laws for diffusion models in the data-constrained setting. We summarize some of our key findings below.&lt;/p&gt;
      &lt;p&gt;Finding #1:&lt;/p&gt;
      &lt;p&gt;Diffusion models outperform autoregressive models when trained with sufficient compute (i.e., more epochs &amp;amp; parameters). Across different unique data scales, we observe:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;At low compute, Autoregressive models win.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;After a certain amount of compute, performance matches‚Äîwe call this the critical compute point.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Beyond this, diffusion keeps improving, while Autoregressive plateaus or overfits. &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Each point in the figure shows a model trained to convergence. The x-axis shows the total training FLOPs of that point, and the y-axis shows the best validation loss achieved by that model family under that training compute budget.&lt;/p&gt;
      &lt;p&gt;Finding #2:&lt;/p&gt;
      &lt;p&gt;Autoregressive models begin to overfit much quickly, while diffusion shows no signs of overfitting even after 10x the number of epochs. In the above figure, we showed that increasing compute eventually favors diffusion. But compute can be scaled in two ways: (i) Increasing model size (ii) Increasing the number of epochs In the following plot, we separate these axes.&lt;/p&gt;
      &lt;p&gt;The colored star marks the 1-epoch point, where Autoregressive outperforms diffusion. The star (‚òÖ) denotes the best loss achieved by each model.&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Autoregressive hits its best around the middle, then overfits.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion keeps improving and reaches its best loss at the far right. &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Not only does diffusion benefit from more training‚Äîit also achieves a better final loss than Autoregressive (3.51 vs. 3.71).&lt;/p&gt;
      &lt;p&gt;Finding #3:&lt;/p&gt;
      &lt;p&gt;Diffusion models are significantly more robust to data repetition than autoregressive (AR) models. &lt;/p&gt;
      &lt;p&gt;We show training curves of models trained with the same total compute, but different trade-offs between unique data and number of epochs. &lt;/p&gt;
      &lt;p&gt;An ‚Äúepoch‚Äù here means reusing a smaller subset of data more times(e.g., 4 Ep is 4 epochs while using 25% unique data, 2 Ep is 2 epochs with 50% and so on).&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;AR models begin to overfit as repetition increases‚Äîtheir validation loss worsens and significantly diverges at higher epoch counts.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion models remain stable across all repetition levels, showing no signs of overfitting or diverging‚Äîeven at 100 epochs.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Finding #4:&lt;/p&gt;
      &lt;p&gt;Diffusion models exhibit a much higher half-life of data reuse (R_D*) ‚Äîi.e., the number of epochs after which returns from repeating data begins to significantly diminish. &lt;/p&gt;
      &lt;p&gt;We adopt the data-constrained scaling framework introduced by Muennighoff et al. in their excellent NeurIPS paper to fit scaling laws for diffusion models. While Muennighoff et al. found R_D* ~ 15 for autoregressive models, we find a significantly higher value of R_D* ~ 500 for diffusion models‚Äîhighlighting their ability to benefit from far more data repetition.&lt;/p&gt;
      &lt;p&gt;The above Figure studies the Decay rate of data value under repetition: left shows diffusion, middle AR, and right the average decay rate for both. &lt;/p&gt;
      &lt;p&gt;Points are empirical results (darker color = higher FLOPs, lighter color =&lt;lb/&gt;lower FLOPs; each line = fixed compute), we find that fitted curves (represented as lines) closely match the empirical points, indicating our scaling laws are representative. The decay rate of value for repeated data is lower for diffusion, reflecting its greater robustness to repeating. In this experiment 100% data fraction means training 1 epoch with 100% unique data, while 50% means 2 epoch epoch with only using 50% unique data and so on.&lt;/p&gt;
      &lt;p&gt;Finding #5:&lt;/p&gt;
      &lt;p&gt;Muennighoff et al. showed that repeating the dataset up to 4 epochs is nearly as effective as using fresh data for autoregressive models.&lt;/p&gt;
      &lt;p&gt; In contrast, we find that diffusion models can be trained on repeated data for up to 100 epochs, while having repeated data almost as effective as fresh data.&lt;/p&gt;
      &lt;p&gt;Finding #6:&lt;/p&gt;
      &lt;p&gt;The compute required for diffusion to outperform AR follows a predictable power law. Above we defined the critical compute threshold as the amount of FLOPs where diffusion matches AR performance for a given unique dataset size. &lt;/p&gt;
      &lt;p&gt;We find that we can derive a simple closed-form analytical expression for this threshold, this allows us to predict when diffusion will surpass AR given any unique data size. In the figure we show both the fitted curve and empirical critical threshold points, which align closely.&lt;/p&gt;
      &lt;p&gt;Finding #7:&lt;/p&gt;
      &lt;p&gt;The data efficiency of diffusion models translates to better downstream performance.&lt;/p&gt;
      &lt;p&gt; Lastly we evaluate the best-performing diffusion and AR models (trained under the same data budget) on a range of language understanding tasks. &lt;/p&gt;
      &lt;p&gt;Across most benchmarks, diffusion models outperform AR models, confirming that diffusion‚Äôs lower validation loss translates to better downstream performance.&lt;/p&gt;
      &lt;p&gt;Finding #8:&lt;/p&gt;
      &lt;p&gt;Exposure to different token orderings helps explain diffusion‚Äôs data efficiency. By adding explicit data augmentations to AR training, we find that diffusion model‚Äôs advantage arises from their exposure to a diverse set of token orderings. &lt;/p&gt;
      &lt;p&gt;As seen in the above Figure, increasing N consistently lowered validation loss and delayed overfitting. At N = 16, the 100-epoch validation loss of AR models approached that of diffusion, suggesting that diverse orderings are indeed a key driver of diffusion‚Äôs data efficiency. These results support our interpretation that diffusion models outperform AR models in low-data regimes because they are implicitly trained on a richer distribution of conditional prediction tasks. &lt;/p&gt;
      &lt;p&gt;Finally, this analysis suggests a natural continuum between the two paradigms: by controlling task diversity through masking or reordering‚Äîwe could design hybrid models that interpolate between compute efficiency (AR-like) and data efficiency (diffusion-like).&lt;/p&gt;
      &lt;p&gt;For more experiments and details please refer to original paper ‚Äìhttps://arxiv.org/abs/2507.15857&lt;/p&gt;
      &lt;p&gt;Conclusion&lt;/p&gt;
      &lt;p&gt;As the availability of high-quality data plateaus, improving data efficiency becomes essential for scaling deep learning. In this work, we show that masked diffusion models consistently outperform autoregressive (AR) models in data-constrained regimes ‚Äî when training involves repeated passes over a limited dataset. We establish new scaling laws for diffusion models, revealing their ability to extract value from repeated data far beyond what AR models can achieve.&lt;/p&gt;
      &lt;p&gt; These results challenge the conventional belief that AR models are universally superior and highlight diffusion models as a compelling alternative when data‚Äînot compute‚Äîis the primary bottleneck. Looking ahead, efficient use of finite data may define the next frontier in scaling deep learning models. Although the studies have been performed in the context of language models, we believe these findings should apply across any kind of sequence modeling data, such as in robotics or healthcare. For practitioners, our takeaway is simple: if you are compute-constrained, use autoregressive models; if you are data-constrained, use diffusion models.&lt;/p&gt;
      &lt;p&gt;Bibtex:&lt;/p&gt;
      &lt;p&gt;
        &lt;code&gt;@article{prabhudesai2025diffusion,&lt;lb/&gt;title={Diffusion Beats Autoregressive in Data-Constrained Settings},&lt;lb/&gt;author={Prabhudesai, Mihir and Wu, Mengning and Zadeh, Amir and Fragkiadaki, Katerina and Pathak, Deepak},&lt;lb/&gt;journal={arXiv preprint arXiv:2507.15857},&lt;lb/&gt;year={2025}&lt;lb/&gt;}&lt;/code&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.ml.cmu.edu/2025/09/22/diffusion-beats-autoregressive-in-data-constrained-settings/"/><published>2025-09-22T18:21:29+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337450</id><title>Choose Your Own Adventure</title><updated>2025-09-22T19:08:09.883621+00:00</updated><content>&lt;doc fingerprint="277adbe5aba5ab1d"&gt;
  &lt;main&gt;
    &lt;p/&gt;
    &lt;quote&gt;
      &lt;p&gt;These books were the gateway drugs of interactive entertainment.&lt;/p&gt;
      &lt;p&gt;‚Äî Choose Your Own Adventure historian Christian Swineheart&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;My first experience with interactive media wasn‚Äôt mediated by any sort of digital technology. Instead it came courtesy of a ‚Äútechnology‚Äù that was already more than half a millennium old at the time: the printed book.&lt;/p&gt;
    &lt;p&gt;In the fall of 1980, I was eight years old, and doing my childish best to adjust to life in a suburb of Dallas, Texas, where my family had moved the previous summer from the vicinity of Youngstown, Ohio. I was a skinny, frail kid who wasn‚Äôt very good at throwing balls or throwing punches, which did nothing to ease the transition. Even when I wasn‚Äôt being actively picked on, I was bewildered at my new classmates‚Äô turns of phrase (‚ÄúI reckon,‚Äù ‚Äúy‚Äôall,‚Äù ‚ÄúI‚Äôm fixin‚Äô to‚Äù) that I had previously heard only in the John Wayne movies I watched on my dad‚Äôs knee. In their eyes, my birthplace north of the Mason Dixon Line meant that I could be dismissed as just another clueless, borderline useless ‚ÄúYankee,‚Äù a heathen in the eyes of those who adhered to my new state‚Äôs twin religions of Baptist Christianity and Friday-night football.&lt;/p&gt;
    &lt;p&gt;I found my refuge in my imagination. I was interested in just about everything ‚Äî a trait I‚Äôve never lost, both to my benefit and my detriment in life ‚Äî and I could sit for long periods of time in my room, spinning out fantasies in my head about school lessons, about books I‚Äôd read, about television shows I‚Äôd seen, even about songs I‚Äôd heard on the radio. I actually framed this as a distinct activity in my mind: ‚ÄúI‚Äôm going to go imagine now.‚Äù If nothing else, it was good training for becoming a writer. As they say, the child is the father of the man.&lt;/p&gt;
    &lt;p&gt;One Friday afternoon, I discovered a slim, well-thumbed volume in my elementary school‚Äôs scanty library. Above the title The Cave of Time was the now-iconic Choose Your Own Adventure masthead, proclaiming it to be the first book in a series. Curious as always, I opened it to the first page. I was precocious enough to know what was meant by a first-person and third-person narrator of written fiction, but this was something else: this book was written in the second person.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;You‚Äôve hiked through Snake Canyon once before while visiting your Uncle Howard at Red Creek Ranch, but you never noticed any cave entrance. It looks as though a recent rock slide has uncovered it.&lt;/p&gt;
      &lt;p&gt;Though the late afternoon sun is striking the surface of the cave, the interior remains in total darkness. You step inside a few feet, trying to get an idea of how big it is. As your eyes become used to the dark, you see what looks like a tunnel ahead, dimly lit by some kind of phosphorescent material on its walls. The tunnel walls are smooth, as if they were shaped by running water. After twenty feet or so, the tunnel curves. You wonder where it leads. You venture in a bit further, but you feel nervous being alone in such a strange place. You turn and hurry out.&lt;/p&gt;
      &lt;p&gt;A thunderstorm may be coming, judging by how dark it looks outside. Suddenly you realize the sun has long since set, and the landscape is lit only by the pale light of the full moon. You must have fallen asleep and woken up hours later. But then you remember something even more strange. Just last evening, the moon was only a slim crescent in the sky.&lt;/p&gt;
      &lt;p&gt;You wonder how long you‚Äôve been in the cave. You are not hungry. You don‚Äôt feel you have been sleeping. You wonder whether to try to walk back home by moonlight or whether to wait for dawn, rather than risk your footing on the steep and rocky trail.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;All of this was intriguing enough already for a kid like me, but now came the kicker. The book asked me ‚Äî asked me!! ‚Äî whether I wanted to ‚Äústart back home‚Äù (‚Äúturn to page 4‚Äù) or to ‚Äúwait‚Äù (‚Äúturn to page 5‚Äù). This was the book I had never known I needed, a vehicle for the imagination like no other.&lt;/p&gt;
    &lt;p&gt;I took The Cave of Time home and devoured it that weekend. Through the simple expedient of flipping through its pages, I time-traveled to the age of dinosaurs, to the Battle of Gettysburg, to London during the Blitz, to the building of the Great Wall of China, to the Titanic and the Ice Age and the Middle Ages. Much of this history was entirely new to me, igniting whole new avenues of interest. Today, it‚Äôs all too easy to see all of the limitations and infelicities of The Cave of Time and its successors: a book of 115 pages that had, as it proudly trumpeted on the cover, 40 possible endings meant that the sum total of any given adventure wasn‚Äôt likely to span more than about three choices if you were lucky. But to a lonely, hyper-imaginative eight-year-old, none of that mattered. I was well and truly smitten, not so much by what the book was as by what I wished it to be, by what I was able to turn it into in my mind by the sheer intensity of that wish.&lt;/p&gt;
    &lt;p&gt;I remained a devoted Choose Your Own Adventure reader for the next couple of years. Back in those days, each book could be had for just $1.25, well within reach of a young boy‚Äôs allowance even at a time when a dollar was worth a lot more than it is today. Each volume had some archetypal-feeling adventurous theme that made it catnip for a kid who was also discovering Jules Verne and beginning to flirt with golden-age science fiction (the golden age being, of course, age twelve): deep-sea diving, a journey by hot-air balloon, the Wild West, a cross-country auto race, the Egyptian pyramids, a hunt for the Abominable Snowman. What they evoked in me was as important as what was actually printed on the page; each was a springboard for another weekend of fantasizing about exotic undertakings where nobody mocked you because you had two left feet in gym class and spoke with a stubbornly persistent Northern accent. And each was a springboard for learning as well; this process usually started with pestering my parents, and then, if I didn‚Äôt get everything I needed from that source, ended with me turning to the family set of Encyclopedia Britannica in the study. (I remember how when reading Journey Under the Sea I was confused by frequent references to ‚Äúthe bends.‚Äù I asked my mom what that meant, and, bless her heart, she said she thought the bends were diarrhea. Needless to say, this put a whole new spin on my underwater exploits until I finally did a bit of my own research about diving.)&lt;/p&gt;
    &lt;p&gt;Inevitably, I did begin to see the limitations of the format in time ‚Äî right about the time that some of my nerdier classmates, whom I had by now managed to connect with, started to show me a tabletop game called Dungeons &amp;amp; Dragons. Choose Your Own Adventure had primed me to understand and respond to it right away; it would be no exaggeration to say that I saw this game that would remake so much of the entertainment landscape in its image as simply a better, less constrained take on the same core concept. Ditto the computer games that I began to notice in a corner of the bookstore I haunted circa 1984. When Infocom promised me that playing one of their games meant ‚Äúwaking up inside a story,‚Äù I knew exactly what they must mean: Choose Your Own Adventure done right. For the Christmas of 1984, I convinced my parents to buy me a disk drive for the Commodore 64 they had bought me the year before. And so the die was cast. If Choose Your Own Adventure hadn‚Äôt come along, I don‚Äôt think that I would be the Digital Antiquarian today.&lt;/p&gt;
    &lt;p&gt;But since I am the Digital Antiquarian, I have my usual array of questions to ask. Where did Choose Your Own Adventure, that gateway drug for the first generation to be raised on interactive media, come from? Who was responsible for it? The most obvious answer is the authors Edward Packard and R.A. Montgomery, one or the other of whose name could be seen on most of the early books in the series. But two authors alone do not a cultural phenomenon make.&lt;/p&gt;
    &lt;p/&gt;
    &lt;quote&gt;
      &lt;p&gt;‚ÄúWill you read me a story?‚Äù&lt;/p&gt;
      &lt;p&gt;‚ÄúRead you a story? What fun would that be? I‚Äôve got a better idea: let‚Äôs tell a story together.‚Äù&lt;/p&gt;
      &lt;p&gt;‚Äî Adam Cadre, Photopia&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;During the twentieth century, when print still ruled the roost, the hidden hands behind the American cultural zeitgeist were the agents, editors, and marketers in and around the big Manhattan publishing houses, who decided which books were worth publishing and promoting, who decided what they would look like and even to a large extent how they would read. No one outside of the insular world of print publishing knew these people‚Äôs names, but the power they had to shape hearts and minds was enormous ‚Äî arguably more so than that of any of the writers they served. After all, even the most prolific author of fiction or non-fiction usually couldn‚Äôt turn out more than one book per year, whereas an agent or editor could quietly, anonymously leave her fingerprints on dozens. Amy Berkower, a name I‚Äôm pretty sure you‚Äôve never heard of, is a fine case in point.&lt;/p&gt;
    &lt;p&gt;Berkower joined Writers House, one of the most prestigious of the New York literary agencies, during the mid-1970s as a ‚Äúsecretarial girl.‚Äù Having shown herself to be an enthusiastic go-getter by working long hours and sitting in on countless meetings, she was promoted to the role of agent in 1977, but assigned to ‚Äújuvenile publishing,‚Äù largely because nobody else in the organization wanted to work with such non-prestigious books. Yet the assignment suited Berkower just fine. ‚ÄúAs a kid, I read and loved Nancy Drew before I went on to Camus,‚Äù she says. ‚ÄúI was in the right place at the right time. I didn‚Äôt have the bias that juvenile series wouldn‚Äôt lead to Camus.‚Äù&lt;/p&gt;
    &lt;p&gt;Thus when a fellow named Ray Montgomery came to her with a unique concept he called Adventures of You, he found a receptive audience. Montgomery was the co-owner of a small press called Vermont Crossroads, far removed from the glitz and glamor of Manhattan. Crossroads‚Äôs typical fare was esoteric volumes like Hemingway in Michigan and The Male Nude in Photography that generally weren‚Äôt expected to break four digits in total unit sales. A few years earlier, however, Montgomery had himself been approached by Edward Packard, a lawyer by trade who had already pitched a multiple-choice children‚Äôs book called Sugarcane Island to what felt like every other publisher in the country without success.&lt;/p&gt;
    &lt;p&gt;As he would find himself relating again and again to curious journalists in the decades to come, Packard had come up with his idea for an interactive book by making a virtue of necessity. During the 1960s, he was an up-and-coming attorney who worked long days in Manhattan, to which he commuted by train from his and his wife‚Äôs home in Greenwich, Connecticut. He often arrived home in the evening just in time to put his two daughters to bed. They liked to be told a bedtime story, but Packard was usually so exhausted that he had trouble coming up with one. So, he slyly enlisted his daughters‚Äô help with the creative process. He would feed them a little bit of a story in which they were the stars, then ask them what they wanted to do next. Their answers would jog his tired imagination, and he would be off and running once again.&lt;/p&gt;
    &lt;p&gt;Sometimes, though, the girls would each want to do something different. ‚ÄúWhat would happen if you wrote both endings?‚Äù Packard mused to himself. A long-time frustrated writer as well as a self-described ‚Äúlawyer who was never comfortable with the law,‚Äù Packard began to wonder whether he could turn his interactive bedtime stories into a new kind of book. By as early as 1969, he had invented the classic Choose Your Own Adventure format ‚Äî turn to this page to do this, turn to that page to do that ‚Äî and produced his first finished work in the style: the aforementioned Sugarcane Island, about a youngster who gets swept off the deck of a scientific research vessel by a sudden tidal wave and washed ashore on a mysterious Pacific island that has monsters, pirates, sharks, headhunters, and many another staple of more traditional children‚Äôs adventure fiction to contend with.&lt;/p&gt;
    &lt;p&gt;He was sure that it was ‚Äúsuch a wonderful idea, I‚Äôd immediately find a big publisher.‚Äù He signed on with an agent, who ‚Äúsaid he would be surprised if there were no takers,‚Äù recalls Packard. ‚ÄúThen he proceeded to be surprised.‚Äù One rejection letter stated that ‚Äúit‚Äôs hard enough to get children to read, and you‚Äôre just making it harder with all these choices.‚Äù Letters like that came over and over again, over a period of years.&lt;/p&gt;
    &lt;p&gt;By 1975, Edward Packard was divorced from both his agent and his wife. With his daughters no longer of an age to beg for bedtime stories, he had just about resigned himself to being a lawyer forever. Then, whilst flipping through an issue of Vermont Life during a stay at a ski lodge, he happened upon a small advertisement from Crossroads Press. ‚ÄúAuthors Wanted,‚Äù it read. Crossroads wasn‚Äôt the bright-lights, big-city publisher Packard had once dreamed of, but on a lark he sent a copy of Sugarcane Island to the address in the magazine.&lt;/p&gt;
    &lt;p&gt;It arrived on the desk of Ray Montgomery, who was instantly intrigued. ‚ÄúI Xeroxed 50 copies of Ed‚Äôs manuscript and took it to a reading teacher in Stowe,‚Äù Montgomery told The New York Times in 1981. ‚ÄúHis kids ‚Äî third grade through junior high ‚Äî couldn‚Äôt get enough of it.‚Äù Satisfied by that proof of concept, Montgomery agreed to publish the book. Crossroads Press sold 8000 copies of Sugarcane Island over the next couple of years, a figure that was ‚Äúunbelievable‚Äù by their modest standards. Montgomery was inspired to pen a book of his own in the same style, which he called Journey Under the Sea. The budding series was given the name Adventures of You ‚Äî a proof that, whatever else they may have had going for them, branding was not really Crossroads Press‚Äôs strength.&lt;/p&gt;
    &lt;p&gt;Indeed, Montgomery himself was well able to see that he had stumbled over a concept that was too big for his little press. He sent the two extant books to Amy Berkower at Writers House and asked her what she thought. Having grown up on Nancy Drew, she was inclined to judge them less on their individual merits than on their prospects as a franchise in the making. A concept this new, she judged, had to have a strong brand of its own in order for children to get used to it. It would take her some time to find a publisher who agreed with her.&lt;/p&gt;
    &lt;p&gt;In the meantime, Edward Packard, heartened by the relative success of Sugarcane Island, was writing more interactive books. Although their names were destined to be indelibly linked in the annals of pop-culture history, Packard and Montgomery would never really be friends; they would always have a somewhat prickly, contentious relationship with one another. In an early signal of this, Packard chose not to publish more books through Crossroads. Instead he convinced the mid-list Philadelphia-based publisher J.B. Lippincott to take on Deadwood City, a Western, and Third Planet from Altair, a sci-fi tale. These served ironically to confirm Amy Berkower‚Äôs belief that there needed to be a concerted push behind the concept as a branded series; released with no fanfare whatsoever, neither sold all that well. Yet Lippincott did do Packard one brilliant service. Above the titles on the covers of the books, it placed the words ‚ÄúChoose your own adventures in the Wild West!‚Äù and ‚ÄúChoose your own adventures in outer space!‚Äù There was a brand in the offing in those phrases, even if Lippincott didn‚Äôt realize it.&lt;/p&gt;
    &lt;p&gt;For her part, Berkower was now more convinced than ever that this book-by-book approach was the wrong one. There needed to be a lot of these books, quickly, in order for them to take off properly. She made the rounds of the big publishing houses one more time. She finally found the ally she was looking for in Jo√´lle Delbourgo at Bantam Books. Delbourgo recalls getting ‚Äúreally excited‚Äù by the concept: ‚ÄúI said, ‚ÄòAmy, this is revolutionary.‚Äô This is pre-computer, remember. The idea of interactive fiction, choosing an ending, was fresh and novel. It tapped into something very fundamental. I remember how I felt when I read the books, and how excited I got, the clarity I had about them.‚Äù&lt;/p&gt;
    &lt;p&gt;Seeing eye to eye on what needed to be done to cement the concept in the minds of the nation‚Äôs children, the two women drew up a contract under whose terms Bantam would publish an initial order of no fewer than six books in two slates of three. They would appear under a distinctive series trade dress, with each volume numbered to feed young readers‚Äô collecting instinct. Barbara Marcus, Bantam‚Äôs marketing director for children‚Äôs books, needed only slightly modify the phrases deployed by J.B. Lippincott to create the perfect, pithy, and as-yet un-trademarked name for the series: Choose Your Own Adventure.&lt;/p&gt;
    &lt;p&gt;Berkower was acting as the agent of Montgomery alone up to this point. There are conflicting reports as to how and why Packard was brought into the fold. The widow of Ray Montgomery, who died in 2014, told The New Yorker in 2022 that her husband‚Äôs innate sense of fair play, plus the need to provide a lot of books quickly, prompted him to voluntarily bring Packard on as an equal partner. Edward Packard told the same magazine that it was Bantam who insisted that he be included, possibly in order to head off potential legal problems in the future.&lt;/p&gt;
    &lt;p&gt;At any rate, the first three Choose Your Own Adventure paperbacks arrived in bookstores in July of 1979. They were The Cave of Time, a new effort by Packard, written with some assistance from his daughter Andrea, she for whom he had first begun to tell his interactive stories; Montgomery‚Äôs journeyman Journey Under the Sea; and By Balloon to the Sahara, which Packard and Montgomery had subcontracted out to Douglas Terman, normally an author of adult military thrillers. Faced with an advertising budget that was almost nonexistent, Barbara Marcus devised an unusual grass-roots marketing strategy: ‚ÄúWe did absolutely nothing except give the books away. We gave thousands of books to our salesmen and told them to give five to each bookseller and tell him to give them to the first five kids into his shop.‚Äù&lt;/p&gt;
    &lt;p&gt;The series sold itself, just as Marcus had believed it would. As The New York Times would soon write with a mixture of bemusement and condescension, it proved ‚Äúcontagious as chickenpox.‚Äù By September of 1980, around the time that I first discovered The Cave of Time, Publishers Weekly could report that Choose Your Own Adventure had become a ‚Äúbonanza‚Äù for Bantam, which had sold more than 1 million copies of the first six volumes, with Packard and Montgomery now contracted to provide many more. A year later, eleven books in all had come out and the total sold was 4 million, with the series accounting for eight of the 25 bestselling children‚Äôs books at B. Dalton‚Äôs, the nation‚Äôs largest bookstore chain. A year after that, 10 million copies had been sold. By decade‚Äôs end, the total domestic sales of Choose Your Own Adventure would reach 34 million copies, with possibly that many or more again having been sold internationally after being translated into dozens of languages. The series was approaching its hundredth numbered volume by that point. It was a few years past its commercial peak already, but would continue on for another decade, until 184 volumes in all had come out.&lt;/p&gt;
    &lt;p&gt;Edward Packard, who turned 50 in 1981, could finally call himself an author rather than a lawyer by trade ‚Äî and an astonishingly successful author at that, if not one who was likely to be given any awards by the literary elite. He and Ray Montgomery alone wrote about half of the 184 Choose Your Own Adventure installments. Packard‚Äôs prose was consistently solid and evocative without ever feeling like he was writing down to his audience, as the extract from The Cave of Time near the beginning of this article will attest; not all authors of children‚Äôs books, then or now, would dare to use a word like ‚Äúphosphorescent.‚Äù If Montgomery was generally a less skilled wordsmith than Packard, and one who displayed less interest in producing internally consistent story spaces ‚Äî weaknesses that I could see even as a young boy ‚Äî he does deserve a full measure of credit for the pains he took to get the series off the ground in the first place. Looking back on the long struggle to get his brainstorm into print, Packard liked to quote the philosopher Arthur Schopenhauer: ‚ÄúEvery original idea is first ridiculed, then vigorously attacked, and finally taken for granted.‚Äù&lt;/p&gt;
    &lt;p&gt;Although Packard at least was always careful to make his protagonists androgynous, it was no secret that Choose Your Own Adventure appealed primarily to boys ‚Äî which was no bad thing on the whole, given that it was also no secret that reading in general was a harder sell with little boys than it was with little girls. Some educators and child psychologists kvetched about the violence that was undoubtedly one of the sources of the series‚Äôs appeal for boys ‚Äî in just about all of the books, it was disarmingly easy to get yourself flamboyantly and creatively killed ‚Äî but Packard was quick to counter that the mayhem was all very stylized, ‚Äúexaggerated and melodramatic‚Äù rather than ‚Äúharsh or nasty.‚Äù ‚ÄúStupid‚Äù choices were presented to you all the time, he noted, but never ‚Äúcruel‚Äù ones: ‚ÄúYou as [the] reader never hurt anyone.‚Äù&lt;/p&gt;
    &lt;p&gt;One had to be a publishing insider to know that this ‚Äúboys series‚Äù owed its enormous success as much to the packaging and promotional skills of three women ‚Äî Amy Berkower, Jo√´lle Delbourgo, and Barbara Marcus ‚Äî as it did to the literary talents of Packard and Montgomery. Berkower in particular became a superstar within the publishing world in the wake of Choose Your Own Adventure. Incredibly, the latter became only her second most successful children‚Äôs franchise, after the girl-focused Sweet Valley High, which could boast of 54 million copies sold domestically by the end of the 1980s; meanwhile The Baby-Sitters Club was coming up fast behind Choose Your Own Adventure, with 27 million copies sold. In short, her books were reaching millions upon millions of children every single month. Small wonder that she was made a full partner at Writers House in 1988; she was moving far more books each month than anyone else there.&lt;/p&gt;
    &lt;p&gt;Of course, any hit on the scale of Choose Your Own Adventure is bound to be copied. And this hit most certainly was, prolifically and unashamedly. During the middle years of the 1980s, when the format was at its peak, interactive books had whole aisles dedicated to them in bookstores. Which Way?, Decide Your Own Adventure, Pick-a-Path, Twisted Tales‚Ä¶ branders did what they could when the best brand was already taken. While Choose Your Own Adventure remained archetypal in its themes and settings, other lines were unabashedly idiosyncratic: anyone up for a Do-It-Yourself Jewish Adventure? Publishers were quick to leverage other properties for which they owned the rights, from Doctor Who to The Lord of the Rings. TSR, the maker of that other school-cafeteria sensation Dungeons &amp;amp; Dragons, introduced an interactive-book line drawn from the game; even this website‚Äôs old friend Infocom came out with Zork books, written by the star computer-game implementor Steve Meretzky. Many of these books were content with the Choose Your Own Adventure approach of nothing but chunks of text tied to arbitrarily branching choices, but others grafted rules systems onto the format to effectively become solo role-playing games packaged as paperback books, with character creation and advancement, a dice-driven combat system, etc. The most successful of these lines was Fighting Fantasy, a name that is today almost as well-remembered as Choose Your Own Adventure itself in some quarters.&lt;/p&gt;
    &lt;p&gt;The gamebook boom was big and real, but relatively short-lived. By 1987, the decline had begun, for both Choose Your Own Adventure and all of the copycats and expansions upon its formula that it had spawned. Although a few of the most lucrative series, like Fighting Fantasy, would join the ur-property of the genre in surviving well into the 1990s, the majority were already starting to shrivel and fall away like apples in November. Demian Katz, the Internet‚Äôs foremost archivist of gamebooks, notes that this pattern has tended to hold true ‚Äúin every country‚Äù where they make an appearance: ‚ÄúA few come out, they become explosively popular, a flood of knock-offs are released, they reach critical mass and then drop off into nothing.‚Äù It isn‚Äôt hard to spot the reason why in the context of 1980s North America. Computers were becoming steadily more commonplace ‚Äî computers that were capable of bringing vastly more flexible forms of interactive storytelling to American children, via games that didn‚Äôt require one to read the same passages of text over and over again or to toss dice and keep track of a list of statistics on paper. The same pattern would be repeated elsewhere, such as in the former Soviet countries, most of which experienced their own gamebook boom and bust during the 1990s. It seems that the arrival of the commercial mass-market publishing infrastructure that makes gamebooks go is generally followed in short order by the arrival of affordable digital technology for the home, which stops them cold.&lt;/p&gt;
    &lt;p&gt;In the United States, Bantam Books tried throughout the 1990s to make Choose Your Own Adventure feel relevant to the children of that decade, introducing a more photo-realistic art style to accompany edgier, more traditionally novelistic plots. None of it worked. In 1999, after a good twelve years of slowly but steadily declining sales, Bantam finally pulled the plug on the series. Choose Your Own Adventure became just another nostalgic relic of the day-glo decade, to be placed on the shelf next to Michael Jackson‚Äôs Thriller, a Jane Fonda workout video, and that old Dungeons &amp;amp; Dragons Basic Set.&lt;/p&gt;
    &lt;p&gt;As of this writing, Choose Your Own Adventure is still around in a way, but the only real raison d‚Äô√™tre it has left is nostalgia. In 2003, Ray Montgomery saw that Bantam Books had let the trademark for the series lapse, and formed his own company called Chooseco to try to revive it, mostly by republishing the old books that he had written himself. He met with mixed results at best. Since Montgomery‚Äôs death in 2014, Chooseco has continued to be operated by his family, who have used it increasingly as an instrument of litigation. In 2020, for example, Netflix agreed to settle for an undisclosed sum a lawsuit over ‚ÄúBandersnatch,‚Äù a bold interactive episode of the critically lauded streaming series Black Mirror whose script unwisely mentioned the book series from which it drew inspiration.&lt;/p&gt;
    &lt;p&gt;A worthier successor on the whole is Choice Of Games, a name whose similarity to Choose Your Own Adventure can hardly be coincidental. Born out of a revival of the old menu-driven computer game Alter Ego, Choice Of has released dozens of digital branching stories over the past fifteen years. In being more adventurous than literary and basing themselves around broad, archetypal ideas ‚Äî Choice of the Dragon, Choice of Broadsides, Choice of the Vampire ‚Äî these games, which can run on just about any digital device capable of putting words on a screen, have done a fine job of carrying the spirit of Choose Your Own Adventure forward into this century. That said, there is one noteworthy difference: they are aimed at post-pubescent teens and adults ‚Äî perhaps ones with fond memories of Choose Your Own Adventure ‚Äî instead of children. ‚ÄúPlay as male, female, or nonbinary; cis or trans; gay, straight, or bisexual; asexual and/or aromantic; allosexual and/or alloromantic; monogamous or polyamorous!‚Äù (Boring middle-aged married guy that I am, I must confess that I have no idea what three of those words even mean.)&lt;/p&gt;
    &lt;p&gt;Edward Packard, the father of it all, is still with us at age 94, still blogging from time to time, still a little bemused at how he became one of the most successful working authors in the United States during the 1980s. In a plot twist almost as improbable as some of his stranger Choose Your Own Adventure endings, his grandson is David Corenswet, the latest actor to play Superman on the silver screen. Never a computer gamer, Packard would doubtless be baffled by most of what is featured on this website. And yet I owe him an immense debt of gratitude, for giving me my first glimpse of the potential of interactive storytelling, thus igniting a lifelong obsession. I suspect that more than one of you out there might be able to say the same.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; Did you enjoy this article? If so, please think about pitching in to help me make many more like it. You can pledge any amount you like.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p&gt;Sources: Publishers Weekly of February 29 1980, September 26 1980, October 8 1982, July 25 1986, August 12 1988, December 1 1989, July 6 1990, February 23 1998; New York Times of August 25 1981; Beaver County Times of March 30 1986; New Yorker of September 19 2022; Journal of American Studies of May 2021.&lt;/p&gt;
    &lt;p&gt;Online sources include ‚ÄúA Brief History of Choose Your Own Adventure‚Äú by Jake Rossen at Mental Floss, ‚ÄúChoose Your Own Adventure: How The Cave of Time Taught Us to Love Interactive Entertainment‚Äù by Grady Hendrix at Slate, ‚ÄúThe Surprising Long History of Choose Your Own Adventure Stories‚Äù by Jackie Mansky at the Smithsonian‚Äôs website, and ‚ÄúMeet the 91-Year-Old Mastermind Behind Choose Your Own Adventure‚Äú by Seth Abramovitch at The Hollywood Reporter. Plus Edward Packard‚Äôs personal site. And Damian Katz‚Äôs exhaustive gamebook site is essential to anyone interested in these subjects; all of the book covers shown in this article were taken from his site.&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell role="head"&gt;‚Üë1&lt;/cell&gt;
        &lt;cell&gt;A truly incredible figure of 250 million copies sold is frequently cited for the original Choose Your Own Adventure series today, apparently on the basis of a statement released in January of 2007 by Choosco, a company which has repeatedly attempted to reboot the series in the post-millennial era. Based upon the running tally of sales which appeared in Publishers Weekly during the books‚Äô 1980s heyday, I struggle to see how this figure can be correct. That journal of record reported 34 million Choose Your Own Adventure books sold in North America as of December 1, 1989. By that time, the series‚Äôs best years as a commercial proposition were already behind it. Even when factoring in international sales, which were definitely considerable, it is difficult to see how the total figure could have exceeded 100 million books sold at the outside. Having said that, however, the fact remains that the series sold an awful lot of books by any standard.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.filfre.net/2025/09/choose-your-own-adventure/"/><published>2025-09-22T18:22:53+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337483</id><title>A collection of technical things every software developer should know about</title><updated>2025-09-22T19:08:09.238650+00:00</updated><content>&lt;doc fingerprint="f41750145f3257e"&gt;
  &lt;main&gt;
    &lt;p&gt;A collection of (mostly) technical things every software developer should know.&lt;/p&gt;
    &lt;p&gt;‚òùÔ∏è These are resources I can recommend to every programmer regardless of their skill level or tech stack&lt;/p&gt;
    &lt;p&gt;Highly opinionated üí£. Not backed by science. Comes in no particular order ‚ôªÔ∏è&lt;/p&gt;
    &lt;p&gt;U like it? ‚≠ê it and share with a friendly developer! U don't like it? Watch the doggo üê∂&lt;/p&gt;
    &lt;p&gt;P.S. You don't need to know all of that by heart to be a programmer. But knowing the stuff will help you become better! üí™&lt;/p&gt;
    &lt;p&gt;P.P.S. Contributions are welcome!&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üé• Map of Computer Science&lt;/item&gt;
      &lt;item&gt;üé• 40 Key Computer Science Concepts Explained In Layman‚Äôs Terms&lt;/item&gt;
      &lt;item&gt;üìÑ Computer Science Roadmap&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Awesome Falsehoods üíä Curated list of falsehoods programmers believe in. Check for things you do not know about Strings, Addresses, Names, Numbers, Emails, Timezones and Dates and more.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Big O Cheatsheet&lt;/item&gt;
      &lt;item&gt;üìñ Computer Science Distilled&lt;/item&gt;
      &lt;item&gt;üìñ Grokking Algorithms&lt;/item&gt;
      &lt;item&gt;üìñ Introduction to Algorithms&lt;/item&gt;
      &lt;item&gt;Algorithms Visualization&lt;/item&gt;
      &lt;item&gt;Algorithms for Competitive Programming&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üé• UC Berkeley, Data Structures Course&lt;/item&gt;
      &lt;item&gt;Foundations of Data Structures - EDX&lt;/item&gt;
      &lt;item&gt;Data Structures - Coursera&lt;/item&gt;
      &lt;item&gt;Mathematics for Computer Science - Eric Lehman&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üìñ How to Count&lt;/item&gt;
      &lt;item&gt;üìÑ Floating Point Guide&lt;/item&gt;
      &lt;item&gt;üìÑ What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/item&gt;
      &lt;item&gt;üìÑ Basic Number Theory Every Programmer Should Know...&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üìñ Understanding Distributed Systems&lt;/item&gt;
      &lt;item&gt;üìñ Designing Data-Intensive Applications&lt;/item&gt;
      &lt;item&gt;üìú Designs, Lessons and Advice from Building Large Distributed Systems&lt;/item&gt;
      &lt;item&gt;üìú Time, Clocks and the Ordering of Events in a Distributed System&lt;/item&gt;
      &lt;item&gt;üìÑ There is No Now&lt;/item&gt;
      &lt;item&gt;üìÑ Jepsen: how different databases behave under partition&lt;/item&gt;
      &lt;item&gt;üìú Fallacies of Distributed Computing Explained&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üìñ Security Programming&lt;/item&gt;
      &lt;item&gt;üìÑ Rolling Your Own Crypto&lt;/item&gt;
      &lt;item&gt;üìÑ Cryptographic Right Answers&lt;/item&gt;
      &lt;item&gt;üìÑ An Open Letter to Developers Everywhere (About Cryptography)&lt;/item&gt;
      &lt;item&gt;üìñ Foundations of Security: What Every Programmer Needs to Know&lt;/item&gt;
      &lt;item&gt;OWASP Top 10&lt;/item&gt;
      &lt;item&gt;Web Application Exploits and Defenses&lt;/item&gt;
      &lt;item&gt;üìÑ Hashing, Encryption and Encoding&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üìú A Field Guide to Boxology&lt;/item&gt;
      &lt;item&gt;üìú Out of the Tar Pit&lt;/item&gt;
      &lt;item&gt;üìú No Silver Bullet ‚Äî Essence and Accidents of Software Engineering&lt;/item&gt;
      &lt;item&gt;üé• Growing a Language&lt;/item&gt;
      &lt;item&gt;üé• CQRS and Event Sourcing&lt;/item&gt;
      &lt;item&gt;üìñ Practical Object Oriented Design in Ruby&lt;/item&gt;
      &lt;item&gt;üé• Evolutionary Software Architectures&lt;/item&gt;
      &lt;item&gt;System Design: A Primer&lt;/item&gt;
      &lt;item&gt;üìÑ How JavaScript works: part-1, 2, 3, 4&lt;/item&gt;
      &lt;item&gt;üé• Entity-Component-System Architecture with Unity by example&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üé• Category Theory in Life&lt;/item&gt;
      &lt;item&gt;üé• Simple Made Easy&lt;/item&gt;
      &lt;item&gt;üìÑ Speed In Software Development&lt;/item&gt;
      &lt;item&gt;üé• #NoEstimates&lt;/item&gt;
      &lt;item&gt;üé• The Myth of the Genius Programmer&lt;/item&gt;
      &lt;item&gt;üé• Making Badass Developers&lt;/item&gt;
      &lt;item&gt;üìÑ The Ten Rules of a Zen Programmer&lt;/item&gt;
      &lt;item&gt;üìÑ The mythical 10x programmer&lt;/item&gt;
      &lt;item&gt;üìÑ The Debugging Mindset&lt;/item&gt;
      &lt;item&gt;üé• The Future of Programming&lt;/item&gt;
      &lt;item&gt;üìÑ The Good Software Development Manifesto&lt;/item&gt;
      &lt;item&gt;üé• All the Little Things&lt;/item&gt;
      &lt;item&gt;üìÑ Teach Yourself Programming in Ten Years&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üìñ Working Effectively with Legacy Code&lt;/item&gt;
      &lt;item&gt;üìñ The Art of Readable Code: Simple and Practical Techniques for Writing Better Code&lt;/item&gt;
      &lt;item&gt;üìñ Code Complete&lt;/item&gt;
      &lt;item&gt;üìñ Clean Code: A Handbook of Agile Software Craftsmanship&lt;/item&gt;
      &lt;item&gt;üìñ Test Driven Development: By Example&lt;/item&gt;
      &lt;item&gt;‚úÖ Going To Production Checklist&lt;/item&gt;
      &lt;item&gt;üìñ Release It!&lt;/item&gt;
      &lt;item&gt;üìñ Professor Frisby's Mostly Adequate Guide to Functional Programming&lt;/item&gt;
      &lt;item&gt;üìñ SICP: Structure and Interpretation of Computer Programs&lt;/item&gt;
      &lt;item&gt;üìÑ Thirteen Ways of Looking at a Turtle&lt;/item&gt;
      &lt;item&gt;üìú Programming Paradigms for Dummies: What Every Programmer Should Know&lt;/item&gt;
      &lt;item&gt;Learn X in Y Minutes Learn the basics of a language in a highly condensed way.&lt;/item&gt;
      &lt;item&gt;Hyperpolyglot Compare commonly used features of more or less similar languages side-by-side. Helps you to jump Python&amp;lt;-&amp;gt;Ruby, Ocaml&amp;lt;-&amp;gt;Haskell, etc.&lt;/item&gt;
      &lt;item&gt;üìÑ Pomodoro for Programmers&lt;/item&gt;
      &lt;item&gt;üìñ Site Reliability Engineering&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üí∞ Levels FYI&lt;lb/&gt;Salary stats for various tech companies. Better than Glassdoor.&lt;/item&gt;
      &lt;item&gt;üìÑ 10 Things Every Programmer Should Know For Their First Job&lt;/item&gt;
      &lt;item&gt;üìÑ How Much Do Software Engineers Really Make in Each City?&lt;/item&gt;
      &lt;item&gt;üìÑ Software Engineers Tenure in San Francisco&lt;/item&gt;
      &lt;item&gt;Software Engineering 101&lt;/item&gt;
      &lt;item&gt;üìñ The Passionate Programmer&lt;/item&gt;
      &lt;item&gt;üìñ Soft Skills: The software developer's life manual&lt;/item&gt;
      &lt;item&gt;üìñ The Complete Software Developer's Career Guide&lt;/item&gt;
      &lt;item&gt;üìñ Programming Beyond Practices: Be More Than Just a Code Monkey&lt;/item&gt;
      &lt;item&gt;A list of European Investors&lt;/item&gt;
      &lt;item&gt;üìÑ Ten Rules for Negotiating a Job Offer&lt;/item&gt;
      &lt;item&gt;üìÑ How To Interview As a Developer Candidate&lt;/item&gt;
      &lt;item&gt;üìÑ How To Get a Tech Job Abroad Faster&lt;/item&gt;
      &lt;item&gt;üìñ How To Be A STAR Engineer&lt;/item&gt;
      &lt;item&gt;üìÑ TL;DR; Stock Options&lt;/item&gt;
      &lt;item&gt;üìÑ Equity 101 for Startup Employees&lt;/item&gt;
      &lt;item&gt;üìñ Cracking the Coding Interview: 189 Programming Questions and Solutions&lt;/item&gt;
      &lt;item&gt;üî• Everything you need to know to get the job&lt;/item&gt;
      &lt;item&gt;üìñ Tech Interview Handbook&lt;/item&gt;
      &lt;item&gt;üìÑ Teach Yourself Programming in Ten Years&lt;/item&gt;
      &lt;item&gt;üìÑ What you should know as a founder of a software company&lt;/item&gt;
      &lt;item&gt;üé• Code Interview Prep &amp;amp; Programming Questions | Pramp&lt;/item&gt;
      &lt;item&gt;üìñ 97 things every programmer should know&lt;/item&gt;
      &lt;item&gt;üé• A Philosophy of Software Design | John Ousterhout | Talks at Google&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üåê Remotive.io: Startups hiring remotely&lt;/item&gt;
      &lt;item&gt;üåê Remote Work List for Developers&lt;/item&gt;
      &lt;item&gt;‚ö° NomadList&lt;/item&gt;
      &lt;item&gt;üìñ The Ultimate Guide to Remote Work&lt;/item&gt;
      &lt;item&gt;üè† Awesome Remote Job&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Awesome Mental Health&lt;lb/&gt;A curated list of awesome articles, websites and resources about mental health in the software industry.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;‚ù§Ô∏è Papers We Love&lt;/item&gt;
      &lt;item&gt;üì∞ The Morning Paper&lt;/item&gt;
      &lt;item&gt;üìú What Every Programmer Should Know About Memory&lt;/item&gt;
      &lt;item&gt;üìú Go To Statement Considered Harmful&lt;/item&gt;
      &lt;item&gt;üì∞ Arxiv&lt;/item&gt;
      &lt;item&gt;üì∞ Sci-hub&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;ü§ñ Abstract API's&lt;/item&gt;
      &lt;item&gt;Free For Dev&lt;/item&gt;
      &lt;item&gt;Public APIs&lt;/item&gt;
      &lt;item&gt;The Noun Project&lt;/item&gt;
      &lt;item&gt;Without Coding&lt;/item&gt;
      &lt;item&gt;Simpleicons&lt;/item&gt;
      &lt;item&gt;Learn Anything&lt;/item&gt;
      &lt;item&gt;repl.it&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Choose An Open Source License&lt;/item&gt;
      &lt;item&gt;Well-explained Software licenses in TLDR version&lt;/item&gt;
      &lt;item&gt;How open source licenses work and how to add them to your projects&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;üîó CodeForces&lt;/item&gt;
      &lt;item&gt;üîó CodeChef&lt;/item&gt;
      &lt;item&gt;üîó Coderbyte&lt;/item&gt;
      &lt;item&gt;üîó CodinGame&lt;/item&gt;
      &lt;item&gt;üîó Cs Academy&lt;/item&gt;
      &lt;item&gt;üîó HackerRank&lt;/item&gt;
      &lt;item&gt;üîó Spoj&lt;/item&gt;
      &lt;item&gt;üîó HackerEarth&lt;/item&gt;
      &lt;item&gt;üîó TopCoder&lt;/item&gt;
      &lt;item&gt;üîó Codewars&lt;/item&gt;
      &lt;item&gt;üîó Exercism&lt;/item&gt;
      &lt;item&gt;üîó CodeSignal&lt;/item&gt;
      &lt;item&gt;üîó Project Euler&lt;/item&gt;
      &lt;item&gt;üîó LeetCode&lt;/item&gt;
      &lt;item&gt;üîó Firecode.io&lt;/item&gt;
      &lt;item&gt;üîó InterviewBit&lt;/item&gt;
      &lt;item&gt;üîó uCoder&lt;/item&gt;
      &lt;item&gt;üîó LintCode&lt;/item&gt;
      &lt;item&gt;üîó CodeCombat&lt;/item&gt;
      &lt;item&gt;üîó InterviewCake&lt;/item&gt;
      &lt;item&gt;üîó At Coder&lt;/item&gt;
      &lt;item&gt;üîó Codility&lt;/item&gt;
      &lt;item&gt;üîó ICPC Problem Archive&lt;/item&gt;
      &lt;item&gt;üîó Codemia&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/mtdvio/every-programmer-should-know"/><published>2025-09-22T18:25:36+00:00</published></entry></feed>