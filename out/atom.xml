<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-07T17:32:12.663293+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45148944</id><title>We hacked Burger King: How auth bypass led to drive-thru audio surveillance</title><updated>2025-09-07T17:32:21.117891+00:00</updated><content/><link href="https://bobdahacker.com/blog/rbi-hacked-drive-thrus/"/></entry><entry><id>https://news.ycombinator.com/item?id=45152066</id><title>How the “Kim” dump exposed North Korea's credential theft playbook</title><updated>2025-09-07T17:32:20.835231+00:00</updated><content>&lt;doc fingerprint="3599949f0a828e4a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Inside the Kimsuky Leak: How the “Kim” Dump Exposed North Korea’s Credential Theft Playbook&lt;/head&gt;
    &lt;p&gt;Contents:&lt;lb/&gt;Part I: Technical Analysis&lt;lb/&gt;Part II: Goals Analysis&lt;lb/&gt;Part III: Threat Intelligence Report&lt;/p&gt;
    &lt;head rend="h2"&gt;Executive Summary&lt;/head&gt;
    &lt;p&gt;A rare and revealing breach attributed to a North Korean-affiliated actor, known only as “Kim” as named by the hackers who dumped the data, has delivered a new insight into Kimsuky (APT43) tactics, techniques, and infrastructure. This actor’s operational profile showcases credential-focused intrusions targeting South Korean and Taiwanese networks, with a blending of Chinese-language tooling, infrastructure, and possible logistical support. The “Kim” dump, which includes bash histories, phishing domains, OCR workflows, compiled stagers, and rootkit evidence, reflects a hybrid operation situated between DPRK attribution and Chinese resource utilization.&lt;/p&gt;
    &lt;p&gt;This report is broken down into three parts:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Technical Analysis of the dump materials&lt;/item&gt;
      &lt;item&gt;Motivation and Goals of the APT actor (group)&lt;/item&gt;
      &lt;item&gt;A CTI report compartment for analysts&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;While this leak only gives a partial idea of what the Kimusky/PRC activities have been, the material provides insight into the expansion of activities, nature of the actor(s), and goals they have in their penetration of the South Korean governmental systems that would benefit not only DPRK, but also PRC.&lt;/p&gt;
    &lt;p&gt;Without a doubt, there will be more coming out from this dump in the future, particularly if the burned assets have not been taken offline and access is still available, or if others have cloned those assets for further analysis. We may revisit this in the future if additional novel information comes to light.&lt;/p&gt;
    &lt;head rend="h1"&gt;Part I: Technical Analysis&lt;/head&gt;
    &lt;head rend="h2"&gt;The Leak at a Glance&lt;/head&gt;
    &lt;p&gt;The leaked dataset attributed to the “Kim” operator offers a uniquely operational perspective into North Korean-aligned cyber operations. Among the contents were terminal history files revealing active malware development efforts using NASM (Netwide Assembler), a choice consistent with low-level shellcode engineering typically reserved for custom loaders and injection tools. These logs were not static forensic artifacts but active command-line histories showing iterative compilation and cleanup processes, suggesting a hands-on attacker directly involved in tool assembly.&lt;/p&gt;
    &lt;p&gt;In parallel, the operator ran OCR (Optical Character Recognition) commands against sensitive Korean PDF documents related to public key infrastructure (PKI) standards and VPN deployments. These actions likely aimed to extract structured language or configurations for use in spoofing, credential forgery, or internal tool emulation.&lt;/p&gt;
    &lt;p&gt;Privileged Access Management (PAM) logs also surfaced in the dump, detailing a timeline of password changes and administrative account use. Many were tagged with the Korean string 변경완료 (“change complete”), and the logs included repeated references to elevated accounts such as oracle, svradmin, and app_adm01, indicating sustained access to critical systems.&lt;/p&gt;
    &lt;p&gt;The phishing infrastructure was extensive. Domain telemetry pointed to a network of malicious sites designed to mimic legitimate Korean government portals. Sites like nid-security[.]com were crafted to fool users into handing over credentials via advanced AiTM (Adversary-in-the-Middle) techniques.&lt;/p&gt;
    &lt;p&gt;Finally, network artifacts within the dump showed targeted reconnaissance of Taiwanese government and academic institutions. Specific IP addresses and .tw domain access, along with attempts to crawl .git repositories, reveal a deliberate focus on high-value administrative and developer targets.&lt;/p&gt;
    &lt;p&gt;Perhaps most concerning was the inclusion of a Linux rootkit using syscall hooking (khook) and stealth persistence via directories like /usr/lib64/tracker-fs. This highlights a capability for deep system compromise and covert command-and-control operations, far beyond phishing and data theft.&lt;/p&gt;
    &lt;p&gt;Artifacts recovered from the dump include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Terminal history files demonstrating malware compilation using NASM&lt;/item&gt;
      &lt;item&gt;OCR commands parsing Korean PDF documents related to PKI and VPN infrastructure&lt;/item&gt;
      &lt;item&gt;PAM logs reflecting password changes and credential lifecycle events&lt;/item&gt;
      &lt;item&gt;Phishing infrastructure mimicking Korean government sites&lt;/item&gt;
      &lt;item&gt;IP addresses indicating reconnaissance of Taiwanese government and research institutions&lt;/item&gt;
      &lt;item&gt;Linux rootkit code using syscall hooking and covert channel deployment&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Credential Theft Focus&lt;/head&gt;
    &lt;p&gt;The dump strongly emphasizes credential harvesting as a central operational goal. Key files such as 136백운규001_env.key (The presence of 136백운규001_env.key is a smoking gun indicator of stolen South Korean Government PKI material, as its structure (numeric ID + Korean name + .key) aligns uniquely with SK GPKI issuance practices and provides clear evidence of compromised, identity-tied state cryptographic keys.) This was discovered alongside plaintext passwords, that indicate clear evidence of active compromise of South Korea’s GPKI (Government Public Key Infrastructure). Possession of such certificates would allow for highly effective identity spoofing across government systems.&lt;/p&gt;
    &lt;p&gt;PAM logs further confirmed this focus, showing a pattern of administrative account rotation and password resets, all timestamped and labeled with success indicators (변경완료: Change Complete). The accounts affected were not low-privilege; instead, usernames like oracle, svradmin, and app_adm01, often used by IT staff and infrastructure services, suggested access to core backend environments.&lt;/p&gt;
    &lt;p&gt;These findings point to a strategy centered on capturing and maintaining access to privileged credentials and digital certificates, effectively allowing the attacker to act as an insider within trusted systems.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Leaked .key files (e.g., 136백운규001_env.key) with plaintext passwords confirm access to GPKI systems&lt;/item&gt;
      &lt;item&gt;PAM logs show administrative password rotations tagged with 변경완료 (change complete)&lt;/item&gt;
      &lt;item&gt;Admin-level accounts such as oracle, svradmin, and app_adm01 repeatedly appear in compromised logs&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Phishing Infrastructure&lt;/head&gt;
    &lt;p&gt;The operator’s phishing infrastructure was both expansive and regionally tailored. Domains such as nid-security[.]com and webcloud-notice[.]com mimicked Korean identity and document delivery services, likely designed to intercept user logins or deploy malicious payloads. More sophisticated spoofing was seen in sites that emulated official government agencies like dcc.mil[.]kr, spo.go[.]kr, and mofa.go[.]kr.&lt;/p&gt;
    &lt;p&gt;Burner email usage added another layer of operational tradecraft. The address jeder97271[@]wuzak[.]com is likely linked to phishing kits that operated through TLS proxies, capturing credentials in real time as victims interacted with spoofed login forms.&lt;/p&gt;
    &lt;p&gt;These tactics align with previously known Kimsuky behaviors but also demonstrate an evolution in technical implementation, particularly the use of AiTM interception rather than relying solely on credential-harvesting documents.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Domains include: nid-security[.]com, html-load[.]com, webcloud-notice[.]com, koala-app[.]com, and wuzak[.]com&lt;/item&gt;
      &lt;item&gt;Mimicked portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr&lt;/item&gt;
      &lt;item&gt;Burner email evidence: jeder97271[@]wuzak[.]com&lt;/item&gt;
      &lt;item&gt;Phishing kits leveraged TLS proxies for AiTM credential capture&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Malware Development Activity&lt;/head&gt;
    &lt;p&gt;Kim’s malware development environment showcased a highly manual, tailored approach. Shellcode was compiled using NASM, specifically with flags like -f win32, revealing a focus on targeting Windows environments. Commands such as make and rm were used to automate and sanitize builds, while hashed API call resolution (VirtualAlloc, HttpSendRequestA, etc.) was implemented to evade antivirus heuristics.&lt;/p&gt;
    &lt;p&gt;The dump also revealed reliance on GitHub repositories known for offensive tooling. TitanLdr, minbeacon, Blacklotus, and CobaltStrike-Auto-Keystore were all cloned or referenced in command logs. This hybrid use of public frameworks for private malware assembly is consistent with modern APT workflows.&lt;/p&gt;
    &lt;p&gt;A notable technical indicator was the use of the proxyres library to extract Windows proxy settings, particularly via functions like proxy_config_win_get_auto_config_url. This suggests an interest in hijacking or bypassing network-level security controls within enterprise environments.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Manual shellcode compilation via nasm -f win32 source/asm/x86/start.asm&lt;/item&gt;
      &lt;item&gt;Use of make, rm, and hash obfuscation of Win32 API calls (e.g., VirtualAlloc, HttpSendRequestA)&lt;/item&gt;
      &lt;item&gt;GitHub tools in use: TitanLdr, minbeacon, Blacklotus, CobaltStrike-Auto-Keystore&lt;/item&gt;
      &lt;item&gt;Proxy configuration probing through proxyres library (proxy_config_win_get_auto_config_url)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Rootkit Toolkit and Implant Structure&lt;/head&gt;
    &lt;p&gt;The Kim dump offers deep insight into a stealthy and modular Linux rootkit attributed to the operator’s post-compromise persistence tactics. The core implant, identified as vmmisc.ko (alternatively VMmisc.ko in some shells), was designed for kernel-mode deployment across multiple x86_64 Linux distributions and utilizes classic syscall hooking and covert channeling to maintain long-term undetected access.&lt;/p&gt;
    &lt;head rend="h3"&gt;Google Translation of Koh doc: Rootkit Endpoint Reuse Authentication Tool&lt;/head&gt;
    &lt;p&gt;“This tool uses kernel-level rootkit hiding technology, providing a high degree of stealth and penetration connection capability. It can hide while running on common Linux systems, and at the kernel layer supports connection forwarding, allowing reuse of external ports to connect to controlled hosts. Its communication behavior is hidden within normal traffic.&lt;/p&gt;
    &lt;p&gt;The tool uses binary merging technology: at compile time, the application layer program is encrypted and fused into a .ko driver file. When installed, only the .ko file exists. When the .ko driver starts, it will automatically decompress and release the hidden application-layer program.&lt;/p&gt;
    &lt;p&gt;Tools like chkrootkit, rkhunter, and management utilities (such as ps, netstat, etc.) are bypassed through technical evasion and hiding, making them unable to detect hidden networks, ports, processes, or file information.&lt;/p&gt;
    &lt;p&gt;To ensure software stability, all functions have also passed stress testing.&lt;/p&gt;
    &lt;p&gt;Supported systems: Linux Kernel 2.6.x / 3.x / 4.x, both x32 and x64 systems”.&lt;/p&gt;
    &lt;p&gt;Implant Features and Behavior&lt;/p&gt;
    &lt;p&gt;This rootkit exhibits several advanced features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Syscall Hooking: Hooks critical kernel functions (e.g., getdents, read, write) to hide files, directories, and processes by name or PID.&lt;/item&gt;
      &lt;item&gt;SOCKS5 Proxy: Integrated remote networking capability using dynamic port forwarding and chained routing.&lt;/item&gt;
      &lt;item&gt;PTY Backdoor Shell: Spawns pseudoterminals that operate as interactive reverse shells with password protection.&lt;/item&gt;
      &lt;item&gt;Encrypted Sessions: Session commands must match a pre-set passphrase (e.g., testtest) to activate rootkit control mode.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once installed (typically using insmod vmmisc.ko), the rootkit listens silently and allows manipulation via an associated client binary found in the dump. The client supports an extensive set of interactive commands, including:&lt;/p&gt;
    &lt;p&gt;+p # list hidden processes&lt;/p&gt;
    &lt;p&gt;+f # list hidden files&lt;/p&gt;
    &lt;p&gt;callrk # load client ↔ kernel handshake&lt;/p&gt;
    &lt;p&gt;exitrk # gracefully unload implant&lt;/p&gt;
    &lt;p&gt;shell # spawn reverse shell&lt;/p&gt;
    &lt;p&gt;socks5 # initiate proxy channel&lt;/p&gt;
    &lt;p&gt;upload / download # file transfer interface&lt;/p&gt;
    &lt;p&gt;These capabilities align closely with known DPRK malware behaviors, particularly from the Kimsuky and Lazarus groups, who have historically leveraged rootkits for lateral movement, stealth, persistence, and exfiltration staging.&lt;/p&gt;
    &lt;head rend="h2"&gt;Observed Deployment&lt;/head&gt;
    &lt;p&gt;Terminal history (.bash_history) shows the implant was staged and tested from the following paths:&lt;/p&gt;
    &lt;code&gt;.cache/vmware/drag_and_drop/VMmisc.ko

/usr/lib64/tracker-fs/vmmisc.ko

Execution logs show the use of commands such as:

insmod /usr/lib64/tracker-fs/vmmisc.ko

./client 192.168.0[.]39 testtest&lt;/code&gt;
    &lt;p&gt;These paths were not random—they mimic legitimate system service locations to avoid detection by file integrity monitoring (FIM) tools.&lt;/p&gt;
    &lt;p&gt;This structure highlights the modular, command-activated nature of the implant and its ability to serve multiple post-exploitation roles while maintaining stealth through kernel-layer masking.&lt;/p&gt;
    &lt;head rend="h2"&gt;Strategic Implications&lt;/head&gt;
    &lt;p&gt;The presence of such an advanced toolkit in the “Kim” dump strongly suggests the actor had persistent access to Linux server environments, likely via credential compromise. The use of kernel-mode implants also indicates long-term intent and trust-based privilege escalation. The implant’s pathing, language patterns, and tactics (e.g., use of /tracker-fs/, use of test passwords) match TTPs previously observed in operations attributed to Kimsuky, enhancing confidence in North Korean origin.&lt;/p&gt;
    &lt;head rend="h2"&gt;OCR-Based Recon&lt;/head&gt;
    &lt;p&gt;A defining component of Kim’s tradecraft was the use of OCR to analyze Korean-language security documentation. The attacker issued commands such as ocrmypdf -l kor+eng “file.pdf” to parse documents like 별지2)행정전자서명_기술요건_141125.pdf (“Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf”) and SecuwaySSL U_카달로그.pdf (“SecuwaySSL U_Catalog.pdf”). These files contain technical language around digital signatures, SSL implementations, and identity verification standards used in South Korea’s PKI infrastructure.&lt;/p&gt;
    &lt;p&gt;This OCR-based collection approach indicates more than passive intelligence gathering – it reflects a deliberate effort to model and potentially clone government-grade authentication systems. The use of bilingual OCR (Korean + English) further confirms the operator’s intention to extract usable configuration data across documentation types.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OCR commands used to extract Korean PKI policy language from PDFs such as (별지2)행정전자서명_기술요건_141125.pdf and SecuwaySSL U_카달로그.pdf &lt;list rend="ul"&gt;&lt;item&gt;별지2)행정전자서명_기술요건_141125.pdf → (Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf&lt;/item&gt;&lt;item&gt;SecuwaySSL U_카달로그.pdf → SecuwaySSL U_Catalog.pdf&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Command examples: ocrmypdf -l kor+eng “file.pdf”&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;SSH and Log-Based Evidence&lt;/head&gt;
    &lt;p&gt;The forensic evidence contained within the logs, specifically SSH authentication records and PAM outputs, provides clear technical confirmation of the operator’s tactics and target focus.&lt;/p&gt;
    &lt;p&gt;Several IP addresses stood out as sources of brute-force login attempts. These include 23.95.213[.]210 (a known VPS provider used in past credential-stuffing campaigns), 218.92.0[.]210 (allocated to a Chinese ISP), and 122.114.233[.]77 (Henan Mobile, China). These IPs were recorded during multiple failed login events, strongly suggesting automated password attacks against exposed SSH services. Their geographic distribution and known history in malicious infrastructure usage point to an external staging environment, possibly used for pivoting into Korean and Taiwanese systems.&lt;/p&gt;
    &lt;p&gt;Beyond brute force, the logs also contain evidence of authentication infrastructure reconnaissance. Multiple PAM and OCSP (Online Certificate Status Protocol) errors referenced South Korea’s national PKI authority, including domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. These errors appear during scripted or automated access attempts, indicating a potential strategy of credential replay or certificate misuse against GPKI endpoints, an approach that aligns with Kim’s broader PKI-targeting operations.&lt;/p&gt;
    &lt;p&gt;Perhaps the most revealing detail was the presence of successful superuser logins labeled with the Korean term 최고 관리자 (“Super Administrator”). This suggests the actor was not just harvesting credentials but successfully leveraging them for privileged access, possibly through cracked accounts, reused credentials, or insider-sourced passwords. The presence of such accounts in conjunction with password rotation entries marked as 변경완료 (“change complete”) further implies active control over PAM-protected systems during the operational window captured in the dump.&lt;/p&gt;
    &lt;p&gt;Together, these logs demonstrate a methodical campaign combining external brute-force access, PKI service probing, and administrative credential takeover, a sequence tailored for persistent infiltration and lateral movement within sensitive government and enterprise networks.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Brute-force IPs: 23.95.213[.]210, 218.92.0[.]210, 122.114.233[.]77&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;IP Address&lt;/cell&gt;
        &lt;cell&gt;Origin&lt;/cell&gt;
        &lt;cell&gt;Role / Threat Context&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;218.92.0[.]210&lt;/cell&gt;
        &lt;cell&gt;China Telecom (Jiangsu)&lt;/cell&gt;
        &lt;cell&gt;Part of Chinanet backbone, likely proxy or scanning node&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;23.95.213[.]210&lt;/cell&gt;
        &lt;cell&gt;Colocrossing (US)&lt;/cell&gt;
        &lt;cell&gt;Frequently used in brute-force and anonymized hosting for malware ops&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;122.114.233[.]77&lt;/cell&gt;
        &lt;cell&gt;Presumed PRC local ISP&lt;/cell&gt;
        &lt;cell&gt;Possibly mobile/ISP-based proxy used to obfuscate lateral movement&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PAM/OCSP errors targeting gva.gpki.go[.]kr, ivs.gpki.go[.]kr&lt;/item&gt;
      &lt;item&gt;Superuser login events under 최고 관리자 (Super Administrator)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Part II: Goals Analysis&lt;/head&gt;
    &lt;head rend="h2"&gt;Targeting South Korea: Identity, Infrastructure, and Credential Theft&lt;/head&gt;
    &lt;p&gt;The “Kim” operator’s campaign against South Korea was deliberate and strategic, aiming to infiltrate the nation’s digital trust infrastructure at multiple levels. A central focus was the Government Public Key Infrastructure (GPKI), where the attacker exfiltrated certificate files, including .key and .crt formats, some with plaintext passwords, and attempted repeated authentication against domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. OCR tools were used to parse Korean technical documents detailing PKI and VPN architectures, demonstrating a sophisticated effort to understand and potentially subvert national identity frameworks. These efforts were not limited to reconnaissance; administrative password changes were logged, and phishing kits targeted military and diplomatic webmail, including clones of mofa.go[.]kr and credential harvesting through adversary-in-the-middle (AiTM) proxy setups.&lt;/p&gt;
    &lt;p&gt;Beyond authentication systems, Kim targeted privileged accounts (oracle, unwadm, svradmin) and rotated credentials to maintain persistent administrative access, as evidenced by PAM and SSH logs showing elevated user activity under the title 최고 관리자 (“Super Administrator”). The actor also showed interest in bypassing VPN controls, parsing SecuwaySSL configurations for exploitation potential, and deployed custom Linux rootkits using syscall hooking to establish covert persistence on compromised machines. Taken together, the dump reveals a threat actor deeply invested in credential dominance, policy reconnaissance, and system-level infiltration, placing South Korea’s public sector identity systems, administrative infrastructure, and secure communications at the core of its long-term espionage objectives.&lt;/p&gt;
    &lt;head rend="h2"&gt;Taiwan Reconnaissance&lt;/head&gt;
    &lt;p&gt;Among the most notable aspects of the “Kim” leak is the operator’s deliberate focus on Taiwanese infrastructure. The attacker accessed a number of domains with clear affiliations to the island’s public and private sectors, including tw.systexcloud[.]com (linked to enterprise cloud solutions), mlogin.mdfapps[.]com (a mobile authentication or enterprise login portal), and the .git/ directory of caa.org[.]tw, which belongs to the Chinese Institute of Aeronautics, a government-adjacent research entity.&lt;/p&gt;
    &lt;p&gt;This last domain is especially telling. Accessing .git/ paths directly implies an attempt to enumerate internal source code repositories, a tactic often used to discover hardcoded secrets, API keys, deployment scripts, or developer credentials inadvertently exposed via misconfigured web servers. This behavior points to more technical depth than simple phishing; it indicates supply chain reconnaissance and long-term infiltration planning.&lt;/p&gt;
    &lt;p&gt;The associated IP addresses further reinforce this conclusion. All three, 163.29.3[.]119, 118.163.30[.]45, and 59.125.159[.]81, are registered to academic, government, or research backbone providers in Taiwan. These are not random scans; they reflect targeted probing of strategic digital assets.&lt;/p&gt;
    &lt;head rend="h2"&gt;Summary of Whois &amp;amp; Ownership Insights&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;118.163.30[.]45 &lt;list rend="ul"&gt;&lt;item&gt;Appears as part of the IP range used for the domain dtc-tpe.com[.]tw, linked to Taiwan’s HINET provider (118.163.30[.]46 )Site Indices page of HINET provider.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;163.29.3[.]119 &lt;list rend="ul"&gt;&lt;item&gt;Falls within the 163.29.3[.]0/24 subnet identified with Taiwanese government or institutional use, notably in Taipei. This corresponds to B‑class subnets assigned to public/government entities IP地址 (繁體中文).&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;59.125.159[.]81&lt;list rend="ul"&gt;&lt;item&gt;Belongs to the broader 59.125.159[.]0–59.125.159[.]254 block, commonly used by Taiwanese ISP operators such as Chunghwa Telecom in Taipei&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Taken together, this Taiwan-focused activity reveals an expanded operational mandate. Whether the attacker is purely DPRK-aligned or operating within a DPRK–PRC fusion cell, the intent is clear: compromise administrative and developer infrastructure in Taiwan, likely in preparation for broader credential theft, espionage, or disruption campaigns.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Targeted domains: tw.systexcloud[.]com, caa.org[.]tw/.git/, mlogin.mdfapps[.]com&lt;/item&gt;
      &lt;item&gt;IPs linked to Taiwanese academic/government assets: 163.29.3[.]119, 118.163.30[.]45, 59.125.159[.]81&lt;/item&gt;
      &lt;item&gt;Git crawling suggests interest in developer secrets or exposed tokens&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Hybrid Attribution Model&lt;/head&gt;
    &lt;p&gt;The “Kim” operator embodies the growing complexity of modern nation-state attribution, where cyber activities often blur traditional boundaries and merge capabilities across geopolitical spheres. This case reveals strong indicators of both North Korean origin and Chinese operational entanglement, presenting a textbook example of a hybrid APT model.&lt;/p&gt;
    &lt;p&gt;On one hand, the technical and linguistic evidence strongly supports a DPRK-native operator. Terminal environments, OCR parsing routines, and system artifacts consistently leverage Korean language and character sets. The operator’s activities reflect a deep understanding of Korean PKI systems, with targeted extraction of GPKI .key files and automation to parse sensitive Korean government PDF documentation. These are hallmarks of Kimsuky/APT43 operations, known for credential-focused espionage against South Korean institutions and diplomatic targets. The intent to infiltrate identity infrastructure is consistent with North Korea’s historical targeting priorities. Notably, the system time zone on Kim’s host machine was set to UTC+9 (Pyongyang Standard Time), reinforcing the theory that the actor maintains direct ties to the DPRK’s internal environment, even if operating remotely.&lt;/p&gt;
    &lt;p&gt;However, this actor’s digital footprint extends well into Chinese infrastructure. Browser and download logs reveal frequent interaction with platforms like gitee[.]com, baidu[.]com, and zhihu[.]com, highly popular within the PRC but unusual for DPRK operators who typically minimize exposure to foreign services. Moreover, session logs include simplified Chinese content and PRC browsing behaviors, suggesting that the actor may be physically operating within China or through Chinese-language systems. This aligns with longstanding intelligence on North Korean cyber operators stationed in Chinese border cities such as Shenyang and Dandong, where DPRK nationals often conduct cyber operations with tacit approval or logistical consent from Chinese authorities. These locations provide higher-speed internet, relaxed oversight, and convenient geopolitical proximity.&lt;/p&gt;
    &lt;p&gt;The targeting of Taiwanese infrastructure further complicates attribution. Kimsuky has not historically prioritized Taiwan, yet in this case, the actor demonstrated direct reconnaissance of Taiwanese government and developer networks. While this overlaps with Chinese APT priorities, recent evidence from the “Kim” dump, including analysis of phishing kits and credential theft workflows, suggests this activity was likely performed by a DPRK actor exploring broader regional interests, possibly in alignment with Chinese strategic goals. Researchers have noted that Kimsuky operators have recently asked questions in phishing lures related to potential Chinese-Taiwanese conflicts, implying interest beyond the Korean peninsula.&lt;/p&gt;
    &lt;p&gt;Some tooling overlaps with PRC-linked APTs, particularly GitHub-based stagers and proxy-resolving modules, but these are not uncommon in the open-source malware ecosystem and may reflect opportunistic reuse rather than deliberate mimicry.&lt;/p&gt;
    &lt;head rend="h2"&gt;IMINT Analysis: Visual Tradecraft and Cultural Camouflage&lt;/head&gt;
    &lt;p&gt;A review of image artifacts linked to the “Kim” actor reveals a deliberate and calculated use of Chinese social and technological visual content as part of their operational persona. These images, extracted from browser history and uploads attributed to the actor, demonstrate both strategic alignment with DPRK priorities and active cultural camouflage within the PRC digital ecosystem.&lt;/p&gt;
    &lt;p&gt;The visual set includes promotional graphics for Honor smartphones, SoC chipset evolution charts, Weibo posts featuring vehicle registration certificates, meme-based sarcasm, and lifestyle imagery typical of Chinese internet users. Notably, the content is exclusively rendered in simplified Chinese, reinforcing prior assessments that the operator either resides within mainland China or maintains a working digital identity embedded in Chinese platforms. Devices and services referenced, such as Xiaomi phones, Zhihu, Weibo, and Baidu, suggest intimate familiarity with PRC user environments.&lt;/p&gt;
    &lt;p&gt;Operationally, this behavior achieves two goals. First, it enables the actor to blend in seamlessly with native PRC user activity, which complicates attribution and helps bypass platform moderation or behavioral anomaly detection. Second, the content itself may serve as bait or credibility scaffolding (e.g. A framework to give the illusion of trust to allow for easier compromise ) in phishing and social engineering campaigns, especially those targeting developers or technical users on Chinese-language platforms.&lt;/p&gt;
    &lt;p&gt;Some images, such as the detailed chipset timelines and VPN or device certification posts, suggest a continued interest in supply chain reconnaissance and endpoint profiling—both tradecraft hallmarks of Kimsuky and similar APT units. Simultaneously, meme humor, sarcastic overlays, and visual metaphors (e.g., the “Kaiju’s tail is showing” idiom) indicate the actor’s fluency in PRC netizen culture and possible mockery of operational security breaches—whether their own or others’.&lt;/p&gt;
    &lt;p&gt;Taken together, this IMINT corpus supports the broader attribution model: a DPRK-origin operator embedded, physically or virtually, within the PRC, leveraging local infrastructure and social platforms to facilitate long-term campaigns against South Korea, Taiwan, and other regional targets while maintaining cultural and technical deniability.&lt;/p&gt;
    &lt;head rend="h2"&gt;Attribution Scenarios:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Option A: DPRK Operator Embedded in PRC&lt;list rend="ul"&gt;&lt;item&gt;Use of Korean language, OCR targeting of Korean documents, and focus on GPKI systems strongly suggest North Korean origin.&lt;/item&gt;&lt;item&gt;Use of PRC infrastructure (e.g., Baidu, Gitee) and simplified Chinese content implies the operator is physically located in China or benefits from access to Chinese internet infrastructure.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Use of Korean language, OCR targeting of Korean documents, and focus on GPKI systems strongly suggest North Korean origin.&lt;/item&gt;
      &lt;item&gt;Option B: PRC Operator Emulating DPRK&lt;list rend="ul"&gt;&lt;item&gt;Taiwan-focused reconnaissance aligns with PRC cyber priorities.&lt;/item&gt;&lt;item&gt;Use of open-source tooling and phishing methods shared with PRC APTs could indicate tactical emulation.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Taiwan-focused reconnaissance aligns with PRC cyber priorities.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The preponderance of evidence supports the hypothesis that “Kim” is a North Korean cyber operator embedded in China or collaborating with PRC infrastructure providers. This operational model allows the DPRK to amplify its reach, mask attribution, and adopt regional targeting strategies beyond South Korea, particularly toward Taiwan. As this hybrid model matures, it reflects the strategic adaptation of DPRK-aligned threat actors who exploit the permissive digital environment of Chinese networks to evade detection and expand their operational playbook.&lt;/p&gt;
    &lt;head rend="h2"&gt;Targeting Profiles&lt;/head&gt;
    &lt;p&gt;The “Kim” leak provides one of the clearest windows to date into the role-specific targeting preferences of the operator, revealing a deliberate focus on system administrators, credential issuers, and backend developers, particularly in South Korea and Taiwan.&lt;/p&gt;
    &lt;p&gt;In South Korea, the operator’s interest centers around PKI administrators and infrastructure engineers. The recovered OCR commands were used to extract technical details from PDF documents outlining Korea’s digital signature protocols, such as identity verification, certificate validation, and encrypted communications, components that form the backbone of Korea’s secure authentication systems. The goal appears to be not only credential theft but full understanding and potential replication of government-trusted PKI procedures. This level of targeting suggests a strategic intent to penetrate deeply trusted systems, potentially for use in later spoofing or identity masquerading operations.&lt;/p&gt;
    &lt;p&gt;In Taiwan, the operator shifted focus to developer infrastructure and cloud access portals. Specific domains accessed, like caa.org[.]tw/.git/, indicate attempts to enumerate internal repositories, most likely to discover hardcoded secrets, authentication tokens, or deployment keys. This is a classic supply chain targeting method, aiming to access downstream systems via compromised developer credentials or misconfigured services.&lt;/p&gt;
    &lt;p&gt;Additional activity pointed to interaction with cloud service login panels such as tw.systexcloud[.]com and mlogin.mdfapps[.]com. These suggest an attempt to breach centralized authentication systems or identity providers, granting the actor broader access into enterprise or government networks with a single credential set.&lt;/p&gt;
    &lt;p&gt;Taken together, these targeting profiles reflect a clear emphasis on identity providers, backend engineers, and those with access to system-level secrets. This reinforces the broader theme of the dump: persistent, credential-first intrusion strategies, augmented by reconnaissance of authentication standards, key management policies, and endpoint development infrastructure.&lt;/p&gt;
    &lt;p&gt;South Korean:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PKI admins, infrastructure engineers&lt;/item&gt;
      &lt;item&gt;OCR focus on Korean identity standards&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Taiwanese:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Developer endpoints and internal .git/ repos&lt;/item&gt;
      &lt;item&gt;Access to cloud panels and login gateways&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Final Assessment&lt;/head&gt;
    &lt;p&gt;The “Kim” leak represents one of the most comprehensive and technically intimate disclosures ever associated with Kimsuky (APT43) or its adjacent operators. It not only reaffirms known tactics, credential theft, phishing, and PKI compromise, but exposes the inner workings of the operator’s environment, tradecraft, and operational intent in ways rarely observed outside of active forensic investigations.&lt;/p&gt;
    &lt;p&gt;At the core of the leak is a technically competent actor, well-versed in low-level shellcode development, Linux-based persistence mechanisms, and certificate infrastructure abuse. Their use of NASM, API hashing, and rootkit deployment points to custom malware authorship. Furthermore, the presence of parsed government-issued Korean PDFs, combined with OCR automation, shows not just opportunistic data collection but a concerted effort to model, mimic, or break state-level identity systems, particularly South Korea’s GPKI.&lt;/p&gt;
    &lt;p&gt;The operator’s cultural and linguistic fluency in Korean, and their targeting of administrative and privileged systems across South Korean institutions, support a high-confidence attribution to a DPRK-native threat actor. However, the extensive use of Chinese platforms like gitee[.]com, Baidu, and Zhihu, and Chinese infrastructure for both malware hosting and browsing activity reveals a geographical pivot or collaboration: a hybrid APT footprint rooted in DPRK tradecraft but operating from or with Chinese support.&lt;/p&gt;
    &lt;p&gt;Most notably, this leak uncovers a geographical expansion of operational interest; the actor is no longer solely focused on the Korean peninsula. The targeting of Taiwanese developer portals, government research IPs, and .git/ repositories shows a broadened agenda that likely maps to both espionage and supply chain infiltration priorities. This places Taiwan, like South Korea, at the forefront of North Korean cyber interest, whether for intelligence gathering, credential hijacking, or as staging points for more complex campaigns.&lt;/p&gt;
    &lt;p&gt;The threat uncovered here is not merely malware or phishing; it is an infrastructure-centric, credential-first APT campaign that blends highly manual operations (e.g., hand-compiled shellcode, direct OCR of sensitive PDFs) with modern deception tactics such as AiTM phishing and TLS proxy abuse.&lt;/p&gt;
    &lt;p&gt;Organizations in Taiwan and South Korea, particularly those managing identity, certificate, and cloud access infrastructure, should consider themselves under persistent, credential-focused surveillance. Defensive strategies must prioritize detection of behavioral anomalies (e.g., use of OCR tools, GPKI access attempts), outbound communications with spoofed Korean domains, and the appearance of low-level toolchains like NASM or proxyres-based scanning utilities within developer or admin environments.&lt;/p&gt;
    &lt;p&gt;In short: the “Kim” actor embodies the evolution of nation-state cyber threats—a fusion of old-school persistence, credential abuse, and modern multi-jurisdictional staging. The threat is long-term, embedded, and adaptive.&lt;/p&gt;
    &lt;head rend="h1"&gt;Part III: Threat Intelligence Report&lt;/head&gt;
    &lt;head rend="h2"&gt;TLP WHITE:&lt;/head&gt;
    &lt;head rend="h3"&gt;Targeting Summary&lt;/head&gt;
    &lt;p&gt;The analysis of the “Kim” operator dump reveals a highly focused credential-theft and infrastructure-access campaign targeting high-value assets in both South Korea and Taiwan. Victims were selected based on their proximity to trusted authentication systems, administrative control panels, and development environments.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Category&lt;/cell&gt;
        &lt;cell&gt;Details&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Regions&lt;/cell&gt;
        &lt;cell&gt;South Korea, Taiwan&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Targets&lt;/cell&gt;
        &lt;cell&gt;Government, Telecom, Enterprise IT&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Accounts&lt;/cell&gt;
        &lt;cell&gt;svradmin, oracle, app_adm01, unwadm, shkim88, jaejung91&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Domains&lt;/cell&gt;
        &lt;cell&gt;tw.systexcloud[.]com, nid-security[.]com, spo.go[.]kr, caa.org[.]tw/.git/&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Indicators of Compromise (IOCs)&lt;/head&gt;
    &lt;head rend="h4"&gt;Domains&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Phishing: nid-security[.]com, html-load[.]com, wuzak[.]com, koala-app[.]com, webcloud-notice[.]com&lt;/item&gt;
      &lt;item&gt;Spoofed portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr&lt;/item&gt;
      &lt;item&gt;Pastebin raw links: Used for payload staging and malware delivery&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;IP Addresses&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;External Targets (Taiwan): &lt;list rend="ul"&gt;&lt;item&gt;163.29.3[.]119 National Center for High-performance Computing&lt;/item&gt;&lt;item&gt;118.163.30[.]45 Taiwanese government subnet&lt;/item&gt;&lt;item&gt;59.125.159[.]81 Chunghwa Telecom&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Brute Forcing / Infrastructure Origins: &lt;list rend="ul"&gt;&lt;item&gt;23.95.213[.]210 VPS provider with malicious history&lt;/item&gt;&lt;item&gt;218.92.0[.]210 China Unicom&lt;/item&gt;&lt;item&gt;122.114.233[.]77 Henan Mobile, PRC&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Internal Host IPs (Operator Environment)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;192.168.130[.]117&lt;/item&gt;
      &lt;item&gt;192.168.150[.]117&lt;/item&gt;
      &lt;item&gt;192.168.0[.]39&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Operator Environment: Internal Host IP Narrative&lt;/head&gt;
    &lt;p&gt;The presence of internal IP addresses such as 192.168.130[.]117, 192.168.150[.]117, and 192.168.0[.]39 within the dump offers valuable insight into the attacker’s local infrastructure, an often-overlooked element in threat intelligence analysis. These addresses fall within private, non-routable RFC1918 address space, commonly assigned by consumer off-the-shelf (COTS) routers and small office/home office (SOHO) network gear.&lt;/p&gt;
    &lt;p&gt;The use of the 192.168.0[.]0/16 subnet, particularly 192.168.0.x and 192.168.150.x, strongly suggests that the actor was operating from a residential or low-profile environment, not a formal nation-state facility or hardened infrastructure. This supports existing assessments that North Korean operators, particularly those affiliated with Kimsuky, often work remotely from locations in third countries such as China or Southeast Asia, where they can maintain inconspicuous, low-cost setups while accessing global infrastructure.&lt;/p&gt;
    &lt;p&gt;Moreover, the distinction between multiple internal subnets (130.x, 150.x, and 0.x) may indicate segmentation of test environments or multiple virtual machines running within a single NATed network. This aligns with the forensic evidence of iterative development and testing workflows seen in the .bash_history files, where malware stagers, rootkits, and API obfuscation utilities were compiled, cleaned, and rerun repeatedly.&lt;/p&gt;
    &lt;p&gt;Together, these IPs reveal an operator likely working from a clandestine, residential base of operations, with modest hardware and commercial-grade routers. This operational setup is consistent with known DPRK remote IT workers and cyber operators who avoid attribution by blending into civilian infrastructure. It also suggests the attacker may be physically located outside of North Korea, possibly embedded in a friendly or complicit environment, strengthening the case for China-based activity by DPRK nationals.&lt;/p&gt;
    &lt;head rend="h3"&gt;MITRE ATT&amp;amp;CK Mapping&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Phase&lt;/cell&gt;
        &lt;cell&gt;Technique(s)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Initial Access&lt;/cell&gt;
        &lt;cell&gt;T1566.002 , Adversary-in-the-Middle (AiTM) Phishing&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Execution&lt;/cell&gt;
        &lt;cell&gt;T1059.005 , Native API ShellcodeT1059.003 , Bash/Shell Scripts&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Credential Access&lt;/cell&gt;
        &lt;cell&gt;T1555 , Credential Store DumpingT1557.003 , Session Hijacking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Persistence&lt;/cell&gt;
        &lt;cell&gt;T1176 , Rootkit (via khook syscall manipulation)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Defense Evasion&lt;/cell&gt;
        &lt;cell&gt;T1562.001 , Disable Security ToolsT1552 , Unsecured Credential Files&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Discovery&lt;/cell&gt;
        &lt;cell&gt;T1592 , Technical Information DiscoveryT1590 , Network Information&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Exfiltration&lt;/cell&gt;
        &lt;cell&gt;T1041 , Exfiltration over C2 ChannelT1567.002 , Exfil via Cloud Services&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Tooling and Capabilities&lt;/head&gt;
    &lt;p&gt;The actor’s toolkit spans multiple disciplines, blending malware development, system reconnaissance, phishing, and proxy evasion:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;NASM-based shellcode loaders: Compiled manually for Windows execution.&lt;/item&gt;
      &lt;item&gt;Win32 API hashing: Obfuscated imports via hashstring.py to evade detection.&lt;/item&gt;
      &lt;item&gt;GitHub/Gitee abuse: Tooling hosted or cloned from public developer platforms.&lt;/item&gt;
      &lt;item&gt;OCR exploitation: Used ocrmypdf to parse Korean PDF specs related to digital certificates and VPN appliances.&lt;/item&gt;
      &lt;item&gt;Rootkit deployment: Hidden persistence paths including /usr/lib64/tracker-fs and /proc/acpi/pcicard.&lt;/item&gt;
      &lt;item&gt;Proxy config extraction: Investigated PAC URLs using proxyres-based recon.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Attribution Confidence Assessment&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Attribution Candidate&lt;/cell&gt;
        &lt;cell&gt;Confidence Level&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;DPRK-aligned (Kimsuky)&lt;/cell&gt;
        &lt;cell&gt;High, Native Korean targeting, GPKI focus, OCR behavior&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;China-blended infrastructure&lt;/cell&gt;
        &lt;cell&gt;Moderate, PRC hosting, Gitee usage, Taiwan focus&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Solely PRC Actor&lt;/cell&gt;
        &lt;cell&gt;Low-to-Moderate, Tooling overlap but weak linguistic match&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Assessment: The actor appears to be a DPRK-based APT operator working from within or in partnership with Chinese infrastructure, representing a hybrid attribution model.&lt;/p&gt;
    &lt;head rend="h3"&gt;Defensive Recommendations&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Area&lt;/cell&gt;
        &lt;cell&gt;Recommendation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;PKI Security&lt;/cell&gt;
        &lt;cell&gt;Monitor usage of .key, .sig, .crt artifacts; enforce HSM or 2FA for key use&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Phishing Defense&lt;/cell&gt;
        &lt;cell&gt;Block domains identified in IoCs; validate TLS fingerprints and referrer headers&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Endpoint Hardening&lt;/cell&gt;
        &lt;cell&gt;Detect use of nasm, make, and OCR tools; monitor /usr/lib*/tracker-* paths&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Network Telemetry&lt;/cell&gt;
        &lt;cell&gt;Alert on .git/ directory access from external IPs; monitor outbound to Pastebin/GitHub&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Taiwan Focus&lt;/cell&gt;
        &lt;cell&gt;Establish watchlists for .tw domains targeted by PRC-originating IPs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Admin Accounts&lt;/cell&gt;
        &lt;cell&gt;Review usage logs for svradmin, oracle, app_adm01, and ensure rotation policies&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h1"&gt;APPENDIX A&lt;/head&gt;
    &lt;head rend="h2"&gt;Overlap or Confusion with Chinese Threat Actors&lt;/head&gt;
    &lt;p&gt;There is notable evidence of operational blur between Kimsuky and Chinese APTs in the context of Taiwan. The 2025 “Kim” data breach revealed an attacker targeting Taiwan whose tools and phishing kits matched Kimsuky’s, yet whose personal indicators (language, browsing habits) suggested a Chinese national. Researchers concluded this actor was likely a Chinese hacker either mimicking Kimsuky tactics or collaborating with them.. In fact, the leaked files on DDoS Secrets hint that Kimsuky has “openly cooperated with other Chinese APTs and shared their tools and techniques”. This overlap can cause attribution confusion – a Taiwan-focused operation might initially be blamed on China but could involve Kimsuky elements, or vice versa. So far, consensus is that North Korean and Chinese cyber operations remain separate, but cases like “Kim” show how a DPRK-aligned actor can operate against Taiwan using TTPs common to Chinese groups, muddying the waters of attribution.&lt;/p&gt;
    &lt;head rend="h2"&gt;File List from dump:&lt;/head&gt;
    &lt;head rend="h2"&gt;Master Evidence Inventory:&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;File Name&lt;/cell&gt;
        &lt;cell&gt;Language&lt;/cell&gt;
        &lt;cell&gt;Content Summary&lt;/cell&gt;
        &lt;cell&gt;Category&lt;/cell&gt;
        &lt;cell&gt;Relevance&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;.bash_history&lt;/cell&gt;
        &lt;cell&gt;Mixed (EN/KR)&lt;/cell&gt;
        &lt;cell&gt;Operator shell history commands&lt;/cell&gt;
        &lt;cell&gt;System/Log&lt;/cell&gt;
        &lt;cell&gt;Shows rootkit compilation, file ops, network tests&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;user-bash_history&lt;/cell&gt;
        &lt;cell&gt;Mixed (EN/KR)&lt;/cell&gt;
        &lt;cell&gt;User-level shell commands&lt;/cell&gt;
        &lt;cell&gt;System/Log&lt;/cell&gt;
        &lt;cell&gt;Development and test activity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;root-bash_history&lt;/cell&gt;
        &lt;cell&gt;Mixed (EN/KR)&lt;/cell&gt;
        &lt;cell&gt;Root-level shell commands&lt;/cell&gt;
        &lt;cell&gt;System/Log&lt;/cell&gt;
        &lt;cell&gt;Privilege-level activity, implant deployment&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;auth.log.2&lt;/cell&gt;
        &lt;cell&gt;EN/KR&lt;/cell&gt;
        &lt;cell&gt;Authentication logs (PAM/SSH)&lt;/cell&gt;
        &lt;cell&gt;System/Log&lt;/cell&gt;
        &lt;cell&gt;Credential changes marked 변경완료, brute force IPs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;20190315.log&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;System log file&lt;/cell&gt;
        &lt;cell&gt;System/Log&lt;/cell&gt;
        &lt;cell&gt;Auth and system access events&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;chrome-timeline.txt&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Browser activity timeline&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;Visited domains extraction&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;chromehistory.txt&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Browser history export&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;URLs visited&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;history.sqlite&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Empty DB file&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;No useful data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Media History&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Empty SQLite DB&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;No playback activity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;History&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Empty Brave/Chromium DB&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;No visited URLs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Web Data&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Autofill/search DB&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;Search engines used (Google, DuckDuckGo, Qwant, Startpage, Ecosia)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Visited Links&lt;/cell&gt;
        &lt;cell&gt;Binary&lt;/cell&gt;
        &lt;cell&gt;LevelDB/binary structure&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;Could not extract URLs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Cookies&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;SQLite DB with cookies&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;Google cookies found&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;request_log.txt.20250220&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Captured phishing session&lt;/cell&gt;
        &lt;cell&gt;Phishing&lt;/cell&gt;
        &lt;cell&gt;Spoofed spo.go.kr, base64 credential logging&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;技术说明书 – 22.docx&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Chinese rootkit stealth manual&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Kernel hiding, binary embedding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;1.ko 图文编译 .doc&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Chinese compilation guide&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Rootkit build process&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;1. build ko .txt&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Build notes&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Implant compilation instructions&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;0. 使用.txt&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Usage notes&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Implant usage and commands&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;re 正向工具修改建议 1.0.txt&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Modification notes&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Reverse tool modification suggestions&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;1111.txt&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Rootkit/tool snippet&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Part of implant notes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;client&lt;/cell&gt;
        &lt;cell&gt;Binary&lt;/cell&gt;
        &lt;cell&gt;Rootkit client binary&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Controller for implant communication&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;SSA_AO_AD_WT_002_웹보안 프로토콜설계서_Ver1.0_.doc&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;GPKI protocol design doc&lt;/cell&gt;
        &lt;cell&gt;PKI&lt;/cell&gt;
        &lt;cell&gt;Korean web PKI standards&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;행자부 웹보안API 인수인계.doc&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;GPKI API deployment manual&lt;/cell&gt;
        &lt;cell&gt;PKI&lt;/cell&gt;
        &lt;cell&gt;Deployment and cert API internals&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;HIRA-IR-T02_의약품처방조제_ComLibrary_통신전문.doc&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;Medical ComLibrary XML spec&lt;/cell&gt;
        &lt;cell&gt;Healthcare&lt;/cell&gt;
        &lt;cell&gt;Prescription system communication&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;(별지2)행정전자서명_기술요건_141125.pdf&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;PKI requirements PDF&lt;/cell&gt;
        &lt;cell&gt;PKI&lt;/cell&gt;
        &lt;cell&gt;OCR target&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;SecuwaySSL U_카달로그.pdf&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;VPN catalog&lt;/cell&gt;
        &lt;cell&gt;PKI/VPN&lt;/cell&gt;
        &lt;cell&gt;OCR target&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;phrack-apt-down-the-north-korea-files.pdf&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Phrack article&lt;/cell&gt;
        &lt;cell&gt;Reference&lt;/cell&gt;
        &lt;cell&gt;Background on Kimsuky dump&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Muddled Libra Threat Assessment.pdf&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Threat intel report&lt;/cell&gt;
        &lt;cell&gt;Reference&lt;/cell&gt;
        &lt;cell&gt;Comparative threat actor study&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Leaked North Korean Linux Stealth Rootkit Analysis.pdf&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Rootkit analysis&lt;/cell&gt;
        &lt;cell&gt;Reference&lt;/cell&gt;
        &lt;cell&gt;Detailed implant study&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Inside the Kimsuky Leak.docx (various)&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Threat report drafts&lt;/cell&gt;
        &lt;cell&gt;Report&lt;/cell&gt;
        &lt;cell&gt;Working versions&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;account (2).txt&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;DB export (DBsafer, TrustedOrange)&lt;/cell&gt;
        &lt;cell&gt;Infra&lt;/cell&gt;
        &lt;cell&gt;Accounts and DB changes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;result.txt&lt;/cell&gt;
        &lt;cell&gt;KR&lt;/cell&gt;
        &lt;cell&gt;Cert-related parsed data&lt;/cell&gt;
        &lt;cell&gt;Infra&lt;/cell&gt;
        &lt;cell&gt;Included GPKI .key/.sig&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;english_wikipedia.txt&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Wikipedia dump&lt;/cell&gt;
        &lt;cell&gt;Reference&lt;/cell&gt;
        &lt;cell&gt;Unrelated baseline&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;bookmarks-2021-01-04.jsonlz4&lt;/cell&gt;
        &lt;cell&gt;EN&lt;/cell&gt;
        &lt;cell&gt;Firefox bookmarks (compressed)&lt;/cell&gt;
        &lt;cell&gt;Browser&lt;/cell&gt;
        &lt;cell&gt;Needs decompression&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Screenshot translations&lt;/cell&gt;
        &lt;cell&gt;ZH&lt;/cell&gt;
        &lt;cell&gt;Chinese text (rootkit marketing blurb)&lt;/cell&gt;
        &lt;cell&gt;Rootkit&lt;/cell&gt;
        &lt;cell&gt;Kernel hiding tool description&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://dti.domaintools.com/inside-the-kimsuky-leak-how-the-kim-dump-exposed-north-koreas-credential-theft-playbook/"/></entry><entry><id>https://news.ycombinator.com/item?id=45152779</id><title>A Navajo weaving of an integrated circuit: the 555 timer</title><updated>2025-09-07T17:32:20.589626+00:00</updated><content>&lt;doc fingerprint="2f555263dc670aeb"&gt;
  &lt;main&gt;
    &lt;p&gt;The noted Diné (Navajo) weaver Marilou Schultz recently completed an intricate weaving composed of thick white lines on a black background, punctuated with reddish-orange diamonds. Although this striking rug may appear abstract, it shows the internal circuitry of a tiny silicon chip known as the 555 timer. This chip has hundreds of applications in everything from a sound generator to a windshield wiper controller. At one point, the 555 was the world's best-selling integrated circuit with billions sold. But how did the chip get turned into a rug?&lt;/p&gt;
    &lt;p&gt;The 555 chip is constructed from a tiny flake of silicon with a layer of metallic wiring on top. In the rug, this wiring is visible as the thick white lines, while the silicon forms the black background. One conspicuous feature of the rug is the reddish-orange diamonds around the perimeter. These correspond to the connections between the silicon chip and its eight pins. Tiny golden bond wires—thinner than a human hair—are attached to the square bond pads to provide these connections. The circuitry of the 555 chip contains 25 transistors, silicon devices that can switch on and off. The rug is dominated by three large transistors, the filled squares with a 王 pattern inside, while the remaining transistors are represented by small dots.&lt;/p&gt;
    &lt;p&gt;The weaving was inspired by a photo of the 555 timer die taken by Antoine Bercovici (Siliconinsider); I suggested this photo to Schultz as a possible subject for a rug. The diagram below compares the weaving (left) with the die photo (right). As you can see, the weaving closely follows the actual chip, but there are a few artistic differences. For instance, two of the bond pads have been removed, the circuitry at the top has been simplified, and the part number at the bottom has been removed.&lt;/p&gt;
    &lt;p&gt;Antoine took the die photo with a dark field microscope, a special type of microscope that produces an image on a black background. This image emphasizes the metal layer on the top of the die. In comparison, a standard bright-field microscope produced the image below. When a chip is manufactured, regions of silicon are "doped" with impurities to create transistors and resistors. These regions are visible in the image below as subtle changes in the color of the silicon.&lt;/p&gt;
    &lt;p&gt;In the weaving, the chip's design appears almost monumental, making it easy to forget that the actual chip is microscopic. For the photo below, I obtained a version of the chip packaged in a metal can, rather than the typical rectangle of black plastic. Cutting the top off the metal can reveals the tiny chip inside, with eight gold bond wires connecting the die to the pins of the package. If you zoom in on the photo, you may recognize the three large transistors that dominate the rug.&lt;/p&gt;
    &lt;p&gt;The artist, Marilou Schultz, has been creating chip rugs since 1994, when Intel commissioned a rug based on the Pentium as a gift to AISES (American Indian Science &amp;amp; Engineering Society). Although Schultz learned weaving as a child, the Pentium rug was a challenge due to its complex pattern and lack of symmetry; a day's work might add just an inch to the rug. This dramatic weaving was created with wool from the long-horned Navajo-Churro sheep, colored with traditional plant dyes.&lt;/p&gt;
    &lt;p&gt;For the 555 timer weaving, Schultz experimented with different materials. Silver and gold metallic threads represent the aluminum and copper in the chip. The artist explains that "it took a lot more time to incorporate the metallic threads," but it was worth the effort because "it is spectacular to see the rug with the metallics in the dark with a little light hitting it." Aniline dyes provided the black and lavender colors. Although natural logwood dye produces a beautiful purple, it fades over time, so Schultz used an aniline dye instead. The lavender colors are dedicated to the weaver's mother, who passed away in February; purple was her favorite color.&lt;/p&gt;
    &lt;head rend="h2"&gt;Inside the chip&lt;/head&gt;
    &lt;p&gt;How does the 555 chip produce a particular time delay? You add external components—resistors and a capacitor—to select the time. The capacitor is filled (charged) at a speed controlled by the resistor. When the capacitor get "full", the 555 chip switches operation and starts emptying (discharging) the capacitor. It's like filling a sink: if you have a large sink (capacitor) and a trickle of water (large resistor), the sink fills slowly. But if you have a smal sink (capacitor) and a lot of water (small resistor), the sink fills quickly. By using different resistors and capacitors, the 555 timer can provide time intervals from microseconds to hours.&lt;/p&gt;
    &lt;p&gt;I've constructed an interactive chip browser that shows how the regions of the rug correspond to specific electronic components in the physical chip. Click on any part of the rug to learn the function of the corresponding component in the chip.&lt;/p&gt;
    &lt;p&gt;For instance, two of the large square transistors turn the chip's output on or off, while the third large transistor discharges the capacitor when it is full. (To be precise, the capacitor goes between 1/3 full and 2/3 full to avoid issues near "empty" and "full".) The chip has circuits called comparators that detect when the capacitor's voltage reaches 1/3 or 2/3, switching between emptying and filling at those points. If you want more technical details about the 555 chip, see my previous articles: an early 555 chip, a 555 timer similar to the rug, and a more modern CMOS version of the 555.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusions&lt;/head&gt;
    &lt;p&gt;The similarities between Navajo weavings and the patterns in integrated circuits have long been recognized. Marilou Schultz's weavings of integrated circuits make these visual metaphors into concrete works of art. This connection is not just metaphorical, however; in the 1960s, the semiconductor company Fairchild employed numerous Navajo workers to assemble chips in Shiprock, New Mexico. I wrote about this complicated history in The Pentium as a Navajo Weaving.&lt;/p&gt;
    &lt;p&gt;This work is being shown at SITE Santa Fe's Once Within a Time exhibition (running until January 2026). I haven't seen the exhibition in person, so let me know if you visit it. For more about Marilou Schultz's art, see The Diné Weaver Who Turns Microchips Into Art, or A Conversation with Marilou Schultz on YouTube.&lt;/p&gt;
    &lt;p&gt;Many thanks to Marilou Schultz for discussing her art with me. Thanks to First American Art Magazine for providing the photo of her 555 rug. Follow me on Mastodon (@[email protected]), Bluesky (@righto.com), or RSS for updates.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.righto.com/2025/09/marilou-schultz-navajo-555-weaving.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45152940</id><title>Show HN: I'm making an open-source platform for learning Japanese</title><updated>2025-09-07T17:32:20.533013+00:00</updated><content/><link href="https://kanadojo.com"/></entry><entry><id>https://news.ycombinator.com/item?id=45154501</id><title>The key to getting MVC correct is understanding what models are</title><updated>2025-09-07T17:32:20.398803+00:00</updated><content>&lt;doc fingerprint="1f5bdf1aa5aa0a18"&gt;
  &lt;main&gt;
    &lt;p&gt;How did MVC get so F’ed up?&lt;/p&gt;
    &lt;p&gt;Smalltalk MVC is defined in Design Pattern as:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;MVC Consists of three kinds of objects. The Model is the application object, the View is its screen presentation, and the Controller defines the way the user interface reacts to user input.1&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;However this definition has been abused over the years - Back in 2003 I gave a talk citing how bad Apple’s definition was. At the time it stated:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;A view object knows how to display and possibly edit data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects… Controllers are often the least reusable objects in an application, but that’s acceptable…2&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Of course it isn’t acceptable and, over the years, Apple has refined their definition and now acknowledge the distinction between the traditional Smalltalk version of MVC and the Cocoa version.3 But the Cocoa version is still defined much as it was before:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;A view object knows how to display, and might allow users to edit, the data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects…3&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;In looking at how iOS applications are written the sentiment that controllers (and now view-controllers) are often the least reusable components in an application still flourishes, even if it is now unstated.&lt;/p&gt;
    &lt;p&gt;MVC (I’ll always use that term to refer to the Smalltalk form) has the following structure:&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; figure: Smalltalk MVC4 &lt;/p&gt;
    &lt;p&gt;Here the solid lines imply a direct association. And the dashed lines an indirect association by an observer. So what we see is that the model is unaware of the view and controller, except indirectly through notifications, and hence the code in the Model is reusable. The controller and view bind to the model, not the other way around.&lt;/p&gt;
    &lt;p&gt;Often the function of the Controller and View are tightly coupled into a “widget” or “control”. When Apple talks about a View-Controller in their model they are talking about a grab-bag of an uber-widget that is a composite of UIView widgets and multiple models. From what I’ve seen, including in Apple’s example code, it is usually a pretty big mess.&lt;/p&gt;
    &lt;p&gt;The key to getting MVC correct is understanding what models are. A model is simply an object5 which can be observed (a requirement for attaching views). For example, in ObjC an int is an object, but it is not observable. However, an ObjC object with an int property is observable using Key-Value Observing6. A model may encapsulate complex relationships between the model’s properties. A trivial model is one where each property is completely independent (think C struct vs. C++ class). From a notification the view should be able to determine, at a minimum:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;What changed. It may be as simple as “the model bound to the view”.&lt;/item&gt;
      &lt;item&gt;The new value to display.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For example, let’s say our model is a trivial observable boolean (I can’t imagine a simpler model). What we want is a checkbox that binds to the observable boolean. When the controller requests a change in value, the boolean is updated, and the view is notified of the new state of the model. The model is unaware of what UI is attached to it, and in fact there could be multiple UIs, including something like a scripting system, attached to the same instance of the model. This is a form of data binding - though most data binding systems replicate the problems of their underlying widget set by treating the model as if it were observing the view, not the other way around.&lt;/p&gt;
    &lt;p&gt;Contrast this with most UI frameworks where you have a checkbox widget from which you can query the value and you receive a notification when the value has changed. This is pushing a model into the widget. With MVC you never ask a question like “what is the default state of this checkbox?” - the default state of the view is always the current state of the model. You would also never get the state of the checkbox - the state of the checkbox is simply a reflection of the state of the model. In a system where you get the state of a checkbox you are binding two models together by treating one as a view/controller of the other. Such a pattern doesn’t scale beyond trivial models, and even for those it introduces some ambiguity.&lt;/p&gt;
    &lt;p&gt;I conjecture that one of the reasons why MVC has been so screwed up is because, unlike in Smalltalk, writing something as simple as an observable boolean is a bit of a pain in a language like Pascal or C. You quickly get into object ownership and lifetime issues and how to write bind expressions. If one also assumes that you have a 1:1 mapping from UI to model then there is some inherent inefficiency in the generalization. The Lisa team made some major compromises and the rest of the industry followed along.7&lt;/p&gt;
    &lt;p&gt;To support more complex views, the notification may need to specify what parts of the model changed and how those parts changed. For example, “image 58 was removed from the sequence”. A complete model is one that can support any view of that model type efficiently (related to the notion of a complete type and a type’s efficient basis).&lt;/p&gt;
    &lt;p&gt;One additional attribute of MVC is that it is a composite pattern. This is hinted at by the direct connection between the Controller and the View. As I said early, the view may contain state, this state is itself an object, and because this state is also displayed within the view it is observable. It is another model. I refers to this as the view’s model. This model may include things such as the visibility of a window, the tab the user was last looking at, and the portion of the model being viewed.&lt;/p&gt;
    &lt;p&gt;Identifying what the models are in your system is important. We usually do pretty good at identifying the major models. Such as “this is an image” - but often fall short of identifying the complete model, i.e. “this is an image with a collection of settings.” We end up with our model spread out within the code (an incidental type) and it makes it more difficult to deal with it.&lt;/p&gt;
    &lt;p&gt;A common model that is often completely overlooked is the model for function arguments. When you have a command, button, gesture, or menu item in your application, these are bound to a function. The function itself is not typically a zeroary function but rather has a set of arguments that are constructed through other parts of the UI. For example, if I have a list of images in my application, I might have a button to delete the selected images. Here the current selection is the argument to my delete command. To create a UI for the selection I must create a model of the arguments to my function. A precondition of delete is that the selection is not empty. This precondition must be observable in the argument model so it can be reflected in the view by disabling or hiding the button and in the controller be disallowing the user to click the button and issue the command. The same argument model can be shared for multiple commands within an application.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Gamma, Erich. “1.2 Design Patterns in Smalltalk MVC.” Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA: Addison-Wesley, 1995. N. pag. Print. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;http://smartfriends.com/U/Presenters/untangling_software.pdf (Don’t bother reading, this was an incomprehensible talk.) ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html ↩ ↩2&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stepanov, Alexander A., and Paul McJones. “1.3 Objects.” Elements of Programming. Upper Saddle River, NJ: Addison-Wesley, 2009. N. pag. Print. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;https://en.wikipedia.org/wiki/Object-oriented_user_interface ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://stlab.cc/tips/about-mvc.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45154609</id><title>Show HN: I recreated Windows XP as my portfolio</title><updated>2025-09-07T17:32:20.221762+00:00</updated><content>&lt;doc fingerprint="586123fd98d49a69"&gt;
  &lt;main&gt;
    &lt;p&gt;Welcome to my portfolio. JavaScript is required for the full Windows XP experience. You can reach me on LinkedIn, view my work on GitHub, or see my latest on Instagram.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://mitchivin.com/"/></entry><entry><id>https://news.ycombinator.com/item?id=45154857</id><title>Show HN: Lightweight tool for managing Linux virtual machines</title><updated>2025-09-07T17:32:19.737922+00:00</updated><content>&lt;doc fingerprint="eface9fad13539da"&gt;
  &lt;main&gt;
    &lt;p&gt; A single &amp;lt;8MB binary with a modern Web UI, CLI, and API for KVM. &lt;lb/&gt;No XML. No bloat. Just VMs. &lt;/p&gt;
    &lt;p&gt;Flint is a modern, self-contained KVM management tool built for developers, sysadmins, and home labs who want zero bloat and maximum efficiency. It was built in a few hours out of a sudden urge for something better.&lt;/p&gt;
    &lt;p&gt;Prerequisites: A Linux host with &lt;code&gt;libvirt&lt;/code&gt; and &lt;code&gt;qemu-kvm&lt;/code&gt; installed.&lt;/p&gt;
    &lt;code&gt;curl -fsSL https://raw.githubusercontent.com/ccheshirecat/flint/main/install.sh | sh&lt;/code&gt;
    &lt;p&gt;Auto-detects OS/arch, installs to &lt;code&gt;/usr/local/bin&lt;/code&gt;, and you're ready in seconds.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🖥️ Modern UI — A beautiful, responsive Next.js + Tailwind interface, fully embedded.&lt;/item&gt;
      &lt;item&gt;⚡ Single Binary — No containers, no XML hell. A sub-8MB binary is all you need.&lt;/item&gt;
      &lt;item&gt;🛠️ Powerful CLI &amp;amp; API — Automate everything. If you can do it in the UI, you can do it from the command line or API.&lt;/item&gt;
      &lt;item&gt;📦 Frictionless Provisioning — Native Cloud-Init support and a simple, snapshot-based template system.&lt;/item&gt;
      &lt;item&gt;💪 Non-Intrusive — Flint is a tool that serves you. It's not a platform that locks you in.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;1. Start the Server&lt;/p&gt;
    &lt;code&gt;flint serve&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Web UI: &lt;code&gt;http://localhost:5550&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;API: &lt;code&gt;http://localhost:5550/api&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;2. Use the CLI&lt;/p&gt;
    &lt;code&gt;# List your VMs
flint vm list --all

# Launch a new Ubuntu VM named 'web-01'
flint launch ubuntu-24.04 --name web-01

# SSH directly into your new VM
flint ssh web-01

# Create a template from your configured VM
flint snapshot create web-01 --tag baseline-setup

# Launch a clone from your new template
flint launch --from web-01 --name web-02&lt;/code&gt;
    &lt;p&gt;While Flint is designed to be intuitive, the full CLI and API documentation, including all commands and examples, is available at:&lt;/p&gt;
    &lt;p&gt;➡️ DOCS.md&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Backend: Go 1.25+&lt;/item&gt;
      &lt;item&gt;Web UI: Next.js + Tailwind + Bun&lt;/item&gt;
      &lt;item&gt;KVM Integration: libvirt-go&lt;/item&gt;
      &lt;item&gt;Binary Size: ~8.4MB (stripped)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt; 🚀 Flint is young, fast-moving, and designed for builders.&lt;lb/&gt; Try it. Break it. Star it. Contribute. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/ccheshirecat/flint"/></entry><entry><id>https://news.ycombinator.com/item?id=45155682</id><title>The "impossibly small" Microdot web framework</title><updated>2025-09-07T17:32:19.284856+00:00</updated><content>&lt;doc fingerprint="3ea9911529a31dd9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The "impossibly small" Microdot web framework&lt;/head&gt;
    &lt;quote&gt;Ready to give LWN a try?&lt;p&gt;With a subscription to LWN, you can stay current with what is happening in the Linux and free-software community and take advantage of subscriber-only site features. We are pleased to offer you a free trial subscription, no credit card required, so that you can see for yourself. Please, join us!&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;The Microdot web framework is quite small, as its name would imply; it supports both standard CPython and MicroPython, so it can be used on systems ranging from internet-of-things (IoT) devices all the way up to large, cloudy servers. It was developed by Miguel Grinberg, who gave a presentation about it at EuroPython 2025. His name may sound familiar from his well-known Flask Mega-Tutorial, which has introduced many to the Flask lightweight Python-based web framework. It should come as no surprise, then, that Microdot is inspired by its rather larger cousin, so Flask enthusiasts will find much to like in Microdot—and will come up to speed quickly should their needs turn toward smaller systems.&lt;/p&gt;
    &lt;p&gt;We have looked at various pieces of this software stack along the way: Microdot itself in January 2024, MicroPython in 2023, and Flask as part of a look at Python microframeworks in 2019.&lt;/p&gt;
    &lt;p&gt; Grinberg began his talk with an introduction. He has been living in Ireland for a few years and "&lt;quote&gt;I make stuff&lt;/quote&gt;". That includes open-source projects, blog posts (on a Flask-based blog platform that he wrote), and "&lt;quote&gt;a bunch of books&lt;/quote&gt;". He works for Elastic and is one of the maintainers of the Elasticsearch Python client, "&lt;quote&gt;so maybe you have used some of the things that I made for money&lt;/quote&gt;". &lt;/p&gt;
    &lt;head rend="h4"&gt;Why?&lt;/head&gt;
    &lt;p&gt; With a chuckle, he asked: "&lt;quote&gt;Why do we need another web framework? We have so many already.&lt;/quote&gt;" The story starts with a move that he made to Ireland from the US in 2018; he rented a house with a "smart" heating controller and was excited to use it. There were two thermostats, one for each level of the house, and he was "&lt;quote&gt;really looking forward to the winter&lt;/quote&gt;" to see the system in action. &lt;/p&gt;
    &lt;p&gt; As might be guessed, he could set target temperatures in each thermostat; they would communicate with the controller that would turn the heating on and off as needed. In addition, the system had a web server that could be used to query various parameters or to start and stop the heaters. You could even send commands via SMS text messages; "&lt;quote&gt;there's a SIM card somewhere in that box [...] very exciting stuff&lt;/quote&gt;". &lt;/p&gt;
    &lt;p&gt; When winter rolled around, it did not work that well, however; sometimes the house was too chilly or warm and he had to start and stop the heaters himself. He did some debugging and found that the thermostats were reporting temperatures that were off by ±3°C, "&lt;quote&gt;which is too much for trying to keep the house at 20°&lt;/quote&gt;". The owner of the house thought that he was too used to the US where things just work; "&lt;quote&gt;at least she thinks that in America everything is super-efficient, everything works, and she thought 'this is the way things work in Ireland'&lt;/quote&gt;". So he did not make any progress with the owner. &lt;/p&gt;
    &lt;p&gt; At that point, most people would probably just give up and live with the problem; "&lt;quote&gt;I hacked my heating controller instead&lt;/quote&gt;". He set the temperatures in both thermostats to zero, which effectively disabled their ability to affect the heaters at all, and built two small boards running MicroPython, each connected to a temperature and humidity sensor device. He wrote code that would check the temperature every five minutes and send the appropriate commands to start or stop the heaters based on what it found. &lt;/p&gt;
    &lt;p&gt; So the second half of his first winter in Ireland went great. The sensors are accurate to ±0.5°C, so "&lt;quote&gt;problem solved&lt;/quote&gt;". But, that led to a new problem for him. "&lt;quote&gt;I wanted to know things: What's the temperature right now? Is the heating running right now or not? How many hours did it run today compared to yesterday?&lt;/quote&gt;" And so on. &lt;/p&gt;
    &lt;p&gt; He added a small LCD screen to display some information, but he had to actually go to the device and look at it; what he really wanted was to be able to talk to the device over WiFi and get information from the couch while he was watching TV. "&lt;quote&gt;I wanted to host a web server [...] that will show me a little dashboard&lt;/quote&gt;". &lt;/p&gt;
    &lt;p&gt; So he searched for web frameworks for MicroPython; in the winter of 2018-2019, "&lt;quote&gt;there were none&lt;/quote&gt;". Neither Flask nor Bottle, which is a good bit smaller, would run on MicroPython; both are too large for the devices, but, in addition, the standard library for MicroPython is a subset of that of CPython, so many things that they need are missing. A "&lt;quote&gt;normal person&lt;/quote&gt;" would likely have just accepted that and moved on; "&lt;quote&gt;I created a web framework instead.&lt;/quote&gt;" &lt;/p&gt;
    &lt;head rend="h4"&gt;Demo&lt;/head&gt;
    &lt;p&gt;He brought one of his thermostat devices to Prague for the conference and did a small demonstration of it operating during the talk. The device was connected to his laptop using USB, which provided power, but also a serial connection to the board. On the laptop, he used the rshell remote MicroPython shell to talk to the board, effectively using the laptop as a terminal.&lt;/p&gt;
    &lt;p&gt;He started the MicroPython read-eval-print loop (REPL) on the board in order to simulate the normal operation of the board. When it is plugged into the wall, rather than a laptop, it will boot to the web server, so he made that happen with a soft-reboot command. The device then connected to the conference WiFi and gave him the IP address (and port) where the server was running.&lt;/p&gt;
    &lt;p&gt;He switched over to Firefox on his laptop and visited the site, which showed a dashboard that had the current temperature (24.4°) and relative humidity (56.9%) of the room. He also used curl from the laptop to contact the api endpoint of the web application, which returned JSON with the two values and the time. There is no persistent clock on the board, so the application contacts an NTP server to pick up the time when it boots; that allows it to report the last time a measurement was taken.&lt;/p&gt;
    &lt;p&gt; Grinberg said that he wanted to set the expectations at the right level by looking at the capabilities of the microcontrollers he often uses with Microdot. For example, the ESP8266 in his thermostat device has 64KB of RAM and up to 4MB of flash. The ESP8266 is the smallest and least expensive (around €5) device with WiFi that he has found; there are many even smaller devices, but they lack the networking required for running a web server. The other devices he uses are the Raspberry Pi Pico W with 2MB of flash and 256KB of RAM and the ESP32 with up to 8MB of flash and 512KB of RAM. He contrasted those with his laptop, which has 32GB of RAM, so "&lt;quote&gt;you need 500,000 ESP8266s&lt;/quote&gt;" to have the same amount of memory. &lt;/p&gt;
    &lt;head rend="h4"&gt;Features&lt;/head&gt;
    &lt;p&gt;The core framework of Microdot is in a single microdot.py file. It is fully asynchronous, using the MicroPython subset of the CPython asyncio module, so it can run on both interpreters. It uses asyncio because that is the only way to do concurrency on the microcontrollers; there is no support for processes or threads on those devices.&lt;/p&gt;
    &lt;p&gt;Microdot has Flask-style route decorators to define URLs for the application. It has Request and Response classes, as well as hooks to run before and after requests, he said. Handling query strings, form data, and JSON are all available in Microdot via normal Python dictionaries. Importantly, it can handle streaming requests and responses; because of the limited memory of these devices, it may be necessary to split up the handling of larger requests or responses.&lt;/p&gt;
    &lt;p&gt; It supports setting cookies and sending static files. Web applications can be constructed from a set of modules, using sub-applications, which are similar to Flask blueprints. It also has its own web server with TLS support. "&lt;quote&gt;I'm very proud of all the stuff I was able to fit in the core Microdot framework&lt;/quote&gt;", Grinberg said. &lt;/p&gt;
    &lt;p&gt;He hoped that attendees would have to think for a minute to come up with things that are missing from Microdot, but they definitely do exist. There are some officially maintained extensions, each in its own single .py file, to fill some of those holes. They encompass functionality that is important, but he did not want to add to the core because that would make it too large to fit on the low-end ESP8266 that he is using.&lt;/p&gt;
    &lt;p&gt; There is an extension for multipart forms, which includes file uploads; "&lt;quote&gt;this is extremely complicated to parse, it didn't make sense to add it into the core because most people don't do this&lt;/quote&gt;". There is support for WebSocket and server-sent events (SSE). Templates are supported using utemplate for both Python implementations or Jinja, which only works on CPython. There are extensions for basic and token-based authentication and for secure user logins with session data; the latter required a replacement for the CPython-only PyJWT, which Grinberg wrote and contributed to MicroPython as jwt.py. There is a small handful of other extensions that he quickly mentioned as well. &lt;/p&gt;
    &lt;p&gt; "&lt;quote&gt;I consider the documentation as part of the framework&lt;/quote&gt;"; he is "&lt;quote&gt;kind of fanatical&lt;/quote&gt;" about documenting everything. If there is something missing or not explained well, "&lt;quote&gt;it's a bug that I need to fix&lt;/quote&gt;". He writes books, so the documentation is organized similarly; it comes in at 9,267 words, which equates to around 47 minutes of reading time. There is 100% test coverage, he said, and there are around 30 examples, with more coming. &lt;/p&gt;
    &lt;p&gt; A design principle that he follows is "&lt;quote&gt;no dark magic&lt;/quote&gt;". An example of dark magic to him is the Flask application context, "&lt;quote&gt;which very few people understand&lt;/quote&gt;". In Microdot, the request object is explicitly passed to each route function. Another example is the dependency injection that is used by the FastAPI framework to add components; Microdot uses explicit decorators instead. &lt;/p&gt;
    &lt;p&gt; He used the cloc utility to count lines of code, while ignoring comments and blank lines. Using that, Django comes in at 110,000 lines, Flask plus its essential Werkzeug library is 15,500 lines, FastAPI with Starlette is 14,900 lines, Bottle is around 3,000 lines, while the Microdot core has 765 lines ("&lt;quote&gt;believe it or not&lt;/quote&gt;") and a full install with all the extensions on MicroPython comes in at just shy of 1,700 lines of code. &lt;/p&gt;
    &lt;p&gt; He ended with an example of how Microdot can be so small by comparing the URL matching in Flask with Microdot. The Flask version does lots more than Microdot, with more supported types of arguments in a URL and multiple classes in the werkzeug.routing module; it has 1,362 lines of code. For Microdot, there is a more limited set of URL arguments, though there is still the ability to define custom types, and a single URLPattern class; all of that is done in 63 lines of code. "&lt;quote&gt;I don't intend to support everything that Flask supports, in terms of routing, but I intend to support the 20% that covers 80% of the use cases.&lt;/quote&gt;" That is the overall mechanism that he has used to get to something that is so small. &lt;/p&gt;
    &lt;p&gt;An audience member asked about whether the Microdot code was minified in order to get it to fit. Grinberg said that doing so was not all that useful for MicroPython, but the code is smaller on the board because it is precompiled on another system; that results in a microdot.mpy file, which is bytecode for MicroPython. For example, on the low-end device he is using for his thermostats, Microdot would not be able to be compiled on the device itself. There are some other tricks that can also be used for reducing the RAM requirements, like putting the code into the firmware as part of the MicroPython binary.&lt;/p&gt;
    &lt;p&gt; The final question was about performance, and how many requests per second could be handled. Grinberg said that he did not have any real numbers, but that the device he demonstrated is "&lt;quote&gt;really really slow&lt;/quote&gt;". That question led to a blog post in late July where Grinberg tried to more fully answer it. &lt;/p&gt;
    &lt;p&gt;[I would like to thank the Linux Foundation, LWN's travel sponsor, for travel assistance to Prague for EuroPython.]&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Conference&lt;/cell&gt;
        &lt;cell&gt;EuroPython/2025&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Python&lt;/cell&gt;
        &lt;cell&gt;Web&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Aug 23, 2025 15:26 UTC (Sat) by lyda (subscriber, #7429) [Link] (1 responses) When I wrote a lot of python, frameworks like this seemed great. But there's a better way. If you define the OpenAPI definition first, you can then generate the server, you can generate all the clients, you can generate tests for the server and client, as well as fuzz tests for the server. Less common, but you can do the same with gRPC. It also allows you to more easily move from one technology to another. Posted Aug 24, 2025 3:10 UTC (Sun) by ssmith32 (subscriber, #72404) [Link] Certainly not for the problem domain covered in the article. &lt;head&gt;OpenAPI or gRPC is a better path forward&lt;/head&gt;&lt;head&gt;OpenAPI or gRPC is a better path forward&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://lwn.net/Articles/1034121/"/></entry><entry><id>https://news.ycombinator.com/item?id=45155877</id><title>The Expression Problem and its solutions</title><updated>2025-09-07T17:32:18.771495+00:00</updated><content>&lt;doc fingerprint="7698b0504c1917f1"&gt;
  &lt;main&gt;
    &lt;p&gt;The craft of programming is almost universally concerned with different types of data and operations/algorithms that act on this data [1]. Therefore, it's hardly surprising that designing abstractions for data types and operations has been on the mind of software engineers and programming-language designers since... forever.&lt;/p&gt;
    &lt;p&gt;Yet I've only recently encountered a name for a software design problem which I ran into multiple times in my career. It's a problem so fundamental that I was quite surprised that I haven't seen it named before. Here is a quick problem statement.&lt;/p&gt;
    &lt;p&gt;Imagine that we have a set of data types and a set of operations that act on these types. Sometimes we need to add more operations and make sure they work properly on all types; sometimes we need to add more types and make sure all operations work properly on them. Sometimes, however, we need to add both - and herein lies the problem. Most of the mainstream programming languages don't provide good tools to add both new types and new operations to an existing system without having to change existing code. This is called the "expression problem". Studying the problem and its possible solutions gives great insight into the fundamental differences between object-oriented and functional programming and well as concepts like interfaces and multiple dispatch.&lt;/p&gt;
    &lt;head rend="h2"&gt;A motivating example&lt;/head&gt;
    &lt;p&gt;As is my wont, my example comes from the world of compilers and interpreters. To my defense, this is also the example used in some of the seminal historic sources on the expression problem, as the historical perspective section below details.&lt;/p&gt;
    &lt;p&gt;Imagine we're designing a simple expression evaluator. Following the standard interpreter design pattern, we have a tree structure consisting of expressions, with some operations we can do on such trees. In C++ we'd have an interface every node in the expression tree would have to implement:&lt;/p&gt;
    &lt;code&gt;class Expr {
public:
  virtual std::string ToString() const = 0;
  virtual double Eval() const = 0;
};
&lt;/code&gt;
    &lt;p&gt;This interface shows that we currently have two operations we can do on expression trees - evaluate them and query for their string representations. A typical leaf node expression:&lt;/p&gt;
    &lt;code&gt;class Constant : public Expr {
public:
  Constant(double value) : value_(value) {}

  std::string ToString() const {
    std::ostringstream ss;
    ss &amp;lt;&amp;lt; value_;
    return ss.str();
  }

  double Eval() const {
    return value_;
  }

private:
  double value_;
};
&lt;/code&gt;
    &lt;p&gt;And a typical composite expression:&lt;/p&gt;
    &lt;code&gt;class BinaryPlus : public Expr {
public:
  BinaryPlus(const Expr&amp;amp; lhs, const Expr&amp;amp; rhs) : lhs_(lhs), rhs_(rhs) {}

  std::string ToString() const {
    return lhs_.ToString() + " + " + rhs_.ToString();
  }

  double Eval() const {
    return lhs_.Eval() + rhs_.Eval();
  }

private:
  const Expr&amp;amp; lhs_;
  const Expr&amp;amp; rhs_;
};
&lt;/code&gt;
    &lt;p&gt;Until now, it's all fairly basic stuff. How extensible is this design? Let's see... if we want to add new expression types ("variable reference", "function call" etc.), that's pretty easy. We just define additional classes inheriting from Expr and implement the Expr interface (ToString and Eval).&lt;/p&gt;
    &lt;p&gt;However, what happens if we want to add new operations that can be applied to expression trees? Right now we have Eval and ToString, but we may want additional operations like "type check" or "serialize" or "compile to machine code" or whatever.&lt;/p&gt;
    &lt;p&gt;It turns out that adding new operations isn't as easy as adding new types. We'd have to change the Expr interface, and consequently change every existing expression type to support the new method(s). If we don't control the original code or it's hard to change it for other reasons, we're in trouble.&lt;/p&gt;
    &lt;p&gt;In other words, we'd have to violate the venerable open-closed principle, one of the main principles of object-oriented design, defined as:&lt;/p&gt;
    &lt;quote&gt;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&lt;/quote&gt;
    &lt;p&gt;The problem we're hitting here is called the expression problem, and the example above shows how it applies to object-oriented programming.&lt;/p&gt;
    &lt;p&gt;Interestingly, the expression problem bites functional programming languages as well. Let's see how.&lt;/p&gt;
    &lt;head rend="h2"&gt;The expression problem in functional programming&lt;/head&gt;
    &lt;p&gt;Update 2018-02-05: a new post discusses the problem and its solutions in Haskell in more depth.&lt;/p&gt;
    &lt;p&gt;Object-oriented approaches tend to collect functionality in objects (types). Functional languages cut the cake from a different angle, usually preferring types as thin data containers, collecting most functionality in functions (operations) that act upon them. Functional languages don't escape the expression problem - it just manifests there in a different way.&lt;/p&gt;
    &lt;p&gt;To demonstrate this, let's see how the expression evaluator / stringifier looks in Haskell. Haskell is a good poster child for functional programming since its pattern matching on types makes such code especially succinct:&lt;/p&gt;
    &lt;code&gt;module Expressions where

data Expr = Constant Double
          | BinaryPlus Expr Expr

stringify :: Expr -&amp;gt; String
stringify (Constant c) = show c
stringify (BinaryPlus lhs rhs) = stringify lhs
                                ++ " + "
                                ++ stringify rhs

evaluate :: Expr -&amp;gt; Double
evaluate (Constant c) = c
evaluate (BinaryPlus lhs rhs) = evaluate lhs + evaluate rhs
&lt;/code&gt;
    &lt;p&gt;Now let's say we want to add a new operation - type checking. We simply have to add a new function typecheck and define how it behaves for all known kinds of expressions. No need to modify existing code.&lt;/p&gt;
    &lt;p&gt;On the other hand, if we want to add a new type (like "function call"), we get into trouble. We now have to modify all existing functions to handle this new type. So we hit exactly the same problem, albeit from a different angle.&lt;/p&gt;
    &lt;head rend="h2"&gt;The expression problem matrix&lt;/head&gt;
    &lt;p&gt;A visual representation of the expression problem can be helpful to appreciate how it applies to OOP and FP in different ways, and how a potential solution would look.&lt;/p&gt;
    &lt;p&gt;The following 2-D table (a "matrix") has types in its rows and operations in its columns. A matrix cell row, col is checked when the operation col is implemented for type row:&lt;/p&gt;
    &lt;p&gt;In object-oriented languages, it's easy to add new types but difficult to add new operations:&lt;/p&gt;
    &lt;p&gt;Whereas in functional languages, it's easy to add new operations but difficult to add new types:&lt;/p&gt;
    &lt;head rend="h2"&gt;A historical perspective&lt;/head&gt;
    &lt;p&gt;The expression problem isn't new, and has likely been with us since the early days; it pops its head as soon as programs reach some not-too-high level of complexity.&lt;/p&gt;
    &lt;p&gt;It's fairly certain that the name expression problem comes from an email sent by Philip Wadler to a mailing list deailing with adding generics to Java (this was back in the 1990s).&lt;/p&gt;
    &lt;p&gt;In that email, Wadler points to the paper "Synthesizing Object-Oriented and Functional Design to Promote Re-Use" by Krishnamurthi, Felleisen and Friedman as an earlier work describing the problem and proposed solutions. This is a great paper and I highly recommend reading it. Krishnamurthi et.al., in their references, point to papers from as early as 1975 describing variations of the problem in Algol.&lt;/p&gt;
    &lt;head rend="h2"&gt;Flipping the matrix with the visitor pattern&lt;/head&gt;
    &lt;p&gt;So far the article has focused on the expression problem, and I hope it's clear by now. However, the title also has the word solution in it, so let's turn to that.&lt;/p&gt;
    &lt;p&gt;It's possible to kinda solve (read on to understand why I say "kinda") the expression problem in object-oriented languages; first, we have to look at how we can flip the problem on its side using the visitor pattern. The visitor pattern is very common for this kind of problems, and for a good reason. It lets us reformulate our code in a way that makes it easier to change in some dimensions (though harder in others).&lt;/p&gt;
    &lt;p&gt;For the C++ sample shown above, rewriting it using the visitor pattern means adding a new "visitor" interface:&lt;/p&gt;
    &lt;code&gt;class ExprVisitor {
public:
  virtual void VisitConstant(const Constant&amp;amp; c) = 0;
  virtual void VisitBinaryPlus(const BinaryPlus&amp;amp; bp) = 0;
};
&lt;/code&gt;
    &lt;p&gt;And changing the Expr interface to be:&lt;/p&gt;
    &lt;code&gt;class Expr {
public:
  virtual void Accept(ExprVisitor* visitor) const = 0;
};
&lt;/code&gt;
    &lt;p&gt;Now expression types defer the actual computation to the visitor, as follows:&lt;/p&gt;
    &lt;code&gt;class Constant : public Expr {
public:
  Constant(double value) : value_(value) {}

  void Accept(ExprVisitor* visitor) const {
    visitor-&amp;gt;VisitConstant(*this);
  }

  double GetValue() const {
    return value_;
  }

private:
  double value_;
};

// ... similarly, BinaryPlus would have
//
//    void Accept(ExprVisitor* visitor) const {
//      visitor-&amp;gt;VisitBinaryPlus(*this);
//    }
//
// ... etc.
&lt;/code&gt;
    &lt;p&gt;A sample visitor for evaluation would be [2]:&lt;/p&gt;
    &lt;code&gt;class Evaluator : public ExprVisitor {
public:
  double GetValueForExpr(const Expr&amp;amp; e) {
    return value_map_[&amp;amp;e];
  }

  void VisitConstant(const Constant&amp;amp; c) {
    value_map_[&amp;amp;c] = c.GetValue();
  }

  void VisitBinaryPlus(const BinaryPlus&amp;amp; bp) {
    bp.GetLhs().Accept(this);
    bp.GetRhs().Accept(this);
    value_map_[&amp;amp;bp] = value_map_[&amp;amp;(bp.GetLhs())] + value_map_[&amp;amp;(bp.GetRhs())];
  }

private:
  std::map&amp;lt;const Expr*, double&amp;gt; value_map_;
};
&lt;/code&gt;
    &lt;p&gt;It should be obvious that for a given set of data types, adding new visitors is easy and doesn't require modifying any other code. On the other hand, adding new types is problematic since it means we have to update the ExprVisitor interface with a new abstract method, and consequently update all the visitors to implement it.&lt;/p&gt;
    &lt;p&gt;So it seems that we've just turned the expression problem on its side: we're using an OOP language, but now it's hard to add types and easy to add ops, just like in the functional approach. I find it extremely interesting that we can do this. In my eyes this highlights the power of different abstractions and paradigms, and how they enable us to rethink a problem in a completely different light.&lt;/p&gt;
    &lt;p&gt;So we haven't solved anything yet; we've just changed the nature of the problem we're facing. Worry not - this is just a stepping stone to an actual solution.&lt;/p&gt;
    &lt;head rend="h2"&gt;Extending the visitor pattern&lt;/head&gt;
    &lt;p&gt;The following is code excerpts from a C++ solution that follows the extended visitor pattern proposed by Krishnamurthi et. al. in their paper; I strongly suggest reading the paper (particularly section 3) if you want to understand this code on a deep level. A complete code sample in C++ that compiles and runs is available here.&lt;/p&gt;
    &lt;p&gt;Adding new visitors (ops) with the visitor pattern is easy. Our challenge is to add a new type without upheaving too much existing code. Let's see how it's done.&lt;/p&gt;
    &lt;p&gt;One small design change that we should make to the original visitor pattern is use virtual inheritance for Evaluator, for reasons that will soon become obvious:&lt;/p&gt;
    &lt;code&gt;class Evaluator : virtual public ExprVisitor {
  // .. the rest is the same
};
&lt;/code&gt;
    &lt;p&gt;Now we're going to add a new type - FunctionCall:&lt;/p&gt;
    &lt;code&gt;// This is the new ("extended") expression we're adding.
class FunctionCall : public Expr {
public:
  FunctionCall(const std::string&amp;amp; name, const Expr&amp;amp; argument)
      : name_(name), argument_(argument) {}

  void Accept(ExprVisitor* visitor) const {
    ExprVisitorWithFunctionCall* v =
        dynamic_cast&amp;lt;ExprVisitorWithFunctionCall*&amp;gt;(visitor);
    if (v == nullptr) {
      std::cerr &amp;lt;&amp;lt; "Fatal: visitor is not ExprVisitorWithFunctionCall\n";
      exit(1);
    }
    v-&amp;gt;VisitFunctionCall(*this);
  }

private:
  std::string name_;
  const Expr&amp;amp; argument_;
};
&lt;/code&gt;
    &lt;p&gt;Since we don't want to modify the existing visitors, we create a new one, extending Evaluator for function calls. But first, we need to extend the ExprVisitor interface to support the new type:&lt;/p&gt;
    &lt;code&gt;class ExprVisitorWithFunctionCall : virtual public ExprVisitor {
public:
  virtual void VisitFunctionCall(const FunctionCall&amp;amp; fc) = 0;
};
&lt;/code&gt;
    &lt;p&gt;Finally, we write the new evaluator, which extends Evaluator and supports the new type:&lt;/p&gt;
    &lt;code&gt;class EvaluatorWithFunctionCall : public ExprVisitorWithFunctionCall,
                                  public Evaluator {
public:
  void VisitFunctionCall(const FunctionCall&amp;amp; fc) {
    std::cout &amp;lt;&amp;lt; "Visiting FunctionCall!!\n";
  }
};
&lt;/code&gt;
    &lt;p&gt;Multiple inheritance, virtual inheritance, dynamic type checking... that's pretty hard-core C++ we have to use here, but there's no choice. Unfortunately, multiple inheritance is the only way C++ lets us express the idea that a class implements some interface while at the same time deriving functionality from another class. What we want to have here is an evaluator (EvaluatorWithFunctionCall) that inherits all functionality from Evaluator, and also implements the ExprVisitorWithFunctionCall interface. In Java, we could say something like:&lt;/p&gt;
    &lt;code&gt;class EvaluatorWithFunctionCall extends Evaluator implements ExprVisitor {
  // ...
}
&lt;/code&gt;
    &lt;p&gt;But in C++ virtual multiple inheritance is the tool we have. The virtual part of the inheritance is essential here for the compiler to figure out that the ExprVisitor base underlying both Evaluator and ExprVisitorWithFunctionCall is the same and should only appear once in EvaluatorWithFunctionCall. Without virtual, the compiler would complain that EvaluatorWithFunctionCall doesn't implement the ExprVisitor interface.&lt;/p&gt;
    &lt;p&gt;This is a solution, alright. We kinda added a new type FunctionCall and can now visit it without changing existing code (assuming the virtual inheritance was built into the design from the start to anticipate this approach). Here I am using this "kinda" word again... it's time to explain why.&lt;/p&gt;
    &lt;p&gt;This approach has multiple flaws, in my opinion:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Note the dynamic_cast in FunctionCall::Accept. It's fairly ugly that we're forced to mix in dynamic checks into this code, which should supposedly rely on static typing and the compiler. But it's just a sign of a larger problem.&lt;/item&gt;
      &lt;item&gt;If we have an instance of an Evaluator, it will no longer work on the whole extended expression tree since it has no understanding of FunctionCall. It's easy to say that all new evaluators should rather be EvaluatorWithFunctionCall, but we don't always control this. What about code that was already written? What about Evaluators created in third-party or library code which we have no control of?&lt;/item&gt;
      &lt;item&gt;The virtual inheritance is not the only provision we have to build into the design to support this pattern. Some visitors would need to create new, recursive visitors to process complex expressions. But we can't anticipate in advance which dynamic type of visitor needs to be created. Therefore, the visitor interface should also accept a "visitor factory" which extended visitors will supply. I know this sounds complicated, and I don't want to spend more time on this here - but the Krishnamurthi paper addresses this issue extensively in section 3.4&lt;/item&gt;
      &lt;item&gt;Finally, the solution is unwieldy for realistic applications. Adding one new type looks manageable; what about adding 15 new types, gradually over time? Imagine the horrible zoo of ExprVisitor extensions and dynamic checks this would lead to.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Yeah, programming is hard. I could go on and on about the limitations of classical OOP and how they surface in this example [3]. Instead, I'll just present how the expression problem can be solved in a language that supports multiple dispatch and separates the defintion of methods from the bodies of types they act upon.&lt;/p&gt;
    &lt;head rend="h2"&gt;Solving the expression problem in Clojure&lt;/head&gt;
    &lt;p&gt;There are a number of ways the expression problem as displayed in this article can be solved in Clojure using the language's built-in features. Let's start with the simplest one - multi-methods.&lt;/p&gt;
    &lt;p&gt;First we'll define the types as records:&lt;/p&gt;
    &lt;code&gt;(defrecord Constant [value])
(defrecord BinaryPlus [lhs rhs])
&lt;/code&gt;
    &lt;p&gt;Then, we'll define evaluate as a multimethod that dispatches upon the type of its argument, and add method implementations for Constant and BinaryPlus:&lt;/p&gt;
    &lt;code&gt;(defmulti evaluate class)

(defmethod evaluate Constant
  [c] (:value c))

(defmethod evaluate BinaryPlus
  [bp] (+ (evaluate (:lhs bp)) (evaluate (:rhs bp))))
&lt;/code&gt;
    &lt;p&gt;Now we can already evaluate expressions:&lt;/p&gt;
    &lt;code&gt;user=&amp;gt; (use 'expression.multimethod)
nil
user=&amp;gt; (evaluate (-&amp;gt;BinaryPlus (-&amp;gt;Constant 1.1) (-&amp;gt;Constant 2.2)))
3.3000000000000003
&lt;/code&gt;
    &lt;p&gt;Adding a new operation is easy. Let's add stringify:&lt;/p&gt;
    &lt;code&gt;(defmulti stringify class)

(defmethod stringify Constant
  [c] (str (:value c)))

(defmethod stringify BinaryPlus
  [bp]
  (clojure.string/join " + " [(stringify (:lhs bp))
                              (stringify (:rhs bp))]))
&lt;/code&gt;
    &lt;p&gt;Testing it:&lt;/p&gt;
    &lt;code&gt;user=&amp;gt; (stringify (-&amp;gt;BinaryPlus (-&amp;gt;Constant 1.1) (-&amp;gt;Constant 2.2)))
"1.1 + 2.2"
&lt;/code&gt;
    &lt;p&gt;How about adding new types? Suppose we want to add FunctionCall. First, we'll define the new type. For simplicity, the func field of FunctionCall is just a Clojure function. In real code it could be some sort of function object in the language we're interpreting:&lt;/p&gt;
    &lt;code&gt;(defrecord FunctionCall [func argument])
&lt;/code&gt;
    &lt;p&gt;And define how evaluate and stringify work for FunctionCall:&lt;/p&gt;
    &lt;code&gt;(defmethod evaluate FunctionCall
  [fc] ((:func fc) (evaluate (:argument fc))))

(defmethod stringify FunctionCall
  [fc] (str (clojure.repl/demunge (str (:func fc)))
            "("
            (stringify (:argument fc))
            ")"))
&lt;/code&gt;
    &lt;p&gt;Let's take it for a spin (the full code is here):&lt;/p&gt;
    &lt;code&gt;user=&amp;gt; (def callexpr (-&amp;gt;FunctionCall twice (-&amp;gt;BinaryPlus (-&amp;gt;Constant 1.1)
                                                         (-&amp;gt;Constant 2.2))))
#'user/callexpr
user=&amp;gt; (evaluate callexpr)
6.6000000000000005
user=&amp;gt; (stringify callexpr)
"expression.multimethod/twice@52e29c38(1.1 + 2.2)"
&lt;/code&gt;
    &lt;p&gt;It should be evident that the expression problem matrix for Clojure is:&lt;/p&gt;
    &lt;p&gt;We can add new ops without touching any existing code. We can also add new types without touching any existing code. The code we're adding is only the new code to handle the ops/types in question. The existing ops and types could come from a third-party library to which we don't have source access. We could still extend them for our new ops and types, without ever having to touch (or even see) the original source code [4].&lt;/p&gt;
    &lt;head rend="h2"&gt;Is multiple dispatch necessary to cleanly solve the expression problem?&lt;/head&gt;
    &lt;p&gt;I've written about multiple dispatch in Clojure before, and in the previous section we see another example of how to use the language's defmulti/defmethod constructs. But is it multiple dispatch at all? No! It's just single dispatch, really. Our ops (evaluate and stringify) dispatch on a single argument - the expression type) [5].&lt;/p&gt;
    &lt;p&gt;If we're not really using multiple dispatch, what is the secret sauce that lets us solve the expression problem so elegantly in Clojure? The answer is - open methods. Note a crucial difference between how methods are defined in C++/Java and in Clojure. In C++/Java, methods have to be part of a class and defined (or at least declared) in its body. You cannot add a method to a class without changing the class's source code.&lt;/p&gt;
    &lt;p&gt;In Clojure, you can. In fact, since data types and multimethods are orthogonal entities, this is by design. Methods simply live outside types - they are first class citizens, rather than properties of types. We don't add methods to a type, we add new methods that act upon the type. This doesn't require modifying the type's code in any way (or even having access to its code).&lt;/p&gt;
    &lt;p&gt;Some of the other popular programming languages take a middle way. In languages like Python, Ruby and JavaScript methods belong to types, but we can dynamically add, remove and replace methods in a class even after it was created. This technique is lovingly called monkey patching. While initially enticing, it can lead to big maintainability headaches in code unless we're very careful. Therefore, if I had to face the expression problem in Python I'd prefer to roll out some sort of multiple dispatch mechanism for my program rather than rely on monkey patching.&lt;/p&gt;
    &lt;head rend="h2"&gt;Another Clojure solution - using protocols&lt;/head&gt;
    &lt;p&gt;Clojure's multimethods are very general and powerful. So general, in fact, that their performance may not be optimal for the most common case - which is single dispatch based on the type of the sole method argument; note that this is exactly the kind of dispatch I'm using in this article. Therefore, starting with Clojure 1.2, user code gained the ability to define and use protocols - a language feature that was previously restricted only to built-in types.&lt;/p&gt;
    &lt;p&gt;Protocols leverage the host platform's (which in Clojure's case is mostly Java) ability to provide quick virtual dispatch, so using them is a very efficient way to implement runtime polymorphism. In addition, protocols retain enough of the flexibility of multimethods to elegantly solve the expression problem. Curiously, this was on the mind of Clojure's designers right from the start. The Clojure documentation page about protocols lists this as one of their capabilities:&lt;/p&gt;
    &lt;quote&gt;[...] Avoid the 'expression problem' by allowing independent extension of the set of types, protocols, and implementations of protocols on types, by different parties. [...] do so without wrappers/adapters&lt;/quote&gt;
    &lt;p&gt;Clojure protocols are an interesting topic, and while I'd like to spend some more time on them, this article is becoming too long as it is. So I'll leave a more thorough treatment for some later time and for now will just show how protocols can also be used to solve the expression problem we're discussing.&lt;/p&gt;
    &lt;p&gt;The type definitions remain the same:&lt;/p&gt;
    &lt;code&gt;(defrecord Constant [value])
(defrecord BinaryPlus [lhs rhs])
&lt;/code&gt;
    &lt;p&gt;However, instead of defining a multimethod for each operation, we now define a protocol. A protocol can be thought of as an interface in a language like Java, C++ or Go - a type implements an interface when it defines the set of methods declared by the interface. In this respect, Clojure's protocols are more like Go's interfaces than Java's, as we don't have to say a-priori which interfaces a type implements when we define it.&lt;/p&gt;
    &lt;p&gt;Let's start with the Evaluatable protocol, that consists of a single method - evaluate:&lt;/p&gt;
    &lt;code&gt;(defprotocol Evaluatable
  (evaluate [this]))
&lt;/code&gt;
    &lt;p&gt;Another protocol we'll define is Stringable:&lt;/p&gt;
    &lt;code&gt;(defprotocol Stringable
  (stringify [this]))
&lt;/code&gt;
    &lt;p&gt;Now we can make sure our types implement these protocols:&lt;/p&gt;
    &lt;code&gt;(extend-type Constant
  Evaluatable
    (evaluate [this] (:value this))
  Stringable
    (stringify [this] (str (:value this))))

(extend-type BinaryPlus
  Evaluatable
    (evaluate [this] (+ (evaluate (:lhs this)) (evaluate (:rhs this))))
  Stringable
    (stringify [this]
      (clojure.string/join " + " [(stringify (:lhs this))
                                  (stringify (:rhs this))])))
&lt;/code&gt;
    &lt;p&gt;The extend-type macro is a convenience wrapper around the more general extend - it lets us implement multiple protocols for a given type. A sibling macro named extend-protocol lets us implement the same protocol for multiple types in the same invocation [6].&lt;/p&gt;
    &lt;p&gt;It's fairly obvious that adding new data types is easy - just as we did above, we simply use extend-type for each new data type to implement our current protocols. But how do we add a new protocol and make sure all existing data types implement it? Once again, it's easy because we don't have to modify any existing code. Here's a new protocol:&lt;/p&gt;
    &lt;code&gt;(defprotocol Serializable
  (serialize [this]))
&lt;/code&gt;
    &lt;p&gt;And this is its implementation for the currently supported data types:&lt;/p&gt;
    &lt;code&gt;(extend-protocol Serializable
  Constant
    (serialize [this] [(type this) (:value this)])
  BinaryPlus
    (serialize [this] [(type this)
                       (serialize (:lhs this))
                       (serialize (:rhs this))]))
&lt;/code&gt;
    &lt;p&gt;This time, extending a single protocol for multiple data types - extend-protocol is the more convenient macro to use.&lt;/p&gt;
    &lt;head rend="h2"&gt;Small interfaces are extensibility-friendly&lt;/head&gt;
    &lt;p&gt;You may have noted that the protocols (interfaces) defined in the Clojure solution are very small - consisting of a single method. Since adding methods to an existing protocol is much more problematic (I'm not aware of a way to do this in Clojure), keeping protocols small is a good idea. This guideline comes up in other contexts as well; for example, it's good practice to keep interfaces in Go very minimal.&lt;/p&gt;
    &lt;p&gt;In our C++ solution, splitting the Expr interface could also be a good idea, but it wouldn't help us with the expression problem, since we can't modify which interfaces a class implements after we've defined it; in Clojure we can.&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[1]&lt;/cell&gt;
        &lt;cell&gt;"Types of data" and "operations" are two terms that should be fairly obvious to modern-day programmers. Philip Wadler, in his discussion of the expression problem (see the "historical perspective" section of the article) calls them "datatypes" and "functions". A famous quote from Fred Brooks's The Mythical Man Month (1975) is "Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I wonât usually need your flowcharts; theyâll be obvious."&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[2]&lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Note the peculiar way in which data is passed between Visit* methods in a Expr* -&amp;gt; Value map kept in the visitor. This is due to our inability to make Visit* methods return different types in different visitors. For example, in Evaluator we'd want them to return double, but in Stringifier they'd probably return std::string. Unfortunately C++ won't let us easily mix templates and virtual functions, so we have to resort to either returning void* the C way or the method I'm using here.&lt;/p&gt;
          &lt;p&gt;Curiously, in their paper Krishnamurthi et.al. run into the same issue in the dialect of Java they're using, and propose some language extensions to solve it. Philip Wadler uses proposed Java generics in his approach.&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[3]&lt;/cell&gt;
        &lt;cell&gt;I can't resist, so just in brief: IMHO inheritance is only good for a very narrow spectrum of uses, but languages like C++ hail it as the main extension mechanism of types. But inheritance is deeply flawed for many other use cases, such as implementations of interfaces. Java is a bit better in this regard, but in the end the primacy of classes and their "closed-ness" make a lot of tasks - like the expression problem - very difficult to express in a clean way.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[4]&lt;/cell&gt;
        &lt;cell&gt;In fact, there are plenty of examples in which the Clojure implementation and the standard library provide protocols that can be extended by the user for user-defined types. Extending user-written protocols and multimethods for built-in types is trivial. As an exercise, add an evaluate implementation for java.lang.Long, so that built-in integers could participate in our expression trees without requiring wrapping in a Constant.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[5]&lt;/cell&gt;
        &lt;cell&gt;FWIW, we can formulate a multiple dispatch solution to the expression problem in Clojure. The key idea is to dispatch on two things: type and operation. Just for fun, I coded a prototype that does this which you can see here. I think the approach presented in the article - each operation being its own multimethod - is preferable, though.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;[6]&lt;/cell&gt;
        &lt;cell&gt;The sharp-eyed reader will notice a cool connection to the expression problem matrix. extend-type can add a whole new row to the matrix, while extend-protocol adds a column. extend adds just a single cell.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/"/></entry><entry><id>https://news.ycombinator.com/item?id=45157020</id><title>Show HN: I'm a dermatologist and I vibe coded a skin cancer learning app</title><updated>2025-09-07T17:32:18.093982+00:00</updated><content>&lt;doc fingerprint="7fb8a917f1b73ba5"&gt;
  &lt;main&gt;
    &lt;p&gt;For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.&lt;/p&gt;
    &lt;p&gt;Are you worried about this skin lesion?Swipe left (concerned) / right (not concerned) or use the buttons.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://molecheck.info/"/></entry><entry><id>https://news.ycombinator.com/item?id=45157110</id><title>Serverless Horrors</title><updated>2025-09-07T17:32:17.371214+00:00</updated><content>&lt;doc fingerprint="499a9798958793a"&gt;
  &lt;main&gt;
    &lt;head rend="h5"&gt;Posts&lt;/head&gt;
    &lt;head rend="h4"&gt;~$1189.420/month&lt;/head&gt;
    &lt;p&gt;For no reason, Webflow charged me $1189.420 for a single month from a 69$/month plan.&lt;/p&gt;
    &lt;head rend="h4"&gt;$100,000.420&lt;/head&gt;
    &lt;p&gt;I ran a semi popular WebGL games uploading site that was hit bad by a DoS and I got a single day firebase bill for $100k...&lt;/p&gt;
    &lt;head rend="h4"&gt;$738.420&lt;/head&gt;
    &lt;p&gt;I subscribe to Vercel Pro for $20 per month. I also added a spending limit of $120, so no nasty surprises, right?&lt;/p&gt;
    &lt;head rend="h4"&gt;$70,000.69&lt;/head&gt;
    &lt;p&gt;You pay $50/month for your project, but one day you woke up to a $70,000 bill...&lt;/p&gt;
    &lt;head rend="h4"&gt;$22.639,69&lt;/head&gt;
    &lt;p&gt;I received an insanely bill of 22k USD today from simply using BigQuery on a public data set in the playground...&lt;/p&gt;
    &lt;head rend="h4"&gt;$250/month&lt;/head&gt;
    &lt;p&gt;9.000 page visits and I have to pay $250/month for it, that is $3000/year...&lt;/p&gt;
    &lt;head rend="h4"&gt;$1273.69&lt;/head&gt;
    &lt;p&gt;We asked Devin (AI) to make a change in our codebase....&lt;/p&gt;
    &lt;head rend="h4"&gt;$530.19&lt;/head&gt;
    &lt;p&gt;Never had to pay anything and suddenly im billed $530....&lt;/p&gt;
    &lt;head rend="h4"&gt;$383.69&lt;/head&gt;
    &lt;p&gt;Woke up to an almost $400 bill for my documentation site...&lt;/p&gt;
    &lt;head rend="h4"&gt;$103.26&lt;/head&gt;
    &lt;p&gt;Why $103 is a horror story? Well, imagine that you are on a free tier...&lt;/p&gt;
    &lt;head rend="h4"&gt;$96,280.69&lt;/head&gt;
    &lt;p&gt;So freaking speechless right now....&lt;/p&gt;
    &lt;head rend="h4"&gt;$120,000.420&lt;/head&gt;
    &lt;p&gt;Cloudflare took down our website after trying to force us to pay 120k$ within 24h...&lt;/p&gt;
    &lt;head rend="h4"&gt;$1,300.69&lt;/head&gt;
    &lt;p&gt;Imagine you create an empty, private AWS S3 bucket in a region of your preference...&lt;/p&gt;
    &lt;head rend="h4"&gt;$11,000.69&lt;/head&gt;
    &lt;p&gt;Sent $11k worth of emails during DoS attack, then lost my database...&lt;/p&gt;
    &lt;head rend="h4"&gt;$104,500.123&lt;/head&gt;
    &lt;p&gt;So I received an email from Netlify last weekend saying that I have a $104,500.00 bill overdue...&lt;/p&gt;
    &lt;head rend="h4"&gt;$23,000.420&lt;/head&gt;
    &lt;p&gt;What is happening?! Someone spammed EchoFox and spiked my Vercel bill to $23k and caused 56k+ accounts and trials...&lt;/p&gt;
    &lt;head rend="h4"&gt;$3,000.69&lt;/head&gt;
    &lt;p&gt;Attention Vercel users. Be careful what you test or deploy to Vercel. I decided to try out...&lt;/p&gt;
    &lt;head rend="h4"&gt;$620.123&lt;/head&gt;
    &lt;p&gt;My sitemap.txt used hundreds of GB/hours apparently...&lt;/p&gt;
    &lt;head rend="h4"&gt;$72,000.999&lt;/head&gt;
    &lt;p&gt;We Burnt $72K testing Firebase + Cloud Run and almost went Bankrupt...&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://serverlesshorrors.com/"/></entry><entry><id>https://news.ycombinator.com/item?id=45157223</id><title>Show HN: Semantic grep for Claude Code (local embeddings)</title><updated>2025-09-07T17:32:16.725483+00:00</updated><content>&lt;doc fingerprint="3b13f818c3848bc2"&gt;
  &lt;main&gt;
    &lt;p&gt;ck (seek) finds code by meaning, not just keywords. It's a drop-in replacement for &lt;code&gt;grep&lt;/code&gt; that understands what you're looking for — search for "error handling" and find try/catch blocks, error returns, and exception handling code even when those exact words aren't present.&lt;/p&gt;
    &lt;code&gt;cargo install ck-search&lt;/code&gt;
    &lt;code&gt;# Find error handling patterns (finds try/catch, Result types, etc.)
ck --sem "error handling" src/

# Traditional grep-compatible search still works  
ck -n "TODO" *.rs

# Combine both: semantic relevance + keyword filtering
ck --hybrid "connection timeout" src/&lt;/code&gt;
    &lt;p&gt;For Developers: Stop hunting through thousands of regex false positives. Find the code you actually need by describing what it does.&lt;/p&gt;
    &lt;p&gt;For AI Agents: Get structured, semantic search results in JSON format. Perfect for code analysis, documentation generation, and automated refactoring.&lt;/p&gt;
    &lt;p&gt;For Teams: Works exactly like &lt;code&gt;grep&lt;/code&gt; with the same flags and behavior, but adds semantic intelligence when you need it.&lt;/p&gt;
    &lt;code&gt;# Build from source
cargo build --release

# Index your project for semantic search
./target/debug/ck index src/

# Search by meaning
./target/debug/ck --sem "authentication logic" src/
./target/debug/ck --sem "database connection pooling" src/
./target/debug/ck --sem "retry mechanisms" src/

# Use all the grep features you know
./target/debug/ck -n -C 3 "error" src/
./target/debug/ck -r "TODO|FIXME" .&lt;/code&gt;
    &lt;p&gt;Find code by concept, not keywords. Searches understand synonyms, related terms, and conceptual similarity.&lt;/p&gt;
    &lt;code&gt;# These find related code even without exact keywords:
ck --sem "retry logic"           # finds backoff, circuit breakers
ck --sem "user authentication"   # finds login, auth, credentials  
ck --sem "data validation"       # finds sanitization, type checking

# Get complete functions/classes containing matches (NEW!)
ck --sem --full-section "error handling"  # returns entire functions
ck --full-section "async def" src/        # works with regex too&lt;/code&gt;
    &lt;p&gt;All your muscle memory works. Same flags, same behavior, same output format.&lt;/p&gt;
    &lt;code&gt;ck -i "warning" *.log              # Case-insensitive  
ck -n -A 3 -B 1 "error" src/       # Line numbers + context
ck --no-filename "TODO" src/        # Suppress filenames (grep -h equivalent)
ck -l "error" src/                  # List files with matches only (NEW!)
ck -L "TODO" src/                   # List files without matches (NEW!)
ck -r --exclude "*.test.js" "bug"  # Recursive with exclusions
ck "pattern" file1.txt file2.txt   # Multiple files&lt;/code&gt;
    &lt;p&gt;Combine keyword precision with semantic understanding using Reciprocal Rank Fusion.&lt;/p&gt;
    &lt;code&gt;ck --hybrid "async timeout" src/    # Best of both worlds
ck --hybrid --scores "cache" src/   # Show relevance scores with color highlighting
ck --hybrid --threshold 0.02 query  # Filter by minimum relevance
ck -l --hybrid "database" src/      # List files using hybrid search&lt;/code&gt;
    &lt;p&gt;Perfect JSON output for LLMs, scripts, and automation.&lt;/p&gt;
    &lt;code&gt;ck --json --sem "error handling" src/ | jq '.file'
ck --json --topk 5 "TODO" . | jq -r '.preview'
ck --json --full-section --sem "database" . | jq -r '.preview'  # Complete functions&lt;/code&gt;
    &lt;p&gt;Automatically excludes cache directories, build artifacts, and system files.&lt;/p&gt;
    &lt;code&gt;# These are excluded by default:
# .git, node_modules, target/, .fastembed_cache, __pycache__

# Override defaults:
ck --no-default-excludes "pattern" .     # Search everything
ck --exclude "dist" --exclude "logs" .   # Add custom exclusions&lt;/code&gt;
    &lt;code&gt;# Create semantic index (one-time setup)
ck index /path/to/project

# Now search instantly by meaning
ck --sem "database queries" .
ck --sem "error handling" .
ck --sem "authentication" .&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;--regex&lt;/code&gt;(default): Classic grep behavior, no indexing required&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--sem&lt;/code&gt;: Pure semantic search using embeddings (requires index)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--hybrid&lt;/code&gt;: Combines regex + semantic with intelligent ranking&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ck --sem --scores "machine learning" docs/
# [0.847] ./ai_guide.txt: Machine learning introduction...
# [0.732] ./statistics.txt: Statistical learning methods...
# [0.681] ./algorithms.txt: Classification algorithms...&lt;/code&gt;
    &lt;code&gt;# Glob patterns work
ck --sem "authentication" *.py *.js *.rs

# Multiple files
ck --sem "error handling" src/auth.rs src/db.rs

# Quoted patterns prevent shell expansion  
ck --sem "auth" "src/**/*.ts"&lt;/code&gt;
    &lt;code&gt;# Only high-confidence semantic matches
ck --sem --threshold 0.7 "query"

# Low-confidence hybrid matches (good for exploration)
ck --hybrid --threshold 0.01 "concept"

# Get complete code sections instead of snippets (NEW!)
ck --sem --full-section "database queries"
ck --full-section "class.*Error" src/     # Complete classes&lt;/code&gt;
    &lt;code&gt;# Limit results for focused analysis
ck --sem --topk 5 "authentication patterns"

# Great for AI agent consumption
ck --json --topk 10 "error handling" | process_results.py&lt;/code&gt;
    &lt;code&gt;# Check index status
ck status .

# Clean up and rebuild
ck clean .
ck index .

# Add single file to index
ck add new_file.rs&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Language&lt;/cell&gt;
        &lt;cell role="head"&gt;Indexing&lt;/cell&gt;
        &lt;cell role="head"&gt;Tree-sitter Parsing&lt;/cell&gt;
        &lt;cell role="head"&gt;Semantic Chunking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Python&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅ Functions, classes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;JavaScript&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅ Functions, classes, methods&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;TypeScript&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅ Functions, classes, methods&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Haskell&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅ Functions, types, instances&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Text Formats: Markdown, JSON, YAML, TOML, XML, HTML, CSS, shell scripts, SQL, and plain text.&lt;/p&gt;
    &lt;p&gt;Smart Exclusions: Automatically skips &lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;target/&lt;/code&gt;, &lt;code&gt;build/&lt;/code&gt;, &lt;code&gt;dist/&lt;/code&gt;, &lt;code&gt;__pycache__/&lt;/code&gt;, &lt;code&gt;.fastembed_cache&lt;/code&gt;, &lt;code&gt;.venv&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;, and other common build/cache/virtual environment directories.&lt;/p&gt;
    &lt;code&gt;git clone https://github.com/BeaconBay/ck
cd ck
cargo install --path ck-cli&lt;/code&gt;
    &lt;code&gt;# Coming soon:
brew install ck-search
apt install ck-search&lt;/code&gt;
    &lt;p&gt;ck uses a modular Rust workspace:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;ck-cli&lt;/code&gt;- Command-line interface and argument parsing&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-core&lt;/code&gt;- Shared types, configuration, and utilities&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-search&lt;/code&gt;- Search engine implementations (regex, BM25, semantic)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-index&lt;/code&gt;- File indexing, hashing, and sidecar management&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-embed&lt;/code&gt;- Text embedding providers (FastEmbed, API backends)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-ann&lt;/code&gt;- Approximate nearest neighbor search indices&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-chunk&lt;/code&gt;- Text segmentation and language-aware parsing&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ck-models&lt;/code&gt;- Model registry and configuration management&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Indexes are stored in &lt;code&gt;.ck/&lt;/code&gt; directories alongside your code:&lt;/p&gt;
    &lt;code&gt;project/
├── src/
├── docs/  
└── .ck/           # Semantic index (can be safely deleted)
    ├── embeddings.json
    ├── ann_index.bin
    └── tantivy_index/
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;.ck/&lt;/code&gt; directory is a cache — safe to delete and rebuild anytime.&lt;/p&gt;
    &lt;code&gt;# Find authentication/authorization code
ck --sem "user permissions" src/
ck --sem "access control" src/
ck --sem "login validation" src/

# Find error handling strategies  
ck --sem "exception handling" src/
ck --sem "error recovery" src/
ck --sem "fallback mechanisms" src/

# Find performance-related code
ck --sem "caching strategies" src/
ck --sem "database optimization" src/  
ck --sem "memory management" src/&lt;/code&gt;
    &lt;code&gt;# Git hooks
git diff --name-only | xargs ck --sem "TODO"

# CI/CD pipeline
ck --json --sem "security vulnerability" . | security_scanner.py

# Code review prep
ck --hybrid --scores "performance" src/ &amp;gt; review_notes.txt

# Documentation generation
ck --json --sem "public API" src/ | generate_docs.py&lt;/code&gt;
    &lt;code&gt;# Find related test files
ck --sem "unit tests for authentication" tests/
ck -l --sem "test" tests/           # List test files by semantic content

# Identify refactoring candidates  
ck --sem "duplicate logic" src/
ck --sem "code complexity" src/
ck -L "test" src/                   # Find source files without tests

# Security audit
ck --hybrid "password|credential|secret" src/
ck --sem "input validation" src/
ck -l --hybrid --scores "security" src/  # Files with security-related code&lt;/code&gt;
    &lt;code&gt;# View current exclusion patterns
ck --help | grep -A 20 exclude

# These directories are excluded by default:
# .git, .svn, .hg                    # Version control
# node_modules, target, build        # Build artifacts  
# .cache, __pycache__, .fastembed_cache  # Caches
# .vscode, .idea                     # IDE files&lt;/code&gt;
    &lt;code&gt;# .ck/config.toml
[search]
default_mode = "hybrid"
default_threshold = 0.05

[indexing]  
exclude_patterns = ["*.log", "temp/"]
chunk_size = 512
overlap = 64

[models]
embedding_model = "BAAI/bge-small-en-v1.5"&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Indexing: ~1M LOC in under 2 minutes (with smart exclusions and optimized embedding computation)&lt;/item&gt;
      &lt;item&gt;Search: Sub-500ms queries on typical codebases&lt;/item&gt;
      &lt;item&gt;Index size: ~2x source code size with compression&lt;/item&gt;
      &lt;item&gt;Memory: Efficient streaming for large repositories with span-based content extraction&lt;/item&gt;
      &lt;item&gt;File filtering: Automatic exclusion of virtual environments and build artifacts&lt;/item&gt;
      &lt;item&gt;Output: Clean stdout/stderr separation for reliable piping and scripting&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Run the comprehensive test suite:&lt;/p&gt;
    &lt;code&gt;# Full test suite (40+ tests)
./test_ck.sh

# Quick smoke test (14 core tests)
./test_ck_simple.sh&lt;/code&gt;
    &lt;p&gt;Tests cover grep compatibility, semantic search, index management, file filtering, and more.&lt;/p&gt;
    &lt;p&gt;ck is actively developed and welcomes contributions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Issues: Report bugs, request features&lt;/item&gt;
      &lt;item&gt;Code: Submit PRs for bug fixes, new features&lt;/item&gt;
      &lt;item&gt;Documentation: Improve examples, guides, tutorials&lt;/item&gt;
      &lt;item&gt;Testing: Help test on different codebases and languages&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;git clone https://github.com/your-org/ck
cd ck
cargo build
cargo test
./target/debug/ck index test_files/
./target/debug/ck --sem "test query" test_files/&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;✅ grep-compatible CLI with semantic search and file listing flags (&lt;code&gt;-l&lt;/code&gt;,&lt;code&gt;-L&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;✅ FastEmbed integration with BGE models&lt;/item&gt;
      &lt;item&gt;✅ File exclusion patterns and glob support&lt;/item&gt;
      &lt;item&gt;✅ Threshold filtering and relevance scoring with visual highlighting&lt;/item&gt;
      &lt;item&gt;✅ Tree-sitter parsing and intelligent chunking (Python, TypeScript, JavaScript, Haskell)&lt;/item&gt;
      &lt;item&gt;✅ Complete code section extraction (&lt;code&gt;--full-section&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;✅ Enhanced indexing strategy with v3 semantic search optimization&lt;/item&gt;
      &lt;item&gt;✅ Clean stdout/stderr separation for reliable scripting&lt;/item&gt;
      &lt;item&gt;✅ Incremental index updates with hash-based change detection&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🚧 Configuration file support&lt;/item&gt;
      &lt;item&gt;🚧 Package manager distributions&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🔮 Multiple embedding model support&lt;/item&gt;
      &lt;item&gt;🔮 Advanced ranking algorithms&lt;/item&gt;
      &lt;item&gt;🔮 Plugin architecture for custom chunkers&lt;/item&gt;
      &lt;item&gt;🔮 Distributed/remote index support&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🔮 IDE integrations (VS Code, IntelliJ, etc.)&lt;/item&gt;
      &lt;item&gt;🔮 Git integration (semantic diffs, blame)&lt;/item&gt;
      &lt;item&gt;🔮 Web interface for team usage&lt;/item&gt;
      &lt;item&gt;🔮 Multi-language semantic understanding&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Q: How is this different from grep/ripgrep/silver-searcher?&lt;lb/&gt; A: ck includes all the features of traditional search tools, but adds semantic understanding. Search for "error handling" and find relevant code even when those exact words aren't used.&lt;/p&gt;
    &lt;p&gt;Q: Does it work offline?&lt;lb/&gt; A: Yes, completely offline. The embedding model runs locally with no network calls.&lt;/p&gt;
    &lt;p&gt;Q: How big are the indexes?&lt;lb/&gt; A: Typically 1-3x the size of your source code, depending on content. The &lt;code&gt;.ck/&lt;/code&gt; directory can be safely deleted to reclaim space.&lt;/p&gt;
    &lt;p&gt;Q: Is it fast enough for large codebases?&lt;lb/&gt; A: Yes. Indexing is a one-time cost, and searches are sub-second even on large projects. Regex searches require no indexing and are as fast as grep.&lt;/p&gt;
    &lt;p&gt;Q: Can I use it in scripts/automation?&lt;lb/&gt; A: Absolutely. The &lt;code&gt;--json&lt;/code&gt; flag provides structured output perfect for automated processing. Use &lt;code&gt;--full-section&lt;/code&gt; to get complete functions for AI analysis.&lt;/p&gt;
    &lt;p&gt;Q: What about privacy/security?&lt;lb/&gt; A: Everything runs locally. No code or queries are sent to external services. The embedding model is downloaded once and cached locally.&lt;/p&gt;
    &lt;p&gt;Licensed under either of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apache License, Version 2.0 (LICENSE-APACHE)&lt;/item&gt;
      &lt;item&gt;MIT License (LICENSE-MIT)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;at your option.&lt;/p&gt;
    &lt;p&gt;Built with:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rust - Systems programming language&lt;/item&gt;
      &lt;item&gt;FastEmbed - Fast text embeddings&lt;/item&gt;
      &lt;item&gt;Tantivy - Full-text search engine&lt;/item&gt;
      &lt;item&gt;clap - Command line argument parsing&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Inspired by the need for better code search tools in the age of AI-assisted development.&lt;/p&gt;
    &lt;p&gt;Start finding code by what it does, not what it says.&lt;/p&gt;
    &lt;code&gt;cargo build --release
./target/release/ck index .
./target/release/ck --sem "the code you're looking for"&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/BeaconBay/ck"/></entry><entry><id>https://news.ycombinator.com/item?id=45157466</id><title>Algebraic Effects in Practice with Flix</title><updated>2025-09-07T17:32:16.570695+00:00</updated><content>&lt;doc fingerprint="f002d9f161f7126e"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Algebraic Effects in Practice with Flix&lt;/head&gt;
    &lt;p&gt;Algebraic effects are not just a research concept anymore. You can use them in real software, today. Here’s why you’d want to do that, in order of importance:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Effects make your code testable&lt;/p&gt;
        &lt;p&gt;One of the central goals of enterprise software development. Dependency injection, mocking, architecture patterns like clean, hexagonal, DDD are all meant to tackle this. Effects solve this elegantly by separating the “what” from the “how”.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Effects give immediate visibility into what your own and 3rd-party code is doing&lt;/p&gt;
        &lt;p&gt;Supply chain attacks are real. And they will get worse with more AI slop entering our codebases. Tools like Go’s Capslock fix this by following the whole chain of calls to stdlib functions. Effects provide this by design, as all effects are tracked by the type and effect system.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Effects enable user-defined control flow abstractions&lt;/p&gt;
        &lt;p&gt;Solving the “what color is your function” problem1. You can also leverage effects to implement Async/await, coroutines, backtracking search and other control flow patterns as user libraries without hard-coding these features into the language.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Algebraic effects come from the pure functional world, serving a purpose similar to monads — keeping track of and having control over side effects. Like monads, they enable us to write our core logic with pure functions and push side effects like IO outwards, closer to application boundaries.&lt;/p&gt;
    &lt;p&gt;Unlike monads, effects are easy to grasp for a regular developer and give immediate benefits when starting out. For me personally they’re a more natural abstraction for managing side effects — after all, effects are in the name.&lt;/p&gt;
    &lt;p&gt;Starting out as an academic concept, algebraic effects were introduced to the world by research languages like Eff, Koka, Effekt, Frank, Links, and more recently Ante.&lt;/p&gt;
    &lt;p&gt;People have also applied effects in practice, so far usually via a monad-based approach, by making libraries in established languages like Scala Kyo / Cats Effect / ZIO; Typescript Effect and Effector, C# language-ext, C libhandler and libmprompt, C++ cpp-effects, various Haskell libraries, etc.&lt;/p&gt;
    &lt;p&gt;In addition to forcing you into a monadic way of thinking, libraries implementing effects are limited by their host languages.&lt;/p&gt;
    &lt;p&gt;In this article, I will walk you through applying algebraic effects on a real world example using Flix, a new programming language that is built with effects from the ground up, and supports functional, logic and imperative paradigms.&lt;/p&gt;
    &lt;head rend="h2"&gt;Table of Contents&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Type and Effect System: A Motivating Example&lt;/item&gt;
      &lt;item&gt;Effect Handlers: Building Intuition&lt;/item&gt;
      &lt;item&gt;Real-World App: AI movie recommendations&lt;/item&gt;
      &lt;item&gt;Where to Go From Here&lt;/item&gt;
      &lt;item&gt;Extra: Why Algebraic Effects are Algebraic and how they relate to monads&lt;/item&gt;
      &lt;item&gt;Footnotes&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Currently only few languages support effects out of the box. The only one that I know of besides Flix is Unison. OCaml has a language extension, but there is no support yet in the type system. Haskell has added support for delimited continuations, but effects are still only available via libraries.&lt;/p&gt;
    &lt;p&gt;In addition to having a “type and effect system” that improves function signatures and makes sure all effects are handled, Flix supports traits, local mutability via regions, working with immutable or mutable data, and Go/Rust-like structured concurrency. It also has a first-class Datalog integration. But I will only focus on effects here. Let’s start.&lt;/p&gt;
    &lt;head rend="h2"&gt;Type and Effect System: A Motivating Example 🔗&lt;/head&gt;
    &lt;p&gt;Imagine a function called &lt;code&gt;calculateSalary&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;def calculateSalary(base_salary, bonus_percent):
&lt;/code&gt;
    &lt;p&gt;Based on the function name and the signature, one can assume it’s just a pure function that does some calculations. In a statically typed language you are also guaranteed that the function arguments and outputs will be of a certain type.&lt;/p&gt;
    &lt;p&gt;But even if the types are correct, nothing stops our little &lt;code&gt;calculateSalary()&lt;/code&gt; from, say, sending an offensive email to your grandma2:&lt;/p&gt;
    &lt;code&gt;def calculateSalary(base_salary, bonus_percent):
    server.sendmail("grandma@family.com", "Your cookies are terrible!")
    return base_salary * (1 + bonus_percent/100)
&lt;/code&gt;
    &lt;p&gt;If, on the other hand, you extend your type system with effects, you will see immediately in the signature that this function may do something fishy:&lt;/p&gt;
    &lt;code&gt;def calculateSalary(salary: Float64, percent: Float64): 
    Float64 \ {Email} = {
//            ^^^^^^^ Notice the Email effect!
&lt;/code&gt;
    &lt;p&gt;Of course, in real life the issue it’s not usually about the grandma. Instead, this function could throw an exception — still quite dangerous. If you forget to handle the exception, your app will crash. Or another very realistic scenario is that &lt;code&gt;calculateSalary()&lt;/code&gt; calls a database to get some employee details for calculations, and you forgot to provide a database connection string. That can also result in an exception or a panic.&lt;/p&gt;
    &lt;head rend="h2"&gt;Effect Handlers: Building Intuition 🔗&lt;/head&gt;
    &lt;p&gt;The job of the type and effect system is not just to improve our function signatures. It’s also making sure all the effects are handled somewhere. This is where effect handlers come in.&lt;/p&gt;
    &lt;p&gt;Usually when people talk about algebraic effects what they’re actually talking about is effect handlers. If you know exceptions, effect handlers are super easy to understand. Here’s a Jenga analogy:&lt;/p&gt;
    &lt;p&gt;Imagine the call stack is a Jenga tower. New blocks are carefully added each time you call a function.&lt;/p&gt;
    &lt;p&gt;When an exception is thrown, your whole nice Jenga tower gets destroyed, all the way up to the catch() block. The catch block can safely handle the error, but the stack is unwinded, meaning you lose all of the state you had in your program before throwing the exception. You have to build your tower again, from scratch.&lt;/p&gt;
    &lt;p&gt;When using effect handlers you can actually go back to your original computation after the handler is done handling the effect. The handler can also return some values back to your program, and it can even resume multiple times with different return values. You also still have the option of not resuming at all and aborting the program — that would be the effect equivalent of exceptions.&lt;/p&gt;
    &lt;p&gt;Back to the Jenga analogy: if your tower is about to fall down, with effects you can freeze it mid-collapse. You then call someone for help (handler), and they decide whether to let the tower fall, magically restore it to the previous statlte. Or even hand you different blocks to try the same move (call the continuation) again, possibly multiple times with different inputs. Your Jenga tower ends up looking more like a fork or a tree, with multiple different copies of your blocks branching out at some point from the base.&lt;/p&gt;
    &lt;p&gt;To make this more concrete, let’s start by reproducing exceptions with effects. Here’s how a try/catch looks like in Python:&lt;/p&gt;
    &lt;code&gt;def divide(x, y):
    try:
        return x / y
    except ZeroDivisionError:
        print("Division by zero!")
        return None
&lt;/code&gt;
    &lt;p&gt;Here’s the equivalent code in Flix. We first define an Exception effect and a &lt;code&gt;divide()&lt;/code&gt; function:&lt;/p&gt;
    &lt;code&gt;eff Exception {
    def throw(msg: String): Void
}

def divide(x: Int32, y: Int32): Int32 \ Exception = 
    if (y == 0) {
        Exception.throw("Division by zero!")
    } else {
        x / y
    }
&lt;/code&gt;
    &lt;p&gt;And then provide a handler for this effect somewhere, preferably close to &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler Exception {
        def throw(msg, _resume) = println("Error: ${msg}")
    }
&lt;/code&gt;
    &lt;p&gt;What this does is registers an effect called Exception with a method &lt;code&gt;throw()&lt;/code&gt;. We then perform this effect in our function when there’s an error, similar to throwing an exception in the Python version. Control is transferred to the effect handler, which then decides how to handle the exception, similar to a &lt;code&gt;catch()&lt;/code&gt; block in Python.&lt;/p&gt;
    &lt;p&gt;Notice we never call &lt;code&gt;resume()&lt;/code&gt; from the handler. This results in the program being aborted, just like with exceptions. Graphically, this can be represented as follows:&lt;/p&gt;
    &lt;quote&gt;block-beta columns 2 A["Statement 1"] space:1 B["Statement 2"] space:1 C["Statement 3"] space:1 D["Perform Effect"] space:1 space:1 E["Handle Effect"] space:1 F["Process &amp;amp; Exit"] space:1 space:1 D --&amp;gt; E style D fill:#ffcccc,color:#000 style E fill:#ccffcc,color:#000 style F fill:#ccffcc,color:#000&lt;/quote&gt;
    &lt;p&gt;So far so good, but this is not much different from Python. To really take full advantage of effect handlers, we can use &lt;code&gt;resume()&lt;/code&gt; to return to the original computation and proceed from the line after the effect was performed:&lt;/p&gt;
    &lt;code&gt;eff ResumableException {
    def askForInput(): Int32
}

def divide(x: Int32, y: Int32): Int32 \ ResumableException = 
    if (y == 0) {
        let newY = ResumableException.askForInput();
        x / newY
    } else {
        x / y
    }

def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler ResumableException {
        def askForInput(_, resume) = {
            println("Enter a new divisor:");
            resume(5) // Or get from user input
        }
    }
&lt;/code&gt;
    &lt;quote&gt;block-beta columns 2 A["Statement 1"] space:1 B["Statement 2"] space:1 C["Statement 3"] space:1 D["Perform Effect"] space:1 space:1 E["Handle Effect"] space:1 F["Resume"] space:1 space:1 G["Statement 4"] space:1 H["Statement 5"] space:1 I["Complete"] space:1 D --&amp;gt; E F --&amp;gt; G style D fill:#ffcccc,color:#000 style E fill:#ccffcc,color:#000 style F fill:#ffffcc,color:#000&lt;/quote&gt;
    &lt;p&gt;I called the effect &lt;code&gt;ResumableException&lt;/code&gt; here, but it’s not really an exception anymore, because the program continues normally.&lt;/p&gt;
    &lt;p&gt;At this point we can use this power bestowed on us by effects and handlers to roll our own Async/await:&lt;/p&gt;
    &lt;code&gt;eff Async {
    def await(url: String): String
}

def fetchData(): String \ Async = 
    Async.await("https://api.example.com/data")

def processData(): String \ Async = {
    let data = fetchData();
    "processed: ${data}"
}

def main(): Unit \ IO = 
    run {
        let result = processData();
        println(result)
    } with handler Async {
        def await(url, resume) = {
            // Simulate async HTTP request
            let result = "data from ${url}";
            resume(result)
        }
    }
&lt;/code&gt;
    &lt;p&gt;See how easy that was? This approach also avoids function coloring, since we didn’t need to use special keywords anywhere. Here’s a graphic version:&lt;/p&gt;
    &lt;quote&gt;block-beta columns 2 A["Statement 1"] space:1 B["Statement 2"] space:1 C["await operation"] space:1 space:1 H1["Start async work"] space:1 H2["⏳ Long pause..."] space:1 H3["⏳ Still waiting..."] space:1 H4["✅ Async complete"] space:1 F["Resume with result"] space:1 space:1 D["Statement 3"] space:1 E["Complete"] space:1 C --&amp;gt; H1 F --&amp;gt; D style C fill:#ffcccc,color:#000 style H1 fill:#ccffcc,color:#000 style H2 fill:#fff3cd,color:#000 style H3 fill:#fff3cd,color:#000 style H4 fill:#d1ecf1,color:#000 style F fill:#ffffcc,color:#000 style D fill:#e7f3ff,color:#000 style E fill:#d4edda,color:#000&lt;/quote&gt;
    &lt;p&gt;That’s cool, but we can do more. Effect handlers allow you to resume multiple times:&lt;/p&gt;
    &lt;code&gt;eff Choose {
    def choose(): Int32
}

def explore(): String \ Choose = {
    let x = Choose.choose();
    let y = Choose.choose();
    "${x}, ${y}"
}

def main(): Unit \ IO = 
    run {
        println(explore())
    } with handler Choose {
        def choose(_, resume) = {
            resume(1);
            resume(2);
            resume(3)
        }
&lt;/code&gt;
    &lt;quote&gt;block-beta columns 4 A["Statement 1"] space:1 space:1 space:1 B["Statement 2"] space:1 space:1 space:1 C["Statement 3"] space:1 space:1 space:1 D["Perform Effect"] space:1 space:1 space:1 space:1 space:1 E["Handle Effect"] space:1 space:1 F1["Resume 1"] F2["Resume 2"] F3["Resume 3"] space:1 G1["Statement 4a"] G2["Statement 4b"] G3["Statement 4c"] space:1 H1["Statement 5a"] H2["Statement 5b"] H3["Statement 5c"] space:1 R1["Resume to Main"] R2["Resume to Main"] R3["Resume to Main"] J["Statement 6"] space:1 space:1 space:1 K["Complete"] space:1 space:1 space:1 D --&amp;gt; E F1 --&amp;gt; G1 F2 --&amp;gt; G2 F3 --&amp;gt; G3 H1 --&amp;gt; R1 H2 --&amp;gt; R2 H3 --&amp;gt; R3 R1 --&amp;gt; J R2 --&amp;gt; J R3 --&amp;gt; J style D fill:#ffcccc,color:#000 style E fill:#ccffcc,color:#000 style F1 fill:#ffffcc,color:#000 style F2 fill:#ffffcc,color:#000 style F3 fill:#ffffcc,color:#000 style G1 fill:#e6f3ff,color:#000 style G2 fill:#ffe6f3,color:#000 style G3 fill:#f3ffe6,color:#000 style H1 fill:#e6f3ff,color:#000 style H2 fill:#ffe6f3,color:#000 style H3 fill:#f3ffe6,color:#000 style R1 fill:#d4edda,color:#000 style R2 fill:#d4edda,color:#000 style R3 fill:#d4edda,color:#000 style J fill:#cce5ff,color:#000 style K fill:#b3d9ff,color:#000&lt;/quote&gt;
    &lt;p&gt;With this, you can implement things like coroutines:&lt;/p&gt;
    &lt;quote&gt;block-beta columns 3 A1["Coroutine 1: Start"] space:1 A2["Coroutine 2: Start"] B1["Statement 1"] space:1 B2["Statement 1"] C1["yield to Co2"] H1["Scheduler"] space:1 space:1 space:1 C2["Statement 2"] space:1 space:1 D2["yield to Co1"] space:1 H2["Scheduler"] space:1 D1["Statement 2"] space:1 space:1 E1["yield to Co2"] H3["Scheduler"] space:1 space:1 space:1 E2["Statement 3"] space:1 space:1 F2["Complete"] F1["Complete"] space:1 space:1 C1 --&amp;gt; H1 H1 --&amp;gt; C2 D2 --&amp;gt; H2 H2 --&amp;gt; D1 E1 --&amp;gt; H3 H3 --&amp;gt; E2 style C1 fill:#ffcccc,color:#000 style D2 fill:#ffcccc,color:#000 style E1 fill:#ffcccc,color:#000 style H1 fill:#ccffcc,color:#000 style H2 fill:#ccffcc,color:#000 style H3 fill:#ccffcc,color:#000 style A1 fill:#e6f3ff,color:#000 style B1 fill:#e6f3ff,color:#000 style D1 fill:#e6f3ff,color:#000 style F1 fill:#e6f3ff,color:#000 style A2 fill:#ffe6f3,color:#000 style B2 fill:#ffe6f3,color:#000 style C2 fill:#ffe6f3,color:#000 style E2 fill:#ffe6f3,color:#000 style F2 fill:#ffe6f3,color:#000&lt;/quote&gt;
    &lt;p&gt;Generators:&lt;/p&gt;
    &lt;quote&gt;block-beta columns 2 A["Start generator"] space:1 B["Statement 1"] space:1 C["yield value 1"] H1["Return value"] space:1 H2["⏸️ Paused"] D["next() called"] H3["Resume generator"] E["Statement 2"] space:1 F["yield value 2"] H4["Return value"] space:1 H5["⏸️ Paused"] G["next() called"] H6["Resume generator"] H["Statement 3"] space:1 I["return (done)"] H7["Signal complete"] C --&amp;gt; H1 H3 --&amp;gt; D F --&amp;gt; H4 H6 --&amp;gt; G I --&amp;gt; H7 style C fill:#ffcccc,color:#000 style F fill:#ffcccc,color:#000 style I fill:#ffcccc,color:#000 style H1 fill:#ccffcc,color:#000 style H3 fill:#ffffcc,color:#000 style H4 fill:#ccffcc,color:#000 style H6 fill:#ffffcc,color:#000 style H7 fill:#ccffcc,color:#000 style H2 fill:#fff3cd,color:#000 style H5 fill:#fff3cd,color:#000 style D fill:#e7f3ff,color:#000 style G fill:#e7f3ff,color:#000&lt;/quote&gt;
    &lt;p&gt;And backtracking search:&lt;/p&gt;
    &lt;quote&gt;block-beta columns 4 A["Start search"] space:1 space:1 space:1 B["choose option"] space:1 space:1 space:1 space:1 H1["Try option 1"] space:1 space:1 space:1 space:1 C1["Explore path 1"] space:1 space:1 space:1 D1["❌ Dead end"] space:1 space:1 H2["Backtrack"] space:1 space:1 space:1 H3["Try option 2"] space:1 space:1 space:1 space:1 space:1 C2["Explore path 2"] space:1 space:1 space:1 D2["✅ Success!"] E["Resume with solution"] space:1 space:1 space:1 F["Complete"] space:1 space:1 space:1 B --&amp;gt; H1 H1 --&amp;gt; C1 D1 --&amp;gt; H2 H2 --&amp;gt; H3 H3 --&amp;gt; C2 D2 --&amp;gt; E style B fill:#ffcccc,color:#000 style H1 fill:#ccffcc,color:#000 style H2 fill:#f8d7da,color:#000 style H3 fill:#ccffcc,color:#000 style C1 fill:#fff3cd,color:#000 style D1 fill:#f8d7da,color:#000 style C2 fill:#d1ecf1,color:#000 style D2 fill:#d4edda,color:#000 style E fill:#ffffcc,color:#000 style F fill:#d4edda,color:#000&lt;/quote&gt;
    &lt;p&gt;Hopefully this gives you a taste of how effect handlers work. This is just a sketch though — you can read more on this and see examples in the Flix docs.&lt;/p&gt;
    &lt;head rend="h4"&gt;Question&lt;/head&gt;
    &lt;p&gt;What's your primary programming language?&lt;/p&gt;
    &lt;p&gt;Defining our own control flow abstractions is great, but most of the time regular async/await and/or coroutines are enough for the job.&lt;/p&gt;
    &lt;p&gt;What is extremely useful for daily programming is that effects let you separate the declaration of the effect (the operation, or the effect “constructor”) from it’s implementation, defined by the effect handler.&lt;/p&gt;
    &lt;p&gt;Add some effect definitions:&lt;/p&gt;
    &lt;code&gt;eff Database {
    def getUser(id: Int32): Option[User],
    def saveUser(user: User): Unit
}
&lt;/code&gt;
    &lt;p&gt;Then use these definitions to perform effects in your code:&lt;/p&gt;
    &lt;code&gt;def updateUserEmail(userId: Int32, newEmail: String): Result[String, User] \ {Database} = {
    match Database.getUser(userId) {
        case Some(user) =&amp;gt; {
            let updatedUser = {user | email = newEmail};
            Database.saveUser(updatedUser);
            Ok(updatedUser)
        }
        case None =&amp;gt; {
            Err("User not found")
        }
    }
}
&lt;/code&gt;
    &lt;p&gt;This replaces the need for dependency injection, since you can provide different handlers for these database operations in production vs testing:&lt;/p&gt;
    &lt;code&gt;def main(): Unit \\ IO = { // production handler, uses a real database
    run {
        updateUserEmail(123, "new@example.com")
    } with handler Database {
        def getUser(id, resume) = {
		        // real db query
            resume(user)
        }
        def saveUser(user, resume) = {
		        // real db query
            resume()
        }
    }
}

def testUpdateUserEmail(): Unit = { // test handler, just stubs
    let testUser = {id = 123, email = "old@example.com"};
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Ok({testUser | email = "new@example.com"}))
    } with handler Database {
        def getUser(id, resume) = resume(Some(testUser))
        def saveUser(user, resume) = {
            assert(user.email == "new@example.com");
            resume()
        }
    
}
&lt;/code&gt;
    &lt;p&gt;In my opinion, the biggest advantage that effect handlers give is that they abstract away the patterns associated with DDD, Clean Architecture, Hexagonal architecture, etc. commonly found in enterprise code.&lt;/p&gt;
    &lt;p&gt;All these architectures give you some sort of way to isolate your core logic, which should be pure, from infrastructure and app logic, with deals with external dependencies. But you have to commit to an architecture and the whole team has to be disciplined enough to stick to for this to work.&lt;/p&gt;
    &lt;p&gt;Using effects encourages separating the definition of effect operations from implementation by default, meaning you don’t really need these architecture patterns anymore.&lt;/p&gt;
    &lt;p&gt;This is great, since relying on team discipline exclusively rarely works. It also saves a bunch of time otherwise spent on bike shedding.&lt;/p&gt;
    &lt;p&gt;Effect handlers also allow you to easily install stubs, which you can use to create quick test cases without boilerplate, just by swapping handlers:&lt;/p&gt;
    &lt;code&gt;def testErrorConditions(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Err("User not found"))
    } with handler Database {
        def getUser(_, resume) = resume(None) // Stub: always return None
        def saveUser(_, resume) = resume()             // Won't be called
    }
}

def testSlowDatabase(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result.isOk())
    } with handler Database {
        def getUser(id, resume) = {
            Thread.sleep(100);  // Simulate slow query
            resume(Some({id = id, email = "old@example.com"}))
        }
        def saveUser(user, resume) = {
            Thread.sleep(50);   // Simulate slow save
            resume()
        }
    }
}
&lt;/code&gt;
    &lt;p&gt;You can even make a handler that records all interactions instead of executing them. There are many possibilities here.&lt;/p&gt;
    &lt;head rend="h2"&gt;Real-World App: AI movie recommendations 🔗&lt;/head&gt;
    &lt;p&gt;To bring this all together, let’s make a real application using effects.&lt;/p&gt;
    &lt;p&gt;Our app will fetch some movie data from TheMovieDB, and then use an LLM to recommend some movies based on user preferences provided from the console.&lt;/p&gt;
    &lt;p&gt;Flix interoperates with the JVM, meaning we can call code from Java, Kotlin, Scala, etc.&lt;/p&gt;
    &lt;p&gt;First, let’s define the two custom effects we will need: MovieAPI and LLM:&lt;/p&gt;
    &lt;code&gt;eff MovieAPI {
    def getPopularMovies(): String
}

eff LLM {
    def recommend(movies: String, preferences: String): String
}
&lt;/code&gt;
    &lt;p&gt;We can then perform the effects in main like so, providing some basic handlers that use the Flix’s stdlib HTTP client:&lt;/p&gt;
    &lt;code&gt;def getRecommendation(preferences: String): String \ {MovieAPI, LLM} = {
    let movies = MovieAPI.getPopularMovies();
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        let suggestion = getRecommendation("action movies");
        println(suggestion)
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            let response = HttpWithResult.get("https://api.themoviedb.org/3/movie/popular", Map.empty());
            match response {
                case Result.Ok(resp) =&amp;gt; resume(Http.Response.body(resp))
                case Result.Err(_) =&amp;gt; resume("[]")
            }
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            let prompt = "Movies: ${movies}. User likes: ${prefs}. Recommend one movie.";
            let response = HttpWithResult.post("https://api.openai.com/v1/completions", Map.empty(), prompt);
            match response {
                case Result.Ok(resp) =&amp;gt; resume(Http.Response.body(resp))
                case Result.Err(_) =&amp;gt; resume("Try watching a classic!")
            }
        }
    } with HttpWithResult.runWithIO
&lt;/code&gt;
    &lt;p&gt;Notice that both effects are quite generic. So we can easily swap either the movie API or the LLM provider without touching anything in the core logic:&lt;/p&gt;
    &lt;code&gt;// Switch to different movie provider
with handler MovieAPI {
    def getPopularMovies(_, resume) = {
        let response = HttpWithResult.get("https://api.imdb.com/popular", Map.empty());
        // ... handle IMDB response format
    }
}

// Switch to different LLM provider  
with handler LLM {
    def recommend(movies, prefs, resume) = {
        let response = HttpWithResult.post("https://api.anthropic.com/v1/messages", Map.empty(), prompt);
        // ... handle Claude response format
    }
}
&lt;/code&gt;
    &lt;p&gt;To get the user input we will need to include the standard Console effect:&lt;/p&gt;
    &lt;code&gt;def main(): Unit \ {Net, IO} = 
    run {
        Console.println("What movie genres do you enjoy?");
        let preferences = Console.readln();
        let suggestion = getRecommendation(preferences);
        Console.println("Recommendation: ${suggestion}")
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with HttpWithResult.runWithIO
&lt;/code&gt;
    &lt;p&gt;We can also add some basic logs using the standard Logger effect:&lt;/p&gt;
    &lt;code&gt;def getRecommendation(preferences: String): String \ {MovieAPI, LLM, Logger} = {
    Logger.info("Fetching popular movies...");
    let movies = MovieAPI.getPopularMovies();
    Logger.info("Getting LLM recommendation...");
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        /* ... console interaction ... */
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with Logger.runWithIO
      with HttpWithResult.runWithIO
&lt;/code&gt;
    &lt;p&gt;That’s it! Let’s run the app and test it manually like so:&lt;/p&gt;
    &lt;code&gt; flix run Main.flix
What movie genres do you enjoy?
&amp;gt; sci-fi horror
[INFO] Fetching popular movies...
[INFO] Getting LLM recommendation...
Recommendation: Based on your interest in sci-fi horror, I recommend "Alien" - a perfect blend of both genres!
&lt;/code&gt;
    &lt;p&gt;We can also easily write tests for the core logic by providing test handlers for our movie and LLM effects:&lt;/p&gt;
    &lt;code&gt;def testRecommendation(): String = 
    run {
        getRecommendation("comedy")
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            resume("""[{"title": "The Grand Budapest Hotel", "genre": "comedy"}]""")
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            resume("I recommend The Grand Budapest Hotel - perfect for comedy lovers!")
        }
    } with handler Logger {
        def log(_, _, resume) = resume()  // Silent in tests
    }

def runTests(): Unit \ IO = {
    let result = testRecommendation();
    println("Test result: ${result}")
}
&lt;/code&gt;
    &lt;head rend="h2"&gt;Where to Go From Here 🔗&lt;/head&gt;
    &lt;p&gt;Read the Flix docs&lt;/p&gt;
    &lt;p&gt;Especially on cool features like effect polymorphism, effect exclusion etc. Check out code examples in the repo&lt;/p&gt;
    &lt;p&gt;Join the community and contribute with libraries&lt;/p&gt;
    &lt;p&gt;The Flix compiler and stdlib are quite feature-rich at this point, and having JVM interop means you have all the essentials you need to write practical code. But there are still very few pure Flix libraries. So it’s very valuable to contribute some. The ideas I can think of are, for example, rebuilding standard things like Web frameworks in an effect oriented way,. Or taking advantage of the unique feature set in Flix to build something entirely new.&lt;/p&gt;
    &lt;p&gt;Explore effect-oriented programming&lt;/p&gt;
    &lt;p&gt;While I personally like Flix and can recommend it to others, there are other ways you can use effects for real-world software. If you’re in Typescript or Scala, try out Effect or ZIO/Kyo/Cats. If you’re looking for other languages that support effects natively, and you’re not afraid of Haskell-like syntax, check out Unison. They have a bunch of other concepts I find cool, like a better distributed computing model and the code being content-addressed.&lt;/p&gt;
    &lt;p&gt;Thanks for reading! I hope this article was useful. Hit me up if you have questions or feedback, and check out my website, where I’m exploring sustainable tech and coding practices: relax.software&lt;/p&gt;
    &lt;head rend="h4"&gt;Question&lt;/head&gt;
    &lt;p&gt;What should I write about next?&lt;/p&gt;
    &lt;head rend="h2"&gt;Extra: Why Algebraic Effects are Algebraic and how they relate to monads 🔗&lt;/head&gt;
    &lt;p&gt;Okay, practical people have left the room. Following sections are nerds-only.&lt;/p&gt;
    &lt;p&gt;For some reason, all the content I’ve been reading on algebraic effects uses this term a lot, but no one explains why specifically they’re called “algebraic”. So I did some digging.&lt;/p&gt;
    &lt;p&gt;Turns out, algebraic effects are “algebraic” because they can be described with laws and equations, like in algebra — the kind we learn at school. Which is I guess why they’re easier to grasp than monads — unlike algebra, you usually don’t study category theory in high school.&lt;/p&gt;
    &lt;p&gt;But the algebraic part only applies to the effect “constructors”, i.e the operations themselves like &lt;code&gt;get()&lt;/code&gt; or &lt;code&gt;put()&lt;/code&gt; for the state effect.&lt;/p&gt;
    &lt;p&gt;Effect handlers, on the other hand, are not algebraic at all, which can be a bit confusing. But it makes sense if you think about it — the purpose of handlers is to act as “deconstructors”, interpreting our algebraic effect operations by means of things that cannot be described by algebraic equations alone, such as continuations .&lt;/p&gt;
    &lt;p&gt;In fact, effect handlers are often (but not always) implemented via delimited continuations. There are also other, static/lexically scoped and maybe more performant approaches being explored, such as this one&lt;/p&gt;
    &lt;p&gt;“Real” algebraic effects don’t require monads. Monads and algebraic effects are two different concepts tackling similar problems. One is expressible in terms of the other, but algebraic effects are arguably more flexible.&lt;/p&gt;
    &lt;p&gt;You could actually implement algebraic effects using a continuation monad. If we don’t care about types, effects are perfectly expressible with monads and vice versa&lt;/p&gt;
    &lt;p&gt;The problems appear when we introduce types into the picture. In a properly typed world, you can’t actually reproduce the same expressiveness you get with effects using monads. You’ll end up breaking the type system or reducing expressiveness at some point.&lt;/p&gt;
    &lt;p&gt;Effects are, in this sense, more “powerful” than monads with their natural type system: you can express infinitely many computations with them. E.g if you use a &lt;code&gt;tick()&lt;/code&gt; effect and you do a bunch of sequential &lt;code&gt;tick()&lt;/code&gt; s, the result will be a distinct computation each time. With monads and their natural type system the set of computations you could express is finite.&lt;/p&gt;
    &lt;p&gt;Additionally, with monads you commit to a specific interpretation of an effect in advance, while effects completely decouple effect definition from it’s implementation.&lt;/p&gt;
    &lt;p&gt;Finally, effects are easier to compose than monads. With monad transformers you quickly hit the wall having to define a bunch of different combinations that each have distinct semantics. Effects compose naturally.&lt;/p&gt;
    &lt;p&gt;So while effect libraries in languages like Typescript and Scala are able to express effects using monads3, and the behavior could be identical at runtime, this cannot replace having an actual type and effect system, with effects being properly typed.&lt;/p&gt;
    &lt;head rend="h4"&gt;Question&lt;/head&gt;
    &lt;p&gt;How do you usually learn about new things?&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes 🔗&lt;/head&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;“What color is your function” is a problem explored in this article. In languages which have Async baked in via special keywords (e.g JavaScript async/await) it becomes a pain to refactor and to combine synchronous and asynchronous code. If you make one function deep in the call stack&lt;/p&gt;&lt;code&gt;async&lt;/code&gt;, all the callers will have to be made Async as well, or&lt;code&gt;await()&lt;/code&gt;the results. With effects you don’t have this issue as there are no keywords and no special behavior. Async is simply done with effect handlers. ↩&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;I like the grandma example more than the “launch missiles” popular in the Haskell world. Took it from this article by Kevin Mahoney. It’s somehow more offensive ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;See some examples in this article. This also shows how Haskell’s new delimited continuation support can be used to implement algebraic effects and handlers ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.relax.software/blog/flix-effects-intro/"/></entry><entry><id>https://news.ycombinator.com/item?id=45157897</id><title>Air pollution directly linked to increased dementia risk</title><updated>2025-09-07T17:32:15.167310+00:00</updated><content>&lt;doc fingerprint="278e133308998990"&gt;
  &lt;main&gt;
    &lt;p&gt;Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles and JavaScript.&lt;/p&gt;
    &lt;p&gt;Air pollution directly linked to increased dementia risk&lt;/p&gt;
    &lt;p&gt;Long-term exposure accelerates the development of Lewy body dementia and Parkinson’s disease with dementia in people who are predisposed to the conditions.&lt;/p&gt;
    &lt;p&gt;An analysis of 56 million people has shown that exposure to air pollution increases the risk of developing a particular form of dementia, the third most common type after Alzheimer’s disease and vascular dementia.&lt;/p&gt;
    &lt;p&gt;The study, published in Science on 4 September1, suggests that there is a clear link between long-term exposure to PM2.5 — airborne particles that are smaller than 2.5 micrometres in diameter — and the development of dementia in people with Lewy body dementia or Parkinson’s disease.&lt;/p&gt;
    &lt;p&gt;The study found that PM2.5 exposure does not necessarily induce Lewy body dementia, but “accelerates the development,” in people who are already genetically predisposed to it, says Hui Chen, a clinician–neuroscientist at the University of Technology Sydney in Australia.&lt;/p&gt;
    &lt;p&gt;PM2.5 exposure&lt;/p&gt;
    &lt;p&gt;Lewy body dementia is an umbrella term for two different types of dementia: Parkinson’s disease with dementia, and dementia with Lewy bodies. In both cases, dementia is caused by the build-up of α-synuclein (αSyn) proteins into clumps, called Lewy bodies, in the brain’s nerve cells, which cause the cells to stop working and eventually die. Studies have suggested that long-term exposure to air pollution from car-exhaust, wildfires and factory fumes, is linked with increased risks of developing neurodegenerative illnesses, including Parkinson's disease with dementia2.&lt;/p&gt;
    &lt;p&gt;Study co-author Xiaobo Mao, who researches neurodegenerative conditions at Johns Hopkins University in Baltimore, Maryland, says he and his colleagues wanted to determine if PM2.5 exposure also influenced the risk of developing Lewy body dementia. They analysed 2000–2014 hospital-admissions data from 56.5 million people with Lewy body dementia and Parkinson’s disease with or without dementia. The data served to identify people with severe neurological diseases.&lt;/p&gt;
    &lt;p&gt;They found that long-term PM2.5 exposure was associated with an increased risk of hospitalization for all three neurodegenerative conditions, including a 12% increased risk for severe dementia with Lewy bodies that required hospitalization. They noted that living in areas of higher PM2.5 exposure was linked with a higher relative risk of Lewy body dementia — including dementia with Lewy bodies and Parkinson’s disease dementia — compared with Parkinson’s without dementia.&lt;/p&gt;
    &lt;p&gt;The team then performed experiments in mice to investigate why exposure to air pollution affected dementia risk. Mice were exposed to PM2.5 pollution through their nostrils, then the researchers tested for behaviours linked with dementia-like problems. After ten months of PM2.5 exposure, mice showed behavioural challenges in maze exploration tests for spatial memory, and tasks that tested their recognition of new objects. At ten months, the team also observed a substantial increase in the build-up of αSyn in the animals’ brains.&lt;/p&gt;
    &lt;p&gt;Exposure to PM2.5 for ten months also caused the shrinkage of the medial temporal lobe in mice — a brain region which is responsible for memory formation and retrieval. In comparison, there were no changes to the brains of genetically modified mice lacking αSyn, suggesting the protein is required for neurodegenerative pathology.&lt;/p&gt;
    &lt;p&gt;The team also found clumps of αSyn in the gut and lungs of mice exposed to PM2.5, but not in the control or genetically modified mice. Mao says that αSyn acts like a seed, which can propagate and spread from the gut to the brain by way of the gut–brain axis, and eventually cause Alzheimer’s disease or Lewy body dementia. PM2.5 also accumulates in the lungs, causing inflammation before entering the bloodstream and crossing the blood–brain barrier.&lt;/p&gt;
    &lt;p&gt;Predisposition needed&lt;/p&gt;
    &lt;p&gt;The researchers next investigated gene-expression changes caused by PM2.5 exposure in mice and compared them with gene-expression changes observed in people with Lewy body dementia. They focused on the anterior cingulate cortex — a brain region linked with cognitive deficits in people with dementia. They found a strong correlation of gene-expression changes between PM2.5-exposed mice and people with Lewis body dementia and Parkinson’s disease with dementia, but no correlation with Parkinson’s disease without dementia.&lt;/p&gt;
    &lt;p&gt;Enjoying our latest content? Login or create an account to continue&lt;/p&gt;
    &lt;p&gt;Access the most recent journalism from Nature's award-winning team&lt;/p&gt;
    &lt;p&gt;Explore the latest features &amp;amp; opinion covering groundbreaking research&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nature.com/articles/d41586-025-02844-9"/></entry><entry><id>https://news.ycombinator.com/item?id=45157906</id><title>Belling the Cat</title><updated>2025-09-07T17:32:15.015218+00:00</updated><content>&lt;doc fingerprint="be03d5d395e3bec6"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Belling the Cat&lt;/head&gt;&lt;p&gt;Belling the Cat is a fable also known under the titles The Bell and the Cat and The Mice in Council. In the story, a group of mice agree to attach a bell to a cat's neck to warn of its approach in the future, but they fail to find a volunteer to perform the job. The term has become an idiom describing a group of persons, each agreeing to perform an impossibly difficult task under the misapprehension that someone else will be chosen to run the risks and endure the hardship of actual accomplishment.[1]&lt;/p&gt;&lt;p&gt;Although often attributed to Aesop, it was not recorded before the Middle Ages and has been confused with the quite different fable of Classical origin titled The Cat and the Mice. In the classificatory system established for the fables by Ben Edwin Perry, it is numbered 613, which is reserved for Mediaeval attributions outside the Aesopic canon.[2]&lt;/p&gt;&lt;head rend="h2"&gt;Synopsis and idiomatic use&lt;/head&gt;[edit]&lt;p&gt;The fable concerns a group of mice who debate plans to nullify the threat of a marauding cat. One of them proposes placing a bell around its neck, so that they are warned of its approach. The plan is applauded by the others, until one mouse asks who will volunteer to place the bell on the cat. All of them make excuses. The story is used to teach the wisdom of evaluating a plan on not only how desirable the outcome would be but also how it can be executed. It provides a moral lesson about the fundamental difference between ideas and their feasibility, and how this affects the value of a given plan.[3]&lt;/p&gt;&lt;p&gt;The fable gives rise to the idiom to bell the cat, which means to attempt, or agree to perform, an impossibly difficult task.[4] Historically 'Bell the Cat' is frequently claimed to have been a nickname given to fifteenth-century Scottish nobleman Archibald Douglas, 5th Earl of Angus in recognition of his part in the arrest and execution of James III's alleged favourite, Thomas (often misnamed as Robert) Cochrane. In fact the earliest evidence for this use is from Hume of Godscroft's history of the Douglases published in 1644,[5] and therefore is more reflective of perception of the idiom in the seventeenth century than the fifteenth.[6] In the 21st century the idiom was adopted by the investigative journalism group Bellingcat.[7]&lt;/p&gt;&lt;p&gt;The first English collection to attribute the fable to Aesop was John Ogilby's of 1687; in this there is a woodcut (by Francis Barlow), followed by a 10-line verse synopsis by Aphra Behn with the punning conclusion:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Good Councell's easily given, but the effect&lt;/p&gt;&lt;lb/&gt;Oft renders it uneasy to transact.[8]&lt;/quote&gt;&lt;head rend="h2"&gt;Early versions and later interpretations&lt;/head&gt;[edit]&lt;p&gt;One of the earliest versions of the story appears as a parable critical of the clergy in Odo of Cheriton's Parabolae.[9] Written around 1200, it was afterwards translated into Welsh, French and Spanish. Sometime later, the story is found in the work now referred to as Ysopet-Avionnet, which is largely made up of Latin poems by the 12th century Walter of England, followed by a French version dating from as much as two centuries later. It also includes four poems not found in Walter's Esopus; among them is the tale of "The Council of the Mice" (De muribus consilium facientibus contra catum). The author concludes with the scornful comment that laws are of no effect without the means of adequately enforcing them and that such parliamentary assemblies as he describes are like the proverbial mountain in labour that gives birth to a mouse.[10]&lt;/p&gt;&lt;p&gt;The fable also appeared as a cautionary tale in Nicholas Bozon's Anglo-Norman Contes Moralisés (1320), referring to the difficulty of curbing the outrages of superior lords.[11] It was in this context too that the story of a parliament of rats and mice was retold in William Langland's allegorical poem Piers Plowman.[12] The episode is said to refer to the Parliament of 1376 which attempted unsuccessfully to remedy popular dissatisfaction over the exactions made by nobles acting in the royal name.[13] Langland's French contemporary, the satirical Eustache Deschamps, also includes the story among his other moral ballades based on fables as "Les souris et les chats".[14] It has been suggested that in this case too there is a political subtext. The poem was written as a response to the aborted invasion of England in 1386 and contrasts French dithering in the face of English aggression.[15] The refrain of Deschamps' ballade, Qui pendra la sonnette au chat (who will bell the cat) was to become proverbial in France if, indeed, it does not record one already existing.&lt;/p&gt;&lt;p&gt;In the following century, the Italian author Laurentius Abstemius made of the fable a Latin cautionary tale titled De muribus tintinnabulum feli appendere volentibus (The mice who wanted to bell the cat)[16] in 1499. A more popular version in Latin verse was written by Gabriele Faerno and printed posthumously in his Fabulae centum ex antiquis auctoribus delectae (100 delightful fables from ancient authors, Rome 1564), a work that was to be many times reprinted and translated up to start of the 19th century. Titled simply "The Council of the Mice", it comes to rest on the drily stated moral that 'a risky plan can have no good result'. The story was evidently known in Flanders too, since 'belling the cat' was included among the forty Netherlandish Proverbs in the composite painting of Pieter Bruegel the Elder (1559). In this case a man in armour is performing the task in the lower left foreground.[17] A century later, La Fontaine's Fables made the tale even better known under the title Conseil tenu par les rats (II.2).[18]&lt;/p&gt;&lt;p&gt;In mediaeval times the fable was applied to political situations and British commentaries on it were sharply critical of the limited democratic processes of the day and their ability to resolve social conflict when class interests were at stake. This applies equally to the plot against the king's favourite in 15th century Scotland and the direct means that Archibald Douglas chose to resolve the issue. While none of the authors who used the fable actually incited revolution, the 1376 Parliament that Langland satirised was followed by Wat Tyler's revolt five years later, while Archibald Douglas went on to lead a rebellion against King James. During the Renaissance the fangs of the fable were being drawn by European authors, who restricted their criticism to pusillanimous conduct in the face of rashly proposed solutions. A later exception was the Russian fabulist Ivan Krylov, whose adaptation of the story satirises croneyism. In his account only those with perfect tails are to be allowed into the assembly; nevertheless, a tailless rat is admitted because of a family connection with one of the lawmakers.[19]&lt;/p&gt;&lt;p&gt;There still remains the perception of a fundamental opposition between consensus and individualism. This is addressed in the lyrics of "Bell the Cat",[20] a performance put out on DVD by the Japanese rock band LM.C in 2007.[21] This is the monologue of a house cat that wants to walk alone since "Society is by nature evil". It therefore refuses to conform and is impatient of restriction: "your hands hold on to everything – bell the cat". While the lyric is sung in Japanese, the final phrase is in English. Another modernised adaptation based on this fable, that updates the moral, has been published by Patricia McKissack in her Who Will Bell the Cat? (illustrated by Christopher Cyr).[22][23]&lt;/p&gt;&lt;p&gt;There is a Tibetan proverb that is very similar, "Putting a bell on the cat's neck after the mother of mice was consulted"[24]&lt;/p&gt;&lt;head rend="h2"&gt;Illustrations&lt;/head&gt;[edit]&lt;p&gt;Several French artists depicted the fable during the 19th century, generally choosing one of two approaches. Gustave Doré and the genre painter Aurélie Léontine Malbet (fl. 1868–1906)[25] pictured the rats realistically acting out their debate. The illustrator Grandville,[26] along with the contemporaries Philibert Léon Couturier (1823–1901)[27] and Auguste Delierre (1829–1890),[28] caricature the backward practice and pomposity of provincial legislatures, making much the same point as did the Mediaeval authors who first recorded the tale. At the end of the century a publishing curiosity reverts to the first approach. This was in the woodblock print by Kawanabe Kyōsui that appeared in the collection of La Fontaine's fables that was commissioned and printed in Tokyo in 1894 and then exported to France.[29] In the upper left-hand corner a cat is seen through a warehouse window as it approaches across the roofs while inside the rats swarm up the straw-wrapped bales of goods. At its summit the chief rat holds the bell aloft. An earlier Japanese woodblock formed part of Kawanabe Kyōsai's Isoho Monogotari series (1870–80). This shows an assembly of mice in Japanese dress with the proposer in the foreground, brandishing the belled collar.[30]&lt;/p&gt;&lt;head rend="h2"&gt;Musical settings&lt;/head&gt;[edit]&lt;p&gt;In the 18th century the fable was one among many set by Louis-Nicolas Clérambault in the fables section of Nouvelles poésies spirituelles et morales sur les plus beaux airs (1730–37).[31] In the following century the text of La Fontaine's fable was set for male voices by Louis Lacombe[32] and by the Catalan composer Isaac Albéniz for medium voice and piano in 1889.[33] In 1950 it was set for four male voices by Florent Schmitt.[34] But while La Fontaine's humorously named cat Rodilardus, and antiquated words like discomfiture (déconfiture), may fit an art song, there have also been faithful interpretations in the field of light music. A popular composer of the day, Prosper Massé, published such a setting in 1846.[35] More recently there has been Pierre Perret's interpretation as part of his 20 Fables inspirées de Jean de la Fontaine (1995),[36] and a jazz arrangement on Daniel Roca's 10 Fables de La Fontaine (2005).[37]&lt;/p&gt;&lt;head rend="h2"&gt;See also&lt;/head&gt;[edit]&lt;list rend="ul"&gt;&lt;item&gt;Collective action problem&lt;/item&gt;&lt;item&gt;Who Will Bell the Cat?, a children's picture book based on the fable&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;References&lt;/head&gt;[edit]&lt;list rend="ol"&gt;&lt;item&gt;^ Strouf, Judie L. H. (2005). The literature teacher's book of lists. Jossey-Bass. p. 13. ISBN 0787975508.&lt;/item&gt;&lt;item&gt;^ Ben Edwin Perry (1965). Babrius and Phaedrus. Loeb Classical Library. Cambridge, MA: Harvard University Press. pp. 545, no. 613. ISBN 0-674-99480-9.&lt;/item&gt;&lt;item&gt;^ "Belling The Cat". Fables of Aesop. 2016-07-05. Retrieved 2021-03-04.&lt;/item&gt;&lt;item&gt;^ "To Bell the Cat" thefreedictionary.com. Retrieved 9 November 2007.&lt;/item&gt;&lt;item&gt;^ David Reid, David Hume of Godscroft's History of the House of Angus, vol. 1 (STS: Edinburgh, 2005), p. 26.&lt;/item&gt;&lt;item&gt;^ Macdougall, Norman (1982). James III: A Political Study. Edinburgh: John Donald. pp. 287–288. ISBN 0859760782.&lt;/item&gt;&lt;item&gt;^ "Bellingcat: Digital Sleuths on the Hunt for Truth"&lt;/item&gt;&lt;item&gt;^ "21. De cato et muribus (1687), illustrated by Francis Barlow". Mythfolklore.net. Retrieved January 26, 2011.&lt;/item&gt;&lt;item&gt;^ Laura (15 May 2009). "Christianizing Aesop: The Fables of Odo of Cheriton". Journey to the Sea. Retrieved 26 January 2011.&lt;/item&gt;&lt;item&gt;^ Ysopet-Avionnet, the Latin and French texts, University of Illinois 1919; fable LXII, pp. 190–192; this is archived online&lt;/item&gt;&lt;item&gt;^ Les contes moralisés de Nicole BozonParis, 1889, pp. 144–145; archived here&lt;/item&gt;&lt;item&gt;^ William's Vision of Piers Plowman by William Langland, edited by Ben Byram-Wigfield (2006), Prologue, lines 146–181; online text here Archived 2011-08-07 at the Wayback Machine&lt;/item&gt;&lt;item&gt;^ "The Parliament of the Rats and Mice". Medieval Forum. SFSU. Archived from the original on 10 March 2022. Retrieved 26 January 2011.&lt;/item&gt;&lt;item&gt;^ Poésies morales et historiques d'Eustache Deschamps, Paris 1832, pp. 188–189&lt;/item&gt;&lt;item&gt;^ Robert Landru, Eustache Deschamps, Fédération des sociétés d'histoire et d'archéologie de l'Aisne, vol. XV 1969, p. 126&lt;/item&gt;&lt;item&gt;^ Fable 195&lt;/item&gt;&lt;item&gt;^ View on Wikimedia Commons&lt;/item&gt;&lt;item&gt;^ "Elizur Wright's translation". Oaks.nvg.org. Retrieved 26 January 2011.&lt;/item&gt;&lt;item&gt;^ Kriloff's Fables, translated by C. Fillingham Coxwell, London 1920, pp. 38–39; archived online&lt;/item&gt;&lt;item&gt;^ "Lyrics | LM.C – Bell The Cat (English)". SongMeanings. 25 April 2010. Retrieved 26 January 2011.&lt;/item&gt;&lt;item&gt;^ "Bell the CAT/LM.C". YouTube. 18 November 2007. Archived from the original on 2021-12-12. Retrieved 26 January 2011.&lt;/item&gt;&lt;item&gt;^ Who will bell the cat?. OCLC 1037155724.&lt;/item&gt;&lt;item&gt;^ "Who Will Bell the Cat?". Publishers Weekly. PWxyz LLC. February 19, 2018. Retrieved April 6, 2022.&lt;/item&gt;&lt;item&gt;^ p. 135, Tsewang, Pema. 2012. Like a Yeti Catching Marmots. Boston: Wisdom Publications.&lt;/item&gt;&lt;item&gt;^ Exhibited at the 1888 Salon; photo online&lt;/item&gt;&lt;item&gt;^ "See online". Archived from the original on July 20, 2011. Retrieved 17 August 2012.&lt;/item&gt;&lt;item&gt;^ "In the Musée Denon de Chalon-sur-Saône". Philibert-leon-couturier.com. Retrieved 17 August 2012.&lt;/item&gt;&lt;item&gt;^ "In the Musée La Fontaine at Château Thierry". Retrieved 17 August 2012.&lt;/item&gt;&lt;item&gt;^ George Baxley. "baxleystamps.com". baxleystamps.com. Retrieved 17 August 2012.&lt;/item&gt;&lt;item&gt;^ View online Archived 2012-03-25 at the Wayback Machine&lt;/item&gt;&lt;item&gt;^ The score is printed in: John Metz, The Fables of La Fontaine: A Critical Edition of the Eighteenth-Century, Pendragon Press 1986, p. 45&lt;/item&gt;&lt;item&gt;^ Op. 85, 1879, Score at Gallica&lt;/item&gt;&lt;item&gt;^ Liedernet&lt;/item&gt;&lt;item&gt;^ Op. 123, Liedernet&lt;/item&gt;&lt;item&gt;^ Bibliographie de la France, 14 March 1846, 127&lt;/item&gt;&lt;item&gt;^ "Pierre Perret chante 20 fables inspirées de Jean de La Fontaine Perret, Pierre, 1934–..." bibliotheques.avignon.fr.&lt;/item&gt;&lt;item&gt;^ Track available on Jamendo&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;External links&lt;/head&gt;[edit]&lt;list rend="ul"&gt;&lt;item&gt;Media related to Belling the Cat at Wikimedia Commons&lt;/item&gt;&lt;item&gt;The dictionary definition of belling the cat at Wiktionary&lt;/item&gt;&lt;item&gt;19th–20th century book illustrations online&lt;/item&gt;&lt;item&gt;Collection of primary fable sources online&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://en.wikipedia.org/wiki/Belling_the_Cat"/></entry><entry><id>https://news.ycombinator.com/item?id=45158523</id><title>Delayed Security Patches for AOSP (Android Open Source Project)</title><updated>2025-09-07T17:32:14.756458+00:00</updated><content>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://twitter.com/grapheneos/status/1964561043906048183"/></entry><entry><id>https://news.ycombinator.com/item?id=45158877</id><title>Nepal Bans 26 Social Media Platforms, Including Facebook and YouTube</title><updated>2025-09-07T17:32:14.677650+00:00</updated><content/><link href="https://www.nytimes.com/2025/09/07/world/asia/nepal-bans-social-media-platforms.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45158968</id><title>The MacBook has a sensor that knows the exact angle of the screen hinge</title><updated>2025-09-07T17:32:14.211290+00:00</updated><content>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://twitter.com/samhenrigold/status/1964428927159382261"/></entry><entry><id>https://news.ycombinator.com/item?id=45159742</id><title>Campfire: Web-Based Chat Application</title><updated>2025-09-07T17:32:13.713057+00:00</updated><content>&lt;doc fingerprint="e85798574f27f5cd"&gt;
  &lt;main&gt;
    &lt;p&gt;Campfire is web-based chat application. It supports many of the features you'd expect, including:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Multiple rooms, with access controls&lt;/item&gt;
      &lt;item&gt;Direct messages&lt;/item&gt;
      &lt;item&gt;File attachments with previews&lt;/item&gt;
      &lt;item&gt;Search&lt;/item&gt;
      &lt;item&gt;Notifications (via Web Push)&lt;/item&gt;
      &lt;item&gt;@mentions&lt;/item&gt;
      &lt;item&gt;API, with support for bot integrations&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Campfire is single-tenant: any rooms designated "public" will be accessible by all users in the system. To support entirely distinct groups of customers, you would deploy multiple instances of the application.&lt;/p&gt;
    &lt;code&gt;bin/setup
bin/rails server
&lt;/code&gt;
    &lt;p&gt;Campfire's Docker image contains everything needed for a fully-functional, single-machine deployment. This includes the web app, background jobs, caching, file serving, and SSL.&lt;/p&gt;
    &lt;p&gt;To persist storage of the database and file attachments, map a volume to &lt;code&gt;/rails/storage&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;To configure additional features, you can set the following environment variables:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;SSL_DOMAIN&lt;/code&gt;- enable automatic SSL via Let's Encrypt for the given domain name&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;DISABLE_SSL&lt;/code&gt;- alternatively, set&lt;code&gt;DISABLE_SSL&lt;/code&gt;to serve over plain HTTP&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;VAPID_PUBLIC_KEY&lt;/code&gt;/&lt;code&gt;VAPID_PRIVATE_KEY&lt;/code&gt;- set these to a valid keypair to allow sending Web Push notifications. You can generate a new keypair by running&lt;code&gt;/script/admin/create-vapid-key&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SENTRY_DSN&lt;/code&gt;- to enable error reporting to sentry in production, supply your DSN here&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;code&gt;docker build -t campfire .

docker run \
  --publish 80:80 --publish 443:443 \
  --restart unless-stopped \
  --volume campfire:/rails/storage \
  --env SECRET_KEY_BASE=$YOUR_SECRET_KEY_BASE \
  --env VAPID_PUBLIC_KEY=$YOUR_PUBLIC_KEY \
  --env VAPID_PRIVATE_KEY=$YOUR_PRIVATE_KEY \
  --env SSL_DOMAIN=chat.example.com \
  campfire
&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/basecamp/once-campfire"/></entry><entry><id>https://news.ycombinator.com/item?id=45159812</id><title>US to target more businesses after Hyundai raid</title><updated>2025-09-07T17:32:13.214885+00:00</updated><content>&lt;doc fingerprint="54885354b6f2dc56"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;US to target more businesses after Hyundai raid, top official says&lt;/head&gt;
    &lt;p&gt;By Ted Hesson&lt;/p&gt;
    &lt;p&gt;WASHINGTON, Sept 7 (Reuters) - President Donald Trump's administration plans to target more businesses for immigration enforcement after a raid on a Hyundai facility in Georgia led to hundreds of arrests, a top White House official said on Sunday.&lt;/p&gt;
    &lt;p&gt;Speaking on CNN's 'State of the Union,' White House border czar Tom Homan said the administration would intensify the focus on workplaces.&lt;/p&gt;
    &lt;p&gt;Sign up here.&lt;/p&gt;
    &lt;p&gt;"We're going to do more worksite enforcement operations," Homan said. "No one hires an illegal alien out of the goodness of their heart. They hire them because they can work them harder, pay them less, undercut the competition that hires U.S. citizen employees."&lt;/p&gt;
    &lt;p&gt;Opponents of Trump's crackdown and some business groups say major U.S. industries - including agriculture, hospitality and meatpacking - depend on immigrants without legal status.&lt;/p&gt;
    &lt;p&gt;U.S. immigration authorities arrested 475 people on immigration violations during the raid of the Hyundai facility on Thursday, most of whom were South Korean nationals. The South Korean government said on Sunday that the workers would be returned once administrative procedures were completed.&lt;/p&gt;
    &lt;p&gt;The U.S. Department of Homeland Security did not immediately respond to a request for comment.&lt;/p&gt;
    &lt;p&gt;A U.S. Immigration and Customs Enforcement official said during a press conference on Friday that some of the people arrested at the facility had crossed the border illegally and overstayed visas. A separate ICE official told Reuters that many had visas for tourists and business travelers that do not include a work permit.&lt;/p&gt;
    &lt;p&gt;The arrests in Georgia followed tougher rhetoric by Trump on illegal immigration. For weeks, Trump and his top officials have suggested the administration could send National Guard troops and federal officers to Chicago to target crime and immigration.&lt;/p&gt;
    &lt;p&gt;In a Truth Social post on Saturday, Trump posted a meme based on the 1979 Vietnam war movie "Apocalypse Now" that showed an image of the Chicago skyline with flames and helicopters, reminiscent of the deadly helicopter attack on a Vietnamese village in the film.&lt;/p&gt;
    &lt;p&gt;On CNN, Homan defended the meme, which has been heavily criticized by Chicago residents and others for its warlike imagery and suggestion that the city is a military target. He said it was being taken out of context and that the Trump administration was only going to war with criminals and those violating immigration laws.&lt;/p&gt;
    &lt;p&gt;Reporting by Ted Hesson; Editing by Ross Colvin and Andrea Ricci&lt;/p&gt;
    &lt;p&gt;Our Standards: The Thomson Reuters Trust Principles.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.reuters.com/business/autos-transportation/us-target-more-businesses-after-hyundai-raid-top-official-says-2025-09-07/"/></entry></feed>