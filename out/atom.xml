<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-14T05:09:00.249587+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45231852</id><title>My first impressions of Gleam</title><updated>2025-09-14T05:11:23.449283+00:00</updated><content>&lt;doc fingerprint="7c882e31ab6d3836"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;My First Impressions of Gleam&lt;/head&gt;
    &lt;p&gt;I’m looking for a new programming language to learn this year, and Gleam looks like the most fun. It’s an Elixir-like language that supports static typing.&lt;/p&gt;
    &lt;p&gt;I read the language tour, and it made sense to me, but I need to build something before I can judge a programming language well.&lt;/p&gt;
    &lt;p&gt;I’m sharing some notes on my first few hours using Gleam in case they’re helpful to others learning Gleam or to the team developing the language.&lt;/p&gt;
    &lt;head rend="h2"&gt;My project: Parsing old AIM logs 🔗︎&lt;/head&gt;
    &lt;p&gt;I used AOL Instant Messenger from about 1999 to 2007. For most of that time, I used AIM clients that logged my conversations, but they varied in formats. Most of the log formats are XML or HTML, which make re-reading those logs a pain.&lt;/p&gt;
    &lt;p&gt;The simplest AIM logs are the plaintext logs, which look like this:&lt;/p&gt;
    &lt;code&gt;Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005
[18:44] Jane: hi
[18:55] Me: hey whats up
Session Close (Jane): Mon Sep 12 18:56:02 2005
&lt;/code&gt;
    &lt;p&gt;Every decade or so, I try writing a universal AIM log parser to get all of my old logs into a consistent, readable format. Unfortunately, I always get bored and give up partway through. My last attempt was seven years ago, when I tried doing it in Python 2.7.&lt;/p&gt;
    &lt;p&gt;Parsing logs is a great match for Gleam because some parts of the project are easy (e.g., parsing the plaintext logs), so I can do the easy parts while I get the hang of Gleam as a language and gradually build up to the harder log formats and adding a web frontend.&lt;/p&gt;
    &lt;p&gt;I’ve also heard that functional languages lend themselves especially well to parsing tasks, and I’ve never understood why, so it’s a good opportunity to learn.&lt;/p&gt;
    &lt;head rend="h2"&gt;My background in programming languages 🔗︎&lt;/head&gt;
    &lt;p&gt;I’ve been a programmer for 20 years, but I’m no language design connoisseur. I’m sharing things about Gleam I find unintuitive or difficult to work with, but they’re not language critiques, just candid reactions.&lt;/p&gt;
    &lt;p&gt;I’ve never worked in a langauge that’s designed for functional programming. The closest would be JavaScript. The languages I know best are Go and Python.&lt;/p&gt;
    &lt;head rend="h2"&gt;How do I parse command-line args? 🔗︎&lt;/head&gt;
    &lt;p&gt;The first thing I wanted to do was figure out how to parse a command-line argument so I could call my app like this:&lt;/p&gt;
    &lt;code&gt;./log-parser ~/logs/aim/plaintext
&lt;/code&gt;
    &lt;p&gt;But there’s no Gleam standard library module for reading command-line arguments. I found glint, and it felt super complicated for just reading one command-line argument. Then, I realized there’s a simpler third-party library called argv.&lt;/p&gt;
    &lt;p&gt;I can parse the command-line argument like this:&lt;/p&gt;
    &lt;code&gt;pub fn main() {
  case argv.load().arguments {
    [path] -&amp;gt; io.println("command-line arg is " &amp;lt;&amp;gt; path)
    _ -&amp;gt; io.println("Usage: gleam run &amp;lt;directory_path&amp;gt;")
  }
}
&lt;/code&gt;
    &lt;code&gt;$ gleam run ~/whatever
   Compiled in 0.01s
    Running log_parser.main
command-line arg is /home/mike/whatever
&lt;/code&gt;
    &lt;p&gt;Cool, easy enough!&lt;/p&gt;
    &lt;head rend="h2"&gt;What does &lt;code&gt;gleam build&lt;/code&gt; do? 🔗︎&lt;/head&gt;
    &lt;p&gt;I got my program to run with &lt;code&gt;gleam run&lt;/code&gt;, but I was curious if I could compile an executable like &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;zig build&lt;/code&gt; does.&lt;/p&gt;
    &lt;code&gt;$ gleam build
   Compiled in 0.01s
&lt;/code&gt;
    &lt;p&gt;Hmm, compiled what? I couldn’t see a binary anywhere.&lt;/p&gt;
    &lt;p&gt;The documentation for &lt;code&gt;gleam build&lt;/code&gt; just says “Build the project” but doesn’t explain what it builds or where it stores the build artifact.&lt;/p&gt;
    &lt;p&gt;There’s a &lt;code&gt;build&lt;/code&gt; directory, but it doesn’t produce an obvious executable.&lt;/p&gt;
    &lt;code&gt;$ rm -rf build &amp;amp;&amp;amp; gleam build
Downloading packages
 Downloaded 5 packages in 0.00s
  Compiling argv
  Compiling gleam_stdlib
  Compiling filepath
  Compiling gleeunit
  Compiling simplifile
  Compiling log_parser
   Compiled in 0.52s

$ ls -1 build/
dev
gleam-dev-erlang.lock
gleam-dev-javascript.lock
gleam-lsp-erlang.lock
gleam-lsp-javascript.lock
gleam-prod-erlang.lock
gleam-prod-javascript.lock
packages
&lt;/code&gt;
    &lt;p&gt;From poking around, I think the executables are under &lt;code&gt;build/dev/erlang/log_parser/ebin/&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;$ ls -1 build/dev/erlang/log_parser/ebin/
log_parser.app
log_parser.beam
log_parser@@main.beam
log_parser_test.beam
plaintext_logs.beam
plaintext_logs_test.beam
&lt;/code&gt;
    &lt;p&gt;Those appear to be BEAM bytecode, so I can’t execute them directly. I assume I could get run the BEAM VM manually and execute those files somehow, but that doesn’t sound appealing.&lt;/p&gt;
    &lt;p&gt;So, I’ll stick to &lt;code&gt;gleam run&lt;/code&gt; to run my app, but I wish &lt;code&gt;gleam build&lt;/code&gt; had a better explanation of what it produced and what the developer can do with it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Let me implement the simplest possible parser 🔗︎&lt;/head&gt;
    &lt;p&gt;To start, I decided to write a function that does basic parsing of plaintext logs.&lt;/p&gt;
    &lt;p&gt;So, I wrote a test with what I wanted.&lt;/p&gt;
    &lt;code&gt;pub fn parse_simple_plaintext_log_test() {
  "
Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005
[18:44] Jane: hi
[18:55] Me: hey whats up
Session Close (Jane): Mon Sep 12 18:56:02 2005
"
  |&amp;gt; string.trim
  |&amp;gt; plaintext_logs.parse
  |&amp;gt; should.equal(["hi", "hey whats up"])
}
&lt;/code&gt;
    &lt;p&gt;Eventually, I want to parse all the metadata in the conversation, including names, timestamps, and session information. But as a first step, all my function has to do is read an AIM chat log as a string and emit a list of the chat messages as separate strings.&lt;/p&gt;
    &lt;p&gt;That meant my actual function would look like this:&lt;/p&gt;
    &lt;code&gt;pub fn parse(contents: String) -&amp;gt; List(String) {
  // Note: todo is a Gleam language keyword to indicate unfinished code.
  todo
}
&lt;/code&gt;
    &lt;p&gt;Just to get it compiling, I add in a dummy implementation:&lt;/p&gt;
    &lt;code&gt;pub fn parse(contents: String) -&amp;gt; List(String) {
  ["fake", "data"]
}
&lt;/code&gt;
    &lt;p&gt;And I can test it like this:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
warning: Unused variable
  ┌─ /home/mike/code/gleam-log-parser2/src/plaintext_logs.gleam:1:14
  │
1 │ pub fn parse(contents: String) -&amp;gt; List(String) {
  │              ^^^^^^^^^^^^^^^^ This variable is never used

Hint: You can ignore it with an underscore: `_contents`.

   Compiled in 0.22s
    Running log_parser_test.main
F
Failures:

  1) plaintext_logs_test.parse_simple_plaintext_log_test: module 'plaintext_logs_test'
     Values were not equal
     expected: ["hi", "hey whats up"]
          got: ["fake", "data"]
     output:

Finished in 0.008 seconds
1 tests, 1 failures
&lt;/code&gt;
    &lt;p&gt;Cool, that’s what I expected. The test is failing because it’s returning hardcoded dummy results that don’t match my test.&lt;/p&gt;
    &lt;head rend="h2"&gt;Adjusting my brain to a functional language 🔗︎&lt;/head&gt;
    &lt;p&gt;Okay, now it’s time to implement the parsing for real. I need to implement this function:&lt;/p&gt;
    &lt;code&gt;pub fn parse(contents: String) -&amp;gt; List(String) {
  todo
}
&lt;/code&gt;
    &lt;p&gt;At this point, I kind of froze up. It struck me that Gleam excludes so many of the tools I’m used to in other languages:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;There are no &lt;code&gt;if&lt;/code&gt;statements&lt;/item&gt;
      &lt;item&gt;There are no loops&lt;/item&gt;
      &lt;item&gt;There’s no &lt;code&gt;return&lt;/code&gt;keyword&lt;/item&gt;
      &lt;item&gt;There are no list index accessors&lt;list rend="ul"&gt;&lt;item&gt;e.g., you can’t access the n-th element of a &lt;code&gt;List&lt;/code&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;e.g., you can’t access the n-th element of a &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;What do I even do? Split the string into tokens and then do something with that?&lt;/p&gt;
    &lt;p&gt;Eventually, I realized for a simple implementation, I wanted to just split the string into lines, so I want to do this:&lt;/p&gt;
    &lt;code&gt;pub fn parse(contents: String) -&amp;gt; List(String) {
  string.split(contents, on: "\n")
}
&lt;/code&gt;
    &lt;p&gt;If I test again, I get this:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
   Compiled in 0.21s
    Running log_parser_test.main
F
Failures:

  1) plaintext_logs_test.parse_simple_plaintext_log_test: module 'plaintext_logs_test'
     Values were not equal
     expected: ["hi", "hey whats up"]
          got: ["Session Start (DumbAIMScreenName:Jane): Mon Sep 12 18:44:17 2005", "[18:44] Jane: hi", "[18:55] Me: hey whats up", "Session Close (Jane): Mon Sep 12 18:56:02 2005"]
     output:

Finished in 0.009 seconds
1 tests, 1 failures
&lt;/code&gt;
    &lt;p&gt;Okay, now I’m a little closer.&lt;/p&gt;
    &lt;head rend="h2"&gt;How do I iterate over a list in a language with no loops? 🔗︎&lt;/head&gt;
    &lt;p&gt;I turned my logs into a list of lines, but that’s where I got stuck again.&lt;/p&gt;
    &lt;p&gt;I’m so used to &lt;code&gt;for&lt;/code&gt; loops that my brain kept thinking, “How do I do a &lt;code&gt;for&lt;/code&gt; loop to iterate over the elements?”&lt;/p&gt;
    &lt;p&gt;I realized I needed to call &lt;code&gt;list.map&lt;/code&gt;. I need to define a function that acts on each element of the list.&lt;/p&gt;
    &lt;code&gt;import gleam/list
import gleam/string

fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; line
  }
}

pub fn parse(contents: String) -&amp;gt; List(String) {
  string.split(contents, on: "\n")
  |&amp;gt; list.map(parse_line)
}
&lt;/code&gt;
    &lt;p&gt;This is my first time using pattern matching in any language, and it’s neat, though it’s still so unfamiliar that I find it hard to recognize when to use it.&lt;/p&gt;
    &lt;p&gt;Zooming in a bit on the pattern matching, it’s here:&lt;/p&gt;
    &lt;code&gt;  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; line
  }
&lt;/code&gt;
    &lt;p&gt;It evaluates the &lt;code&gt;line&lt;/code&gt; variable and matches it to one of the subsequent patterns within the braces. If the line starts with &lt;code&gt;"Session Start"&lt;/code&gt; (the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; means the preceding string is a prefix), then Gleam executes the code after the &lt;code&gt;-&amp;gt;&lt;/code&gt;, which in this case is just the empty string. Same for &lt;code&gt;"Session Close"&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;If the line doesn’t match the &lt;code&gt;"Session Start"&lt;/code&gt; or &lt;code&gt;"Session Close"&lt;/code&gt; patterns, Gleam executes the last line in the &lt;code&gt;case&lt;/code&gt; which just matches any string. In that case, it evaluates to the same string. Meaning &lt;code&gt;"hi"&lt;/code&gt; would evaluate to just &lt;code&gt;"hi"&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;This is where it struck me how strange it feels to not have a &lt;code&gt;return&lt;/code&gt; keyword. In every other language I know, you have to explicitly return a value from a function with a &lt;code&gt;return&lt;/code&gt; keyword, but in Gleam, the return value is just the value from the last line that Gleam executes in the function.&lt;/p&gt;
    &lt;p&gt;If I run my test, I get this:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
   Compiled in 0.22s
    Running log_parser_test.main
F
Failures:

  1) plaintext_logs_test.parse_simple_plaintext_log_test: module 'plaintext_logs_test'
     Values were not equal
     expected: ["hi", "hey whats up"]
          got: ["", "[18:44] Jane: hi", "[18:55] Me: hey whats up", ""]
     output:

Finished in 0.009 seconds
1 tests, 1 failures
&lt;/code&gt;
    &lt;p&gt;Again, this is what I expected, and I’m a bit closer to my goal.&lt;/p&gt;
    &lt;p&gt;I’ve converted the &lt;code&gt;"Session Start"&lt;/code&gt; and &lt;code&gt;"Session End"&lt;/code&gt; lines to empty strings, and the middle two elements of the list are the lines that have AIM messages in them.&lt;/p&gt;
    &lt;p&gt;The remaining work is:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Strip out the time and sender parts of the log lines.&lt;/item&gt;
      &lt;item&gt;Filter out empty strings.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Scraping an AIM message from a line 🔗︎&lt;/head&gt;
    &lt;p&gt;At this point, I have a string like this:&lt;/p&gt;
    &lt;code&gt;[18:55] Me: hey whats up
&lt;/code&gt;
    &lt;p&gt;And I need to extract just the portion after the sender’s name to this:&lt;/p&gt;
    &lt;code&gt;hey whats up
&lt;/code&gt;
    &lt;p&gt;My instinct is to use a string split function and split on the &lt;code&gt;:&lt;/code&gt; character. I see that there’s &lt;code&gt;string.split&lt;/code&gt; which returns &lt;code&gt;List(String)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;There’s also a &lt;code&gt;string.split_once&lt;/code&gt; function, which should work because I can split once on &lt;code&gt;: &lt;/code&gt;(note the trailing space after the colon).&lt;/p&gt;
    &lt;p&gt;The problem is that &lt;code&gt;split_once&lt;/code&gt; returns &lt;code&gt;Result(#(String, String), Nil)&lt;/code&gt;, a type that feels scarier to me. It’s a two-tuple wrapped in a &lt;code&gt;Result&lt;/code&gt;, which means that the function can return an error on failure. It’s confusing that &lt;code&gt;split_once&lt;/code&gt; can fail whereas &lt;code&gt;split&lt;/code&gt; cannot, so for simplicity, I’ll go with &lt;code&gt;split&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
      echo string.split(line, on: ": ")
      todo
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;If I run my test, I get this:&lt;/p&gt;
    &lt;code&gt;$ gleam test
warning: Todo found
   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:10:7
   │
10 │       todo
   │       ^^^^ This code is incomplete

This code will crash if it is run. Be sure to finish it before
running your program.

Hint: I think its type is `String`.


   Compiled in 0.01s
    Running log_parser_test.main
src/plaintext_logs.gleam:9
["[18:44] Jane", "hi"]
&lt;/code&gt;
    &lt;p&gt;Good. That’s doing what I want. I’m successfully isolating the &lt;code&gt;"hi"&lt;/code&gt; part, so now I just have to return it.&lt;/p&gt;
    &lt;head rend="h2"&gt;How do I access the last element of a list? 🔗︎&lt;/head&gt;
    &lt;p&gt;At this point, I feel close to victory. I’ve converted the line to a list of strings, and I know the string I want is the last element of the list, but how do I grab it?&lt;/p&gt;
    &lt;p&gt;In most other languages, I’d just say &lt;code&gt;line_parts[1]&lt;/code&gt;, but Gleam’s lists have no accessors by index.&lt;/p&gt;
    &lt;p&gt;Looking at the &lt;code&gt;gleam/list&lt;/code&gt; module, I see a &lt;code&gt;list.last&lt;/code&gt; function, so I try that:&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
       string.split(line, on: ": ")
       |&amp;gt; list.last
       |&amp;gt; echo
       |&amp;gt; todo
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;If I run that, I get:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
warning: Todo found
   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:12:11
   │
12 │        |&amp;gt; todo
   │           ^^^^ This code is incomplete

This code will crash if it is run. Be sure to finish it before
running your program.

Hint: I think its type is `fn(Result(String, Nil)) -&amp;gt; String`.


   Compiled in 0.24s
    Running log_parser_test.main
src/plaintext_logs.gleam:11
Ok("hi")
&lt;/code&gt;
    &lt;p&gt;A bit closer! I’ve extracted the last element of the list to find &lt;code&gt;"hi"&lt;/code&gt;, but now it’s wrapped in a &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;
    &lt;p&gt;I can unwrap it with &lt;code&gt;result.unwrap&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
       string.split(line, on: ": ")
       |&amp;gt; list.last
       |&amp;gt; result.unwrap("")
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;Re-running &lt;code&gt;gleam test&lt;/code&gt; yields:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
   Compiled in 0.22s
    Running log_parser_test.main
F
Failures:

  1) plaintext_logs_test.parse_simple_plaintext_log_test: module 'plaintext_logs_test'
     Values were not equal
     expected: ["hi", "hey whats up"]
          got: ["", "hi", "hey whats up", ""]
     output:

Finished in 0.008 seconds
1 tests, 1 failures
&lt;/code&gt;
    &lt;p&gt;Great! That did what I wanted. I reduced the messages lines to just the contents of the messages.&lt;/p&gt;
    &lt;head rend="h2"&gt;Filtering out empty strings 🔗︎&lt;/head&gt;
    &lt;p&gt;The only thing that’s left is to filter the empty strings out of the list, which is straightforward enough with &lt;code&gt;list.filter&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;pub fn parse(contents: String) -&amp;gt; List(String) {
  string.split(contents, on: "\n")
  |&amp;gt; list.map(parse_line)
  |&amp;gt; list.filter(fn(s) { !string.is_empty(s) })
}
&lt;/code&gt;
    &lt;p&gt;And I re-run the tests:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
   Compiled in 0.22s
    Running log_parser_test.main
.
Finished in 0.007 seconds
1 tests, 0 failures
&lt;/code&gt;
    &lt;p&gt;Voilà! The tests now pass!&lt;/p&gt;
    &lt;head rend="h2"&gt;Tidying up string splitting 🔗︎&lt;/head&gt;
    &lt;p&gt;My tests are now passing, so theoretically, I’ve achieved my initial goal.&lt;/p&gt;
    &lt;p&gt;I could declare victory and call it a day. Or, I could refactor!&lt;/p&gt;
    &lt;p&gt;I’ll refactor.&lt;/p&gt;
    &lt;p&gt;I feel somewhat ashamed of my string splitting logic, as it didn’t feel like idiomatic Gleam. Can I do it without getting into result unwrapping?&lt;/p&gt;
    &lt;p&gt;Re-reading it, I realize I can solve it with this newfangled pattern matching thing. I know that the string will split into a list with two elements, so I can create a pattern for a two-element list:&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
       case string.split(line, on: ": ") {
          [_, message] -&amp;gt; message
          _ -&amp;gt; ""
       }
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;That feels a little more elegant than calling &lt;code&gt;result.last&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Can I tidy this up further? I avoided &lt;code&gt;string.split_once&lt;/code&gt; because the type was too confusing, but it’s probably the better option if I expect only one split, so what does that look like?&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
       echo string.split_once(line, on: ": ")
       todo
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;To inspect the data, I run my test again:&lt;/p&gt;
    &lt;code&gt;$ gleam test
[...]
src/plaintext_logs.gleam:9
Ok(#("[18:44] Jane", "hi"))
&lt;/code&gt;
    &lt;p&gt;Okay, that doesn’t look as scary as I thought. Even though my first instinct is to unwrap the error and access the last element in the tuple (which actually is easy for tuples, just not lists), I know at this point that there’s probably a pattern-matchy way. And there is:&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
       case string.split_once(line, on: ": ") {
        Ok(#(_, message)) -&amp;gt; message
        _ -&amp;gt; ""
       }
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Ok(#(_, message))&lt;/code&gt; pattern will match a successful result from &lt;code&gt;split_once&lt;/code&gt;, which is a two-tuple of &lt;code&gt;String&lt;/code&gt; wrapped in an &lt;code&gt;Ok&lt;/code&gt; result. The other &lt;code&gt;case&lt;/code&gt; option is the catchall that returns an empty string.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting rid of the empty string hack 🔗︎&lt;/head&gt;
    &lt;p&gt;One of the compelling features of Gleam for me is its static typing, so it feels hacky that I’m abusing the empty string to represent a lack of message on a particular line. Can I use the type system instead of using empty strings as sentinel values?&lt;/p&gt;
    &lt;p&gt;The pattern in Gleam for indicating that something might fail but the failure isn’t necessarily an error is &lt;code&gt;Result(&amp;lt;type&amp;gt;, Nil)&lt;/code&gt;, so let me try to rewrite it that way:&lt;/p&gt;
    &lt;code&gt;import gleam/list
import gleam/result
import gleam/string

fn parse_line(line: String) -&amp;gt; Result(String, Nil) {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; Error(Nil)
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; Error(Nil)
    line -&amp;gt; {
       case string.split_once(line, on: ": ") {
        Ok(#(_, message)) -&amp;gt; Ok(message)
        _ -&amp;gt; Error(Nil)
       }
    }
  }
}

pub fn parse(contents: String) -&amp;gt; List(String) {
  string.split(contents, on: "\n")
  |&amp;gt; list.map(parse_line)
  |&amp;gt; result.values
}
&lt;/code&gt;
    &lt;p&gt;Great! I like being more explicit that the lines without messages return &lt;code&gt;Error(Nil)&lt;/code&gt; rather than an empty string. Also, &lt;code&gt;result.values&lt;/code&gt; is more succinct for filtering empty lines than the previous &lt;code&gt;list.filter(fn(s) { !string.is_empty(s) })&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Overall reflections 🔗︎&lt;/head&gt;
    &lt;p&gt;After spending a few hours with Gleam, I’m enjoying it. It pushes me out of my comfort zone the right amount where I feel like I’m learning new ways of thinking about programming but not so much that I’m too overwhelmed to learn anything.&lt;/p&gt;
    &lt;p&gt;The biggest downside I’m finding with Gleam is that it’s a young language with a relatively small team. It just turned six years old, but it looks like the founder was working on it solo until a year ago. There are now a handful of core maintainers, but I don’t know if any of them work on Gleam full-time, so the ecosystem is a bit limited. I’m looking ahead to parsing other log formats that are in HTML and XML, and there are Gleam HTML and XML parsers, but they don’t seem widely used, so I’m not sure how well they’ll work.&lt;/p&gt;
    &lt;head rend="h3"&gt;Love: Pipelines 🔗︎&lt;/head&gt;
    &lt;p&gt;I love love love Gleam’s pipeline syntax. You can see me using it in the test with the &lt;code&gt;|&amp;gt;&lt;/code&gt; characters:&lt;/p&gt;
    &lt;code&gt; "..."
  |&amp;gt; string.trim
  |&amp;gt; plaintext_logs.parse
  |&amp;gt; should.equal(["hi", "hey whats up"])
&lt;/code&gt;
    &lt;p&gt;The non-pipeline equivalent of the test would look like this:&lt;/p&gt;
    &lt;code&gt;pub fn parse_simple_plaintext_log_test() {
  let input = "..."
  let trimmed = string.trim(input)
  let parsed = plaintext_logs.parse(trimmed)

  should.equal(parsed, ["hi", "hey whats up"])
}
&lt;/code&gt;
    &lt;p&gt;It looks like wet garbage by comparison.&lt;/p&gt;
    &lt;p&gt;Now that I’ve seen pipelines, they feel so obvious and conspicuously missing in every other programming language I use.&lt;/p&gt;
    &lt;p&gt;I’ve enjoyed pipelining in bash, but it never occurred to me how strange it is that other programming languages never adopted it.&lt;/p&gt;
    &lt;head rend="h3"&gt;Like: Example-centric documentation 🔗︎&lt;/head&gt;
    &lt;p&gt;The Gleam documentation is a bit terse, but I like that it’s so example-heavy.&lt;/p&gt;
    &lt;p&gt;I learn best by reading examples, so I appreciate that so much of the Gleam standard library is documented with examples showing simple usage of each API function.&lt;/p&gt;
    &lt;head rend="h3"&gt;Like: Built-in unused symbol warnings 🔗︎&lt;/head&gt;
    &lt;p&gt;I like that the Gleam compiler natively warns about unused functions, variables, and imports. And I like that these are warnings rather than errors.&lt;/p&gt;
    &lt;p&gt;In Go, I get frustrated during debugging when I temporarily comment something out and then the compiler stubbornly refuses to do anything until I fix the stupid import, which I then have to un-fix when I finish whatever I was debugging.&lt;/p&gt;
    &lt;head rend="h3"&gt;Like: &lt;code&gt;todo&lt;/code&gt; keyword 🔗︎&lt;/head&gt;
    &lt;p&gt;One of my favorite dumb programming jokes happened at my first programming job about 15 years ago. On a group email thread with several C++ developers, my friend shared a hot tip about C++ development.&lt;/p&gt;
    &lt;p&gt;He said that if we were ever got fed up with arcane C++ compilation errors, we could just add a special line to our source code, and then even invalid C++ code would compile successfully:&lt;/p&gt;
    &lt;code&gt;#pragma always_compile
&lt;/code&gt;
    &lt;p&gt;Spoiler alert: it’s not a real C++ preprocessor directive.&lt;/p&gt;
    &lt;p&gt;But I’ve found myself occasionally wishing languages had something like this when I’m in the middle of development and don’t care about whatever bugs the compiler is trying to protect me from.&lt;/p&gt;
    &lt;p&gt;Gleam’s &lt;code&gt;todo&lt;/code&gt; is almost like a &lt;code&gt;#pragma always_compile&lt;/code&gt;. Even if your code is invalid, the Gleam compiler just says, “Okay, fine. I’ll run it anyway.”&lt;/p&gt;
    &lt;p&gt;You can see this when I was in the middle of implementing &lt;code&gt;parse_line&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;fn parse_line(line: String) -&amp;gt; String {
  case line {
    "Session Start" &amp;lt;&amp;gt; _ -&amp;gt; ""
    "Session Close" &amp;lt;&amp;gt; _ -&amp;gt; ""
    line -&amp;gt; {
      echo string.split(line, on: ": ")
      todo
    }
  }
}
&lt;/code&gt;
    &lt;p&gt;If I take out the &lt;code&gt;todo&lt;/code&gt;, Gleam refuses to run the code at all:&lt;/p&gt;
    &lt;code&gt;$ gleam test
  Compiling log_parser
error: Type mismatch
   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:8:5
   │
 8 │ ╭     line -&amp;gt; {
 9 │ │       echo string.split(line, on: ": ")
10 │ │     }
   │ ╰─────^

This case clause was found to return a different type than the previous
one, but all case clauses must return the same type.

Expected type:

    String

Found type:

    List(String)
&lt;/code&gt;
    &lt;p&gt;Right, I’m returning an incorrect type, so why would the compiler cooperate with me?&lt;/p&gt;
    &lt;p&gt;But adding &lt;code&gt;todo&lt;/code&gt; lets me run the function anyway, which helps me understand what the code is doing even though I haven’t finished implementing it:&lt;/p&gt;
    &lt;code&gt;$ gleam test
warning: Todo found
   ┌─ /home/mike/code/gleam-log-parser/src/plaintext_logs.gleam:10:7
   │
10 │       todo
   │       ^^^^ This code is incomplete

This code will crash if it is run. Be sure to finish it before
running your program.

Hint: I think its type is `String`.


  Compiling log_parser
   Compiled in 0.21s
    Running log_parser_test.main
src/plaintext_logs.gleam:9
["[18:44] Jane", "hi"]
F
[...]
Finished in 0.007 seconds
1 tests, 1 failures
&lt;/code&gt;
    &lt;head rend="h3"&gt;Like: Pattern matching 🔗︎&lt;/head&gt;
    &lt;p&gt;I find pattern matching elegant and concise, though it’s the part of Gleam I find hardest to adjust to. It feels so different from procedural style of programming I’m accustomed to in other languages I know.&lt;/p&gt;
    &lt;p&gt;The downside is that I have a hard time recognizing when pattern matching is the right tool, and I also find pattern matching harder to read. But I think that’s just inexperience, and I think with more practice, I’ll be able to think in pattern matching.&lt;/p&gt;
    &lt;head rend="h3"&gt;Dislike: Error handling 🔗︎&lt;/head&gt;
    &lt;p&gt;I find Gleam’s error handling pretty awkward, especially because errors ruin the beauty of nice, tidy pipelines.&lt;/p&gt;
    &lt;p&gt;For example, if I had a string processing pipeline like this:&lt;/p&gt;
    &lt;code&gt;string.split(line, on: "-")
|&amp;gt; list.last
|&amp;gt; result.unwrap("") // Ugly!
|&amp;gt; string.uppercase
&lt;/code&gt;
    &lt;p&gt;That &lt;code&gt;result.unwrap&lt;/code&gt; line feels so ugly and out of place to me. I wish the syntax was like this:&lt;/p&gt;
    &lt;code&gt;string.split(line, on: ": ")
|&amp;gt; try list.last
|&amp;gt; string.uppercase
|&amp;gt; Ok
&lt;/code&gt;
    &lt;p&gt;Where &lt;code&gt;try&lt;/code&gt; causes the function to return an error, kind of like in Zig.&lt;/p&gt;
    &lt;head rend="h3"&gt;Dislike: Small core language 🔗︎&lt;/head&gt;
    &lt;p&gt;I don’t know if this is a long-term design choice or if it’s just small for now because it’s an indie-developed language, but the first thing about Gleam that stood out to me is how few built-in features there are.&lt;/p&gt;
    &lt;p&gt;For example, there’s no built-in feature for iterating over the elements of a &lt;code&gt;List&lt;/code&gt; type, and the type itself doesn’t expose a function to iterate it, so you have to use the &lt;code&gt;gleam/list&lt;/code&gt; module in the standard library.&lt;/p&gt;
    &lt;p&gt;Similarly, if a function can fail, it returns a &lt;code&gt;Result&lt;/code&gt; type, and there are no built-in functions for handling a &lt;code&gt;Result&lt;/code&gt;, so you have to use the &lt;code&gt;gleam/result&lt;/code&gt; module to check if the function succeeded.&lt;/p&gt;
    &lt;p&gt;To me, that functionality feels so core to the language that it would be part of the language itself, not the standard library.&lt;/p&gt;
    &lt;head rend="h3"&gt;Dislike: Limited standard library 🔗︎&lt;/head&gt;
    &lt;p&gt;In addition to the language feeling small, the standard library feels pretty limited as well.&lt;/p&gt;
    &lt;p&gt;There are currently only 19 modules in the Gleam standard library. Conspicuously absent are modules for working with the filesystem (the de facto standard seems to be the third-party simplifile module).&lt;/p&gt;
    &lt;p&gt;For comparison, the standard libraries for Python and Go each have about 250 modules. Although, in fairness, those languages have about 1000x the resources as Gleam.&lt;/p&gt;
    &lt;head rend="h2"&gt;Source code 🔗︎&lt;/head&gt;
    &lt;p&gt;The source code for this project is available on Codeberg:&lt;/p&gt;
    &lt;p&gt;Commit 291e6d is the version that matches this blog post.&lt;/p&gt;
    &lt;p&gt;Thanks to Isaac Harris-Holt for helpful feedback on this post.&lt;/p&gt;
    &lt;head rend="h2"&gt;Read My Book&lt;/head&gt;
    &lt;p&gt;I'm writing a book of simple techniques to help developers improve their writing.&lt;/p&gt;
    &lt;p&gt;My book will teach you how to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create clear and pleasant software tutorials&lt;/item&gt;
      &lt;item&gt;Attract readers and customers through blogging&lt;/item&gt;
      &lt;item&gt;Write effective emails&lt;/item&gt;
      &lt;item&gt;Minimize pain in writing design documents&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Be the first to know when I post cool stuff&lt;/head&gt;
    &lt;p&gt;Subscribe to get my latest posts by email.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://mtlynch.io/notes/gleam-first-impressions/"/></entry><entry><id>https://news.ycombinator.com/item?id=45232299</id><title>Show HN: CLAVIER-36 – A programming environment for generative music</title><updated>2025-09-14T05:11:23.311294+00:00</updated><content>&lt;doc fingerprint="536fd5a56c585c00"&gt;
  &lt;main&gt;
    &lt;p&gt;×&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://clavier36.com/p/LtZDdcRP3haTWHErgvdM"/></entry><entry><id>https://news.ycombinator.com/item?id=45232562</id><title>Four-year wedding crasher mystery solved</title><updated>2025-09-14T05:11:23.121208+00:00</updated><content>&lt;doc fingerprint="67528137d6155029"&gt;
  &lt;main&gt;
    &lt;p&gt;A baffled bride has solved the mystery of the awkward-looking stranger who crashed her wedding four years ago.&lt;/p&gt;
    &lt;p&gt;Michelle Wylie and her husband, John, registered the presence of their unidentifiable guest only as they looked through photographs of their wedding in the days after the happy occasion.&lt;/p&gt;
    &lt;p&gt;Who was the tall man in a dark suit, distinguished by the look of quiet mortification on his face? But their family and friends could offer no explanation, nor could hotel staff at the Carlton hotel in Prestwick, where the event took place in November 2021. An appeal on Facebook likewise yielded no clues.&lt;/p&gt;
    &lt;p&gt;Eventually, with the mystery still niggling, Wylie asked the popular Scottish content creator Dazza to cast the online net wider – and a sheepish Andrew Hillhouse finally stepped forward.&lt;/p&gt;
    &lt;p&gt;In his explanatory post on Facebook, Hillhouse admitted that he had been “cutting it fine, as I’m known to do” when he pulled up at the wedding venue with five minutes to spare. Spotting a piper and other guests, he followed them into the hotel – “I remember thinking to myself: ‘Cool, this is obviously the right place’” – unaware that he had the address completely wrong and was supposed to be at a ceremony 2 miles away in Ayr.&lt;/p&gt;
    &lt;p&gt;He was initially unperturbed to find himself surrounded by strangers as the ceremony began – at the marriage he was due to attend, the only person he knew was the bride, Michaela, while his partner, Andrew, was part of the wedding party. It was when an entirely different bride came walking down the aisle that he realised: “OMG that’s not Michaela … I was at the wrong wedding!”&lt;/p&gt;
    &lt;p&gt;Hillhouse said: “You can’t exactly stand up and walk out of a wedding mid-ceremony, so I just had to commit to this act and spent the next 20 minutes awkwardly sitting there trying to be as inconspicuous as my 6ft 2 ass could be.”&lt;/p&gt;
    &lt;p&gt;At the end of the ceremony, Hillhouse, who is from Troon, was hoping to make a discreet exit, only to be waylaid by the wedding photographer, who insisted he join other guests for a group shot. He can be spotted looming uncomfortably at the very back of the crowd.&lt;/p&gt;
    &lt;p&gt;His post continued: “Rushed outside, made some phone calls and made my way to the correct wedding, where I was almost as popular as the actual bride and groom, and spent most of the night retelling that story to people.”&lt;/p&gt;
    &lt;p&gt;For Michelle Wylie, this amiable resolution brings to a close years of speculation.&lt;/p&gt;
    &lt;p&gt;She told BBC Scotland: “It would come into my head and I’d be like: ‘Someone must know who this guy is.’ I said a few times to my husband: ‘Are you sure you don’t know this guy, is he maybe from your work?’ We wondered if he was a mad stalker.”&lt;/p&gt;
    &lt;p&gt;She is now Facebook friends with Hillhouse and the pair have met in person to cement their coincidental bond.&lt;/p&gt;
    &lt;p&gt;“I could not stop laughing,” said Wylie. “We can’t believe we’ve found out who he is after almost four years.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theguardian.com/uk-news/2025/sep/12/wedding-crasher-mystery-solved-four-years-bride-scotland"/></entry><entry><id>https://news.ycombinator.com/item?id=45232565</id><title>486Tang – 486 on a credit-card-sized FPGA board</title><updated>2025-09-14T05:11:22.979108+00:00</updated><content>&lt;doc fingerprint="3a1d592425a09ee2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;486Tang - 486 on a credit-card-sized FPGA board&lt;/head&gt;
    &lt;p&gt;Yesterday I released 486Tang v0.1 on GitHub. It’s a port of the ao486 MiSTer PC core to the Sipeed Tang Console 138K FPGA. I’ve been trying to get an x86 core running on the Tang for a while. As far as I know, this is the first time ao486 has been ported to a non-Altera FPGA. Here’s a short write‑up of the project.&lt;/p&gt;
    &lt;p&gt;Thanks to everyone coming from Hacker News! If 486Tang caught your eye, I share progress updates and related projects over on X.&lt;/p&gt;
    &lt;head rend="h2"&gt;486Tang Architecture&lt;/head&gt;
    &lt;p&gt;Every FPGA board is a little different. Porting a core means moving pieces around and rewiring things to fit. Here are the major components in 486Tang:&lt;/p&gt;
    &lt;p&gt;Compared to ao486 on MiSTer, there are a few major differences:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Switching to SDRAM for main memory. The MiSTer core uses DDR3 as main memory. Obviously, at the time of the 80486, DDR didn’t exist, so SDRAM is a natural fit. I also wanted to dedicate DDR3 to the framebuffer; time‑multiplexing it would have been complicated. So SDRAM became the main memory and DDR3 the framebuffer. The SDRAM on Tang is 16‑bit wide while ao486 expects 32‑bit accesses, which would normally mean one 32‑bit word every two cycles. I mitigated this by running the SDRAM logic at 2× the system clock so a 32‑bit word can be read or written every CPU cycle (“double‑pumping” the memory).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;SD‑backed IDE. On MiSTer, the core forwards IDE requests to the ARM HPS over a fast HPS‑FPGA link; the HPS then accesses a VHD image. Tang doesn’t have a comparable high‑speed MCU‑to‑FPGA interface—only a feeble UART—so I moved disk storage into the SD card and let the FPGA access it directly.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Boot‑loading module. A PC needs several things to boot: BIOS, VGA BIOS, CMOS settings, and IDE IDENTIFY data (512 bytes). Since I didn’t rely on an MCU for disk data, I stored all of these in the first 128 KB of the SD card. A small boot loader module reads them into main memory and IDE, and then releases the CPU when everything is ready.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;System bring-up with the help of a whole-system simulator&lt;/head&gt;
    &lt;p&gt;After restructuring the system, the main challenge was bringing it up to a DOS prompt. A 486 PC is complex—CPU and peripherals—more so than the game consoles I’ve worked on. The ao486 CPU alone is &amp;gt;25K lines of Verilog, versus a few K for older cores like M68K. Debugging on hardware was painful: GAO builds took 10+ minutes and there were many more signals to probe. Without a good plan, it would be unmanageable and bugs could take days to isolate—not viable for a hobby project.&lt;/p&gt;
    &lt;p&gt;My solution was Verilator for subsystem and whole‑system simulation. The codebase is relatively mature, so I skipped per‑module unit tests and focused on simulating subsystems like VGA and a full boot to DOS. Verilator is fast enough to reach a DOS prompt in a few minutes—an order of magnitude better if you factor in the complete waveforms you get in simulation. The trick, then, is surfacing useful progress and error signals. A few simple instrumentation hooks were enough for me:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Bochs BIOS can print debug strings to port 0x8888 in debug builds. I intercept and print these (the yellow messages in the simulator). The same path exists on hardware—the CPU forwards them over UART—so BIOS issues show up immediately without waiting for a GAO build.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Subsystem‑scoped tracing. For Sound Blaster, IDE, etc., I added&lt;/p&gt;&lt;code&gt;--sound&lt;/code&gt;,&lt;code&gt;--ide&lt;/code&gt;flags to trace I/O operations and key state changes. This is much faster than editing Verilog or using GAO.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bochs BIOS assembly listings are invaluable. I initially used a manual disassembly—old console habits—without symbols, which was painful. Rebuilding Bochs and using the official listings solved that.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A lot of the bugs were in the new glue I added, as expected. ao486 itself is mature. Still, a few issues only showed up on this toolchain/hardware, mostly due to toolchain behavior differences. In one case a variable meant to be static behaved like an automatic variable and didn’t retain state across invocations, so a CE pulse never occurred. Buried deep, it took a while to find.&lt;/p&gt;
    &lt;p&gt;Here’s a simulation session. On the left the simulated 486 screen. On the right is the simulator terminal output. You can see the green VGA output and yellow debug output, along with other events like INT 15h and video VSYNCs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance optimizations&lt;/head&gt;
    &lt;p&gt;With simulation help, the core ran on Tang Console—just not fast. The Gowin GW5A isn’t a particularly fast FPGA. Initial benchmarks put it around a 25 MHz 80386.&lt;/p&gt;
    &lt;p&gt;The main obstacle to clock speed is long combinational paths. When you find a critical path, you either shorten it or pipeline it by inserting registers—both risks bugs. A solid test suite is essential; I used test386.asm to validate changes.&lt;/p&gt;
    &lt;p&gt;Here are a few concrete wins:&lt;/p&gt;
    &lt;p&gt;Reset tree and fan-out reduction. Gowin’s tools didn’t replicate resets aggressively enough (even with “Place → Replicate Resources”). One reset net had &amp;gt;5,000 fan-out, which ballooned delays. Manually replicating the reset and a few other high‑fan-out nets helped a lot.&lt;/p&gt;
    &lt;p&gt;Instruction fetch optimization. A long combinational chain sat in the decode/fetch interface. In &lt;code&gt;decoder_regs.v&lt;/code&gt;, the number of bytes the fetcher may accept was computed using the last decoded instruction’s length:&lt;/p&gt;
    &lt;code&gt;reg [3:0] decoder_count;
assign acceptable_1     = 4'd12 - decoder_count + consume_count;
always @(posedge clk) begin
  ...
  decoder_count &amp;lt;= after_consume_count + accepted;
end
&lt;/code&gt;
    &lt;p&gt;Here, &lt;code&gt;12&lt;/code&gt; is the buffer size, &lt;code&gt;decoder_count&lt;/code&gt; is the current occupancy, and &lt;code&gt;consume_count&lt;/code&gt; is the length of the outgoing instruction. Reasonable—but computing &lt;code&gt;consume_count&lt;/code&gt; (opcode, ModR/M, etc.) was on the Fmax‑limiting path. By the way, this is one of several well-known problems of the x86 - variable length instructions complicating decoding, another is complex address modes and “effective address” calculation.&lt;/p&gt;
    &lt;p&gt;The fix was to drop the dependency on &lt;code&gt;consume_count&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;assign acceptable_1    = 4'd12 - decoder_count;
&lt;/code&gt;
    &lt;p&gt;This may cause the fetcher to “under‑fetch” for one cycle because the outgoing instruction’s space isn’t reclaimed immediately. But &lt;code&gt;decoder_count&lt;/code&gt; updates next cycle, reclaiming the space. With a 12‑byte buffer, the CPI impact was negligible and Fmax improved measurably on this board.&lt;/p&gt;
    &lt;p&gt;TLB optimization. The Translation Lookaside Buffer (TLB) is a small cache that translates virtual to physical addresses. ao486 uses a 32‑entry fully‑associative TLB with a purely combinational read path—zero extra cycles, but a long path on every memory access (code and data).&lt;/p&gt;
    &lt;p&gt;DOS workloads barely stress the TLB; even many 386 extenders use a flat model. As a first step I converted the TLB to 4‑way set‑associative. That’s simpler and already slightly faster than fully‑associative for these workloads. There’s room to optimize further since the long combinational path rarely helps.&lt;/p&gt;
    &lt;p&gt;A rough v0.1 end‑to‑end result: about +35% per Landmark 6 benchmarks, reaching roughly 486SX‑20 territory.&lt;/p&gt;
    &lt;head rend="h2"&gt;Reflections&lt;/head&gt;
    &lt;p&gt;Here are a few reflections after the port:&lt;/p&gt;
    &lt;p&gt;Clock speed scaling. I appreciate the lure of the megahertz race now. Scaling the whole system clock was the most effective lever—more so than extra caches or deeper pipelines at this stage. Up to ~200–300 MHz, CPU, memory, and I/O can often scale together. After that, memory latency dominates, caches grow deeper, and once clock speeds stop increasing, multiprocessing takes over—the story of the 2000s.&lt;/p&gt;
    &lt;p&gt;x86 vs. ARM. Working with ao486 deepened my respect for x86’s complexity. John Crawford’s 1990 paper “The i486 CPU: Executing Instructions in One Clock Cycle” is a great read; it argues convincingly against scrapping x86 for a new RISC ISA given the software base (10K+ apps then). Compatibility was the right bet, but the baggage is real. By contrast, last year’s ARM7‑based GBATang felt refreshingly simple: fixed‑length 32‑bit instructions, saner addressing, and competitive performance. You can’t have your cake and eat it.&lt;/p&gt;
    &lt;p&gt;So there you have it—that’s 486Tang in v0.1. Thanks for reading, and see you next time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/"/></entry><entry><id>https://news.ycombinator.com/item?id=45233237</id><title>Recreating the US/* time zone situation</title><updated>2025-09-14T05:09:06.568067+00:00</updated><content>&lt;doc fingerprint="262621567e35bc58"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;RIP pthread_cancel&lt;/head&gt;
    &lt;p&gt;I posted about adding pthread_cancel use in curl about three weeks ago, we released this in curl 8.16.0 and it blew up right in our faces. Now, with #18540 we are ripping it out again. What happened?&lt;/p&gt;
    &lt;head rend="h2"&gt;short recap&lt;/head&gt;
    &lt;p&gt;pthreads define “Cancelation points”, a list of POSIX functions where a pthread may be cancelled. In addition, there is also a list of functions that may be cancelation points, among those &lt;code&gt;getaddrinfo()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt; is exactly what we are interested in for &lt;code&gt;libcurl&lt;/code&gt;. It blocks
until it has resolved a name. That may hang for a long time and &lt;code&gt;libcurl&lt;/code&gt;
is unable to do anything else. Meh. So, we start a pthread and let that
call &lt;code&gt;getaddrinfo()&lt;/code&gt;. &lt;code&gt;libcurl&lt;/code&gt; can do other things while that thread runs.&lt;/p&gt;
    &lt;p&gt;But eventually, we have to get rid of the pthread again. Which means we either have to &lt;code&gt;pthread_join()&lt;/code&gt; it - which means a blocking wait. Or we
call &lt;code&gt;pthread_detach()&lt;/code&gt; - which returns immediately but the thread keeps
on running. Both are bad when you want to do many, many transfers. Either we block and
stall or we let pthreads pile up in an uncontrolled way.&lt;/p&gt;
    &lt;p&gt;So, we added &lt;code&gt;pthread_cancel()&lt;/code&gt; to interrupt a running &lt;code&gt;getaddrinfo()&lt;/code&gt;
and get rid of the pthread we no longer needed. So the theory. And, after
some hair pulling, we got this working.&lt;/p&gt;
    &lt;head rend="h2"&gt;cancel yes, leakage also yes!&lt;/head&gt;
    &lt;p&gt;After releasing curl 8.16.0 we got an issue reported in #18532 that cancelled pthreads leaked memory.&lt;/p&gt;
    &lt;p&gt;Digging into the glibc source shows that there is this thing called &lt;code&gt;/etc/gai.conf&lt;/code&gt;
which defines how &lt;code&gt;getaddrinfo()&lt;/code&gt; should sort returned answers.&lt;/p&gt;
    &lt;p&gt;The implementation in glibc first resolves the name to addresses. For these, it needs to allocate memory. Then it needs to sort them if there is more than one address. And in order to do that it needs to read &lt;code&gt;/etc/gai.conf&lt;/code&gt;. And in order to do that
it calls &lt;code&gt;fopen()&lt;/code&gt; on the file. And that may be a pthread “Cancelation Point”
(and if not, it surely calls &lt;code&gt;open()&lt;/code&gt; which is a required cancelation point).&lt;/p&gt;
    &lt;p&gt;So, the pthread may get cancelled when reading &lt;code&gt;/etc/gai.conf&lt;/code&gt; and leak all
the allocated responses. And if it gets cancelled there, it will try to
read &lt;code&gt;/etc/gai.conf&lt;/code&gt; again the next time it has more than one address
resolved.&lt;/p&gt;
    &lt;p&gt;At this point, I decided that we need to give up on the whole &lt;code&gt;pthread_cancel()&lt;/code&gt;
strategy. The reading of &lt;code&gt;/etc/gai.conf&lt;/code&gt; is one point where a cancelled
&lt;code&gt;getaddrinfo()&lt;/code&gt; may leak. There might be others. Clearly, glibc is not really
designed to prevent leaks here (admittedly, this is not trivial).&lt;/p&gt;
    &lt;head rend="h2"&gt;RIP&lt;/head&gt;
    &lt;p&gt;Leaking memory potentially on something &lt;code&gt;libcurl&lt;/code&gt; does over and over again is
not acceptable. We’d rather pay the price of having to eventually wait on
a long running &lt;code&gt;getaddrinfo()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Applications using &lt;code&gt;libcurl&lt;/code&gt; can avoid this by using &lt;code&gt;c-ares&lt;/code&gt; which resolves
unblocking and without the use of threads. But that will not be able to do
everything that glibc does.&lt;/p&gt;
    &lt;p&gt;DNS continues to be tricky to use well.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://rachelbythebay.com/w/2025/09/12/tz/"/></entry><entry><id>https://news.ycombinator.com/item?id=45233713</id><title>RIP pthread_cancel</title><updated>2025-09-14T05:09:06.085642+00:00</updated><content>&lt;doc fingerprint="262621567e35bc58"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;RIP pthread_cancel&lt;/head&gt;
    &lt;p&gt;I posted about adding pthread_cancel use in curl about three weeks ago, we released this in curl 8.16.0 and it blew up right in our faces. Now, with #18540 we are ripping it out again. What happened?&lt;/p&gt;
    &lt;head rend="h2"&gt;short recap&lt;/head&gt;
    &lt;p&gt;pthreads define “Cancelation points”, a list of POSIX functions where a pthread may be cancelled. In addition, there is also a list of functions that may be cancelation points, among those &lt;code&gt;getaddrinfo()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt; is exactly what we are interested in for &lt;code&gt;libcurl&lt;/code&gt;. It blocks
until it has resolved a name. That may hang for a long time and &lt;code&gt;libcurl&lt;/code&gt;
is unable to do anything else. Meh. So, we start a pthread and let that
call &lt;code&gt;getaddrinfo()&lt;/code&gt;. &lt;code&gt;libcurl&lt;/code&gt; can do other things while that thread runs.&lt;/p&gt;
    &lt;p&gt;But eventually, we have to get rid of the pthread again. Which means we either have to &lt;code&gt;pthread_join()&lt;/code&gt; it - which means a blocking wait. Or we
call &lt;code&gt;pthread_detach()&lt;/code&gt; - which returns immediately but the thread keeps
on running. Both are bad when you want to do many, many transfers. Either we block and
stall or we let pthreads pile up in an uncontrolled way.&lt;/p&gt;
    &lt;p&gt;So, we added &lt;code&gt;pthread_cancel()&lt;/code&gt; to interrupt a running &lt;code&gt;getaddrinfo()&lt;/code&gt;
and get rid of the pthread we no longer needed. So the theory. And, after
some hair pulling, we got this working.&lt;/p&gt;
    &lt;head rend="h2"&gt;cancel yes, leakage also yes!&lt;/head&gt;
    &lt;p&gt;After releasing curl 8.16.0 we got an issue reported in #18532 that cancelled pthreads leaked memory.&lt;/p&gt;
    &lt;p&gt;Digging into the glibc source shows that there is this thing called &lt;code&gt;/etc/gai.conf&lt;/code&gt;
which defines how &lt;code&gt;getaddrinfo()&lt;/code&gt; should sort returned answers.&lt;/p&gt;
    &lt;p&gt;The implementation in glibc first resolves the name to addresses. For these, it needs to allocate memory. Then it needs to sort them if there is more than one address. And in order to do that it needs to read &lt;code&gt;/etc/gai.conf&lt;/code&gt;. And in order to do that
it calls &lt;code&gt;fopen()&lt;/code&gt; on the file. And that may be a pthread “Cancelation Point”
(and if not, it surely calls &lt;code&gt;open()&lt;/code&gt; which is a required cancelation point).&lt;/p&gt;
    &lt;p&gt;So, the pthread may get cancelled when reading &lt;code&gt;/etc/gai.conf&lt;/code&gt; and leak all
the allocated responses. And if it gets cancelled there, it will try to
read &lt;code&gt;/etc/gai.conf&lt;/code&gt; again the next time it has more than one address
resolved.&lt;/p&gt;
    &lt;p&gt;At this point, I decided that we need to give up on the whole &lt;code&gt;pthread_cancel()&lt;/code&gt;
strategy. The reading of &lt;code&gt;/etc/gai.conf&lt;/code&gt; is one point where a cancelled
&lt;code&gt;getaddrinfo()&lt;/code&gt; may leak. There might be others. Clearly, glibc is not really
designed to prevent leaks here (admittedly, this is not trivial).&lt;/p&gt;
    &lt;head rend="h2"&gt;RIP&lt;/head&gt;
    &lt;p&gt;Leaking memory potentially on something &lt;code&gt;libcurl&lt;/code&gt; does over and over again is
not acceptable. We’d rather pay the price of having to eventually wait on
a long running &lt;code&gt;getaddrinfo()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Applications using &lt;code&gt;libcurl&lt;/code&gt; can avoid this by using &lt;code&gt;c-ares&lt;/code&gt; which resolves
unblocking and without the use of threads. But that will not be able to do
everything that glibc does.&lt;/p&gt;
    &lt;p&gt;DNS continues to be tricky to use well.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://eissing.org/icing/posts/rip_pthread_cancel/"/></entry><entry><id>https://news.ycombinator.com/item?id=45234323</id><title>The case against social media is stronger than you think</title><updated>2025-09-14T05:09:06.026125+00:00</updated><content/><link href="https://arachnemag.substack.com/p/the-case-against-social-media-is"/></entry><entry><id>https://news.ycombinator.com/item?id=45234460</id><title>Safe C++ proposal is not being continued</title><updated>2025-09-14T05:09:05.952752+00:00</updated><content>&lt;doc fingerprint="d662bd2f20e73a5c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Safe C++ proposal is not being continued&lt;/head&gt;
    &lt;p&gt;One year ago, the Safe C++ proposal was made. The goal was to add a safe subset/context into C++ that would give strong guarantees (memory safety, type safety, thread safety) similar to what Rust provides, without breaking existing C++ code. It was an extension or superset of C++. The opt-in mechanism was to explicitly mark parts of the code that belong to the safe context. The authors even state:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Code in the safe context exhibits the same strong safety guarantees as code written in Rust.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The rest remains “unsafe” in the usual C++ sense. This means that existing code continues to work, while new or refactored parts can gain safety. For those who write Rust, Safe C++ has many similarities with Rust, sometimes with adjustments to fit C++’s design. Also, because C++ already has a huge base of “unsafe code”, Safe C++ has to provide mechanisms for mixing safe and unsafe, and for incremental migration. In that sense, all of Safe C++’s safe features are opt-in. Existing code compiles and works as before. Introducing safe context doesn’t break code that doesn’t use it.&lt;/p&gt;
    &lt;p&gt;The proposal caught my interest. It seemed like a good compromise to make C++ safe, although there were open or unresolved issues, which is completely normal for a draft proposal. For example, how error reporting for the borrow checker and lifetime errors would work, or how generic code and templates would interact with lifetime logic and safe/unsafe qualifiers. These are just some of the points, the proposal is very long and elaborate. Moreover, I am not a programming language designer, so there might be better alternatives.&lt;/p&gt;
    &lt;p&gt;Anyway, today I discovered that the proposal will no longer be pursued. When I thought about the proposal again this morning, I realized I hadn’t read any updates on it for some time. So I searched and found some answers on Reddit.&lt;/p&gt;
    &lt;p&gt;The response from Sean Baxter, one of the original authors of the Safe C++ proposal:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The Safety and Security working group voted to prioririze Profiles over Safe C++. Ask the Profiles people for an update. Safe C++ is not being continued.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;And again:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The Rust safety model is unpopular with the committee. Further work on my end won’t change that. Profiles won the argument. All effort should go into getting Profile’s language for eliminating use-after-free bugs, data races, deadlocks and resource leaks into the Standard, so that developers can benefit from it.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;So I went to read the documents related to Profiles[1][2][3][4]. I try to summarize what I understood: they are meant to define modes of C++ that impose constraints on how you use the language and library, in order to guarantee certain safety properties. They are primarily compile-time constraints, though in practice some checks may be implemented using library facilities that add limited runtime overhead. Instead of introducing entirely new language constructs, profiles mostly restrict existing features and usages. The idea is that you can enable a profile, and any code using it agrees to follow the restrictions. If you don’t enable it, things work as before. So it’s backwards-compatible.&lt;/p&gt;
    &lt;p&gt;Profiles seem less radical and more adoptable, a safer-by-default C++ without forcing the Rust model that aims to tackle the most common C++ pitfalls. I think Safe C++ was more ambitious: introducing new syntax, type qualifiers, safe vs unsafe contexts, etc. Some in the committee felt that was too heavy, and Profiles are seen as a more pragmatic path. The main objection is obvious: one could say that Profiles restrict less than what Safe C++ aimed to provide.&lt;/p&gt;
    &lt;p&gt;Reading comments here and there, there is visible resistance in the community toward adopting the Rust model, and from a certain point of view, I understand it. If you want to write like Rust, just write Rust. Historically, C++ is a language that has often taken features from other worlds and integrated them into itself. In this case, I think that safety subsets of C++ already exist informally somehow. Profiles are an attempt to standardize and unify something that already exists in practice. Technically, they don’t add new fundamental semantics. Instead, they provide constraints, obligations and guarantees.&lt;/p&gt;
    &lt;p&gt;In my opinion, considering the preferences of the committee and the entire C++ community, although I appreciated the Safe C++ proposal and was looking forward to seeing concrete results, considering the C++ context I believe that standardizing and integrating the Profiles as proposed is a much more realistic approach. Profiles might not be perfect, but they are better than nothing. They will likely be uneven in enforcement and weaker than Safe C++ in principle. They won’t give us silver-bullet guarantees, but they are a realistic path forward.&lt;/p&gt;
    &lt;p&gt;[1] Core safety profiles for C++26&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://sibellavia.lol/posts/2025/09/safe-c-proposal-is-not-being-continued/"/></entry><entry><id>https://news.ycombinator.com/item?id=45235293</id><title>AMD’s RDNA4 GPU architecture</title><updated>2025-09-14T05:09:05.792106+00:00</updated><content>&lt;doc fingerprint="72d3f278b06081b4"&gt;
  &lt;main&gt;
    &lt;p&gt;RDNA4 is AMD’s latest graphics-focused architecture, and fills out their RX 9000 line of discrete GPUs. AMD noted that creating a good gaming GPU requires understanding both current workloads, as well as taking into account what workloads might look like five years in the future. Thus AMD has been trying to improve efficiency across rasterization, compute, and raytracing. Machine learning has gained importance including in games, so AMD’s new GPU architecture caters to ML workloads as well.&lt;/p&gt;
    &lt;p&gt;From AMD’s perspective, RDNA4 represents a large efficiency leap in raytracing and machine learning, while also improving on the rasterization front. Improved compression helps keep the graphics architecture fed. Outside of the GPU’s core graphics acceleration responsibility, RDNA4 brings improved media and display capabilities to round out the package.&lt;/p&gt;
    &lt;head rend="h1"&gt;Media Engine&lt;/head&gt;
    &lt;p&gt;The Media Engine provides hardware accelerated video encode and decode for a wide range of codecs. High end RDNA4 parts like the RX 9070XT have two media engines. RDNA4’s media engines feature faster decoding speed, helping save power during video playback by racing to idle. For video encoding, AMD targeted better quality in H.265, H.265, and AV1, especially in low latency encoding.&lt;/p&gt;
    &lt;p&gt;Low latency encoder modes are mostly beneficial for streaming, where delays caused by the media engine ultimately translate to a delayed stream. Reducing latency can make quality optimizations more challenging. Video codecs strive to encode differences between frames to economize storage. Buffering up more frames gives the encoder more opportunities to look for similar content across frames, and lets it allocate more bitrate budget for difficult sequences. But buffering up frames introduces latency. Another challenge is some popular streaming platforms mainly use H.264, an older codec that’s less efficient than AV1. Newer codecs are being tested, so the situation may start to change as the next few decades fly by. But for now, H.264 remains important due to its wide support.&lt;/p&gt;
    &lt;p&gt;Testing with an old gameplay clip from Elder Scrolls Online shows a clear advantage for RDNA4’s media engine when testing with the latency-constrained VBR mode and encoder tuned for low latency encoding (-usage lowlatency -rc vbr_latency). Netflix’s VMAF video quality metric gives higher scores for RDNA4 throughout the bitrate range. Closer inspection generally agrees with the VMAF metric.&lt;/p&gt;
    &lt;p&gt;RDNA4 does a better job preserving high contrast outlines. Differences are especially visible around text, which RDNA4 handles better than its predecessor while using a lower bitrate. Neither result looks great with such a close look, with blurred text on both examples and fine detail crushed in video encoding artifacts. But it’s worth remembering that the latency-constrained VBR mode uses a VBV buffer of up to three frames, while higher latency modes can use VBV buffer sizes covering multiple seconds of video. Encoding speed has improved slightly as well, jumping from ~190 to ~200 FPS from RDNA3.5 to RDNA4.&lt;/p&gt;
    &lt;head rend="h1"&gt;Display Engine&lt;/head&gt;
    &lt;p&gt;The display engine fetches on-screen frame data from memory, composites it into a final image, and drives it to the display outputs. It’s a basic task that most people take for granted, but the display engine is also a good place to perform various image enhancements. A traditional example is using a lookup table to apply color correction. Enhancements at the display engine are invisible to user software, and are typically carried out in hardware with minimal power cost. On RDNA4, AMD added a “Radeon Image Sharpening” filter, letting the display engine sharpen the final image. Using dedicated hardware at the display engine instead of the GPU’s programmable shaders means that the sharpening filter won’t impact performance and can be carried out with better power efficiency. And, AMD doesn’t need to rely on game developers to implement the effect. Sharpening can even apply to the desktop, though I’m not sure why anyone would want that.&lt;/p&gt;
    &lt;p&gt;Power consumption is another important optimization area for display engines. Traditionally that’s been more of a concern for mobile products, where maximizing battery life under low load is a top priority. But RDNA4 has taken aim at multi-monitor idle power with its newer display engine. AMD’s presentation stated that they took advantage of variable refresh rates on FreeSync displays. They didn’t go into more detail, but it’s easy to imagine what AMD might be doing. High resolution and high refresh rate displays translate to high pixel rates. That in turn drives higher memory bandwidth demands. Dynamically lowering refresh rates could let RDNA4’s memory subsystem enter a low power state while still meeting refresh deadlines.&lt;/p&gt;
    &lt;p&gt;I have a RX 9070 hooked up to a Viotek GN24CW 1080P display via HDMI, and a MSI MAG271QX 1440P capable of refresh rates up to 360 Hz. The latter is connected via DisplayPort. The RX 9070 manages to keep memory at idle clocks even at high refresh rate settings. Moving the mouse causes the card to ramp up memory clocks and consume more power, hinting that RDNA4 is lowering refresh rates when screen contents don’t change. Additionally, RDNA4 gets an intermediate GDDR6 power state that lets it handle the 1080P 60 Hz + 1440P 240 Hz combination without going to maximum memory clocks. On RDNA2, it’s more of an all or nothing situation. The older card is more prone to ramping up memory clocks to handle high pixel rates, and power consumption remains high even when screen contents don’t change.&lt;/p&gt;
    &lt;head rend="h1"&gt;Compute Changes&lt;/head&gt;
    &lt;p&gt;RDNA4’s Workgroup Processor retains the same high level layout as prior RDNA generations. However, it gets major improvements targeted towards raytracing, like improved raytracing units and wider BVH nodes, a dynamic register allocation mode, and a scheduler that no longer suffers false memory dependencies between waves. I covered those in previous articles. Besides those improvements, AMD’s presentation went over a couple other details worth discussing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Scalar Floating Point Instructions&lt;/head&gt;
    &lt;p&gt;AMD has a long history of using a scalar unit to offload operations that are constant across a wave. Scalar offload saves power by avoiding redundant computation, and frees up the vector unit to increase performance in compute-bound sequences. RDNA4’s scalar unit gains a few floating point instructions, expanding scalar offload opportunities. This capability debuted on RDNA3.5, but RDNA4 brings it to discrete GPUs.&lt;/p&gt;
    &lt;p&gt;While not discussed in AMD’s presentation, scalar offload can bring additional performance benefits because scalar instructions sometimes have lower latency than their vector counterparts. Most basic vector instructions on RDNA4 have 5 cycle latency. FP32 adds and multiples on the scalar unit have 4 cycle latency. The biggest latency benefits still come from offloading integer operations though.&lt;/p&gt;
    &lt;head rend="h2"&gt;Split Barriers&lt;/head&gt;
    &lt;p&gt;GPUs use barriers to synchronize threads and enforce memory ordering. For example, a s_barrier instruction on older AMD GPUs would cause a thread to wait until all of its peers in the workgroup also reached the s_barrier instruction. Barriers degrade performance because any thread that happened to reach the barrier faster would have to stall until its peers catch up.&lt;/p&gt;
    &lt;p&gt;RDNA4 splits the barrier into separate “signal” and “wait” actions. Instead of s_barrier, RDNA4 has s_barrier_signal and s_barrier_wait. A thread can “signal” the barrier once it produces data that other threads might need. It can then do independent work, and only wait on the barrier once it needs to use data produced by other threads. The s_barrier_wait will then stall the thread until all other threads in the workgroup have signalled the barrier.&lt;/p&gt;
    &lt;head rend="h1"&gt;Memory Subsystem&lt;/head&gt;
    &lt;p&gt;The largest RDNA4 variants have a 8 MB L2 cache, representing a substantial L2 capacity increase compared to prior RDNA generations. RDNA3 and RDNA2 maxed out at 6 MB and 4 MB L2 capacities, respectively. AMD found that difficult workloads like raytracing benefit from the larger L2. Raytracing involves pointer chasing during BVH traversal, and it’s not surprising that it’s more sensitive to accesses getting serviced from the slower Infinity Cache as opposed to L2. In the initial scene in 3DMark’s DXR feature test, run in Explorer Mode, RDNA4 dramatically cuts down the amount of data that has to be fetched from beyond L2.&lt;/p&gt;
    &lt;p&gt;RDNA2 still does a good job of keeping data in L2 in absolute terms. But it’s worth noting that hitting Infinity Cache on both platforms adds more than 50 ns of extra latency over a L2 hit. That’s well north of 100 cycles because both RDNA2 and RDNA4 run above 2 GHz. While AMD’s graphics strategy has shifted towards making the faster caches bigger, it still contrasts with Nvidia’s strategy of putting way more eggs in the L2 basket. Blackwell’s L2 cache serves the functions of both AMD’s L2 and Infinity Cache, and has latency between those two cache levels. Nvidia also has a flexible L1/shared memory allocation scheme that can give them more low latency caching capacity in front of L2, depending on a workload’s requested local storage (shared memory) capacity.&lt;/p&gt;
    &lt;p&gt;A mid-level L1 cache was a familiar fixture on prior RDNA generations. It’s conspicuously missing from RDNA4, as well as AMD’s presentation. One possibility is that L1 cache hitrate wasn’t high enough to justify the complexity of an extra cache level. Perhaps AMD felt its area and transistor budget was better allocated towards increasing L2 capacity. To support this theory, L1 hitrate on RDNA1 was often below 50%. At the same time, the RDNA series always enjoyed a high bandwidth and low latency L2. Putting more pressure on L2 in exchange for reducing L2 misses may have been an enticing tradeoff. Another possibility is that AMD ran into validation issues with the L1 cache and decided to skip it for this generation. There’s no way to verify either possibility of course, but I think the former reasons make more sense.&lt;/p&gt;
    &lt;p&gt;Beyond tweaking the cache hierarchy, RDNA4 brings improvements to transparent compression. AMD emphasized that they’re using compression throughout the SoC, including at points like the display engine and media engine. Compressed data can be stored in caches, and decompressed before being written back to memory. Compression cuts down on data transfer, which reduces bandwidth requirements and improves power efficiency.&lt;/p&gt;
    &lt;p&gt;Transparent compression is not a new feature. It has a long history of being one tool in the GPU toolbox for reducing memory bandwidth usage, and it would be difficult to find any modern GPU without compression features of some sort. Even compression in other blocks like the display engine have precedent. Intel’s display engines for example use Framebuffer Compression (FBC), which can write a compressed copy of frame data and keep fetching the compressed copy to reduce data transfer power usage as long as the data doesn’t change. Prior RDNA generations had compression features too, and AMD’sdocumentation summarizes some compression targets. While AMD didn’t talk about compression efficiency, I tried to take similar frame captures using RGP on both RDNA1 and RDNA4 to see if there’s a large difference in memory access per frame. It didn’t quite work out the way I expected, but I’ll put them here anyway and discuss why evaluating compression efficacy is challenging.&lt;/p&gt;
    &lt;p&gt;The first challenge is that both architectures satisfy most memory requests from L0 or L1. AMD slides on RDNA1 suggest the L0 and L1 only hold decompressed data, at least for delta color compression. Compression does apply to L2. For RDNA4, AMD’s slides indicate it applies to the Infinity Cache too. However, focusing on data transfer to and from the L2 wouldn’t work due the large cache hierarchy differences between those RDNA generations.&lt;/p&gt;
    &lt;p&gt;Another issue is, it’s easy to imagine a compression scheme that doesn’t change the number of cache requests involved. For example, data might be compressed to only take up part of a cacheline. A request only causes a subset of the cacheline to be read out, which a decompressor module expands to the full 128B. Older RDNA1 slides are ambiguous about this, indicating that DCC operates on 256B granularity (two cachelines) without providing further details.&lt;/p&gt;
    &lt;p&gt;In any case, compression may be a contributing factor in RDNA4 being able to achieve better performance while using a smaller Infinity Cache than prior generations, despite only having a 256-bit GDDR6 DRAM setup.&lt;/p&gt;
    &lt;head rend="h1"&gt;SoC Features&lt;/head&gt;
    &lt;p&gt;AMD went over RAS, or reliability, availability, and serviceability features in RDNA4. Modern chips use parity and ECC to detect errors and correct them, and evidently RDNA4 does the same. Unrecoverable errors are handled with driver intervention, by “re-initializing the relevant portion of the SoC, thus preventing the platform from shutting down”. There’s two ways to interpret that statement. One is that the GPU can be re-initialized to recover from hardware errors, obviously affecting any software relying on GPU acceleration. Another is that some parts of the GPU can be re-initialized while the GPU continues handling work. I think the former is more likely, though I can imagine the latter being possible in limited forms too. For example, an unrecoverable error reading from GDDR6 can hypothetically be fixed if that data is backed by a duplicate in system memory. The driver could transfer known-good data from the host to replace the corrupted copy. But errors with modified data would be difficult to recover from, because there might not be an up-to-date copy elsewhere in the system.&lt;/p&gt;
    &lt;p&gt;On the security front, microprocessors get private buses to “critical blocks” and protected register access mechanisms. Security here targets HDCP and other DRM features, which I don’t find particularly amusing. But terminology shown on the slide is interesting, because MP0 and MP1 are also covered in AMD’s CPU-side documentation. On the CPU side, MP0 (microprocessor 0) handles some Secure Encrypted Virtualization (SEV) features. It’s sometimes called the Platform Security Processor (PSP) too. MP1 on CPUs is called the System Management Unit (SMU), which covers power control functions. Curiously AMD’s slide labels MP1 and the SMU separately on RDNA4. MP0/MP1 could have completely different functions on GPUs of course. But the common terminology raises the possibility that there’s a lot of shared work between CPU and GPU SoC design. RAS is also a very traditional CPU feature, though GPUs have picked up RAS features over time as GPU compute picked up steam.&lt;/p&gt;
    &lt;head rend="h2"&gt;Infinity Fabric&lt;/head&gt;
    &lt;p&gt;One of the most obvious examples of shared effort between the CPU and GPU sides is Infinity Fabric making its way to graphics designs. This started years ago with Vega, though back then using Infinity Fabric was more of an implementation detail. But years later, Infinity Fabric components provided an elegant way to implement a large last level cache, or multi-socket coherent systems with gigantic iGPUs (like MI300A).&lt;/p&gt;
    &lt;p&gt;The Infinity Fabric memory-side subsystem on RDNA4 consists of 16 CS (Coherent Station) blocks, each paired with a Unified Memory Controller (UMC). Coherent Stations receive requests coming off the graphics L2 and other clients. They ensure coherent memory access by either getting data from a UMC, or by sending a probe if another block has a more up-to-date copy of the requested cacheline. The CS is a logical place to implement a memory side cache, and each CS instance has 4 MB of cache in RDNA4.&lt;/p&gt;
    &lt;p&gt;To save power, Infinity Fabric supports DVFS (dynamic voltage and frequency scaling) to save power, and clocks between 1.5 and 2.5 GHz. Infinity Fabric bandwidth is 1024 bits per clock, which suggests the Infinity Cache can provide 2.5 TB/s of theoretical bandwidth. That roughly lines up with results from Nemes’s Vulkan-based GPU cache and memory bandwidth microbenchmark.&lt;/p&gt;
    &lt;p&gt;AMD also went over their ability to disable various SoC components to harvest dies and create different SKUs. Shader Engines, WGPs, and memory controller channels can be disabled. AMD and other manufacturers have used similar harvesting capabilities in the past. I’m not sure what’s new here. Likely, AMD wants to re-emphasize their harvesting options.&lt;/p&gt;
    &lt;p&gt;Finally, AMD mentioned that they chose a monolithic design for RDNA4 because it made sense for a graphics engine of its size. They looked at performance goals, package assembly and turnaround time, and cost. After evaluating those factors, they decided a monolithic design was the right option. It’s not a surprise. After all, AMD used monolithic designs for lower end RDNA3 products with smaller graphics engines, and only used chiplets for the largest SKUs. Rather, it’s a reminder that there’s no one size fits all solution. Whether a monolithic or chiplet-based design makes more sense depends heavily on design goals.&lt;/p&gt;
    &lt;head rend="h1"&gt;Final Words&lt;/head&gt;
    &lt;p&gt;RDNA4 brings a lot of exciting improvements to the table, while breaking away from any attempt to tackle the top end performance segment. Rather than going for maximum performance, RDNA4 looks optimized to improve efficiency over prior generations. The RX 9070 offers similar performance to the RX 7900XT in rasterization workloads despite having a lower power budget, less memory bandwidth, and a smaller last level cache. Techspot also shows the RX 9070 leading with raytracing workloads, which aligns with AMD's goal of enhancing raytracing performance.&lt;/p&gt;
    &lt;p&gt;AMD achieves this efficiency using compression, better raytracing structures, and a larger L2 cache. As a result, RDNA4 can pack its performance into a relatively small 356.5 mm² die and use a modest 256-bit GDDR6 memory setup. Display and media engine improvements are welcome too. Multi-monitor idle power feels like a neglected area for discrete GPUs, even though I know many people use multiple monitors for productivity. Lowering idle power in those setups is much appreciated. On the media engine side, AMD’s video encoding capabilities have often lagged behind the competition. RDNA4’s progress at least prevents AMD from falling as far behind as they have before.&lt;/p&gt;
    &lt;p&gt;If you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://chipsandcheese.com/p/amds-rdna4-gpu-architecture-at-hot"/></entry><entry><id>https://news.ycombinator.com/item?id=45235648</id><title>Myocardial infarction may be an infectious disease</title><updated>2025-09-14T05:09:04.426879+00:00</updated><content>&lt;doc fingerprint="6ecc39dea85fc3ca"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Myocardial infarction may be an infectious disease&lt;/head&gt;
    &lt;p&gt;According to the recently published research, an infection may trigger myocardial infarction. Using a range of advanced methodologies, the research found that, in coronary artery disease, atherosclerotic plaques containing cholesterol may harbour a gelatinous, asymptomatic biofilm formed by bacteria over years or even decades. Dormant bacteria within the biofilm remain shielded from both the patient’s immune system and antibiotics because they cannot penetrate the biofilm matrix.&lt;/p&gt;
    &lt;p&gt;A viral infection or another external trigger may activate the biofilm, leading to the proliferation of bacteria and an inflammatory response. The inflammation can cause a rupture in the fibrous cap of the plaque, resulting in thrombus formation and ultimately myocardial infarction.&lt;/p&gt;
    &lt;p&gt;Professor Pekka Karhunen, who led the study, notes that until now, it was assumed that events leading to coronary artery disease were only initiated by oxidised low-density lipoprotein (LDL), which the body recognises as a foreign structure.&lt;/p&gt;
    &lt;p&gt;“Bacterial involvement in coronary artery disease has long been suspected, but direct and convincing evidence has been lacking. Our study demonstrated the presence of genetic material – DNA – from several oral bacteria inside atherosclerotic plaques,” Karhunen explains.&lt;/p&gt;
    &lt;p&gt;The findings were validated by developing an antibody targeted at the discovered bacteria, which unexpectedly revealed biofilm structures in arterial tissue. Bacteria released from the biofilm were observed in cases of myocardial infarction. The body’s immune system had responded to these bacteria, triggering inflammation which ruptured the cholesterol-laden plaque.&lt;/p&gt;
    &lt;p&gt;The observations pave the way for the development of novel diagnostic and therapeutic strategies for myocardial infarction. Furthermore, they advance the possibility of preventing coronary artery disease and myocardial infarction by vaccination.&lt;/p&gt;
    &lt;p&gt;The study was conducted by Tampere and Oulu Universities, Finnish Institute for Health and Welfare and the University of Oxford. Tissue samples were obtained from individuals who had died from sudden cardiac death, as well as from patients with atherosclerosis who were undergoing surgery to cleanse carotid and peripheral arteries.&lt;/p&gt;
    &lt;p&gt;The research is part of an extensive EU-funded cardiovascular research project involving 11 countries. Significant funding was also provided by the Finnish Foundation for Cardiovascular Research and Jane and Aatos Erkko Foundation.&lt;/p&gt;
    &lt;p&gt;The research article Viridans Streptococcal Biofilm Evades Immune Detection and Contributes to Inflammation and Rupture of Atherosclerotic Plaques was published in the Journal of the American Heart Association on 6 August 2025. Read the article online&lt;/p&gt;
    &lt;head rend="h2"&gt;&lt;lb/&gt;Further information&lt;/head&gt;
    &lt;p&gt;Professor Pekka Karhunen&lt;lb/&gt;Faculty of Medicine and Health Technology&lt;lb/&gt;Tampere University&lt;lb/&gt;pekka.j.karhunen [at] tuni.fi (pekka[dot]j[dot]karhunen[at]tuni[dot]fi)&lt;lb/&gt;Tel. +358 400 511361&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.tuni.fi/en/news/myocardial-infarction-may-be-infectious-disease"/></entry><entry><id>https://news.ycombinator.com/item?id=45235676</id><title>Will AI be the basis of many future industrial fortunes, or a net loser?</title><updated>2025-09-14T05:09:04.075227+00:00</updated><content>&lt;doc fingerprint="bb051051dfb505ec"&gt;
  &lt;main&gt;
    &lt;p&gt;Fortunes are made by entrepreneurs and investors when revolutionary technologies enable waves of innovative, investable companies. Think of the railroad, the Bessemer process, electric power, the internal combustion engine, or the microprocessor—each of which, like a stray spark in a fireworks factory, set off decades of follow-on innovations, permeated every part of society, and catapulted a new set of inventors and investors into power, influence, and wealth.&lt;/p&gt;
    &lt;p&gt;Yet some technological innovations, though societally transformative, generate little in the way of new wealth; instead, they reinforce the status quo. Fifteen years before the microprocessor, another revolutionary idea, shipping containerization, arrived at a less propitious time, when technological advancement was a Red Queen’s race, and inventors and investors were left no better off for non-stop running.&lt;/p&gt;
    &lt;p&gt;Anyone who invests in the new new thing must answer two questions: First, how much value will this innovation create? And second, who will capture it? Information and communication technology (ICT) was a revolution whose value was captured by startups and led to thousands of newly rich founders, employees, and investors. In contrast, shipping containerization was a revolution whose value was spread so thin that in the end, it made only a single founder temporarily rich and only a single investor a little bit richer.&lt;/p&gt;
    &lt;p&gt;Is generative AI more like the former or the latter? Will it be the basis of many future industrial fortunes, or a net loser for the investment community as a whole, with a few zero-sum winners here and there?&lt;/p&gt;
    &lt;p&gt;There are ways to make money investing in the fruits of AI, but they will depend on assuming the latter—that it is once again a less propitious time for inventors and investors, that AI model builders and application companies will eventually compete each other into an oligopoly, and that the gains from AI will accrue not to its builders but to customers. A lot of the money pouring into AI is therefore being invested in the wrong places, and aside from a couple of lucky early investors, those who make money will be the ones with the foresight to get out early.&lt;/p&gt;
    &lt;p&gt;The microprocessor was revolutionary, but the people who invented it at Intel in 1971 did not see it that way—they just wanted to avoid designing desktop calculator chipsets from scratch every time. But outsiders realized they could use the microprocessor to build their own personal computers, and enthusiasts did. Thousands of tinkerers found configurations and uses that Intel never dreamed of. This distributed and permissionless invention kicked off a “great surge of development,” as the economist Carlota Perez calls it, triggered by technology but driven by economic and societal forces.[1]&lt;/p&gt;
    &lt;p&gt;There was no real demand for personal computers in the early 1970s; they were expensive toys. But the experimenters laid the technical groundwork and built a community. Then, around 1975, a step-change in the cost of microprocessors made the personal computer market viable. The Intel 8080 had an initial list price of $360 ($2,300 in today’s dollars). MITS could barely turn a profit on its Altair at a bulk price of $75 each ($490 today). But when MOS Technologies started selling its 6502 for $25 ($150 today), Steve Wozniak could afford to build a prototype Apple. The 6502 and the similarly priced Zilog Z80 forced Intel’s prices down. The nascent PC community started spawning entrepreneurs and a score of companies appeared, each with a slightly different product.&lt;/p&gt;
    &lt;p&gt;You couldn’t have known in the mid-1970s that the PC (and PC-like products, such as ATMs, POS terminals, smartphones, etc.) would revolutionize everything. While Steve Jobs was telling investors that every household would someday have a personal computer (a wild underestimate, as it turned out), others questioned the need for personal computers at all. As late as 1979, Apple’s ads didn’t tell you what a personal computer could do—it asked what you did with it.[2] The established computer manufacturers (IBM, HP, DEC) had no interest in a product their customers weren’t asking for. Nobody “needed” a computer, and so PCs weren’t bought—they were sold. Flashy startups like Apple and Sinclair used hype to get noticed, while companies with footholds in consumer electronics like Atari, Commodore, and Tandy/RadioShack used strong retail connections to put their PCs in front of potential customers.&lt;/p&gt;
    &lt;p&gt;The market grew slowly at first, accelerating only as experiments led to practical applications like the spreadsheet, introduced in 1979. As use grew, observation of use caused a reduction in uncertainty, leading to more adoption in a self-reinforcing cycle. This kind of gathering momentum takes time in every technological wave: It took almost 30 years for electricity to reach half of American households, for example, and it took about the same amount of time for personal computers.[3] When a technological revolution changes everything, it takes a huge amount of innovation, investment, storytelling, time, and plain old work. It also sucks up all the money and talent available. Like Kuhn’s paradigms in science, any technology not part of the wave’s techno-economic paradigm will seem like a sideshow.[4]&lt;/p&gt;
    &lt;p&gt;Source: [3]&lt;/p&gt;
    &lt;p&gt;The nascent growth of PCs attracted investors—venture capitalists—who started making risky bets on new companies. This development incentivized more inventors, entrepreneurs, and researchers, which in turn drew in more speculative capital.&lt;/p&gt;
    &lt;p&gt;Companies like IBM, the computing behemoth before the PC, saw poor relative performance. They didn’t believe the PC could survive long enough to become capable in their market and didn’t care about new, small markets that wanted a cheaper solution.&lt;/p&gt;
    &lt;p&gt;Retroactively, we give the PC pioneers the powers of prophets rather than visionaries. But at the time, nobody outside of a small group of early adopters paid any attention. Establishment media like The New York Times didn’t take the PC seriously until after IBM’s was introduced in August 1981. In the entire year of 1976, when Apple Computer was founded, the NYT mentioned PCs only four times.[5] Apparently, only the crazy ones, the misfits, the rebels, and the troublemakers were paying attention.&lt;/p&gt;
    &lt;p&gt;Source: [5]&lt;/p&gt;
    &lt;p&gt;It’s the element of surprise that should strike us most forcefully when we compare the early days of the computer revolution to today. No one took note of personal computers in the 1970s. In 2025, AI is all we seem to talk about.&lt;/p&gt;
    &lt;p&gt;Big companies hate surprises. That’s why uncertainty makes a perfect moat for startups. Apple would never have survived IBM entering the market in 1979, and only lived to compete another day after raising $100 million in its 1980 IPO. It was the only remaining competitor after the IBM-induced winnowing.[6]&lt;/p&gt;
    &lt;p&gt;Source: [6]&lt;/p&gt;
    &lt;p&gt;As the tech took hold and started to show promise, innovations in software, memory, and peripherals like floppy disk drives and modems joined it. They reinforced one another, with each advance putting pressure on the technologies adjacent to it. When any part of the system held back the other parts, investors rushed to fund that sector. As increases in PC memory allowed more complicated software, for example, there became a need for more external storage, which caused VC Dave Marquardt to invest in disk drive manufacturer Seagate in 1980. Seagate gave Marquardt a 40x return when it went public in 1981. Other investors noticed, and some $270 million was plowed into the industry in the following three years.[7]&lt;/p&gt;
    &lt;p&gt;Money also poured into the underlying infrastructure—fiber optic networks, chip making, etc.—so that capacity was never a bottleneck. Companies which used the new technological system to outperform incumbents began to take market share, and even staid competitors realized they needed to adopt the new thing or die. The hype became a froth which became an investment bubble: the dot-com frenzy of the late 1990s. The ICT wave was therefore similar to previous ones—like the investment mania of the 1830s and the Roaring ‘20s, which followed the infrastructure buildout of canals and railways, respectively—in which the human response to each stage predictably generated the next.&lt;/p&gt;
    &lt;p&gt;When the dot-com bubble popped, society found it disapproved of the excesses in the sector and governments found they had the popular support to reassert authority over the tech companies and their investors. This put a brake on the madness. Instead of the reckless innovation of the bubble, companies started to expand into proven markets, and financiers moved from speculating to investing. Entrepreneurs began to focus on finding applications rather than on innovating the underlying technologies. Technological improvements continued, but change became more evolutionary than revolutionary.&lt;/p&gt;
    &lt;p&gt;As change slowed, companies gained the confidence to invest for the longer term. They began to combine various parts of the system in new ways to create value for a wider group of users. The massive overbuilding of fiber optic telecom networks and other infrastructure during the frenzy left plenty of cheap capacity, keeping the costs of expansion down. It was a great time to be a businessperson and investor.&lt;/p&gt;
    &lt;p&gt;In contrast, society did not need a bubble to pop to start excoriating AI. Given that the backlash to tech has been going on for a decade, this seems normal to us. But the AI backlash differs from the general high regard, earlier in the cycle, enjoyed by the likes of Bill Gates, Steve Jobs, Jeff Bezos, and others who built big tech businesses. The world hates change, and only gave tech a pass in the ‘80s and ‘90s because it all still seemed reversible: it could be made to go away if it turned out badly. This gave the early computer innovators some leeway to experiment. Now that everyone knows computers are here to stay, AI is not allowed the same wait-and-see attitude. It is seen as part of the ICT revolution.&lt;/p&gt;
    &lt;p&gt;Perez, the economist, breaks each technological wave into four predictable phases: irruption, frenzy, synergy, and maturity. Each has a characteristic investment profile.&lt;/p&gt;
    &lt;p&gt;The middle two, frenzy and synergy, are the easy ones for investors. Frenzy is when everyone piles in and investors are rewarded for taking big risks on unproven ideas, culminating in the bubble, when paper profits disappear. When rationality returns, the synergy phase begins, as companies make their products usable and productive for a wide array of users. Synergy pays those who are patient, picky, and can bring more than just money to the table.&lt;/p&gt;
    &lt;p&gt;Irruption and maturity are more difficult to invest in.&lt;/p&gt;
    &lt;p&gt;Investing in the 1970s was harder than it might look in hindsight. To invest from 1971 through 1975, you had to be either a true believer or a conglomerator with a knuckle-headed diversification strategy. Intel was a great investment, though it looked at first like a previous-wave electronics company. MOS Technologies was founded in 1969 to compete with Texas Instruments but sold a majority of itself to Allen-Bradley to stay afloat. Zilog was funded in 1975 by Exxon (Exxon!). Apple was a great investment, but it had none of the hallmarks of what VCs look for, as the PC was still a solution in search of a problem.&lt;/p&gt;
    &lt;p&gt;It was later irruption, in the early 1980s, when great opportunities proliferated: PC makers (Compaq, Dell), software and operating systems (Microsoft, Electronic Arts, Adobe), peripherals (Seagate), workstations (Sun), and computer stores (Businessland), among others. If you invested in the winners, you did well. But there was still more money than ideas, which meant that it was no golden age for investing. By 1983, there were more than 70 companies competing in the disk drive sector alone, and valuations collapsed. There were plenty of people whose fortunes were established in the 1970s and 1980s, and many VCs made their names in that era. But the biggest advantage to being an irruption-stage investor was building institutional knowledge to invest early and well in the frenzy and synergy phases.&lt;/p&gt;
    &lt;p&gt;Investing in the maturity phase is even more difficult. In irruption, it’s hard to see what will happen; in maturity, nothing much happens at all. The uncertainty about what will work and how customers and society will react is almost gone. Things are predictable, and everyone acts predictably.&lt;/p&gt;
    &lt;p&gt;The lack of dynamism allows the successful synergy companies to remain entrenched (see: the Nifty 50 and FAANG), but growth becomes harder. They start to enter each other’s markets, conglomerate, raise prices, and cut costs. The era of products priced to entice new customers ends, and quality suffers. The big companies continue to embrace the idea of revolutionary innovation, but feel the need to control how their advances are used. R&amp;amp;D spending is redirected from product and process innovation toward increasingly fruitless attempts to find ways to extend the current paradigm. Companies frame this as a drive to win, but it’s really a fear of losing.&lt;/p&gt;
    &lt;p&gt;Innovation can happen during maturity, sometimes spectacularly. But because these innovations only find support if they fit into the current wave’s paradigm, they are easily captured in the dominant companies’ gravity wells. This means making money as an entrepreneur or investor in them is almost impossible. Generative AI is clearly being captured by the dominant ICT companies, which raises the question of whether this time will be different for inventors and investors—a different question from whether AI itself is a revolutionary technology.&lt;/p&gt;
    &lt;p&gt;Shipping containerization was a late-wave innovation that changed the world, kicked off our modern era of globalization, resulted in profound changes to society and the economy, and contributed to rapid growth in well-being. But there were, perhaps, only one or two people who made real money investing in it.&lt;/p&gt;
    &lt;p&gt;The year 1956 was late in the previous wave. But that year, the company soon to be known as SeaLand revolutionized freight shipping with the launch of the first containership, the Ideal-X. SeaLand’s founder, Malcom McLean, had an epiphany that the job to be done by truckers, railroads, and shipping lines was to move goods from shipper to destination, not to drive trucks, fill boxcars, or lade boats. SeaLand allowed freight to transfer seamlessly from one mode to another, saving time, making shipping more predictable, and cutting costs—both the costs of loading, unloading, and reloading, and the cost of a ship sitting idly in port as it was loaded and unloaded.[8]&lt;/p&gt;
    &lt;p&gt;The benefits of containerization, if it could be made to happen, were obvious. Everybody could see the efficiencies, and customers don’t care how something gets to where they can buy it, as long as it does. But longshoremen would lose work, politicians would lose the votes of those who lost work, port authorities would lose the support of the politicians, federal regulators would be blamed for adverse consequences, railroads might lose freight to shipping lines, shipping lines might lose freight to new shipping lines, and it would all cost a mint. Most thought McLean would never be able to make it work.&lt;/p&gt;
    &lt;p&gt;McLean squeezed through the cracks of the opposition he faced. He bought and retrofitted war surplus ships, lowering costs. He went after the coastal shipping trade, a dying business in the age of the new interstates, to avoid competition. He set up shop in Newark, NJ, rather than the shipping hub of Hell’s Kitchen, to get buy-in from the port authority and avoid Manhattan congestion. And he made a deal with the New York longshoremen’s union, which was only possible because he was a small player whom they figured was not a threat.&lt;/p&gt;
    &lt;p&gt;Source: [10]&lt;/p&gt;
    &lt;p&gt;But competitors and regulators moved too quickly for McLean to seize the few barriers to entry that might have been available to him: domination of the ports, exclusive agreements with shippers or other forms of transportation, standardization on proprietary technology, etc.[9] When it started to look like it might work, around 1965, the obvious advantages of containerization meant that every large shipping line entered the business, and competition took off. Even though containerized freight was less than 1% of total trade by 1968, the number of containerships was already ramping fast.[10] Capacity outstripped demand for years.&lt;/p&gt;
    &lt;p&gt;The increase in competition led to a rate war, which led to squeezed profits, which in turn led to consolidation and cartels. Meanwhile, the cost of building ever-larger container ships and the port facilities to deal with them meant the business became hugely capital intensive. McLean saw the writing on the wall and sold SeaLand to R.J. Reynolds in January 1969. He was, perhaps, the only entrepreneur to get out unscathed.&lt;/p&gt;
    &lt;p&gt;It took a long time for the end-to-end vision to be realized. But around 1980, a dramatic drop began in the cost of sea freight.[11] This contributed to a boom in international trade[12] and allowed manufacturers to move away from higher-wage to lower-wage countries, making containerization irreversible.&lt;/p&gt;
    &lt;p&gt;Source: [11]&lt;/p&gt;
    &lt;p&gt;Some people did make money, of course; someone always does. McLean did, as did shipping magnate Daniel Ludwig, who had invested $8.5 million in SeaLand’s predecessor, McLean Industries, at $8.50 per share in 1965 and sold in 1969 for $50 per share.[13] Shipbuilders made money, too: between 1967 and 1972, some $10 billion ($80 billion in 2025 dollars) was spent building containerships. The contractors that built the new container ports also made money. And, later, shipping lines that consolidated and dominated the business, like Maersk and Evergreen, became very large. But, “for R.J. Reynolds, and for other companies that had chased fast growth by buying into container shipping in the late 1960s, their investments brought little but disappointment.”[14] Aside from McLean and Ludwig, it is hard to find anyone who became rich from containerization itself, because competition and capex costs made it hard to grow fast or achieve high margins.&lt;/p&gt;
    &lt;p&gt;Source: [12]&lt;/p&gt;
    &lt;p&gt;The business ended up being dominated primarily by the previous incumbents, and the margins went to the companies shipping goods, not the ones they shipped through. Companies like IKEA benefited from cheap shipping, going from a provincial Scandinavian company in 1972 to the world’s largest furniture retailer by 2008; container shipping was a perfect fit for IKEA’s flat-pack furniture. Others, like Walmart, used the predictability enabled by containerization to lower inventory and its associated costs.&lt;/p&gt;
    &lt;p&gt;With hindsight, it’s easy to see how you could have invested in containerization: not in the container shipping industry itself, but in the industries that benefited from containerization. But even here, the success of companies like Walmart, Costco, and Target was coupled with the failure of others. The fallout from containerization set Sears and Woolworth on downward spirals, put the final nail in the coffin of Montgomery Ward and A&amp;amp;P, and drove Macy’s into bankruptcy before it was rescued and downsized by Federated. Meanwhile, in North Carolina, “the furniture capital of the world,” furniture makers tried to compete with IKEA by importing cheap pieces from China. They ended up being replaced by their suppliers.[15]&lt;/p&gt;
    &lt;p&gt;If there had been more time to build moats, there might have been a few dominant containerization companies, and the people behind them would be at the top of the Forbes 400, while their investors would be legendary. But moats take time to build and, unlike the personal computer, the adoption of containerization wasn’t a surprise—every business with interests at stake had a strategic plan immediately.&lt;/p&gt;
    &lt;p&gt;The economist Joseph Schumpeter said “perfect competition is and always has been temporarily suspended whenever anything new is being introduced.”[16] But containerization shows this isn’t true at the end of tech waves. And because there is no economic profit during perfect competition, there is no money to be made by innovators during maturity. Like containerization, the introduction of AI did not lead to a period of protected profits for its innovators. It led to an immediate competitive free-for-all.&lt;/p&gt;
    &lt;p&gt;Let’s grant that generative AI is revolutionary (but also that, as is becoming increasingly clear, this particular tech is now already in an evolutionary stage). It will create a lot of value for the economy, and investors hope to capture some of it. When, who, and how depends on whether AI is the end of the ICT wave, or the beginning of a new one.&lt;/p&gt;
    &lt;p&gt;If AI had started a new wave, there would have been an extended period of uncertainty and experimentation. There would have been a population of early adopters experimenting with their own models. When thousands or millions of tinkerers use the tech to solve problems in entirely new ways, its uses proliferate. But because they are using models owned by the big AI companies, their ability to fully experiment is limited to what’s allowed by the incumbents, who have no desire to permit an extended challenge to the status quo.&lt;/p&gt;
    &lt;p&gt;This doesn’t mean AI can’t start the next technological revolution. It might, if experimentation becomes cheap, distributed and permissionless—like Wozniak cobbling together computers in his garage, Ford building his first internal combustion engine in his kitchen, or Trevithick building his high-pressure steam engine as soon as James Watt’s patents expired. When any would-be innovator can build and train an LLM on their laptop and put it to use in any way their imagination dictates, it might be the seed of the next big set of changes—something revolutionary rather than evolutionary. But until and unless that happens, there can be no irruption.&lt;/p&gt;
    &lt;p&gt;AI is instead the epitome of the ICT wave. The computing visionaries of the 1960s set out to build a machine that could think, which their successors eventually did, by extending gains in algorithms, chips, data, and data center infrastructure. Like containerization, AI is an extension of something that came before, and therefore no one is surprised by what it can and will do. In the 1970s, it took time for people to wrap their heads around the desirability of powerful and ubiquitous computing. But in 2025, machines that think better than previous machines are easy for people to understand.&lt;/p&gt;
    &lt;p&gt;Consider the extent to which the progress of AI rhymes with the business evolution of containerization:&lt;/p&gt;
    &lt;p&gt;In the “AI rhymes” column, the first four items are already underway. How you should invest depends on whether you believe Nos. 5–7 are next.&lt;/p&gt;
    &lt;p&gt;Economists are predicting that AI will increase global GDP somewhere between 1%[17] to more than 7%[18] over the next decade, which is $1–7 trillion of new value created. The big question is where that money will stick as it flows through the value chain.&lt;/p&gt;
    &lt;p&gt;Most AI market overviews have a score or more categories, breaking each of them into customer and industry served. But these will change dramatically over the next few years. You could, instead, just follow the money to simplify the taxonomy of companies:&lt;/p&gt;
    &lt;p&gt;What the history of containerization suggests is that, if you aren’t already an investor in a model company, you shouldn’t bother. Sam Altman and a few other early movers may make a fortune, as McLean and Ludwig did. But the huge costs of building and running a model, coupled with intense competition, means there will, in the end, be only a few companies, each funded and owned by the largest tech companies. If you’re already an investor, congratulations: There will be consolidation, so you might get an exit.&lt;/p&gt;
    &lt;p&gt;Domain-specific models—like Cursor or Harvey—will be part of the consolidation. These are probably the most valuable models. But fine-tuning is relatively cheap, and there are big economies of scope. On the other hand, just as Google had to buy Invite Media in 2010 to figure out how to sell to ad agencies, domain-specific model companies that have earned the trust of their customers will be prime acquisition targets. And although it seems possible that models which generate things other than language—like Midjourney or Runway—might use their somewhat different architecture to carve out a separate technological path, the LLM companies have easily entered this space as well. Whether this applies to companies like Osmo remains to be seen.&lt;/p&gt;
    &lt;p&gt;While it’s too late to invest in the model companies, the profusion of those using the models to solve specific problems is ongoing: Perplexity, InflectionAI, Writer, Abridge, and a hundred others. But if any of these become very valuable, the model companies will take their earnings, either through discriminatory pricing or vertical integration. Success, in other words, will mean defeat—always a bad thesis. At some point, model companies and app companies will converge: There will simply be AI companies, and only a few of them. There will be some winners, as always, but investments in the app layer as a whole will lose money.&lt;/p&gt;
    &lt;p&gt;The same caveat applies, however: If an app company can build a customer base or an amazing team, it might be acquired. But these companies aren’t really technology companies at all; they are building a market on spec and have to be priced as such. A further caveat is that there will be investors who make a killing arbitraging FOMO-panicked acquirors willing to massively overpay. But this is not really “investing.”&lt;/p&gt;
    &lt;p&gt;There might be an investment opportunity in companies that manage the interface between the AI giants and their customers, or protect company data from the model companies—like Hugging Face or Glean—because these businesses are by nature independent of the models. But no analogue in the post-containerization shipping market became very large. Even the successful intermediation companies in the AI space will likely end up mid-sized because the model companies will not allow them to gain strategic leverage—another consequence of the absence of surprise.&lt;/p&gt;
    &lt;p&gt;When an industry is going to be big but there is uncertainty about how it will play out, it often makes sense to swim upstream to the industry’s suppliers. In the case of AI, this means the chip providers, data companies, and cloud/data center companies: SambaNova, Scale AI, and Lambda, as well as those that have been around for a long time, like Nvidia and Bloomberg.&lt;/p&gt;
    &lt;p&gt;The case for data is mixed. General data—i.e., things most people know, including everything anyone knew more than, say, 10 years ago, and most of what was learned after that—is a commodity. There may be room for a few companies to do the grunt work of collating and tagging it, but since the collating and tagging might best be done by AI itself, there will not be a lot of pricing leverage. Domain-specific models will need specialist data, and other models will try to answer questions about the current moment. Specific, timely, and hard to reproduce data will be valuable. This is not a new market, of course—Bloomberg and others have done well by it. A more concentrated customer base will lower prices for this data, while wider use will raise revenues. On balance, this will probably be a plus for the industry, though not a huge one. There will be new companies built, but only a couple worth investing in.&lt;/p&gt;
    &lt;p&gt;The high capex of AI companies will primarily be spent with the infrastructure companies. These companies are already valued with this expectation, so there won’t be an upside surprise. But consider that shipbuilding benefited from containerization from 1965 until demand collapsed after about 1973.[19] If AI companies consolidate or otherwise act in concert, even a slight downturn that forces them to conserve cash could turn into a serious, sudden, and long-lasting decline in infrastructure spending. This would leave companies like Nvidia and its emerging competitors—who must all make long-term commitments to suppliers and for capacity expansion—unable to lower costs to match the new, smaller market size. Companies priced for an s-curve are overpriced if there’s a peak and decline.&lt;/p&gt;
    &lt;p&gt;Source: [19]&lt;/p&gt;
    &lt;p&gt;All of which means that investors shouldn’t swim upstream, but fish downstream: companies whose products rely on achieving high-quality results from somewhat ambiguous information will see increased productivity and higher profits. These sectors include professional services, healthcare, education, financial services, and creative services, which together account for between a third and a half of global GDP and have not seen much increased productivity from automation. AI can help lower costs, but as with containerization, how individual businesses incorporate lower costs into their strategies—and what they decide to do with the savings—will determine success. To put it bluntly, using cost savings to increase profits rather than grow revenue is a loser’s game.&lt;/p&gt;
    &lt;p&gt;The companies that will benefit most rapidly are those whose strategies are already conditional on lowering costs. IKEA’s longtime strategy was to sell quality furniture for low prices and make it up on volume. After containerization made it possible for them to go worldwide, IKEA became the world’s largest retailer and Ingvar Kamprad (the IK of IKEA) became a billionaire. Similarly, Walmart, whose strategy was high volume and low prices in underserved markets, benefited from both cost savings and just-in-time supply chains, allowing increased product variety and lower inventory costs.&lt;/p&gt;
    &lt;p&gt;Today’s knowledge-work companies that already prioritize the same values are the least risky way to bet on AI, but new companies will form or re-form with a high-volume, low-cost strategy, just as Costco did in the early 1980s. New companies will compete with the incumbents, but with a clean slate and hindsight. Regardless, there are few barriers to entry, so each of these firms will face stiff competition and operate in fragmented markets. Experienced management and flawless execution will be key.&lt;/p&gt;
    &lt;p&gt;Being an entrepreneur will be a fabulous proposition in these sectors. Being an investor will be harder. Companies will not need much private capital—IKEA never needed to raise risk capital, and Costco raised only one round in 1983 before going public in 1985—because implementing cost-savings technology is not capital intensive. As with containerization, there will be a long lag between technology trigger and the best investments. The opportunities will be later.&lt;/p&gt;
    &lt;p&gt;Stock pickers will also make money, but they need to be choosy. At the high end of projections, an additional 7% in GDP growth over ten years within one third of the economy gives a tailwind of only about 2% per year to these companies—even less if productivity growth from older ICT products abates. The primary value shift will be to companies that are embracing the strategic implications of AI from companies that are not, the way Walmart benefited from Sears, which took advantage of cheaper goods prices but did not reinvent itself.&lt;/p&gt;
    &lt;p&gt;Consumers, however, will be the biggest beneficiaries. Previous waves of mechanization benefited labor productivity in manufacturing, driving prices down and saving consumers money. But increased labor productivity in manufacturing also led to higher manufacturing wages. Wages in services businesses had to rise to compete, even though these businesses did not benefit from productivity gains. This caused the price of services to rise.[20] The share of household spending on food and clothing went from 55% in 1918 to 16% in 2023,[21] but the cost of knowledge-intensive services like healthcare and education have grown well above inflation.&lt;/p&gt;
    &lt;p&gt;Something similar will happen with AI: Knowledge-intensive services will get cheaper, allowing consumers to buy more of them, while services that require person-to-person interaction will get more expensive, taking up a greater percentage of household spending. This points to obvious opportunities in both. But the big news is that most of the new value created by AI will be captured by consumers, who should see a wider variety of knowledge-intensive goods at reasonable prices, and wider and more affordable access to services like medical care, education, and advice.&lt;/p&gt;
    &lt;p&gt;There is nothing better than the beginning of a new wave, when the opportunities to envision, invent, and build world-changing companies leads to money, fame, and glory. But there is nothing more dangerous for investors and entrepreneurs than wishful thinking. The lessons learned from investing in tech over the last 50 years are not the right ones to apply now. The way to invest in AI is to think through the implications of knowledge workers becoming more efficient, to imagine what markets this efficiency unlocks, and to invest in those. For decades, the way to make money was to bet on what the new thing was. Now, you have to bet on the opportunities it opens up.&lt;/p&gt;
    &lt;p&gt;Jerry Neumann is a retired venture investor, writing and teaching about innovation.&lt;/p&gt;
    &lt;p&gt;Chart: Jovanovic, B., &amp;amp; Rousseau, P., “General purpose technologies. Handbook of Economic Growth”, 1(05), p. 1194. [Online] Available: https://doi.org/10.1016/S1574-0684(05)01018-X&lt;/p&gt;
    &lt;p&gt;Certain sectors, like medical technology and pharma, are funded regardless of the dominant tech because they are too fundamental to ever be a sideshow.&lt;/p&gt;
    &lt;p&gt;Source: Author search of The New York Times archives for "microcomputer", "personal computer", and "home computer", no ads, no classified ads, no table of contents.&lt;/p&gt;
    &lt;p&gt;Chart: data from Dediu, H., “The Next 40”, Asymco, March 2016. [Online] Available: https://www.asymco.com/2016/03/28/the-next-40/&lt;/p&gt;
    &lt;p&gt;Sahlman, W.A. and H.H. Stevenson. “Capital market myopia.” Journal of Business Venturing, 1985, 7-30.&lt;/p&gt;
    &lt;p&gt;This section draws very heavily from Marc Levinson’s The Box (Princeton University Press, 2006), both essential and a great read.&lt;/p&gt;
    &lt;p&gt;The United States Maritime Administration began a process to standardize containers as early as 1958, just two years after the initial voyage of the Ideal-X.&lt;/p&gt;
    &lt;p&gt;McKinsey, “Brave New World: Container transport in 2043” [Online] Available: https://www.mckinsey.com/~/media/mckinsey/industries/travel-logistics-and-infrastructure/our-insights/brave-new-world-container-transport-in-2043/brave-new-world-container-transport-in-2043.pdf, 2018; chart: Levinson, p. 221.&lt;/p&gt;
    &lt;p&gt;Chart data: OECD Economic Outlook, Volume 2007/1 No. 81, June. [Online] Available: http://dx.doi.org/10.1787/032883306727&lt;/p&gt;
    &lt;p&gt;Chart data: Michel Fouquin &amp;amp; Jules Hugot , 2016. "Two Centuries of Bilateral Trade and Gravity Data: 1827-2014," CEPII Working Paper 2016-14 , May 2016, CEPII. https://www.cepii.fr/pdf_pub/wp/2016/wp2016-14.pdf. Processed by Our World in Data&lt;/p&gt;
    &lt;p&gt;McLean couldn’t resist re-entering the shipping business, buying another shipping line, USL, in 1978. He had driven USL into bankruptcy by 1986 and declared personal bankruptcy soon after.&lt;/p&gt;
    &lt;p&gt;Mullin, John, The Rise and Sudden Decline of North Carolina Furniture Making, Federal Reserve Bank of Richmond, Econ Focus, Fourth Quarter 2020. [Online] Available: https://www.richmondfed.org/publications/research/econ_focus/2020/q4/economic_history&lt;/p&gt;
    &lt;p&gt;Acemoglu, Daron, “The Simple Macroeconomics of AI”, 2024. [Online] Available: https://economics.mit.edu/sites/default/files/2024-04/The%20Simple%20Macroeconomics%20of%20AI.pdf&lt;/p&gt;
    &lt;p&gt;Goldman Sachs, “Generative AI could raise global GDP by 7%”, April 5, 2023. [Online] Available: https://www.goldmansachs.com/insights/articles/generative-ai-could-raise-global-gdp-by-7-percent&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://joincolossus.com/article/ai-will-not-make-you-rich/"/></entry><entry><id>https://news.ycombinator.com/item?id=45236079</id><title>Pass: Unix Password Manager</title><updated>2025-09-14T05:09:03.634703+00:00</updated><content>&lt;doc fingerprint="3210e9094b301af0"&gt;
  &lt;main&gt;&lt;head rend="h2"&gt;Introducing &lt;code&gt;pass&lt;/code&gt;&lt;/head&gt;&lt;p&gt;Password management should be simple and follow Unix philosophy. With &lt;code&gt;pass&lt;/code&gt;, each password lives inside of a &lt;code&gt;gpg&lt;/code&gt; encrypted file whose filename is the title of the website or resource that requires the password. These encrypted files may be organized into meaningful folder hierarchies, copied from computer to computer, and, in general, manipulated using standard command line file management utilities.&lt;/p&gt;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; makes managing these individual password files extremely easy. All passwords live in &lt;code&gt;~/.password-store&lt;/code&gt;, and &lt;code&gt;pass&lt;/code&gt; provides some nice commands for adding, editing, generating, and retrieving passwords. It is a very short and simple shell script. It's capable of temporarily putting passwords on your clipboard and tracking password changes using &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;You can edit the password store using ordinary unix shell commands alongside the &lt;code&gt;pass&lt;/code&gt; command. There are no funky file formats or new paradigms to learn. There is bash completion so that you can simply hit tab to fill in names and commands, as well as completion for zsh and fish available in the completion folder. The very active community has produced many impressive clients and GUIs for other platforms as well as extensions for &lt;code&gt;pass&lt;/code&gt; itself.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;pass&lt;/code&gt; command is extensively documented in its man page.&lt;/p&gt;&lt;head rend="h3"&gt;Using the password store&lt;/head&gt;&lt;p&gt;We can list all the existing passwords in the store:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass
Password Store
âââ Business
â   âââ some-silly-business-site.com
â   âââ another-business-site.net
âââ Email
â   âââ donenfeld.com
â   âââ zx2c4.com
âââ France
    âââ bank
    âââ freebox
    âââ mobilephone
&lt;/code&gt;&lt;p&gt;And we can show passwords too:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass Email/zx2c4.com
sup3rh4x3rizmynam3
&lt;/code&gt;&lt;p&gt;Or copy them to the clipboard:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass -c Email/zx2c4.com
Copied Email/jason@zx2c4.com to clipboard. Will clear in 45 seconds.
&lt;/code&gt;&lt;p&gt;There will be a nice password input dialog using the standard &lt;code&gt;gpg-agent&lt;/code&gt; (which can be configured to stay authenticated for several minutes), since all passwords are encrypted.&lt;/p&gt;&lt;p&gt;We can add existing passwords to the store with &lt;code&gt;insert&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass insert Business/cheese-whiz-factory
Enter password for Business/cheese-whiz-factory: omg so much cheese what am i gonna do
&lt;/code&gt;&lt;p&gt;This also handles multiline passwords or other data with &lt;code&gt;--multiline&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt;, and passwords can be edited in your default text editor using &lt;code&gt;pass edit pass-name&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The utility can &lt;code&gt;generate&lt;/code&gt; new passwords using &lt;code&gt;/dev/urandom&lt;/code&gt; internally:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass generate Email/jasondonenfeld.com 15
The generated password to Email/jasondonenfeld.com is:
$(-QF&amp;amp;Q=IN2nFBx
&lt;/code&gt;&lt;p&gt;It's possible to generate passwords with no symbols using &lt;code&gt;--no-symbols&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt;, and we can copy it to the clipboard instead of displaying it at the console using &lt;code&gt;--clip&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;And of course, passwords can be removed:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass rm Business/cheese-whiz-factory
rm: remove regular file â/home/zx2c4/.password-store/Business/cheese-whiz-factory.gpgâ? y
removed â/home/zx2c4/.password-store/Business/cheese-whiz-factory.gpgâ
&lt;/code&gt;&lt;p&gt;If the password store is a git repository, since each manipulation creates a git commit, you can synchronize the password store using &lt;code&gt;pass git push&lt;/code&gt; and &lt;code&gt;pass git pull&lt;/code&gt;, which call &lt;code&gt;git-push&lt;/code&gt; or &lt;code&gt;git-pull&lt;/code&gt; on the store.&lt;/p&gt;&lt;p&gt;You can read more examples and more features in the man page.&lt;/p&gt;&lt;head rend="h3"&gt;Setting it up&lt;/head&gt;&lt;p&gt;To begin, there is a single command to initialize the password store:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass init "ZX2C4 Password Storage Key"
mkdir: created directory â/home/zx2c4/.password-storeâ
Password store initialized for ZX2C4 Password Storage Key.
&lt;/code&gt;&lt;p&gt;Here, &lt;code&gt;ZX2C4 Password Storage Key&lt;/code&gt; is the ID of my GPG key. You can use your standard GPG key or use an alternative one especially for the password store as shown above. Multiple GPG keys can be specified, for using pass in a team setting, and different folders can have different GPG keys, by using &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We can additionally initialize the password store as a git repository:&lt;/p&gt;&lt;code&gt;zx2c4@laptop ~ $ pass git init
Initialized empty Git repository in /home/zx2c4/.password-store/.git/
zx2c4@laptop ~ $ pass git remote add origin kexec.com:pass-store
&lt;/code&gt;&lt;p&gt;If a git repository is initialized, &lt;code&gt;pass&lt;/code&gt; creates a git commit each time the password store is manipulated.&lt;/p&gt;&lt;p&gt;There is a more detailed initialization example in the man page.&lt;/p&gt;&lt;head rend="h2"&gt;Download&lt;/head&gt;&lt;p&gt;The latest version is 1.7.4.&lt;/p&gt;&lt;head rend="h3"&gt;Ubuntu / Debian&lt;/head&gt;&lt;code&gt;$ sudo apt-get install pass&lt;/code&gt;&lt;head rend="h3"&gt;Fedora / RHEL&lt;/head&gt;&lt;code&gt;$ sudo yum install pass&lt;/code&gt;&lt;head rend="h3"&gt;openSUSE&lt;/head&gt;&lt;code&gt;$ sudo zypper in password-store&lt;/code&gt;&lt;head rend="h3"&gt;Gentoo&lt;/head&gt;&lt;code&gt;# emerge -av pass&lt;/code&gt;&lt;head rend="h3"&gt;Arch&lt;/head&gt;&lt;code&gt;$ pacman -S pass&lt;/code&gt;&lt;head rend="h3"&gt;Macintosh&lt;/head&gt;&lt;p&gt;The password store is available through the Homebrew package manager:&lt;/p&gt;&lt;code&gt;$ brew install pass&lt;/code&gt;&lt;head rend="h3"&gt;FreeBSD&lt;/head&gt;&lt;code&gt;# pkg install password-store&lt;/code&gt;&lt;head rend="h3"&gt;Tarball&lt;/head&gt;The tarball contains a generic makefile, for which a simple&lt;code&gt;sudo make install&lt;/code&gt; should do the trick.

&lt;head rend="h3"&gt;Git Repository&lt;/head&gt;&lt;p&gt;You may browse the git repository or clone the repo:&lt;/p&gt;&lt;code&gt;$ git clone https://git.zx2c4.com/password-store&lt;/code&gt;

&lt;p&gt;All releases are tagged, and the tags are signed with 0xA5DE03AE.&lt;/p&gt;&lt;head rend="h2"&gt;Data Organization&lt;/head&gt;&lt;head rend="h3"&gt;Usernames, Passwords, PINs, Websites, Metadata, et cetera&lt;/head&gt;&lt;p&gt;The password store does not impose any particular schema or type of organization of your data, as it is simply a flat text file, which can contain arbitrary data. Though the most common case is storing a single password per entry, some power users find they would like to store more than just their password inside the password store, and additionally store answers to secret questions, website URLs, and other sensitive information or metadata. Since the password store does not impose a scheme of it's own, you can choose your own organization. There are many possibilities.&lt;/p&gt;&lt;p&gt;One approach is to use the multi-line functionality of pass (&lt;code&gt;--multiline&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; in &lt;code&gt;insert&lt;/code&gt;), and store the password itself on the first line of the file, and the additional information on subsequent lines. For example, &lt;code&gt;Amazon/bookreader&lt;/code&gt; might look like this:&lt;/p&gt;&lt;code&gt;Yw|ZSNH!}z"6{ym9pI
URL: *.amazon.com/*
Username: AmazonianChicken@example.com
Secret Question 1: What is your childhood best friend's most bizarre superhero fantasy? Oh god, Amazon, it's too awful to say...
Phone Support PIN #: 84719&lt;/code&gt;

&lt;p&gt;This is the preferred organzational scheme used by the author. The &lt;code&gt;--clip&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt; options will only copy the first line of such a file to the clipboard, thereby making it easy to fetch the password for login forms, while retaining additional information in the same file.&lt;/p&gt;&lt;p&gt;Another approach is to use folders, and store each piece of data inside a file in that folder. For example &lt;code&gt;Amazon/bookreader/password&lt;/code&gt; would hold bookreader's password inside the &lt;code&gt;Amazon/bookreader&lt;/code&gt; directory, and &lt;code&gt;Amazon/bookreader/secretquestion1&lt;/code&gt; would hold a secret question, and &lt;code&gt;Amazon/bookreader/sensitivecode&lt;/code&gt; would hold something else related to bookreader's account. And yet another approach might be to store the password in &lt;code&gt;Amazon/bookreader&lt;/code&gt; and the additional data in &lt;code&gt;Amazon/bookreader.meta&lt;/code&gt;. And even another approach might be use multiline, as outlined above, but put the URL template in the filename instead of inside the file.&lt;/p&gt;&lt;p&gt;The point is, the possibilities here are extremely numerous, and there are many other organizational schemes not mentioned above; you have the freedom of choosing the one that fits your workflow best.&lt;/p&gt;&lt;head rend="h3"&gt;Extensions for &lt;code&gt;pass&lt;/code&gt;&lt;/head&gt;&lt;p&gt;In order to faciliate the large variety of uses users come up with, &lt;code&gt;pass&lt;/code&gt; supports extensions. Extensions installed to &lt;code&gt;/usr/lib/password-store/extensions&lt;/code&gt; (or some distro-specific variety of such) are always enabled. Extensions installed to &lt;code&gt;~/.password-store/.extensions/COMMAND.bash&lt;/code&gt; are enabled if the &lt;code&gt;PASSWORD_STORE_ENABLE_EXTENSIONS&lt;/code&gt; environment variable is &lt;code&gt;true&lt;/code&gt; Read the man page for more details.&lt;/p&gt;&lt;p&gt;The community has produced many such extensions:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;pass-tomb: manage your password store in a Tomb&lt;/item&gt;&lt;item&gt;pass-update: an easy flow for updating passwords&lt;/item&gt;&lt;item&gt;pass-import: a generic importer tool from other password managers&lt;/item&gt;&lt;item&gt;pass-extension-tail: a way of printing only the tail of a file&lt;/item&gt;&lt;item&gt;pass-extension-wclip: a plugin to use wclip on Windows&lt;/item&gt;&lt;item&gt;pass-otp: support for one-time-password (OTP) tokens&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;Compatible Clients&lt;/head&gt;&lt;p&gt;The community has assembled an impressive list of clients and GUIs for various platforms:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;passmenu: an extremely useful and awesome dmenu script&lt;/item&gt;&lt;item&gt;qtpass: cross-platform GUI client&lt;/item&gt;&lt;item&gt;Android-Password-Store: Android app&lt;/item&gt;&lt;item&gt;passforios: iOS app&lt;/item&gt;&lt;item&gt;pass-ios: (older) iOS app&lt;/item&gt;&lt;item&gt;passff: Firefox plugin&lt;/item&gt;&lt;item&gt;browserpass: Chrome plugin&lt;/item&gt;&lt;item&gt;Pass4Win: Windows client&lt;/item&gt;&lt;item&gt;pext_module_pass: module for Pext&lt;/item&gt;&lt;item&gt;gopass: Go GUI app&lt;/item&gt;&lt;item&gt;upass: interactive console UI&lt;/item&gt;&lt;item&gt;alfred-pass: Alfred integration&lt;/item&gt;&lt;item&gt;pass-alfred: Alfred integration&lt;/item&gt;&lt;item&gt;simple-pass-alfred: Alfred integration&lt;/item&gt;&lt;item&gt;pass.applescript: OS X integration&lt;/item&gt;&lt;item&gt;pass-git-helper: git credential integration&lt;/item&gt;&lt;item&gt;password-store.el: an emacs package&lt;/item&gt;&lt;item&gt;XMonad.Prompt.Pass: prompt for Xmonad&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;Migrating to &lt;code&gt;pass&lt;/code&gt;&lt;/head&gt;&lt;p&gt;To free password data from the clutches of other (bloated) password managers, various users have come up with different password store organizations that work best for them. Some users have contributed scripts to help import passwords from other programs:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;1password2pass.rb: imports 1Password txt or 1pif data&lt;/item&gt;&lt;item&gt;keepassx2pass.py: imports KeepassX XML data&lt;/item&gt;&lt;item&gt;keepass2csv2pass.py: imports Keepass2 CSV data&lt;/item&gt;&lt;item&gt;keepass2pass.py: imports Keepass2 XML data&lt;/item&gt;&lt;item&gt;fpm2pass.pl: imports Figaro's Password Manager XML data&lt;/item&gt;&lt;item&gt;lastpass2pass.rb: imports Lastpass CSV data&lt;/item&gt;&lt;item&gt;kedpm2pass.py: imports Ked Password Manager data&lt;/item&gt;&lt;item&gt;revelation2pass.py: imports Revelation Password Manager data&lt;/item&gt;&lt;item&gt;gorilla2pass.rb: imports Password Gorilla data&lt;/item&gt;&lt;item&gt;pwsafe2pass.sh: imports PWSafe data&lt;/item&gt;&lt;item&gt;kwallet2pass.py: imports KWallet data&lt;/item&gt;&lt;item&gt;roboform2pass.rb: imports Roboform data&lt;/item&gt;&lt;item&gt;password-exporter2pass.py: imports password-exporter data&lt;/item&gt;&lt;item&gt;pwsafe2pass.py: imports pwsafe data&lt;/item&gt;&lt;item&gt;firefox_decrypt: full blown Firefox password interface, which supports exporting to pass&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;Credit &amp;amp; License&lt;/head&gt;&lt;p&gt;&lt;code&gt;pass&lt;/code&gt; was written by Jason A. Donenfeld of zx2c4.com and is licensed under the GPLv2+.&lt;/p&gt;&lt;head rend="h3"&gt;Contributing&lt;/head&gt;&lt;p&gt;This is a very active project with a healthy dose of contributors. The best way to contribute to the password store is to join the mailing list and send git formatted patches. You may also join the discussion in &lt;code&gt;#pass&lt;/code&gt; on Libera.Chat.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.passwordstore.org/"/></entry><entry><id>https://news.ycombinator.com/item?id=45236263</id><title>Two Slice, a font that's only 2px tall</title><updated>2025-09-14T05:09:03.484219+00:00</updated><content>&lt;doc fingerprint="75fdb0fbb35c444f"&gt;
  &lt;main&gt;
    &lt;p&gt;A font that's only 2px tall, and somewhat readable! Uppercase and lowercase have some different variants, in case you find one more readable than the other. Numbers (sort of) and some punctuation marks are included.&lt;/p&gt;
    &lt;p&gt;You can probably read this, even if you wish you couldn't.&lt;lb/&gt;It tends to be easier to read at smaller sizes.&lt;/p&gt;
    &lt;p&gt;Try it out below, or download it (under CC BY-SA license, so you can use it commercially but you have to give credit).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://joefatula.com/twoslice.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45236314</id><title>EFF to court: The Supreme Court must rein in secondary copyright liability</title><updated>2025-09-14T05:09:03.162910+00:00</updated><content>&lt;doc fingerprint="59da0f77b76a344f"&gt;
  &lt;main&gt;
    &lt;p&gt;If the Supreme Court doesn’t reverse a lower court’s ruling, internet service providers (ISPs) could be forced to terminate people’s internet access based on nothing more than mere accusations of copyright infringement. This would threaten innocent users who rely on broadband for essential aspects of daily life. EFF—along with the American Library Association, the Association of Research Libraries, and Re:Create—filed an amicus brief urging the Court to reverse the decision.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Stakes: Turning ISPs into Copyright Police&lt;/head&gt;
    &lt;p&gt;Among other things, the Supreme Court approving the appeals court’s findings will radically change the amount of risk your ISP takes on if a customer infringes on copyright, forcing the ISP to terminate access to the internet for those users accused of copyright infringement—and everyone else who uses that internet connection.&lt;/p&gt;
    &lt;p&gt;This issue turns on what courts call “secondary liability,” which is the legal idea that someone can be held responsible not for what they did directly, but for what someone else did using their product or service.&lt;/p&gt;
    &lt;p&gt;The case began when music companies sued Cox Communications, arguing that the ISP should be held liable for copyright infringement committed by some of its subscribers. The Court of Appeals for the Fourth Circuit agreed, adopting a “material contribution” standard for contributory copyright liability (a rule for when service providers can be held liable for the actions of users). The lower court said that providing a service that could be used for infringement is enough to create liability when a customer infringes.&lt;/p&gt;
    &lt;p&gt;In the Patent Act, where Congress has explicitly defined secondary liability, there’s a different test: contributory infringement exists only where a product is incapable of substantial non-infringing use. Internet access, of course, is overwhelmingly used for lawful purposes, making it the very definition of a “staple article of commerce” that can’t be liable under the patent framework. Yet under the Fourth Circuit’s rule, ISPs could face billion-dollar damages if they fail to terminate users on the basis of even flimsy or automated infringement claims.&lt;/p&gt;
    &lt;head rend="h3"&gt;Our Argument: Apply Clear Rules from the Patent Act, Not Confusing Judge-Made Tests&lt;/head&gt;
    &lt;p&gt;Our brief urges the Court to do what it has done in the past: look to patent law to define the limits of secondary liability in copyright. That means contributory infringement must require more than a “material contribution” by the service provider—it should apply only when a product or service is especially designed for infringement and lacks substantial non-infringing uses.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Human Cost: Losing Internet Access Hurts Everyone&lt;/head&gt;
    &lt;p&gt;The Fourth Circuit’s rule threatens devastating consequences for the public. Terminating an ISP account doesn’t just affect a person accused of unauthorized file sharing—it cuts off entire households, schools, libraries, or businesses that share an internet connection.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Public libraries, which provide internet access to millions of Americans who lack it at home, could lose essential service.&lt;/item&gt;
      &lt;item&gt;Universities, hospitals, and local governments could see internet access for whole communities disrupted.&lt;/item&gt;
      &lt;item&gt;Households—especially in low-income and communities of color, which disproportionately share broadband connections with other people—would face collective punishment for the alleged actions of a single user.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;With more than a third of Americans having only one or no broadband provider, many users would have no way to reconnect once cut off. And given how essential internet access is for education, employment, healthcare, and civic participation, the consequences of termination are severe and disproportionate.&lt;/p&gt;
    &lt;head rend="h3"&gt;What’s Next&lt;/head&gt;
    &lt;p&gt;The Supreme Court has an opportunity to correct course. We’re asking the Court to reject the Fourth Circuit’s unfounded “material contribution” test, reaffirm that patent law provides the right framework for secondary liability, and make clear that the Constitution requires copyright to serve the public good. The Court should ensure that copyright enforcement doesn’t jeopardize the internet access on which participation in modern life depends.&lt;/p&gt;
    &lt;p&gt;We’ll be watching closely as the Court considers this case. In the meantime, you can read our amicus brief here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.eff.org/deeplinks/2025/09/eff-court-supreme-court-must-rein-expansive-secondary-copyright-liability"/></entry><entry><id>https://news.ycombinator.com/item?id=45236411</id><title>If my kids excel, will they move away?</title><updated>2025-09-14T05:09:02.872231+00:00</updated><content>&lt;doc fingerprint="3613d15139e304eb"&gt;
  &lt;main&gt;
    &lt;p&gt;If my kids excel, will they move away?&lt;/p&gt;
    &lt;p&gt;Jeffrey P. Bigham&lt;/p&gt;
    &lt;p&gt;I grew up on a farm outside of a rural town about an hour southeast of Columbus, Ohio. Like many small towns in America, my town knows “brain drain” – all of my friends from high school who went to college (~30% of my class) now live elsewhere, although most are pretty close by (e.g., several live in the suburbs of Columbus and Cincinnati).&lt;lb/&gt;Sometimes my hometown feels a million miles away, but it only takes two hours and fifty minutes for me to drive there from Pittsburgh, which is where I live now.&lt;/p&gt;
    &lt;p&gt;In Pittsburgh, I’m a professor at Carnegie Mellon University in the top computer science school in the world. I’ve also worked in various large technology companies, who have offices in Pittsburgh to connect with and employ Carnegie Mellon faculty and students.&lt;/p&gt;
    &lt;p&gt;I may not live in my small town anymore, but the fact that the best place in the world to study and do research in computer science is in Pittsburgh means I’m really not that far away. My four kids see their grandparents often, they’re known in my parents’ church and have spent a lot of time on my dad’s farm. The photo above is of me on the farm, wearing some of my dad’s clothes, trying to help out when my dad fell ill a few years ago.&lt;/p&gt;
    &lt;p&gt;Most of my story we’ve been able to take for granted in the United States for the past few decades. If you grow up in the United States, and you’re among the best in the world in your field, you could count on the center of excellence for your field also being in the United States, oftentimes pretty close by, like Pittsburgh being close to my hometown.&lt;/p&gt;
    &lt;p&gt;As a professor, I’m able to recruit the very best students in the world to work on my research. Sometimes that means recruiting Americans and sometimes that means recruiting from elsewhere. Students come to Pittsburgh from around the world (I’ve advised PhD students and postdocs from about 10 different countries). Five or six years after they start our intensive graduation program, successful students receive their PhDs and that’s when I tend to meet their parents for the first time. Oftentimes, this is the first trip they’ve made to the United States, and they may have only seen their kids a few times during their degree. It hits home because usually these students choose to stay in the United States – after successfully completing their degree with me, they are in high demand not only in our universities but also in technology companies.&lt;/p&gt;
    &lt;p&gt;These days the students I talk to are less confident about coming to the United States to study and less confident about staying here after they’re done. They have seen a student grabbed off the street apparently because she wrote an essay expressing concern about the on-going humanitarian crisis in Gaza. They have seen graduate students jailed for what used to be minor immigration offenses. They have seen even greater uncertainty in applying or reapplying for the visas they need to study. And, they have seen their status as students arbitrarily used as leverage in attacking premier universities like Harvard[1]. Most of these incidents have or probably will be resolved, but the message and fear it causes are real and long-lasting.&lt;/p&gt;
    &lt;p&gt;I am worried that policies that have the intention (or effect) of introducing chaos and cruelty to superstar students will make it less likely for the best of the best to come to America, and this in turn will mean centers of excellence will move elsewhere. While incumbents have an advantage, it doesn’t take much to influence group behavior and movements can be self-reinforcing. The best people in a field like to be where other amazing people are, so they can learn and build off of each other. If the centers of excellence move elsewhere, I’m worried my kids will end up feeling compelled to move away (should they become superstars, as is my hope for them).&lt;lb/&gt;The brain drain from our small rural communities is real, but many of us have found ways to stay close by and keep those ties. There’s a bunch of reasons to treat international students better than we have over the past months, but these concerns are not thousands of miles away as they seem to some – to me, it's incredibly close to home, and not only because I see the effect on students I work with closely.&lt;/p&gt;
    &lt;p&gt;If we cause centers of excellence to move away from Pittsburgh, and away from the United States entirely, that’s the difference between my grandkids living near or very far, and whether they’re likely to grow up visiting me and my dad’s farm often or hardly at all.&lt;/p&gt;
    &lt;p&gt;[1] I’ve owned exactly two Harvard t-shirts in my lifetime – the first when I was an undergrad at Princeton said, ‘Harvard Sucks’, and the second is a normal Harvard t-shirt that I bought this past May.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://jeffreybigham.com/blog/2025/where-will-my-kids-go.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45236444</id><title>RFC9460: SVCB and HTTPS DNS Records</title><updated>2025-09-14T05:09:02.322616+00:00</updated><content>&lt;doc fingerprint="163149df2e82e1df"&gt;
  &lt;main&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;RFC 9460&lt;/cell&gt;
        &lt;cell&gt;SVCB and HTTPS RRs for DNS&lt;/cell&gt;
        &lt;cell&gt;November 2023&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Schwartz, et al.&lt;/cell&gt;
        &lt;cell&gt;Standards Track&lt;/cell&gt;
        &lt;cell&gt;[Page]&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;Stream:&lt;/item&gt;
      &lt;item rend="dd-1"&gt;Internet Engineering Task Force (IETF)&lt;/item&gt;
      &lt;item rend="dt-2"&gt;RFC:&lt;/item&gt;
      &lt;item rend="dd-2"&gt;9460&lt;/item&gt;
      &lt;item rend="dt-3"&gt;Category:&lt;/item&gt;
      &lt;item rend="dd-3"&gt;Standards Track&lt;/item&gt;
      &lt;item rend="dt-4"&gt;Published:&lt;/item&gt;
      &lt;item rend="dt-5"&gt;ISSN:&lt;/item&gt;
      &lt;item rend="dd-5"&gt;2070-1721&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;RFC 9460&lt;/head&gt;
    &lt;head rend="h1"&gt;Service Binding and Parameter Specification via the DNS (SVCB and HTTPS Resource Records)&lt;/head&gt;
    &lt;head rend="h2"&gt;Abstract&lt;/head&gt;
    &lt;p&gt;This document specifies the "SVCB" ("Service Binding") and "HTTPS" DNS resource record (RR) types to facilitate the lookup of information needed to make connections to network services, such as for HTTP origins. SVCB records allow a service to be provided from multiple alternative endpoints, each with associated parameters (such as transport protocol configuration), and are extensible to support future uses (such as keys for encrypting the TLS ClientHello). They also enable aliasing of apex domains, which is not possible with CNAME. The HTTPS RR is a variation of SVCB for use with HTTP (see RFC 9110, "HTTP Semantics"). By providing more information to the client before it attempts to establish a connection, these records offer potential benefits to both performance and privacy.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;Status of This Memo&lt;/head&gt;
    &lt;p&gt;This is an Internet Standards Track document.¶&lt;/p&gt;
    &lt;p&gt;This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.¶&lt;/p&gt;
    &lt;p&gt;Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9460.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;Copyright Notice&lt;/head&gt;
    &lt;p&gt;Copyright (c) 2023 IETF Trust and the persons identified as the document authors. All rights reserved.¶&lt;/p&gt;
    &lt;p&gt;This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Revised BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Revised BSD License.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;1. Introduction&lt;/head&gt;
    &lt;p&gt;The SVCB ("Service Binding") and HTTPS resource records (RRs) provide clients with complete instructions for access to a service. This information enables improved performance and privacy by avoiding transient connections to a suboptimal default server, negotiating a preferred protocol, and providing relevant public keys.¶&lt;/p&gt;
    &lt;p&gt;For example, HTTP clients currently resolve only A and/or AAAA records for the origin hostname, learning only its IP addresses. If an HTTP client learns more about the origin before connecting, it may be able to upgrade "http" URLs to "https", enable HTTP/3 or Encrypted ClientHello [ECH], or switch to an operationally preferable endpoint. It is highly desirable to minimize the number of round trips and lookups required to learn this additional information.¶&lt;/p&gt;
    &lt;p&gt;The SVCB and HTTPS RRs also help when the operator of a service wishes to delegate operational control to one or more other domains, e.g., aliasing the origin "https://example.com" to a service operator endpoint at "svc.example.net". While this case can sometimes be handled by a CNAME, that does not cover all use cases. CNAME is also inadequate when the service operator needs to provide a bound collection of consistent configuration parameters through the DNS (such as network location, protocol, and keying information).¶&lt;/p&gt;
    &lt;p&gt;This document first describes the SVCB RR as a general-purpose RR that can be applied directly and efficiently to a wide range of services (Section 2). It also describes the rules for defining other SVCB-compatible RR types (Section 6), starting with the HTTPS RR type (Section 9), which provides improved efficiency and convenience with HTTP by avoiding the need for an Attrleaf label [Attrleaf] (Section 9.1).¶&lt;/p&gt;
    &lt;p&gt;The SVCB RR has two modes: 1) "AliasMode", which simply delegates operational control for a resource and 2) "ServiceMode", which binds together configuration information for a service endpoint. ServiceMode provides additional key=value parameters within each RDATA set.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;1.1. Goals&lt;/head&gt;
    &lt;p&gt;The goal of the SVCB RR is to allow clients to resolve a single additional DNS RR in a way that:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Provides alternative endpoints that are authoritative for the service, along with parameters associated with each of these endpoints.¶&lt;/item&gt;
      &lt;item&gt;Does not assume that all alternative endpoints have the same parameters or capabilities, or are even operated by the same entity. This is important, as DNS does not provide any way to tie together multiple RRsets for the same name. For example, if "www.example.com" is a CNAME alias that switches between one of three Content Delivery Networks (CDNs) or hosting environments, successive queries for that name may return records that correspond to different environments.¶&lt;/item&gt;
      &lt;item&gt;Enables CNAME-like functionality at a zone apex (such as "example.com") for participating protocols and generally enables extending operational authority for a service identified by a domain name to other instances with alternate names.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Additional goals specific to HTTPS RRs and the HTTP use cases include:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Connecting directly to HTTP/3 (QUIC transport) alternative endpoints [HTTP/3].¶&lt;/item&gt;
      &lt;item&gt;Supporting non-default TCP and UDP ports.¶&lt;/item&gt;
      &lt;item&gt;Enabling SRV-like benefits (e.g., apex aliasing, as mentioned above) for HTTP, where SRV [SRV] has not been widely adopted.¶&lt;/item&gt;
      &lt;item&gt;Providing an indication signaling that the "https" scheme should be used instead of "http" for all HTTP requests to this host and port, similar to HTTP Strict Transport Security [HSTS] (see Section 9.5).¶&lt;/item&gt;
      &lt;item&gt;Enabling the conveyance of Encrypted ClientHello keys [ECH] associated with an alternative endpoint.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;1.2. Overview of the SVCB RR&lt;/head&gt;
    &lt;p&gt;This subsection briefly describes the SVCB RR with forward references to the full exposition of each component. (As discussed in Section 6, this all applies equally to the HTTPS RR, which shares the same encoding, format, and high-level semantics.)¶&lt;/p&gt;
    &lt;p&gt;The SVCB RR has two modes: 1) AliasMode (Section 2.4.2), which aliases a name to another name and 2) ServiceMode (Section 2.4.3), which provides connection information bound to a service endpoint domain. Placing both forms in a single RR type allows clients to fetch the relevant information with a single query (Section 2.3).¶&lt;/p&gt;
    &lt;p&gt;The SVCB RR has two required fields and one optional field. The fields are:¶&lt;/p&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;SvcPriority (Section 2.4.1):&lt;/item&gt;
      &lt;item rend="dd-1"&gt;The priority of this record (relative to others, with lower values preferred). A value of 0 indicates AliasMode.¶&lt;/item&gt;
      &lt;item rend="dt-2"&gt;TargetName:&lt;/item&gt;
      &lt;item rend="dd-2"&gt;The domain name of either the alias target (for AliasMode) or the alternative endpoint (for ServiceMode).¶&lt;/item&gt;
      &lt;item rend="dt-3"&gt;SvcParams (optional):&lt;/item&gt;
      &lt;item rend="dd-3"&gt;A list of key=value pairs describing the alternative endpoint at TargetName (only used in ServiceMode and otherwise ignored). SvcParams are described in Section 2.1.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Cooperating DNS recursive resolvers will perform subsequent record resolution (for SVCB, A, and AAAA records) and return them in the Additional section of the response (Section 4.2). Clients either use responses included in the Additional section returned by the recursive resolver or perform necessary SVCB, A, and AAAA record resolutions (Section 3). DNS authoritative servers can attach in-bailiwick SVCB, A, AAAA, and CNAME records in the Additional section to responses for a SVCB query (Section 4.1).¶&lt;/p&gt;
    &lt;p&gt;In ServiceMode, the SvcParams of the SVCB RR provide an extensible data model for describing alternative endpoints that are authoritative for a service, along with parameters associated with each of these alternative endpoints (Section 7).¶&lt;/p&gt;
    &lt;p&gt;For HTTP use cases, the HTTPS RR (Section 9) enables many of the benefits of Alt-Svc [AltSvc] without waiting for a full HTTP connection initiation (multiple round trips) before learning of the preferred alternative, and without necessarily revealing the user's intended destination to all entities along the network path.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;1.3. Terminology&lt;/head&gt;
    &lt;p&gt;Terminology in this document is based on the common case where the SVCB record is used to access a resource identified by a URI whose &lt;code&gt;authority&lt;/code&gt; field contains a DNS
hostname as the &lt;code&gt;host&lt;/code&gt;.¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The "service" is the information source identified by the &lt;code&gt;authority&lt;/code&gt;and&lt;code&gt;scheme&lt;/code&gt;of the URI, capable of providing access to the resource. For "https" URIs, the "service" corresponds to an "origin" [RFC6454].¶&lt;/item&gt;
      &lt;item&gt;The "service name" is the &lt;code&gt;host&lt;/code&gt;portion of the authority.¶&lt;/item&gt;
      &lt;item&gt;The "authority endpoint" is the authority's hostname and a port number implied by the scheme or specified in the URI.¶&lt;/item&gt;
      &lt;item&gt;An "alternative endpoint" is a hostname, port number, and other associated instructions to the client on how to reach an instance of a service.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Additional DNS terminology intends to be consistent with [DNSTerm].¶&lt;/p&gt;
    &lt;p&gt;SVCB is a contraction of "service binding". The SVCB RR, HTTPS RR, and future RR types that share SVCB's formats and registry are collectively known as SVCB-compatible RR types. The contraction "SVCB" is also used to refer to this system as a whole.¶&lt;/p&gt;
    &lt;p&gt;The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;2. The SVCB Record Type&lt;/head&gt;
    &lt;p&gt;The SVCB DNS RR type (RR type 64) is used to locate alternative endpoints for a service.¶&lt;/p&gt;
    &lt;p&gt;The algorithm for resolving SVCB records and associated address records is specified in Section 3.¶&lt;/p&gt;
    &lt;p&gt;Other SVCB-compatible RR types can also be defined as needed (see Section 6). In particular, the HTTPS RR (RR type 65) provides special handling for the case of "https" origins as described in Section 9.¶&lt;/p&gt;
    &lt;p&gt;SVCB RRs are extensible by a list of SvcParams, which are pairs consisting of a SvcParamKey and a SvcParamValue. Each SvcParamKey has a presentation name and a registered number. Values are in a format specific to the SvcParamKey. Each SvcParam has a specified presentation format (used in zone files) and wire encoding (e.g., domain names, binary data, or numeric values). The initial SvcParamKeys and their formats are defined in Section 7.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;2.1. Zone-File Presentation Format&lt;/head&gt;
    &lt;p&gt;The presentation format &lt;code&gt;&amp;lt;RDATA&amp;gt;&lt;/code&gt; of the record ([RFC1035], Section 5.1) has
the form:¶&lt;/p&gt;
    &lt;quote&gt;SvcPriority TargetName SvcParams¶&lt;/quote&gt;
    &lt;p&gt;The SVCB record is defined specifically within the Internet ("IN") Class ([RFC1035], Section 3.2.4).¶&lt;/p&gt;
    &lt;p&gt;SvcPriority is a number in the range 0-65535, TargetName is a &lt;code&gt;&amp;lt;domain-name&amp;gt;&lt;/code&gt; ([RFC1035], Section 5.1),
and the SvcParams are a whitespace-separated list with each SvcParam
consisting of a SvcParamKey=SvcParamValue pair or a standalone SvcParamKey.
SvcParamKeys are registered by IANA (Section 14.3).¶&lt;/p&gt;
    &lt;p&gt;Each SvcParamKey SHALL appear at most once in the SvcParams. In presentation format, SvcParamKeys are lowercase alphanumeric strings. Key names contain 1-63 characters from the ranges "a"-"z", "0"-"9", and "-". In ABNF [RFC5234],¶&lt;/p&gt;
    &lt;quote&gt;alpha-lc = %x61-7A ; a-z SvcParamKey = 1*63(alpha-lc / DIGIT / "-") SvcParam = SvcParamKey ["=" SvcParamValue] SvcParamValue = char-string ; See Appendix A. value = *OCTET ; Value before key-specific parsing¶&lt;/quote&gt;
    &lt;p&gt;The SvcParamValue is parsed using the character-string decoding algorithm (Appendix A), producing a &lt;code&gt;value&lt;/code&gt;.
The &lt;code&gt;value&lt;/code&gt; is then validated and converted into wire format in a manner
specific to each key.¶&lt;/p&gt;
    &lt;p&gt;When the optional "=" and SvcParamValue are omitted, the &lt;code&gt;value&lt;/code&gt; is
interpreted as empty.¶&lt;/p&gt;
    &lt;p&gt;Arbitrary keys can be represented using the unknown-key presentation format "keyNNNNN" where NNNNN is the numeric value of the key type without leading zeros. A SvcParam in this form SHALL be parsed as specified above, and the decoded &lt;code&gt;value&lt;/code&gt; SHALL be used as its wire-format encoding.¶&lt;/p&gt;
    &lt;p&gt;For some SvcParamKeys, the &lt;code&gt;value&lt;/code&gt; corresponds to a list or set of
items.  Presentation formats for such keys SHOULD use a comma-separated list
(Appendix A.1).¶&lt;/p&gt;
    &lt;p&gt;SvcParams in presentation format MAY appear in any order, but keys MUST NOT be repeated.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;2.2. RDATA Wire Format&lt;/head&gt;
    &lt;p&gt;The RDATA for the SVCB RR consists of:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;a 2-octet field for SvcPriority as an integer in network byte order.¶&lt;/item&gt;
      &lt;item&gt;the uncompressed, fully qualified TargetName, represented as a sequence of length-prefixed labels per Section 3.1 of [RFC1035].¶&lt;/item&gt;
      &lt;item&gt;the SvcParams, consuming the remainder of the record (so smaller than 65535 octets and constrained by the RDATA and DNS message sizes).¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When the list of SvcParams is non-empty, it contains a series of SvcParamKey=SvcParamValue pairs, represented as:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;a 2-octet field containing the SvcParamKey as an integer in network byte order. (See Section 14.3.2 for the defined values.)¶&lt;/item&gt;
      &lt;item&gt;a 2-octet field containing the length of the SvcParamValue as an integer between 0 and 65535 in network byte order.¶&lt;/item&gt;
      &lt;item&gt;an octet string of this length whose contents are the SvcParamValue in a format determined by the SvcParamKey.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;SvcParamKeys SHALL appear in increasing numeric order.¶&lt;/p&gt;
    &lt;p&gt;Clients MUST consider an RR malformed if:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;the end of the RDATA occurs within a SvcParam.¶&lt;/item&gt;
      &lt;item&gt;SvcParamKeys are not in strictly increasing numeric order.¶&lt;/item&gt;
      &lt;item&gt;the SvcParamValue for a SvcParamKey does not have the expected format.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Note that the second condition implies that there are no duplicate SvcParamKeys.¶&lt;/p&gt;
    &lt;p&gt;If any RRs are malformed, the client MUST reject the entire RRset and fall back to non-SVCB connection establishment.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;2.3. SVCB Query Names&lt;/head&gt;
    &lt;p&gt;When querying the SVCB RR, a service is translated into a QNAME by prepending the service name with a label indicating the scheme, prefixed with an underscore, resulting in a domain name like "_examplescheme.api.example.com.". This follows the Attrleaf naming pattern [Attrleaf], so the scheme MUST be registered appropriately with IANA (see Section 11).¶&lt;/p&gt;
    &lt;p&gt;Protocol mapping documents MAY specify additional underscore-prefixed labels to be prepended. For schemes that specify a port (Section 3.2.3 of [URI]), one reasonable possibility is to prepend the indicated port number if a non-default port number is specified. This document terms this behavior "Port Prefix Naming" and uses it in the examples throughout.¶&lt;/p&gt;
    &lt;p&gt;See Section 9.1 for information regarding HTTPS RR behavior.¶&lt;/p&gt;
    &lt;p&gt;When a prior CNAME or SVCB record has aliased to a SVCB record, each RR SHALL be returned under its own owner name, as in ordinary CNAME processing ([RFC1034], Section 3.6.2). For details, see the recommendations regarding aliases for clients (Section 3), servers (Section 4), and zones (Section 10).¶&lt;/p&gt;
    &lt;p&gt;Note that none of these forms alter the origin or authority for validation purposes. For example, TLS clients MUST continue to validate TLS certificates for the original service name.¶&lt;/p&gt;
    &lt;p&gt;As an example, the owner of "example.com" could publish this record:¶&lt;/p&gt;
    &lt;quote&gt;_8443._foo.api.example.com. 7200 IN SVCB 0 svc4.example.net.¶&lt;/quote&gt;
    &lt;p&gt;This record would indicate that "foo://api.example.com:8443" is aliased to "svc4.example.net". The owner of "example.net", in turn, could publish this record:¶&lt;/p&gt;
    &lt;quote&gt;svc4.example.net. 7200 IN SVCB 3 svc4.example.net. ( alpn="bar" port="8004" )¶&lt;/quote&gt;
    &lt;p&gt;This record would indicate that these services are served on port number 8004, which supports the protocol "bar" and its associated transport in addition to the default transport protocol for "foo://".¶&lt;/p&gt;
    &lt;p&gt;(Parentheses are used to ignore a line break in DNS zone-file presentation format, per Section 5.1 of [RFC1035].)¶&lt;/p&gt;
    &lt;head rend="h3"&gt;2.4. Interpretation&lt;/head&gt;
    &lt;head rend="h4"&gt;2.4.1. SvcPriority&lt;/head&gt;
    &lt;p&gt;When SvcPriority is 0, the SVCB record is in AliasMode (Section 2.4.2). Otherwise, it is in ServiceMode (Section 2.4.3).¶&lt;/p&gt;
    &lt;p&gt;Within a SVCB RRset, all RRs SHOULD have the same mode. If an RRset contains a record in AliasMode, the recipient MUST ignore any ServiceMode records in the set.¶&lt;/p&gt;
    &lt;p&gt;RRsets are explicitly unordered collections, so the SvcPriority field is used to impose an ordering on SVCB RRs. A smaller SvcPriority indicates that the domain owner recommends the use of this record over ServiceMode RRs with a larger SvcPriority value.¶&lt;/p&gt;
    &lt;p&gt;When receiving an RRset containing multiple SVCB records with the same SvcPriority value, clients SHOULD apply a random shuffle within a priority level to the records before using them, to ensure uniform load balancing.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;2.4.2. AliasMode&lt;/head&gt;
    &lt;p&gt;In AliasMode, the SVCB record aliases a service to a TargetName. SVCB RRsets SHOULD only have a single RR in AliasMode. If multiple AliasMode RRs are present, clients or recursive resolvers SHOULD pick one at random.¶&lt;/p&gt;
    &lt;p&gt;The primary purpose of AliasMode is to allow aliasing at the zone apex, where CNAME is not allowed (see, for example, [RFC1912], Section 2.4). In AliasMode, the TargetName will be the name of a domain that resolves to SVCB, AAAA, and/or A records. (See Section 6 for aliasing of SVCB-compatible RR types.) Unlike CNAME, AliasMode records do not affect the resolution of other RR types and apply only to a specific service, not an entire domain name.¶&lt;/p&gt;
    &lt;p&gt;The AliasMode TargetName SHOULD NOT be equal to the owner name, as this would result in a loop. In AliasMode, recipients MUST ignore any SvcParams that are present. Zone-file parsers MAY emit a warning if an AliasMode record has SvcParams. The use of SvcParams in AliasMode records is currently not defined, but a future specification could extend AliasMode records to include SvcParams.¶&lt;/p&gt;
    &lt;p&gt;For example, the operator of "foo://example.com:8080" could point requests to a service operating at "foosvc.example.net" by publishing:¶&lt;/p&gt;
    &lt;quote&gt;_8080._foo.example.com. 3600 IN SVCB 0 foosvc.example.net.¶&lt;/quote&gt;
    &lt;p&gt;Using AliasMode maintains a separation of concerns: the owner of "foosvc.example.net" can add or remove ServiceMode SVCB records without requiring a corresponding change to "example.com". Note that if "foosvc.example.net" promises to always publish a SVCB record, this AliasMode record can be replaced by a CNAME at the same owner name.¶&lt;/p&gt;
    &lt;p&gt;AliasMode is especially useful for SVCB-compatible RR types that do not require an underscore prefix, such as the HTTPS RR type. For example, the operator of "https://example.com" could point requests to a server at "svc.example.net" by publishing this record at the zone apex:¶&lt;/p&gt;
    &lt;quote&gt;example.com. 3600 IN HTTPS 0 svc.example.net.¶&lt;/quote&gt;
    &lt;p&gt;Note that the SVCB record's owner name MAY be the canonical name of a CNAME record, and the TargetName MAY be the owner of a CNAME record. Clients and recursive resolvers MUST follow CNAMEs as normal.¶&lt;/p&gt;
    &lt;p&gt;To avoid unbounded alias chains, clients and recursive resolvers MUST impose a limit on the total number of SVCB aliases they will follow for each resolution request. This limit MUST NOT be zero, i.e., implementations MUST be able to follow at least one AliasMode record. The exact value of this limit is left to implementations.¶&lt;/p&gt;
    &lt;p&gt;Zones that require following multiple AliasMode records could encounter compatibility and performance issues.¶&lt;/p&gt;
    &lt;p&gt;As legacy clients will not know to use this record, service operators will likely need to retain fallback AAAA and A records alongside this SVCB record, although in a common case the target of the SVCB record might offer better performance, and therefore would be preferable for clients implementing this specification to use.¶&lt;/p&gt;
    &lt;p&gt;AliasMode records only apply to queries for the specific RR type. For example, a SVCB record cannot alias to an HTTPS record or vice versa.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;2.4.3. ServiceMode&lt;/head&gt;
    &lt;p&gt;In ServiceMode, the TargetName and SvcParams within each RR associate an alternative endpoint for the service with its connection parameters.¶&lt;/p&gt;
    &lt;p&gt;Each protocol scheme that uses SVCB MUST define a protocol mapping that explains how SvcParams are applied for connections of that scheme. Unless specified otherwise by the protocol mapping, clients MUST ignore any SvcParam that they do not recognize.¶&lt;/p&gt;
    &lt;p&gt;Some SvcParams impose requirements on other SvcParams in the RR. A ServiceMode RR is called "self-consistent" if its SvcParams all comply with each other's requirements. Clients MUST reject any RR whose recognized SvcParams are not self-consistent and MAY reject the entire RRset. To help zone operators avoid this condition, zone-file implementations SHOULD enforce self-consistency as well.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;2.5. Special Handling of "." in TargetName&lt;/head&gt;
    &lt;p&gt;If TargetName has the value "." (represented in the wire format as a zero-length label), special rules apply.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;2.5.1. AliasMode&lt;/head&gt;
    &lt;p&gt;For AliasMode SVCB RRs, a TargetName of "." indicates that the service is not available or does not exist. This indication is advisory: clients encountering this indication MAY ignore it and attempt to connect without the use of SVCB.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;2.5.2. ServiceMode&lt;/head&gt;
    &lt;p&gt;For ServiceMode SVCB RRs, if TargetName has the value ".", then the owner name of this record MUST be used as the effective TargetName. If the record has a wildcard owner name in the zone file, the recipient SHALL use the response's synthesized owner name as the effective TargetName.¶&lt;/p&gt;
    &lt;p&gt;Here, for example, "svc2.example.net" is the effective TargetName:¶&lt;/p&gt;
    &lt;quote&gt;example.com. 7200 IN HTTPS 0 svc.example.net. svc.example.net. 7200 IN CNAME svc2.example.net. svc2.example.net. 7200 IN HTTPS 1 . port=8002 svc2.example.net. 300 IN A 192.0.2.2 svc2.example.net. 300 IN AAAA 2001:db8::2¶&lt;/quote&gt;
    &lt;head rend="h2"&gt;3. Client Behavior&lt;/head&gt;
    &lt;p&gt;"SVCB resolution" is the process of enumerating and ordering the available endpoints for a service, as performed by the client. SVCB resolution is implemented as follows:¶&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Let $QNAME be the service name plus appropriate prefixes for the scheme (see Section 2.3).¶&lt;/item&gt;
      &lt;item&gt;Issue a SVCB query for $QNAME.¶&lt;/item&gt;
      &lt;item&gt;If an AliasMode SVCB record is returned for $QNAME (after following CNAMEs as normal), set $QNAME to its TargetName (without additional prefixes) and loop back to Step 2, subject to chain length limits and loop detection heuristics (see Section 3.1).¶&lt;/item&gt;
      &lt;item&gt;If one or more "compatible" (Section 8) ServiceMode records are returned, these represent the alternative endpoints. Sort the records by ascending SvcPriority.¶&lt;/item&gt;
      &lt;item&gt;Otherwise, SVCB resolution has failed, and the list of available endpoints is empty.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This procedure does not rely on any recursive or authoritative DNS server to comply with this specification or have any awareness of SVCB.¶&lt;/p&gt;
    &lt;p&gt;A client is called "SVCB-optional" if it can connect without the use of ServiceMode records; otherwise, it is called "SVCB-reliant". Clients for pre-existing protocols (e.g., HTTP) SHALL implement SVCB-optional behavior (except as noted in Section 3.1 or when modified by future specifications).¶&lt;/p&gt;
    &lt;p&gt;SVCB-optional clients SHOULD issue in parallel any other DNS queries that might be needed for connection establishment if the SVCB record is absent, in order to minimize delay in that case and enable the optimizations discussed in Section 5.¶&lt;/p&gt;
    &lt;p&gt;Once SVCB resolution has concluded, whether successful or not, if at least one AliasMode record was processed, SVCB-optional clients SHALL append to the list of endpoints an endpoint consisting of the final value of $QNAME, the authority endpoint's port number, and no SvcParams. (This endpoint will be attempted before falling back to non-SVCB connection modes. This ensures that SVCB-optional clients will make use of an AliasMode record whose TargetName has A and/or AAAA records but no SVCB records.)¶&lt;/p&gt;
    &lt;p&gt;The client proceeds with connection establishment using this list of endpoints. Clients SHOULD try higher-priority alternatives first, with fallback to lower-priority alternatives. Clients resolve AAAA and/or A records for the selected TargetName and MAY choose between them using an approach such as Happy Eyeballs [HappyEyeballsV2].¶&lt;/p&gt;
    &lt;p&gt;If the client is SVCB-optional and connecting using this list of endpoints has failed, the client now attempts to use non-SVCB connection modes.¶&lt;/p&gt;
    &lt;p&gt;Some important optimizations are discussed in Section 5 to avoid additional latency in comparison to ordinary AAAA/A lookups.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;3.1. Handling Resolution Failures&lt;/head&gt;
    &lt;p&gt;If DNS responses are cryptographically protected (e.g., using DNSSEC or TLS [DoT] [DoH]) and SVCB resolution fails due to an authentication error, SERVFAIL response, transport error, or timeout, the client SHOULD abandon its attempt to reach the service, even if the client is SVCB-optional. Otherwise, an active attacker could mount a downgrade attack by denying the user access to the SvcParams.¶&lt;/p&gt;
    &lt;p&gt;A SERVFAIL error can occur if the domain is DNSSEC-signed, the recursive resolver is DNSSEC-validating, and the attacker is between the recursive resolver and the authoritative DNS server. A transport error or timeout can occur if an active attacker between the client and the recursive resolver is selectively dropping SVCB queries or responses, based on their size or other observable patterns.¶&lt;/p&gt;
    &lt;p&gt;If the client enforces DNSSEC validation on A/AAAA responses, it SHOULD apply the same validation policy to SVCB. Otherwise, an attacker could defeat the A/AAAA protection by forging SVCB responses that direct the client to other IP addresses.¶&lt;/p&gt;
    &lt;p&gt;If DNS responses are not cryptographically protected, clients MAY treat SVCB resolution failure as fatal or nonfatal.¶&lt;/p&gt;
    &lt;p&gt;If the client is unable to complete SVCB resolution due to its chain length limit, the client MUST fall back to the authority endpoint, as if the service's SVCB record did not exist.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;3.2. Clients Using a Proxy&lt;/head&gt;
    &lt;p&gt;Clients using a domain-oriented transport proxy like HTTP CONNECT ([RFC7231], Section 4.3.6) or SOCKS5 [RFC1928] have the option of using named destinations, in which case the client does not perform any A or AAAA queries for destination domains. If the client is configured to use named destinations with a proxy that does not provide SVCB query capability (e.g., through an affiliated DNS resolver), the client would have to perform SVCB resolution separately, likely disclosing the destinations to additional parties and not just the proxy. Clients in this configuration SHOULD arrange for a separate SVCB resolution procedure with appropriate privacy properties. If this is not possible, SVCB-optional clients MUST disable SVCB resolution entirely, and SVCB-reliant clients MUST treat the configuration as invalid.¶&lt;/p&gt;
    &lt;p&gt;If the client does use SVCB and named destinations, the client SHOULD follow the standard SVCB resolution process, selecting the smallest-SvcPriority option that is compatible with the client and the proxy. When connecting using a SVCB record, clients MUST provide the final TargetName and port to the proxy, which will perform any required A and AAAA lookups.¶&lt;/p&gt;
    &lt;p&gt;This arrangement has several benefits:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Compared to disabling SVCB:¶&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Compared to providing the proxy with an IP address:¶&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;It allows the proxy to select between IPv4 and IPv6 addresses for the server according to its configuration.¶&lt;/item&gt;
          &lt;item&gt;It ensures that the proxy receives addresses based on its network geolocation, not the client's.¶&lt;/item&gt;
          &lt;item&gt;It enables faster fallback for TCP destinations with multiple addresses of the same family.¶&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;4. DNS Server Behavior&lt;/head&gt;
    &lt;head rend="h3"&gt;4.2. Recursive Resolvers&lt;/head&gt;
    &lt;p&gt;Whether the recursive resolver is aware of SVCB or not, the normal response construction process used for unknown RR types [RFC3597] generates the Answer section of the response. Recursive resolvers that are aware of SVCB SHOULD help the client to execute the procedure in Section 3 with minimum overall latency by incorporating additional useful information into the Additional section of the response as follows:¶&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Incorporate the results of SVCB resolution. If the recursive resolver's local chain length limit (which may be different from the client's limit) has been reached, terminate.¶&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If any of the resolved SVCB records are in AliasMode, choose one of them at random, and resolve SVCB, A, and AAAA records for its TargetName.¶&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;All the resolved SVCB records are in ServiceMode. Resolve A and AAAA queries for each TargetName (or for the owner name if TargetName is "."), incorporate all the results, and terminate.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In this procedure, "resolve" means the resolver's ordinary recursive resolution procedure, as if processing a query for that RRset. This includes following any aliases that the resolver would ordinarily follow (e.g., CNAME, DNAME [DNAME]). Errors or anomalies in obtaining additional records MAY cause this process to terminate but MUST NOT themselves cause the resolver to send a failure response.¶&lt;/p&gt;
    &lt;p&gt;See Section 2.4.2 for additional safeguards for recursive resolvers to implement to mitigate loops.¶&lt;/p&gt;
    &lt;p&gt;See Section 5.2 for possible optimizations of this procedure.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;4.2.1. DNS64&lt;/head&gt;
    &lt;p&gt;DNS64 resolvers synthesize responses to AAAA queries for names that only have an A record (Section 5.1.7 of [RFC6147]). SVCB-aware DNS64 resolvers SHOULD apply the same synthesis logic when resolving AAAA records for the TargetName for inclusion in the Additional section (Step 2 in Section 4.2) and MAY omit the A records from this section.¶&lt;/p&gt;
    &lt;p&gt;DNS64 resolvers MUST NOT extrapolate the AAAA synthesis logic to the IP hints in the SvcParams (Section 7.3). Modifying the IP hints would break DNSSEC validation for the SVCB record and would not improve performance when the above recommendation is implemented.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;4.3. General Requirements&lt;/head&gt;
    &lt;p&gt;Recursive resolvers MUST be able to convey SVCB records with unrecognized SvcParamKeys. Resolvers MAY accomplish this by treating the entire SvcParams portion of the record as opaque, even if the contents are invalid. If a recognized SvcParamKey is followed by a value that is invalid according to the SvcParam's specification, a recursive resolver MAY report an error such as SERVFAIL instead of returning the record. For complex value types whose interpretation might differ between implementations or have additional future allowed values added (e.g., URIs or "alpn"), resolvers SHOULD limit validation to specified constraints.¶&lt;/p&gt;
    &lt;p&gt;When responding to a query that includes the DNSSEC OK bit [RFC3225], DNSSEC-capable recursive and authoritative DNS servers MUST accompany each RRset in the Additional section with the same DNSSEC-related records that they would send when providing that RRset as an Answer (e.g., RRSIG, NSEC, NSEC3).¶&lt;/p&gt;
    &lt;p&gt;According to Section 5.4.1 of [RFC2181], "Unauthenticated RRs received and cached from ... the additional data section ... should not be cached in such a way that they would ever be returned as answers to a received query. They may be returned as additional information where appropriate." Recursive resolvers therefore MAY cache records from the Additional section for use in populating Additional section responses and MAY cache them for general use if they are authenticated by DNSSEC.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;4.4. EDNS Client Subnet (ECS)&lt;/head&gt;
    &lt;p&gt;The EDNS Client Subnet (ECS) option [RFC7871] allows recursive resolvers to request IP addresses that are suitable for a particular client IP range. SVCB records may contain IP addresses (in ipv*hint SvcParams) or direct users to a subnet-specific TargetName, so recursive resolvers SHOULD include the same ECS option in SVCB queries as in A/AAAA queries.¶&lt;/p&gt;
    &lt;p&gt;According to Section 7.3.1 of [RFC7871], "Any records from [the Additional section] MUST NOT be tied to a network." Accordingly, when processing a response whose QTYPE is SVCB-compatible, resolvers SHOULD treat any records in the Additional section as having SOURCE PREFIX-LENGTH set to zero and SCOPE PREFIX-LENGTH as specified in the ECS option. Authoritative servers MUST omit such records if they are not suitable for use by any stub resolvers that set SOURCE PREFIX-LENGTH to zero. This will cause the resolver to perform a follow-up query that can receive a properly tailored ECS. (This is similar to the usage of CNAME with the ECS option as discussed in [RFC7871], Section 7.2.1.)¶&lt;/p&gt;
    &lt;p&gt;Authoritative servers that omit Additional records can avoid the added latency of a follow-up query by following the advice in Section 10.2.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;5. Performance Optimizations&lt;/head&gt;
    &lt;p&gt;For optimal performance (i.e., minimum connection setup time), clients SHOULD implement a client-side DNS cache. Responses in the Additional section of a SVCB response SHOULD be placed in cache before performing any follow-up queries. With this behavior, and with conforming DNS servers, using SVCB does not add network latency to connection setup.¶&lt;/p&gt;
    &lt;p&gt;To improve performance when using a non-conforming recursive resolver, clients SHOULD issue speculative A and/or AAAA queries in parallel with each SVCB query, based on a predicted value of TargetName (see Section 10.2).¶&lt;/p&gt;
    &lt;p&gt;After a ServiceMode RRset is received, clients MAY try more than one option in parallel and MAY prefetch A and AAAA records for multiple TargetNames.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;5.1. Optimistic Pre-connection and Connection Reuse&lt;/head&gt;
    &lt;p&gt;If an address response arrives before the corresponding SVCB response, the client MAY initiate a connection as if the SVCB query returned NODATA but MUST NOT transmit any information that could be altered by the SVCB response until it arrives. For example, future SvcParamKeys could be defined that alter the TLS ClientHello.¶&lt;/p&gt;
    &lt;p&gt;Clients implementing this optimization SHOULD wait for 50 milliseconds before starting optimistic pre-connection, as per the guidance in [HappyEyeballsV2].¶&lt;/p&gt;
    &lt;p&gt;A SVCB record is consistent with a connection if the client would attempt an equivalent connection when making use of that record. If a SVCB record is consistent with an active or in-progress connection C, the client MAY prefer that record and use C as its connection. For example, suppose the client receives this SVCB RRset for a protocol that uses TLS over TCP:¶&lt;/p&gt;
    &lt;quote&gt;_1234._bar.example.com. 300 IN SVCB 1 svc1.example.net. ( ipv6hint=2001:db8::1 port=1234 ) SVCB 2 svc2.example.net. ( ipv6hint=2001:db8::2 port=1234 )¶&lt;/quote&gt;
    &lt;p&gt;If the client has an in-progress TCP connection to &lt;code&gt;[2001:db8::2]:1234&lt;/code&gt;,
it MAY proceed with TLS on that connection, even
though the other record in the RRset has higher priority.¶&lt;/p&gt;
    &lt;p&gt;If none of the SVCB records are consistent with any active or in-progress connection, clients proceed with connection establishment as described in Section 3.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;5.2. Generating and Using Incomplete Responses&lt;/head&gt;
    &lt;p&gt;When following the procedure in Section 4.2, recursive resolvers MAY terminate the procedure early and produce a reply that omits some of the associated RRsets. This is REQUIRED when the chain length limit is reached (Step 1 in Section 4.2) but might also be appropriate when the maximum response size is reached or when responding before fully chasing dependencies would improve performance. When omitting certain RRsets, recursive resolvers SHOULD prioritize information for smaller-SvcPriority records.¶&lt;/p&gt;
    &lt;p&gt;As discussed in Section 3, clients MUST be able to fetch additional information that is required to use a SVCB record, if it is not included in the initial response. As a performance optimization, if some of the SVCB records in the response can be used without requiring additional DNS queries, the client MAY prefer those records, regardless of their priorities.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;6. SVCB-Compatible RR Types&lt;/head&gt;
    &lt;p&gt;An RR type is called "SVCB-compatible" if it permits an implementation that is identical to SVCB in its:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;RDATA presentation format¶&lt;/item&gt;
      &lt;item&gt;RDATA wire format¶&lt;/item&gt;
      &lt;item&gt;IANA registry used for SvcParamKeys¶&lt;/item&gt;
      &lt;item&gt;Authoritative server Additional section processing¶&lt;/item&gt;
      &lt;item&gt;Recursive resolution process¶&lt;/item&gt;
      &lt;item&gt;Relevant Class (i.e., Internet ("IN") [RFC1035])¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This allows authoritative and recursive DNS servers to apply identical processing to all SVCB-compatible RR types.¶&lt;/p&gt;
    &lt;p&gt;All other behaviors described as applying to the SVCB RR also apply to all SVCB-compatible RR types unless explicitly stated otherwise. When following an AliasMode record (Section 2.4.2) of RR type $T, the follow-up query to the TargetName MUST also be for type $T.¶&lt;/p&gt;
    &lt;p&gt;This document defines one SVCB-compatible RR type (other than SVCB itself): the HTTPS RR type (Section 9), which avoids Attrleaf label prefixes [Attrleaf] in order to improve compatibility with wildcards and CNAMEs, which are widely used with HTTP.¶&lt;/p&gt;
    &lt;p&gt;Standards authors should consider carefully whether to use SVCB or define a new SVCB-compatible RR type, as this choice cannot easily be reversed after deployment.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;7. Initial SvcParamKeys&lt;/head&gt;
    &lt;p&gt;A few initial SvcParamKeys are defined here. These keys are useful for the "https" scheme, and most are expected to be generally applicable to other schemes as well.¶&lt;/p&gt;
    &lt;p&gt;Each new protocol mapping document MUST specify which keys are applicable and safe to use. Protocol mappings MAY alter the interpretation of SvcParamKeys but MUST NOT alter their presentation or wire formats.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;7.1. "alpn" and "no-default-alpn"&lt;/head&gt;
    &lt;p&gt;The "alpn" and "no-default-alpn" SvcParamKeys together indicate the set of Application-Layer Protocol Negotiation (ALPN) protocol identifiers [ALPN] and associated transport protocols supported by this service endpoint (the "SVCB ALPN set").¶&lt;/p&gt;
    &lt;p&gt;As with Alt-Svc [AltSvc], each ALPN protocol identifier is used to identify the application protocol and associated suite of protocols supported by the endpoint (the "protocol suite"). The presence of an ALPN protocol identifier in the SVCB ALPN set indicates that this service endpoint, described by TargetName and the other parameters (e.g., "port"), offers service with the protocol suite associated with this ALPN identifier.¶&lt;/p&gt;
    &lt;p&gt;Clients filter the set of ALPN identifiers to match the protocol suites they support, and this informs the underlying transport protocol used (such as QUIC over UDP or TLS over TCP). ALPN protocol identifiers that do not uniquely identify a protocol suite (e.g., an Identification Sequence that can be used with both TLS and DTLS) are not compatible with this SvcParamKey and MUST NOT be included in the SVCB ALPN set.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;7.1.1. Representation&lt;/head&gt;
    &lt;p&gt;ALPNs are identified by their registered "Identification Sequence" (&lt;code&gt;alpn-id&lt;/code&gt;), which is a sequence of 1-255 octets.¶&lt;/p&gt;
    &lt;quote&gt;alpn-id = 1*255OCTET¶&lt;/quote&gt;
    &lt;p&gt;For "alpn", the presentation &lt;code&gt;value&lt;/code&gt; SHALL be
a comma-separated list (Appendix A.1)
of one or more &lt;code&gt;alpn-id&lt;/code&gt;s.  Zone-file implementations MAY disallow the
"," and "\" characters in ALPN IDs instead of implementing the &lt;code&gt;value-list&lt;/code&gt; escaping
procedure, relying on the opaque key format (e.g., &lt;code&gt;key1=\002h2&lt;/code&gt;) in the
event that these characters are needed.¶&lt;/p&gt;
    &lt;p&gt;The wire-format value for "alpn" consists of at least one &lt;code&gt;alpn-id&lt;/code&gt; prefixed by its length as a single octet, and these length-value
pairs are concatenated to form the SvcParamValue.  These pairs MUST exactly
fill the SvcParamValue; otherwise, the SvcParamValue is malformed.¶&lt;/p&gt;
    &lt;p&gt;For "no-default-alpn", the presentation and wire-format values MUST be empty. When "no-default-alpn" is specified in an RR, "alpn" must also be specified in order for the RR to be "self-consistent" (Section 2.4.3).¶&lt;/p&gt;
    &lt;p&gt;Each scheme that uses this SvcParamKey defines a "default set" of ALPN IDs that are supported by nearly all clients and servers; this set MAY be empty. To determine the SVCB ALPN set, the client starts with the list of &lt;code&gt;alpn-id&lt;/code&gt;s from the "alpn" SvcParamKey, and it adds the default set unless the
"no-default-alpn" SvcParamKey is present.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;7.1.2. Use&lt;/head&gt;
    &lt;p&gt;To establish a connection to the endpoint, clients MUST¶&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Let SVCB-ALPN-Intersection be the set of protocols in the SVCB ALPN set that the client supports.¶&lt;/item&gt;
      &lt;item&gt;Let Intersection-Transports be the set of transports (e.g., TLS, DTLS, QUIC) implied by the protocols in SVCB-ALPN-Intersection.¶&lt;/item&gt;
      &lt;item&gt;For each transport in Intersection-Transports, construct a ProtocolNameList containing the Identification Sequences of all the client's supported ALPN protocols for that transport, without regard to the SVCB ALPN set.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For example, if the SVCB ALPN set is ["http/1.1", "h3"] and the client supports HTTP/1.1, HTTP/2, and HTTP/3, the client could attempt to connect using TLS over TCP with a ProtocolNameList of ["http/1.1", "h2"] and could also attempt a connection using QUIC with a ProtocolNameList of ["h3"].¶&lt;/p&gt;
    &lt;p&gt;Once the client has constructed a ClientHello, protocol negotiation in that handshake proceeds as specified in [ALPN], without regard to the SVCB ALPN set.¶&lt;/p&gt;
    &lt;p&gt;Clients MAY implement a fallback procedure, using a less-preferred transport if more-preferred transports fail to connect. This fallback behavior is vulnerable to manipulation by a network attacker who blocks the more-preferred transports, but it may be necessary for compatibility with existing networks.¶&lt;/p&gt;
    &lt;p&gt;With this procedure in place, an attacker who can modify DNS and network traffic can prevent a successful transport connection but cannot otherwise interfere with ALPN protocol selection. This procedure also ensures that each ProtocolNameList includes at least one protocol from the SVCB ALPN set.¶&lt;/p&gt;
    &lt;p&gt;Clients SHOULD NOT attempt connection to a service endpoint whose SVCB ALPN set does not contain any supported protocols.¶&lt;/p&gt;
    &lt;p&gt;To ensure consistency of behavior, clients MAY reject the entire SVCB RRset and fall back to basic connection establishment if all of the compatible RRs indicate "no-default-alpn", even if connection could have succeeded using a non-default ALPN protocol.¶&lt;/p&gt;
    &lt;p&gt;Zone operators SHOULD ensure that at least one RR in each RRset supports the default transports. This enables compatibility with the greatest number of clients.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;7.2. "port"&lt;/head&gt;
    &lt;p&gt;The "port" SvcParamKey defines the TCP or UDP port that should be used to reach this alternative endpoint. If this key is not present, clients SHALL use the authority endpoint's port number.¶&lt;/p&gt;
    &lt;p&gt;The presentation &lt;code&gt;value&lt;/code&gt; of the SvcParamValue is a single decimal integer
between 0 and 65535 in ASCII.  Any other &lt;code&gt;value&lt;/code&gt; (e.g., an empty value)
is a syntax error.  To enable simpler parsing, this SvcParamValue MUST NOT contain
escape sequences.¶&lt;/p&gt;
    &lt;p&gt;The wire format of the SvcParamValue is the corresponding 2-octet numeric value in network byte order.¶&lt;/p&gt;
    &lt;p&gt;If a port-restricting firewall is in place between some client and the service endpoint, changing the port number might cause that client to lose access to the service, so operators should exercise caution when using this SvcParamKey to specify a non-default port.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;7.3. "ipv4hint" and "ipv6hint"&lt;/head&gt;
    &lt;p&gt;The "ipv4hint" and "ipv6hint" keys convey IP addresses that clients MAY use to reach the service. If A and AAAA records for TargetName are locally available, the client SHOULD ignore these hints. Otherwise, clients SHOULD perform A and/or AAAA queries for TargetName per Section 3, and clients SHOULD use the IP address in those responses for future connections. Clients MAY opt to terminate any connections using the addresses in hints and instead switch to the addresses in response to the TargetName query. Failure to use A and/or AAAA response addresses could negatively impact load balancing or other geo-aware features and thereby degrade client performance.¶&lt;/p&gt;
    &lt;p&gt;The presentation &lt;code&gt;value&lt;/code&gt; SHALL be a comma-separated list (Appendix A.1)
of one or more IP addresses of the appropriate
family in standard textual format [RFC5952] [RFC4001].  To enable simpler parsing,
this SvcParamValue MUST NOT contain escape sequences.¶&lt;/p&gt;
    &lt;p&gt;The wire format for each parameter is a sequence of IP addresses in network byte order (for the respective address family). Like an A or AAAA RRset, the list of addresses represents an unordered collection, and clients SHOULD pick addresses to use in a random order. An empty list of addresses is invalid.¶&lt;/p&gt;
    &lt;p&gt;When selecting between IPv4 and IPv6 addresses to use, clients may use an approach such as Happy Eyeballs [HappyEyeballsV2]. When only "ipv4hint" is present, NAT64 clients may synthesize IPv6 addresses as specified in [RFC7050] or ignore the "ipv4hint" key and wait for AAAA resolution (Section 3). For best performance, server operators SHOULD include an "ipv6hint" parameter whenever they include an "ipv4hint" parameter.¶&lt;/p&gt;
    &lt;p&gt;These parameters are intended to minimize additional connection latency when a recursive resolver is not compliant with the requirements in Section 4 and SHOULD NOT be included if most clients are using compliant recursive resolvers. When TargetName is the service name or the owner name (which can be written as "."), server operators SHOULD NOT include these hints, because they are unlikely to convey any performance benefit.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;8. ServiceMode RR Compatibility and Mandatory Keys&lt;/head&gt;
    &lt;p&gt;In a ServiceMode RR, a SvcParamKey is considered "mandatory" if the RR will not function correctly for clients that ignore this SvcParamKey. Each SVCB protocol mapping SHOULD specify a set of keys that are "automatically mandatory", i.e., mandatory if they are present in an RR. The SvcParamKey "mandatory" is used to indicate any mandatory keys for this RR, in addition to any automatically mandatory keys that are present.¶&lt;/p&gt;
    &lt;p&gt;A ServiceMode RR is considered "compatible" by a client if the client recognizes all the mandatory keys and their values indicate that successful connection establishment is possible. Incompatible RRs are ignored (see step 5 of the procedure defined in Section 3).¶&lt;/p&gt;
    &lt;p&gt;The presentation &lt;code&gt;value&lt;/code&gt; SHALL be a comma-separated list
(Appendix A.1) of one or more valid
SvcParamKeys, either by their registered name or in the unknown-key format
(Section 2.1).  Keys MAY appear in any order but MUST NOT appear more
than once.  For self-consistency (Section 2.4.3), listed keys MUST also
appear in the SvcParams.¶&lt;/p&gt;
    &lt;p&gt;To enable simpler parsing, this SvcParamValue MUST NOT contain escape sequences.¶&lt;/p&gt;
    &lt;p&gt;For example, the following is a valid list of SvcParams:¶&lt;/p&gt;
    &lt;quote&gt;ipv6hint=... key65333=ex1 key65444=ex2 mandatory=key65444,ipv6hint¶&lt;/quote&gt;
    &lt;p&gt;In wire format, the keys are represented by their numeric values in network byte order, concatenated in strictly increasing numeric order.¶&lt;/p&gt;
    &lt;p&gt;This SvcParamKey is always automatically mandatory and MUST NOT appear in its own value-list. Other automatically mandatory keys SHOULD NOT appear in the list either. (Including them wastes space and otherwise has no effect.)¶&lt;/p&gt;
    &lt;head rend="h2"&gt;9. Using Service Bindings with HTTP&lt;/head&gt;
    &lt;p&gt;The use of any protocol with SVCB requires a protocol-specific mapping specification. This section specifies the mapping for the "http" and "https" URI schemes [HTTP].¶&lt;/p&gt;
    &lt;p&gt;To enable special handling for HTTP use cases, the HTTPS RR type is defined as a SVCB-compatible RR type, specific to the "https" and "http" schemes. Clients MUST NOT perform SVCB queries or accept SVCB responses for "https" or "http" schemes.¶&lt;/p&gt;
    &lt;p&gt;The presentation format of the record is:¶&lt;/p&gt;
    &lt;quote&gt;Name TTL IN HTTPS SvcPriority TargetName SvcParams¶&lt;/quote&gt;
    &lt;p&gt;All the SvcParamKeys defined in Section 7 are permitted for use in HTTPS RRs. The default set of ALPN IDs is the single value "http/1.1". The "automatically mandatory" keys (Section 8) are "port" and "no-default-alpn". (As described in Section 8, clients must either implement these keys or ignore any RR in which they appear.) Clients that restrict the destination port in "https" URIs (e.g., using the "bad ports" list from [FETCH]) SHOULD apply the same restriction to the "port" SvcParam.¶&lt;/p&gt;
    &lt;p&gt;The presence of an HTTPS RR for an origin also indicates that clients should connect securely and use the "https" scheme, as discussed in Section 9.5. This allows HTTPS RRs to apply to pre-existing "http" scheme URLs, while ensuring that the client uses a secure and authenticated connection.¶&lt;/p&gt;
    &lt;p&gt;The HTTPS RR parallels the concepts introduced in "HTTP Alternative Services" [AltSvc]. Clients and servers that implement HTTPS RRs are not required to implement Alt-Svc.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.1. Query Names for HTTPS RRs&lt;/head&gt;
    &lt;p&gt;The HTTPS RR uses Port Prefix Naming (Section 2.3), with one modification: if the scheme is "https" and the port is 443, then the client's original QNAME is equal to the service name (i.e., the origin's hostname), without any prefix labels.¶&lt;/p&gt;
    &lt;p&gt;By removing the Attrleaf labels [Attrleaf] used in SVCB, this construction enables offline DNSSEC signing of wildcard domains, which are commonly used with HTTP. Using the service name as the owner name of the HTTPS record, without prefixes, also allows the targets of existing CNAME chains (e.g., CDN hosts) to start returning HTTPS RR responses without requiring origin domains to configure and maintain an additional delegation.¶&lt;/p&gt;
    &lt;p&gt;The procedure for following HTTPS AliasMode RRs and CNAME aliases is unchanged from SVCB (as described in Sections 2.4.2 and 3).¶&lt;/p&gt;
    &lt;p&gt;Clients always convert "http" URLs to "https" before performing an HTTPS RR query using the process described in Section 9.5, so domain owners MUST NOT publish HTTPS RRs with a prefix of "_http".¶&lt;/p&gt;
    &lt;p&gt;Note that none of these forms alter the HTTPS origin or authority. For example, clients MUST continue to validate TLS certificate hostnames based on the origin.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.2. Comparison with Alt-Svc&lt;/head&gt;
    &lt;p&gt;Publishing a ServiceMode HTTPS RR in DNS is intended to be similar to transmitting an Alt-Svc field value over HTTP, and receiving an HTTPS RR is intended to be similar to receiving that field value over HTTP. However, there are some differences in the intended client and server behavior.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;9.2.1. ALPN Usage&lt;/head&gt;
    &lt;p&gt;Unlike Alt-Svc field values, HTTPS RRs can contain multiple ALPN IDs. The meaning and use of these IDs are discussed in Section 7.1.2.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;9.2.2. Untrusted Channels&lt;/head&gt;
    &lt;p&gt;HTTPS records do not require or provide any assurance of authenticity. (DNSSEC signing and verification, which would provide such assurance, are OPTIONAL.) The DNS resolution process is modeled as an untrusted channel that might be controlled by an attacker, so Alt-Svc parameters that cannot be safely received in this model MUST NOT have a corresponding defined SvcParamKey. For example, there is no SvcParamKey corresponding to the Alt-Svc "persist" parameter, because this parameter is not safe to accept over an untrusted channel.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;9.2.3. Cache Lifetime&lt;/head&gt;
    &lt;p&gt;There is no SvcParamKey corresponding to the Alt-Svc "ma" (max age) parameter. Instead, server operators encode the expiration time in the DNS TTL.¶&lt;/p&gt;
    &lt;p&gt;The appropriate TTL value might be different from the "ma" value used for Alt-Svc, depending on the desired efficiency and agility. Some DNS caches incorrectly extend the lifetime of DNS records beyond the stated TTL, so server operators cannot rely on HTTPS RRs expiring on time. Shortening the TTL to compensate for incorrect caching is NOT RECOMMENDED, as this practice impairs the performance of correctly functioning caches and does not guarantee faster expiration from incorrect caches. Instead, server operators SHOULD maintain compatibility with expired records until they observe that nearly all connections have migrated to the new configuration.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;9.2.4. Granularity&lt;/head&gt;
    &lt;p&gt;Sending Alt-Svc over HTTP allows the server to tailor the Alt-Svc field value specifically to the client. When using an HTTPS RR, groups of clients will necessarily receive the same SvcParams. Therefore, HTTPS RRs are not suitable for uses that require single-client granularity.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.3. Interaction with Alt-Svc&lt;/head&gt;
    &lt;p&gt;Clients that implement support for both Alt-Svc and HTTPS records and are making a connection based on a cached Alt-Svc response SHOULD retrieve any HTTPS records for the Alt-Svc alt-authority and ensure that their connection attempts are consistent with both the Alt-Svc parameters and any received HTTPS SvcParams. If present, the HTTPS record's TargetName and port are used for connection establishment (per Section 3). For example, suppose that "https://example.com" sends an Alt-Svc field value of:¶&lt;/p&gt;
    &lt;p&gt;The client would retrieve the following HTTPS records:¶&lt;/p&gt;
    &lt;quote&gt;alt.example. IN HTTPS 1 . alpn=h2,h3 foo=... alt2.example. IN HTTPS 1 alt2b.example. alpn=h3 foo=... _8443._https.example.com. IN HTTPS 1 alt3.example. ( port=9443 alpn=h2,h3 foo=... )¶&lt;/quote&gt;
    &lt;p&gt;Based on these inputs, the following connection attempts would always be allowed:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HTTP/2 to &lt;code&gt;alt.example:443&lt;/code&gt;¶&lt;/item&gt;
      &lt;item&gt;HTTP/3 to &lt;code&gt;alt3.example:9443&lt;/code&gt;¶&lt;/item&gt;
      &lt;item&gt;Fallback to the client's non-Alt-Svc connection behavior¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The following connection attempts would not be allowed:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HTTP/3 to &lt;code&gt;alt.example:443&lt;/code&gt;(not consistent with Alt-Svc)¶&lt;/item&gt;
      &lt;item&gt;Any connection to &lt;code&gt;alt2b.example&lt;/code&gt;(no ALPN ID consistent with both the HTTPS record and Alt-Svc)¶&lt;/item&gt;
      &lt;item&gt;HTTPS over TCP to any port on &lt;code&gt;alt3.example&lt;/code&gt;(not consistent with Alt-Svc)¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Suppose that "foo" is a SvcParamKey that renders the client SVCB-reliant. The following Alt-Svc-only connection attempts would be allowed only if the client does not support "foo", as they rely on SVCB-optional fallback behavior:¶&lt;/p&gt;
    &lt;p&gt;Alt-authorities SHOULD carry the same SvcParams as the origin unless a deviation is specifically known to be safe. As noted in Section 2.4 of [AltSvc], clients MAY disallow any Alt-Svc connection according to their own criteria, e.g., disallowing Alt-Svc connections that lack support for privacy features that are available on the authority endpoint.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.4. Requiring Server Name Indication&lt;/head&gt;
    &lt;p&gt;Clients MUST NOT use an HTTPS RR response unless the client supports the TLS Server Name Indication (SNI) extension and indicates the origin name in the TLS ClientHello (which might be encrypted via a future specification such as [ECH]). This supports the conservation of IP addresses.¶&lt;/p&gt;
    &lt;p&gt;Note that the TLS SNI (and also the HTTP "Host" or ":authority") will indicate the origin, not the TargetName.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.5. HTTP Strict Transport Security (HSTS)&lt;/head&gt;
    &lt;p&gt;An HTTPS RR directs the client to communicate with this host only over a secure transport, similar to HSTS [HSTS]. Prior to making an "http" scheme request, the client SHOULD perform a lookup to determine if any HTTPS RRs exist for that origin. To do so, the client SHOULD construct a corresponding "https" URL as follows:¶&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Replace the "http" scheme with "https".¶&lt;/item&gt;
      &lt;item&gt;If the "http" URL explicitly specifies port 80, specify port 443.¶&lt;/item&gt;
      &lt;item&gt;Do not alter any other aspect of the URL.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This construction is equivalent to Section 8.3 of [HSTS], Step 5.¶&lt;/p&gt;
    &lt;p&gt;If an HTTPS RR query for this "https" URL returns any AliasMode HTTPS RRs or any compatible ServiceMode HTTPS RRs (see Section 8), the client SHOULD behave as if it has received an HTTP 307 (Temporary Redirect) status code with this "https" URL in the "Location" field. (Receipt of an incompatible ServiceMode RR does not trigger the redirect behavior.) Because HTTPS RRs are received over an often-insecure channel (DNS), clients MUST NOT place any more trust in this signal than if they had received a 307 (Temporary Redirect) response over cleartext HTTP.¶&lt;/p&gt;
    &lt;p&gt;Publishing an HTTPS RR can potentially lead to unexpected results or a loss in functionality in cases where the "http" resource neither redirects to the "https" resource nor references the same underlying resource.¶&lt;/p&gt;
    &lt;p&gt;When an "https" connection fails due to an error in the underlying secure transport, such as an error in certificate validation, some clients currently offer a "user recourse" that allows the user to bypass the security error and connect anyway. When making an "https" scheme request to an origin with an HTTPS RR, either directly or via the above redirect, such a client MAY remove the user recourse option. Origins that publish HTTPS RRs therefore MUST NOT rely on user recourse for access. For more information, see Sections 8.4 and 12.1 of [HSTS].¶&lt;/p&gt;
    &lt;head rend="h3"&gt;9.6. Use of HTTPS RRs in Other Protocols&lt;/head&gt;
    &lt;p&gt;All HTTP connections to named origins are eligible to use HTTPS RRs, even when HTTP is used as part of another protocol or without an explicit HTTP-related URI scheme (Section 4.2 of [HTTP]). For example, clients that support HTTPS RRs and implement [WebSocket] using the altered opening handshake from [FETCH-WEBSOCKETS] SHOULD use HTTPS RRs for the &lt;code&gt;requestURL&lt;/code&gt;.¶&lt;/p&gt;
    &lt;p&gt;When HTTP is used in a context where URLs or redirects are not applicable (e.g., connections to an HTTP proxy), clients that find a corresponding HTTPS RR SHOULD implement security upgrade behavior equivalent to that specified in Section 9.5.¶&lt;/p&gt;
    &lt;p&gt;Such protocols MAY define their own SVCB mappings, which MAY be defined to take precedence over HTTPS RRs.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;10. Zone Structures&lt;/head&gt;
    &lt;head rend="h3"&gt;10.1. Structuring Zones for Flexibility&lt;/head&gt;
    &lt;p&gt;Each ServiceMode RRset can only serve a single scheme. The scheme is indicated by the owner name and the RR type. For the generic SVCB RR type, this means that each owner name can only be used for a single scheme. The underscore prefixing requirement (Section 2.3) ensures that this is true for the initial query, but it is the responsibility of zone owners to choose names that satisfy this constraint when using aliases, including CNAME and AliasMode records.¶&lt;/p&gt;
    &lt;p&gt;When using the generic SVCB RR type with aliasing, zone owners SHOULD choose alias target names that indicate the scheme in use (e.g., "foosvc.example.net" for "foo" schemes). This will help to avoid confusion when another scheme needs to be added to the configuration. When multiple port numbers are in use, it may be helpful to repeat the prefix labels in the alias target name (e.g., "_1234._foo.svc.example.net").¶&lt;/p&gt;
    &lt;head rend="h3"&gt;10.2. Structuring Zones for Performance&lt;/head&gt;
    &lt;p&gt;To avoid a delay for clients using a non-conforming recursive resolver, domain owners SHOULD minimize the use of AliasMode records and SHOULD choose TargetName according to a predictable convention that is known to the client, so that clients can issue A and/or AAAA queries for TargetName in advance (see Section 5). Unless otherwise specified, the convention is to set TargetName to the service name for an initial ServiceMode record, or to "." if it is reached via an alias.¶&lt;/p&gt;
    &lt;p&gt;Domain owners SHOULD avoid using a TargetName that is below a DNAME, as this is likely unnecessary and makes responses slower and larger. Also, zone structures that require following more than eight aliases (counting both AliasMode and CNAME records) are NOT RECOMMENDED.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;10.3. Operational Considerations&lt;/head&gt;
    &lt;p&gt;Some authoritative DNS servers may not allow A or AAAA records on names starting with an underscore (e.g., [BIND-CHECK-NAMES]). This could create an operational issue when the TargetName contains an Attrleaf label, or when using a TargetName of "." if the owner name contains an Attrleaf label.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;10.4. Examples&lt;/head&gt;
    &lt;head rend="h4"&gt;10.4.1. Protocol Enhancements&lt;/head&gt;
    &lt;p&gt;Consider a simple zone of the form:¶&lt;/p&gt;
    &lt;quote&gt;$ORIGIN simple.example. ; Simple example zone @ 300 IN A 192.0.2.1 AAAA 2001:db8::1¶&lt;/quote&gt;
    &lt;p&gt;The domain owner could add this record:¶&lt;/p&gt;
    &lt;quote&gt;@ 7200 IN HTTPS 1 . alpn=h3¶&lt;/quote&gt;
    &lt;p&gt;This record would indicate that "https://simple.example" supports QUIC in addition to HTTP/1.1 over TLS over TCP (the implicit default). The record could also include other information (e.g., a non-standard port). For "https://simple.example:8443", the record would be:¶&lt;/p&gt;
    &lt;quote&gt;_8443._https 7200 IN HTTPS 1 . alpn=h3¶&lt;/quote&gt;
    &lt;p&gt;These records also respectively tell clients to replace the scheme with "https" when loading "http://simple.example" or "http://simple.example:8443".¶&lt;/p&gt;
    &lt;head rend="h4"&gt;10.4.2. Apex Aliasing&lt;/head&gt;
    &lt;p&gt;Consider a zone that is using CNAME aliasing:¶&lt;/p&gt;
    &lt;quote&gt;$ORIGIN aliased.example. ; A zone that is using a hosting service ; Subdomain aliased to a high-performance server pool www 7200 IN CNAME pool.svc.example. ; Apex domain on fixed IPs because CNAME is not allowed at the apex @ 300 IN A 192.0.2.1 IN AAAA 2001:db8::1¶&lt;/quote&gt;
    &lt;p&gt;With HTTPS RRs, the owner of aliased.example could alias the apex by adding one additional record:¶&lt;/p&gt;
    &lt;quote&gt;@ 7200 IN HTTPS 0 pool.svc.example.¶&lt;/quote&gt;
    &lt;p&gt;With this record in place, HTTPS-RR-aware clients will use the same server pool for aliased.example and www.aliased.example. (They will also upgrade "http://aliased.example/..." to "https".) Non-HTTPS-RR-aware clients will just ignore the new record.¶&lt;/p&gt;
    &lt;p&gt;Similar to CNAME, HTTPS RRs have no impact on the origin name. When connecting, clients will continue to treat the authoritative origins as "https://www.aliased.example" and "https://aliased.example", respectively, and will validate TLS server certificates accordingly.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;10.4.3. Parameter Binding&lt;/head&gt;
    &lt;p&gt;Suppose that svc.example's primary server pool supports HTTP/3 but its backup server pool does not. This can be expressed in the following form:¶&lt;/p&gt;
    &lt;quote&gt;$ORIGIN svc.example. ; A hosting provider pool 7200 IN HTTPS 1 . alpn=h2,h3 HTTPS 2 backup alpn=h2 port=8443 pool 300 IN A 192.0.2.2 AAAA 2001:db8::2 backup 300 IN A 192.0.2.3 AAAA 2001:db8::3¶&lt;/quote&gt;
    &lt;p&gt;This configuration is entirely compatible with the "apex aliasing" example, whether the client supports HTTPS RRs or not. If the client does support HTTPS RRs, all connections will be upgraded to HTTPS, and clients will use HTTP/3 if they can. Parameters are "bound" to each server pool, so each server pool can have its own protocol, port number, etc.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;10.4.4. Multi-CDN Configuration&lt;/head&gt;
    &lt;p&gt;The HTTPS RR is intended to support HTTPS services operated by multiple independent entities, such as different CDNs or different hosting providers. This includes the case where a service is migrated from one operator to another, as well as the case where the service is multiplexed between multiple operators for performance, redundancy, etc.¶&lt;/p&gt;
    &lt;p&gt;This example shows such a configuration, with www.customer.example having different DNS responses to different queries, either over time or due to logic within the authoritative DNS server:¶&lt;/p&gt;
    &lt;quote&gt;; This zone contains/returns different CNAME records ; at different points in time. The RRset for "www" can ; only ever contain a single CNAME. ; Sometimes the zone has: $ORIGIN customer.example. ; A multi-CDN customer domain www 900 IN CNAME cdn1.svc1.example. ; and other times it contains: $ORIGIN customer.example. www 900 IN CNAME customer.svc2.example. ; and yet other times it contains: $ORIGIN customer.example. www 900 IN CNAME cdn3.svc3.example. ; With the following remaining constant and always included: $ORIGIN customer.example. ; A multi-CDN customer domain ; The apex is also aliased to www to match its configuration. @ 7200 IN HTTPS 0 www ; Non-HTTPS-aware clients use non-CDN IPs. A 203.0.113.82 AAAA 2001:db8:203::2 ; Resolutions following the cdn1.svc1.example ; path use these records. ; This CDN uses a different alternative service for HTTP/3. $ORIGIN svc1.example. ; domain for CDN 1 cdn1 1800 IN HTTPS 1 h3pool alpn=h3 HTTPS 2 . alpn=h2 A 192.0.2.2 AAAA 2001:db8:192::4 h3pool 300 IN A 192.0.2.3 AAAA 2001:db8:192:7::3 ; Resolutions following the customer.svc2.example ; path use these records. ; Note that this CDN only supports HTTP/2. $ORIGIN svc2.example. ; domain operated by CDN 2 customer 300 IN HTTPS 1 . alpn=h2 60 IN A 198.51.100.2 A 198.51.100.3 A 198.51.100.4 AAAA 2001:db8:198::7 AAAA 2001:db8:198::12 ; Resolutions following the cdn3.svc3.example ; path use these records. ; Note that this CDN has no HTTPS records. $ORIGIN svc3.example. ; domain operated by CDN 3 cdn3 60 IN A 203.0.113.8 AAAA 2001:db8:113::8¶&lt;/quote&gt;
    &lt;p&gt;Note that in the above example, the different CDNs have different configurations and different capabilities, but clients will use HTTPS RRs as a bound-together unit.¶&lt;/p&gt;
    &lt;p&gt;Domain owners should be cautious when using a multi-CDN configuration, as it introduces a number of complexities highlighted by this example:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;If CDN 1 supports a desired protocol or feature and CDN 2 does not, the client is vulnerable to downgrade by a network adversary who forces clients to get CDN 2 records.¶&lt;/item&gt;
      &lt;item&gt;Aliasing the apex to its subdomain simplifies the zone file but likely increases resolution latency, especially when using a non-HTTPS-aware recursive resolver. An alternative would be to alias the zone apex directly to a name managed by a CDN.¶&lt;/item&gt;
      &lt;item&gt;The A, AAAA, and HTTPS resolutions are independent lookups, so resolvers may observe and follow different CNAMEs to different CDNs. Clients may thus find that the A and AAAA responses do not correspond to the TargetName in the HTTPS response; these clients will need to perform additional queries to retrieve the correct IP addresses. Including ipv6hint and ipv4hint will reduce the performance impact of this case.¶&lt;/item&gt;
      &lt;item&gt;If not all CDNs publish HTTPS records, clients will sometimes receive NODATA for HTTPS queries (as with cdn3.svc3.example above) but could receive A/AAAA records from a different CDN. Clients will attempt to connect to this CDN without the benefit of its HTTPS records.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;10.4.5. Non-HTTP Uses&lt;/head&gt;
    &lt;p&gt;For protocols other than HTTP, the SVCB RR and an Attrleaf label [Attrleaf] will be used. For example, to reach an example resource of "baz://api.example.com:8765", the following SVCB record would be used to alias it to "svc4-baz.example.net.", which in turn could return AAAA/A records and/or SVCB records in ServiceMode:¶&lt;/p&gt;
    &lt;quote&gt;_8765._baz.api.example.com. 7200 IN SVCB 0 svc4-baz.example.net.¶&lt;/quote&gt;
    &lt;p&gt;HTTPS RRs use similar Attrleaf labels if the origin contains a non-default port.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;11. Interaction with Other Standards&lt;/head&gt;
    &lt;p&gt;This standard is intended to reduce connection latency and improve user privacy. Server operators implementing this standard SHOULD also implement TLS 1.3 [RFC8446] and Online Certificate Status Protocol (OCSP) Stapling (i.e., Certificate Status Request in Section 8 of [RFC6066]), both of which confer substantial performance and privacy benefits when used in combination with SVCB records.¶&lt;/p&gt;
    &lt;p&gt;To realize the greatest privacy benefits, this proposal is intended for use over a privacy-preserving DNS transport (like DNS over TLS [DoT] or DNS over HTTPS [DoH]). However, performance improvements, and some modest privacy improvements, are possible without the use of those standards.¶&lt;/p&gt;
    &lt;p&gt;Any specification for the use of SVCB with a protocol MUST have an entry for its scheme under the SVCB RR type in the IANA DNS "Underscored and Globally Scoped DNS Node Names" registry [Attrleaf]. The scheme MUST have an entry in the "Uniform Resource Identifier (URI) Schemes" registry [RFC7595] and MUST have a defined specification for use with SVCB.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;12. Security Considerations&lt;/head&gt;
    &lt;p&gt;SVCB/HTTPS RRs permit distribution over untrusted channels, and clients are REQUIRED to verify that the alternative endpoint is authoritative for the service (similar to Section 2.1 of [AltSvc]). Therefore, DNSSEC signing and validation are OPTIONAL for publishing and using SVCB and HTTPS RRs.¶&lt;/p&gt;
    &lt;p&gt;Clients MUST ensure that their DNS cache is partitioned for each local network, or flushed on network changes, to prevent a local adversary in one network from implanting a forged DNS record that allows them to track users or hinder their connections after they leave that network.¶&lt;/p&gt;
    &lt;p&gt;An attacker who can prevent SVCB resolution can deny clients any associated security benefits. A hostile recursive resolver can always deny service to SVCB queries, but network intermediaries can often prevent resolution as well, even when the client and recursive resolver validate DNSSEC and use a secure transport. These downgrade attacks can prevent the "https" upgrade provided by the HTTPS RR (Section 9.5) and can disable any other protections coordinated via SvcParams. To prevent downgrades, Section 3.1 recommends that clients abandon the connection attempt when such an attack is detected.¶&lt;/p&gt;
    &lt;p&gt;A hostile DNS intermediary might forge AliasMode "." records (Section 2.5.1) as a way to block clients from accessing particular services. Such an adversary could already block entire domains by forging erroneous responses, but this mechanism allows them to target particular protocols or ports within a domain. Clients that might be subject to such attacks SHOULD ignore AliasMode "." records.¶&lt;/p&gt;
    &lt;p&gt;A hostile DNS intermediary or authoritative server can return SVCB records indicating any IP address and port number, including IP addresses inside the local network and port numbers assigned to internal services. If the attacker can influence the client's payload (e.g., TLS session ticket contents) and an internal service has a sufficiently lax parser, the attacker could gain access to the internal service. (The same concerns apply to SRV records, HTTP Alt-Svc, and HTTP redirects.) As a mitigation, SVCB mapping documents SHOULD indicate any port number restrictions that are appropriate for the supported transports.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;13. Privacy Considerations&lt;/head&gt;
    &lt;p&gt;Standard address queries reveal the user's intent to access a particular domain. This information is visible to the recursive resolver, and to many other parties when plaintext DNS transport is used. SVCB queries, like queries for SRV records and other specific RR types, additionally reveal the user's intent to use a particular protocol. This is not normally sensitive information, but it should be considered when adding SVCB support in a new context.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;14. IANA Considerations&lt;/head&gt;
    &lt;head rend="h3"&gt;14.1. SVCB RR Type&lt;/head&gt;
    &lt;p&gt;IANA has registered the following new DNS RR type in the "Resource Record (RR) TYPEs" registry on the "Domain Name System (DNS) Parameters" page:¶&lt;/p&gt;
    &lt;head rend="h3"&gt;14.2. HTTPS RR Type&lt;/head&gt;
    &lt;p&gt;IANA has registered the following new DNS RR type in the "Resource Record (RR) TYPEs" registry on the "Domain Name System (DNS) Parameters" page:¶&lt;/p&gt;
    &lt;head rend="h3"&gt;14.3. New Registry for Service Parameters&lt;/head&gt;
    &lt;p&gt;IANA has created the "Service Parameter Keys (SvcParamKeys)" registry in the "Domain Name System (DNS) Parameters" category on a new page entitled "DNS Service Bindings (SVCB)". This registry defines the namespace for parameters, including string representations and numeric SvcParamKey values. This registry is shared with other SVCB-compatible RR types, such as the HTTPS RR.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;14.3.1. Procedure&lt;/head&gt;
    &lt;p&gt;A registration MUST include the following fields:¶&lt;/p&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;Number:&lt;/item&gt;
      &lt;item rend="dd-1"&gt;Wire-format numeric identifier (range 0-65535)¶&lt;/item&gt;
      &lt;item rend="dt-2"&gt;Name:&lt;/item&gt;
      &lt;item rend="dd-2"&gt;Unique presentation name¶&lt;/item&gt;
      &lt;item rend="dt-3"&gt;Meaning:&lt;/item&gt;
      &lt;item rend="dd-3"&gt;A short description¶&lt;/item&gt;
      &lt;item rend="dt-4"&gt;Reference:&lt;/item&gt;
      &lt;item rend="dd-4"&gt;Location of specification or registration source¶&lt;/item&gt;
      &lt;item rend="dt-5"&gt;Change Controller:&lt;/item&gt;
      &lt;item rend="dd-5"&gt;Person or entity, with contact information if appropriate¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The characters in the registered Name field entry MUST be lowercase alphanumeric or "-" (Section 2.1). The name MUST NOT start with "key" or "invalid".¶&lt;/p&gt;
    &lt;p&gt;The registration policy for new entries is Expert Review ([RFC8126], Section 4.5). The designated expert MUST ensure that the reference is stable and publicly available and that it specifies how to convert the SvcParamValue's presentation format to wire format. The reference MAY be any individual's Internet-Draft or a document from any other source with similar assurances of stability and availability. An entry MAY specify a reference of the form "Same as (other key name)" if it uses the same presentation and wire formats as an existing key.¶&lt;/p&gt;
    &lt;p&gt;This arrangement supports the development of new parameters while ensuring that zone files can be made interoperable.¶&lt;/p&gt;
    &lt;head rend="h4"&gt;14.3.2. Initial Contents&lt;/head&gt;
    &lt;p&gt;The "Service Parameter Keys (SvcParamKeys)" registry has been populated with the following initial registrations:¶&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Number&lt;/cell&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
        &lt;cell role="head"&gt;Reference&lt;/cell&gt;
        &lt;cell role="head"&gt;Change Controller&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;mandatory&lt;/cell&gt;
        &lt;cell&gt;Mandatory keys in this RR&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 8&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;alpn&lt;/cell&gt;
        &lt;cell&gt;Additional supported protocols&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 7.1&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;no-default-alpn&lt;/cell&gt;
        &lt;cell&gt;No support for default protocol&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 7.1&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;port&lt;/cell&gt;
        &lt;cell&gt;Port for alternative endpoint&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 7.2&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;ipv4hint&lt;/cell&gt;
        &lt;cell&gt;IPv4 address hints&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 7.3&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;ech&lt;/cell&gt;
        &lt;cell&gt;RESERVED (held for Encrypted ClientHello)&lt;/cell&gt;
        &lt;cell&gt;N/A&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;ipv6hint&lt;/cell&gt;
        &lt;cell&gt;IPv6 address hints&lt;/cell&gt;
        &lt;cell&gt;RFC 9460, Section 7.3&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;65280-65534&lt;/cell&gt;
        &lt;cell&gt;N/A&lt;/cell&gt;
        &lt;cell&gt;Reserved for Private Use&lt;/cell&gt;
        &lt;cell&gt;RFC 9460&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;65535&lt;/cell&gt;
        &lt;cell&gt;N/A&lt;/cell&gt;
        &lt;cell&gt;Reserved ("Invalid key")&lt;/cell&gt;
        &lt;cell&gt;RFC 9460&lt;/cell&gt;
        &lt;cell&gt;IETF&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;14.4. Other Registry Updates&lt;/head&gt;
    &lt;p&gt;Per [Attrleaf], the following entry has been added to the DNS "Underscored and Globally Scoped DNS Node Names" registry:¶&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;RR Type&lt;/cell&gt;
        &lt;cell role="head"&gt;_NODE NAME&lt;/cell&gt;
        &lt;cell role="head"&gt;Reference&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;HTTPS&lt;/cell&gt;
        &lt;cell&gt;_https&lt;/cell&gt;
        &lt;cell&gt;RFC 9460&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;15. References&lt;/head&gt;
    &lt;head rend="h3"&gt;15.1. Normative References&lt;/head&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;[ALPN]&lt;/item&gt;
      &lt;item rend="dd-1"&gt;Friedl, S., Popov, A., Langley, A., and E. Stephan, "Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301, , &amp;lt;https://www.rfc-editor.org/info/rfc7301&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-2"&gt;[Attrleaf]&lt;/item&gt;
      &lt;item rend="dd-2"&gt;Crocker, D., "Scoped Interpretation of DNS Resource Records through "Underscored" Naming of Attribute Leaves", BCP 222, RFC 8552, DOI 10.17487/RFC8552, , &amp;lt;https://www.rfc-editor.org/info/rfc8552&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-3"&gt;[DoH]&lt;/item&gt;
      &lt;item rend="dd-3"&gt;Hoffman, P. and P. McManus, "DNS Queries over HTTPS (DoH)", RFC 8484, DOI 10.17487/RFC8484, , &amp;lt;https://www.rfc-editor.org/info/rfc8484&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-4"&gt;[DoT]&lt;/item&gt;
      &lt;item rend="dd-4"&gt;Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D., and P. Hoffman, "Specification for DNS over Transport Layer Security (TLS)", RFC 7858, DOI 10.17487/RFC7858, , &amp;lt;https://www.rfc-editor.org/info/rfc7858&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-5"&gt;[HappyEyeballsV2]&lt;/item&gt;
      &lt;item rend="dd-5"&gt;Schinazi, D. and T. Pauly, "Happy Eyeballs Version 2: Better Connectivity Using Concurrency", RFC 8305, DOI 10.17487/RFC8305, , &amp;lt;https://www.rfc-editor.org/info/rfc8305&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-6"&gt;[HTTP]&lt;/item&gt;
      &lt;item rend="dd-6"&gt;Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke, Ed., "HTTP Semantics", STD 97, RFC 9110, DOI 10.17487/RFC9110, , &amp;lt;https://www.rfc-editor.org/info/rfc9110&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-7"&gt;[RFC1034]&lt;/item&gt;
      &lt;item rend="dd-7"&gt;Mockapetris, P., "Domain names - concepts and facilities", STD 13, RFC 1034, DOI 10.17487/RFC1034, , &amp;lt;https://www.rfc-editor.org/info/rfc1034&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-8"&gt;[RFC1035]&lt;/item&gt;
      &lt;item rend="dd-8"&gt;Mockapetris, P., "Domain names - implementation and specification", STD 13, RFC 1035, DOI 10.17487/RFC1035, , &amp;lt;https://www.rfc-editor.org/info/rfc1035&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-9"&gt;[RFC1928]&lt;/item&gt;
      &lt;item rend="dd-9"&gt;Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and L. Jones, "SOCKS Protocol Version 5", RFC 1928, DOI 10.17487/RFC1928, , &amp;lt;https://www.rfc-editor.org/info/rfc1928&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-10"&gt;[RFC2119]&lt;/item&gt;
      &lt;item rend="dd-10"&gt;Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/RFC2119, , &amp;lt;https://www.rfc-editor.org/info/rfc2119&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-11"&gt;[RFC2181]&lt;/item&gt;
      &lt;item rend="dd-11"&gt;Elz, R. and R. Bush, "Clarifications to the DNS Specification", RFC 2181, DOI 10.17487/RFC2181, , &amp;lt;https://www.rfc-editor.org/info/rfc2181&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-12"&gt;[RFC3225]&lt;/item&gt;
      &lt;item rend="dd-12"&gt;Conrad, D., "Indicating Resolver Support of DNSSEC", RFC 3225, DOI 10.17487/RFC3225, , &amp;lt;https://www.rfc-editor.org/info/rfc3225&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-13"&gt;[RFC3597]&lt;/item&gt;
      &lt;item rend="dd-13"&gt;Gustafsson, A., "Handling of Unknown DNS Resource Record (RR) Types", RFC 3597, DOI 10.17487/RFC3597, , &amp;lt;https://www.rfc-editor.org/info/rfc3597&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-14"&gt;[RFC4001]&lt;/item&gt;
      &lt;item rend="dd-14"&gt;Daniele, M., Haberman, B., Routhier, S., and J. Schoenwaelder, "Textual Conventions for Internet Network Addresses", RFC 4001, DOI 10.17487/RFC4001, , &amp;lt;https://www.rfc-editor.org/info/rfc4001&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-15"&gt;[RFC5234]&lt;/item&gt;
      &lt;item rend="dd-15"&gt;Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax Specifications: ABNF", STD 68, RFC 5234, DOI 10.17487/RFC5234, , &amp;lt;https://www.rfc-editor.org/info/rfc5234&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-16"&gt;[RFC5952]&lt;/item&gt;
      &lt;item rend="dd-16"&gt;Kawamura, S. and M. Kawashima, "A Recommendation for IPv6 Address Text Representation", RFC 5952, DOI 10.17487/RFC5952, , &amp;lt;https://www.rfc-editor.org/info/rfc5952&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-17"&gt;[RFC6066]&lt;/item&gt;
      &lt;item rend="dd-17"&gt;Eastlake 3rd, D., "Transport Layer Security (TLS) Extensions: Extension Definitions", RFC 6066, DOI 10.17487/RFC6066, , &amp;lt;https://www.rfc-editor.org/info/rfc6066&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-18"&gt;[RFC6147]&lt;/item&gt;
      &lt;item rend="dd-18"&gt;Bagnulo, M., Sullivan, A., Matthews, P., and I. van Beijnum, "DNS64: DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers", RFC 6147, DOI 10.17487/RFC6147, , &amp;lt;https://www.rfc-editor.org/info/rfc6147&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-19"&gt;[RFC7050]&lt;/item&gt;
      &lt;item rend="dd-19"&gt;Savolainen, T., Korhonen, J., and D. Wing, "Discovery of the IPv6 Prefix Used for IPv6 Address Synthesis", RFC 7050, DOI 10.17487/RFC7050, , &amp;lt;https://www.rfc-editor.org/info/rfc7050&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-20"&gt;[RFC7231]&lt;/item&gt;
      &lt;item rend="dd-20"&gt;Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content", RFC 7231, DOI 10.17487/RFC7231, , &amp;lt;https://www.rfc-editor.org/info/rfc7231&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-21"&gt;[RFC7595]&lt;/item&gt;
      &lt;item rend="dd-21"&gt;Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines and Registration Procedures for URI Schemes", BCP 35, RFC 7595, DOI 10.17487/RFC7595, , &amp;lt;https://www.rfc-editor.org/info/rfc7595&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-22"&gt;[RFC7871]&lt;/item&gt;
      &lt;item rend="dd-22"&gt;Contavalli, C., van der Gaast, W., Lawrence, D., and W. Kumari, "Client Subnet in DNS Queries", RFC 7871, DOI 10.17487/RFC7871, , &amp;lt;https://www.rfc-editor.org/info/rfc7871&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-23"&gt;[RFC8126]&lt;/item&gt;
      &lt;item rend="dd-23"&gt;Cotton, M., Leiba, B., and T. Narten, "Guidelines for Writing an IANA Considerations Section in RFCs", BCP 26, RFC 8126, DOI 10.17487/RFC8126, , &amp;lt;https://www.rfc-editor.org/info/rfc8126&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-24"&gt;[RFC8174]&lt;/item&gt;
      &lt;item rend="dd-24"&gt;Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174, , &amp;lt;https://www.rfc-editor.org/info/rfc8174&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-25"&gt;[RFC8446]&lt;/item&gt;
      &lt;item rend="dd-25"&gt;Rescorla, E., "The Transport Layer Security (TLS) Protocol Version 1.3", RFC 8446, DOI 10.17487/RFC8446, , &amp;lt;https://www.rfc-editor.org/info/rfc8446&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-26"&gt;[WebSocket]&lt;/item&gt;
      &lt;item rend="dd-26"&gt;Fette, I. and A. Melnikov, "The WebSocket Protocol", RFC 6455, DOI 10.17487/RFC6455, , &amp;lt;https://www.rfc-editor.org/info/rfc6455&amp;gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;15.2. Informative References&lt;/head&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;[AltSvc]&lt;/item&gt;
      &lt;item rend="dd-1"&gt;Nottingham, M., McManus, P., and J. Reschke, "HTTP Alternative Services", RFC 7838, DOI 10.17487/RFC7838, , &amp;lt;https://www.rfc-editor.org/info/rfc7838&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-2"&gt;[ANAME-DNS-RR]&lt;/item&gt;
      &lt;item rend="dd-2"&gt;Finch, T., Hunt, E., van Dijk, P., Eden, A., and W. Mekking, "Address-specific DNS aliases (ANAME)", Work in Progress, Internet-Draft, draft-ietf-dnsop-aname-04, , &amp;lt;https://datatracker.ietf.org/doc/html/draft-ietf-dnsop-aname-04&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-3"&gt;[BIND-CHECK-NAMES]&lt;/item&gt;
      &lt;item rend="dd-3"&gt;Internet Systems Consortium, "BIND v9.19.11 Configuration Reference: "check-names"", , &amp;lt;https://bind9.readthedocs.io/en/v9.19.11/reference.html#namedconf-statement-check-names&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-4"&gt;[DNAME]&lt;/item&gt;
      &lt;item rend="dd-4"&gt;Rose, S. and W. Wijngaards, "DNAME Redirection in the DNS", RFC 6672, DOI 10.17487/RFC6672, , &amp;lt;https://www.rfc-editor.org/info/rfc6672&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-5"&gt;[DNSTerm]&lt;/item&gt;
      &lt;item rend="dd-5"&gt;Hoffman, P., Sullivan, A., and K. Fujiwara, "DNS Terminology", BCP 219, RFC 8499, DOI 10.17487/RFC8499, , &amp;lt;https://www.rfc-editor.org/info/rfc8499&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-6"&gt;[ECH]&lt;/item&gt;
      &lt;item rend="dd-6"&gt;Rescorla, E., Oku, K., Sullivan, N., and C. A. Wood, "TLS Encrypted Client Hello", Work in Progress, Internet-Draft, draft-ietf-tls-esni-17, , &amp;lt;https://datatracker.ietf.org/doc/html/draft-ietf-tls-esni-17&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-7"&gt;[FETCH]&lt;/item&gt;
      &lt;item rend="dd-7"&gt;WHATWG, "Fetch Living Standard", , &amp;lt;https://fetch.spec.whatwg.org/&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-8"&gt;[FETCH-WEBSOCKETS]&lt;/item&gt;
      &lt;item rend="dd-8"&gt;WHATWG, "WebSockets Living Standard", , &amp;lt;https://websockets.spec.whatwg.org/&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-9"&gt;[HSTS]&lt;/item&gt;
      &lt;item rend="dd-9"&gt;Hodges, J., Jackson, C., and A. Barth, "HTTP Strict Transport Security (HSTS)", RFC 6797, DOI 10.17487/RFC6797, , &amp;lt;https://www.rfc-editor.org/info/rfc6797&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-10"&gt;[HTTP-DNS-RR]&lt;/item&gt;
      &lt;item rend="dd-10"&gt;Bellis, R., "A DNS Resource Record for HTTP", Work in Progress, Internet-Draft, draft-bellis-dnsop-http-record-00, , &amp;lt;https://datatracker.ietf.org/doc/html/draft-bellis-dnsop-http-record-00&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-11"&gt;[HTTP/3]&lt;/item&gt;
      &lt;item rend="dd-11"&gt;Bishop, M., Ed., "HTTP/3", RFC 9114, DOI 10.17487/RFC9114, , &amp;lt;https://www.rfc-editor.org/info/rfc9114&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-12"&gt;[RFC1912]&lt;/item&gt;
      &lt;item rend="dd-12"&gt;Barr, D., "Common DNS Operational and Configuration Errors", RFC 1912, DOI 10.17487/RFC1912, , &amp;lt;https://www.rfc-editor.org/info/rfc1912&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-13"&gt;[RFC6454]&lt;/item&gt;
      &lt;item rend="dd-13"&gt;Barth, A., "The Web Origin Concept", RFC 6454, DOI 10.17487/RFC6454, , &amp;lt;https://www.rfc-editor.org/info/rfc6454&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-14"&gt;[SRV]&lt;/item&gt;
      &lt;item rend="dd-14"&gt;Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for specifying the location of services (DNS SRV)", RFC 2782, DOI 10.17487/RFC2782, , &amp;lt;https://www.rfc-editor.org/info/rfc2782&amp;gt;.&lt;/item&gt;
      &lt;item rend="dt-15"&gt;[URI]&lt;/item&gt;
      &lt;item rend="dd-15"&gt;Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform Resource Identifier (URI): Generic Syntax", STD 66, RFC 3986, DOI 10.17487/RFC3986, , &amp;lt;https://www.rfc-editor.org/info/rfc3986&amp;gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Appendix A. Decoding Text in Zone Files&lt;/head&gt;
    &lt;p&gt;DNS zone files are capable of representing arbitrary octet sequences in basic ASCII text, using various delimiters and encodings, according to an algorithm defined in Section 5.1 of [RFC1035]. The following summarizes some allowed inputs to that algorithm, using ABNF:¶&lt;/p&gt;
    &lt;quote&gt;; non-special is VCHAR minus DQUOTE, ";", "(", ")", and "\". non-special = %x21 / %x23-27 / %x2A-3A / %x3C-5B / %x5D-7E ; non-digit is VCHAR minus DIGIT. non-digit = %x21-2F / %x3A-7E ; dec-octet is a number 0-255 as a three-digit decimal number. dec-octet = ( "0" / "1" ) 2DIGIT / "2" ( ( %x30-34 DIGIT ) / ( "5" %x30-35 ) ) escaped = "\" ( non-digit / dec-octet ) contiguous = 1*( non-special / escaped ) quoted = DQUOTE *( contiguous / ( ["\"] WSP ) ) DQUOTE char-string = contiguous / quoted¶&lt;/quote&gt;
    &lt;p&gt;The decoding algorithm allows &lt;code&gt;char-string&lt;/code&gt; to represent any &lt;code&gt;*OCTET&lt;/code&gt;,
using quoting to group values (e.g., those with internal whitespace), and
escaping to represent each non-printable octet as a single &lt;code&gt;escaped&lt;/code&gt; sequence.
In this document, this algorithm is referred to as "character-string decoding", because
Section 5.1 of [RFC1035] uses this
algorithm to produce a &lt;code&gt;&amp;lt;character-string&amp;gt;&lt;/code&gt;.  Note that while
the length of a &lt;code&gt;&amp;lt;character-string&amp;gt;&lt;/code&gt; is limited to 255 octets, the
character-string decoding algorithm can produce output of any length.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;A.1. Decoding a Comma-Separated List&lt;/head&gt;
    &lt;p&gt;In order to represent lists of items in zone files, this specification uses comma-separated lists. When the allowed items in the list cannot contain "," or "\", this is trivial. (For simplicity, empty items are not allowed.) A value-list parser that splits on "," and prohibits items containing "\" is sufficient to comply with all requirements in this document. This corresponds to the &lt;code&gt;simple-comma-separated&lt;/code&gt; syntax:¶&lt;/p&gt;
    &lt;quote&gt;; item-allowed is OCTET minus "," and "\". item-allowed = %x00-2B / %x2D-5B / %x5D-FF simple-item = 1*item-allowed simple-comma-separated = [simple-item *("," simple-item)]¶&lt;/quote&gt;
    &lt;p&gt;For implementations that allow "," and "\" in item values, the following escaping syntax applies:¶&lt;/p&gt;
    &lt;quote&gt;item = 1*OCTET escaped-item = 1*(item-allowed / "\," / "\\") comma-separated = [escaped-item *("," escaped-item)]¶&lt;/quote&gt;
    &lt;p&gt;Decoding of value-lists happens after character-string decoding. For example, consider these &lt;code&gt;char-string&lt;/code&gt; SvcParamValues:¶&lt;/p&gt;
    &lt;quote&gt;"part1,part2,part3\\,part4\\\\" part1\,\p\a\r\t2\044part3\092,part4\092\\¶&lt;/quote&gt;
    &lt;p&gt;These inputs are equivalent: character-string decoding either of them would produce the same &lt;code&gt;value&lt;/code&gt;:¶&lt;/p&gt;
    &lt;quote&gt;part1,part2,part3\,part4\\¶&lt;/quote&gt;
    &lt;p&gt;Applying comma-separated list decoding to this &lt;code&gt;value&lt;/code&gt; would produce a list
of three &lt;code&gt;item&lt;/code&gt;s:¶&lt;/p&gt;
    &lt;quote&gt;part1 part2 part3,part4\¶&lt;/quote&gt;
    &lt;head rend="h2"&gt;Appendix B. HTTP Mapping Summary&lt;/head&gt;
    &lt;p&gt;This table serves as a non-normative summary of the HTTP mapping for SVCB (Section 9). Future protocol mappings may provide a similar summary table.¶&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Mapped scheme&lt;/cell&gt;
        &lt;cell&gt;"https"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Other affected schemes&lt;/cell&gt;
        &lt;cell&gt;"http", "wss", "ws", (other HTTP-based)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;RR type&lt;/cell&gt;
        &lt;cell&gt;HTTPS (65)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Name prefix&lt;/cell&gt;
        &lt;cell&gt;None for port 443, else &lt;code&gt;_$PORT._https&lt;/code&gt;
&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Automatically mandatory keys&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;port&lt;/code&gt;, &lt;code&gt;no-default-alpn&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;SvcParam defaults&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;alpn&lt;/code&gt;: ["http/1.1"]&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Special behaviors&lt;/cell&gt;
        &lt;cell&gt;Upgrade from HTTP to HTTPS&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Keys that records must include&lt;/cell&gt;
        &lt;cell&gt;None&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Appendix C. Comparison with Alternatives&lt;/head&gt;
    &lt;p&gt;The SVCB and HTTPS RR types closely resemble, and are inspired by, some existing record types and proposals. One complaint regarding all of the alternatives is that web clients have seemed unenthusiastic about implementing them. The hope here is that an extensible solution that solves multiple problems will overcome this inertia and have a path to achieve client implementation.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;C.1. Differences from the SRV RR Type&lt;/head&gt;
    &lt;p&gt;An SRV record [SRV] can perform a function similar to that of the SVCB record, informing a client to look in a different location for a service. However, there are several differences:¶&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;SRV records are typically mandatory, whereas SVCB is intended to be optional when used with pre-existing protocols.¶&lt;/item&gt;
      &lt;item&gt;SRV records cannot instruct the client to switch or upgrade protocols, whereas SVCB can signal such an upgrade (e.g., to HTTP/2).¶&lt;/item&gt;
      &lt;item&gt;SRV records are not extensible, whereas SVCB and HTTPS RRs can be extended with new parameters.¶&lt;/item&gt;
      &lt;item&gt;SRV records specify a "weight" for unbalanced randomized load balancing. SVCB only supports balanced randomized load balancing, although weights could be added via a future SvcParam.¶&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;C.2. Differences from the Proposed HTTP Record&lt;/head&gt;
    &lt;p&gt;Unlike [HTTP-DNS-RR], this approach is extensible to cover Alt-Svc and Encrypted ClientHello use cases. Like that proposal, this addresses the zone-apex CNAME challenge.¶&lt;/p&gt;
    &lt;p&gt;Like that proposal, it remains necessary to continue to include address records at the zone apex for legacy clients.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;C.3. Differences from the Proposed ANAME Record&lt;/head&gt;
    &lt;p&gt;Unlike [ANAME-DNS-RR], this approach is extensible to cover Alt-Svc and Encrypted ClientHello use cases. This approach also does not require any changes or special handling on either authoritative or primary servers, beyond optionally returning in-bailiwick additional records.¶&lt;/p&gt;
    &lt;p&gt;Like that proposal, this addresses the zone-apex CNAME challenge for clients that implement this.¶&lt;/p&gt;
    &lt;p&gt;However, with this SVCB proposal, it remains necessary to continue to include address records at the zone apex for legacy clients. If deployment of this standard is successful, the number of legacy clients will fall over time. As the number of legacy clients declines, the operational effort required to serve these users without the benefit of SVCB indirection should fall. Server operators can easily observe how much traffic reaches this legacy endpoint and may remove the apex's address records if the observed legacy traffic has fallen to negligible levels.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;C.4. Comparison with Separate RR Types for AliasMode and ServiceMode&lt;/head&gt;
    &lt;p&gt;Abstractly, functions of AliasMode and ServiceMode are independent, so it might be tempting to specify them as separate RR types. However, this would result in serious performance impairment, because clients cannot rely on their recursive resolver to follow SVCB aliases (unlike CNAME). Thus, clients would have to issue queries for both RR types in parallel, potentially at each step of the alias chain. Recursive resolvers that implement the specification would, upon receipt of a ServiceMode query, emit both a ServiceMode query and an AliasMode query to the authoritative DNS server. Thus, splitting the RR type would double, or in some cases triple, the load on clients and servers, and would not reduce implementation complexity.¶&lt;/p&gt;
    &lt;head rend="h2"&gt;Appendix D. Test Vectors&lt;/head&gt;
    &lt;p&gt;These test vectors only contain the RDATA portion of SVCB/HTTPS records in presentation format, generic format [RFC3597], and wire format. The wire format uses hexadecimal (\xNN) for each non-ASCII byte. As the wire format is long, it is broken into several lines.¶&lt;/p&gt;
    &lt;head rend="h3"&gt;D.3. Failure Cases&lt;/head&gt;
    &lt;p&gt;This subsection contains test vectors that are not compliant with this document. The various reasons for non-compliance are explained with each example.¶&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://datatracker.ietf.org/doc/html/rfc9460"/></entry><entry><id>https://news.ycombinator.com/item?id=45236473</id><title>How the restoration of ancient Babylon is drawing tourists back to Iraq</title><updated>2025-09-14T05:09:01.888732+00:00</updated><content>&lt;doc fingerprint="b6c41b464ca1b51c"&gt;
  &lt;main&gt;
    &lt;p&gt;Mentioned in the sacred texts of all three Abrahamic faiths, the ancient Mesopotamian city of Babylon, in modern-day Iraq, is today undergoing a revival. Two World Monuments Fund (WMF) projects are nearing completion and much-needed cultural tourism is returning.&lt;/p&gt;
    &lt;p&gt;One project mitigates groundwater damage to the north retaining wall of the Ishtar Gate. The second is a restoration of the Temple of Ninmakh, dedicated to the Sumerian mother goddess. The team hopes there will be an official reopening for the temple this autumn, after which it will be available for gatherings such as weddings and concerts, as well as for the Babylon Festival, a celebration of international cultures that takes place every spring.&lt;/p&gt;
    &lt;p&gt;Largely funded by the US embassy in Baghdad, the restoration of the temple and the north retaining wall are part of the Future of Babylon Project, initiated 15 years ago, which aims to document, waterproof and stabilise structures throughout the 2,500-acre site. (The US embassy cancelled funding for a planned walkway spanning the site of the Ishtar Gate in July due to budget cuts.)&lt;/p&gt;
    &lt;head rend="h4"&gt;Visitor boom&lt;/head&gt;
    &lt;p&gt;The completion of these two projects coincides with a boom in tourism. Even in the midday heat, when tour guides refuse to emerge from their office, visitors from Romania, Russia and Iran enthusiastically explore attractions including the largely intact Lion of Babylon, the processional way and the museum next to a reconstructed Ishtar Gate.&lt;/p&gt;
    &lt;p&gt;The return of heritage tourism is one of Iraq’s few recent success stories. Even as sectarian tensions simmer and the electrical grid has yet to be restored 22 years after it was destroyed in the US invasion, Babylon is being reborn.&lt;/p&gt;
    &lt;p&gt;“We’ve had record numbers of visitors this year,” Raad Hamid Abdullah, Babylon’s antiquities and heritage inspector, tells The Art Newspaper. In 2024 Babylon hosted 43,530 Iraqi tourists and 5,370 foreign tourists, an increase from 36,957 Iraqi visitors and 4,109 foreigners in 2023, he says.&lt;/p&gt;
    &lt;p&gt;“Now even locals from the adjoining city of Babil are coming,” Abdullah says. “It has once more become a popular place for family gatherings and wedding parties,” he says, adding proudly, “Babylon is a symbol of Iraq.”&lt;/p&gt;
    &lt;head rend="h4"&gt;Babylon, the survivor&lt;/head&gt;
    &lt;p&gt;Around 80km south of Baghdad, comprising both the ruins of the ancient city as well as surrounding villages and agricultural areas, Babylon is a survivor. From its peak as the Neo-Babylonian capital under King Nebuchadnezzar II through to the Iraq War, when American and Polish troops ran roughshod over its ruins and a decade later, Islamic State (Isis) threatened its very existence, the ancient city has witnessed empires come and go.&lt;/p&gt;
    &lt;p&gt;Babylon has survived decades of looting and ongoing environmental challenges. Construction, too, has taken a toll over the years. In 1927 the British ran a railway line through the site, and in the 1980s Saddam Hussein built a highway through part of it, along with a palace for himself, complete with helipad. There are still three non-functioning oil pipelines, two built in the 1970s and 1980s and a more recent third one—work on it was blocked after Iraq’s General Authority for Antiquities and Heritage filed a lawsuit in 2012. Babylon was only recognised as a Unesco World Heritage Site in 2019.&lt;/p&gt;
    &lt;p&gt;Now the Egyptian architect Ahmed Abdelgawad, an expert in mud brick buildings, is working with the WMF to train locals in the traditional art that befits the Temple of Ninmakh, named after the mother goddess associated with creation, birth and healing who breathed life into humankind via small clay figures in their likeness.&lt;/p&gt;
    &lt;p&gt;Years of war-related damage and neglect combined with poorly executed mid-century “reconstruction” methods resulted in serious structural problems at the temple. Corrosion caused by the intrusion of increasingly salty groundwater is the product of prolonged droughts and soil erosion in climate-vulnerable Iraq.&lt;/p&gt;
    &lt;head rend="h4"&gt;Traditional mud-brick techniques&lt;/head&gt;
    &lt;p&gt;The archway at the entrance of Ninmakh’s inner sanctum—on the verge of collapse in 2022—was successfully restored at the end of May. “We had to totally dismantle the old arch,” Abdelgawad says. “It was full of cracks and worn by weather. So we took it apart and rebuilt it with mud bricks.”&lt;/p&gt;
    &lt;p&gt;The traditional art of making special low-salt mud brick begins with sourcing soil with low salt levels, which is then mixed with sand, grit and straw.&lt;/p&gt;
    &lt;p&gt;“This is the first arch in Iraq restored totally from mud bricks,” says Osama Hisham, the Future of Babylon project manager.&lt;/p&gt;
    &lt;p&gt;A similar but saltier mix of mud brick and bitumen was used to repair the wooden roof of the temple, which was being eroded by termites.&lt;/p&gt;
    &lt;p&gt;Hisham says the temple now comprises poplar timber from the forests of Mosul in northern Iraq, mud from Babylon and reeds from the marshes in the south. A place that has symbolised the heart of Iraq has now been restored with materials from across the nation.&lt;/p&gt;
    &lt;head rend="h4"&gt;Groundwater zapping&lt;/head&gt;
    &lt;p&gt;Meanwhile, the north retaining walls at the Ishtar Gate, reconstructed in the past century with cement that damaged the remains of the historical monument, were demolished and replaced with new retaining walls providing better water management. These new walls—essentially boxes filled with stones, based on an ancient Egyptian construction technique, Hisham says—absorb sunlight from the southern side and effectively vaporise groundwater coming from the northern side.&lt;/p&gt;
    &lt;p&gt;The Babylonians, he says, dealt with groundwater intrusion by creating an elevation by“cutting the arch of the gate and burying it, then using it as a foundation for a new gate”. As a result of this technique, the Ishtar Gate built by Nebuchadnezzar II, where the WMF is currently finishing work on the north retaining wall, is seven metres below the ancient city, with only two metres remaining above.&lt;/p&gt;
    &lt;head rend="h4"&gt;Disintegration&lt;/head&gt;
    &lt;p&gt;A subsequent spectacular blue-glazed gate Nebuchadnezzar II built on top of that gate gradually disintegrated in the aftermath of the fall of the Babylonian Empire in the sixth century BC. A replica installed in the 1950s now greets visitors to Babylon.&lt;/p&gt;
    &lt;p&gt;Many Iraqis would like to see the reconstruction of the Ishtar Gate returned from the Pergamon Museum in Berlin. The gate is made of brick fragments from excavations carried out by the Deutsche Orient-Gesellschaft (German Oriental Society) from 1899 to 1917.&lt;/p&gt;
    &lt;p&gt;But Hisham says that even the Ishtar Gate in Berlin is only 20% original. The gate in Babylon, he points out, is 80% original.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theartnewspaper.com/2025/09/12/how-the-restoration-of-ancient-babylon-is-helping-to-draw-tourists-back-to-iraq"/></entry><entry><id>https://news.ycombinator.com/item?id=45236774</id><title>Visual programming is stuck on the form</title><updated>2025-09-14T05:09:01.376677+00:00</updated><content>&lt;doc fingerprint="3a839a010e6409d9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Visual programming is stuck on the form&lt;/head&gt;
    &lt;p&gt;Underlying great creations that you love—be it music, art, or technology—its form (what it looks like) is driven by an underpinning internal logic (how it works). I noticed this pattern while watching a talk on cellular automaton and realized it's "form follows function" paraphrased from a slightly different angle. Inventing a form is a hard task, so you must approach it obliquely—by first illuminating the underlying function.&lt;/p&gt;
    &lt;p&gt;This made me realize something crucial about visual programming: it’s stuck on form, rather than letting form follow function. Visual programming has long been trapped in the node-and-wires paradigm because its designers are overly fixated on form, neglecting the underlying function that should drive it. So as a whole, the field is stuck in a local minima. How can we break out of it and how can we find a function for the field that underpins the form?&lt;/p&gt;
    &lt;head rend="h2"&gt;A clue from CellPond&lt;/head&gt;
    &lt;p&gt;I was watching a talk and was struck not just by the presentation but also by a specific quote from Lu Wilson in a talk about CellPond–a visual programming language that expanded my expectations for cellular automata. And that's given that I'd already seen my share of the Game of Life by John Conway and read lots of A New Kind of Science by Stephen Wolfram.&lt;/p&gt;
    &lt;p&gt;But even though Lu Wilson spent the last 10 minutes showing you the fantastic visuals, none of that was the point. The actual tasty result is that there is a virtual machine with only four operations underlying the CellPond system. And these four operations correspond with memory operations we're familiar with in CPUs: read, write, allocate, and deallocate. To me, that connection was utterly surprising. The grid of patterns (form) was informed and driven by the underlying virtual machine (function).&lt;/p&gt;
    &lt;quote&gt;"I think if you were to learn from CellPond, you'd take away not just the UI—but you can take the UI too if you want. I was very surprised by this because, in all my reading of past solutions to these problems, they were all about the high-level user interface; they were about the UI. I thought I'd have to build layers upon layers of UI, but really, as soon as the low-level stuff was sorted out, the UI just figured itself out."&lt;lb/&gt;- Lu Wilson (🐤 · 🦋)&lt;/quote&gt;
    &lt;p&gt;I wondered: how did Lu Wilson come up with the underlying function? It seemed magical. This puzzling revelation made me realize it wasn’t just about the UI—there was a deeper principle at play.&lt;/p&gt;
    &lt;head rend="h2"&gt;Form follows function&lt;/head&gt;
    &lt;p&gt;In the subsequent months, I kept turning it over in my head. The key lay with the opening quote.&lt;/p&gt;
    &lt;quote&gt;When you figure out the low-level stuff, the UI all falls into place.&lt;/quote&gt;
    &lt;p&gt;It wasn't until a drive while I was listening to Paul Graham's A Taste for Makers that I made the connection. The CellPond talk was a demonstration of the oft-repeated adage of "form follows function." Here's the relevant excerpt:&lt;/p&gt;
    &lt;quote&gt;In art, the highest place has traditionally been given to paintings of people. There is something to this tradition, and not just because pictures of faces get to press buttons in our brains that other pictures don't. We are so good at looking at faces that we force anyone who draws them to work hard to satisfy us. If you draw a tree and you change the angle of a branch five degrees, no one will know. When you change the angle of someone's eye five degrees, people notice.&lt;lb/&gt;When Bauhaus designers adopted Sullivan's "form follows function," what they meant was, form should follow function. And if function is hard enough, form is forced to follow it, because there is no effort to spare for error. Wild animals are beautiful because they have hard lives."&lt;lb/&gt;- Paul Graham A Taste for Makers&lt;/quote&gt;
    &lt;p&gt;Honestly, I had never thought much about "form follows function." It seems obvious enough when you hear it for the first time. Sure, given an interface, why else would it express anything other than its purpose? It would seem counterproductive otherwise.&lt;/p&gt;
    &lt;p&gt;It wasn't until I was forced to invent a form did I really understood what it meant. The adage "form follows function" is for those tasked to invent the form, not for when you're given it. In my own words, it's this:&lt;/p&gt;
    &lt;p&gt;If a design is any good, how something looks, feels, and works is a naked expression of its function, its algebra, its rationality–its underlying nature. To design a form, you should not just come up with it out of thin air. You have to attack the problem obliquely and work out its function first. Once the function–the underlying nature, internal consistency, and algebra–is worked out, the form will fall out as a consequence of it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Three faces of function&lt;/head&gt;
    &lt;p&gt;What I mean by "underlying nature" isn't that it exists independently of human creation; rather, every design is embedded in an environment that shapes its intrinsic properties. The function of anything useful is always in the context of its environment. When we understand the context of a well-designed thing, we understand why it looks the way it does. An animal form reflects its adaptation to the ecological niche in its environment.&lt;/p&gt;
    &lt;p&gt;By "rationality", I mean some kind of internal consistency. The function of something well-designed will have a certain repeated symmetry. Given a choice of design, it'll consistently use the same thing in as many scenarios as possible. Good game design enables a single item to serve multiple functions. The gravity gun in Half-Life 2 enables players to pick up and launch objects. It's used for turning environmental items into weapons, solving physics-based puzzles, and for navigating hard-to-reach areas. In Minecraft, the water bucket can extinguish fires, create waterfalls for safe descent, irrigate farmland, and serve as a barrier against certain enemies.&lt;/p&gt;
    &lt;p&gt;By "algebra", I mean a set of rules about how a design's components compose. Most games have a physics engine that computes how objects in a game interact with each other in space. It's a "movement calculator." Legend of Zelda: Breath of the Wild additionally has a chemistry engine that it uses to compute how different materials interact with each other. It's a "state calculator."&lt;/p&gt;
    &lt;p&gt;In summary, function represents the intangible structure governing the relationships, interactions, and contextual fit of a design’s underlying components. A form can't exist outside of its function, and its function is shaped by its environment. We can observe and interact with the form directly, but not its function. We can exist in the environment, but the function is invisible to us without a lot of work to infer it.&lt;/p&gt;
    &lt;p&gt;A form not informed by function feels disjointed, inconsistent, and frustrating. Without an underlying function to underpin the form, the shape of form is simply at the inconsistent whims of the designer. Functions keep designers honest about the purpose of form: in service of function. Of course you can explore and play with form independent of function, but that's the jurisdiction of art, not design.&lt;/p&gt;
    &lt;head rend="h2"&gt;To invent a form, start with the function&lt;/head&gt;
    &lt;p&gt;"Form follows function" is advice for people making something, especially those whose work has a very visible interface facing the end user. To invent a form, start with the function. But it's easy to make errors of two kinds, even if you already know this in your head.&lt;/p&gt;
    &lt;p&gt;The first kind of error is to pursue form without considering function. Instead, you must ignore the form, at least initially, and focus on figuring out the function first. This is largely due to the intangible nature of function. It's an easy mistake to focus on form, even far into your creative career.&lt;/p&gt;
    &lt;p&gt;This mistake is understandable. Whenever people interact with anything, their initial contact is the interface—the bridge between user and design. For anyone new to something, it's natural to start by engaging with that interface, because it's what they're most familiar with. So when they turn around to make something in that domain, they start with the interface, the form. You can see this readily: new creatives in a field start by copying the masters before finding their own voice.&lt;/p&gt;
    &lt;p&gt;It's also understandable because function is largely more abstract and more intangible than form. It's harder to get a grip on something amorphous, and you may have to start off with something concrete. It can be part of the process to draw up concrete examples first. In fact, when confronted with an unfamiliar domain, this can be quite productive in getting a handle on it. But it can be easy to forget and take a step back and ask: "what is the common underlying logic or abstraction to all these examples?" When you are able to take a step back, you're using the concrete examples as a stepping stone to figuring out the underlying function.&lt;/p&gt;
    &lt;p&gt;The error of the second kind is pursuing function without considering the user. As a warning for those that lean too far on the other side of the precipice, this doesn't mean you can ignore the end user when figuring out the function. If we could represent the utility of the underlying function as a vector, it would still need to point in the direction of the user. The underlying function must support and give context to the visible form built on top. Both are built so the direction and magnitude of their utility vector can support the user in the direction of their goals.&lt;/p&gt;
    &lt;p&gt;Too many back-end engineers misinterpret 'form follows function' as a license to design arbitrary database tables and APIs, assuming that the front end will compensate. That's how we get terrible interfaces where the end user needs to be aware of the data model to use it effectively, like Git.&lt;/p&gt;
    &lt;p&gt;When it comes to visual programming, I think it's stuck in the error of the first kind, with its focus on form.&lt;/p&gt;
    &lt;head rend="h2"&gt;Visual programming is not just node-and-wires&lt;/head&gt;
    &lt;p&gt;Node-and-wire diagrams have become a lazy default. Most visual language designers never ask whether those boxes and arrows genuinely help programmers. It’s a classic case of letting form precede function.&lt;/p&gt;
    &lt;p&gt;When one looks through the Visual Programming Codex, it's obvious an overwhelming majority are based on the node-and-wires model. Not just that, but there are mostly only two variations:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The nodes represent data, and the wires represent functions&lt;/item&gt;
      &lt;item&gt;The nodes represent functions, and the wires represent data shunted between functions.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Did many of them settle on it because it's the best visual representation to help aid the process of programming? Or did they use it because they're mimicking an existing form?&lt;/p&gt;
    &lt;p&gt;I think node-and-wires is popular because visual programming designers make the fundamental assumption that the underlying nature and logic of programming is just traditional textual programming. If that's your assumption, then you'd naturally think all you have to do is find visual representations for existing textual language constructs. Hence node-and-wires is the form you get when you take pure functions as the underlying logic underpinning the form.&lt;/p&gt;
    &lt;p&gt;On first glance, node-and-wires seem like a good fit. The wires going into a node are like the input parameters of a pure function, and the wires going out are like the output value. But what about differentiating between the definition of a function versus calling it? Often in node-and-wires visual languages, there's no separation. The definition is the application. What about passing around functions or thunks? Much of the power in pure functional programming lies in the power of higher-order functions, and I haven't seen very good node-and-wires representation of that. After decades of trying, most pure functional programming is still largely expressed in text. To me, that's damning evidence against the practice of using nodes-and-wires to model functions. Text is still the better form for expressing the underlying logic of functional programming.&lt;/p&gt;
    &lt;p&gt;Imperative programming with node-and-wires fares no better. A loop in LabVIEW gives no more advantage or clarity over writing it in text. Seeing the totality of a sequence of steps in parallel in a circuit-like diagram doesn't solve the fundamental problem with imperative programs; it doesn't help the developer understand combinatorial state explosions or state changes over time.&lt;/p&gt;
    &lt;p&gt;I think where node-and-wires have provided the biggest advantage is in specific domains in which a) there's massive value to examine intermediate data and values between transformations and b) there's a well-known visual representation of that intermediate data and value. This has been demonstrated in visual languages like Unreal Engine's Blueprint for game programming shaders and Max/MSP for sound synthesis in music. But these have been limited to these narrow domains. Visual programming has not found a foothold in general purpose programming domains.&lt;/p&gt;
    &lt;head rend="h2"&gt;Modeling problems&lt;/head&gt;
    &lt;p&gt;What then, if not node-and-wires? The aim here is to uncover an alternative underlying logic—one that can more effectively drive the form in visual programming. How would you go about finding another underlying function in "form follows function" if not the current programming paradigms we know? I think this is the wrong question. Although correct in direction and spirit, I think a better question is: how should we model problems that can leverage the computational power of our visual cortex?&lt;/p&gt;
    &lt;p&gt;We write programs primarily to model and solve real-world problems. We go through the exercise of encoding the problem model in programming languages, because we can automate the generation of solutions. And the reason why we keep banging on the visual programming door is because we understand intuitively that our visual cortex is an under-leveraged power tool.&lt;/p&gt;
    &lt;p&gt;The human visual cortex is a powerful pattern recognition apparatus. It can quickly compare lengths, distinguish foreground from background, recognize spatial patterns, and other amazing feats of perception, all at a glance. We leverage it in data visualizations to make sense of large quantities of data, but we haven't been able to leverage it to make sense of computational systems.&lt;/p&gt;
    &lt;p&gt;If we had a visual programming language that could leverage the human visual cortex, then at any zoom-level of abstraction, at a glance we could understand the overall structure of the program as it relates to the domain at that level of abstraction. And if we were looking at a running program, then we could get an idea of the overall state and process. Yes, we have bespoke visualizations of running programs in the form of metrics and dashboards. But we don't have a universal visual language to represent the structure or state of a program that applies to different programs.&lt;/p&gt;
    &lt;p&gt;What about text? Aren't textual glyphs a kind of visual language? Not in the way I mean. For text to be considered a visual programming language, it'd have to leverage the human visual cortex at different zoom-levels of the program. Certainly, with syntax highlighting we leverage the visual cortex and use color to distinguish between different syntactical elements. This counts. But we only get this at the level of a function. It doesn't apply when we zoom out to the overall structure of the code base. And there's certainly no zoom-out level in which we get visual understanding at the level of the problem domain.&lt;/p&gt;
    &lt;p&gt;The closest thing I can think of that might fit the bill is APL and its ilk. By condensing operators into single characters, sequences form idioms. Just as we recognize whole words rather than individual letters, idioms allow us to comprehend entire operations without parsing each symbol. So as you zoom out of the code, you can see the meaning of the code by identifying common idioms. Strangely, it seems many APL environments don't feature syntax highlighting.&lt;/p&gt;
    &lt;p&gt;So if visual programming is to be useful, I think the angle of attack is to find a way to model problems, and this might not be the same way that we model problems in textual languages–even if the underpinning implementation is all lambdas and Turing machines. So how do we model problems?&lt;/p&gt;
    &lt;head rend="h2"&gt;Entities and relationships&lt;/head&gt;
    &lt;p&gt;I'll say up front, I don't know what modeling problems should look like. Nonetheless, it seems there are two main aspects for any system we're interested in:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;visually representing the entities in a problem domain&lt;/item&gt;
      &lt;item&gt;visually representing the entity relationships.[2]&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Regardless of the paradigm, imperative, object-oriented, functional, or logical, there are both "entities" (structs, objects, compound values, terms) and "how they relate" (imperative processes, messages, functions, rules and predicates). If I had to take a stab at it, I'd start here.&lt;/p&gt;
    &lt;p&gt;Of the two, representing the different entities in a problem domain seems more amenable to visual programming because they're nouns. Most of the things we see around us are nouns. Hence, we can imagine that inert data representing entities would have a canonical visual representation. But even then, entities often have far more attributes than we might want to visualize at a time to understand its purpose and behavior. How do we choose what attribute is important to show? And what should be the visual form for the attribute in these entities?&lt;/p&gt;
    &lt;p&gt;The two questions are related, but to drive the point home, I'll focus on the second one. If we have some struct with two attributes in some generic language, how would we visually represent them?&lt;/p&gt;
    &lt;code&gt;struct Foo {
  bar: float,
  baz: float
}&lt;/code&gt;
    &lt;p&gt;We might think a universally useful representation of a collection of these instances is two histograms: one for &lt;code&gt;bar&lt;/code&gt; and one for &lt;code&gt;baz&lt;/code&gt;. For any given instance, its corresponding value could be highlighted on the histogram.&lt;/p&gt;
    &lt;p&gt;Is this useful? Answer depends on our task at hand. There's no one-size-fits-all visualization of entities. What if I told you &lt;code&gt;bar&lt;/code&gt; is an x-coordinate and &lt;code&gt;baz&lt;/code&gt; is the y-coordinate? Now, perhaps a visualization that's more fitting is a scatterplot where each instance is represented as an &lt;code&gt;x&lt;/code&gt;. We put the relationship between &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; in a spatial relationship to see if our visual cortex could recognize a pattern.&lt;/p&gt;
    &lt;p&gt;In the histogram visualization, I wouldn't be able to use my visual cortex to discern the relationships between &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; traces out a flower. However, in the spatial canvas visualization, I could easily see the flower trace because by pitting &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; in a spatial relationship, I'm creating a mapping that makes an affordance for my visual cortex.&lt;/p&gt;
    &lt;p&gt;This only worked because there was a spatial relationship between &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;, especially if I know they represent &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates. We couldn't just look at the data and easily discern what visualization to use. The label and the intention of the user also give meaning to what visualization is best suited for an entity. Hence, I think there's no one-size-fits-all visualization for entities. There's no single mapping of attributes to visualizations that makes sense, unless the user's intention and goals remain fixed. &lt;/p&gt;
    &lt;p&gt;Besides entities, every program encodes relationships between its entities. How do we visually represent their relationships in a way that's illuminating at a glance without devolving into an illegible spaghetti mess? Relationships can be harder to model, because they're typically invisible to us, as they're often inferred.&lt;/p&gt;
    &lt;p&gt;Like the example with representing entities visually, representing relationships visually is likely to depend on both the goals of the user as well as the meaning of the entities at hand. I suspect a good visual representation of the relationship between two tables in a query is going to be different than a good visual representation of the relationship between two pieces of middleware in a web stack. However, I do think we can do better than a line.&lt;/p&gt;
    &lt;p&gt;The go-to representation of a relationship is often the line or an arrow, where it connects two things on the canvas together. The trouble with lines is that they doesn't scale with the visual cortex. After a couple dozen lines, we lose track of any sense of the overall relationships between entities. But I don't think this can be the only way. The visual cortex also relates visual elements if they have the same color or if they're spatially clustered together. As the previous example on a plot of &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; showed, relationships could be spatial, by which we can plot them spatially to reveal relationships, without directly drawing lines and arrows everywhere.&lt;/p&gt;
    &lt;p&gt;As before, it's hard to draw any generally productive conclusions on how to best visually represent relationships between entities without knowing the goal of the user as well as the meaning behind the entity and relationships we're trying to represent. The only point I'm trying to drive home is that we have more tools at our disposal besides lines and arrows, because the visual cortex is perceptive and discerning about colors, groupings, and motion. We typically use these visual elements haphazardly, if at all, rather than as a deliberate attempt to leverage it for understanding. And that's just in graphic design and data visualization. It's completely overlooked in program structure, debugging, and domain problem modeling.&lt;/p&gt;
    &lt;p&gt;At this point, those that hear entities and relationships might be drawn to ask, isn't this just object-oriented programming? It is true that object-oriented thinking trains you to identify entities in the problem domain and model their relationships through method calls and messaging. However, object-oriented programs suffer from private state whose effects are observable from the outside littered everywhere, making it hard to reason about program behavior. What I'm saying is orthogonal to and doesn't invalidate what we've learned about structuring programs in the past 3 decades. To sum up, I'm saying the unit of representation for visually representing programs may not be the function and its input and output parameters, as node-and-wire visual programmers are likely to do. It might be something else, which can leverage the power of the visual cortex.&lt;/p&gt;
    &lt;head rend="h2"&gt;Computation is figuring out the next state&lt;/head&gt;
    &lt;p&gt;Modeling problems as entities and their relationships is only half the equation. By only modeling entities and their relationships, we've only described a static world. We can do that already without computers; it's commonly done on whiteboards in tech companies around the world. Every time we go up to the whiteboard with a coworker to talk through a problem, we're trying to leverage the power of our visual cortex to help us reason through it. But unlike our textual programs, whiteboards aren't computational.&lt;/p&gt;
    &lt;p&gt;If whiteboards were computational, they might show how the state of the problem changes over time, or how it changes in response to different external inputs or effects. Thus, the question is, how do we visually represent how the system state should evolve over time or in response to external inputs? [1]&lt;/p&gt;
    &lt;p&gt;Cellular automaton systems typically express computation through rulesets. Rulesets are typically expressed as a pure functional transformation between the current state and the next state. Taking rule 110 in 1D cellular automaton as an example, the state of the next cell depends on the three cells above it. Given the three cell pattern above, this is what the cell in the next line should be. You can see this like a β-reduction, substituting symbols with other symbols until we can substitute no further, with the resulting value as our answer.&lt;/p&gt;
    &lt;p&gt;As the CellPond talk at the top of the page points out, rulesets for more complicated behaviors, like trains on tracks have a combinatorial explosion of rules. One of CellPond's innovations was to have rulesets that represent (or generates?) groups of rulesets, so that visually expressing the rulesets remains tractable for humans.&lt;/p&gt;
    &lt;p&gt;But pure functions are just mappings. Any pure function can be replaced by an equivalent infinite table of key-value pairs. Rulesets are just explicit mappings of inputs to outputs. Hence, if rulesets are to be tractable, we must be able to express not just how a single current state maps to the next state, but how entire groups of states map to a next state.&lt;/p&gt;
    &lt;p&gt;We have familiar mechanisms in textual programming to express a selection of groups of input states in a succinct way. We have boolean logic in if expressions. We have maps and filters. We have select and where clauses in SQL queries. But we have no universal and composable ways of expressing this selection of previous states and mapping them to next states. Additionally, we don't have universally recognized ways of expressing this mapping from groups of inputs to outputs for state types other than a grid of cells.&lt;/p&gt;
    &lt;head rend="h2"&gt;A different way forward&lt;/head&gt;
    &lt;p&gt;Certainly, it could be possible that multi-dimensional aspects of a codebase would be quite hard to represent in its entirety visually. But I don't think it's a stretch to say that we lean pretty hard on the symbolic reasoning parts of our brain for programming and the visual reasoning parts of our brain are underleveraged.&lt;/p&gt;
    &lt;p&gt;Visual programming hasn't been very successful because it doesn't help developers with any of the actual problems they have when building complex systems. I think this is a result of ignoring the adage "form follows function" and trying to grow a form out of traditional programming paradigms that fail to provide good affordances–the utility vector is pointing the wrong way–for those actual problems in complex systems. To make headway, I think we should focus on discovering underlying logic and function of how to model problems visually on a canvas–not just the entities, but also their relationships. In addition to modeling problems, we also have to discover how to model transformations and transitions of state, so our models are also computational.&lt;/p&gt;
    &lt;p&gt;We have the hardware: our visual cortex is a powerhouse for pattern recognition and spatial reasoning. We just don’t have the right computational grammar to feed it. If we want a visual programming breakthrough, we have to leave the legacy of text-based paradigms behind and unearth a new kind of function—one that only makes sense visually. Once we do, the right ‘form’ will follow so obviously, we’ll wonder why we waited so long.&lt;/p&gt;
    &lt;p&gt;[1] One way is with visual rule sets. This almost feels like declarative or logic programming. But as the Cell Pond talk at the top of the essay pointed out, unless you have a representation of rule sets that can be expanded, you suffer combinatorial explosion.&lt;/p&gt;
    &lt;p&gt;[2] Depending on who you are, this can sound either like object-oriented programming or category theory.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://interjectedfuture.com/visual-programming-is-stuck-on-the-form/"/></entry><entry><id>https://news.ycombinator.com/item?id=45237035</id><title>Why you’d issue a branded stablecoin</title><updated>2025-09-14T05:09:00.853878+00:00</updated><link href="https://text-incubation.com/Why+you%27d+issue+a+branded+stablecoin+like+McDonaldsCoin"/></entry><entry><id>https://news.ycombinator.com/item?id=45237184</id><title>High Altitude Living – 8,000 ft and above (2021)</title><updated>2025-09-14T05:09:00.523372+00:00</updated><content>&lt;doc fingerprint="262b085f75a39ad6"&gt;
  &lt;main&gt;
    &lt;p&gt;Living at high altitude reduces risk of dying from heart disease: Low oxygen may spur genes to create blood vessels. Summary: Researchers have found that people living at higher altitudes have a lower chance of dying from heart disease and live longer.&lt;/p&gt;
    &lt;p&gt;Jeanne and I live at 8,400 feet (2.560 meters). We were talking about visitors coming (for workshops, friends, etc.) and if you are coming from a low elevation what you need to be aware of. There is a thing called Acute Mountain Sickness (AMS). It's real and can be very disabling for some people.&lt;/p&gt;
    &lt;p&gt;The best defense is to start at 5,000 feet and stay there for 3 days, drinking water like crazy and resting. Then, come up to the higher elevation and give yourself a day or two to adjust. That usually works.&lt;/p&gt;
    &lt;p&gt;Beyond the AMS, there is the sun! The sun up here will fry you fast! The UV is very very high up here and we have 300 days of sun every year. It's difficult NOT to be out in it. Water, clothing that covers your arms, legs, etc., and a hat. This is the best way to protect yourself from burning up. You will dehydrate and get very sick.&lt;/p&gt;
    &lt;p&gt;There's a lot to think about when we are considering having people visit.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://studioq.com/blog/2021/5/30/high-altitude-living-8000-ft-and-above-2450-meters"/></entry></feed>