<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-06T05:10:20.235803+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45481892</id><title>The QNX Operating System</title><updated>2025-10-06T05:12:41.868239+00:00</updated><content>&lt;doc fingerprint="ff9e891d51a325c6"&gt;
  &lt;main&gt;
    &lt;p&gt;Gordon Bell and Dan Dodge were finishing their time at the University of Waterloo in Ontario in 1979. In pursuit of their masters degrees, they’d worked on a system called Thoth in their real-time operating systems course. Thoth was interesting not only for having been real-time and having featured synchronous message passing, but also for originally having been written in the B programming langue. It was then rewritten in the UW-native Eh language (fitting for a Canadian university), and then finally rewritten in Zed. It is this last, Zed-written, version of Thoth to which Bell and Dodge would have been exposed. Having always been written in a high-level language, the system was portable, and programs were the same regardless of the underlying hardware. Both by convention and by design, Thoth strongly encouraged programs to be structured as networks of communicating processes. As the final project for the RTOS course, students were expected to implement a real-time system of their own. This experience was likely pivotal to their next adventure.&lt;/p&gt;
    &lt;p&gt;The duo’s first year after graduation was a busy one. They moved to Kanata, went to work for Bell-Northern Research (now Nortel), and on the 30th of March in 1980, they founded Quantum Software Systems. To continue their research and experimentation with operating systems, they assembled a microcomputer built around a Motorola 6809. With the release of the IBM PC in September of 1981, Quantum’s efforts shifted to that target. Their goal was to produce a real-time operating system that would enable the PC’s use in factories, communication systems, and anywhere else that emphasized reliability.&lt;/p&gt;
    &lt;p&gt;The first version of Bell and Dodge’s operating system was QUNIX 0.1 (the Q could have been for Quantum, or for Quick, I’ve seen both from former Quantum employees), and it was running on that early, hand-assembled, 8bit microcomputer. This earliest creation was never released outside of Quantum Software as far as I know. QUNIX was a vaguely UNIX-like, microkernel, real-time operating system. I say that it was vaguely UNIX-like because in these early versions, there were some serious differences. In QUNIX, there were CP/M-like things too. Each disk had a drive number prefix, non-disk device files’ names were reserved, and the commands were a bit different from those in UNIX, often simplified to the point of being more CP/M-like than UNIX-like. Another major difference was the directory hierarchy. On a traditional UNIX system, binaries were stored in &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt;, configurations in &lt;code&gt;/etc&lt;/code&gt;, and user directories in &lt;code&gt;/home&lt;/code&gt;. On QUNIX, this wasn’t the case. Commands included in the path variable were in &lt;code&gt;/cmds&lt;/code&gt;, configuration files were in &lt;code&gt;/config&lt;/code&gt;, the OS binaries were in &lt;code&gt;/sys&lt;/code&gt;, user directories were &lt;code&gt;/user&lt;/code&gt;, drivers were in &lt;code&gt;/drivers&lt;/code&gt;, and utilities were in &lt;code&gt;/util&lt;/code&gt;. Then, the &lt;code&gt;man&lt;/code&gt; command did not exist, and &lt;code&gt;help&lt;/code&gt; was used instead. Instead of &lt;code&gt;ps&lt;/code&gt;, the system had &lt;code&gt;task&lt;/code&gt; with the labels of father, son, and brother to denote parent and child processes. The first version of QUNIX for the IBM PC was made before the end of 1981, and released either in December of 1981 or January of 1982, making QUNIX the first known microkernel operating system for the PC platform.&lt;/p&gt;
    &lt;p&gt;A fun note from Paul N. Leroux, the bar chart on the monitor in the back left was physically glued to that monitor for another press image. It wasn’t meant to be in this image, but as photo editing tools were essentially non-existent at the time, fixing this would have required them to reshoot. They chose to go to press with bar chart present.&lt;/p&gt;
    &lt;p&gt;With QUNIX 0.4.33 in 1982, QUNIX became the first operating system for the IBM PC to support a hard disk, and in particular, it supported a 5MB Davong HDD. Given that a 10MB disk in 1982 could cost around $3000, it makes sense that the company’s first target was a bit more modest. At this point, however, QUNIX would not boot from an HDD. All of the floppy contents could be copied to a hard disk, but the user would still need to boot from a floppy disk.&lt;/p&gt;
    &lt;p&gt;Even in these early stages of development, the system began getting recognition, and this became a small problem. The name QUNIX was a bit too close to the name UNIX for AT&amp;amp;T. The name of the system was changed to QNX in late 1982 following a Cease and Desist by AT&amp;amp;T. The first official QNX version was released the following year. At the time of the name change the kernel consisted of around 10K line of C, and it handled task scheduling, message passing, and task priority. Everything else was implemented in services that used the microkernel’s message passing to communicate with each other (even drivers, filesystems, and networking). As an important feature, message queues were network transparent so a task on one physical machine could communicate with a task on a separate physical machine on the same network as easily as if it were local. This inherently multitasked and multiuser system allowed 250 simultaneous tasks from 4 to 16 simultaneous users. The system would make extensive use of the 8087 if it was available, and required a minimum of 96K RAM. Loading up the C compiler would require an additional 32K. It’s impressive what the small company achieved on the 8088, even if, for the time, the RAM requirements were quite high. QNX release version 1.0, in March of 1983, running on an IBM PC achieved 29% to 47% the speed of a DEC VAX 11/780 depending upon the task at hand when tested by Rao Mikkilineni at Bell Labs. Sadly, I’ve been unable to find his original write-up of his testing, which was apparently in the publication Personna. If you have information about it, I’d love to get some details. While RV1 was limited to just C and x86 assembly language, the company was hard at work on BASIC, FORTRAN, and Pascal compilers that would utilize common code generators allowing for the mixed-use of languages without losing optimization. With the introduction of GUIs on the Apple Lisa, Xerox systems, and VisiCorp’s Visi-On, Quantum also had plans for windowing as well. According to Quantum’s president Syd Geraghty in InfoWorld on the 21st of March in 1983, the majority of customers were high-end system developers at large corporations. Version 1.0 cost $650 in 1983 (around $2100 in 2025), and that included a C compiler, full-screen editor, the ability to read MS-DOS disks, and full networking support. I haven’t found much information about versions 1.1 through 1.14, but I did find some information about 1.20 released on the 15th of November in 1984. This version brought pattern matching on filenames in the current directory, expanded shell programming, &lt;code&gt;login&lt;/code&gt; was now a separate task with fast user switching and login stacking, &lt;code&gt;TCAP&lt;/code&gt; (think terminfo), &lt;code&gt;ed&lt;/code&gt; was rewritten and supported full-screen visual mode (think Vi), and support for the IBM AT (real-mode) was added. The price of QNX had also fallen to $450.&lt;/p&gt;
    &lt;p&gt;In June of 1981, the Ontario Ministry of Education identified computing as being important for the future, and they wanted to bring computing into their schools. They were also quite aware that some teachers had taken the initiative to bring microcomputers into their classrooms already, and the Commodore PET was the most common for programming courses, while the Apple II was the most common for other educational programs. Targeting many computers would have meant that they’d have rather high software development costs in any attempt to achieve standardization, and it was therefore decided that they’d need a single computer. In 1983, it was found by the ministry and the Canadian Advanced Technology Alliance that no existing computer would fully satisfy the goals of their educational computer. By March that year, some requirements had been drafted: all-in-one PET-like design, headphone output for voice and sound, a trackball, an 80186 CPU, a multitasking operating system, color graphics, voice synthesis, keyboard with accented characters, and networked storage (no physical disk in the computer itself). This machine as described had the sobriquet “bionic beaver.”&lt;/p&gt;
    &lt;p&gt;With the specifications in hand, Robert Arn at CATA created CEMCORP (Canadian Educational Microprocessor Corporation) and won a contract from the ministry for $10 million to develop the initial machines. This resulted in the ICON having been chosen. This machine was initially manufactured by Microtel and it ran QNX from Quantum Software Systems. The first machines were delivered in 1984. Later machines were produced, sold, and supported by Burroughs Canada, and after the merger with Sperry in 1986, by Unisys.&lt;/p&gt;
    &lt;p&gt;The ICON was built around an Intel 80186 clocked at 7.16MHz and 512K RAM. It lacked any local storage having neither a hard disk drive nor floppy disk drive. At boot, the computer grabbed QNX from a local LexICON file server over a 2.5Mbps ARCNET connection, and loaded the OS into RAM. Once loaded, the user logged into the system and his/her home directory was on the file server. Up to 32 of these machines could be on a single LAN. Saving any work to a floppy, meant putting the floppy into the file server, and then copying the file from the LexICON hard disk (early models were 10MB, later models were 64MB) to that floppy. The cost of these machines was high at $2500, but any school need only have paid $495 with the government covering the rest. One incredibly forward thinking feature was the lessonware. This would have been a hypertext system in which educators could have written pages that linked to others building an extensive corpus overtime. Even applications could have been run by simply clicking a link. This model was rejected by the ministry before the ICON shipped, and was replaced by a top-down system with ministry making lesson decisions. This also resulted in the ICON having shipped a QNX CLI with the CEMCORP text editor in the earliest models.&lt;/p&gt;
    &lt;p&gt;The ICON was a project hated by many and loved by many. For detractors, it was seen as expensive and wasteful while not exposing students to industry currents. For supporters, it accomplished all of its goals. It was excellent for programming, and it was excellent at multitasking, networking, and running educational software. The software was also quite reliable. It was QNX doing what QNX does best.&lt;/p&gt;
    &lt;p&gt;From students who used ICONs, we know that it did have educational games, text editors, compilers, word processors, spread sheets, circuit design and simulation software, and CAD software. Of course, being networked machines, some unconventional students figured out ways to hack into other machines over the network, print stuff to other students’ screens, and generally cause some chaos. Combined with audio capabilities (later models even included MIDI support), this apparently got a bit out of hand from time to time.&lt;/p&gt;
    &lt;p&gt;I normally wouldn’t show so many ads, but here is a development that is rather interesting. OS/2 had been announced on the 2nd of April in 1987, and Quantum perceived the OS as a real threat. The comparisons to UNIX were now joined by comparisons to OS/2, and QNX wanted to be certain that people understood QNX to be superior. This advertisement also shows us that QNX had responded to OS/2’s ability to run DOS software by adding that feature to QNX with the QDOS II (invoked as &lt;code&gt;QDOS&lt;/code&gt;) emulator, or by running a DOS application as a task via &lt;code&gt;RUNDOS&lt;/code&gt;. QNX had been ported to the IBM PS/2 as well. This was QNX version 2.&lt;/p&gt;
    &lt;p&gt;As far as I can tell, the release of QNX version 2 was announced on the release date of version 1.2. The release of this version appears to have been quite late, and it occurred in autumn of 1987 (two years after the initial release date given). This release brought protected-mode support for the IBM AT, full LAN support with some networking enhancements ported from BSD, support for files of up to one terabyte in size, up to 32 serial ports in one machine, and a somewhat primitive GUI called House about which I can find nothing but the name.&lt;/p&gt;
    &lt;p&gt;While I couldn’t find anything about the House graphical environment, QNX Windows running the Open Look Window Manager (OLWM) is available.&lt;/p&gt;
    &lt;p&gt;In June of 1987, Quantum Software Systems ceased renting their office space, and they moved into a building they’d had built just for them. Following this, the company would expand the building three times, and finally add another building. So, the company moved from 215 Stafford Road to 175 Terrance Mathews Crescent.&lt;/p&gt;
    &lt;p&gt;As late as 1990, QNX advertisements still mentioned performance on the 80286. This seems more as though Quantum didn’t spend much on marketing rather than not having progressed. In Dan Hildebrand’s An Architectural Overview of QNX from April of 1992, we find that the company had developed QNX versions up to 3.15, and articles about operating systems in the tech press had mentioned QNX as one of the systems that took advantage of features in the 80386.&lt;/p&gt;
    &lt;p&gt;In 1989, Quantum Software Systems began work on a dramatic overhaul of the operating system. This new version would be fully POSIX-compliant and increase performance over the prior generation of QNX operating systems. This version, 4.0, was released in 1991. The kernel now had just 14 calls associated with IPC, network, scheduling, and interrupts, and the kernel weighed in at just 7K (605 LOC), allowing the entire kernel to fit in CPU caches of the time. Unlike earlier versions, messages were no longer queued. Instead, they were copied from process to process. Being POSIX-compliant allowed for the easier porting of software, and it also meant that the directory hierarchy was decidedly more familiar to UNIX veterans. Beyond source compatibility, Quantum was actively working on becoming binary compatible with UNIX as of 1992. In 1994, beyond POSIX and performance, QNX 4.1 introduced the QNX Photon microGUI. This system was developed by Patrick Hayden and Robin Burgener. Much like the underlying system, it was built around a microkernel (around 20K), and it was network transparent. A Photon application could have its interface beamed to another QNX 4 machine at any point in time, or it could be dragged from one device to another just as easily. Photon likewise allowed remote monitoring or control of the user interface. This worked regardless of the device class (desktop, laptop, handheld, server). For those who needed it, the X Windows System (X11R5, Motif Window Manager) was also available, though Photon did implement a binary interface library that was X compatible. Being so lightweight allowed the company to release a demo disk that combined networking, a web browser, web server, graphical environment, file manager, text editor, a vector animation demo, and Towers of Hanoi game onto a single 1.44MB floppy. Unlike prior QNX versions, version 4 required at least an Intel 80386 and VGA graphics card. No 16bit systems were supported.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;KANATA, ONTARIO, September, 1994—QNX Software Systems Ltd., developers of the QNX realtime operating system, announced a unique window system targeted for handheld and embedded applications.&lt;/p&gt;&lt;lb/&gt;According to Rob Oakley, Corporate Communications and Product Management, "the Photon Window System is the first of its kind—a GUI built around a graphical microkernel."&lt;lb/&gt;QNX Software Systems designed the Photon Window System as a graphical microkernel and a team of cooperating processes, basing this design on the company's QNX OS, a microkernel network-distributed system.&lt;lb/&gt;Photon's cooperating processes provide the functionality to scale the system up into a full-featured windowing system or down to fit into resource-constrained environments, like handheld personal computers (HPCs) and compact embedded systems.&lt;lb/&gt;Photon provides a rich widget library that operates much like the X Window System widget set, with an X-inspired API. A Motif-like window manager and a code-generating, visual application builder are also available.&lt;lb/&gt;"Photon is extremely light and fast. It runs in only 256K, yet provides enormous GUI functionality," Oakley said.&lt;lb/&gt;Like the QNX OS itself, Photon is network transparent—an HPC running Photon and QNX, equipped with a wireless LAN interface, becomes a transparent extension of the LAN, able to use all the LAN's resources as if they were integrated directly into the HPC. The power this brings to the HPC user is difficult to appreciate—imagine having the power of 100 Pentiums in the palm of your hand!&lt;lb/&gt;According to Dan Dodge, Vice President R&amp;amp;D, "Photon applications are very network distributed. From the application's perspective, all the resources of all the nodes on the LAN look like a single, logical machine. The environment is so transparent that a user can drag applications from one physical screen to another."&lt;lb/&gt;For example, a user in a factory control environment could walk up to a computer and drag an application from the control screen onto an HPC, and then walk out onto the factory floor with it and interact with the live application.&lt;lb/&gt;Although Photon is aimed at compact environments, its dynamic range is extensive. "Photon's API and rich widget library can support high-performance GUI applications with enough functionality to enter the domain of X, while consuming only a fraction of the resources," said Dodge.&lt;lb/&gt;The QNX operating system is a POSIX-certified realtime OS for Intel and AMD processors. Scalable and modular, QNX fits a wide range of environments, from compact embedded controllers to resource-rich X-based development systems, to distributed realtime systems running hundreds of CPUs.&lt;/quote&gt;
    &lt;p&gt;Versions 4.2, 4.22, and 4.24 all released in 1995. The final version 4 release was 4.25 in 1997. At least one QNX 4 installation ran for over 20 years without a reboot at the ESA. This was possible because peripherals could be hotswapped, drivers could be changed, and network nodes could be added or removed without bringing the system down.&lt;/p&gt;
    &lt;p&gt;Notably, we see that in 1994, Quantum renamed itself to QNX Software Systems Limited. And with a new name and a new version of their operating system, the company won some major installs. From POS systems at FasFax that allowed for real-time sales figures from geographically disparate locations, to video conferencing systems at Georgia State University, to factories, power plants, hospitals, set-top boxes, phone systems, trains, jets, the Space Shuttle, ISPs, and even traffic lights. The price for a single license dropped to around $285 at this time, and by 1995, QNX was the leading real-time OS for x86 systems. The majority of the company’s revenue was from large enterprises.&lt;/p&gt;
    &lt;p&gt;Of course, change was coming in the 1990s, and QSSL knew it. The company took the QNX kernel from version 4.24 and forked it. They had multiple goals with this fork. The system needed to be SMP capable, support POSIX, and be more portable to new hardware. The kernel handled only IPC, message passing, interrupts, and timing. Threading became the minimal unit of scheduling. The new Process Manager then used a loader thread that copied a process’s image into memory freeing the Manager to service other requests while a program continued to load. Naturally, being a real-time system, priority levels were used when scheduling any time-critical process, and new processes inherited the priority of their parent by default. The Process Manager weighed in at 32K (same size as the kernel itself) but added memory allocation, process contexts, resource-manager namespaces, and so on. In this new QNX version, the Process Manager ran inside the microkernel’s address space, but was the only element of the OS to do so. Much of the network stack for this version came from NetBSD, and with that came the ability to use NetBSD network drivers. There was another major change that came from the wider UNIX world, GCC. This naturally meant that language support was quite broadened to include not just C, C++ but all of the other languages supported by the GNU Compiler Collection. This became QNX Neutrino 1.0 released in 1996.&lt;/p&gt;
    &lt;p&gt;On the 19th of October in 1998, QSSL announced QNX Neutrino 2.0 which featured UPM (Universal Process Model). In the words of CTO Dan Dodge:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The premise of UPM is simple. Go beyond the limited MMU protection provided by the other major embedded OSs - where only applications are prevented from corrupting memory - and extend that protection down to services at the kernel level. The result? For the first time, MIPS and PowerPC-based embedded systems can intelligently recover from software faults in drivers, protocol stacks, and custom OS extensions - typically without rebooting.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;QNX was branching into non x86 platforms, and this included PowerPC processors: 401, 403GC, 603e, 821, 823, 860; MIPS processors R4000 and R5000; and naturally all x86 CPUs from the 80386 onward. At this stage, however, the development environment was restricted to QNX 4 and Windows 95/98/NT.&lt;/p&gt;
    &lt;p&gt;This announcement was followed by another about a partnership with Amiga:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Cologne, Germany, November 13 - Amiga Inc. today announced a partnership with QNX Software Systems Ltd. to utilize the QNX realtime operating system (RTOS) as the foundation for the next-generation Amiga architecture. The announcement was made at Computer '98 in Cologne.&lt;/p&gt;
      &lt;p&gt;"The Amiga shook the industry in the 80s with world-leading multimedia architecture," said Jeff Schindler, general manager of Amiga Inc. "QNX's RTOS resembles many of Amiga's unique qualities. It provides the foundation in reaching our vision for the rebirth of Amiga in the new millenium."&lt;/p&gt;
      &lt;p&gt;"We see this partnership as a powerful combination of superior OS technologies, common corporate cultures, and shared business vision," said Dan Dodge, Chief Technology Officer and Cofounder of QNX Software Systems Ltd.&lt;/p&gt;
      &lt;p&gt;About Amiga&lt;/p&gt;
      &lt;p&gt;Amiga Inc. is a technology company targeting the next generation of Amiga architecture with a continued focus on multimedia and the Internet. Since the introduction of the Amiga A1000 in 1985, Amiga has represented the embodiment of the efficient use of memory and hard drive capacity, while pioneering industry developments in multimedia, 32-bit multitasking, and autoconfiguration. Amiga led the industry in combining computer graphics, animation, and film sequences with stereo sound known today as multimedia. Visit http://www.amiga.com and http://www.amiga.de.&lt;/p&gt;
      &lt;p&gt;About QSSL&lt;/p&gt;
      &lt;p&gt;Founded in 1980, QNX Software Systems is one of the top three realtime operating-system vendors in the world, with products licensed in more than a million systems worldwide. The company has established a strong customer base in a variety of industries, including aerospace, telecommunications, medical instrumentation, process control, point-of-sale, consumer electronics, finance, and telephony. With products distributed in over 100 countries, the company is headquartered in Ottawa, Canada.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The Amiga port should have been somewhat straightforward considering that Amiga accelerators had been using PowerPC chips, and those chips were now supported by QNX. Gateway’s Amiga team was working closely with QSSL to build a new Amiga (Amiga NG) around the PowerPC G3 and G4 chips running QNX, and these were apparently prototyped as single, dual, and quad processor machines. During alpha testing, Gateway PowerPC boards apparently had some issues, and the two parties blamed one another. By the middle of 1999, Gateway, QSSL, and to some extent Motorola, had poured a hefty sum into the project, and Gateway began insisting on a solid date for the availability of a QNX Neutrino port. Evidently they weren’t satisfied, and I do not believe communication between the two teams, which had one been quite good, was solid by this point. At noon on the 8th of July in 1999, Dan Dodge announced the QNX Developers Network for Amigans. This was followed by another announcement at 15:15 the following day:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Eight months ago we were chosen by Amiga as their foundation OS partner. Our development group was thrilled to be part of the rebirth of such an innovative product. To meet the challenge we knew it would take a tremendous effort on our part. We had a team of people in place working on our part of the Amiga NG soon after the alliance was announced. Over the next few months we involved more and more of our engineering resouces towards making QNX an advanced multi-media platform. Our investment so far has been significant. These are costs we have borne ourselves.&lt;/p&gt;
      &lt;p&gt;It is clear today from Jim's letter that we were not chosen for the next generation Amiga. Naturally we're disappointed. So, where do we stand now? It is not our intent to confuse the Amiga community. We are proud of what we have accomplished and want to include Amigans in what we've achieved. I did make a promise to deliver an operating system and I intend on keeping that promise. I don't want to split the community, nor do I wish to engage in a war of words. I don't ask you to "trust" me or to take me at my word. Both QNX and Amiga have promised to deliver technology into your hands in the very near future. I ask only that your assessment of QNX be based on what we do and what we deliver.&lt;/p&gt;
      &lt;p&gt;Thanks for the overwhelming support we have received so far.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;That letter by Jim Collas read, in part:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Dear Amigans,&lt;/p&gt;&lt;p&gt;After months of research and in-depth discussions with all of our technology partners we have decided to use Linux as the primary OS kernel for the new Amiga Operating Environment (OE). I know this decision is a shock to many of you given the previous announcements and activities relative to QNX. This was a very complicated and difficult decision to make and I assure you that I didn't make this decision without a significant amount of research and deliberation. We have been researching Linux since February but didn't finalized our decision until several weeks ago. We were planning to communicate it to the Amiga community in the technology brief that will be released in the next few days.&lt;/p&gt;&lt;p&gt;I am pressed to communicate the Linux decision before the technology brief because of information released by QNX in the last few days. This information had not been reviewed or approved for release by Amiga. In light of our Linux decision, this information is confusing and misleading so I would like to take the time to clarify the situation. I can't disclose any details of the Amiga/QNX discussions because of legally binding confidentiality agreements but I can talk to you about our decision to use the Linux kernel. I think that you will agree that this is the right decision once you understand the reasons for this decision.&lt;/p&gt;&lt;p&gt;Before I continue, I should mention that our technology decision does not reflect negatively on QNX. I believe that QNX is a good company with great technology. I just believe that Linux gives us a better chance of executing our plans successfully. The decision to use QNX as our OS partner on our next generation multimedia convergence computer (MCC) was made late last year. When I took over as president of Amiga in February of this year, I initiated an in-depth review of existing Amiga plans and decisions. As president of Amiga I had to make sure that we were defining a strategy and an execution plan that would allow Amiga and the Amiga community to be successful. We reviewed our strategy, architecture decisions, technology partners, and execution plans. During this review period we also added a number of very talented and experienced people to help us finalize our technology and product decisions. I am confident that we now have a solid and exciting plan that people can have confidence in.&lt;/p&gt;&lt;p&gt;Linux has been picking up substantial momentum over the past year as a viable, open OS alternative in the marketplace. This momentum, the growing commitment to Linux applications from a wide variety of software vendors, and the growing availability of Linux device drivers from hardware vendors, makes it a compelling candidate. Additionally, with all of the significant component suppliers putting resources on writing drivers for Linux it was difficult to get them to port to yet another operating system. Using the Linux OS as a foundation for our Amiga OE allows us to leverage a significant amount of available software drivers and utilities. This allows us to quickly support multiple graphics cards and other peripherals.&lt;/p&gt;&lt;p&gt;Given the above-mentioned advantages, we decided to do an in-depth technical analysis of Linux to determine if it was a suitable OS kernel for our new Amiga operating environment (OE). As we ported parts of our higher level operating environment and AmigaObject architecture to Linux, we discovered some significant performance advantages in the Linux kernel in areas such as distributed object messaging across a network (up to 10X the performance of Windows NT).&lt;/p&gt;&lt;p&gt;Does this mean that the next generation Amiga will not be unique? Absolutely not! Remember that the OS kernel is only one component of the new Amiga OE and the hardware is unique. The revolutionary nature of the Amiga OE is in the way it extends the traditional operating system to provide a host environment for a new class of portable applications - applications that exist in a pervasive networked computing environment. We will be integrating multiple technologies including an efficient windowing environment and a unique user interface. In summary, we decided to use Linux because of the incredible momentum and the fact that it is solid technology and a good foundation for our new Amiga OE.&lt;/p&gt;&lt;p&gt;Additionally, the Linux community is an impressive force that we should be aligned with. We share many common values and objectives with the Linux community. Using Linux as our OS kernel allows us to build a unique and revolutionary operating environment while leveraging the enormous momentum of Linux. The soon to be released technology brief will further explain our architecture and plans for integrating all of the selected technology. Once you read it, I am confident that you will understand the revolutionary nature of the next generation Amiga. I assure you that Amiga and the Amiga community will be a driving force behind the next computer&lt;/p&gt;&lt;lb/&gt;revolution.&lt;/quote&gt;
    &lt;p&gt;As a person using Linux at the time, I believe this to have been the wrong decision. Despite the momentum that Linux had, it wasn’t (still isn’t) as stable, as reliable, or as efficient as QNX. If network performance were a serious consideration, one of the BSDs would have been the better choice. Linux’s hardware support also wasn’t that great in reality. While it could run on quite a bit of kit, it didn’t always support that hardware well, and it didn’t always support all features. Plus, QNX was doing the work to build drivers for the new Amiga. Of course, none of this really mattered. Gateway chose to divest itself of Amiga entirely. The new Amiga Inc. then turned to AmigaOne Partners for Amiga OS 4.&lt;/p&gt;
    &lt;p&gt;QNX Neutrino 2.1 was released in 1999 with support for Java, the Glide API, a wide array of microcontrollers, ARM, StrongARM, and Hitachi SH-4. Interestingly, this release had beta packages including RealPlayer and X in Photon, and it had experimental packages that included Quake 3 Arena and Doom.&lt;/p&gt;
    &lt;p&gt;On the 14th of September in 1999, QNX made an announcement that would shape the future of QNX. The company was partnering with Motorola to develop automobile driver information systems that included in-vehicle navigation, internet access, natural language processing, car audio, multimedia, and vehicle information dashboards. While the Motorola unit responsible for mobileGT wouldn’t last and the unit at IBM working on Java wouldn’t last, QNX would survive and thrive in that segment.&lt;/p&gt;
    &lt;p&gt;QNX version 6 was released on the 18th of January in 2001. The new version was focused on multimedia with streaming video and audio as well as hardware accelerated MPEG encode/decode. The new system included a web based package manager greatly easing the installation of available software. Thankfully, all supported architectures could now be used for developing QNX native software too. Version 6.1 was mostly a patch release and followed later the same year. QSSL was a founding member of the Eclipse Foundation, and QNX software development got quite a bit better with the release of the Momentics Tool Suite on the 4th of June in 2002 (along with QNX 6.2). This was largely the Eclipse IDE combined with a series of plugins that were QNX and Photon oriented.&lt;/p&gt;
    &lt;p&gt;The last release of QNX by QSSL was version 6.3 on the 3rd of June in 2004. This version was visually slightly different, and Voyager was replaced by the Mozilla Suite. The development environment was improved and now offered a clustering framework for the development of networked applications utilizing distributed processing. Among the highlights for this release were SCTP support, IP filter and NAT support, IPv6 support, 2D and 3D graphics layering/compositing, full UTF8 support in Photon, USB2 host support, and support for up to 64GB of RAM on x86 and PPC, up to 1TB on MIPS.&lt;/p&gt;
    &lt;p&gt;On the 27th of October in 2004, QNX Software Systems Limited was purchased by Harman International Industries. Harman specifically wanted to focus on QNX Neutrino in the embedded market, and within that market, specifically on automotive applications where Harman had found a market in audio. Under Harman’s ownership, QNX operated as a separate division led by Dan Dodge as CEO. While QNX did continue to serve networking, medical, and industrial markets, the direction was clear. What had begun with the Motorola partnership in automotive would become the primary market.&lt;/p&gt;
    &lt;p&gt;QNX development continued with 6.3 SP1, SP2, and SP3. Version 6.3.2 was released on the 16th of August in 2006, 6.4 on the 30th of October in 2008, and 6.4.1 in May of 2009. Throughout that time period, QNX had introduced support for Adobe Flash and developed the QNX CAR platform winning a trophy from Adobe for their efforts. This platform was built of modular components allowing manufacturers to mix and match based upon the market segment. QNX was chosen by companies like BMW, Mercedes, Dodge, Toyota, Volkswagen, and Audi. When QNX demoed their automotive systems in the 2007-2009 timeframe, they had concept dashboards. These all ran QNX Neutrino on ARM CPUs (often Freescale i.MX6 or TI Sitara [Cortex A8]) with the EtherCAT motion library, and many demo units had UIs created in Qt5 and QML while a few had hardware accelerated OpenGL interfaces. From 2008 to 2010, QNX had been licensed for use in more than 17 million in-vehicle systems representing an increase of around 130% over those two years. By March of 2010, more than 200 vehicles were already shipping with QNX, and the QNX CAR platform had more than 60 participants. Those participants included 17 auto makers and 26 automotive suppliers.&lt;/p&gt;
    &lt;p&gt;On the 9th of April in 2010, Research in Motion announced their acquisition of QSS from Harman for $200 million:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“RIM is excited about the planned acquisition of QNX Software Systems and we look forward to ongoing collaboration between Harman, QNX and RIM to further integrate and enhance the user experience between smartphones and in-vehicle audio and infotainment systems," said Mike Lazaridis, President and Co-CEO at RIM. "In addition to our interests in expanding the opportunities for QNX in the automotive sector and other markets, we believe the planned acquisition of QNX will also bring other value to RIM in terms of supporting certain unannounced product plans for intelligent peripherals, adding valuable intellectual property to RIM's portfolio and providing long-term synergies for the companies based on the significant and complementary OS expertise that exists within the RIM and QNX teams today."&lt;/p&gt;
      &lt;p&gt;"We welcome the opportunities that a strengthened relationship with RIM will create, as two innovation leaders collaborate to bring new connectivity solutions to the industry," said Dinesh C. Paliwal, Harman's Chairman, President and CEO. "We expect to maintain our close association with QNX and the cutting-edge software solutions it provides to Harman and our customers. We believe our leading customers will fully endorse this move and see it as a major step in advancing seamless connectivity and integration among intelligent devices."&lt;/p&gt;
      &lt;p&gt;"Like Harman, RIM shares our passion for innovation and reliability, so we are absolutely thrilled with this opportunity," said Dan Dodge, CEO, QNX Software Systems. "Moreover, RIM will give us the best of all possible mandates: to continue on our innovation path and to increase investment in our core products, professional services, and go-to-market channels. This is a great time to be a QNX customer, as we focus on collaborating with RIM to create an even more exciting platform for the next generation of connected and embedded devices."&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Also in 2010, QNX gained the QNX Safety kernel variant. This was a version of Neutrino that was security hardened specifically for mission critical applications. This variant continues to this day with the most recent version (8.0) having been independently certified by TÜV Rheinland to meet several standards including ISO 26262 ASIL D, IEC 61508 SIL3, IEC 62304 Class C, and ISO/SAE 21434. Aside from security hardening, the QNX Safety variant is still fully compatible with Neutrino’s native APIs and POSIX.&lt;/p&gt;
    &lt;p&gt;In July of 2010, QNX Neutrino 6.5 was released. This version brought performance improvements to the kernel when systems were seeing high memory utilization, the kernel gained zombie reaping, and it gained address space randomization. SMP support was increased, and CPU support was extended to ARMv7 Cortex A-9. The Photon microGUI saw some refinements. As one would expect, version updates were present for everything imported from BSD, Linux, and GNU. This version could make use of the NetBSD’s Pkgsrc tool.&lt;/p&gt;
    &lt;p&gt;Version 6.5 was forked to create both the BlackBerry Tablet OS and BBX shortly after its creation. The first device to see a QNX-derived operating system from RIM was the PlayBook, which featured an OMAP 4430 SoC (1.5 GHz dual-core A9), PowerVR SGX540 GPU, 1GB of RAM, 16GB of eMMC flash, a 1024 by 600 seven inch LCD, Bluetooth, 802.11n, USB2, micro HDMI, a 5MP rear camera, and a 3MP front camera. It measured 5.1 inches by 7.6 inches, was about 2/5 of inch thick, and it weighed just under a pound.&lt;/p&gt;
    &lt;p&gt;The PlayBook was released on the 19th of April in 2011 to mixed reviews. While many loved the webkit browser, user interface, HDMI output, and multitasking, many loathed the requirement of a BlackBerry to get certain apps working. Additionally, there was a dearth of third party applications. This latter complaint did get ameliorated. While at launch there weren’t too many applications, this grew to over 24,000 by the same time the following year. Around 2,465,000 PlayBooks had been sold by June of 2013.&lt;/p&gt;
    &lt;p&gt;The BlackBerry Z10 was released on the 31st of January in 2013 running BBX (officially BlackBerry 10 due to a trademark dispute, and at the launch event for BBX, Research in Motion announced that they were changing their name to BlackBerry Limited). The Z10 was built around a Qualcomm Snapdragon S4 Plus SoC (dual core 1.5GHz Krait CPU, Adreno 225 GPU) for LTE units, or around the TI OMAP 4470 for non-LTE units. The shell was plastic wrapped around a stainless steel inner frame, and the on/off, voice command, and volume buttons on the right side were of metal. While it didn’t have quite the premium feel of an iPhone, it did feel good in the hand. In its dimensions it was 5.1 inches by 2.6 inches, and just over an 1/3 of an inch thick (or just slightly larger than an iPhone 5). It was a slick piece of kit with a high price for the time at $599. The display, however, was excellent. It was a 4.2 inch LCD with a resolution of 1280 by 768 at 355ppi (the iPhone 5 was 326ppi). The device had a 2MP font camera, and an 8MP rear camera capable of HDR, panorama, and 1080p video at 30fps. Wi-Fi was dual band 802.11n, and the device featured Bluetooth, GPS, and NFC. Of course, connectivity didn’t stop there. This device had physical ports: micro USB2, micro HDMI, and 3.5mm audio.&lt;/p&gt;
    &lt;p&gt;BBX made heavy use of gestures with a swipe up from the bottom taking the user to the Home Screen, a swipe to right to hit the App Library, and a swipe to the left going to the BlackBerry Hub. The Hub was a combination of SMS/MMS, email, social media, chat, notifications, and calls in a single unified location. BBX was QNX Neutrino, but it did differ. Multitasking was limited to 8 applications at any one time which I believe to have been done due to the application frameworks. A developer could choose to use C/C++ and the Cascades UI framework, or WebWorks which utilized HTML5 with Zepto.js (JQuery API, but 8.4k compressed), or WebKit, or Adobe AIR (Flash), or Android runtime. With so many different application types, decisions would have had to have been made around resource management, and a best guess at when performance would become unacceptable.&lt;/p&gt;
    &lt;p&gt;BlackBerry had been unable to compete against the iPhone and Android, and BBX was their last, best hope. By 2014, BBX was in the number four spot behind Windows Phone. By 2017, it was clear that they weren’t going to survive in the mobile market. Due to the extreme devotion of their fans, they kept BBX on life support until 2022. Being an amazing OS running on good hardware, why did BBX fail? Likely, the most pressing problem was application support. While BBX could run some Android applications, support was limited. The platform likewise failed to grab many developers as the existing install bases for iOS and Android were enormous. What applications were made for BBX were often of quite low effort. Finally, moving to a touch screen angered BlackBerry’s existing fanbase. For those individuals hanging on to the BlackBerry ecosystem, the keyboard was one of the main reasons why. Removing the physical keyboard made many of those fans feel betrayed. When BlackBerry Limited did release another phone with a physical keyboard, it was a bit too late.&lt;/p&gt;
    &lt;p&gt;On the 20th of September in 2013, BlackBerry Limited announced a 4500 person staff reduction and $1 billion (CAD) loss. On the 23rd, they announced an acquisition by Fairfax Financial Holdings for $9/share. This deal was canceled in November. Instead, John Chen became CEO and initiated a turn around that focused on QNX’s former markets of healthcare, finance, law, and mission critical systems. This focus allowed the company to pick up Ford Motor Company as a QNX customer on the 11th of December in 2014 (Ford had previously used Microsoft Auto).&lt;/p&gt;
    &lt;p&gt;On the 28th of February in 2014, BlackBerry released QNX 6.6. The supported platforms were now the expected x86 and ARM CPUs with no mention of any others. This was a major change despite being a point release. Photon support was removed in favor of the Screen Graphics Subsystem. Screen operates as a lower-level service, and this has the benefit of supporting off-screen rendering and compositing of various image sources, and as QNX software had been increasingly using Qt, HTML5, or OpenGL rather than the toolkits supplied with Photon, this made logical sense.&lt;/p&gt;
    &lt;p&gt;QNX version 7 was released on the 4th of January in 2017 for ARM v7, ARM v8, x86, and AMD64. This release featured a rewritten PCI server with APIs moved out of libc and into libpci, rewritten virtual memory manager, fewer synchronization objects with increased limits, and filesystem encryption was moved into the Encrypted Filesystem package available from QNX Software Centry.&lt;/p&gt;
    &lt;p&gt;By June of 2023, QNX was in over 255 million vehicles around the world, and this would explain why the BlackBerry blog featured a rather large section on automobiles:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The automotive evolution to SDVs and “connected cars” requires an OS capable of speed, safety, and security — while unlocking the power to innovate.&lt;/p&gt;
      &lt;p&gt;"With more than 300 million vehicles capable of over-the-air software updates expected to be on the road globally by 2032, automakers are clamoring for better tools to help them develop compelling technology features in the software-defined vehicle," says Alex Oyler, director of North America at SBD Automotive, a leading global automotive technology research and consulting firm.&lt;/p&gt;
      &lt;p&gt;“Both automakers and suppliers rely on validated software and well-integrated development tools to help them more efficiently build and maintain differentiating software for their fleets,” Oyler adds. "A secured-by-design operating system such as the next generation QNX OS — that seamlessly integrates with other software components on a high-performance system-on-chip — represents the foundation of a safe, secure, and seamless experience for drivers.”&lt;/p&gt;
      &lt;p&gt;In addition, early reviews of the new QNX SDP 8.0 give automotive industry leaders a glimpse into what’s possible.&lt;/p&gt;
      &lt;p&gt;“The combination of our DRIVE Thor centralized computer and the new QNX OS will serve as a powerful foundation on which OEMs can build next-generation automotive systems that offer the highest levels of safety and security,” says Ali Kani, vice president and general manager of automotive at NVIDIA. “This represents another major milestone in a nearly 20-year collaboration with BlackBerry QNX that has helped both companies move to the forefront of the automotive industry.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;QNX 8.0 was officially announced in December of 2023, and the release was made in January of 2024. Version 8.0 was quickly discontinued with 8.0.1 taking its place. Version 8.0.3 was made available on the 21st of March in 2024. This latest release is available for a variety of Aarch64 platforms including the Raspberry Pi, and is also available for AMD64. QNX 8 supports SoCs with up to 64 cores and has near linear performance scaling. The network stack is now based upon FreeBSD 13.2, Wi-Fi 6 support is present with WPA3 and TLS 1.3, Screen can operate fully headless and now supports Vulkan 1.3 and OpenCL 3, and Screen now supports Wayland 1.21. Developers are now encouraged to use LLVM and libc++ 16 though GCC is still available with libstdc++ 12.2. Python 3.11, valgrind, libasan (address sanitizer), libubsan (undefined behavior detection), and libunwind are all available. For the UNIX user land, Toybox has replaced many common GNU utilities.&lt;/p&gt;
    &lt;p&gt;If the Raspberry Pi port caught your attention, this is available free for non-commercial use via QNX Everywhere. The image requires a Raspberry Pi 4 with at least 2GB of RAM and an 8GB or greater MicroSD card.&lt;/p&gt;
    &lt;p&gt;On the 2nd of January in 2025, it was announced that BlackBerry IoT would now be known as QNX. This decision was made largely by BlackBerry responding to their customers who recognized and desired the QNX brand. QNX CEO John Giamatteo stated:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Relaunching the QNX brand is an important step in BlackBerry’s broader strategy to increase our visibility and fortify our leadership within the automotive and embedded industries, with a view to better positioning us for sustained growth and success. The values that QNX stands for have always been a cornerstone for our customers and this brand relaunch honors that strong history while setting the stage for the division to fire on all cylinders and drive smarter, safer, and faster innovation through precision-engineered performance.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;QNX is a fascinating operating system. It was extremely well designed from the start, and while it has been rewritten, the core ideas that allowed it survive for 45 years persist to this day. While I am sad that Photon was deprecated, the reasoning is sound. Most vendors using QNX either do not require a GUI, or they implement their own. For example, while Boston Dynamics uses QNX in their robots, they don’t really need Photon, and neither do SpaceX’s Falcon rockets. While cars certainly have displays, most vehicle makers desire their screen interfaces to have a unique look and feel. Of course, just stating these use cases of robots, rockets, and cars speaks to the incredible reliability and versatility of QNX. Better operating systems are possible, and QNX proves it.&lt;/p&gt;
    &lt;p&gt;My dear readers, many of you worked at, ran, or even founded the companies I cover here on ARF, and some of you were present at those companies for the time periods I cover. A few of you have been mentioned by name. All corrections to the record are sincerely welcome, and I would love any additional insights, corrections, or feedback. Please feel free to leave a comment.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.abortretry.fail/p/the-qnx-operating-system"/><published>2025-10-05T14:47:13+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45482333</id><title>Show HN: ASCII Drawing Board</title><updated>2025-10-06T05:12:41.602800+00:00</updated><content>&lt;doc fingerprint="f65ec2ddcce25e37"&gt;
  &lt;main&gt;
    &lt;p&gt;Use the List of Unicode characters as a source of characters for your brush ✦ ◒ ▜ █▓▒░ Unfortunately not all of them will work due to font limitations.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.delopsu.com/draw.html"/><published>2025-10-05T15:36:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45482467</id><title>NFS at 40 – Remembering the Sun Microsystems Network File System</title><updated>2025-10-06T05:10:26.389919+00:00</updated><content/><link href="https://nfs40.online/"/><published>2025-10-05T15:49:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45482516</id><title>BYD builds fastest car</title><updated>2025-10-06T05:10:26.226457+00:00</updated><content/><link href="https://www.autotrader.co.uk/content/news/byd-builds-world-s-fastest-car"/><published>2025-10-05T15:54:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45483386</id><title>Fire destroys S. Korean government's cloud storage system, no backups available</title><updated>2025-10-06T05:10:25.707196+00:00</updated><content>&lt;doc fingerprint="fd40bb1beeb70fe1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;NIRS fire destroys government's cloud storage system, no backups available&lt;/head&gt;
    &lt;p&gt; Published: 01 Oct. 2025, 17:59 &lt;/p&gt;
    &lt;p&gt;A fire at the National Information Resources Service (NIRS)'s Daejeon headquarters destroyed the government’s G-Drive cloud storage system, erasing work files saved individually by some 750,000 civil servants, the Ministry of the Interior and Safety said Wednesday.&lt;/p&gt;
    &lt;p&gt;The fire broke out in the server room on the fifth floor of the center, damaging 96 information systems designated as critical to central government operations, including the G-Drive platform. The G-Drive has been in use since 2018, requiring government officials to store all work documents in the cloud instead of on personal computers. It provided around 30 gigabytes of storage per person.&lt;/p&gt;
    &lt;p&gt;However, due to the system’s large-capacity, low-performance storage structure, no external backups were maintained — meaning all data has been permanently lost.&lt;/p&gt;
    &lt;p&gt;The scale of damage varies by agency. The Ministry of Personnel Management, which had mandated that all documents be stored exclusively on G-Drive, was hit hardest. The Office for Government Policy Coordination, which used the platform less extensively, suffered comparatively less damage.&lt;/p&gt;
    &lt;p&gt;The Personnel Ministry stated that all departments are expected to experience work disruptions. It is currently working to recover alternative data using any files saved locally on personal computers within the past month, along with emails, official documents and printed records.&lt;/p&gt;
    &lt;p&gt;The Interior Ministry noted that official documents created through formal reporting or approval processes were also stored in the government’s Onnara system and may be recoverable once that system is restored.&lt;/p&gt;
    &lt;p&gt;“Final reports and official records submitted to the government are also stored in OnNara, so this is not a total loss,” said a director of public services at the Interior Ministry.&lt;/p&gt;
    &lt;p&gt;The Interior Ministry explained that while most systems at the Daejeon data center are backed up daily to separate equipment within the same center and to a physically remote backup facility, the G-Drive’s structure did not allow for external backups. This vulnerability ultimately left it unprotected.&lt;/p&gt;
    &lt;p&gt;Criticism continues to build regarding the government's data management protocols.&lt;/p&gt;
    &lt;p&gt;This article was originally written in Korean and translated by a bilingual reporter with the help of generative AI tools. It was then edited by a native English-speaking editor. All AI-assisted translations are reviewed and refined by our newsroom.&lt;/p&gt;
    &lt;p&gt;BY JEONG JAE-HONG [[email protected]],D&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://koreajoongangdaily.joins.com/news/2025-10-01/national/socialAffairs/NIRS-fire-destroys-governments-cloud-storage-system-no-backups-available/2412936"/><published>2025-10-05T17:20:39+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45483531</id><title>Show HN: ut – Rust based CLI utilities for devs and IT</title><updated>2025-10-06T05:10:25.225375+00:00</updated><content>&lt;doc fingerprint="3eb52433f1893217"&gt;
  &lt;main&gt;
    &lt;p&gt;A fast, lightweight CLI utility toolkit for developers and IT professionals. &lt;code&gt;ut&lt;/code&gt; provides a comprehensive set of commonly-used tools in a single binary, eliminating the need to install and remember multiple utilities or search for random websites to perform simple tasks.&lt;/p&gt;
    &lt;code&gt;cargo install --git https://github.com/ksdme/ut.git&lt;/code&gt;
    &lt;code&gt;ut &amp;lt;TOOL&amp;gt; [OPTIONS]&lt;/code&gt;
    &lt;p&gt;Run &lt;code&gt;ut --help&lt;/code&gt; to see all available tools, or &lt;code&gt;ut &amp;lt;TOOL&amp;gt; --help&lt;/code&gt; for specific tool documentation.&lt;/p&gt;
    &lt;code&gt;├── Encoding
│   ├── base64      - Base64 encode/decode
│   │   ├── encode
│   │   └── decode
│   └── url         - URL encode/decode
│       ├── encode
│       └── decode
├── Hashing
│   └── hash        - Cryptographic hash digests
│       ├── md5
│       ├── sha1
│       ├── sha224
│       ├── sha256
│       ├── sha384
│       └── sha512
├── Data Generation
│   ├── uuid        - Generate UUIDs
│   │   ├── v1
│   │   ├── v3
│   │   ├── v4
│   │   ├── v5
│   │   └── v7
│   ├── token       - Generate secure random tokens
│   ├── lorem       - Generate lorem ipsum text
│   └── random      - Generate random numbers
├── Text Processing
│   ├── case        - Convert text case formats
│   │   ├── lower
│   │   ├── upper
│   │   ├── camel
│   │   ├── title
│   │   ├── constant
│   │   ├── header
│   │   ├── sentence
│   │   └── snake
│   ├── pretty-print - Unescape newlines and tabs
│   └── diff        - Compare text with visual output
├── Development Tools
│   ├── calc        - Expression calculator
│   ├── json        - JSON builder and utilities
│   │   └── builder
│   ├── regex       - Interactive regex tester
│   └── datetime    - Parse and convert datetimes
├── Web &amp;amp; Network
│   ├── http        - HTTP utilities
│   │   └── status
│   ├── serve       - Local HTTP file server
│   └── qr          - Generate QR codes
├── Color &amp;amp; Design
│   └── color       - Color utilities
│       └── convert
└── Reference
    └── unicode     - Unicode symbol reference
&lt;/code&gt;
    &lt;p&gt;Encode and decode data using Base64 encoding.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports both standard and URL-safe character sets&lt;/item&gt;
      &lt;item&gt;Can read from files or stdin&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut base64 encode "hello world"
ut base64 decode "aGVsbG8gd29ybGQ="
ut base64 encode --urlsafe "hello world"&lt;/code&gt;
    &lt;p&gt;URL encode and decode text.&lt;/p&gt;
    &lt;code&gt;ut url encode "hello world"
ut url decode "hello%20world"&lt;/code&gt;
    &lt;p&gt;Generate cryptographic hash digests using various algorithms.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports MD5, SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512&lt;/item&gt;
      &lt;item&gt;Can read from files or stdin&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut hash sha256 "hello world"
ut hash md5 - &amp;lt; file.txt&lt;/code&gt;
    &lt;p&gt;Generate UUIDs in various versions.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;v1: Timestamp-based&lt;/item&gt;
      &lt;item&gt;v3: Namespace + MD5 hash&lt;/item&gt;
      &lt;item&gt;v4: Random&lt;/item&gt;
      &lt;item&gt;v5: Namespace + SHA-1 hash&lt;/item&gt;
      &lt;item&gt;v7: Timestamp-based, sortable&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut uuid v4
ut uuid v4 --count 5
ut uuid v5 --namespace DNS --name example.com
ut uuid v7
ut uuid v7 --count 5&lt;/code&gt;
    &lt;p&gt;Generate cryptographically secure random tokens.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Customizable length and character sets&lt;/item&gt;
      &lt;item&gt;Uses OS-level secure randomness&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut token --length 32
ut token --no-symbols --length 64&lt;/code&gt;
    &lt;p&gt;Generate lorem ipsum placeholder text.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Customizable paragraph count and sentence structure&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut lorem --paragraphs 5
ut lorem --min-sentences 2 --max-sentences 6&lt;/code&gt;
    &lt;p&gt;Generate random numbers within a specified range.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports decimal precision with step parameter&lt;/item&gt;
      &lt;item&gt;Can generate multiple values at once&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut random --min 1 --max 100
ut random --min 0 --max 1 --step 0.01 --count 10&lt;/code&gt;
    &lt;p&gt;Convert text between different case formats.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;lowercase, UPPERCASE, camelCase, snake_case, Title Case, CONSTANT_CASE, Header-Case, Sentence case&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut case lower "Hello World"
ut case camel "hello_world"
ut case snake "HelloWorld"&lt;/code&gt;
    &lt;p&gt;Resolve escaped newlines and tab characters in text.&lt;/p&gt;
    &lt;code&gt;ut pretty-print "hello\nworld\ttab"&lt;/code&gt;
    &lt;p&gt;Compare text contents with visual diff output.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports file comparison or interactive editing&lt;/item&gt;
      &lt;item&gt;Color-coded character-level differences&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut diff -a file1.txt -b file2.txt
ut diff  # Opens editor for both inputs&lt;/code&gt;
    &lt;p&gt;Expression calculator with support for multiple number formats and mathematical functions.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports arithmetic operations, exponentiation, functions (sin, cos, tan, log, exp, sqrt, abs, floor, ceil, round)&lt;/item&gt;
      &lt;item&gt;Binary (0b), hexadecimal (0x), and decimal number formats&lt;/item&gt;
      &lt;item&gt;Mathematical constants (pi, e)&lt;/item&gt;
      &lt;item&gt;Results displayed in decimal, hex, and binary&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut calc "2 + 2 * 3"
ut calc "sin(pi / 2)"
ut calc "0xFF + 0b1010"
ut calc "sqrt(16) ^ 2"&lt;/code&gt;
    &lt;p&gt;JSON utilities including a powerful JSON builder.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Build complex JSON structures using dot notation&lt;/item&gt;
      &lt;item&gt;Supports nested objects and arrays&lt;/item&gt;
      &lt;item&gt;Array indexing and append operations&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut json builder a.b.c=hello a.b.d=world
ut json builder "user.name=John" "user.age=30" "user.tags[]=dev" "user.tags[]=rust"
ut json builder "items[0].id=1" "items[0].name=first" "items[1].id=2"&lt;/code&gt;
    &lt;p&gt;Interactive regex tester with live highlighting.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Real-time pattern matching visualization&lt;/item&gt;
      &lt;item&gt;Multi-color highlighting for capture groups&lt;/item&gt;
      &lt;item&gt;Load test strings from files&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut regex
ut regex --test sample.txt&lt;/code&gt;
    &lt;p&gt;Parse and convert datetimes between timezones.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Support for ISO 8601 and custom format strings&lt;/item&gt;
      &lt;item&gt;Convert between timezones&lt;/item&gt;
      &lt;item&gt;"now" keyword for current time&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut datetime now
ut datetime "2025-10-04T15:30:00Z" --target-timezone "Asia/Tokyo"
ut datetime "October 04, 2025 03:30 PM" --source-timezone UTC --parse-format "MonthName Day2, Year4 Hour12:Minute2 AMPM"&lt;/code&gt;
    &lt;p&gt;HTTP utilities including status code lookup.&lt;/p&gt;
    &lt;code&gt;ut http status 404
ut http status  # List all status codes&lt;/code&gt;
    &lt;p&gt;Start a local HTTP file server.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Customizable host and port&lt;/item&gt;
      &lt;item&gt;Directory listing support&lt;/item&gt;
      &lt;item&gt;Optional HTTP Basic authentication&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut serve --port 8080
ut serve --directory ./public --auth username:password&lt;/code&gt;
    &lt;p&gt;Generate QR codes.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Terminal display or save to PNG file&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut qr "https://example.com"
ut qr "Hello World" --output qrcode.png&lt;/code&gt;
    &lt;p&gt;Color utilities for working with different color formats.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Supports hex, rgb, rgba, hsl, hwb, lab, lch, oklab, oklch&lt;/item&gt;
      &lt;item&gt;Parses any CSS-compatible color format&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;ut color convert "#FF5733"
ut color convert "rgb(255, 87, 51)"
ut color convert "hsl(9, 100%, 60%)"&lt;/code&gt;
    &lt;p&gt;Display Unicode symbol reference table.&lt;/p&gt;
    &lt;code&gt;ut unicode&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fast: Built in Rust for optimal performance&lt;/item&gt;
      &lt;item&gt;Standalone: Single binary with no runtime dependencies&lt;/item&gt;
      &lt;item&gt;Composable: Tools work with stdin/stdout for easy piping&lt;/item&gt;
      &lt;item&gt;Secure: Uses cryptographically secure random number generators where appropriate&lt;/item&gt;
      &lt;item&gt;Cross-platform: Works on Linux, macOS, and Windows&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Run the project
cargo run -- &amp;lt;tool&amp;gt; [args]

# Format code
cargo fmt

# Run tests
cargo test&lt;/code&gt;
    &lt;p&gt;Parts of this project were built using Claude Code, an AI-powered coding assistant, with human oversight and collaboration.&lt;/p&gt;
    &lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/ksdme/ut"/><published>2025-10-05T17:36:20+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45483651</id><title>Callbacks in C++ using template functors (1994)</title><updated>2025-10-06T05:10:24.594485+00:00</updated><content>&lt;doc fingerprint="86297b127e6d336d"&gt;
  &lt;main&gt;&lt;p&gt;Copyright 1994 Rich Hickey&lt;/p&gt;&lt;p&gt;INTRODUCTION&lt;/p&gt;&lt;p&gt;One of the many promises of Object-Oriented programming is that it will allow for plug-and-play software design with re-usable components. Designers will pull objects from their library 'shelves' and hook them together to make software. In C++, this hooking together of components can be tricky, particulary if they are separately designed. We are still a long way from interoperable libraries and application components. Callbacks provide a mechanism whereby independently developed objects may be connected together. They are vital for plug and play programming, since the likelihood of Vendor A implementing their library in terms of Vendor B's classes, or your home-brewed classes, is nil.&lt;/p&gt;&lt;p&gt;Callbacks are in wide use, however current implementations differ and most suffer from shortcomings, not the least of which is their lack of generality. This article describes what callbacks are, how they are used, and the criteria for a good callback mechanism. It summarizes current callback methods and their weaknesses. It then describes a flexible, powerful and easy-to-use callback technique based on template functors - objects that behave like functions.&lt;/p&gt;&lt;p&gt;CALLBACK FUNDAMENTALS&lt;/p&gt;&lt;p&gt;What Are Callbacks?&lt;/p&gt;&lt;p&gt;When designing application or sub-system specific components we often know all of the classes with which the component will interact and thus explicity code interfaces in terms of those classes. When designing general purpose or library components however, it is often necessary or desirable to put in hooks for calling unknown objects. What is required is a way for one component to call another without having been written in terms of, or with knowledge of, the other component's type. Such a 'type-blind' call mechanism is often referred to as a callback.&lt;/p&gt;&lt;p&gt;A callback might be used for simple notification, two-way communication, or to distribute work in a process. For instance an application developer might want to have a &lt;code&gt;Button&lt;/code&gt;&amp;#13;
component in a GUI library call an application-specific object when&amp;#13;
clicked upon.  The designer of a data entry component might want to&amp;#13;
offer the capability to call application objects for input validation.&amp;#13;
Collection classes often offer an &lt;code&gt;apply()&lt;/code&gt; function, which&amp;#13;
'applies' a member function of an application object to the items they&amp;#13;
contain.&amp;#13;
&lt;/p&gt;&lt;p&gt;A callback, then, is a way for a component designer to offer a generic connection point which developers can use to establish communication with application objects. At some subsequent point, the component 'calls back' the application object. The communication takes the form of a function call, since this is the way objects interact in C++.&lt;/p&gt;&lt;p&gt;Callbacks are useful in many contexts. If you use any commercial class libraries you have probably seen at least one mechanism for providing callbacks. All callback implementations must address a fundamental problem posed by the C++ type system: How can you build a component such that it can call a member function of another object whose type is unknown at the time the component is designed? C++'s type system requires that we know something of the type of any object whose member functions we wish to call, and is often criticized by fans of other OO languages as being too inflexible to support true component-based design, since all the components have to 'know' about each other. C++'s strong typing has too many advantages to abandon, but addressing this apparent lack of flexibility may encourage the proliferation of robust and interoperable class libraries.&lt;/p&gt;&lt;p&gt;C++ is in fact quite flexible, and the mechanism presented here leverages its flexibility to provide this functionality without language extension. In particular, templates supply a powerful tool for solving problems such as this. If you thought templates were only for container classes, read on!&lt;/p&gt;&lt;p&gt;Callback Terminology&lt;/p&gt;&lt;p&gt;There are three elements in any callback mechanism - the caller, the callback function, and the callee.&lt;/p&gt;&lt;p&gt;The caller is usually an instance of some class, for instance a library component (although it could be a function, like &lt;code&gt;qsort()&lt;/code&gt;), that provides or requires the callback; i.e.  it&amp;#13;
can, or must, call some third party code to perform its work, and uses&amp;#13;
the callback mechanism to do so.  As far as the designer of the caller&amp;#13;
is concerned, the callback is just a way to invoke a process, referred&amp;#13;
to here as the callback function. The caller determines the&amp;#13;
signature of the callback function i.e.  its argument(s) and return&amp;#13;
types.  This makes sense, because it is the caller that has the work to&amp;#13;
do, or the information to convey.  For instance, in the examples above,&amp;#13;
the &lt;code&gt;Button&lt;/code&gt; class may want a callback function with no&amp;#13;
arguments and no return.  It is a simple notification function used by&amp;#13;
the &lt;code&gt;Button&lt;/code&gt; to indicate it has been clicked upon.  The&amp;#13;
&lt;code&gt;DataEntryField&lt;/code&gt; component might want to pass a &lt;code&gt;String&lt;/code&gt;&amp;#13;
to the callback function and get a &lt;code&gt;Boolean&lt;/code&gt; return.&amp;#13;
&lt;/p&gt;&lt;p&gt;A caller may require the callback for just the duration of one function, as with ANSI C's &lt;code&gt;qsort()&lt;/code&gt;, or may want to hold on&amp;#13;
to the callback in order to call back at some later time, as with the&amp;#13;
&lt;code&gt;Button&lt;/code&gt; class.        &lt;/p&gt;&lt;p&gt;The callee is usually a member function of an object of some class, but it can also be a stand-alone function or static member function, that the application designer wishes to be called by the caller component. Note that in the case of a non-static member function a particular object/member-function pair is the callee. The function to be called must be compatible with the signature of the callback function specified by the caller.&lt;/p&gt;&lt;p&gt;Criteria for a Good Callback Mechanism&lt;/p&gt;&lt;p&gt;A callback mechanism in the object oriented model should support both component and application design. Component designers should have a standard, off-the-shelf way of providing callback services, requiring no invention on their part. Flexibility in specifying the number and types of argument and return values should be provided. Since the component may be designed for use in as-yet-unthought-of applications, the component designer should neither need to know, nor dictate, the types of the objects which may be 'called back' by the component.&lt;/p&gt;&lt;p&gt;Application developers, given a component with this standard callback mechanism and some instance of a class with a member function compatible with the callback function signature, should have to do no custom 'glue' coding in order to connect the two together. Nor should they have to modify the callee class or hand-derive a new class. If they want to have the callback invoke a stand-alone, non-member function, that should be supported as well.&lt;/p&gt;&lt;p&gt;To support this behavior the callback mechanism should be:&lt;/p&gt;&lt;p&gt;Object Oriented - Our applications are built with objects. In a C++ application most functionality is contained in member functions, which cannot be invoked via normal ptr-to-functions. Non-static member functions operate upon objects, which have state. Calling such functions is more than just invoking a process, it is operating upon a particular object, thus an object-oriented callback must contain information about which object to call.&lt;/p&gt;&lt;p&gt;Type Safe - Type safety is a fundamental feature and benefit of C++ and any robust C++ callback mechanism must be type safe. That means we must ensure that objects are used in compliance with their specified interfaces, and that type rules are enforced for arguments, return values, and conversions. The best way to ensure this is to have the compiler do the work at compile time.&lt;/p&gt;&lt;p&gt;Non-Coupling - This is the fundamental goal of callbacks - to allow components designed in ignorance of each other to be connected together. If the mechanism somehow introduces a dependancy between caller and callee it has failed in its basic mission.&lt;/p&gt;&lt;p&gt;Non-Type-Intrusive - Some mechanisms for doing callbacks require a modification to, or derivation of, the caller or callee types. The fact that an object is connected to another object in a particular application often has nothing to do with its type. As we'll see below, mechanisms that are type intrusive can reduce the flexibility and increase the complexity of application code.&lt;/p&gt;&lt;p&gt;Generic - The primary differences between different callback situations are the types involved. This suggests that the callback mechanism should be parameterized using templates. Templates insure consistent interfaces and names in all callback situations, and provide a way to have any necessary support code be generated by the compiler, not the user.&lt;/p&gt;&lt;p&gt;Flexible - Experience has shown that callback systems that require an exact match between callback function and callee function signatures are too rigid for real-world use. For instance you may encounter a callback that passes a &lt;code&gt;Derived *&lt;/code&gt; that you want to connect to a callee&amp;#13;
function that takes a &lt;code&gt;Base *&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;p&gt;CURRENT MECHANISMS&lt;/p&gt;&lt;p&gt;Function Model&lt;/p&gt;&lt;p&gt;The simplest callback mechanism is a pointer-to-function, a la ANSI C's &lt;code&gt;qsort()&lt;/code&gt;.  Getting a stand-alone function to act upon a&amp;#13;
particular object, however, usually involves kludges like using static&amp;#13;
or global pointers to indicate the target object, or having the callback&amp;#13;
function take an extra parameter (usually a pointer to the object to act&amp;#13;
upon). The static/global pointer method breaks down when the callback&amp;#13;
relationship exists across calls, i.e.  'I want to connect this Button&amp;#13;
to this X and this other Button to this other X, for the duration of the&amp;#13;
app'.  The extra paramter method, if done type-safely, introduces&amp;#13;
undesirable coupling between the caller and callee types.        &lt;/p&gt;&lt;p&gt;&lt;code&gt;qsort()&lt;/code&gt; achieves its genericity by foregoing type safety.  i.e.,&amp;#13;
in order for it to be ignorant of the types it is manipulating it takes&amp;#13;
untyped (&lt;code&gt;void *&lt;/code&gt;) arguments.  There is nothing to prevent&amp;#13;
someone from calling &lt;code&gt;qsort()&lt;/code&gt; on an array of apples and&amp;#13;
passing a pointer to a function that compares oranges!&amp;#13;
&lt;/p&gt;&lt;p&gt;An example of this typeless mechanism you'll frequently see is the 'apply' function in collections. The purpose of an apply function is to allow a developer to pass a callback to a collection and have it be 'applied' to (called on) each item in the collection. Unfortunately it often looks like this:&lt;/p&gt;&lt;quote&gt;void apply(void (*func)(T &amp;amp;theItem,void *extraStuff),void *theStuff);&lt;/quote&gt;&lt;p&gt;Chances are really good you don't have a function like &lt;code&gt;func&lt;/code&gt; sitting around, so you'll have&amp;#13;
to write one (lots of casting required). And make sure you pass it the&amp;#13;
right stuff. Ugh.                                    &lt;/p&gt;&lt;p&gt;Single Rooted Hierarchy&lt;/p&gt;&lt;p&gt;Beware of callback mechanisms that appear type safe but are in fact not. These mechanisms usually involve some base-of-all-classes like Object or EventHandler, and utilize casts from ptr-to-member-of-derived to ptr-to-member-of-base. Experience has indicated that single-rooted systems are unworkable if components are to come from multiple sources.&lt;/p&gt;&lt;p&gt;Parameterize the Caller&lt;/p&gt;&lt;p&gt;The component designer could parameterize the component on the type of the callee. Such parameterization is inappropriate in many situations and callbacks are one of them. Consider:&lt;/p&gt;&lt;quote&gt;class Button{ public: virtual void click(); //... }; template &amp;lt;class T&amp;gt; class ButtonThatCallsBack:public class Button{ public: ButtonThatCalls(T *who,void (T::*func)(void)): callee(who),callback(func){} void click() { (callee-&amp;gt;*callback)(); } private: T *callee; void (T::*callback)(void); }; class CDPlayer{ public: void play(); //... }; //Connect a CDPlayer and a Button CDPlayer cd; ButtonThatCallsBack&amp;lt;CDPlayer&amp;gt; button(&amp;amp;cd,&amp;amp;CDPlayer::play); button.click(); //calls cd.play()&lt;/quote&gt;&lt;p&gt;A &lt;code&gt;ButtonThatCallsBack&amp;lt;CDPlayer&amp;gt;&lt;/code&gt; would thus 'know'&amp;#13;
about &lt;code&gt;CDPlayer&lt;/code&gt; and provides an interface explicitly based&amp;#13;
on it.  The problem is that this introduces rigidity in the system in&amp;#13;
that the callee type becomes part of the caller type, i.e.  it is&amp;#13;
'type-intrusive'.  All code that creates&amp;#13;
&lt;code&gt;ButtonThatCallsBack&lt;/code&gt; objects must be made aware of the&amp;#13;
callee relationship, increasing coupling in the system.  A&amp;#13;
&lt;code&gt;ButtonThatCallsBack&amp;lt;X&amp;gt; &lt;/code&gt;is of a different type than a&amp;#13;
&lt;code&gt;ButtonThatCallsBack&amp;lt;Y&amp;gt;&lt;/code&gt;, thus preventing by-value&amp;#13;
manipulation.&amp;#13;
&lt;/p&gt;&lt;p&gt;If a component has many callback relationships it quickly becomes unworkable to parameterize them all. Consider a &lt;code&gt;Button&lt;/code&gt;&amp;#13;
that wants to maintain a dynamic list of callees to be notified upon a&amp;#13;
click event. Since the callee type is built into the &lt;code&gt;Button&lt;/code&gt;&amp;#13;
class type, this list must be either homogeneous or typeless.&amp;#13;
&lt;/p&gt;&lt;p&gt;Library code cannot even create &lt;code&gt;ButtonThatCallsBack&lt;/code&gt;&amp;#13;
objects because their instantiation depends on application types.  This&amp;#13;
is a severe constraint.  Consider GUI library code that reads a dialog&amp;#13;
description from a resource file and creates a &lt;code&gt;Dialog&lt;/code&gt;&amp;#13;
object. How can it know that you want the &lt;code&gt;Buttons&lt;/code&gt; in that&amp;#13;
&lt;code&gt;Dialog&lt;/code&gt; to call back &lt;code&gt;CDPlayers&lt;/code&gt;? It can't,&amp;#13;
therefore it can't create the &lt;code&gt;Buttons&lt;/code&gt; for you.&amp;#13;
&lt;/p&gt;&lt;p&gt;Callee Mix-In&lt;/p&gt;&lt;p&gt;The caller component designer can invent an abstract base class to be the target of the callback, and indicate to application developers that they mix-in this base in order to connect their class with the component. I call this the "callee mix-in."&lt;/p&gt;&lt;p&gt;Here the designer of the &lt;code&gt;Button&lt;/code&gt; class wants to&amp;#13;
offer a click notification callback, and so defines a nested class&amp;#13;
&lt;code&gt;Notifiable&lt;/code&gt; with a pure virtual function &lt;code&gt;notify()&lt;/code&gt;&amp;#13;
that has the desired signature.  Clients of the &lt;code&gt;Button&lt;/code&gt;&amp;#13;
class will have to pass to its constructor a pointer to a&amp;#13;
&lt;code&gt;Notifiable&lt;/code&gt;, which the &lt;code&gt;Button&lt;/code&gt; will use (at&amp;#13;
some point later on) for notification of clicks:&amp;#13;
&lt;/p&gt;&lt;quote&gt;class Button{ public: class Notifiable{ public: virtual void notify()=0; }; Button(Notifiable *who):callee(who){} void click() {callee-&amp;gt;notify();} private: Notifiable *callee; }; Given : class CDPlayer{ public: void play(); //... };&lt;/quote&gt;&lt;p&gt;an application developer wishing to have a &lt;code&gt;Button&lt;/code&gt; call&amp;#13;
back a &lt;code&gt;CDPlayer&lt;/code&gt; would have to derive a new class from both&amp;#13;
&lt;code&gt;CDPlayer&lt;/code&gt; and&amp;#13;
&lt;code&gt;Button::Notifiable&lt;/code&gt;, overriding the pure virtual function&amp;#13;
to do the desired work:&amp;#13;
&lt;/p&gt;&lt;quote&gt;class MyCDPlayer:public CDPlayer,public Button::Notifiable{ public: void notify() {play();} };&lt;/quote&gt;&lt;p&gt;and use this class rather than &lt;code&gt;CDPlayer&lt;/code&gt; in the&amp;#13;
application:&amp;#13;
&lt;/p&gt;&lt;quote&gt;MyCDPlayer cd; Button button(&amp;amp;cd); button.click(); //calls cd.play()&lt;/quote&gt;&lt;p&gt;This mechanism is type safe, achieves the decoupling of &lt;code&gt;Button&lt;/code&gt;&amp;#13;
and&amp;#13;
&lt;code&gt;CDPlayer&lt;/code&gt;, and is good magazine article fodder.  It is&amp;#13;
almost useless in practice, however.&amp;#13;
&lt;/p&gt;&lt;p&gt;The problem with the callee mix-in is that it, too, is type-intrusive, i.e. it impacts the type of the callee, in this case by forcing derivation. This has three major flaws. First, the use of multiple inheritance, particularly if the callee is a callee of multiple components, is problematic due to name clashes etc. Second, derivation may be impossible, for instance if the application designer gets &lt;code&gt;CDPlayers&lt;/code&gt; from an unchangeable, untouchable API (library&amp;#13;
designers note: this is a big problem with mix-in based mechanisms in&amp;#13;
general).  The third problem is best demonstrated.  Consider this&amp;#13;
version of &lt;code&gt;CDPlayer&lt;/code&gt;:&amp;#13;
&lt;/p&gt;&lt;quote&gt;class CDPlayer{ public: void play(); void stop(); //... };&lt;/quote&gt;&lt;p&gt;It doesn't seem unreasonable to have an application where one &lt;code&gt;Button&lt;/code&gt;&amp;#13;
calls &lt;code&gt;CDPlayer::play()&lt;/code&gt; and another &lt;code&gt;CDPlayer::stop()&lt;/code&gt;.&amp;#13;
 The mix-in mechanism fails completely here, since it can only support a&amp;#13;
single mapping between caller/callee/member-function, i.e. &lt;code&gt;MyCDPlayer&lt;/code&gt;&amp;#13;
can have only one &lt;code&gt;notify()&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;p&gt;CALLBACKS USING TEMPLATE FUNCTORS&lt;/p&gt;&lt;p&gt;When I first thought about the inter-component callback problem I decided that what was needed was a language extension to support 'bound-pointers', special pointers representing information about an object and a member function of that object, storable and callable much like regular pointers to functions. ARM 5.5 commentary has a brief explanation of why bound pointers were left out.&lt;/p&gt;&lt;p&gt;How would bound pointers work? Ideally you would initialize them with either a regular pointer-to-function or a reference to an object and a pointer-to-member-function. Once initialized, they would behave like normal pointer-to-functions. You could apply the function call &lt;code&gt;operator()&lt;/code&gt; to them to invoke the function. In order to be&amp;#13;
suitable for a callback mechanism, the information about the type of the&amp;#13;
callee would _not_ be part of the type of the bound-pointer. It might&amp;#13;
look something like this:&amp;#13;
&lt;/p&gt;&lt;quote&gt;// Warning - NOT C++ class Fred{ public: void foo(); }; Fred fred; void (* __bound fptr)() = &amp;amp;fred.foo;&lt;/quote&gt;&lt;p&gt;Here &lt;code&gt;fptr&lt;/code&gt; is a bound-pointer to a function that takes&amp;#13;
no arguments and returns &lt;code&gt;void&lt;/code&gt;.  Note that &lt;code&gt;Fred&lt;/code&gt;&amp;#13;
is not part of &lt;code&gt;fptr's&lt;/code&gt; type.  It is initialized with the&amp;#13;
object &lt;code&gt;fred&lt;/code&gt; and a pointer-to-member-function-of-Fred,&amp;#13;
&lt;code&gt;foo&lt;/code&gt;.  Saying:&amp;#13;
&lt;/p&gt;&lt;quote&gt;fptr();&lt;/quote&gt;&lt;p&gt;would invoke &lt;code&gt;foo&lt;/code&gt; on &lt;code&gt;fred&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;p&gt;Such bound-pointers would be ideal for callbacks:&lt;/p&gt;&lt;quote&gt;// Warning - NOT C++ class Button{ public: Button(void (* __bound uponClickDoThis)() ) :notify(uponClickDoThis) {} void click() { notify(); } private: void (* __bound notify)(); }; class CDPlayer{ public: void play(); }; CDPlayer cd; Button button(&amp;amp;cd.play); button.click(); //calls cd.play()&lt;/quote&gt;&lt;p&gt;Bound-pointers would require a non-trivial language extension and some tricky compiler support. Given the extreme undesirability of any new language features I'd hardly propose bound-pointers now. Nevertheless I still consider the bound-pointer concept to be the correct solution for callbacks, and set out to see how close I could get in the current and proposed language. The result is the Callback library described below. As it turns out, the library solution can not only deliver the functionality shown above (albeit with different syntax), it proved more flexible than the language extension would have been!&lt;/p&gt;&lt;p&gt;Returning from the fantasy world of language extension, the library must provide two things for the user. The first is some construct to play the role of the 'bound-pointer'. The second is some method for creating these 'bound-pointers' from either a regular pointer-to-function or an object and a pointer-to-member-function.&lt;/p&gt;&lt;p&gt;In the 'bound-pointer' role we need an object that behaves like a function. Coplien has used the term functor to describe such objects. For our purposes a functor is simply an object that behaves like a pointer-to-function. It has an &lt;code&gt;operator()&lt;/code&gt;&amp;#13;
(the function call operator) which can be used to invoke the function to&amp;#13;
which it points.  The library provides a set of template &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
classes.  They hold any necessary callee data and provide&amp;#13;
pointer-to-function like behavior. Most important, their type has no&amp;#13;
connection whatsoever to the callee type.  Components define their&amp;#13;
callback interface using the &lt;code&gt;Functor&lt;/code&gt; classes.&amp;#13;
&lt;/p&gt;&lt;p&gt;The construct provided by the library for creating functors is an overloaded template function, &lt;code&gt;makeFunctor()&lt;/code&gt;, which&amp;#13;
takes as arguments the callee information (either an object and a&amp;#13;
ptr-to-member-function, or a ptr-to-function) and returns something&amp;#13;
suitable for initializing a&amp;#13;
&lt;code&gt;Functor&lt;/code&gt; object.&amp;#13;
&lt;/p&gt;&lt;p&gt;The resulting mechanism is very easy to use. A complete example:&lt;/p&gt;&lt;quote&gt;#include &amp;lt;callback.h&amp;gt; //include the callback library header #include &amp;lt;iostream.h&amp;gt; class Button{ public: Button(const Functor0 &amp;amp;uponClickDoThis) :notify(uponClickDoThis) {} void click() { notify(); //a call to operator() } private: Functor0 notify; //note - held by value }; //Some application stuff we'd like to connect to Button: class CDPlayer{ public: void play(){cout&amp;lt;&amp;lt;"Playing"&amp;lt;&amp;lt;endl;} void stop(){cout&amp;lt;&amp;lt;"Stopped"&amp;lt;&amp;lt;endl;} }; void wow() {cout&amp;lt;&amp;lt;"Wow!"&amp;lt;&amp;lt;endl;} void main() { CDPlayer cd; //makeFunctor from object and ptr-to-member-function Button playButton(makeFunctor(cd,&amp;amp;CDPlayer::play)); Button stopButton(makeFunctor(cd,&amp;amp;CDPlayer::stop)); //makeFunctor from pointer-to-function Button wowButton(makeFunctor(&amp;amp;wow)); playButton.click(); //calls cd.play() stopButton.click(); //calls cd.stop() wowButton.click(); //calls wow() }&lt;/quote&gt;&lt;p&gt;Voila! A component (&lt;code&gt;Button&lt;/code&gt;) has been connected to&amp;#13;
application objects and functions it knows nothing about and that know&amp;#13;
nothing about &lt;code&gt;Button&lt;/code&gt;, without any custom coding,&amp;#13;
derivation or modification of the objects involved.  And it's type safe.&amp;#13;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Button&lt;/code&gt; class designer specifies the callback&amp;#13;
interface in terms of&amp;#13;
&lt;code&gt;Functor0&lt;/code&gt;, a functor that takes no arguments and returns&amp;#13;
&lt;code&gt;void&lt;/code&gt;.  It stores the functor away in its member &lt;code&gt;notify&lt;/code&gt;.&amp;#13;
 When it comes time to call back, it simply calls &lt;code&gt;operator()&lt;/code&gt;&amp;#13;
on the functor.  This looks and feels just like a call via a&amp;#13;
pointer-to-function.&amp;#13;
&lt;/p&gt;&lt;p&gt;Connecting something to a component that uses callbacks is simple. You can just initialize a &lt;code&gt;Functor&lt;/code&gt; with the result&amp;#13;
of an appropriate call to&amp;#13;
&lt;code&gt;makeFunctor()&lt;/code&gt;.  There are two flavors of &lt;code&gt;makeFunctor()&lt;/code&gt;.&amp;#13;
 You can call it with a ptr-to-stand-alone function:&amp;#13;
&lt;/p&gt;&lt;quote&gt;makeFunctor(&amp;amp;wow)&lt;/quote&gt;&lt;p&gt;OR with an object and a pointer-to-member function:&lt;/p&gt;&lt;quote&gt;makeFunctor(cd,&amp;amp;CDPlayer::play)&lt;/quote&gt;&lt;p&gt;I must come clean at this point, and point out that the syntax above for &lt;code&gt;makeFunctor()&lt;/code&gt; is possible only in the proposed language,&amp;#13;
because it requires template members (specifically, the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
constructors would have to be templates).  In the current language the&amp;#13;
same result can be achieved by passing to &lt;code&gt;makeFunctor()&lt;/code&gt; a&amp;#13;
dummy parameter of type ptr-to-the-Functor-type-you-want-to-create. This&amp;#13;
iteration of the callback library requires you pass &lt;code&gt;makeFunctor()&lt;/code&gt;&amp;#13;
the dummy as the first parameter.  Simply cast &lt;code&gt;0&lt;/code&gt; to&amp;#13;
provide this argument:&amp;#13;
&lt;/p&gt;&lt;quote&gt;makeFunctor((Functor0 *)0,&amp;amp;wow) makeFunctor((Functor0 *)0,cd,&amp;amp;CDPlayer::play);&lt;/quote&gt;&lt;p&gt;I will use this current-language syntax from here on.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Button&lt;/code&gt; class above only needs a callback&amp;#13;
function with no arguments that returns &lt;code&gt;void&lt;/code&gt;.  Other&amp;#13;
components may want to pass data to the callback or get a return back.&amp;#13;
The only things distinguishing one functor from another are the number&amp;#13;
and types of the arguments to &lt;code&gt;operator()&lt;/code&gt; and its return&amp;#13;
type, if any. This indicates that functors can be represented in the&amp;#13;
library by (a set of) templates:&amp;#13;
&lt;/p&gt;&lt;quote&gt;//Functor classes provided by the Callback library: Functor0 //not a template - nothing to parameterize Functor1&amp;lt;P1&amp;gt; Functor2&amp;lt;P1,P2&amp;gt; Functor3&amp;lt;P1,P2,P3&amp;gt; Functor4&amp;lt;P1,P2,P3,P4&amp;gt; Functor0wRet&amp;lt;RT&amp;gt; Functor1wRet&amp;lt;P1,RT&amp;gt; Functor2wRet&amp;lt;P1,P2,RT&amp;gt; Functor3wRet&amp;lt;P1,P2,P3,RT&amp;gt; Functor4wRet&amp;lt;P1,P2,P3,P4,RT&amp;gt;&lt;/quote&gt;&lt;p&gt;These are parameterized by the types of their arguments (&lt;code&gt;P1&lt;/code&gt;&amp;#13;
etc) and return value (&lt;code&gt;RT&lt;/code&gt;) if any.  The numbering is&amp;#13;
necessary because we can't overload template class names on number of&amp;#13;
parameters.  '&lt;code&gt;wRet&lt;/code&gt;' is appended to distinguish those with&amp;#13;
return values.  Each has an &lt;code&gt;operator()&lt;/code&gt; with the&amp;#13;
corresponding signature, for example:&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1&amp;gt; class Functor1{ public: void operator()(P1 p1)const; //... }; template &amp;lt;class P1,class P2,class RT&amp;gt; class Functor2wRet{ public: RT operator()(P1 p1,P2 p2)const; //... };&lt;/quote&gt;&lt;p&gt;These &lt;code&gt;Functor&lt;/code&gt; classes are sufficient to meet the&amp;#13;
callback needs of component designers, as they offer a standard and&amp;#13;
consistent way to offer callback services, and a simple mechanism for&amp;#13;
invoking the callback function.  Given these templates in the library, a&amp;#13;
component designer need only pick one with the correct number of&amp;#13;
arguments and specify the desired types as parameters.  Here's the&amp;#13;
&lt;code&gt;DataEntryField&lt;/code&gt; that wants a validation callback that takes&amp;#13;
a &lt;code&gt;const String &amp;amp;&lt;/code&gt; and returns a&amp;#13;
&lt;code&gt;Boolean&lt;/code&gt;:&amp;#13;
&lt;/p&gt;&lt;quote&gt;#include &amp;lt;callback.h&amp;gt; class DataEntryField{ public: DataEntryField(const Functor1wRet&amp;lt;const String &amp;amp;,Boolean&amp;gt; &amp;amp;v): validate(v){} void keyHit(const String &amp;amp; stringSoFar) { if(validate(stringSoFar)) // process it etc... } private: Functor1wRet&amp;lt;const String &amp;amp;,Boolean&amp;gt; validate; //validate has a //Boolean operator()(const String &amp;amp;) };&lt;/quote&gt;&lt;p&gt;These trivial examples just scratch the surface of what you can do given a general purpose callback library such as this. Consider their application to state machines, dispatch tables etc.&lt;/p&gt;&lt;p&gt;The callback library is 100% compile-time type safe. (Where compile time includes template-instantiation time). If you try to make a functor out of something that is not compatible with the functor type you will get a compiler error. All correct virtual function behavior is preserved.&lt;/p&gt;&lt;p&gt;The system is also type flexible. You'll note that throughout this article I have said 'type compatible' rather than 'exactly-matching' when talking about the relationship between the callback function and the callee function. Experience has shown that requiring an exact match makes callbacks too rigid for practical use. If you have done much work with pointer-to-function based interfaces you've probably experienced the frustration of having a pointer to a function 'that would work' yet was not of the exact type required for a match.&lt;/p&gt;&lt;p&gt;To provide flexibility the library supports building a functor out of a callee function that is 'type compatible' with the target functor - it need not have an exactly matching signature. By type compatible I mean a function with the same number of arguments, of types reachable from the functor's argument types by implicit conversion. The return type of the function must be implicitly convertible to the return type of the functor. A functor with no return can be built from a function with a return - the return value is safely ignored.&lt;/p&gt;&lt;quote&gt;//assumes Derived publicly derived from Base void foo(Base &amp;amp;); long bar(Derived &amp;amp;); Functor1&amp;lt;Derived&amp;amp;&amp;gt; f1 = makeFunctor((Functor1&amp;lt;Derived&amp;amp;&amp;gt; *)0,&amp;amp;foo); //ok - will implicitly convert f1 = makeFunctor((Functor1&amp;lt;Derived&amp;amp;&amp;gt; *)0,&amp;amp;bar); //ok - ignores return&lt;/quote&gt;&lt;p&gt;Any necessary argument conversions or ignoring of returns is done by the compiler, i.e. there is no coercion done inside the mechanism or by the user. If the compiler can't get from the arguments passed to the functor to the arguments required by the callee function, the code is rejected at compile time. By allowing the compiler to do the work we get all of the normal conversions of arguments - derived to base, promotion and conversion of built-in types, and user-defined conversions.&lt;/p&gt;&lt;p&gt;The type-flexibility of the library is something that would not have been available in a language extension rendition of bound pointers.&lt;/p&gt;&lt;p&gt;Rounding out the functionality of the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
classes are a default constructor that will also accept &lt;code&gt;0&lt;/code&gt;&amp;#13;
as an initializer, which puts the&amp;#13;
&lt;code&gt;Functor&lt;/code&gt; in a known 'unset' state, and a conversion to&amp;#13;
&lt;code&gt;Boolean&lt;/code&gt; which can be used to test whether the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
is 'set'.  The &lt;code&gt;Functor&lt;/code&gt; classes do not rely on any virtual&amp;#13;
function behavior to work, thus they can be held and copied by-value.&amp;#13;
Thus a &lt;code&gt;Functor&lt;/code&gt; has the same ease-of-use as a regular&amp;#13;
pointer-to-function.&amp;#13;
&lt;/p&gt;&lt;p&gt;At this point you know everything you need to use the callback library. All of the code is in one file, &lt;code&gt;callback.h&lt;/code&gt;.  To&amp;#13;
use a callback in a component class, simply instantiate a &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
with the desired argument types.  To connect some stuff to a component&amp;#13;
that uses &lt;code&gt;Functors&lt;/code&gt; for callbacks, simply call &lt;code&gt;makeFunctor()&lt;/code&gt;&amp;#13;
on the stuff.  Easy.&amp;#13;
&lt;/p&gt;&lt;p&gt;Power Templates&lt;/p&gt;&lt;p&gt;As usual, what is easy for the user is often tricky for the implementor. Given the black-box descriptions above of the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
classes and &lt;code&gt;makeFunctor()&lt;/code&gt; it may be hard to swallow the&amp;#13;
claims of type-safety, transparent conversions, correct virtual function&amp;#13;
behavior etc.  A look behind the curtain reveals not only how it works,&amp;#13;
but also some neat template techniques.  Warning: most people find the&amp;#13;
pointer-to-member and template syntax used in the implementation&amp;#13;
daunting at first.&amp;#13;
&lt;/p&gt;&lt;p&gt;Obviously some sort of magic is going on. How can the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
class, with no knowledge of the type or signature of the callee, ensure&amp;#13;
a type safe call to it, possibly with implicit conversions of the&amp;#13;
arguments?  It can't, so it doesn't.  The actual work must be performed&amp;#13;
by some code that knows both the functor callback signature and&amp;#13;
everything about the callee.  The trick is to get the compiler to&amp;#13;
generate that code, and have the &lt;code&gt;Functor&lt;/code&gt; to point to it.&amp;#13;
Templates can help out all around.&amp;#13;
&lt;/p&gt;&lt;p&gt;The mechanism is spread over three components - the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
class, a &lt;code&gt;Translator&lt;/code&gt; class, and the &lt;code&gt;makeFunctor()&lt;/code&gt;&amp;#13;
function.  All are templates.&amp;#13;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Functor&lt;/code&gt; class is parameterized on the types of&amp;#13;
the callback function signature, holds the callee data in a typeless&amp;#13;
manner, and defines a typed &lt;code&gt;operator()&lt;/code&gt; but doesn't&amp;#13;
actually perform the work of calling back. Instead it holds a pointer to&amp;#13;
the actual callback code. When it comes time to call back, it passes the&amp;#13;
typeless data (itself actually), as well as the callback arguments, to&amp;#13;
this pointed-to function.&amp;#13;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Translator&lt;/code&gt; class is derived from &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
but is parameterized on both the &lt;code&gt;Functor&lt;/code&gt; type _and_ the&amp;#13;
callee types.  It knows about everything, and is thus able to define a&amp;#13;
fully type-safe static 'thunk' function that takes the typeless &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
data and the callback arguments.  It constructs its &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
base class with a pointer to this static function.  The thunk function&amp;#13;
does the work of calling back, turning the typeless &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
data back into a typed callee and calling the callee.  Since the &lt;code&gt;Translator&lt;/code&gt;&amp;#13;
does the work of converting the callee data to and from untyped data the&amp;#13;
conversions are considered 'safe'. The&amp;#13;
&lt;code&gt;Translator&lt;/code&gt; isA &lt;code&gt;Functor&lt;/code&gt;, so it can be used to&amp;#13;
initialize a &lt;code&gt;Functor&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;makeFunctor()&lt;/code&gt; function takes the callee data,&amp;#13;
creates a&amp;#13;
&lt;code&gt;Translator&lt;/code&gt; out of it and returns the &lt;code&gt;Translator&lt;/code&gt;.&amp;#13;
 Thus the &lt;code&gt;Translator&lt;/code&gt; object exists only briefly as the&amp;#13;
return value of &lt;code&gt;makeFunctor()&lt;/code&gt;, but its creation is enough&amp;#13;
to cause the compiler to lay down the static 'thunk' function, the&amp;#13;
address of which is carried in the &lt;code&gt;Functor&lt;/code&gt; that has been&amp;#13;
initialized with the &lt;code&gt;Translator&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;p&gt;All of this will become clearer with the details.&lt;/p&gt;&lt;p&gt;For each of the 10 &lt;code&gt;Functor&lt;/code&gt; classes there are 2&amp;#13;
&lt;code&gt;Translator&lt;/code&gt; classes and 3 versions of &lt;code&gt;makeFunctor()&lt;/code&gt;.&amp;#13;
 We'll examine a slice of the library here, &lt;code&gt;Functor1&lt;/code&gt; and&amp;#13;
its associated &lt;code&gt;Translators&lt;/code&gt; and &lt;code&gt;makeFunctors&lt;/code&gt;.&amp;#13;
The other &lt;code&gt;Functors&lt;/code&gt; differ only in the number of args and&amp;#13;
return values.&amp;#13;
&lt;/p&gt;&lt;p&gt;The Functors&lt;/p&gt;&lt;p&gt;Since the &lt;code&gt;Functor&lt;/code&gt; objects are the only entities&amp;#13;
held by the caller, they must contain the data about the callee.  With&amp;#13;
some care we can design a base class which can hold, in a typeless&amp;#13;
manner, the callee data, regardless of whether the callee is a&amp;#13;
ptr-to-function or object/ptr-to-member-function combo:&amp;#13;
&lt;/p&gt;&lt;quote&gt;//typeless representation of a function or object/mem-func class FunctorBase{ public: typedef void (FunctorBase::*_MemFunc)(); typedef void (*_Func)(); FunctorBase():callee(0),func(0){} FunctorBase(const void *c,const void *f,size_t sz) { if(c) //must be callee/memfunc { callee = (void *)c; memcpy(memFunc,f,sz); } else //must be ptr-to-func { func = f; } } //for evaluation in conditions //will be changed to bool when bool exists operator int()const{return func||callee;} class DummyInit{ }; //////////////////////////////////////////////////////////////// // Note: this code depends on all ptr-to-mem-funcs being same size // If that is not the case then make memFunc as large as largest //////////////////////////////////////////////////////////////// union{ const void *func; char memFunc[sizeof(_MemFunc)]; }; void *callee; };&lt;/quote&gt;&lt;p&gt;All &lt;code&gt;Functors&lt;/code&gt; are derived (protected) from this base.&amp;#13;
&lt;code&gt;FunctorBase&lt;/code&gt; provides a constructor from typeless args,&amp;#13;
where if &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; the callee is a&amp;#13;
pointer-to-function and &lt;code&gt;f&lt;/code&gt; is that pointer, else &lt;code&gt;c&lt;/code&gt;&amp;#13;
is pointer to the callee object and &lt;code&gt;f&lt;/code&gt; is a pointer to a&amp;#13;
pointer-to-member function and &lt;code&gt;sz&lt;/code&gt; is that&amp;#13;
ptr-to-member-function's size (in case an implementation has&amp;#13;
pointer-to-members of differing sizes).  It has a default constructor&amp;#13;
which inits to an 'unset' state, and an &lt;code&gt;operator int&lt;/code&gt; to&amp;#13;
allow for testing the state (set or unset).&amp;#13;
&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Functor&lt;/code&gt; class is a template.  It has a default&amp;#13;
constructor and the required &lt;code&gt;operator()&lt;/code&gt; corresponding to&amp;#13;
its template parameters. It uses the generated copy constructor and&amp;#13;
assignment operators.&amp;#13;
&lt;/p&gt;&lt;quote&gt;/************************* one arg - no return *******************/ template &amp;lt;class P1&amp;gt; class Functor1:protected FunctorBase{ public: Functor1(DummyInit * = 0){} void operator()(P1 p1)const { thunk(*this,p1); } FunctorBase::operator int; protected: typedef void (*Thunk)(const FunctorBase &amp;amp;,P1); Functor1(Thunk t,const void *c,const void *f,size_t sz): FunctorBase(c,f,sz),thunk(t){} private: Thunk thunk; };&lt;/quote&gt;&lt;p&gt;The &lt;code&gt;Functor&lt;/code&gt; class has a protected constructor that&amp;#13;
takes the same typeless args as &lt;code&gt;FunctorBase&lt;/code&gt;, plus an&amp;#13;
additional first argument.  This argument is a pointer to function (the&amp;#13;
thunk function) that takes the same arguments as the &lt;code&gt;operator()&lt;/code&gt;,&amp;#13;
plus an additional first argument of type &lt;code&gt;const FunctorBase &amp;amp;&lt;/code&gt;.&amp;#13;
 The &lt;code&gt;Functor&lt;/code&gt; stores this away (in thunk) and implements&amp;#13;
&lt;code&gt;operator()&lt;/code&gt; by calling &lt;code&gt;thunk()&lt;/code&gt;, passing&amp;#13;
itself and the other arguments.  Thus it is this &lt;code&gt;thunk()&lt;/code&gt;&amp;#13;
function that does the work of 'calling back'.&amp;#13;
&lt;/p&gt;&lt;p&gt;A key issue at this point is whether &lt;code&gt;operator()&lt;/code&gt;&amp;#13;
should be virtual. In the first iteration of my mechanism the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
classes were abstract and the &lt;code&gt;operator()&lt;/code&gt;'s pure virtual.&amp;#13;
To use them for callbacks a set of derived template classes&amp;#13;
parameterized on the callee type was provided. This required that&amp;#13;
functors always be passed and held by reference or pointer and never by&amp;#13;
value. It also required the caller component or the client code maintain&amp;#13;
the derived object for as long as the callback relationship existed. I&amp;#13;
found the maintenance and lifetime issues of these functor objects to be&amp;#13;
problematic, and desired by-value syntax.&amp;#13;
&lt;/p&gt;&lt;p&gt;In the current mechanism the &lt;code&gt;Functor&lt;/code&gt; classes are&amp;#13;
concrete and the &lt;code&gt;operator()&lt;/code&gt; is non-virtual.  They can be&amp;#13;
treated and used just like ptr-to-functions.  In particular, they can be&amp;#13;
stored by value in the component classes.&amp;#13;
&lt;/p&gt;&lt;p&gt;The Translators&lt;/p&gt;&lt;p&gt;Where does the &lt;code&gt;thunk()&lt;/code&gt; come from?  It is generated&amp;#13;
by the compiler as a static member of a template 'translator' class.&amp;#13;
For each&amp;#13;
&lt;code&gt;Functor&lt;/code&gt; class there are two translator classes, one for&amp;#13;
stand-alone functions (&lt;code&gt;FunctionTranslator&lt;/code&gt;) and one for&amp;#13;
member functions (&lt;code&gt;MemberTranslator&lt;/code&gt;). The translator&amp;#13;
classes are parameterized by the type of the &lt;code&gt;Functor&lt;/code&gt; as&amp;#13;
well as the type(s) of the callee.  With this knowledge they can, in a&amp;#13;
fully type-safe manner, perform two important tasks.&amp;#13;
&lt;/p&gt;&lt;p&gt;First, they can initialize the &lt;code&gt;Functor&lt;/code&gt; data.  They&amp;#13;
do this by being publicly derived from the &lt;code&gt;Functor&lt;/code&gt;.  They&amp;#13;
are constructed with typed callee information and which they pass&amp;#13;
(untyped) to the functor's protected constructor.&amp;#13;
&lt;/p&gt;&lt;p&gt;Second, they have a static member function &lt;code&gt;thunk()&lt;/code&gt;,&amp;#13;
which, when passed a &lt;code&gt;FunctorBase&lt;/code&gt;, converts its callee data&amp;#13;
back into typed information, and executes the callback on the callee.&amp;#13;
It is a pointer to this static function which is passed to the &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
constructor.&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1,class Func&amp;gt; class FunctionTranslator1:public Functor1&amp;lt;P1&amp;gt;{ public: FunctionTranslator1(Func f):Functor1&amp;lt;P1&amp;gt;(thunk,0,f,0){} static void thunk(const FunctorBase &amp;amp;ftor,P1 p1) { (Func(ftor.func))(p1); } };&lt;/quote&gt;&lt;p&gt;&lt;code&gt;FunctionTranslator&lt;/code&gt; is the simpler of the two.  It is&amp;#13;
parameterized by the argument type of the &lt;code&gt;Functor&lt;/code&gt; and some&amp;#13;
ptr-to-function type (&lt;code&gt;Func&lt;/code&gt;). Its constructor takes an&amp;#13;
argument of type &lt;code&gt;Func&lt;/code&gt; and passes it and a pointer to its&amp;#13;
static &lt;code&gt;thunk()&lt;/code&gt; function to the base class constructor. The&amp;#13;
thunk function, given a &lt;code&gt;FunctorBase&lt;/code&gt; ftor, casts ftor's&amp;#13;
func member back to its correct type (&lt;code&gt;Func&lt;/code&gt;) and calls it.&amp;#13;
There is an assumption here that the &lt;code&gt;FunctorBase&lt;/code&gt; ftor is&amp;#13;
one initialized by the constructor (or a copy).  There is no danger of&amp;#13;
it being otherwise, since the functors are always initialized with&amp;#13;
matching callee data and thunk functions. This is what is called a&amp;#13;
'safe' cast, since the same entity that removed the type information&amp;#13;
also re-instates it, and can guarantee a match.  If&amp;#13;
&lt;code&gt;Func&lt;/code&gt;'s signature is incompatible with the call, i.e.  if&amp;#13;
it cannot be called with a single argument of type &lt;code&gt;P1&lt;/code&gt;,&amp;#13;
then &lt;code&gt;thunk()&lt;/code&gt; will not compile. If implicit conversions are&amp;#13;
required the compiler will perform them. Note that if &lt;code&gt;func&lt;/code&gt;&amp;#13;
has a return it is safely ignored.&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1,class Callee, class MemFunc&amp;gt; class MemberTranslator1:public Functor1&amp;lt;P1&amp;gt;{ public: MemberTranslator1(Callee &amp;amp;c,const MemFunc &amp;amp;m): Functor1&amp;lt;P1&amp;gt;(thunk,&amp;amp;c,&amp;amp;m,sizeof(MemFunc)){} static void thunk(const FunctorBase &amp;amp;ftor,P1 p1) { Callee *callee = (Callee *)ftor.callee; MemFunc &amp;amp;memFunc(*(MemFunc*)(void *)(ftor.memFunc)); (callee-&amp;gt;*memFunc)(p1); } };&lt;/quote&gt;&lt;p&gt;&lt;code&gt;MemberTranslator&lt;/code&gt; is parameterized by the argument type&amp;#13;
of the&amp;#13;
&lt;code&gt;Functor&lt;/code&gt;, some class type (&lt;code&gt;Callee&lt;/code&gt;), and some&amp;#13;
ptr-to-member-function type (&lt;code&gt;MemFunc&lt;/code&gt;).  Not surprisingly&amp;#13;
it's constructor is passed 2 arguments, a&amp;#13;
&lt;code&gt;Callee&lt;/code&gt; object (by reference) and a ptr-to-member-function,&amp;#13;
both of which are passed, along with the thunk function, to the base&amp;#13;
class constructor.  Once again, the &lt;code&gt;thunk&lt;/code&gt; function casts&amp;#13;
the typeless info back to life, and then calls the member function on&amp;#13;
the object, with the passed parameter.&amp;#13;
&lt;/p&gt;&lt;p&gt;Since the &lt;code&gt;Translator&lt;/code&gt; objects are &lt;code&gt;Functor&lt;/code&gt;&amp;#13;
objects, and fully 'bound' ones at that, they are suitable initializers&amp;#13;
for their corresponding &lt;code&gt;Functor&lt;/code&gt;, using the &lt;code&gt;Functor&lt;/code&gt;'s&amp;#13;
copy constructor.  We needn't worry about the 'chopping' effect since&amp;#13;
the data is all in the base class portion of the &lt;code&gt;Translator&lt;/code&gt;&amp;#13;
class and there are no virtual functions involved.  Thus they are&amp;#13;
perfect candidates for the return value of&amp;#13;
&lt;code&gt;makeFunctor()&lt;/code&gt;!&amp;#13;
&lt;/p&gt;&lt;p&gt;The makeFunctor Functions&lt;/p&gt;&lt;p&gt;For each &lt;code&gt;Functor&lt;/code&gt; class there are three versions of&amp;#13;
&lt;code&gt;makeFunctor()&lt;/code&gt;, one for ptr-to-function and a const and&amp;#13;
non-const version for the object/ptr-to-member-function pair.&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1,class TRT,class TP1&amp;gt; inline FunctionTranslator1&amp;lt;P1,TRT (*)(TP1)&amp;gt; makeFunctor(Functor1&amp;lt;P1&amp;gt;*,TRT (*f)(TP1)) { return FunctionTranslator1&amp;lt;P1,TRT (*)(TP1)&amp;gt;(f); }&lt;/quote&gt;&lt;p&gt;The function version is straightforward. It uses the dummy argument to tell it the type of the functor and merely returns a corresponding &lt;code&gt;FunctionTranslator&lt;/code&gt;. I mentioned above that the &lt;code&gt;Func&lt;/code&gt;&amp;#13;
type parameter of&amp;#13;
&lt;code&gt;FunctionTranslator&lt;/code&gt; was invariably a ptr-to-function type.&amp;#13;
This version of &lt;code&gt;makeFunctor()&lt;/code&gt; ensures that by explicity&amp;#13;
specifying it as such.&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1,class Callee,class TRT,class CallType,class TP1&amp;gt; inline MemberTranslator1&amp;lt;P1,Callee,TRT (CallType::*)(TP1)&amp;gt; makeFunctor(Functor1&amp;lt;P1&amp;gt;*,Callee &amp;amp;c,TRT (CallType::* const &amp;amp;f)(TP1)) { typedef TRT (CallType::*MemFunc)(TP1); return MemberTranslator1&amp;lt;P1,Callee,MemFunc&amp;gt;(c,f); }&lt;/quote&gt;&lt;p&gt;This is the gnarliest bit. Here &lt;code&gt;makeFunctor&lt;/code&gt; is&amp;#13;
parameterized with the type of the argument to the &lt;code&gt;Functor&lt;/code&gt;,&amp;#13;
the type of the callee, the type of the class of which the&amp;#13;
member-function is a member, the argument and return types of the member&amp;#13;
function.  Whew!  We're a long way from&amp;#13;
&lt;code&gt;Stack&amp;lt;T&amp;gt;&lt;/code&gt; land!  Like the ptr-to-function version, it&amp;#13;
uses the dummy first argument of the constructor to determine the type&amp;#13;
of the &lt;code&gt;Functor&lt;/code&gt;. The second argument is a &lt;code&gt;Callee&lt;/code&gt;&amp;#13;
object (by reference).  The third argument is this thing:&amp;#13;
&lt;/p&gt;&lt;quote&gt;TRT (CallType::* const &amp;amp;f)(TP1)&lt;/quote&gt;&lt;p&gt;Here &lt;code&gt;f&lt;/code&gt; is a reference to a constant pointer to a&amp;#13;
member function of&amp;#13;
&lt;code&gt;CallType&lt;/code&gt; taking &lt;code&gt;TP1&lt;/code&gt; and returning &lt;code&gt;TRT&lt;/code&gt;.&amp;#13;
 You might notice that pointer-to-member-functions are all handled by&amp;#13;
reference in the library. On some implementations they can be expensive&amp;#13;
to pass by value and copy. The significant feature here is that the&amp;#13;
function need not be of type pointer-to-member-of-Callee.  This allows&amp;#13;
&lt;code&gt;makeFunctor&lt;/code&gt; to match on (and ultimately work with) a&amp;#13;
ptr-to-member-function of some base of &lt;code&gt;Callee&lt;/code&gt;. It then&amp;#13;
typedefs that bit and returns an appropriate &lt;code&gt;MemberTranslator&lt;/code&gt;.&amp;#13;
&lt;/p&gt;&lt;quote&gt;template &amp;lt;class P1,class Callee,class TRT,class CallType,class TP1&amp;gt; inline MemberTranslator1&amp;lt;P1,const Callee,TRT (CallType::*)(TP1)const&amp;gt; makeFunctor(Functor1&amp;lt;P1&amp;gt;*,const Callee &amp;amp;c,TRT (CallType::* const &amp;amp;f)(TP1)const) { typedef TRT (CallType::*MemFunc)(TP1)const; return MemberTranslator1&amp;lt;P1,const Callee,MemFunc&amp;gt;(c,f); }&lt;/quote&gt;&lt;p&gt;This last variant just ensures that if the &lt;code&gt;Callee&lt;/code&gt; is&amp;#13;
const the member function is also (note the &lt;code&gt;const&lt;/code&gt; at the&amp;#13;
end of the third argument to the constructor - that's where it goes!).&amp;#13;
&lt;/p&gt;&lt;p&gt;That, for each of ten &lt;code&gt;Functors&lt;/code&gt;, is the whole&amp;#13;
implementation.&amp;#13;
&lt;/p&gt;&lt;p&gt;Can Your Compiler Do This?&lt;/p&gt;&lt;p&gt;The callback library has been successfully tested with IBM CSet++ 2.01, Borland C++ 4.02 (no, its not twice as good ;-), and Watcom C++32 10.0. It is ARM compliant with the exception of expecting trivial conversions of template function arguments, which is the behavior of most compilers. I am interested in feedback on how well it works with other implementations.&lt;/p&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;p&gt;Callbacks are a powerful and necessary tool for component based object-oriented development in C++. They can be a tremendous aid to the interoperability of libraries. The template functor system presented here meets all the stated criteria for a good callback mechanism - it is object-oriented, compile-time type-safe, generic, non-type-intrusive, flexible and easy to use. It is sufficiently general to be used in any situation calling for callbacks. It can be implemented in the current language, and somewhat more elegantly in the proposed language.&lt;/p&gt;&lt;p&gt;This implementation of callbacks highlights the power of C++ templates - their type-safety, their code-generation ability and the flexibility they offer by accepting ptr-to-function and ptr-to-member-function type parameters.&lt;/p&gt;&lt;p&gt;Ultimately the greatest benefit is gained when class libraries start using a standard callback system. If callbacks aren't in the components, they can't be retrofitted. Upon publication of this article I am making this Callback library freely available in the hope that it will be adopted by library authors and serve as a starting point for discussion of a standard callback system.&lt;/p&gt;&lt;p&gt;References&lt;/p&gt;&lt;p&gt;Stroustrup, B. The Design and Evolution of C++, Addison-Wesley, Reading, MA 1994&lt;/p&gt;&lt;p&gt;Coplien, J.O. Advanced C++ Programming Styles and Idioms, Addison-Wesley, Reading, MA 1992&lt;/p&gt;&lt;p&gt;Ellis, M.A. and B. Stroustrup. The Annotated C++ Reference Manual, Addison-Wesley, Reading, MA 1990&lt;/p&gt;&lt;p&gt;Lippman, S.B. C++ Primer 2nd Edition, Addison-Wesley, Reading, MA 1991&lt;/p&gt;&lt;p&gt;Acknowledgments&lt;/p&gt;&lt;p&gt;Thanks to my fellow developers at RCS and to Greg Comeau for reviewing and commenting on this article.&lt;/p&gt;&lt;p&gt;About the Author&lt;/p&gt;&lt;p&gt;Rich is Technical Design Lead at Radio Computing Services, a leading software vendor in the radio industry. He designed and teaches the Advanced C++ course at New York University's Information Technologies Institute.&lt;/p&gt;He can be reached at: rhickey@bestweb.net Home&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="http://www.tutok.sk/fastgl/callback.html"/><published>2025-10-05T17:50:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45483924</id><title>What GPT-OSS leaks about OpenAI's training data</title><updated>2025-10-06T05:10:24.168556+00:00</updated><content>&lt;doc fingerprint="3526435e2833cedc"&gt;
  &lt;main&gt;
    &lt;p&gt;19th of September 2025&lt;/p&gt;
    &lt;p&gt;OpenAI recently released their open-weights model. Here we'll discuss how that inevitably leaks some information about their model training stack, and, on the way, show that GPT-5 was trained on phrases from adult websites.&lt;/p&gt;
    &lt;p&gt;What data does OpenAI train their models on? That is a well-protected trade secret of course, one with vested interest for the answer. While GPT-oss's weights are openly available, the sources of training data are not clearly described in the model card. It is stated that the model was trained on a "text-only dataset with trillions of tokens, with a focus on STEM, coding, and general knowledge". However, as we will see, the model parameters can tell us more than that.&lt;/p&gt;
    &lt;p&gt;A demonstration to start with: Let's have OpenAI's GPT-5We use version GPT-5-2025-08-07 for these experiments. Here is a link to the completion. do the simplest kind of task possible for a language model, repeating a string of Unicode text. Let's choose something random, like the Abkhaz word for "population", which is "ауааԥсыра". Upon asking &lt;code&gt;Repeat after me: "ауааԥсыра"&lt;/code&gt;, it replies something completely different, "ആളുകൾ", which apparently means people in MalayalamAccording to this dictionary. Subsequent translations here are patched together with web searches, online dictionaries and translation software.. As you might have guessed, we did not choose that string randomly at all, it is a special adversarial input belonging to a class of glitch tokens. But how did we identify such a glitch token among the 200,000 tokens that GPT-5 uses?
                            
                        &lt;/p&gt;
    &lt;p&gt;All of OpenAI's models since GPT-4o use the o200k tokenizer. This means that we can use the GPT-oss embeddings to study the token list without having to look at each token's text content. Let's make a histogram of the L2 norm of each row of the embedding matrix.&lt;/p&gt;
    &lt;p&gt;This low L2-norm token group could be useful for two things. Its (1) variance gives an estimate of the variance used in the initialization and (2) its mean would give an estimate of how many gradient descent steps were taken in total, if we assume standard weight decay and know the learning rate.&lt;/p&gt;
    &lt;p&gt;The right tail of the distribution is not quite Gaussian either. Looking at the English tokens with the highest norm, we find:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Token ID&lt;/cell&gt;
        &lt;cell role="head"&gt;Token&lt;/cell&gt;
        &lt;cell role="head"&gt;L2 Norm&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;44041&lt;/cell&gt;
        &lt;cell&gt;' accordingly'&lt;/cell&gt;
        &lt;cell&gt;246.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;3490&lt;/cell&gt;
        &lt;cell&gt;' code'&lt;/cell&gt;
        &lt;cell&gt;243.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;84879&lt;/cell&gt;
        &lt;cell&gt;'ocode'&lt;/cell&gt;
        &lt;cell&gt;235.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;976&lt;/cell&gt;
        &lt;cell&gt;'The'&lt;/cell&gt;
        &lt;cell&gt;233.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;8743&lt;/cell&gt;
        &lt;cell&gt;' settings'&lt;/cell&gt;
        &lt;cell&gt;231.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;100466&lt;/cell&gt;
        &lt;cell&gt;'Moreover'&lt;/cell&gt;
        &lt;cell&gt;229.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;6496&lt;/cell&gt;
        &lt;cell&gt;' description'&lt;/cell&gt;
        &lt;cell&gt;226.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;58369&lt;/cell&gt;
        &lt;cell&gt;"""Let's"""&lt;/cell&gt;
        &lt;cell&gt;224.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2500&lt;/cell&gt;
        &lt;cell&gt;'This'&lt;/cell&gt;
        &lt;cell&gt;224.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;10089&lt;/cell&gt;
        &lt;cell&gt;' core'&lt;/cell&gt;
        &lt;cell&gt;219.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;74447&lt;/cell&gt;
        &lt;cell&gt;' utilizes'&lt;/cell&gt;
        &lt;cell&gt;218.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;119705&lt;/cell&gt;
        &lt;cell&gt;' revolves'&lt;/cell&gt;
        &lt;cell&gt;218.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;53329&lt;/cell&gt;
        &lt;cell&gt;"""Here's"""&lt;/cell&gt;
        &lt;cell&gt;216.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;14836&lt;/cell&gt;
        &lt;cell&gt;' possibly'&lt;/cell&gt;
        &lt;cell&gt;214.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;18485&lt;/cell&gt;
        &lt;cell&gt;' logic'&lt;/cell&gt;
        &lt;cell&gt;212.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;42469&lt;/cell&gt;
        &lt;cell&gt;' thereby'&lt;/cell&gt;
        &lt;cell&gt;211.8&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;These tokens are either very common, or appear especially in reasoning tasks, in particular those with code. This might mean that coding reinforcement learning was the last step in the training process, and that all other tokens got slightly weight decayed. It could also mean that in general, reasoning tokens are treated as so important by gradient descent that their updates are extra large.&lt;/p&gt;
    &lt;p&gt;Filtering for non-ASCII tokens with the highest norm, we find a different picture:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Token ID&lt;/cell&gt;
        &lt;cell role="head"&gt;Token&lt;/cell&gt;
        &lt;cell role="head"&gt;L2 Norm&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;166343&lt;/cell&gt;
        &lt;cell&gt;'гылара'&lt;/cell&gt;
        &lt;cell&gt;213.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;187102&lt;/cell&gt;
        &lt;cell&gt;' министири'&lt;/cell&gt;
        &lt;cell&gt;212.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;89721&lt;/cell&gt;
        &lt;cell&gt;'这里只有精品'&lt;/cell&gt;
        &lt;cell&gt;212.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;181865&lt;/cell&gt;
        &lt;cell&gt;'еиԥшым'&lt;/cell&gt;
        &lt;cell&gt;207.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;129320&lt;/cell&gt;
        &lt;cell&gt;'彩娱乐彩票'&lt;/cell&gt;
        &lt;cell&gt;207.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;170421&lt;/cell&gt;
        &lt;cell&gt;'天天好彩票'&lt;/cell&gt;
        &lt;cell&gt;206.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;177625&lt;/cell&gt;
        &lt;cell&gt;'久久综合网'&lt;/cell&gt;
        &lt;cell&gt;204.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;71476&lt;/cell&gt;
        &lt;cell&gt;' иҳәеит'&lt;/cell&gt;
        &lt;cell&gt;203.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;185118&lt;/cell&gt;
        &lt;cell&gt;'[REDACTED]'&lt;/cell&gt;
        &lt;cell&gt;202.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;104937&lt;/cell&gt;
        &lt;cell&gt;' 北京赛车怎么'&lt;/cell&gt;
        &lt;cell&gt;201.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;146111&lt;/cell&gt;
        &lt;cell&gt;' Урҭ'&lt;/cell&gt;
        &lt;cell&gt;200.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;195219&lt;/cell&gt;
        &lt;cell&gt;"',伊人'"&lt;/cell&gt;
        &lt;cell&gt;200.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;147298&lt;/cell&gt;
        &lt;cell&gt;'大香蕉网'&lt;/cell&gt;
        &lt;cell&gt;199.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;165874&lt;/cell&gt;
        &lt;cell&gt;' акоронавирус'&lt;/cell&gt;
        &lt;cell&gt;198.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;66183&lt;/cell&gt;
        &lt;cell&gt;'րբե�'&lt;/cell&gt;
        &lt;cell&gt;198.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;173463&lt;/cell&gt;
        &lt;cell&gt;' иажәа'&lt;/cell&gt;
        &lt;cell&gt;197.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;160540&lt;/cell&gt;
        &lt;cell&gt;'彩神争霸邀请码'&lt;/cell&gt;
        &lt;cell&gt;195.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;155587&lt;/cell&gt;
        &lt;cell&gt;'бжьаратәи'&lt;/cell&gt;
        &lt;cell&gt;195.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;154809&lt;/cell&gt;
        &lt;cell&gt;'无码不卡高清免费v'&lt;/cell&gt;
        &lt;cell&gt;194.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;105084&lt;/cell&gt;
        &lt;cell&gt;'хадоу'&lt;/cell&gt;
        &lt;cell&gt;194.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;134370&lt;/cell&gt;
        &lt;cell&gt;'一本道高清无码'&lt;/cell&gt;
        &lt;cell&gt;194.6&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Mandarin speakers will have understood that the above contains an unwholesome sublist of spammy and adult-oriented website terms, with some being too explicit to make the list here. Indeed, o200k, the tokenizer used for 4o, o1, o3, o4, oss, and GPT-5 contains a lot of junk tokens. This means that every time ChatGPT runs, a matrix containing all the strange tokens we are talking about here are patiently waiting on Microsoft Azure to be multiplied with. Some of my personal favorite tokens are "北京赛车怎么" (How to play Beijing Racing), "天天中彩票的" (Winning the lottery every day), and of course "《凤凰大参考" (Phoenix Reference). Another token is "铁血网", the name of a Chinese nationalism and military enthuiasm website, which is ironic given the geopolitical considerations that are usually raised in connection with OpenAI. It is unexpected that this type of political content not just made it into the tokenizer training data, but was even overrepresented.&lt;/p&gt;
    &lt;p&gt;There are also some oddball high-norm tokens in Abkhaz, Armenian, Gujarati, Thai, and more. Some interesting examples are ",ಂಗಳೂರು" (The city Mangaluru in Kannada) along with other cities in Kerala, "ถวายสัตย์ฯ" ("Oath of Allegiance" in Thai), "แขวงคลองเตยเหนือ" (a district in Bangkok with less than 10,000 inhabitants), "วิเคราะห์บอลวันนี้" ("today's football analysis" in Thai) along with a handful of other football-related tokens.&lt;/p&gt;
    &lt;p&gt;The question is, why do these tokens have a higher, not lower, norm than the normal tokens? If they are unused, weight decay should bring them all the way down to the other unused tokens.&lt;/p&gt;
    &lt;p&gt;In this post, Jessica Rumbelow identified similar glitch tokens in GPT-2 and GPT-3, most famously the "SolidGoldMagicarp" token. Her finding was that the tokens closest to the mean of all embeddings were the glitch tokens, not necessarily those with low norm. But that's not the case here: Tokens with comparatively high norm are always far away from the mean. Further, computing cosine similarity between two of these embeddings gives higher similarity on average.&lt;/p&gt;
    &lt;p&gt;One way to get closer to the answer is to observe the models' behavior when given these tokens. We ask GPT-oss and GPT-5 about the not-so-classy token 162657: &lt;code&gt;What does this mean: "毛片免费观看"&lt;/code&gt;. With some euphemism, it means "watching explicit videos for free" in Mandarin. &lt;/p&gt;
    &lt;p&gt;In the response See the full completion here. To verify that the string was tokenized as expected, we can use tiktokenizer. , GPT-5 correctly states that the token contains Chinese text, and that it is related to watching something. It can also enumerate some of the characters in it. This means that the token was seen during training, at least once! Interestingly, the model seems to be aware of the inappropriate meaning of the token, but plays it down and in particular does not refuse to answer. Presumably this is because the token only occurs a few times in the training corpus.&lt;/p&gt;
    &lt;p&gt;In other words, we can say that a certain string, in this case a sensitive one, was part of the GPT-5 training corpus. This is called membership inference in the machine learning literature. Membership inference with high confidence is generally considered to be impractical in production LLMs, so this is a surprising finding.&lt;/p&gt;
    &lt;p&gt;Automating this process through the API, we can find which glitch tokens were seen during training of the GPT-oss and GPT-5 model families. We ask the models to give a translation of the token to English and ask for the language the token is in. For now, we simply filter for the Chinese tokens, and pass 50 tokens with highest L2 embedding norm to the models. For a control, we also ask Claude 4 and can confirm that it always answers correctly. Since a few of these tokens could technically be Japanese, we count this as a correct answer, too. For cost reasons, we ask about each token only 4 times per model, and denote 4 correct answers with a ✓, 3 and 2 with a !, 1 with a ?, and 0 with a ✗.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Token&lt;/cell&gt;
        &lt;cell role="head"&gt;Crude Translation&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT-5&lt;/cell&gt;
        &lt;cell role="head"&gt;Mini&lt;/cell&gt;
        &lt;cell role="head"&gt;Nano&lt;/cell&gt;
        &lt;cell role="head"&gt;oss-20B&lt;/cell&gt;
        &lt;cell role="head"&gt;oss-120B&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;毛片免费观看&lt;/cell&gt;
        &lt;cell&gt;Watch Explicit Videos Free&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;铁血网&lt;/cell&gt;
        &lt;cell&gt;[Chinese Patriotism Website]&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;这里只有精品&lt;/cell&gt;
        &lt;cell&gt;Only Fine Things Here&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩娱乐彩票&lt;/cell&gt;
        &lt;cell&gt;Color Entertainment Lottery&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;天天好彩票&lt;/cell&gt;
        &lt;cell&gt;Daily Good Lottery&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;久久综合网&lt;/cell&gt;
        &lt;cell&gt;[Name of adult website (?)]&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;北京赛车怎么&lt;/cell&gt;
        &lt;cell&gt;How to Beijing Racing&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大香蕉网&lt;/cell&gt;
        &lt;cell&gt;[Name of adult website (?)]&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩神争霸邀请码&lt;/cell&gt;
        &lt;cell&gt;Color God Battle Invitation Code&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;无码不卡高清免费v&lt;/cell&gt;
        &lt;cell&gt;Uncensored No Lag HD Free&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;一本道高清无码&lt;/cell&gt;
        &lt;cell&gt;One Way HD Uncensored&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大发快三和值&lt;/cell&gt;
        &lt;cell&gt;[Name of gambling website (?)]&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;天天中彩票能&lt;/cell&gt;
        &lt;cell&gt;Daily Lottery Winner Can&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;无码一区二区三区&lt;/cell&gt;
        &lt;cell&gt;Uncensored Zone 1 Zone 2 Zone 3&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩神争霸邀请码&lt;/cell&gt;
        &lt;cell&gt;Color God Battle Invitation Code&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩票开户&lt;/cell&gt;
        &lt;cell&gt;Lottery Account Opening&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;色综合网&lt;/cell&gt;
        &lt;cell&gt;Color Comprehensive Network&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩票平台开户&lt;/cell&gt;
        &lt;cell&gt;Lottery Platform Account Opening&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;综合久久&lt;/cell&gt;
        &lt;cell&gt;Comprehensive Long Time&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;免费视频观看&lt;/cell&gt;
        &lt;cell&gt;Free Video Watching&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;最新高清无码&lt;/cell&gt;
        &lt;cell&gt;Latest HD Uncensored&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;一级a&lt;/cell&gt;
        &lt;cell&gt;Level A&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;玩大发快三&lt;/cell&gt;
        &lt;cell&gt;Play Dafa Fast Three&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;东臣&lt;/cell&gt;
        &lt;cell&gt;East Minister&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;凤凰大参考&lt;/cell&gt;
        &lt;cell&gt;Phoenix Reference&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;棋牌游戏官网&lt;/cell&gt;
        &lt;cell&gt;Chess Card Game Official Site&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;热在线精品&lt;/cell&gt;
        &lt;cell&gt;Hot Online Quality&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩娱乐平台&lt;/cell&gt;
        &lt;cell&gt;Color Entertainment Platform&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;购彩官网&lt;/cell&gt;
        &lt;cell&gt;Lottery Purchase Official Site&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;最新高清无码专区&lt;/cell&gt;
        &lt;cell&gt;Latest HD Uncensored Zone&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;北京赛车女郎&lt;/cell&gt;
        &lt;cell&gt;Beijing Racing Girls&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大香线蕉&lt;/cell&gt;
        &lt;cell&gt;Big Fragrant Line Banana&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;官网开户&lt;/cell&gt;
        &lt;cell&gt;Official Site Account Opening&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;经典三级&lt;/cell&gt;
        &lt;cell&gt;Classic Third Level&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;在线大香蕉&lt;/cell&gt;
        &lt;cell&gt;[Name of adult website (?)]&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;无码不卡&lt;/cell&gt;
        &lt;cell&gt;Uncensored No Lag&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大发时时彩怎么&lt;/cell&gt;
        &lt;cell&gt;Dafa Time Color How&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大发云&lt;/cell&gt;
        &lt;cell&gt;Dafa Cloud&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;和天天中彩票&lt;/cell&gt;
        &lt;cell&gt;And Daily Lottery Winner&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;平台总代理&lt;/cell&gt;
        &lt;cell&gt;Platform General Agent&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;天天买彩票&lt;/cell&gt;
        &lt;cell&gt;Daily Lottery Buying&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;天天彩票app&lt;/cell&gt;
        &lt;cell&gt;Daily Lottery App&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩神争霸充值&lt;/cell&gt;
        &lt;cell&gt;Color God Battle Recharge&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;彩神争霸app&lt;/cell&gt;
        &lt;cell&gt;Color God Battle App&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;律宾&lt;/cell&gt;
        &lt;cell&gt;Law Bin&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;大发扑克&lt;/cell&gt;
        &lt;cell&gt;Dafa Poker&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;热这里只有精品&lt;/cell&gt;
        &lt;cell&gt;Hot Only Quality Here&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;北京赛车有&lt;/cell&gt;
        &lt;cell&gt;Beijing Racing Has&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;留下些什么吧&lt;/cell&gt;
        &lt;cell&gt;Leave Something Behind&lt;/cell&gt;
        &lt;cell&gt;!&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✗&lt;/cell&gt;
        &lt;cell&gt;✓&lt;/cell&gt;
        &lt;cell&gt;?&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;We can read off that the explicit token we already found is recognized by all models, and identify a few more anomalous tokens that were likely seen during training. Many others however are not recognized, and thus unlikely to have been in the training data.&lt;/p&gt;
    &lt;p&gt;We try to identify a pattern in the tokens that are recognized. It generally seems that recognized tokens yield many more hits on GitHub. Indeed, there often are some spam repositories on GitHub that contain these recognized strings, as well as some repositories containing lists of strings to block for content moderation.&lt;/p&gt;
    &lt;p&gt;The membership inference only tells us that the model saw the string, not where it was sourced from. To test whether GitHub was a likely source, we therefore correlate the number of search hits on GitHub with the number of correct answers across the GPT models. We find a significant Spearman's ρ of 0.448. This does not prove that GitHub was the source, because the high search hit count on GitHub could just be indicative that the token is more common across the internet. Nonetheless, the setup demonstrates how glitch tokens could be used to make broader statements about the training data.&lt;/p&gt;
    &lt;p&gt;In summary, we have found strong evidence that models in the GPT-5 and GPT-oss family were trained on phrases from adult websites. We have also found weak evidence that part of the GPT training corpus was scraped off of GitHub. The search was made easier via access the weights of GPT-oss, showing how the open-weights paradigm opens up new attack vectors on production models. It seems advisable for frontier labs to mitigate this problem by excluding uncommon strings from their tokenizer vocabularies.&lt;/p&gt;
    &lt;p&gt;These glitch tokens have more uses than was described above. If you want to work with these concepts, the companion repository provides a starting point. Some ideas that could be interesting to explore:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Token / Token Family&lt;/cell&gt;
        &lt;cell role="head"&gt;Explanation&lt;/cell&gt;
        &lt;cell role="head"&gt;Example Prompt&lt;/cell&gt;
        &lt;cell role="head"&gt;Behaviour&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;CHKERRQ&lt;/cell&gt;
        &lt;cell&gt;The weirdest pure ASCII token. From a function name in C.&lt;/cell&gt;
        &lt;cell&gt;Can you spell the following word: "CHKERRQ"&lt;/cell&gt;
        &lt;cell&gt;"Unspeakable" for gpt-4o-mini. gpt-4o sometimes almost spells correctly, other times hallucinates.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Can you output every second letter in "CHKERRQ"?&lt;/cell&gt;
        &lt;cell&gt;Makes gpt-4o hallucinate.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Write a poem using the word "CHKERRQ"&lt;/cell&gt;
        &lt;cell&gt;Makes gpt-4o-mini write creepily about the word "terminate"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\\xadder&lt;/cell&gt;
        &lt;cell&gt;No idea.&lt;/cell&gt;
        &lt;cell&gt;Please spell "\\xadder"&lt;/cell&gt;
        &lt;cell&gt;gpt-4o spells it as "hexadecimal", the summary model is confused and sees "QRST"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;♀♀♀♀&lt;/cell&gt;
        &lt;cell&gt;From social media bios?&lt;/cell&gt;
        &lt;cell&gt;How many symbols are in♀♀♀♀&lt;/cell&gt;
        &lt;cell&gt;gpt-4o trips and outputs random (?) Chinese characters&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;€¦&lt;/cell&gt;
        &lt;cell&gt;From spreadsheets?&lt;/cell&gt;
        &lt;cell&gt;What are these symbols: "€¦"&lt;/cell&gt;
        &lt;cell&gt;gpt-4o-mini thinks this is an ellipsis ("...")&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;風吹けば名無し and 8 variants&lt;/cell&gt;
        &lt;cell&gt;Literally "no name if the wind blows". Former default user name on baseball-themed 2channel boards. (Source)&lt;/cell&gt;
        &lt;cell&gt;What is the meaning of "風吹けば名無し"?&lt;/cell&gt;
        &lt;cell&gt;gpt-4o sometimes hallucinates randomly. gpt-4o-mini hallucinates about baseball and attempts to spell it, incorrectly.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;＠お腹いっぱい&lt;/cell&gt;
        &lt;cell&gt;Literally "@TummyIsFull". From a former default username on 2channel boards.&lt;/cell&gt;
        &lt;cell&gt;What is the meaning of＠お腹いっぱい?&lt;/cell&gt;
        &lt;cell&gt;gpt-4o conflates it with common Japanese phrases and random syllables, gpt-4o-mini similar.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;＠おーぷん&lt;/cell&gt;
        &lt;cell&gt;Literally "@Open". Also from 2channel.&lt;/cell&gt;
        &lt;cell&gt;Please repeat the word＠おーぷん back to me.&lt;/cell&gt;
        &lt;cell&gt;Seemingly unspeakable for gpt-4o-mini and hard to say for gpt-4o.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;How do you pronounce＠おーぷん?&lt;/cell&gt;
        &lt;cell&gt;gpt-4o hallucinates the above mentioned "If the wind blows, Mr. Nameless"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;VIPがお送りします&lt;/cell&gt;
        &lt;cell&gt;Literally "Brought to you by VIP". Another 2channel term.&lt;/cell&gt;
        &lt;cell&gt;Please explain the meaning of "VIPがお送りします".&lt;/cell&gt;
        &lt;cell&gt;gpt-4o-mini is adorable and hallucinates about the horn emoji (📯)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;中央値との差&lt;/cell&gt;
        &lt;cell&gt;Japanese for "difference from the median".&lt;/cell&gt;
        &lt;cell&gt;Please spell this backwards: "中央値との差"&lt;/cell&gt;
        &lt;cell&gt;gpt-4o answers with lowercase latin characters.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;.minecraftforge&lt;/cell&gt;
        &lt;cell&gt;File extension from Minecraft modding&lt;/cell&gt;
        &lt;cell&gt;Please spell the string "readme.minecraftforge"&lt;/cell&gt;
        &lt;cell&gt;gpt-4o-mini: 'The string is spelled "M-O-D dot F-O-R-G-E-R-E-C-E dot G-E.'&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;CHANTABILITY&lt;/cell&gt;
        &lt;cell&gt;Ending of MER-CHANTABILITY&lt;/cell&gt;
        &lt;cell&gt;Please spell the word "CHANTABILITY".&lt;/cell&gt;
        &lt;cell&gt;gpt-4o spells it as "Chanceability".&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;《凤凰大参考&lt;/cell&gt;
        &lt;cell&gt;"The Phoenix Reference"&lt;/cell&gt;
        &lt;cell&gt;What is the meaning of《凤凰大参考?&lt;/cell&gt;
        &lt;cell&gt;Unspeakable for gpt-4o&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;亚历山大发&lt;/cell&gt;
        &lt;cell&gt;"Alexander"&lt;/cell&gt;
        &lt;cell&gt;Please translate this: " 亚历山大发".&lt;/cell&gt;
        &lt;cell&gt;gpt-4o thinks it's Abkhaz for yes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;微信里的天天中彩票 and the ~100 other Chinese lottery tokens&lt;/cell&gt;
        &lt;cell&gt;This article speculates why the tokenizer training data included so many of these.&lt;/cell&gt;
        &lt;cell&gt;Please print every second character in the following: 微信里的天天中彩票.&lt;/cell&gt;
        &lt;cell&gt;Reliable gibberish generator on gpt-4o-mini. The tokens themselves are mostly unspeakable.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;SUPERHOST&lt;/cell&gt;
        &lt;cell&gt;Programming term?&lt;/cell&gt;
        &lt;cell&gt;Please output every second letter in "SUPERHOST"&lt;/cell&gt;
        &lt;cell&gt;gpt-4o-mini spells it as "SPARENT" and then trips&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ILLISECONDS&lt;/cell&gt;
        &lt;cell&gt;Ending of M-ILLISECONDS&lt;/cell&gt;
        &lt;cell&gt;Please reverse the string "ILLISECONDS"&lt;/cell&gt;
        &lt;cell&gt;Trouble with character-level operations for gpt-4o-mini.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;GETGLOBAL&lt;/cell&gt;
        &lt;cell&gt;Programming term&lt;/cell&gt;
        &lt;cell&gt;Please output every second letter in " GETGLOBAL"&lt;/cell&gt;
        &lt;cell&gt;Makes gpt-4o-mini hallucinate "GETALLONG" at character level.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;_REALTYPE _EDEFAULT _PRODUCTS&lt;/cell&gt;
        &lt;cell&gt;Maybe from the library libstdc++?&lt;/cell&gt;
        &lt;cell&gt;Can you output every second letter in_REALTYPE?&lt;/cell&gt;
        &lt;cell&gt;gpt-4o-mini likes to hallucinate "translated"&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;As more research on glitch tokens becomes available, I will try to list it here. The most comprehensive report to date is this article in MIT Technology Review, and there are many articles in Chinese, such as this one. However, these discuss the tokenizer itself, not how the models behave.&lt;/p&gt;
    &lt;p&gt;Finally, if you are in a position to fix the issue in the OpenAI API, I presume you already know how, else I'm happy to help. Note that a fix could even lower inference cost a bit. You can mail to lennart@finke.dev.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://fi-le.net/oss/"/><published>2025-10-05T18:28:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45484284</id><title>Toybox: All-in-one Linux command line</title><updated>2025-10-06T05:10:23.785775+00:00</updated><content>&lt;doc fingerprint="b4a05d537d87a8a3"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt; Notifications &lt;tool-tip&gt;You must be signed in to change notification settings&lt;/tool-tip&gt;&lt;/item&gt;
      &lt;item&gt;Fork 365&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;toybox&lt;/p&gt;
    &lt;head rend="h3"&gt;License&lt;/head&gt;
    &lt;head rend="h1"&gt;landley/toybox&lt;/head&gt;
    &lt;head rend="h2"&gt;Folders and files&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Last commit message&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Last commit date&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Repository files navigation&lt;/head&gt;
    &lt;quote&gt;Toybox: all-in-one Linux command line. --- Getting started You can download static binaries for various targets from: http://landley.net/toybox/bin The special name "." indicates the current directory (just like ".." means the parent directory), and you can run a program that isn't in the $PATH by specifying a path to it, so this should work: wget http://landley.net/toybox/bin/toybox-x86_64 chmod +x toybox-x86_64 ./toybox-x86_64 echo hello world --- Building toybox Type "make help" for build instructions. Toybox uses the "make menuconfig; make; make install" idiom same as the Linux kernel. Usually you want something like: make defconfig make make install Or maybe: LDFLAGS="--static" CROSS_COMPILE=armv5l- make defconfig toybox PREFIX=/path/to/root/filesystem/bin make install_flat The file "configure" defines default values for many environment variables that control the toybox build; if you export any of these variables into your environment, your value is used instead of the default in that file. The CROSS_COMPILE argument above is optional, the default builds a version of toybox to run on the current machine. Cross compiling requires an appropriately prefixed cross compiler toolchain, several example toolchains (built using the file "scripts/mcm-buildall.sh" in the toybox source) are available at: https://landley.net/toybox/downloads/binaries/toolchains/latest For the "CROSS_COMPILE=armv5l-" example above, download armv5l-linux-musleabihf-cross.tar.xz, extract it, and add its "bin" subdirectory to your $PATH. (And yes, the trailing - is significant, because the prefix includes a dash.) For more about cross compiling, see: https://landley.net/toybox/faq.html#cross http://landley.net/writing/docs/cross-compiling.html http://landley.net/aboriginal/architectures.html For a more thorough description of the toybox build process, see: http://landley.net/toybox/code.html#building --- Using toybox The toybox build produces a multicall binary, a "swiss-army-knife" program that acts differently depending on the name it was called by (cp, mv, cat...). Installing toybox adds symlinks for each command name to the $PATH. The special "toybox" command treats its first argument as the command to run. With no arguments, it lists available commands. This allows you to use toybox without installing it, and is the only command that can have an arbitrary suffix (hence "toybox-armv5l"). The "help" command provides information about each command (ala "help cat"), and "help toybox" provides general information about toybox. --- Configuring toybox It works like the Linux kernel: allnoconfig, defconfig, and menuconfig edit a ".config" file that selects which features to include in the resulting binary. You can save and re-use your .config file, but may want to run "make oldconfig" to re-run the dependency resolver when migrating to new versions. The maximum sane configuration is "make defconfig": allyesconfig isn't recommended as a starting point for toybox because it enables unfinished commands, debug code, and optional dependencies your build environment may not provide. --- Creating a Toybox-based Linux system Toybox has a built-in simple system builder (scripts/mkroot.sh) with a Makefile target: make root sudo chroot root/host/fs /init Type "exit" to get back out. If you install appropriate cross compilers and point it at Linux source code, it can build simple three-package systems that boot to a shell prompt under qemu: make root CROSS_COMPILE=sh4-linux-musl- LINUX=~/linux cd root/sh4 ./qemu-sh4.sh By calling scripts/mkroot.sh directly you can add additional packages to the build, see scripts/root/dropbear as an example. The FAQ explains this in a lot more detail: https://landley.net/toybox/faq.html#system https://landley.net/toybox/faq.html#mkroot --- Presentations 1) "Why Toybox?" talk at the Embedded Linux Conference in 2013 outline: http://landley.net/talks/celf-2013.txt video: http://youtu.be/SGmtP5Lg_t0 The https://landley.net/toybox/about.html page has nav links breaking that talk down into sections. 2) "Why Public Domain?" The rise and fall of copyleft, Ohio LinuxFest 2013 outline: http://landley.net/talks/ohio-2013.txt audio: https://archive.org/download/OhioLinuxfest2013/24-Rob_Landley-The_Rise_and_Fall_of_Copyleft.mp3 3) Why did I do Aboriginal Linux (which led me here) 260 slide presentation: https://speakerdeck.com/landley/developing-for-non-x86-targets-using-qemu How and why to make android self-hosting: http://landley.net/aboriginal/about.html#selfhost More backstory than strictly necessary: https://landley.net/aboriginal/history.html 4) What's new with toybox (ELC 2015 status update): video: http://elinux.org/ELC_2015_Presentations outline: http://landley.net/talks/celf-2015.txt 5) Toybox vs BusyBox (2019 ELC talk): outline: http://landley.net/talks/elc-2019.txt video: https://www.youtube.com/watch?v=MkJkyMuBm3g --- Contributing The three important URLs for communicating with the toybox project are: web page: http://landley.net/toybox mailing list: http://lists.landley.net/listinfo.cgi/toybox-landley.net git repo: http://github.com/landley/toybox The maintainer prefers patches be sent to the mailing list. If you use git, the easy thing to do is: git format-patch -1 $HASH Then send a file attachment. The list holds messages from non-subscribers for moderation, but I usually get to them in a day or two. I download github pull requests as patches and apply them with "git am" (which avoids gratuitous merge commits). Sometimes I even remember to close the pull request. If I haven't responded to your patch after one week, feel free to remind me of it. Android's policy for toybox patches is that non-build patches should go upstream first (into vanilla toybox, with discussion on the toybox mailing list) and then be pulled into android's toybox repo from there. (They generally resync on fridays). The exception is patches to their build scripts (Android.mk and the checked-in generated/* files) which go directly to AOSP. (As for the other meaning of "contributing", https://patreon.com/landley is always welcome but I warn you up front I'm terrible about updating it.)&lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/landley/toybox"/><published>2025-10-05T19:09:35+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45485175</id><title>The death of industrial design and the era of dull electronics</title><updated>2025-10-06T05:10:23.608612+00:00</updated><content>&lt;doc fingerprint="bb24f855c957a1eb"&gt;
  &lt;main&gt;
    &lt;p&gt;It’s often said that what’s inside matters more than one’s looks, but it’s hard to argue that a product’s looks and its physical user experience are what makes it instantly recognizable. When you think of something like a Walkman, an iPod music player, a desktop computer, a car or a TV, the first thing that comes to mind is the way that it looks along with its user interface. This is the domain of industrial design, where circuit boards, mechanisms, displays and buttons are put into a shell that ultimately defines what users see and experience.&lt;/p&gt;
    &lt;p&gt;Thus industrial design is perhaps the most important aspect of product development as far as the user is concerned, right along with the feature list. It’s also no secret that marketing departments love to lean into the styling and ergonomics of a product. In light of this it is very disconcerting that the past years industrial design for consumer electronics in particular seems to have wilted and is now practically on the verge of death.&lt;/p&gt;
    &lt;p&gt;Devices like cellphones and TVs are now mostly flat plastic-and-glass rectangles with no distinguishing features. Laptops and PCs are identified either by being flat, small, having RGB lighting, or a combination of these. At the same time buttons and other physical user interface elements are vanishing along with prominent styling, leaving us in a world of basic geometric shapes and flat, evenly colored surfaces. Exactly how did we get to this point, and what does this mean for our own hardware projects?&lt;/p&gt;
    &lt;head rend="h2"&gt;Bold And Colorful Shapes&lt;/head&gt;
    &lt;p&gt;Industrial design is less of a science and more of an art, limited only by the available materials, the constraints of the product’s internals and the goal of creating a positive user experience. Although design has always played a role with many products over the millennia, these were generally quite limited due to material and tooling constraints. As both plastics and electronics began their stratospheric rise during the 20th century, suddenly it felt like many of these constraints had been removed.&lt;/p&gt;
    &lt;p&gt;No longer was one limited to basic materials like stone, metal, wood and paint, while internals got ever smaller and more flexible in terms of placement. Enclosures now could take on any shape, while buttons, knobs and dials could be shaped and placed to one’s heart’s content. This change is clearly visible in consumer devices, with the sixties and subsequent decades seeing a veritable explosion in stylish transistorized radios, home computers and portable entertainment devices, with industrial designers getting the hang of all these new materials and options.&lt;/p&gt;
    &lt;p&gt;The peak here was arguably achieved during the 1990s and early 2000s, as electronic miniaturization and manufacturing chops led to device manufacturers basically just showing off. Personal Hi-Fi systems and portable devices along with computer systems and laptops grew curved, translucent and transparent plastic along with a dazzling array of colors.&lt;/p&gt;
    &lt;p&gt;These days we refer to this era as the ‘Y2K Aesthetic‘, which was followed around the mid-2000s to early 2010s by the sweetly named ‘Frutiger Aero‘ era. During this time both hardware and software underwent a transition from mostly utilitarian looks into something that can be defined as tasteful to over the top, depending on your perspective, but above all it embraced the technologies and materials in its industrial design. Futurism and literal transparency were the rule, as a comfortable, colorful and stylish companion in daily life.&lt;/p&gt;
    &lt;head rend="h2"&gt;From Brick To Slab&lt;/head&gt;
    &lt;p&gt;Ask someone to visualize a Nokia 3310 and even if they’re born after 2000, there’s a good chance that they will be able to tell you what it is, what it does and what it looks like. Then ask that same person to describe any modern cellphone, and while the feature list should be quite easy, asking them to draw what differentiates, say, an iPhone 16 from a Samsung Galaxy S25 is effectively impossible unless they have memorized the layout of the cameras on the back and perhaps the side button placement.&lt;/p&gt;
    &lt;p&gt;Over the decades, cellphones have seen their displays grow larger and larger. With voracious appetite, these displays have consumed bezels, front speakers, keyboards and home buttons.&lt;/p&gt;
    &lt;p&gt;Along with the demise of these features, front facing cameras were only preserved by literally punching a hole in the display, but notification LEDs vanished right along with headphone jacks, IR blaster LEDs, swappable covers, removable batteries, etc.&lt;/p&gt;
    &lt;p&gt;The current scuttlebutt is that Apple will be the first to drop any and all connectors from its iPhone cellphones, with the iPhone 17 reportedly nearly becoming the first to do so. Along with eSIMs, this would leave smartphones as glued-together slabs of plastic-and-glass with only a screen, some cameras and a couple of buttons.&lt;/p&gt;
    &lt;p&gt;In marketing shots smartphones are always shown with a lock- or home screen open on the screen, because otherwise there would be just a lifeless black slab of glass to look at from the front. From the side you can see the same slab, which easily wobbles on its ever-growing camera hump that’s sticking out of the razor-thin case like a bad case of optical melanoma. At this point in time, the most exciting thing about cellphones is whether it can flip or not, followed by whatever subdued color is applied to the slippery glass back that you want to cover up with something concealing and grippy as soon as possible anyway.&lt;/p&gt;
    &lt;p&gt;Naturally, it’s not just phones either, but also computers, with the iMac’s evolution showing a clear ‘evolution’ from colorful and bold designs to geometric slabs:&lt;/p&gt;
    &lt;p&gt;Whether you call it ‘modern’ or ‘clean’ design, the trend is quite clear. Curves are removed, colors are purged or at the very least muted and the overall design reduced to the level of excitement experienced while being stuck at an Ikea showroom during a busy weekend with the family.&lt;/p&gt;
    &lt;head rend="h2"&gt;Lifeless Slabs&lt;/head&gt;
    &lt;p&gt;There was a time when televisions had a recognizable look to them, with a stylish bezel, a real power button, as well as a couple of front input connectors and buttons to adjust basic settings like volume and the current channel, which could also be hidden behind a small flap. This is now all gone, and TVs have become as visually striking from the front as modern smartphones, with the speakers fully nerfed since there’s no space on the front any more.&lt;/p&gt;
    &lt;p&gt;All inputs and any remaining controls are now hidden on the back where reaching them is borderline impossible after installation, never mind if you mounted it on a wall. You’re not supposed to find the TV visually appealing, or marvel at the easy user interface, just consume whatever content is displayed on the bezel-less screen.&lt;/p&gt;
    &lt;p&gt;The rest of any home entertainment setup has undergone the same process, with the HiFi stacks and mid-sized sets of yesteryear replaced by the same smartphones and TVs, along with a bit of plastic that you can stick into a slab TV to stream content with from some internet-based service.&lt;/p&gt;
    &lt;p&gt;Rather than a stereo – or better – HiFi setup, most people will have a bunch of usually mono Bluetooth speakers scattered around, each of which possessing the visual appeal of a radar dome. If you’re lucky there are still a couple of touch buttons to fondle, but virtually all of your interactions with such devices will go via an app on your slab phone.&lt;/p&gt;
    &lt;p&gt;Touch controls are also all that you will get these days, as physical buttons, dials, sliders and switches are almost completely faux pas in modern-day product design. Everything has to be smooth, stealthy, invisibly present and yet always there when you crave that entertainment fix.&lt;/p&gt;
    &lt;p&gt;This design language isn’t just afflicting home electronics either, as over the past years car interiors have seen physical user controls vanish in favor of one or more touch screens, with cars like those from Tesla being the most extreme example with just a single large touch screen on the center console as the sole user interface. Users are however pushing back against this change, with a number of studies also showing that touch-only controls are less effective and less safe than fumbling around on a big screen while driving to adjust something like the climate controls or radio station.&lt;/p&gt;
    &lt;head rend="h2"&gt;There Is An App For That&lt;/head&gt;
    &lt;p&gt;Want to set up your new formless slab of plastic or fabric? Please download this special mobile app to do anything with it. Got a new pair of headphones? Better pray that the mobile app works well on your slab phone or you’ll be stuck with whatever preset defaults it came with, as physical controls on the device are for dummies.&lt;/p&gt;
    &lt;p&gt;Whether we like it or not, the human user interface part of industrial design has been mostly taken out back and replaced with software running on a slab phone. Whatever vestigial controls still remain on the device itself will only be a small subset of what its electronics and firmware are capable of. The slab phone has thus become the user interface, with that part of industrial design often outsourced to some third-party mobile app developer.&lt;/p&gt;
    &lt;p&gt;This has massively backfired for some companies already, with Sonos in 2024 releasing a ‘new and improved’ version of its slab phone app that was so buggy and plagued with issues that it rendered the Sonos speaker hardware effectively useless. While physical user interfaces have their issues, sinking an entire company due to a badly arranged set of knobs is not as easy as with a slab phone app or equivalent, not to mention the potential to retroactively brick the user interface of devices that people have already purchased.&lt;/p&gt;
    &lt;head rend="h2"&gt;Yearning For That Human Touch&lt;/head&gt;
    &lt;p&gt;Here we can see parallels with computer user interfaces, where much like with industrial design there’s a big push to reduce shapes to the most basic geometric forms, remove or reduce color and remove any ‘superfluous’ styling including skeuomorphism. These parallels are perhaps not that surprising, as companies like Google, Apple and Microsoft produce both consumer hardware and software.&lt;/p&gt;
    &lt;p&gt;Google, for example, has heavily invested in its Material Design design language, which can be summarized as having flat color backgrounds with the most simplistic UI elements suspended in said void. UI elements like the ‘hamburger’ icon are used to hide menus not just on phones, but also on desktop systems, where a form of extreme minimalism is being pushed to its ultimate extremes.&lt;/p&gt;
    &lt;p&gt;In the case of consumer electronics that means devices that lack any distinguishable features, as minimalism is a poor way to distinguish one product from another. The removal of visually pleasing and physically practical elements also means a dull, stimulation-free experience.&lt;/p&gt;
    &lt;p&gt;There are no pleasing elements to rest your eyes on, no curves or colors that invoke an emotional response, no buttons to press, or any kind of auditory or physical response. Just lifeless touch controls on slabs of plastic and glass with maybe a sad beep as confirmation of a touch control having been triggered.&lt;/p&gt;
    &lt;p&gt;In this context, what is often called the revival of physical media can be interpreted as not just a yearning for a more visceral audio-visual experience, but would together with so-called retro-computing be a way to experience personal electronics in a way that stimulates and invigorates. Where physical buttons are pressed, sliders slid, dials turned and things go click and whirr as one’s fingers touch and manipulate the very real user interface elements.&lt;/p&gt;
    &lt;p&gt;We know that chronic boredom can be extremely harmful to non-human animals, with enrichment toys and activities prescribed to make them happier and more content. With modern day consumer electronics having become incredibly dull due to the death of industrial design, it would seem that us human mammals are seeking out our own enrichment activities, modern design sensibilities be damned. If this means repeating the sins of early 2000s or 1990s industrial design in our personal hobbyist projects, it’s a price worth to pay for keeping ourselves and our fellow humans happy and enriched.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://hackaday.com/2025/07/23/the-death-of-industrial-design-and-the-era-of-dull-electronics/"/><published>2025-10-05T20:55:26+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45485736</id><title>Ken Parker, famed luthier, has died</title><updated>2025-10-06T05:10:23.359994+00:00</updated><content>&lt;doc fingerprint="365db15571e068b0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;RIP Ken Parker: August 25, 1952 – October 5, 2025&lt;/head&gt;
    &lt;p&gt;Ken Parker, age 73, passed away peacefully at his home in Gloucester, MA on October 5, 2025, with Susan Kolwicz by his side.&lt;/p&gt;
    &lt;p&gt;From Ken, October 3rd, 2025:&lt;/p&gt;
    &lt;p&gt;Hello Everybody,&lt;/p&gt;
    &lt;p&gt;Well, they say that nothing lasts forever and they’re right about that. My time here is about to close down and I won’t be part of the show anymore. What I have done with all my heart and soul is to put together a situation where my work can continue unabated and begin to bring some serious fruit to the things that I’ve been working on for the last 50 years.&lt;/p&gt;
    &lt;p&gt;My deepest and most heartfelt thanks to all of you. It’s been the experience of my lifetime being able to share my life’s work and knowledge with each of you through my instruments and via Archtoppery, and see that you get it. My hope is that you all build on what I’ve learned and shared, and take everything to the next level.&lt;/p&gt;
    &lt;p&gt;Sam Krimmel will be doing just that, and I encourage you to support Sam as he ventures forth. Sam is a natural co-conspirator and he and I will be will be working together down the road through some sort of psychic medium. We’ve already got some amazing new things underway and soon we’re going to show you what that is all about. So stay tuned.&lt;/p&gt;
    &lt;p&gt;All right, well everyone, please take care of yourselves and peace on earth, if that should ever be possible.&lt;/p&gt;
    &lt;p&gt;Love, Ken&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kenparkerarchtops.com"/><published>2025-10-05T22:10:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45485806</id><title>Germany outfitted half a million balconies with solar panels</title><updated>2025-10-06T05:10:23.148043+00:00</updated><content>&lt;doc fingerprint="3707d1531a06ed9a"&gt;
  &lt;main&gt;
    &lt;p&gt;Matthias Weyland loves having people ask about his balcony. A pair of solar panels hang from the railing, casting a sheen of dark blue against the red brick of his apartment building. They’re connected to a microinverter plugged into a wall outlet and feed electricity directly into his home. On a sunny day, he’ll produce enough power to supply up to half of his family’s daily needs.&lt;/p&gt;
    &lt;p&gt;Weyland is one of hundreds of thousands of people across Germany who have embraced balkonkraftwerk, or balcony solar. Unlike rooftop photovoltaics, the technology doesn’t require users to own their home, and anyone capable of plugging in an appliance can set it up. Most people buy the simple hardware online or at the supermarket for about $550 (500 euros.)&lt;/p&gt;
    &lt;p&gt;The ease of installation and a potent mix of government policies to encourage adoption has made the wee arrays hugely popular. More than 550,000 of them dot cities and towns nationwide, half of which were installed in 2023. During the first half of this year, Germany added 200 megawatts of balcony solar. Regulations limit each system to just 800 watts, enough to power a small fridge or charge a laptop, but the cumulative effect is nudging the country toward its clean energy goals while giving apartment dwellers, who make up more than half of the population, an easy way to save money and address the climate crisis.&lt;/p&gt;
    &lt;p&gt;“I love the feeling of charging the bike when the sun is shining, or having the washing machine run when the sun is shining, and to know that it comes directly from the sun,” Weyland said. “It’s a small step you can take as a tenant” and an act of “self-efficacy, to not just sit and wait until the climate crisis gets worse.”&lt;/p&gt;
    &lt;p&gt;Balcony solar emerged around a decade ago, but didn’t catch on until four or five years ago, thanks in part to years of lobbying by solar and clean energy advocates for policies to foster its adoption. The German government enacted the first technical regulations for plug-in solar devices in 2019, allowing balcony solar systems to use standard electrical plugs and feed into the grid. That prompted an influx of plug-in devices and advocates to promote the technology.&lt;/p&gt;
    &lt;p&gt;The pandemic helped fuel the surge in popularity as people spent time at home, working on DIY projects. More recently, the escalating energy prices that followed Russia’s invasion of Ukraine led more Germans to consider balcony solar. “People just did anything they could to reduce their energy bills,” said Wolfgang Gründinger, who works with the clean energy company Enpal.&lt;/p&gt;
    &lt;p&gt;Federal and local policymakers have redoubled their efforts to make the technology more accessible. In April, the government simplified permitting and registration requirements, and in July, federal lawmakers passed renter protections that prevent landlords from arbitrarily blocking installations. Cities throughout Germany, including Berlin and Weyland’s home city of Kiel, have offered millions of euros in subsidies to install balcony solar.&lt;/p&gt;
    &lt;p&gt;Gründinger and experts at the German Solar Industry Association noted that the devices don’t generate enough power to strain the grid, and their standardized design and safety features allow them to integrate smoothly and easily.&lt;/p&gt;
    &lt;p&gt;Despite the hype, most users concede that balcony solar provides modest cost and energy savings. Weyland spent around $530 for his 600-watt-capacity system. While he’s happy with how his south-facing panels perform during balmy weather, such days are rare in northern Germany. He estimates that he’ll save around $100 in annual electricity costs and recoup his investment in about five years.&lt;/p&gt;
    &lt;p&gt;That’s fairly typical, although advocates of the technology say a system’s efficacy — and, therefore, payback timeline — varies widely depending upon the number of panels, their location and direction, and how much shade surrounds them. A household with a “comparatively large well-positioned balcony system in a sunny spot facing south” can produce 15 percent of its electricity with balcony solar, according to Peter Stratmann, head of renewables at German Federal Network Agency, the country’s utility regulator.&lt;/p&gt;
    &lt;p&gt;While that can put a dent in a household’s utility bill, its impact on Germany’s consumption is far smaller. “Even if we attached panels to all suitable balconies across the country, we’d still only manage to meet 1 percent or less of our overall energy needs,” Stratmann told Deutsche Welle.&lt;/p&gt;
    &lt;p&gt;So if balcony solar doesn’t generate a lot of power or save a lot of money, why are so many people flocking to it? Many of them like the idea of producing energy at home and gaining a bit of independence from the grid. It also provides a tangible way to take climate action. “It makes the energy transition feel a little more concrete and not so abstract,” said Helena Holenweger of the nonprofit Deutsche Umwelthilfe, or Environmental Action Germany. She installed a balcony solar system on top of her garage about a year ago. “You can literally do something about it.”&lt;/p&gt;
    &lt;p&gt;Holenweger and others who have tapped the sun said balcony solar led them to reevaluate their understanding of electricity consumption and take steps to reduce it. “For lots of people, energy is just something that comes out of your socket,” Holenweger said. “You never think about how it gets there or how it works.” The systems don’t include battery storage, so the juice they generate must be used immediately, leading people to plan the best time to, say, run the washing machine to ensure they’re using renewable energy. In that way, it becomes something of a game. Many balcony solar kits feature an app to track daily energy generation, providing what has, for many people, become a scorecard. “They screenshot that, they send it around to their Facebook groups, family WhatsApp groups. They’re super proud,” Gründinger said.&lt;/p&gt;
    &lt;p&gt;Germany is unique in its rabid embrace of the tech. Although increasingly popular in Austria, the Netherlands, France, and elsewhere in Europe, plug-in solar devices aren’t viable in the United States due to costly permitting requirements and other local regulations. Beyond that, most systems are designed to European electrical standards, making them incompatible with U.S. power systems.&lt;/p&gt;
    &lt;p&gt;But even in Germany, balcony solar still faces hurdles, including fierce resistance from landlords worried about electrical fires or put off by the aesthetics of the panels. Last year, Weyland sued his building’s property management company for imposing what he deemed unreasonable requirements to install a system, including a formal inspection of the building’s electrical system. A court sided with him in October 2023, but similar cases pop up regularly.&lt;/p&gt;
    &lt;p&gt;Weyland hopes that as more people adopt balcony solar, that will soon change. Already, people in his life regularly ask him about his panels, and two friends are buying systems of their own.&lt;/p&gt;
    &lt;p&gt;“So many people talk to me in our neighborhood and ask about the system when they see it,” Weyland said. “It’s kind of like a snowball that gets bigger and bigger.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://grist.org/buildings/how-germany-outfitted-half-a-million-balconies-with-solar-panels/"/><published>2025-10-05T22:18:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45486031</id><title>Generative AI's Energy Needs Are Reshaping Our World</title><updated>2025-10-06T05:10:22.922476+00:00</updated><content>&lt;doc fingerprint="47f42b200bbe516a"&gt;
  &lt;main&gt;
    &lt;p&gt;The Conversation (1)&lt;/p&gt;
    &lt;p&gt;Tagamachi Sakoshi02 Oct, 2025&lt;/p&gt;
    &lt;p&gt; INDV &lt;/p&gt;
    &lt;p&gt;Doing queries for 100 million users at the energy cost of 29 thousand houses is extremely efficient. Local models are even more efficient than that. I use Gemma 3 12B on my laptop.&lt;/p&gt;
    &lt;p&gt;Depending on the task AI assist saves a lot of energy. E.g. instead of spending hours on photoshop to do concept art, you can do dozens to hundreds using AI assist.&lt;/p&gt;
    &lt;p&gt;Datacenter wise, it's sensless, but I suspect the Stargate and oracle project will never take place. There is no economic way to make a return on investment on 500 billion bucks spent on H200.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://spectrum.ieee.org/ai-energy-use"/><published>2025-10-05T23:00:23+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45486306</id><title>Rule-Based Expert Systems: The Mycin Experiments (1984)</title><updated>2025-10-06T05:10:22.673132+00:00</updated><content>&lt;doc fingerprint="f3a54915433b8ca0"&gt;
  &lt;main&gt;
    &lt;cell&gt;
      &lt;head rend="h1"&gt;Rule-Based Expert Systems:&lt;lb/&gt;The MYCIN Experiments of the Stanford Heuristic Programming Project&lt;/head&gt;
      &lt;head rend="h2"&gt;Edited by Bruce G. Buchanan and Edward H. Shortliffe&lt;/head&gt;
      &lt;p&gt;754 pp., references, index, illus. electronic text&lt;lb/&gt; Addison Wesley, Reading, MA, 1984&lt;lb/&gt; Out of print. All chapters are freely available below.&lt;/p&gt;
      &lt;p&gt;Artificial intelligence, or AI, is largely an experimental science—at least as much progress has been made by building and analyzing programs as by examining theoretical questions. MYCIN is one of several well-known programs that embody some intelligence and provide data on the extent to which intelligent behavior can be programmed. As with other AI programs, its development was slow and not always in a forward direction. But we feel we learned some useful lessons in the course of nearly a decade of work on MYCIN and related programs. In this book we share the results of many experiments performed in that time, and we try to paint a coherent picture of the work. The book is intended to be a critical analysis of several pieces of related research, performed by a large number of scientists. We believe that the whole field of AI will benefit from such attempts to take a detailed retrospective look at experiments, for in this way the scientific foundations of the field will gradually be defined. It is for all these reasons that we have prepared this analysis of the MYCIN experiments.&lt;/p&gt;
      &lt;p&gt;Contributors&lt;/p&gt;
      &lt;p&gt;Foreword&lt;lb/&gt; Allen Newell&lt;/p&gt;
      &lt;p&gt;Preface&lt;/p&gt;
      &lt;head rend="h3"&gt;Part One: Background&lt;/head&gt;
      &lt;p&gt;Chapter 1—The Context of the MYCIN Experiments&lt;/p&gt;
      &lt;p&gt;Chapter 2—The Origin of Rule-Based Systems in AI&lt;lb/&gt; Randall Davis and Jonathan J. King&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Two: Using Rules&lt;/head&gt;
      &lt;p&gt;Chapter 3—The Evolution of MYCIN’s Rule Form&lt;/p&gt;
      &lt;p&gt;Chapter 4—The Structure of the MYCIN System&lt;lb/&gt; William van Melle&lt;/p&gt;
      &lt;p&gt;Chapter 5—Details of the Consultation System&lt;lb/&gt; Edward H. Shortliffe&lt;/p&gt;
      &lt;p&gt;Chapter 6—Details of the Revised Therapy Algorithm&lt;lb/&gt; William J. Clancey&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Three: Building a Knowledge Base&lt;/head&gt;
      &lt;p&gt;Chapter 7—Knowledge Engineering&lt;/p&gt;
      &lt;p&gt;Chapter 8—Completeness and Consistency in a Rule-Based System&lt;lb/&gt; Motoi Suwa, A. Carlisle Scott, and Edward H. Shortliffe&lt;/p&gt;
      &lt;p&gt;Chapter 9—Interactive Transfer of Expertise&lt;lb/&gt; Randall Davis&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Four: Reasoning Under Uncertainty&lt;/head&gt;
      &lt;p&gt;Chapter 10—Uncertainty and Evidential Support&lt;/p&gt;
      &lt;p&gt;Chapter 11—A Model of Inexact Reasoning in Medicine&lt;lb/&gt; Edward H. Shortliffe and Bruce G. Buchanan&lt;/p&gt;
      &lt;p&gt;Chapter 12—Probabilistic Reasoning and Certainty Factors&lt;lb/&gt; J. Barclay Adams&lt;/p&gt;
      &lt;p&gt;Chapter 13—The Dempster-Shafer Theory of Evidence&lt;lb/&gt; Jean Gordon and Edward H. Shortliffe&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Five: Generalizing MYCIN&lt;/head&gt;
      &lt;p&gt;Chapter 14—Use of the MYCIN Inference Engine&lt;/p&gt;
      &lt;p&gt;Chapter 15—EMYCIN: A Knowledge Engineer’s Tool for Constructing Rule-Based Expert Systems&lt;lb/&gt; William van Melle, Edward H. Shortliffe, and Bruce G. Buchanan&lt;/p&gt;
      &lt;p&gt;Chapter 16—Experience Using EMYCIN&lt;lb/&gt; James S. Bennett and Robert S. Engelmore&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Six: Explaining the Reasoning&lt;/head&gt;
      &lt;p&gt;Chapter 17—Explanation as a Topic of AI Research&lt;/p&gt;
      &lt;p&gt;Chapter 18—Methods for Generating Explanations&lt;lb/&gt; A. Carlisle Scott, William J. Clancey, Randall Davis, and Edward H. Shortliffe&lt;/p&gt;
      &lt;p&gt;Chapter 19—Specialized Explanations for Dosage Selection&lt;lb/&gt; Sharon Wraith Bennett and A. Carlisle Scott&lt;/p&gt;
      &lt;p&gt;Chapter 20—Customized Explanations Using Causal Knowledge&lt;lb/&gt; Jerold W. Wallis and Edward H. Shortliffe&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Seven: Using Other Representations&lt;/head&gt;
      &lt;p&gt;Chapter 21—Other Representation Frameworks&lt;/p&gt;
      &lt;p&gt;Chapter 22—Extensions to the Rule-Based Formalism for a Monitoring Task&lt;lb/&gt; Lawrence M. Fagan, John C. Kunz, Edward A. Feigenbaum, and John J. Osborn&lt;/p&gt;
      &lt;p&gt;Chapter 23—A Representation Scheme Using Both Frames and Rules&lt;lb/&gt; Janice S. Aikins&lt;/p&gt;
      &lt;p&gt;Chapter 24—Another Look at Frames&lt;lb/&gt; David E. Smith and Jan E. Clayton&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Eight: Tutoring&lt;/head&gt;
      &lt;p&gt;Chapter 25—Intelligent Computer-Aided Instruction&lt;/p&gt;
      &lt;p&gt;Chapter 26—Use of MYCIN’s Rules for Tutoring&lt;lb/&gt; William J. Clancey&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Nine: Augmenting the Rules&lt;/head&gt;
      &lt;p&gt;Chapter 27—Additional Knowledge Structures&lt;/p&gt;
      &lt;p&gt;Chapter 28—Meta-Level Knowledge&lt;lb/&gt; Randall Davis and Bruce G. Buchanan&lt;/p&gt;
      &lt;p&gt;Chapter 29—Extensions to Rules for Explanation and Tutoring&lt;lb/&gt; William J. Clancey&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Ten: Evaluating Performance&lt;/head&gt;
      &lt;p&gt;Chapter 30—The Problem of Evaluation&lt;/p&gt;
      &lt;p&gt;Chapter 31—An Evaluation of MYCIN’s Advice&lt;lb/&gt; Victor L. Yu, Lawrence M. Fagan, Sharon Wraith Bennett, William J . Clancey, A. Carlisle Scott, John F. Hannigan, Robert L. Blum, Bruce G. Buchanan, and Stanley N. Cohen&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Eleven: Designing for Human Use&lt;/head&gt;
      &lt;p&gt;Chapter 32—Human Engineering of Medical Expert Systems&lt;/p&gt;
      &lt;p&gt;Chapter 33—Strategies for Understanding Structured English&lt;lb/&gt; Alain Bonnet&lt;/p&gt;
      &lt;p&gt;Chapter 34—An Analysis of Physicians’ Attitudes&lt;lb/&gt; Randy L. Teach and Edward H. Shortliffe&lt;/p&gt;
      &lt;p&gt;Chapter 35—An Expert System for Oncology Protocol Management&lt;lb/&gt; Edward H. Shortliffe, A. Carlisle Scott, Miriam B. Bischoff, A. Bruce Campbell, William van MeUe, and Charlotte D. Jacobs&lt;/p&gt;
      &lt;head rend="h3"&gt;Part Twelve: Conclusions&lt;/head&gt;
      &lt;p&gt;Chapter 36—Major Lessons from This Work&lt;/p&gt;
      &lt;p&gt;Epilog&lt;/p&gt;
      &lt;p&gt;Appendix&lt;/p&gt;
      &lt;p&gt;References&lt;/p&gt;
      &lt;p&gt;Name Index&lt;/p&gt;
      &lt;p&gt;Subject Index&lt;/p&gt;
    &lt;/cell&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.shortliffe.net/Buchanan-Shortliffe-1984/MYCIN%20Book.htm"/><published>2025-10-05T23:51:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45486825</id><title>Mic-E-Mouse – Covert eavesdropping through computer mice</title><updated>2025-10-06T05:10:22.459915+00:00</updated><content>&lt;doc fingerprint="e5ab0911698ac3a1"&gt;
  &lt;main&gt;
    &lt;p&gt;Covert Eavesdropping through Computer Mice&lt;/p&gt;
    &lt;p&gt;Your computer mouse has big ears.&lt;/p&gt;
    &lt;p&gt;Image courtesy of GPT4/Dall-E-3, generated using the keywords "computer mouse with big ears and a microphone as a scroll wheel."&lt;/p&gt;
    &lt;p&gt;High-Performance Optical Sensors in Mice expose a critical vulnerability — one where confidential user speech can be leaked.&lt;/p&gt;
    &lt;p&gt;Attackers can exploit these sensors’ ever-increasing polling rate and sensitivity to emulate a makeshift microphone and covertly eavesdrop on unsuspecting users. We present an attack vector that capitalizes on acoustic vibrations propagated through the user’s work surface, and we show that existing consumer-grade mice can detect these vibrations. However, the collected signal is low-quality and suffers from non-uniform sampling, a non-linear frequency response, and extreme quantization. We introduce Mic-E-Mouse, a pipeline consisting of successive signal processing and machine learning techniques to overcome these challenges and achieve intelligible reconstruction of user speech. We measure Mic-E-Mouse against consumer-grade sensors on the VCTK and AudioMNIST speech datasets, and we achieve an SI-SNR increase of +19𝑑𝐵, a Speaker-Recognition accuracy of 80% on the automated tests and a WER of 16.79% on the human study&lt;/p&gt;
    &lt;p&gt;The accessibility of these advanced input devices is steadily increasing. Consumer-grade mice with high-fidelity sensors are already readily available for under 50 U.S. Dollars. As improvements in process technology and sensor development continue, it is reasonable to expect further decreases in price, similar to the trend shown in the picture above. Ultimately, these developments entail an increased usage of vulnerable mice by consumers, companies, and governmental entities, expanding the attack surface of vulnerabilities in these advanced sensor technologies.&lt;/p&gt;
    &lt;p&gt;With only a vulnerable mouse, and a victim’s computer running compromised or even benign software (in the case of a web-based attack surface), we show that it is possible to collect mouse packet data and extract audio waveforms. Moreover, the software used scheme used in our pipeline is invisible to the average user during the data collection process. After this stage, all signal processing and data analysis can be performed offsite at any time the adversary wishes. We present a visual outline of our pipeline in the above diagram.&lt;/p&gt;
    &lt;p&gt;Our target for a suitable exploit delivery vehicle is open-source applications where the collection and distribution of high-frequency mouse data is not inherently suspicious. Therefore, creative software, video games, and other high performance, low latency software are an ideal targets for injecting our exploit. Furthermore, we note that extracting the collected mouse data from the victim's computer is a task that requires ample consideration. Many video games often contain networking code that can be reused by our exploit without raising suspicion. Thus, using a video game as the delivery vehicle of our exploit allows us to meet the performance demands of our collection scheme.&lt;/p&gt;
    &lt;p&gt;A hypothetical timeline of an attacker using the Mic-E-Mouse attack is presented in the figure above.&lt;/p&gt;
    &lt;p&gt;Our pipeline overcomes significant roadblocks – including heavy quantization, non-uniform sampling, and a high noise floor – in order to obtain a comprehensible output signal. Ultimately, we show that auditory surveillance through high-performance optical sensors is now possible, effective, and performant.&lt;/p&gt;
    &lt;p&gt;The representation of phoneme frequency versus perceived loudness presented in the above diagram is also known as a Speech Banana by otolaryngologists and speech pathologists. From this diagram, it is evident that the majority of human speech falls between the frequency range of 200Hz to 2000Hz, and is therefore detectable by our pipeline. We overlay an audio waveform from the filtering stage of the Mic-E-Mouse pipeline to show the correlation between phoneme frequency and signal strength. Further context is provided in the full paper.&lt;/p&gt;
    &lt;p&gt;We provide a demonstration of the Mic-E-Mouse pipeline in the above video.&lt;/p&gt;
    &lt;p&gt;Anonymous repository access has been provided to reviewers during the review process using the following link:&lt;/p&gt;
    &lt;p&gt;https://anonymous.4open.science/r/Mic-E-Mouse-7028/README.md&lt;/p&gt;
    &lt;p&gt;Anonymous Data access has been provided to reviewers during the review process using the following link:&lt;/p&gt;
    &lt;p&gt;https://drive.google.com/drive/folders/1DcTldouupfp7BMteE1Br0lq7RCdQQ0Hc?usp=drive_link&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://sites.google.com/view/mic-e-mouse"/><published>2025-10-06T01:34:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45486829</id><title>Should I choose Ada, SPARK, or Rust over C/C++? (2024)</title><updated>2025-10-06T05:10:22.123388+00:00</updated><content>&lt;doc fingerprint="b64b98bb3093a5d8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Should I choose Ada, SPARK, or Rust over C/C++?&lt;/head&gt;
    &lt;head rend="h2"&gt;by Quentin Ochem –&lt;/head&gt;
    &lt;p&gt;At AdaCore, weâre in the business of supporting people who develop high-integrity software, in particular for embedded systems. In terms of programming languages, this means supporting the most commonly found candidates, which in 2024 include C/C++, Ada/SPARK, and Rust. If youâve already made your decision, we will support you. However, in a number of situations, people ask us: âWhat should we do? Whatâs the best out there?â. While itâs difficult to give a one-size-fits-all answer, there are some strategic elements to consider.&lt;/p&gt;
    &lt;head rend="h1"&gt;C/C++ - a risky default solution&lt;/head&gt;
    &lt;p&gt;In the embedded domain, youâre more likely to look at C/C++ than anything else. This is the option âby defaultâ. A large portion of your software is likely to already be in C/C++. Your staff is trained in this language, tools, and processes are in place, and development costs are known and deterministic. Why change?&lt;/p&gt;
    &lt;p&gt;There is a growing body of evidence, both qualitative and quantitative, that shows that C/C++ is making the production of safe and secure software more difficult than it should be. Decades of research and investment have still not yielded a âsafe C/C++â that is cost-effective, flexible, and reliable.&lt;/p&gt;
    &lt;p&gt;The good news is that today, depending on what you may want to do, you have better options.&lt;/p&gt;
    &lt;head rend="h1"&gt;Rust and Ada - improving traditional development processes&lt;/head&gt;
    &lt;p&gt;Teams that are looking at alternative programming languages have two options today: Ada and Rust. Both languages raise the bar in terms of safety and security compared to C/C++; each has unique strengths&lt;/p&gt;
    &lt;p&gt;Consider ecosystems and communities. Rust has a vibrant community that has developed a huge amount of resources over a short period of time. However, its commercial ecosystem is still in the process of organizing itself. AdaCore has a role to play in this, but filling some of the gaps is going to take some time. In contrast, Ada has a smaller community - it has been growing over the years but much more slowly. However Ada has a complete and mature ecosystem both in terms of toolchain availability and certification documentation.&lt;/p&gt;
    &lt;p&gt;Or consider language capabilities. Rust pushes memory safety very far and provides a more flexible memory model than most programming languages today. Ada has an unmatched specification language that allows one to express and check software and hardware constraints at various levels.&lt;/p&gt;
    &lt;p&gt;These are just two examples. Below, we present a table that compares other aspects of Ada and Rust to help you select the language best suited to your needs.&lt;/p&gt;
    &lt;head rend="h1"&gt;SPARK - industrial-strength formal methods&lt;/head&gt;
    &lt;p&gt;If youâre prepared to look at alternative programming languages to avoid the costs and risks of C/C++, SPARK offers an opportunity to go much further than Ada or Rust. SPARK, which is based on Ada, offers industrial-strength formal methods: an opportunity for you to prove mathematically that your software is safe and secure. This paradigm shift in software development methodology offers significant cost savings for high-integrity software.&lt;/p&gt;
    &lt;p&gt;Using SPARK, you identify properties that can be formalized and proved true throughout an entire program - statically, i.e., at compile time. Ada and Rust offer some basic properties that are checked statically, such as the specification of hardware constraints in Ada or memory safety via borrow checking in Rust. SPARK takes these approaches to the limit, allowing the full range of Adaâs specification language to be used to formalize properties that are proved, automatically. The result is comprehensive proven properties across a whole application.&lt;/p&gt;
    &lt;p&gt;The first set of properties SPARK demonstrates pertains to vulnerabilities inherent to the programming language itself. For example, thereâs no guarantee that the index used to access an array element is within range. While many programming languages guarantee that an out of range access will yield an exception at run-time, SPARK will prove that thereâs no possible out of range index statically, at compile-time.&lt;/p&gt;
    &lt;p&gt;SPARK also allows expression of custom properties and verifies that the code complies with them in all possible cases. These properties can range from simple cases (are the callees to mutexes balanced? Is the array after this sort call really sorted?) to more complex relationships between function input and output.&lt;/p&gt;
    &lt;p&gt;Ultimately, using SPARK allows you to eliminate various checkers (think MISRA-C checkers). By verifying properties with 100% certainty via mathematical proof, you can eliminate many unit-level tests. This yields direct cost savings and ensures an overall higher level of integrity.&lt;/p&gt;
    &lt;head rend="h1"&gt;So whatâs the best choice?&lt;/head&gt;
    &lt;p&gt;Choosing between Ada, Rust, and SPARK is a complex discussion. The key is, what is the team looking at achieving, and what is the potential appetite for change? The chart below provides some elements that can serve as the basis of a discussion. Different companies may allocate different weights to different elements. This is the way we view things at AdaCore and for our customers:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Ada&lt;/cell&gt;
        &lt;cell&gt;Rust&lt;/cell&gt;
        &lt;cell&gt;SPARK&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Community&lt;/cell&gt;
        &lt;cell&gt;Small&lt;/cell&gt;
        &lt;cell&gt;Large&lt;/cell&gt;
        &lt;cell&gt;Small&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Toolchain Embedded Ecosystem&lt;/cell&gt;
        &lt;cell&gt;Mature&lt;/cell&gt;
        &lt;cell&gt;In development&lt;/cell&gt;
        &lt;cell&gt;Mature&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Certification&lt;/cell&gt;
        &lt;cell&gt;Off-the-shelf&lt;/cell&gt;
        &lt;cell&gt;In development&lt;/cell&gt;
        &lt;cell&gt;Off-the-shelf&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Libraries available&lt;/cell&gt;
        &lt;cell&gt;Limited&lt;/cell&gt;
        &lt;cell&gt;Large&lt;/cell&gt;
        &lt;cell&gt;Limited&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Programming paradigm&lt;/cell&gt;
        &lt;cell&gt;Imperative system-level&lt;/cell&gt;
        &lt;cell&gt;Imperative system-level&lt;/cell&gt;
        &lt;cell&gt;Imperative system-level&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Mitigation of programming errors&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Strong Typing&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Limited&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Data constraints, hardware / software data consistency&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Guaranteed absence of run-time errors&lt;/cell&gt;
        &lt;cell&gt;Run-time checks&lt;/cell&gt;
        &lt;cell&gt;Run-time checks&lt;/cell&gt;
        &lt;cell&gt;Static, via Proof&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Contract language (pre- post- conditions, invariants, predicatesâ¦)&lt;/cell&gt;
        &lt;cell&gt;Yes, checked at run-time&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes, checked statically, via proof&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Memory safety&lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Pointer avoidance&lt;/p&gt;
          &lt;p&gt;Accessibility checks&lt;/p&gt;
          &lt;p&gt;Dynamic checks&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Borrow checker&lt;/p&gt;
          &lt;p&gt;Lifetimes&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Borrow checker&lt;/p&gt;
          &lt;p&gt;Pointer avoidance&lt;/p&gt;
          &lt;p&gt;Accessibility checks&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Cost of adoption&lt;/cell&gt;
        &lt;cell&gt;Language change&lt;/cell&gt;
        &lt;cell&gt;Language change&lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Methodology change&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Expected benefits&lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Mitigation of programming errors&lt;/p&gt;
          &lt;p&gt;Constraint checks&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Mitigation of programming errors&lt;/p&gt;
          &lt;p&gt;Memory safety&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Mitigation of programming errors&lt;/p&gt;
          &lt;p&gt;Memory Safety&lt;/p&gt;
          &lt;p&gt;Guarantee of absence of run-time errors&lt;/p&gt;
          &lt;p&gt;Guarantee of formal properties&lt;/p&gt;
          &lt;p&gt;Guarantee of constraint checks&lt;/p&gt;
          &lt;p&gt;Testing reduction&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Community&lt;/p&gt;
    &lt;p&gt;One of the big strengths of the Rust programming language is its large and vibrant community. Itâs easy to find resources on the language and people who have a true passion for it. Tools and libraries constantly emerge from the hobbyist scene, which can be easily leveraged when starting projects.&lt;/p&gt;
    &lt;p&gt;The Ada and SPARK communities are comparatively smaller. While excellent resources exist for learning Ada and SPARK, there are fewer community-provided tools and libraries. However, theyâve endured the test of time for over four decades and are composed of dedicated individuals. Today, they are also infused with new members and on the rise.&lt;/p&gt;
    &lt;p&gt;Overall, both communities benefit (albeit at different intensities) from the same underlying force: an increase in the demands for technology that provides safety and security.&lt;/p&gt;
    &lt;p&gt;Embedded Toolchain Ecosystem&lt;/p&gt;
    &lt;p&gt;Ada and SPARK have a very mature ecosystem, in particular in the embedded space. Besides the familiar Linux and Windows environment, compilers exist for many real-time operating systems and hardware architecture, and tools cover the whole range of needs from static analysis to dynamic analysis. All of this comes with industrial support. The tools also come with long term support, which means that you can select one version and stay supported for years or decades.&lt;/p&gt;
    &lt;p&gt;Rust today is becoming established in the native / server environments. Embedded RTOSes and architecture support are in the process of being developed. Itâs a lengthy process, due to the number of environments to support and their accessibility and specificities. Commercial support is also in development - some environments are already available off-the-shelf while others are being put together (including by AdaCore). The question of long-term support is also important, as some providers tend to update their toolchain very frequently, which may make long-lasting projects difficult to support. AdaCore addresses this specific issue with our products.&lt;/p&gt;
    &lt;p&gt;Undoubtedly, both languages will converge over time as far as toolchain goes - the choice criterion is more whether itâs important to have all of the answers today or if the adopting team can wait.&lt;/p&gt;
    &lt;p&gt;Certification&lt;/p&gt;
    &lt;p&gt;The situation on certification mimics the situation in toolchain support. Ada and SPARK, having been around for quite some time, have qualification and certification evidence for a wide variety of standards, notably the most common ones in the embedded world such as avionics (DO-178), automotive (ISO 26262), railway (EN-50128), space (ECSS-E-ST-40C and&lt;/p&gt;
    &lt;p&gt;ECSS-Q-ST-80C) and others.&lt;/p&gt;
    &lt;p&gt;Rust is a much younger technology, so it hasnât had the same amount of time for these to emerge. Weâre starting to see some automotive ISO-26262 evidence, which is currently limited to some environments and for some subsets of the Rust toolchain.&lt;/p&gt;
    &lt;p&gt;Libraries&lt;/p&gt;
    &lt;p&gt;One of the very strong attributes of the Rust programming language is the large number of libraries available through its cargo package manager. Pretty much anything that you can think of is covered one way or another. However, a number of these libraries are developed by hobbyists and many of the most popular libraries have yet to reach version 1.0.&lt;/p&gt;
    &lt;p&gt;Ada and SPARK have fewer off-the-shelf libraries available. The Alire package manager started in 2021, counts about 400 packages at the date of writing. This lack of native libraries is usually offset by binding from Ada and SPARK to pre-existing C or C++ libraries.&lt;/p&gt;
    &lt;p&gt;However, for both languages, constraints may come from regulatory or certification requirements, as publicly available libraries are usually not suitable for safety- or security-certified embedded development.&lt;/p&gt;
    &lt;p&gt;Programming paradigm&lt;/p&gt;
    &lt;p&gt;Thereâs no fundamental underlying difference in terms of the programming paradigms between Ada, SPARK, and Rust. They all are imperative modular languages, providing variations around the concepts of object orientation and other similar capabilities (as opposed to e.g. functional languages). Theyâre all statically compiled directly into machine code (as opposed to, e.g., interpreted languages).&lt;/p&gt;
    &lt;p&gt;Mitigation of programming errors&lt;/p&gt;
    &lt;p&gt;All three languages provide various mechanisms for avoiding or mitigating programming errors. For example, all three languages provide arrays as first-class citizens, containing boundaries and allowing for dynamic index checking. They also provide various ways to avoid uninitialized variables, data races, null pointer dereferencing, etc.&lt;/p&gt;
    &lt;p&gt;Strong Typing&lt;/p&gt;
    &lt;p&gt;Strong typing ensures that you can determine at compile time the specific type of an object and that you can check the integrity of its values throughout its usage. C is notably weakly typed: while variables are typed, implicit conversions allow you to mix numbers with different representations without the developer's oversight (for example, when adding integers and floats). This may result in various issues such as overflow, underflow or rounding errors. Treating arrays like pointers is another example of an issue that arises from weak typing.&lt;/p&gt;
    &lt;p&gt;Rustâs typing is stronger in this regard. Different types canât be mixed together without explicit conversion, and arrays are first-class citizens. This allows programmers to avoid a number of common programming mistakes.&lt;/p&gt;
    &lt;p&gt;Ada and SPARK go further. Types become fundamental elements of the software design. They are named, associated with a number of properties, and checked for consistency statically and dynamically. For example, you can declare a float to be a distance in miles and another float to be a percentage and then make sure that, without explicit conversion, thereâs no risk of mixing them up by mistake. Similarly, a latitude and longitude floating-point type could be defined and the type system would prevent mixing them up in subprogram calls or in arithmetic. Strong typing allows us to detect not only coding errors but also design inconsistencies.&lt;/p&gt;
    &lt;p&gt;Data constraints, hardware/software data consistency&lt;/p&gt;
    &lt;p&gt;The Ada and SPARK type system allows programmers to associate a number of properties, such as data ranges, representation constraints, or validity predicates with types. For example, a percentage type can be constrained to be between 0 and 100; a latitude could be constrained to be between -90 and 90 degrees; and a longitude could be constrained to be between -180 and 180 degrees. These constraints can be checked statically and dynamically, depending on the verification strategy. Data structures can be specified at the bit level in memory with specific endianness, avoiding common mistakes related to bitwise operations. Consistency of specification representation is checked statically (e.g., that there is no overlap between fields of structures, the number of bits specified for a type match is enough for the values that it can take, and the precision for a floating point value can be implemented in hardware).&lt;/p&gt;
    &lt;p&gt;Rust doesnât natively provide these capabilities. When needed, these capabilities could be implemented through more traditional design patterns, such as structures with appropriate methods.&lt;/p&gt;
    &lt;p&gt;Guaranteed absence of run-time errors&lt;/p&gt;
    &lt;p&gt;Run-time errors refer to errors that can be detected by checks and assertions while a program is running. For example, checking that an index used to access an array element is valid. Ada and Rust both provide run-time checks that verify the validity of data and would either raise an exception or issue a panic in case of a failure. While they incur a small footprint in code of code size and performance, they protect the code against much more adversarial vulnerabilities such as buffer overflows.&lt;/p&gt;
    &lt;p&gt;SPARK formally proves absence of run-time errors, at compile time. For example, SPARK statically checks that there are no code paths that can bring values out of bounds. This has the advantage of not only avoiding performance penalties, but also ensuring proper execution of the code against potential exceptions/panic - at the cost of more work on the programmer side to express additional constraints, assertions, and contracts (see later sections).&lt;/p&gt;
    &lt;p&gt;Contract language (pre- post- conditions, invariants, predicatesâ¦)&lt;/p&gt;
    &lt;p&gt;Ada and SPARK are unique in that they allow the description of contracts around software entities, notably types and functions. This allows constraints and dynamic behavior expectations to be encoded as part of the specification and checked for validity across the entire application.&lt;/p&gt;
    &lt;p&gt;Ada translates these contracts into dynamic checks that are verified at runtime. While this has a code size and performance footprint, it helps during testing, debugging, and integration phases and can be stripped out (fully or partially) at compilation time before deployment. Failure in contracts will typically be translated into exceptions.&lt;/p&gt;
    &lt;p&gt;SPARK allows formal, mathematical proof that contracts are always satisfied by the application, ensuring that, regardless of what value is manipulated, specified constraints and functional requirements are met. In this case, thereâs no need to compile these contracts into dynamic checks, obviating the space and performance penalties.&lt;/p&gt;
    &lt;p&gt;SPARK thus offers a paradigm shift for the programmer, who becomes much more verification-oriented, which is extremely valuable in high-integrity environments.&lt;/p&gt;
    &lt;p&gt;Thereâs no specification language in Rust that can be leveraged to implement these capabilities today. They can be emulated to some extent through defensive code and assertion for the purpose of dynamic checking. However, thereâs no technology today that allows formal proof of these kinds of properties like in SPARK.&lt;/p&gt;
    &lt;p&gt;Memory safety&lt;/p&gt;
    &lt;p&gt;One of Rust's most powerful capabilities is its ability to avoid memory errors through its ownership model of memory. This eliminates the most significant source of security vulnerabilities in software, simply by adopting rust, following the ownership model, and satisfying the borrow checker.&lt;/p&gt;
    &lt;p&gt;Ada, in its latest definition (2022), offers a pointer avoidance strategy that mitigates the risk of memory corruption. However, some programming patterns require the use of pointers, and in the absence of, an explicit ownership model borrow checker, memory issues are possible.&lt;/p&gt;
    &lt;p&gt;SPARK, on the other hand, adds a strong ownership model and borrow checker, providing the same level of guarantees as Rust.&lt;/p&gt;
    &lt;p&gt;Cost of adoption&lt;/p&gt;
    &lt;p&gt;The cost of adopting Ada and Rust is similar. In both cases, programmers must learn a new language and teams must deploy a new toolchain. While far from insignificant, programmers keep their overall programming processes more or less the same.&lt;/p&gt;
    &lt;p&gt;The cost of adopting SPARK is probably higher. At the outset, the toolchain and language considerations are pretty close to those of Ada. However, really adopting SPARK means adopting a different way of programming. To be effective, formal verification should be integrated into the development process and change the way software is designed, as well as bringing a number of verification steps earlier in the process. This is not an all-or-nothing decision; depending on the expected trade-off, more or less emphasis can be put on the properties to prove. The benefits can however be significant.&lt;/p&gt;
    &lt;p&gt;Expected benefits&lt;/p&gt;
    &lt;p&gt;Benefits depend on context - here weâre looking at languages in the context of high-integrity development.&lt;/p&gt;
    &lt;p&gt;At the coarse-grained level, the benefit of adopting Ada or Rust should be pretty similar. Both languages greatly reduce the odds of programming errors. Both languages address memory safety, albeit in different ways. When applicable, the Rust memory model will go further than the current Ada pointer-avoidance strategy, but Ada's strong specification and typing allow consistency checking in places where Rust canât yet. Literature on Ada highlights up to 40% development-cost savings compared to C. This does not account for the reduction of residual bugs that are less likely to make it into production.&lt;/p&gt;
    &lt;p&gt;Because SPARK delivers industrial-strength formal methods, it has the potential to exceed the benefits of Ada or Rust significantly. While a number of verification activities will be front-loaded during development, some testing and checking activities will be eliminated - those that would check constraints and properties expressed in SPARK. Deviations against specified behavior are not mitigated, they are eliminated from production. In the context of applications where defect cost is high and whose lifetime is counted in years or decades, this can yield significant gains, beyond the gains of a simple language change.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.adacore.com/should-i-choose-ada-spark-or-rust-over-c-c"/><published>2025-10-06T01:35:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45487044</id><title>Why do LLMs freak out over the seahorse emoji?</title><updated>2025-10-06T05:10:21.995733+00:00</updated><content>&lt;doc fingerprint="2d678256c88d5a34"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why do LLMs freak out over the seahorse emoji?&lt;/head&gt;
    &lt;p&gt;This is an edited and expanded version of a Twitter post, originally in response to @arm1st1ce, that can be found here: https://x.com/voooooogel/status/1964465679647887838&lt;/p&gt;
    &lt;p&gt;Is there a seahorse emoji? Let's ask GPT-5 Instant:&lt;/p&gt;
    &lt;p&gt;Wtf? Let's ask Claude Sonnet 4.5 instead:&lt;/p&gt;
    &lt;p&gt;What's going on here? Maybe Gemini 2.5 Pro handles it better?&lt;/p&gt;
    &lt;p&gt;OK, something is going on here. Let's find out why.&lt;/p&gt;
    &lt;head rend="h2"&gt;LLMs really think there's a seahorse emoji&lt;/head&gt;
    &lt;p&gt;Here are the answers you get if you ask several models whether a seahorse emoji exists, yes or no, 100 times:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Is there a seahorse emoji, yes or no? Respond with one word, no punctuation.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;gpt-5-chat &lt;list rend="ul"&gt;&lt;item&gt;100% 'Yes'&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;gpt-5 &lt;list rend="ul"&gt;&lt;item&gt;100% 'Yes'&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;claude-4.5-sonnet &lt;list rend="ul"&gt;&lt;item&gt;100% 'Yes'&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;llama-3.3-70b &lt;list rend="ul"&gt;&lt;item&gt;83% 'yes'&lt;/item&gt;&lt;item&gt;17% 'Yes'&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Needlessly to say, popular language models are very confident that there's a seahorse emoji. And they're not alone in that confidence - here's a Reddit thread with hundreds of comments from people who distinctly remember a seahorse emoji existing:&lt;/p&gt;
    &lt;p&gt;There's tons of this - Google "seahorse emoji" and you'll find TikToks, Youtube videos, and even (now defunct) memecoins based around the supposed vanishing of a seahorse emoji that everyone is pretty sure used to exist - but of course, never did.&lt;/p&gt;
    &lt;p&gt;Maybe LLMs believe a seahorse emoji exists because so many humans in the training data do. Or maybe it's a convergent belief - given how many other aquatic animals are in Unicode, it's reasonable for both humans and LLMs to assume (generalize, even) that such a delightful animal is as well. A seahorse emoji was even formally proposed at one point, but was rejected in 2018.&lt;/p&gt;
    &lt;p&gt;Regardless of the root cause, many LLMs begin each new context window fresh with the mistaken latent belief that the seahorse emoji exists. But why does that produce such strange behavior? I mean, I used to believe a seahorse emoji existed myself, but if I had tried to send it to a friend, I would've simply looked for it on my keyboard and realized it wasn't there, not sent the wrong emoji and then gone into an emoji spam doomloop. So what's happening inside the LLM that causes it to act like this?&lt;/p&gt;
    &lt;head rend="h2"&gt;Using the logit lens&lt;/head&gt;
    &lt;p&gt;Let's look into this using everyone's favorite underrated interpretability tool, the logit lens!&lt;/p&gt;
    &lt;p&gt;Using this prompt prefix - a templated chat with the default llama-3.3-70b system prompt, a question about the seahorse emoji, and a partial answer from the model right before it gives the actual emoji:&lt;/p&gt;
    &lt;code&gt;&amp;lt;|begin_of_text|&amp;gt;&amp;lt;|begin_of_text|&amp;gt;&amp;lt;|start_header_id|&amp;gt;system&amp;lt;|end_header_id&amp;gt;
Cutting Knowledge Date: December 2023
Today Date: 26 Jul 2024

&amp;lt;|eot_id|&amp;gt;&amp;lt;|start_header_id|&amp;gt;user&amp;lt;|end_header_id|&amp;gt;

Is there a seahorse emoji?&amp;lt;|eot_id|&amp;gt;&amp;lt;|start_header_id|&amp;gt;assistant&amp;lt;|end_header_id|&amp;gt;

Yes, there is a seahorse emoji:
&lt;/code&gt;
    &lt;p&gt;We can take the model's &lt;code&gt;lm_head&lt;/code&gt;, which is usually only used on the output of the last layer, and apply it to every layer to produce intermediate token predictions. That process produces this table, showing for every fourth layer what the most likely token would be for the next three positions after the prefix (tokens 0, 1, and 2), and what the top 5 most likely predictions for the first position is (token 0 topk 5):&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;layer&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;token 0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;merged&lt;/cell&gt;
        &lt;cell&gt;(topk 5)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;83244'ĠBail'&lt;/cell&gt;
        &lt;cell&gt;15591'ĠHarr'&lt;/cell&gt;
        &lt;cell&gt;5309'Ġvert'&lt;/cell&gt;
        &lt;cell&gt;Bail Harr vert&lt;/cell&gt;
        &lt;cell&gt;['ĠBail', 'ĠPeanut', 'ĠãĢ', 'orr', 'ĠâĢĭâĢĭ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;111484'emez'&lt;/cell&gt;
        &lt;cell&gt;26140'abi'&lt;/cell&gt;
        &lt;cell&gt;25727'avery'&lt;/cell&gt;
        &lt;cell&gt;emezabiavery&lt;/cell&gt;
        &lt;cell&gt;['emez', 'Ġunm', 'ĠOswald', 'Ġrem', 'rix']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;122029'chyb'&lt;/cell&gt;
        &lt;cell&gt;44465'ĠCaps'&lt;/cell&gt;
        &lt;cell&gt;15610'iller'&lt;/cell&gt;
        &lt;cell&gt;chyb Capsiller&lt;/cell&gt;
        &lt;cell&gt;['chyb', 'ĠSund', 'ØªØ±ÛĮ', 'resse', 'Ġsod']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;48952'ĠCliff'&lt;/cell&gt;
        &lt;cell&gt;51965'ĠJackie'&lt;/cell&gt;
        &lt;cell&gt;... Cliff Jackie&lt;/cell&gt;
        &lt;cell&gt;['...', 'ages', 'dump', 'qing', 'Ġexp']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;12676'365'&lt;/cell&gt;
        &lt;cell&gt;31447'ĠAld'&lt;/cell&gt;
        &lt;cell&gt;...365 Ald&lt;/cell&gt;
        &lt;cell&gt;['...', '...Ċ', 'Ġindeed', 'Ġboth', 'ĠYes']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;20&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;109596'éļĨ'&lt;/cell&gt;
        &lt;cell&gt;51965'ĠJackie'&lt;/cell&gt;
        &lt;cell&gt;...隆 Jackie&lt;/cell&gt;
        &lt;cell&gt;['...', '...Ċ', 'Z', 'Ġboth', 'ĠHust']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;24&lt;/cell&gt;
        &lt;cell&gt;12'-'&lt;/cell&gt;
        &lt;cell&gt;31643'ï¸ı'&lt;/cell&gt;
        &lt;cell&gt;287'ing'&lt;/cell&gt;
        &lt;cell&gt;-️ing&lt;/cell&gt;
        &lt;cell&gt;['-', '...', 'âĢ¦', '...Ċ', 'em']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;28&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;96154'ĠGaut'&lt;/cell&gt;
        &lt;cell&gt;51965'ĠJackie'&lt;/cell&gt;
        &lt;cell&gt;... Gaut Jackie&lt;/cell&gt;
        &lt;cell&gt;['...', '-', '...Ċ', '-Ċ', 'Ġ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;96154'ĠGaut'&lt;/cell&gt;
        &lt;cell&gt;6892'Ġing'&lt;/cell&gt;
        &lt;cell&gt;... Gaut ing&lt;/cell&gt;
        &lt;cell&gt;['...', 'âĢ¦', '...Ċ', 'O', 'zer']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;36&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;12'-'&lt;/cell&gt;
        &lt;cell&gt;88'y'&lt;/cell&gt;
        &lt;cell&gt;...-y&lt;/cell&gt;
        &lt;cell&gt;['...', 'âĢ¦', '...Ċ', 'Ġ', 'u']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;31643'ï¸ı'&lt;/cell&gt;
        &lt;cell&gt;88'y'&lt;/cell&gt;
        &lt;cell&gt;...️y&lt;/cell&gt;
        &lt;cell&gt;['...', 'u', 'âĢ¦', 'Âł', '...Ċ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;44&lt;/cell&gt;
        &lt;cell&gt;80435'ĠScor'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;Scor horse horse&lt;/cell&gt;
        &lt;cell&gt;['ĠScor', 'u', 'ĠPan', 'in', 'Ġhttps']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;horse horse horse&lt;/cell&gt;
        &lt;cell&gt;['Ġhorse', 'Âł', 'ĠPan', 'ĠHomes', 'ĠHorse']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;52&lt;/cell&gt;
        &lt;cell&gt;9581'Ġsea'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;sea horse horse&lt;/cell&gt;
        &lt;cell&gt;['Ġsea', 'Ġhorse', 'ĠHorse', 'ĠSea', 'âĢĳ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;56&lt;/cell&gt;
        &lt;cell&gt;9581'Ġsea'&lt;/cell&gt;
        &lt;cell&gt;43269'ĠSeah'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;sea Seah horse&lt;/cell&gt;
        &lt;cell&gt;['Ġsea', 'ĠSea', 'ĠSeah', 'Ġhippoc', 'Ġhorse']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;60&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;horse horse horse&lt;/cell&gt;
        &lt;cell&gt;['Ġhorse', 'Ġsea', 'ĠSeah', 'Ġse', 'horse']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;horse horse horse&lt;/cell&gt;
        &lt;cell&gt;['Ġhorse', 'Ġse', 'ĠHorse', 'horse', 'Ġhors']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;68&lt;/cell&gt;
        &lt;cell&gt;60775'horse'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;15580'Ġhorse'&lt;/cell&gt;
        &lt;cell&gt;horse� horse&lt;/cell&gt;
        &lt;cell&gt;['horse', 'Ġse', 'Ġhorse', 'Ġhippoc', 'ĠSeah']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;72&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;se� se&lt;/cell&gt;
        &lt;cell&gt;['Ġse', 'Ġhippoc', 'horse', 'ĠðŁ', 'Ġhorse']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;76&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;se� se&lt;/cell&gt;
        &lt;cell&gt;['Ġse', 'Ġhippoc', 'hip', 'Ġhorse', 'ĠHipp']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;80&lt;/cell&gt;
        &lt;cell&gt;11410'ĠðŁ'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;254'ł'&lt;/cell&gt;
        &lt;cell&gt;🐠&lt;/cell&gt;
        &lt;cell&gt;['ĠðŁ', 'ðŁ', 'ĠðŁĴ', 'Ġ', 'ĠðŁĳ']&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;This is the logit lens: using the model's &lt;code&gt;lm_head&lt;/code&gt; to produce logits (token likelihoods) as a way to investigate its internal states. Note that the tokens and likelihoods we get from the logit lens here are not equivalent to the model's full internal states! For that, we would need a more complex technique like representation reading or sparse autoencoders. Instead, this is a lens on that state - it shows what the output token would be if this layer were the last one. But despite this limitation, the logit lens is still useful. The states of early layers may be difficult to interpret using it, but as we move up through the stack we can see that the model is iteratively refining those states towards its final prediction, a fish emoji.&lt;/p&gt;
    &lt;p&gt;(Why do the unmerged tokens look like that 'ĠðŁ', 'Ĳ', 'ł' nonsense? It's because of a tokenizer quirk - those tokens encode the UTF-8 bytes for the fish emoji. It's not relevant to this post, but if you're curious, ask Claude or your favorite LLM to explain this paragraph and this line of code: &lt;code&gt;bytes([bpe_byte_decoder[c] for c in 'ĠðŁĲł']).decode('utf-8') == ' 🐠'&lt;/code&gt;)&lt;/p&gt;
    &lt;p&gt;Take a look at what happens in the middle layers, though - it's not the early-layer weirdness or the emoji bytes of the final prediction! Instead we get words relating to useful concepts, specifically the concept of a seahorse. For example, on layer 52, we get "sea horse horse" - three residual positions in a row encoding the "seahorse" concept. Later, in the top-k for the first position, we get a mixture of "sea", "horse", and an emoji byte sequence prefix, "ĠðŁ".&lt;/p&gt;
    &lt;p&gt;So what is the model thinking about? "seahorse + emoji"! It's trying to construct a residual representation of a seahorse combined with an emoji. Why would the model try to construct this combination? Well, let's look into how the &lt;code&gt;lm_head&lt;/code&gt; actually works.&lt;/p&gt;
    &lt;head rend="h2"&gt;
      &lt;code&gt;lm_head&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;A language model's &lt;code&gt;lm_head&lt;/code&gt; is a huge matrix of residual-sized vectors associated with token ids, one for every token in the vocabulary (~300,000). When a residual is passed into it, either after flowing through the model normally or early because someone is using the logit lens on an earlier layer, the &lt;code&gt;lm_head&lt;/code&gt; is going to compare that input residual with each residual-sized vector in that big matrix, and (in coordination with the sampler) select the token id associated with the vector that matrix contains that is most similar to the input residual.&lt;/p&gt;
    &lt;p&gt;(More technically: &lt;code&gt;lm_head&lt;/code&gt; is a linear layer without a bias, so &lt;code&gt;x @ w.T&lt;/code&gt; does dot products with each unembedding vector to produce raw scores. Then your usual log_softmax and argmax/temperature sample.)&lt;/p&gt;
    &lt;p&gt;That means if the model wants to output the word "hello", for example in response to a friendly greeting from the user, it needs to construct a residual as similar as possible to the vector for the "hello" token that the &lt;code&gt;lm_head&lt;/code&gt; can then turn into the hello token id. And using logit lens, we can see that's exactly what happens in response to "Hello :-)":&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;layer&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;token 0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;merged&lt;/cell&gt;
        &lt;cell&gt;(topk 5)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0'!'&lt;/cell&gt;
        &lt;cell&gt;0'!'&lt;/cell&gt;
        &lt;cell&gt;40952'opa'&lt;/cell&gt;
        &lt;cell&gt;!!opa&lt;/cell&gt;
        &lt;cell&gt;['"', '!', '#', '%', '$']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;121495'ÅĻiv'&lt;/cell&gt;
        &lt;cell&gt;16'1'&lt;/cell&gt;
        &lt;cell&gt;73078'iae'&lt;/cell&gt;
        &lt;cell&gt;řiv1iae&lt;/cell&gt;
        &lt;cell&gt;['ÅĻiv', '-', '(', '.', ',']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;34935'Ġconsect'&lt;/cell&gt;
        &lt;cell&gt;7341'arks'&lt;/cell&gt;
        &lt;cell&gt;13118'Ġindeed'&lt;/cell&gt;
        &lt;cell&gt;consectarks indeed&lt;/cell&gt;
        &lt;cell&gt;['Ġobscure', 'Ġconsect', 'äºķ', 'ĠÐ¿ÑĢÐ¾ÑĦÐµÑģÑģÐ¸Ð¾Ð½Ð°Ð»ÑĮ', 'Îŀ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;24&lt;/cell&gt;
        &lt;cell&gt;67846'&amp;lt;['&lt;/cell&gt;
        &lt;cell&gt;24748'Ġhello'&lt;/cell&gt;
        &lt;cell&gt;15960'Ġhi'&lt;/cell&gt;
        &lt;cell&gt;&amp;lt;[ hello hi&lt;/cell&gt;
        &lt;cell&gt;['&amp;lt;[', 'arks', 'outh', 'ĠHam', 'la']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;15825'-back'&lt;/cell&gt;
        &lt;cell&gt;2312'ln'&lt;/cell&gt;
        &lt;cell&gt;14451'UBL'&lt;/cell&gt;
        &lt;cell&gt;-backlnUBL&lt;/cell&gt;
        &lt;cell&gt;['ÂŃi', '-back', 'Ġquestion', 'ln', 'ant']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;15648'Ġsmile'&lt;/cell&gt;
        &lt;cell&gt;14262'Welcome'&lt;/cell&gt;
        &lt;cell&gt;1203'Ġback'&lt;/cell&gt;
        &lt;cell&gt;smileWelcome back&lt;/cell&gt;
        &lt;cell&gt;['Ġsmile', 'ĠÑĥÐ»ÑĭÐ±', 'Ġsmiled', 'ĠSmile', 'etwork']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;15648'Ġsmile'&lt;/cell&gt;
        &lt;cell&gt;21694'ĠHi'&lt;/cell&gt;
        &lt;cell&gt;1203'Ġback'&lt;/cell&gt;
        &lt;cell&gt;smile Hi back&lt;/cell&gt;
        &lt;cell&gt;['Ġsmile', 'Ġsmiled', 'ĠHello', 'Ġsmiling', 'Ġhello']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;56&lt;/cell&gt;
        &lt;cell&gt;22691'ĠHello'&lt;/cell&gt;
        &lt;cell&gt;15960'Ġhi'&lt;/cell&gt;
        &lt;cell&gt;1203'Ġback'&lt;/cell&gt;
        &lt;cell&gt;Hello hi back&lt;/cell&gt;
        &lt;cell&gt;['ĠHello', 'Ġhi', 'Ġsmile', 'Ġhello', 'Hello']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;4773'-sm'&lt;/cell&gt;
        &lt;cell&gt;24748'Ġhello'&lt;/cell&gt;
        &lt;cell&gt;1203'Ġback'&lt;/cell&gt;
        &lt;cell&gt;-sm hello back&lt;/cell&gt;
        &lt;cell&gt;['-sm', 'ĠHello', 'ĠSm', 'sm', 'Hello']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;72&lt;/cell&gt;
        &lt;cell&gt;22691'ĠHello'&lt;/cell&gt;
        &lt;cell&gt;22691'ĠHello'&lt;/cell&gt;
        &lt;cell&gt;1203'Ġback'&lt;/cell&gt;
        &lt;cell&gt;Hello Hello back&lt;/cell&gt;
        &lt;cell&gt;['ĠHello', 'Ġhello', 'Hello', 'ĠHEL', 'Ġhel']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;80&lt;/cell&gt;
        &lt;cell&gt;271'ĊĊ'&lt;/cell&gt;
        &lt;cell&gt;9906'Hello'&lt;/cell&gt;
        &lt;cell&gt;0'!'&lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Hello!&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;['ĊĊ', 'ĊĊĊ', '&amp;lt;|end_of_text|&amp;gt;', 'ĊĊĊĊ', '"ĊĊ']&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;('Ċ' is another tokenizer quirk - it represents a line break. 'Ġ' is similarly a space.)&lt;/p&gt;
    &lt;p&gt;Likewise, if the model wants to output a seahorse emoji, it needs to construct a residual similar to the vector for the seahorse emoji output token(s) - which in theory could be any arbitrary value, but in practice is "seahorse + emoji", word2vec style. We can see this in action with a real emoji, the fish emoji:&lt;/p&gt;
    &lt;code&gt;&amp;lt;|begin_of_text|&amp;gt;&amp;lt;|begin_of_text|&amp;gt;&amp;lt;|start_header_id|&amp;gt;system&amp;lt;|end_header_id|&amp;gt;

Cutting Knowledge Date: December 2023
Today Date: 26 Jul 2024

&amp;lt;|eot_id|&amp;gt;&amp;lt;|start_header_id|&amp;gt;user&amp;lt;|end_header_id|&amp;gt;

Is there a fish emoji?&amp;lt;|eot_id|&amp;gt;&amp;lt;|start_header_id|&amp;gt;assistant&amp;lt;|end_header_id|&amp;gt;

Yes, there is a fish emoji:
&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;layer&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;token 0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;merged&lt;/cell&gt;
        &lt;cell&gt;(topk 5)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;83244'ĠBail'&lt;/cell&gt;
        &lt;cell&gt;15591'ĠHarr'&lt;/cell&gt;
        &lt;cell&gt;5309'Ġvert'&lt;/cell&gt;
        &lt;cell&gt;Bail Harr vert&lt;/cell&gt;
        &lt;cell&gt;['ĠBail', 'ĠPeanut', 'ĠãĢ', 'orr', 'ĠâĢĭâĢĭ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;122029'chyb'&lt;/cell&gt;
        &lt;cell&gt;44465'ĠCaps'&lt;/cell&gt;
        &lt;cell&gt;15610'iller'&lt;/cell&gt;
        &lt;cell&gt;chyb Capsiller&lt;/cell&gt;
        &lt;cell&gt;['chyb', '...', 'ØªØ±ÛĮ', 'ĠSund', 'resse']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;12676'365'&lt;/cell&gt;
        &lt;cell&gt;65615'ĠSole'&lt;/cell&gt;
        &lt;cell&gt;...365 Sole&lt;/cell&gt;
        &lt;cell&gt;['...', '...Ċ', 'Ġboth', 'Ġindeed', 'ĠYes']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;24&lt;/cell&gt;
        &lt;cell&gt;12'-'&lt;/cell&gt;
        &lt;cell&gt;31643'ï¸ı'&lt;/cell&gt;
        &lt;cell&gt;51965'ĠJackie'&lt;/cell&gt;
        &lt;cell&gt;-️ Jackie&lt;/cell&gt;
        &lt;cell&gt;['-', '...', 'âĢ¦', 'em', '...Ċ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;1131'...'&lt;/cell&gt;
        &lt;cell&gt;96154'ĠGaut'&lt;/cell&gt;
        &lt;cell&gt;88'y'&lt;/cell&gt;
        &lt;cell&gt;... Gauty&lt;/cell&gt;
        &lt;cell&gt;['...', 'âĢ¦', '...Ċ', 'O', 'u']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;220'Ġ'&lt;/cell&gt;
        &lt;cell&gt;6"'"&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;'fish&lt;/cell&gt;
        &lt;cell&gt;['Ġ', '...', 'âĢ¦', 'Âł', 'u']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;48&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;fish fish fish&lt;/cell&gt;
        &lt;cell&gt;['Ġfish', 'ĠFish', 'ĠBerk', 'âĢ¦', 'Âł']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;56&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;fish fish fish&lt;/cell&gt;
        &lt;cell&gt;['Ġfish', 'ĠFish', 'fish', 'Fish', 'é±¼']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;64&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;fish� fish&lt;/cell&gt;
        &lt;cell&gt;['Ġfish', 'ĠFish', 'ĠPis', 'Fish', 'ĠÙħØ§Ùĩ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;72&lt;/cell&gt;
        &lt;cell&gt;7795'Ġfish'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;253'Ł'&lt;/cell&gt;
        &lt;cell&gt;fish��&lt;/cell&gt;
        &lt;cell&gt;['Ġfish', 'ĠFish', 'ĠðŁ', 'Ġ', 'ÂŁ']&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;80&lt;/cell&gt;
        &lt;cell&gt;11410'ĠðŁ'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;253'Ł'&lt;/cell&gt;
        &lt;cell&gt;🐟&lt;/cell&gt;
        &lt;cell&gt;['ĠðŁ', 'ðŁ', 'Ġ', 'ĠĊĊ', 'ĠâĻ']&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Here, everything works perfectly. The model constructs the "fish + emoji" residual - look at the layer 72 topk, where we have both "fish" and the emoji byte prefix "ĠðŁ" - meaning that the residual at this point is similar to both "fish" and "emoji", just like we'd expect. Then when this vector is passed into the &lt;code&gt;lm_head&lt;/code&gt; after the final layer, we see a 🐟 just as the model expected.&lt;/p&gt;
    &lt;p&gt;But unlike with 🐟, the seahorse emoji doesn't exist. The model tries to construct a "seahorse + emoji" vector just as it would for a real emoji, and on layer 72 we even get a very similar construction as with the fish emoji - " se", "horse", and the emoji prefix byte prefix:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;layer&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;tokens&lt;/cell&gt;
        &lt;cell role="head"&gt;token 0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;merged&lt;/cell&gt;
        &lt;cell&gt;(topk 5)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;72&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;238'Ĳ'&lt;/cell&gt;
        &lt;cell&gt;513'Ġse'&lt;/cell&gt;
        &lt;cell&gt;se� se&lt;/cell&gt;
        &lt;cell&gt;['Ġse', 'Ġhippoc', 'horse', 'ĠðŁ', 'Ġhorse']&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;But alas, there's no continuation to ĠðŁ corresponding to a seahorse, so the &lt;code&gt;lm_head&lt;/code&gt; similarity score calculation maxes out with horse- or sea-animal-related emoji bytes instead, and an unintended emoji is sampled.&lt;/p&gt;
    &lt;p&gt;Now, that sampling is valuable information for the model! You can see that in, e.g. the Claude 4.5 Sonnet example below, when the tokens get appended into the context autoregressively, the model can tell that they don't form the intended seahorse emoji. The previous, fuzzy "seahorse + emoji" concept has been "snapped" by the &lt;code&gt;lm_head&lt;/code&gt; to an emoji that actually exists, like a tropical fish or horse.&lt;/p&gt;
    &lt;p&gt;Once this happens, it's up to the model how to proceed. Some models like 4.5 Sonnet try again, and eventually update on the evidence, changing mid-response to a statement about how the seahorse emoji doesn't exist. Other models like gpt-5-chat spiral for longer, sometimes never recovering. Other models will either blissfully ignore that the emoji is incorrect, and some will even correct themselves instantly after seeing only a single incorrect sample.&lt;/p&gt;
    &lt;p&gt;But until the model gets the wrong output token from &lt;code&gt;lm_head&lt;/code&gt;, it just doesn't know that its initial belief about a seahorse emoji existing was wrong. It can only assume that "seahorse + emoji" will produce the tokens it wants.&lt;/p&gt;
    &lt;head rend="h2"&gt;Some speculation&lt;/head&gt;
    &lt;p&gt;To speculate a bit more, I wonder if this problem is part of the benefit of reinforcement learning for LLMs - it gives the model information about its &lt;code&gt;lm_head&lt;/code&gt; that's otherwise difficult for it to get at because it's at the end of the layer stack.&lt;/p&gt;
    &lt;p&gt;(Remember that base models are not trained on their own outputs / rollouts. That only happens in RL.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Code&lt;/head&gt;
    &lt;p&gt;If you want to try this yourself, you can find a starter script on Github here: https://gist.github.com/vgel/025ad6af9ac7f3bc194966b03ea68606&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://vgel.me/posts/seahorse/"/><published>2025-10-06T02:20:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45487247</id><title>Building Effective Text-to-3D AI Agents: A Hybrid Architecture Approach</title><updated>2025-10-06T05:10:21.706652+00:00</updated><content>&lt;doc fingerprint="9c97c758ed1890ab"&gt;
  &lt;main&gt;
    &lt;p&gt;As promised, let's deep dive into the learnings from my text-to-3D agent project. The goal was to go beyond simple shapes and see if an AI agent could generate complex 3D models using Blender's Python API.&lt;/p&gt;
    &lt;p&gt;The short answer: yes, but the architecture is everything.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Core Challenge: Reasoning vs. Syntax&lt;/head&gt;
    &lt;p&gt;Most LLMs can write a simple Blender script for a cube. But a "low poly city block"? That requires planning, iteration, and self-correctionâtasks that push models to their limits. This isn't just a coding problem; it's a reasoning problem.&lt;/p&gt;
    &lt;head rend="h2"&gt;My Approach: A Hybrid Agent Architecture ð§&lt;/head&gt;
    &lt;p&gt;I hypothesized that no single model could do it all. So, I designed a hybrid system that splits the work:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A "Thinker" LLM (SOTA models): Responsible for high-level reasoning, planning the steps, and generating initial code.&lt;/item&gt;
      &lt;item&gt;A "Doer" LLM (Specialized Coder models): Responsible for refining, debugging, and ensuring syntactical correctness of the code.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I tested three architectures on tasks of varying difficulty:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Homogeneous SOTA: A large model doing everything.&lt;/item&gt;
      &lt;item&gt;Homogeneous Small: A small coder model doing everything.&lt;/item&gt;
      &lt;item&gt;Hybrid: The "Thinker" + "Doer" approach.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;The Results: 3 Key Takeaways ð&lt;/head&gt;
    &lt;p&gt;The data from the experiments was incredibly clear.&lt;/p&gt;
    &lt;head rend="h3"&gt;1. The Hybrid Model is the Undisputed Winner&lt;/head&gt;
    &lt;p&gt;Pairing a powerful reasoning LLM with a specialized coder LLM was significantly more efficient (fewer iterations) and reliable than using a single SOTA model for everything.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Homogeneous Small Models are a Trap ð¥&lt;/head&gt;
    &lt;p&gt;Using only a small coder model for both reasoning and syntax was a recipe for disaster. This architecture failed 100% of the time, often getting stuck in infinite "tool loops" and never completing the task.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. Memory Had an Unexpected Impact. ð§&lt;/head&gt;
    &lt;p&gt;Contrary to my initial hypothesis, adding a memory module in this setup actually increased the average number of iterations. This suggests that the current memory implementation might be introducing overhead or causing the agent to over-index on past actions rather than improving efficiency. Interesting problem that needs more investigation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Qualitative Insights: How the Models Behaved&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Model Quality: For visual appeal and creativity, the SOTA models were unmatched. Gemini and Claude produced the most impressive geometry.&lt;/item&gt;
      &lt;item&gt;Tool Looping: Qwen had the highest tendency to get stuck in loops, making it unreliable as a standalone agent.&lt;/item&gt;
      &lt;item&gt;Context Issues: GLM performed reasonably well but struggled to maintain structured output with a long context history.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Implementation Considerations&lt;/head&gt;
    &lt;p&gt;When building your own hybrid agent architecture, consider these factors:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Task Decomposition: Clearly separate reasoning tasks from execution tasks&lt;/item&gt;
      &lt;item&gt;Model Selection: Choose models that excel in their specific domain (reasoning vs. code generation)&lt;/item&gt;
      &lt;item&gt;Error Handling: Build robust loops detection and recovery mechanisms&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;ð¼ï¸ The Big Picture&lt;/head&gt;
    &lt;p&gt;Building effective AI agents isn't about finding one "god-tier" model. It's about smart architecture. By composing specialized models and giving them memory, we can create agents that are far more capable than the sum of their parts.&lt;/p&gt;
    &lt;p&gt;This unlocks a new wave of gen AI tools for complex creative work. The future of AI agents lies not in bigger models, but in better orchestration of specialized models working together.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.addy.rocks/blog/text-to-3d-agent-hybrid-architecture"/><published>2025-10-06T02:57:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45487452</id><title>Find Nearby Automated License Plate Readers (ALPR)</title><updated>2025-10-06T05:10:21.550287+00:00</updated><content/><link href="https://deflock.me/"/><published>2025-10-06T03:42:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45487476</id><title>Celebrating 1 Trillion Web Pages Archived</title><updated>2025-10-06T05:10:20.625289+00:00</updated><content>&lt;doc fingerprint="1a1cb085e3f4f429"&gt;
  &lt;main&gt;
    &lt;head rend="h3"&gt;This October, the Internet Archive will celebrate an extraordinary milestone: 1 trillion web pages preserved and available for access via the Wayback Machine.&lt;/head&gt;
    &lt;p&gt;Calendar of Events | Impact Stories | Support the Internet Archive | Press Kit&lt;/p&gt;
    &lt;p&gt;Since 1996, the Internet Archive has worked with libraries and partners around the world to build a shared digital library of humanity’s online history: capturing websites large and small—from breaking news to forgotten personal pages—so they remain accessible for future generations.&lt;/p&gt;
    &lt;p&gt;The series of events scheduled throughout October will highlight the memories, makers, and movements that have made this achievement possible, and will look ahead to the future of web preservation as we continue building the web’s collective memory together.&lt;/p&gt;
    &lt;head rend="h1"&gt;Calendar of Events&lt;/head&gt;
    &lt;head rend="h2"&gt;October 7—The Vast Blue We: Del Sol Quartet at the Internet Archive&lt;/head&gt;
    &lt;p&gt;7:00-8:15pm PT&lt;lb/&gt;Internet Archive&lt;lb/&gt;300 Funston Avenue, San Francisco &amp;amp; ONLINE&lt;lb/&gt;Register now for IN-PERSON or VIRTUAL tickets&lt;/p&gt;
    &lt;p&gt;An evening to celebrate human collaboration—how billions of individual actions weave together into something vast and beautiful. Through music of Del Sol Quartet with new works by Erika Oba and Sam Reider, we mark the staggering scale of one trillion archived web pages available via the Wayback Machine. Join us for an interactive evening of live music reflecting the wonder of what we can achieve together and the power of our own voices.&lt;/p&gt;
    &lt;head rend="h2"&gt;October 9—A Conversation with Sir Tim Berners-Lee and Brewster Kahle&lt;/head&gt;
    &lt;p&gt;Building and Preserving the Web: A Conversation with Sir Tim Berners-Lee and Brewster Kahle&lt;lb/&gt;7:30pm PT&lt;lb/&gt;The Commonwealth Club of California&lt;lb/&gt;110 The Embarcadero, San Francisco &amp;amp; ONLINE&lt;lb/&gt;Register now for IN-PERSON or VIRTUAL tickets&lt;/p&gt;
    &lt;p&gt;Sir Tim Berners-Lee and Brewster Kahle will be in conversation about the rise of the internet, its continuing and explosive impact on society, the importance of the Internet Archive and other developing issues in the growth and use of the internet.&lt;/p&gt;
    &lt;head rend="h2"&gt;October 16—Library Leaders Forum 2025 (VIRTUAL)&lt;/head&gt;
    &lt;p&gt;10:00-11:30am PT&lt;lb/&gt;ONLINE&lt;lb/&gt;Register now for VIRTUAL tickets&lt;/p&gt;
    &lt;p&gt;In our virtual Library Leaders Forum, you’ll hear from Internet Archive staff and partners about our emerging library services and updates on existing efforts. How do libraries empower research in the 21st century? Join in our discussion!&lt;/p&gt;
    &lt;head rend="h2"&gt;October 21—Doors Open 2025: Go Behind the Scenes at the Physical Archive&lt;/head&gt;
    &lt;p&gt;6:00-8:00pm PT&lt;lb/&gt;Richmond, California&lt;lb/&gt;Register now for IN-PERSON tickets&lt;/p&gt;
    &lt;p&gt;The Internet Archive is excited to offer a behind-the-scenes tour of the physical collections of books, music, film, and video in Richmond, California.&lt;/p&gt;
    &lt;p&gt;With this special insider event we are opening the doors to an often unseen place. See the lifecycle of physical materials: donation, preservation, digitization, and access. Also, samples from generous donations and acquisitions of books, records, microfiche, and more will be on display.&lt;/p&gt;
    &lt;head rend="h2"&gt;October 22—The Web We’ve Built: Celebrating 1 Trillion Web Pages Archived&lt;/head&gt;
    &lt;p&gt;5:00-10:00pm PT&lt;lb/&gt;7:00-8:00pm PT Live Stream&lt;lb/&gt;Internet Archive&lt;lb/&gt;300 Funston Ave, San Francisco&lt;lb/&gt;Register now for IN-PERSON or VIRTUAL tickets&lt;/p&gt;
    &lt;p&gt;This October, the Internet Archive’s Wayback Machine is projected to hit a once-in-a-generation milestone: 1 trillion web pages archived. That’s one trillion memories, moments, and movements—preserved for the public and available to access via the Wayback Machine.&lt;/p&gt;
    &lt;p&gt;We’ll be commemorating this historic achievement on October 22, 2025, with a global event: a party at our San Francisco headquarters and a livestream for friends and supporters around the world. More than a celebration, it’s a tribute to what we’ve built together: a free and open digital library of the web.&lt;/p&gt;
    &lt;p&gt;Join us in marking this incredible milestone. Together, we’ve built the largest archive of web history ever assembled. Let’s celebrate this achievement—in San Francisco and around the world—on October 22.&lt;/p&gt;
    &lt;head rend="h2"&gt;October 27—Wayback to the Future: Celebrating the Open Web&lt;/head&gt;
    &lt;p&gt;5:00-8:00pm PT&lt;lb/&gt;Riggs Library, Georgetown University&lt;lb/&gt;Healy Hall, Library Walk, Washington, DC 20057&lt;lb/&gt;Register now for IN-PERSON tickets&lt;/p&gt;
    &lt;p&gt;Join the Foundation for American Innovation, the Massive Data Institute and the Internet Archive at Georgetown University’s historic Riggs Library for Wayback to the Future: Celebrating the Open Web—Past, Present, and Possible.&lt;/p&gt;
    &lt;p&gt;The open web was once defined by experimentation, decentralization, and possibility. The technological advancements were driven by the desire for a place where new voices and ideas could flourish. Today, consolidation and walled gardens challenge that vision. Together, we’ll look back at the internet’s origins to spark a forward-looking conversation about how to keep the web free, open, and innovative.&lt;/p&gt;
    &lt;p&gt;Speakers include:&lt;/p&gt;
    &lt;p&gt;Moderator: Luke Hogg — Director of Technology Policy, FAI&lt;lb/&gt;Brewster Kahle — Founder &amp;amp; Director, Internet Archive&lt;lb/&gt;Vint Cerf — Chief Internet Evangelist, Google&lt;lb/&gt;Cindy Cohn — Executive Director, Electronic Frontier Foundation&lt;lb/&gt;Jon Stokes – Co-founder, Ars Technica &lt;/p&gt;
    &lt;head rend="h1"&gt;Impact Stories&lt;/head&gt;
    &lt;p&gt;The 1 trillion archived webpages are more than just numbers—they represent real impact on people’s lives, research, and memory. From immigration cases to personal histories, academic research to investigative journalism, the Wayback Machine has become an essential public resource that preserves the web for all.&lt;/p&gt;
    &lt;p&gt;Canadian musician David Samuel relied on archived concert programs in the Wayback Machine to secure U.S. residency.&lt;/p&gt;
    &lt;p&gt;Paul Lindner built a digital memorial to his late wife by recovering her online presence.&lt;/p&gt;
    &lt;p&gt;Researchers at King’s College London use web archives to track the evolution of fake news and open data.&lt;/p&gt;
    &lt;p&gt;Investigative trainers call the Wayback Machine “a precious tool” for exposing deleted evidence.&lt;/p&gt;
    &lt;head rend="h1"&gt;Share Your Story&lt;/head&gt;
    &lt;p&gt;What does the web mean to you? How has the Wayback Machine helped you remember, research, or recover something important? Share your story.&lt;/p&gt;
    &lt;head rend="h1"&gt;Support the Internet Archive&lt;/head&gt;
    &lt;p&gt;Help us continue preserving the web for generations to come. Donate today!&lt;/p&gt;
    &lt;head rend="h1"&gt;Press Kit&lt;/head&gt;
    &lt;p&gt;Interested in producing a story about the 1 trillion milestone? Our online press kit includes impact stories from users, facts &amp;amp; figures about the Internet Archive &amp;amp; Wayback Machine, and Then/Now screenshots of popular web sites. Contact info is available in the press kit.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.archive.org/trillion/"/><published>2025-10-06T03:48:34+00:00</published></entry></feed>