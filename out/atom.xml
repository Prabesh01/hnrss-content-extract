<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-26T22:09:11.284109+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45701980</id><title>Why your social.org files can have millions of lines without performance issues</title><updated>2025-10-26T22:09:24.544133+00:00</updated><content>&lt;doc fingerprint="faca1727e6aa4c7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why your social.org files can have millions of lines without any performance issues&lt;/head&gt;
    &lt;p&gt;As Org Social grows, users follow more feeds, and individual &lt;code&gt;social.org&lt;/code&gt; files accumulate hundreds of posts over time. Traditional approaches that download entire feeds sequentially create two major bottlenecks:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Bandwidth waste: Downloading complete files when users only need recent posts&lt;/item&gt;
      &lt;item&gt;Time inefficiency: Sequential downloads that block the user interface&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This article explores how Org-social.el 2.3+ (Official client) solves both problems with a sophisticated combination of concurrent queue processing and HTTP Range-based partial fetching while maintaining complete compatibility with all servers.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Challenge&lt;/head&gt;
    &lt;quote&gt;flowchart TB A[User Opens Timeline] --&amp;gt; B[20 Feeds to Download] B --&amp;gt; C[Traditional Approach: Sequential Downloads] C --&amp;gt; D[Feed 1: 27KB 150 posts] D --&amp;gt; E[Feed 2: 15KB 80 posts] E --&amp;gt; F[Feed 3: 12KB 60 posts] F --&amp;gt; G[... 17 more feeds] G --&amp;gt; H[Total: ~300KB and ~1500 posts] H --&amp;gt; I[Filter to last 14 days] I --&amp;gt; J[Actually needed: ~10 posts=first page] style C fill:#ffcccc,color:black style H fill:#ffcccc,color:black style J fill:#ccffcc,color:black&lt;/quote&gt;
    &lt;p&gt;Downloading 300KB and processing 1500 posts to get 10 posts... It is not good!&lt;/p&gt;
    &lt;head rend="h2"&gt;Optimization&lt;/head&gt;
    &lt;p&gt;Org-social.el implements a sophisticated three-layer approach:&lt;/p&gt;
    &lt;head rend="h3"&gt;Layer 1: Concurrent Queue Processing&lt;/head&gt;
    &lt;p&gt;A process queue is a data structure that manages tasks to be executed. In Org Social, each feed to download is added to the queue as a pending task. The system then processes these tasks concurrently (multiple at the same time) using a worker pool—a limited number of threads that execute downloads in parallel.&lt;/p&gt;
    &lt;p&gt;This smart queue system manages parallel downloads without overwhelming system resources.&lt;/p&gt;
    &lt;quote&gt;flowchart LR A[Feed Queue] --&amp;gt; B[Worker Pool Max 20 concurrent] B --&amp;gt; C[Worker 1 Feed A] B --&amp;gt; D[Worker 2 Feed B] B --&amp;gt; E[Worker 3 Feed C] B --&amp;gt; F[...] B --&amp;gt; G[Worker 20 Feed T] C --&amp;gt; H{Done?} D --&amp;gt; H E --&amp;gt; H G --&amp;gt; H H --&amp;gt;|Yes| I[Process Next Pending Feed] H --&amp;gt;|Error| J[Mark Failed, Continue] I --&amp;gt; B J --&amp;gt; I style B fill:#e1f5ff,color:black style H fill:#fff4e1,color:black style I fill:#ccffcc,color:black&lt;/quote&gt;
    &lt;p&gt;Key Features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Configurable concurrency: &lt;code&gt;org-social-max-concurrent-downloads&lt;/code&gt;(default: 20)&lt;/item&gt;
      &lt;item&gt;Non-blocking threads: Each download runs in a separate thread&lt;/item&gt;
      &lt;item&gt;Automatic recovery: Failed downloads don't block the queue&lt;/item&gt;
      &lt;item&gt;Smart scheduling: New downloads start immediately when slots free up&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Layer 2: HTTP Range-Based Partial Fetching&lt;/head&gt;
    &lt;p&gt;HTTP has a built-in feature that allows downloading only specific parts of a file using the &lt;code&gt;Range&lt;/code&gt; header. When a client sends a request with &lt;code&gt;Range: bytes=0-999&lt;/code&gt;, the server responds with just the first 1000 bytes of the file instead of the entire content. This capability is commonly used for video streaming and resumable downloads, but it can also be used to paginate files—downloading them in chunks rather than all at once.&lt;/p&gt;
    &lt;p&gt;Instead of downloading entire &lt;code&gt;social.org&lt;/code&gt; files, Org Social uses HTTP Range requests to fetch only what's needed: the header section and recent posts.&lt;/p&gt;
    &lt;p&gt;This system is not compatible with all providers. While most traditional web servers (Apache, Nginx, Caddy) support HTTP Range requests natively, some hosting platforms have limitations:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Cloudflare CDN: Does not provide&lt;/p&gt;&lt;code&gt;Content-Length&lt;/code&gt;or&lt;code&gt;Content-Range&lt;/code&gt;headers, making it impossible to determine file size or download specific byte ranges. The system automatically falls back to downloading the complete file and filtering client-side.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Codeberg.org: Implements aggressive rate limiting when multiple Range requests are made in quick succession. When HTTP 429 (Too Many Requests) is detected, the system falls back to a full download without filtering to avoid being blocked.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;GitHub Raw Content: Provides proper HTTP Range support and works optimally with partial downloads.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The system detects these limitations automatically and adapts its strategy to ensure 100% compatibility across all hosting platforms.&lt;/p&gt;
    &lt;quote&gt;sequenceDiagram participant C as Client participant S as Server participant F as social.org (27KB, 150 posts) Note over C,F: Step 1: Find Header C-&amp;gt;&amp;gt;S: Range: bytes=0-999 S-&amp;gt;&amp;gt;C: First 1KB (headers) Note over C: Found "* Posts" at byte 800 Note over C,F: Step 2: Get File Size C-&amp;gt;&amp;gt;S: Range: bytes=0-0 S-&amp;gt;&amp;gt;C: Content-Range: bytes 0-0/27656 Note over C: Total size: 27656 bytes Note over C,F: Step 3: Fetch Recent Posts C-&amp;gt;&amp;gt;S: Range: bytes=26656-27655 S-&amp;gt;&amp;gt;C: Last 1KB (recent posts) C-&amp;gt;&amp;gt;S: Range: bytes=25656-26655 S-&amp;gt;&amp;gt;C: Previous 1KB Note over C: Found post older than 14 days Note over C,F: Result: Downloaded 3KB instead of 27KB&lt;/quote&gt;
    &lt;p&gt;Algorithm:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Header Discovery (bytes 0 → forwards)&lt;/item&gt;
      &lt;item&gt;Download the first 1KB chunk (bytes 0-999)&lt;/item&gt;
      &lt;item&gt;If &lt;code&gt;* Posts&lt;/code&gt;is not found, download the next 1KB chunk (bytes 1000-1999)&lt;/item&gt;
      &lt;item&gt;Continue downloading subsequent chunks until &lt;code&gt;* Posts&lt;/code&gt;is found&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Typical header size: 500-1500 bytes&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Backward Post Fetching (end → backwards)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;Start from the end of the file (most recent posts)&lt;/item&gt;
      &lt;item&gt;Download 1KB chunks moving backwards&lt;/item&gt;
      &lt;item&gt;Parse each post's &lt;code&gt;:ID:&lt;/code&gt;property (e.g.,&lt;code&gt;:ID: 2025-10-24T10:00:00+0200&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Stop when reaching posts older than&lt;/p&gt;&lt;code&gt;org-social-max-post-age-days&lt;/code&gt;(default: 14 days)&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Date Filtering&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;Parse post IDs (RFC 3339 timestamps)&lt;/item&gt;
      &lt;item&gt;Keep only posts ≥ start date&lt;/item&gt;
      &lt;item&gt;Discard older posts without downloading&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Trick for Range Support Detection&lt;/head&gt;
    &lt;p&gt;The system sends a test request with the &lt;code&gt;Range: bytes=0-0&lt;/code&gt; header to check if the server responds with &lt;code&gt;Content-Range&lt;/code&gt; or &lt;code&gt;Accept-Ranges: bytes&lt;/code&gt; headers, indicating Range support.&lt;/p&gt;
    &lt;head rend="h3"&gt;Edge Cases and Fallbacks: Compressed Content&lt;/head&gt;
    &lt;p&gt;Servers using gzip compression (e.g., Caddy) report compressed sizes:&lt;/p&gt;
    &lt;p&gt;Problem: HEAD request returns compressed size, but content arrives uncompressed&lt;/p&gt;
    &lt;p&gt;Solution: Use a Range request (&lt;code&gt;bytes=0-0&lt;/code&gt;) for size detection instead. The server responds with &lt;code&gt;Content-Range: bytes 0-0/TOTAL&lt;/code&gt; where TOTAL is the actual uncompressed file size.&lt;/p&gt;
    &lt;head rend="h3"&gt;Layer 3: UI Pagination&lt;/head&gt;
    &lt;p&gt;Even after downloading only recent posts, rendering all of them at once would overwhelm Emacs. The Org Social UI uses widgets to create an interactive interface with buttons, images, and formatted text. Each widget consumes memory and processing power.&lt;/p&gt;
    &lt;p&gt;To keep the interface responsive, the system implements pagination that displays only 10 posts per page. This means:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;When a user opens the timeline, only the first 10 most recent posts are rendered&lt;/item&gt;
      &lt;item&gt;Images, avatars, and interactive widgets are created only for these 10 visible posts&lt;/item&gt;
      &lt;item&gt;The remaining downloaded posts stay in memory but aren't rendered&lt;/item&gt;
      &lt;item&gt;Users can navigate to the next page, which then renders the next 10 posts&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;flowchart LR A[Downloaded Posts: 50] --&amp;gt; B[Page 1: Render 10 posts] A --&amp;gt; C[Page 2: 10 posts in memory] A --&amp;gt; D[Page 3: 10 posts in memory] A --&amp;gt; E[Page 4: 10 posts in memory] A --&amp;gt; F[Page 5: 10 posts in memory] B --&amp;gt; G[User sees: 10 posts with widgets &amp;amp; images] C -.-&amp;gt;|User clicks Next| H[Render next 10 posts] style A fill:#e1f5ff,color:black style B fill:#ccffcc,color:black style G fill:#d5ffe1,color:black style H fill:#ffe1cc,color:black&lt;/quote&gt;
    &lt;p&gt;Emacs widgets and image rendering are resource-intensive. Rendering 50 posts with avatars and buttons could slow down the editor. By rendering only 10 at a time, the UI stays fast and responsive regardless of how many posts were downloaded.&lt;/p&gt;
    &lt;p&gt;This is the final optimization layer: even if your &lt;code&gt;social.org&lt;/code&gt; has 10,000 posts, and you download 50 recent ones, you only render 10 on screen. The rest wait in memory until needed.&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance Benchmarks&lt;/head&gt;
    &lt;p&gt;The following table shows how the system scales with different feed sizes, assuming an average post size of 250 bytes and a 14-day filter (capturing approximately 20-30 recent posts):&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Scenario&lt;/cell&gt;
        &lt;cell role="head"&gt;Total Posts&lt;/cell&gt;
        &lt;cell role="head"&gt;Full File Size&lt;/cell&gt;
        &lt;cell role="head"&gt;With Partial Fetch (14 days)&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Empty feed&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;~1 KB&lt;/cell&gt;
        &lt;cell&gt;~1 KB&lt;/cell&gt;
        &lt;cell&gt;Only headers downloaded&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;New user&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;~1.5 KB&lt;/cell&gt;
        &lt;cell&gt;~1.5 KB&lt;/cell&gt;
        &lt;cell&gt;Single post, no optimization needed&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Light user&lt;/cell&gt;
        &lt;cell&gt;10&lt;/cell&gt;
        &lt;cell&gt;~3.5 KB&lt;/cell&gt;
        &lt;cell&gt;~3.5 KB&lt;/cell&gt;
        &lt;cell&gt;All posts fit in 14-day window&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Regular user&lt;/cell&gt;
        &lt;cell&gt;100&lt;/cell&gt;
        &lt;cell&gt;~26 KB&lt;/cell&gt;
        &lt;cell&gt;~8 KB&lt;/cell&gt;
        &lt;cell&gt;Headers + ~30 recent posts&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Active user&lt;/cell&gt;
        &lt;cell&gt;1,000&lt;/cell&gt;
        &lt;cell&gt;~250 KB&lt;/cell&gt;
        &lt;cell&gt;~8 KB&lt;/cell&gt;
        &lt;cell&gt;Headers + ~30 recent posts&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Power user&lt;/cell&gt;
        &lt;cell&gt;10,000&lt;/cell&gt;
        &lt;cell&gt;~2.5 MB&lt;/cell&gt;
        &lt;cell&gt;~8 KB&lt;/cell&gt;
        &lt;cell&gt;Headers + ~30 recent posts&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Key insight: Once a feed exceeds ~100 posts, partial fetching maintains consistent download sizes (~8 KB) regardless of total feed size. A feed with 10,000 posts downloads the same amount of data as one with 1,000 posts.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tuning Recommendations&lt;/head&gt;
    &lt;p&gt;Users can customize two main parameters:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;org-social-max-concurrent-downloads&lt;/code&gt;: Maximum parallel downloads (default: 20)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;org-social-max-post-age-days&lt;/code&gt;: Maximum age of posts to fetch in days (default: 14)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So...&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fast connection + many feeds: Increase to 30 concurrent&lt;/item&gt;
      &lt;item&gt;Slow connection: Decrease to 10 concurrent&lt;/item&gt;
      &lt;item&gt;Large feeds + limited bandwidth: Decrease &lt;code&gt;max-post-age-days&lt;/code&gt;to 7&lt;/item&gt;
      &lt;item&gt;Small feeds: Set &lt;code&gt;max-post-age-days&lt;/code&gt;to nil (no optimization needed)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;The three-layer optimization approach (concurrent queue processing, HTTP Range-based partial fetching, and UI pagination) provides a significant bandwidth optimization on large feeds with date filtering and non-blocking UI. This architecture positions Org Social to scale efficiently as both individual feeds and follower counts grow, while maintaining the simplicity and decentralization that make Org Social unique.&lt;/p&gt;
    &lt;p&gt;Your &lt;code&gt;social.org&lt;/code&gt; can have millions of lines because:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Only recent posts are downloaded (14 days by default)&lt;/item&gt;
      &lt;item&gt;Downloads happen in parallel without blocking&lt;/item&gt;
      &lt;item&gt;Only 10 posts are rendered on screen at once&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Enjoy it!&lt;/p&gt;
    &lt;head rend="h2"&gt;Technical References&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HTTP Range Requests: RFC 7233&lt;/item&gt;
      &lt;item&gt;RFC 3339 Timestamps: RFC 3339&lt;/item&gt;
      &lt;item&gt;Org Social Specification: github.com/tanrax/org-social&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Challenge&lt;/item&gt;
      &lt;item&gt;Optimization&lt;/item&gt;
      &lt;item&gt;Layer 1: Concurrent Queue Processing&lt;/item&gt;
      &lt;item&gt;Layer 2: HTTP Range-Based Partial Fetching&lt;/item&gt;
      &lt;item&gt;Trick for Range Support Detection&lt;/item&gt;
      &lt;item&gt;Edge Cases and Fallbacks: Compressed Content&lt;/item&gt;
      &lt;item&gt;Layer 3: UI Pagination&lt;/item&gt;
      &lt;item&gt;Performance Benchmarks&lt;/item&gt;
      &lt;item&gt;Tuning Recommendations&lt;/item&gt;
      &lt;item&gt;Conclusion&lt;/item&gt;
      &lt;item&gt;Technical References&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This work is under a Attribution-NonCommercial-NoDerivatives 4.0 International license.&lt;/p&gt;
    &lt;head rend="h2"&gt;Will you buy me a coffee?&lt;/head&gt;
    &lt;p&gt;You can use the terminal.&lt;/p&gt;
    &lt;quote&gt;ssh customer@andros.dev -p 5555&lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://en.andros.dev/blog/4e12225f/why-your-socialorg-files-can-have-millions-of-lines-without-any-performance-issues/"/><published>2025-10-25T07:27:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45706380</id><title>The Journey Before main()</title><updated>2025-10-26T22:09:24.180842+00:00</updated><content>&lt;doc fingerprint="1b83387346253ad5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;&amp;gt; The Journey Before main()_&lt;/head&gt;
    &lt;p&gt;October 25, 2025 · Amit Prasad&lt;/p&gt;
    &lt;p&gt;A while back, I worked on a RISC-V-based userspace simulator for fun. In doing so, taught myself a lot more than I wanted to know about what happens in-between when the Kernel is asked to run a program, and when the first line of our program’s &lt;code&gt;main&lt;/code&gt; function is actually executed. Here’s a summary of that rabbit hole.&lt;/p&gt;
    &lt;head rend="h2"&gt;In the beginning…&lt;/head&gt;
    &lt;p&gt;First question: When is the OS kernel actually asked to run any program? The answer, at least on Linux, is the &lt;code&gt;execve&lt;/code&gt; system call (“syscall”). Let’s take a quick look at that:&lt;/p&gt;
    &lt;code&gt;int execve(const char *filename, char *const argv[], char *const envp[]);&lt;/code&gt;
    &lt;p&gt;This is actually quite straightforward! We pass the name of the exectuable file, a list of arguments, and a list of environment variables. This signals to the kernel where, and how, to start loading the program.&lt;/p&gt;
    &lt;p&gt;Many programming languages provide an interface to execute commands that eventually call &lt;code&gt;execve&lt;/code&gt; under the hood. For example, in Rust, we have:&lt;/p&gt;
    &lt;code&gt;use std::process::Command;

Command::new("ls").arg("-l").spawn();&lt;/code&gt;
    &lt;p&gt;In these higher-level wrappers, the language’s standard library often handles translation of the command name to a full path, acting similarly to how a shell would resolve the command via the &lt;code&gt;PATH&lt;/code&gt; environment variable. The kernel itself, however, expects a proper path to an executable file.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;A note on interpreters: If the executable file starts with a shebang (&lt;/p&gt;&lt;code&gt;#!&lt;/code&gt;), the kernel will use the shebang-specified interpreter to run the program. For example,&lt;code&gt;#!/usr/bin/python3&lt;/code&gt;will run the program using the Python interpreter,&lt;code&gt;#!/bin/bash&lt;/code&gt;will run the program using the Bash shell, etc.&lt;/quote&gt;
    &lt;head rend="h2"&gt;ELF&lt;/head&gt;
    &lt;p&gt;What does an executable file look like? On Linux, it’s ELF, which the kernel knows how to parse. Other operating systems have different formats (e.g. Mach-O on MacOS, PE on Windows), but ELF is the most common format on Linux. I won’t go into too much detail here, to keep things brief, but ELF files have grown out of the original &lt;code&gt;a.out&lt;/code&gt; format, and are expressive enough to support pretty much every program you’ll ever write. Here’s what the header of an ELF file looks like:&lt;/p&gt;
    &lt;code&gt;% readelf -h main # main is an ELF file
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 03 00 00 00 00 00 00 00 00
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - GNU
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           RISC-V
  Version:                           0x1
  Entry point address:               0x10358
  Start of program headers:          52 (bytes into file)
  Start of section headers:          675776 (bytes into file)
  Flags:                             0x1, RVC, soft-float ABI
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         7
  Size of section headers:           40 (bytes)
  Number of section headers:         32
  Section header string table index: 31&lt;/code&gt;
    &lt;p&gt;The important parts here are:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The “ELF Magic” bytes, which tell the kernel that this is, indeed, an ELF file. &lt;code&gt;45 4c 46&lt;/code&gt;is ASCII for “ELF”!&lt;/item&gt;
      &lt;item&gt;“Class” tells us we’re dealing with a 32-bit executable.&lt;/item&gt;
      &lt;item&gt;“Start of …” tells us where things are in the file, and “Size of …” tells us how big they are; The kernel is effectively given a map of the file.&lt;/item&gt;
      &lt;item&gt;“Entry point address” — Relatively self-explanatory! But we’ll be coming back to this.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Other ELF files will have different entries and specific values, but the general structure is what we’re after here.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;As you can see by the numerous mentions to “RISC-V”, this is an ELF file I compiled and linked targeting the RV32 architecture (which the aforementioned emulator is built for), hence the “32” in “ELF32”, the “RVC” flag, and the “RISC-V” machine type.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;More than just a header&lt;/head&gt;
    &lt;p&gt;ELF files contain everything our program needs to run, including the code, data, symbols, and more. We can see this again with the &lt;code&gt;readelf&lt;/code&gt; command with the &lt;code&gt;-a&lt;/code&gt; flag. Here’s what we care about:&lt;/p&gt;
    &lt;code&gt;Section Headers:
  [Nr] Name              Type            Addr     Off    Size
  [ 0]                   NULL            00000000 000000 000000
  [ 1] .note.ABI-tag     NOTE            00010114 000114 000020
  [ 2] .rela.plt         RELA            00010134 000134 00000c
  [ 3] .plt              PROGBITS        00010140 000140 000010
  [ 4] .text             PROGBITS        00010150 000150 03e652
  [ 5] .rodata           PROGBITS        0004e7b0 03e7b0 01b208
  ...
  [16] .data             PROGBITS        0007a008 069008 000dec
  [17] .sdata            PROGBITS        0007adf4 069df4 000004
  [18] .bss              NOBITS          0007adf8 069df8 002b6c
  ...
  [29] .symtab           SYMTAB          00000000 095124 009040
  [30] .strtab           STRTAB          00000000 09e164 006d10&lt;/code&gt;
    &lt;p&gt;These sections contain code (&lt;code&gt;.text&lt;/code&gt;), data (&lt;code&gt;.data&lt;/code&gt;), space for global variables (&lt;code&gt;.bss&lt;/code&gt;), shims for accessing shared library functions (&lt;code&gt;.plt&lt;/code&gt;), and quite a bit more (including symbol tables for debugging, relocation tables, etc.), most of which we won’t be discussing.&lt;/p&gt;
    &lt;p&gt;So evidently, there’s some code that we care about in the &lt;code&gt;.text&lt;/code&gt; section, so we copy that and call it a day? Not quite. There’s a massive amount of machinery inside the kernel to make all sorts of programs under all sorts of conditions run.&lt;/p&gt;
    &lt;p&gt;For example, the “PLT” (Procedure Linkage Table) is a section that allows us to call functions in “shared libraries”, for example, &lt;code&gt;libc&lt;/code&gt;, without having to package them alongside our program (“dynamically” vs “statically linking”). The ELF file contains a dynamic section which tells the kernel which shared libraries to load.&lt;/p&gt;
    &lt;quote&gt;&lt;code&gt;libc&lt;/code&gt;is the C standard library, which contains all the “useful” functions:&lt;code&gt;printf&lt;/code&gt;,&lt;code&gt;malloc&lt;/code&gt;, etc. Various flavors implementing the&lt;code&gt;libc&lt;/code&gt;interfaces exist, most commonly&lt;code&gt;glibc&lt;/code&gt;and&lt;code&gt;musl&lt;/code&gt;. Most of the binaries that are discussed in this post are compiled and linked against&lt;code&gt;musl&lt;/code&gt;, since it’s much easier to statically link.&lt;/quote&gt;
    &lt;p&gt;The symbol table looks something like this:&lt;/p&gt;
    &lt;code&gt;Symbol table '.symtab' contains 2308 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 00010114     0 SECTION LOCAL  DEFAULT    1 .note.ABI-tag
     2: 00010134     0 SECTION LOCAL  DEFAULT    2 .rela.plt
     3: 00010140     0 SECTION LOCAL  DEFAULT    3 .plt
     4: 00010150     0 SECTION LOCAL  DEFAULT    4 .text
     ...
     1782: 00010358    30 FUNC    GLOBAL HIDDEN     4 _start
     ...
     1917: 00010430    52 FUNC    GLOBAL DEFAULT    4 main
     2201: 00010506   450 FUNC    GLOBAL HIDDEN     4 __libc_start_main
     ...&lt;/code&gt;
    &lt;p&gt;You may ask: “Wow! &lt;code&gt;2308&lt;/code&gt; looks like a lot, right? What behemoth of a program could possibly need that many symbols?“.&lt;/p&gt;
    &lt;p&gt;Good question! Here’s the behemoth:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  printf("Hello, World!\n");
  return 0;
}&lt;/code&gt;
    &lt;p&gt;Yeah, that’s it. Now, &lt;code&gt;2308&lt;/code&gt; may be slightly bloated because we link against &lt;code&gt;musl&lt;/code&gt; instead of &lt;code&gt;glibc&lt;/code&gt;, but the point still stands: There’s a lot of stuff going on behind the scenes here.&lt;/p&gt;
    &lt;p&gt;The kernel’s job here is to iterate over each section, loading those marked as “loadable”, and then jump to an “interpreter” denoted by the presence of a &lt;code&gt;PT_INTERP&lt;/code&gt; section. In the ELF case, this is the ELF interpreter that handles things like dynamically “relocating” pointers to functions, as well as some security mitigations such as moving sections around in memory (ASLR — Address Space Layout Randomization), marking sections as non-executable (NX bit — hardware-level security), etc. But ultimately, the kernel loads the code and data into memory, sets up the stack, and prepares to jump to the entry point of the program.&lt;/p&gt;
    &lt;head rend="h2"&gt;The stack&lt;/head&gt;
    &lt;p&gt;Ah yes, the infamous stack! Fortunately for most of us, the stack is something we take for granted. Unfortunately for the kernel, the stack is not some omnipotent magical space that just exists — it needs to be set up properly before our program can run.&lt;/p&gt;
    &lt;p&gt;As a reminder: stack space is typically used for variables, function arguments, “frames” (to keep track of function-local variables, call trees, etc), and a variety of other things, depending on what, and how your program is running.&lt;/p&gt;
    &lt;p&gt;Hypothetically, if we simplify a bit and say that the ELF file is loaded into memory starting at the zero address, the stack is typically placed at the “opposite end” of the memory, from a high address, and grows “downwards” towards the lower addresses, with the space in-between used as heap space, and for other data (shared libraries, mmapped files, etc). This is a simplification, but in fairness, there is significant ambiguity as much of the semantics here depend on the program itself.&lt;/p&gt;
    &lt;p&gt;The stack is also something that is non-empty! Remember &lt;code&gt;argv&lt;/code&gt; and &lt;code&gt;envp&lt;/code&gt; from the &lt;code&gt;execve&lt;/code&gt; call above? Those are passed to the program via the stack. In most programming languages we frequently access these via the various &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt; utilities, whether that be directly, like in C, or more indirectly, like in Rust (&lt;code&gt;std::env&lt;/code&gt;) or Python (&lt;code&gt;sys.argv&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;The kernel also stores something called the “ELF auxiliary vector” in the nascent stack. This “auxv” contains information about the environment, such as the memory page size, metadata from the ELF file, and other system information. These are important! For example, &lt;code&gt;musl&lt;/code&gt; uses the “page size” entry of the auxv so that &lt;code&gt;malloc&lt;/code&gt; can request and manage memory more optimally. There are over 30 entries in the auxiliary vectors, but not all of them are used by every program (and some may not be defined by the kernel).&lt;/p&gt;
    &lt;p&gt;Let’s pretend we’re the kernel. Here’s a simplified version of how we might setup the stack of a new process (taken and simplified from my RISC-V emulator, which also emulates parts of the kernel):&lt;/p&gt;
    &lt;code&gt;// Choose an arbitrary high address for the stack
let mut sp = 0xCFFF_F000u32; // sp = "stack pointer"
let mut stack_init: Vec&amp;lt;u32&amp;gt; = vec![]; // The stack begins empty.

stack_init.push(args.len()); // argc: number of arguments
for &amp;amp;arg in args.iter().rev() {
    // Copy each argument to the stack
    sp -= arg.len() // move "downwards" in address space
    mem.copy_to(sp, arg);

    // Keep track of the arg pointer in the init vector
    stack_init.push(sp);
}
stack_init.push(0); // argv NULL terminator

// Environment variables are similar:
for &amp;amp;e in env.iter().rev() {
    sp -= e.len();
    mem.copy_to(sp, e);

    stack_init.push(sp);
}
stack_init.push(0); // envp NULL terminator

// Setup the auxiliary vector
stack_init.push(libc_riscv32::AT_PAGESZ); // Keys for auxv
stack_init.push(0x1000); // Values for auxv; this specifies a 4 KiB page size
stack_init.push(libc_riscv32::AT_ENTRY);
stack_init.push(self.pc); // N.B.: We'll be coming back to this
// ...

// Copy the stack init vector, with all the pointers, to the stack
sp -= (stack_init.len() * 4);

mem.copy_to(sp, &amp;amp;stack_init)&lt;/code&gt;
    &lt;p&gt;A diagram might help illustrate what the address space looks like at this point:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Argument Count (argc)&lt;/item&gt;
      &lt;item&gt;Arguments (argv)&lt;/item&gt;
      &lt;item&gt;Environment variables (envp)&lt;/item&gt;
      &lt;item&gt;Auxiliary Vector (auxv)&lt;/item&gt;
      &lt;item&gt;Local variables, stack frames, function calls&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;↓&lt;/p&gt;
    &lt;p&gt;Grows downward&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Shared libraries (libc, etc.)&lt;/item&gt;
      &lt;item&gt;Memory-mapped files&lt;/item&gt;
      &lt;item&gt;Dynamic linker/loader&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;↑&lt;/p&gt;
    &lt;p&gt;Grows upward&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;malloc(), calloc(), realloc() allocations&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.bss &lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uninitialized global variables&lt;/item&gt;
      &lt;item&gt;Static variables initialized to zero&lt;/item&gt;
      &lt;item&gt;Zero-filled by kernel on program start&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.data &lt;lb/&gt; "read-write"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Initialized global variables&lt;/item&gt;
      &lt;item&gt;Static variables with initial values&lt;/item&gt;
      &lt;item&gt;Read-write data from the executable&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.rodata &lt;lb/&gt; "read-only"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Literals ("Hello, World!")&lt;/item&gt;
      &lt;item&gt;Constant data&lt;/item&gt;
      &lt;item&gt;Read-only variables&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.text &lt;lb/&gt; "code"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Program instructions/machine code&lt;/item&gt;
      &lt;item&gt;_start function (entry point)&lt;/item&gt;
      &lt;item&gt;User code&lt;/item&gt;
      &lt;item&gt;Library function code&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Entrypoint&lt;/head&gt;
    &lt;p&gt;Finally, we get to the “entry point” address, mentioned at several points. This is the address of the first instruction to run in the process. Typically, this is under a function called &lt;code&gt;_start&lt;/code&gt;. Both glibc and musl provide implementations of &lt;code&gt;_start&lt;/code&gt;, but it’s also possible to write your own. Again, here’s a Rust example:&lt;/p&gt;
    &lt;code&gt;// Disable the language runtime, we're DIYing it.
#![no_std]
#![no_main]

#[panic_handler]
fn panic(_info: &amp;amp;core::panic::PanicInfo) -&amp;gt; ! {
    loop {}
}

#[no_mangle]
pub extern "C" fn _start() -&amp;gt; ! {
    // Instead of "waiting" for main, we can immediately start execution.
    loop {}
}&lt;/code&gt;
    &lt;p&gt;Depending on your program, &lt;code&gt;_start&lt;/code&gt; may be the only thing between the entrypoint and your main function, but most languages have some sort of runtime that needs to be initialized first. For example, Rust has &lt;code&gt;std::rt::lang_start&lt;/code&gt;. It’s at this part that things like global constructors, thread-local storage, and other language-specific features are set up.&lt;/p&gt;
    &lt;p&gt;Here, our journey comes to an end — things become much more language-specific from this point on. Most languages will set up their own runtimes (yes, even C and C++ have a “runtime”!), and eventually call the standard &lt;code&gt;main&lt;/code&gt; function we’re normally familiar with.&lt;/p&gt;
    &lt;p&gt;In Rust, the generated code ends up looking like the following:&lt;/p&gt;
    &lt;code&gt;// the user defined main function
fn main() { println!("Hello, world!"); }

// the generated _start function
fn _start() -&amp;gt; {
    let argc = ...; // get argc from stack
    let argv = ...; // get argv from stack
    let envp = ...; // get envp from stack
    let main_fn = main; // pointer to user main function
    std::rt::lang_start(argc, argv, main_fn);
}&lt;/code&gt;
    &lt;p&gt;With the &lt;code&gt;lang_start&lt;/code&gt; function defined here and taking care of the rest.&lt;/p&gt;
    &lt;p&gt;C and C++ have similar, minimal setups. Languages that are traditionally thought to have “heavier” runtimes, such as Java or Python, work the same way, but with the &lt;code&gt;std::rt::lang_start&lt;/code&gt; equivalent doing far more than the Rust/C/C++ runtimes.&lt;/p&gt;
    &lt;p&gt;And there you have it! I’m missing lots of detail here, but hopefully this gives a rough idea of what happens before &lt;code&gt;main()&lt;/code&gt; gets called. I’ve left out complexity that is mostly internal to “real” linux kernels, such as how the kernel sets up address space, the process tables, various group semantics, and et cetera, but I hope this still serves as a decent primer.&lt;/p&gt;
    &lt;p&gt;Feel free to reach out to me with any questions or corrections!&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;An earlier version of this post incorrectly attributed some of the section loading logic to the Kernel, when in reality the ELF interpreter was responsible. Thanks to Hacker News user “fweimer” for the correction.&lt;/p&gt;
    &lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://amit.prasad.me/blog/before-main"/><published>2025-10-25T19:33:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45707539</id><title>D2: Diagram Scripting Language</title><updated>2025-10-26T22:09:24.017823+00:00</updated><content>&lt;doc fingerprint="14eb1b5921af8090"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;D2 Tour&lt;/head&gt;
    &lt;p&gt;D2 is a diagram scripting language that turns text to diagrams. It stands for Declarative Diagramming. Declarative, as in, you describe what you want diagrammed, it generates the image.&lt;/p&gt;
    &lt;p&gt;For example, download the CLI, create a file named &lt;code&gt;input.d2&lt;/code&gt;, copy paste the following,
run this command, and you get the image below.&lt;/p&gt;
    &lt;head rend="h2"&gt;Using the CLI watch modeâ&lt;/head&gt;
    &lt;p&gt;You can finish this tour in about 5-10 minutes, and at the end, there's a cheat sheet you can download and refer to. If you want just the bare essentials, Getting Started takes ~2 mins.&lt;/p&gt;
    &lt;p&gt;The source code for D2 is hosted here: https://github.com/terrastruct/d2.&lt;/p&gt;
    &lt;p&gt;The source code for these docs are here: https://github.com/terrastruct/d2-docs.&lt;/p&gt;
    &lt;p&gt;For each D2 snippet, you can hover over it to open directly in the Playground and tinker.&lt;/p&gt;
    &lt;p&gt;There's some exceptions like snippets that use imports.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://d2lang.com/tour/intro/"/><published>2025-10-25T22:40:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45707658</id><title>The Linux Boot Process: From Power Button to Kernel</title><updated>2025-10-26T22:09:23.617690+00:00</updated><content>&lt;doc fingerprint="a2b71910e515bfcd"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;The Linux Boot Process: From Power Button to Kernel&lt;/head&gt;- 15 mins&lt;head rend="h2"&gt;Part 1 — From power button to the kernel’s first breath&lt;/head&gt;&lt;p&gt;You press the power button. A second later a wall of text scrolls by, or a logo fades in, and eventually Linux appears. What happens in between is not magic. It is a careful handshake between tiny programs and a very literal CPU. This part follows that handshake until the very first line of C code inside the Linux kernel runs.&lt;/p&gt;&lt;head rend="h3"&gt;The very first instruction&lt;/head&gt;&lt;p&gt;When power stabilizes, the CPU resets itself to a tiny, old‑fashioned mode called real mode. Real mode dates back to the original 8086 chip. The rules are simple on purpose. Memory addresses are built from two values the CPU keeps in special fast storage called registers. You combine a segment and an offset like this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;physical_address = (segment &amp;lt;&amp;lt; 4) + offset&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If you see numbers like &lt;code&gt;0xFFFFFFF0&lt;/code&gt;, that is hexadecimal. Hex is base 16. We write &lt;code&gt;0x&lt;/code&gt; in front to make that clear. &lt;code&gt;0x10&lt;/code&gt; is 16 in everyday counting. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex lines up nicely with how hardware stores bits, which is why you see it everywhere in low‑level code.&lt;/p&gt;&lt;p&gt;Right after reset the CPU jumps to a special address called the reset vector at &lt;code&gt;0xFFFFFFF0&lt;/code&gt;. Think of it as a permanent bookmark that says “start here.” There is room for almost nothing at that address, so manufacturers put a short jump there that passes control to the firmware on your motherboard.&lt;/p&gt;&lt;p&gt;Tiny explainer: register A register is a tiny slot inside the CPU. It holds a number the CPU is using right now. Names like CS and IP are register names. CS means “code segment,” which marks the current neighborhood for instructions. IP means “instruction pointer,” which marks which instruction comes next.&lt;/p&gt;&lt;head rend="h3"&gt;BIOS and UEFI&lt;/head&gt;&lt;p&gt;The firmware is a small starter program baked into your board.&lt;/p&gt;&lt;p&gt;BIOS stands for Basic Input Output System. It is the older style. BIOS does a quick health check called POST, looks at the boot order, and tries each device. If it finds a disk whose very first 512‑byte sector ends with the marker bytes &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xAA&lt;/code&gt;, it treats that device as bootable. BIOS copies that sector to memory at &lt;code&gt;0x7C00&lt;/code&gt; and jumps there. That sector is tiny, so it usually knows only how to load the next, larger piece.&lt;/p&gt;&lt;p&gt;UEFI is the modern replacement. It still starts the machine, but it understands filesystems directly and can load bigger boot programs without the old “first sector” dance. UEFI also passes richer information to the operating system. Different path, same goal: hand control to a boot program that can load Linux.&lt;/p&gt;&lt;head rend="h3"&gt;Meet the bootloader&lt;/head&gt;&lt;p&gt;The bootloader is the usher that gets the operating system into place. GRUB is a popular choice on PCs. It reads its configuration, shows a menu if you installed one, and loads the Linux kernel into memory. The Linux kernel file actually contains two things:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a small setup program that still runs in real mode&lt;/item&gt;&lt;item&gt;the larger compressed kernel that will be unpacked a little later&lt;/item&gt;&lt;/list&gt;&lt;p&gt;GRUB also fills out a small structure called the setup header with useful facts: where it placed the kernel, where the command line lives, where the initrd is if you have one. Then it jumps into the setup program.&lt;/p&gt;&lt;head rend="h3"&gt;The setup program makes a safe room&lt;/head&gt;&lt;p&gt;Before Linux can do anything interesting, the setup code creates a predictable workspace.&lt;/p&gt;&lt;p&gt;It lines up the segment registers so memory copies behave the same way every time. Names you’ll see here are CS for code, DS for data, and SS for stack. It also clears a single CPU bit called the “direction flag” so copy instructions move forward through memory.&lt;/p&gt;&lt;p&gt;It creates a stack. The stack is a last‑in, first‑out workbench where functions store temporary values. SS says which segment the stack uses. SP is the pointer to the current top of the stack.&lt;/p&gt;&lt;p&gt;It clears a region called BSS. BSS is where global variables that must start as zero live. C code assumes BSS is zero. The setup program writes zeros over that entire span to keep that promise.&lt;/p&gt;&lt;p&gt;If you passed &lt;code&gt;earlyprintk&lt;/code&gt; on the kernel command line, the setup code also programs the serial port so it can print very early messages. This is useful when graphics are not ready yet.&lt;/p&gt;&lt;p&gt;Finally the setup program asks the firmware “how much usable RAM do we really have and where are the holes.” On old BIOS this is a call people often nickname e820, which returns a simple list of usable and reserved ranges. The kernel will use that list to avoid stepping on the firmware’s toes.&lt;/p&gt;&lt;p&gt;With that done, the setup code calls its first C function, which is literally named &lt;code&gt;main&lt;/code&gt;. We are still in the small old real mode at this point. The next job is to leave it.&lt;/p&gt;&lt;p&gt;Tiny explainer: interrupt An interrupt is a hardware or software “excuse me” that pauses what the CPU is doing and runs a small handler for something urgent. A timer tick is an interrupt. A key press is an interrupt. There are two flavors here. Maskable interrupts follow your rules and can be temporarily blocked so they do not fire during delicate moments. Non‑maskable interrupts, often called NMI, always cut in because they usually report serious hardware issues. We will control both while switching modes so nothing surprises us halfway through.&lt;/p&gt;&lt;head rend="h2"&gt;Part 2 — Leaving real mode, stepping through 32‑bit land, and arriving in 64‑bit&lt;/head&gt;&lt;p&gt;Modern Linux on PCs runs in long mode, which is the 64‑bit mode of x86_64. You cannot jump there directly from real mode. The path is real mode to protected mode and then protected mode to long mode. This part covers that path and explains the vocabulary on the way.&lt;/p&gt;&lt;head rend="h3"&gt;Protected mode, without the jargon haze&lt;/head&gt;&lt;p&gt;Protected mode is the 32‑bit world introduced to get past the limits of the 1980s. It adds two central ideas.&lt;/p&gt;&lt;p&gt;The Global Descriptor Table, or GDT, is a short list of segment descriptions. A description says “this segment starts here, covers this much, and is allowed to do these things.” Linux keeps this simple. It uses a flat model, which means the base is zero and the size covers the whole 32‑bit space. When everything is flat, addresses look like plain numbers again.&lt;/p&gt;&lt;p&gt;The Interrupt Descriptor Table, or IDT, is a directory of “phone numbers” for emergency calls. If an interrupt arrives, the CPU looks up the entry in the IDT and jumps to the handler listed there. During the switch we load a tiny placeholder IDT because we are about to block interrupts anyway. The full‑featured IDT arrives later once the real kernel is in charge.&lt;/p&gt;&lt;head rend="h3"&gt;The careful switch&lt;/head&gt;&lt;p&gt;The setup code turns off the noisy parts first. It disables maskable interrupts with a single instruction. It quiets the old PIC chips so hardware interrupts are fully blocked for a moment. It opens the A20 line. This is a historical quirk. Early PCs made addresses wrap at 1 megabyte. Opening A20 removes that wrap so higher addresses work like you expect. It resets the math coprocessor so the floating point state is clean.&lt;/p&gt;&lt;p&gt;Then it loads a tiny GDT with only what we need right now and a tiny IDT. Finally it sets a single bit named PE in a control register named CR0 and performs a far jump. That jump reloads the code segment from the GDT and locks in protected mode. It reloads the data and stack segments and fixes the stack pointer to match the new flat world.&lt;/p&gt;&lt;p&gt;We are now in 32‑bit protected mode.&lt;/p&gt;&lt;p&gt;Tiny explainer: control registers The CPU has a few special registers for on off switches. CR0 turns on protected mode. CR3 holds the address of the top of the page tables, which we will need in a second. CR4 enables a set of extended features such as larger page table entries.&lt;/p&gt;&lt;head rend="h3"&gt;Why we still are not done&lt;/head&gt;&lt;p&gt;Linux wants 64‑bit. That is long mode. Two things are needed.&lt;/p&gt;&lt;p&gt;Paging must be on. Paging is the translator between virtual addresses and physical addresses. Programs use virtual addresses. The hardware reads and writes physical memory. Page tables map one to the other in fixed‑size chunks called pages. On PCs a normal page is 4 kilobytes. There are also bigger pages. Early in boot the kernel uses 2 megabyte pages to describe low memory quickly.&lt;/p&gt;&lt;p&gt;A single bit named LME in a special register called EFER must be set to allow long mode. EFER is a model specific register, which is a fancy way of saying “a register used for certain CPU features.”&lt;/p&gt;&lt;head rend="h3"&gt;Building just enough paging&lt;/head&gt;&lt;p&gt;The 32‑bit prologue builds a small set of page tables that say “for this region, virtual equals physical.” That is called an identity map. It is enough to flip paging on safely.&lt;/p&gt;&lt;p&gt;To make this work the code enables PAE in CR4 so larger entries are used. It builds a minimal set of tables that cover low memory in 2 megabyte chunks. It writes the address of the top table into CR3. Paging is now ready.&lt;/p&gt;&lt;p&gt;Finally it sets LME in EFER and performs a far return into a label that is written as 64‑bit code. Long mode is now active. Segments are still “flat,” but addresses and registers are 64‑bit wide.&lt;/p&gt;&lt;p&gt;Why all the extra care Switching modes while a live system runs is like changing a car tire while rolling. The code blocks interruptions, prepares the minimum needed tables, flips the bit, and only then invites interrupts back. Slow and steady prevents weird half‑switched states.&lt;/p&gt;&lt;head rend="h2"&gt;Part 3 — Unpacking the real kernel, fixing addresses, and why Linux sometimes moves itself&lt;/head&gt;&lt;p&gt;We have a 64‑bit CPU with paging on and a compressed kernel in memory. Now the small 64‑bit stub does the practical work: get out of the way if needed, unpack the kernel, fix addresses if the kernel is not at its default spot, and jump.&lt;/p&gt;&lt;head rend="h3"&gt;Clearing a path and setting safety nets&lt;/head&gt;&lt;p&gt;The stub first figures out where it is actually running. Early code is linked as if it lived at address zero and then computes its real base at runtime. If the planned destination for the decompressed kernel would overlap the stub, it copies itself to a safe place.&lt;/p&gt;&lt;p&gt;It clears its own BSS so global state starts clean.&lt;/p&gt;&lt;p&gt;It loads a minimal IDT with two handlers. One for page fault and one for NMI. A page fault happens when the CPU cannot find a mapping for a virtual address it just tried to use. In our early identity‑mapped world, the tiny page fault handler can add the missing mapping on the fly and continue. The NMI handler is there so a non‑maskable interrupt does not crash the machine while we are still bringing things up.&lt;/p&gt;&lt;p&gt;It also builds identity mappings for the regions it will touch next. That includes the future home of the kernel, the small boot parameters page the bootloader filled in, and the command line buffer.&lt;/p&gt;&lt;head rend="h3"&gt;Decompressing Linux…&lt;/head&gt;&lt;p&gt;A C function commonly named &lt;code&gt;extract_kernel&lt;/code&gt; takes over. It sets aside a tiny heap for temporary buffers, prints the classic line, and unpacks the kernel using whatever algorithm the kernel was built with. gzip, xz, zstd, lzo, and others all plug into the same wrapper.&lt;/p&gt;&lt;p&gt;When the bytes are out, the decompressor reads the kernel’s ELF headers. ELF, short for Executable and Linkable Format, is both a file format and a map. It says which chunks are code, which are data, and exactly where each chunk wants to live. The decompressor copies each chunk where it belongs.&lt;/p&gt;&lt;p&gt;If the kernel is being loaded at a different address than it was built for, the decompressor applies relocations. A relocation is a small fix‑up that adjusts a pointer or an instruction that contains an address. The decompressor walks a list of these and patches each place so it points to the right spot in the address space we are actually using.&lt;/p&gt;&lt;p&gt;When everything is in place, the decompressor returns the entry point of the real kernel and jumps there, passing a pointer to the boot parameters. From that moment you are in the full kernel. The first function you meet is &lt;code&gt;start_kernel&lt;/code&gt;, and the big initialization begins.&lt;/p&gt;&lt;head rend="h3"&gt;Why the kernel sometimes moves itself on purpose&lt;/head&gt;&lt;p&gt;You may see kASLR mentioned in kernel logs. That stands for Kernel Address Space Layout Randomization. The idea is simple. If attackers do not know where the kernel lives in memory, certain attacks get a lot harder.&lt;/p&gt;&lt;p&gt;Early in boot, if kASLR is enabled, the decompressor chooses two “bases” at random:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a physical base, which is where the bytes will live in RAM&lt;/item&gt;&lt;item&gt;a virtual base, the starting virtual address the kernel will use once full paging is set up&lt;/item&gt;&lt;/list&gt;&lt;p&gt;How does it choose without breaking anything&lt;/p&gt;&lt;p&gt;It builds a do not touch list. That includes the decompressor itself, the compressed image, the initial ramdisk, the boot parameters page, and the command line buffer. It can also include ranges you reserve with a &lt;code&gt;memmap=&lt;/code&gt; option on the command line.&lt;/p&gt;&lt;p&gt;It scans the memory map from firmware to find large free regions. For each free region it counts how many aligned “slots” of the right size would fit. It draws a random number using the best early entropy source it has. On modern CPUs that might be a hardware random instruction. It reduces the number to the total number of slots and picks the matching slot. That becomes the physical base. The virtual base is chosen the same way, but within the kernel’s virtual address window.&lt;/p&gt;&lt;p&gt;If nothing suitable exists, the code falls back to the default addresses and prints a small warning. If you pass &lt;code&gt;nokaslr&lt;/code&gt; on the command line, the randomization step is skipped by design.&lt;/p&gt;&lt;head rend="h2"&gt;A quick glossary you can bookmark&lt;/head&gt;&lt;p&gt;Hexadecimal. Base 16 numbers written with &lt;code&gt;0x&lt;/code&gt;. &lt;code&gt;0x10&lt;/code&gt; is 16. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex maps cleanly to bits, which is why low‑level code uses it.&lt;/p&gt;&lt;p&gt;Register. A tiny slot inside the CPU that holds a number right now. Examples: CS, DS, SS, IP, SP.&lt;/p&gt;&lt;p&gt;Segment and offset. The two pieces used to build real‑mode addresses. Physical address equals segment times 16 plus offset.&lt;/p&gt;&lt;p&gt;BIOS. Older firmware that starts the machine, checks hardware, and loads the first boot sector into memory.&lt;/p&gt;&lt;p&gt;UEFI. Modern firmware that understands filesystems and loads larger boot programs directly.&lt;/p&gt;&lt;p&gt;Bootloader. The usher that places the kernel in memory and passes facts about the system to it. GRUB is a common one.&lt;/p&gt;&lt;p&gt;Stack. A last‑in, first‑out workbench for functions. SS selects its segment. SP points at the current top.&lt;/p&gt;&lt;p&gt;BSS. A region where global variables that must start as zero live. The kernel setup code clears it before C runs.&lt;/p&gt;&lt;p&gt;Interrupt. A fast “excuse me” from hardware or software. The CPU pauses, runs a small handler, then resumes. Maskable interrupts can be blocked for a moment. NMI cannot.&lt;/p&gt;&lt;p&gt;GDT. Global Descriptor Table. Short list of segment descriptors. Linux sets it to a simple flat model.&lt;/p&gt;&lt;p&gt;IDT. Interrupt Descriptor Table. Directory of interrupt handlers. Early boot uses a minimal one. The full kernel installs the real one later.&lt;/p&gt;&lt;p&gt;A20 line. Historical switch that must be opened to address above 1 megabyte correctly on old PCs.&lt;/p&gt;&lt;p&gt;Protected mode. 32‑bit mode that introduces the GDT and IDT and allows paging.&lt;/p&gt;&lt;p&gt;Long mode. 64‑bit mode on x86_64. Requires paging and a bit named LME set in the EFER register.&lt;/p&gt;&lt;p&gt;Paging. The translator from virtual addresses to physical memory. Implemented with page tables.&lt;/p&gt;&lt;p&gt;Page tables. The data structure that maps virtual pages to physical pages. Early boot uses identity maps. Normal pages are 4 KB. Early boot often uses 2 MB pages to cover ground quickly.&lt;/p&gt;&lt;p&gt;CR0, CR3, CR4. Control registers. CR0 turns on protected mode. CR3 points to the top of the page tables. CR4 enables extended features such as PAE.&lt;/p&gt;&lt;p&gt;EFER. A model‑specific register that holds Long Mode Enable among other bits.&lt;/p&gt;&lt;p&gt;ELF. The kernel’s on‑disk format with a built‑in map of what belongs where.&lt;/p&gt;&lt;p&gt;Relocation. A fix‑up that adjusts addresses when code is loaded at a different base than it was built for.&lt;/p&gt;&lt;p&gt;kASLR. Randomizes kernel base addresses at boot to make exploitation harder.&lt;/p&gt;&lt;p&gt;Feedback is extremely welcomed! You can reach out to me on X @0xkato&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.0xkato.xyz/linux-boot/"/><published>2025-10-25T23:04:23+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708292</id><title>A worker fell into a nuclear reactor pool</title><updated>2025-10-26T22:09:23.339657+00:00</updated><content>&lt;doc fingerprint="36763bc70a7784d2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Event Notification Report for October 22, 2025&lt;/head&gt;
    &lt;p&gt;U.S. Nuclear Regulatory Commission&lt;lb/&gt;Operations Center&lt;/p&gt;
    &lt;p&gt;EVENT REPORTS FOR&lt;lb/&gt;10/21/2025 - 10/22/2025 &lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57994&lt;/p&gt;
    &lt;p&gt; Facility: Wolf Creek&lt;lb/&gt;Region: 4 State: KS&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-4-LP&lt;lb/&gt;NRC Notified By: Michael J. Payne&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 4 State: KS&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Michael J. Payne&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 14:37 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 06:10 [CDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 14:37 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 06:10 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; BOTH TRAINS OF CONTROL ROOM EMERGENCY VENTILATION SYSTEM INOPERABLE&lt;lb/&gt;The following is a summary of information provided by the licensee via phone and email:&lt;lb/&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;lb/&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;lb/&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;The following is a summary of information provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;/p&gt;
    &lt;p&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;/p&gt;
    &lt;p&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57996&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 16:52 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 16:32 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:52 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 16:32 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;lb/&gt;Grant, Jeffery (IRMOC)&lt;lb/&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Grant, Jeffery (IRMOC)&lt;/p&gt;
    &lt;p&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; TRANSPORT OF CONTAMINATED PERSON OFFSITE&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;lb/&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;lb/&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;/p&gt;
    &lt;p&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57997&lt;/p&gt;
    &lt;p&gt; Facility: North Anna&lt;lb/&gt;Region: 2 State: VA&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;lb/&gt;NRC Notified By: Nick Wilson&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 2 State: VA&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Nick Wilson&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 23:10 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 21:08 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 23:10 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 21:08 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;p&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;A/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;74&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; AUTOMATIC REACTOR TRIP&lt;lb/&gt;The following information was provided by the licensee via email and phone:&lt;lb/&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;lb/&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via email and phone:&lt;/p&gt;
    &lt;p&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;/p&gt;
    &lt;p&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57990&lt;/p&gt;
    &lt;p&gt; Rep Org: Georgia Radioactive Material Pgm&lt;lb/&gt;Licensee: Piedmont Heart Institute&lt;lb/&gt;Region: 1&lt;lb/&gt;City: Douglasville State: GA&lt;lb/&gt;County:&lt;lb/&gt;License #: GA 1195-2&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Avionne Fortner&lt;lb/&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt;Licensee: Piedmont Heart Institute&lt;/p&gt;
    &lt;p&gt;Region: 1&lt;/p&gt;
    &lt;p&gt;City: Douglasville State: GA&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: GA 1195-2&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Avionne Fortner&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 08:20 [ET]&lt;lb/&gt;Event Date: 10/08/2025&lt;lb/&gt;Event Time: 00:00 [EDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:20 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/08/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Young, Matt (R1DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Young, Matt (R1DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - LEAKING SOURCE&lt;lb/&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;lb/&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;lb/&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;/p&gt;
    &lt;p&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;/p&gt;
    &lt;p&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57991&lt;/p&gt;
    &lt;p&gt; Rep Org: NV Div of Rad Health&lt;lb/&gt;Licensee: Universal Engineering Services&lt;lb/&gt;Region: 4&lt;lb/&gt;City: Reno State: NV&lt;lb/&gt;County:&lt;lb/&gt;License #: 00-11-14033-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Corey Creveling&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Universal Engineering Services&lt;/p&gt;
    &lt;p&gt;Region: 4&lt;/p&gt;
    &lt;p&gt;City: Reno State: NV&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: 00-11-14033-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Corey Creveling&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 13:51 [ET]&lt;lb/&gt;Event Date: 10/16/2025&lt;lb/&gt;Event Time: 08:15 [PDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 13:51 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 08:15 [PDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;lb/&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - STOLEN GAUGE&lt;lb/&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;lb/&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;lb/&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;lb/&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;lb/&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;/p&gt;
    &lt;p&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;/p&gt;
    &lt;p&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;/p&gt;
    &lt;p&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;/p&gt;
    &lt;p&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57992&lt;/p&gt;
    &lt;p&gt; Rep Org: Illinois Emergency Mgmt. Agency&lt;lb/&gt;Licensee: Elmhurst Hospital&lt;lb/&gt;Region: 3&lt;lb/&gt;City: Elmhurst State: IL&lt;lb/&gt;County:&lt;lb/&gt;License #: IL-01612-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Kimberly Stice&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Elmhurst Hospital&lt;/p&gt;
    &lt;p&gt;Region: 3&lt;/p&gt;
    &lt;p&gt;City: Elmhurst State: IL&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: IL-01612-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Kimberly Stice&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 16:35 [ET]&lt;lb/&gt;Event Date: 10/15/2025&lt;lb/&gt;Event Time: 00:00 [CDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:35 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/15/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Ziolkowski, Michael (R3DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Ziolkowski, Michael (R3DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - UNPLANNED CONTAMINATION&lt;lb/&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;lb/&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;lb/&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;lb/&gt;"Additional updates will be provided as they become available."&lt;lb/&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;/p&gt;
    &lt;p&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;/p&gt;
    &lt;p&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;/p&gt;
    &lt;p&gt;"Additional updates will be provided as they become available."&lt;/p&gt;
    &lt;p&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57998&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 08:06 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 04:52 [EDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:06 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 04:52 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; OFFSITE NOTIFICATION&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;lb/&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 58002&lt;/p&gt;
    &lt;p&gt; Facility: Clinton&lt;lb/&gt;Region: 3 State: IL&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] GE-6&lt;lb/&gt;NRC Notified By: Pat Bulpitt&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: IL&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] GE-6&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Pat Bulpitt&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 18:57 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 15:35 [CDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 18:57 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 15:35 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;M/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;86&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; MANUAL REACTOR SCRAM&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;lb/&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;lb/&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;/p&gt;
    &lt;p&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;/p&gt;
    &lt;p&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE"/><published>2025-10-26T01:15:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708524</id><title>Pico-Banana-400k</title><updated>2025-10-26T22:09:22.719289+00:00</updated><content>&lt;doc fingerprint="19072a4816fa0fc8"&gt;
  &lt;main&gt;
    &lt;p&gt;Pico-Banana-400K is a large-scale dataset of ~400K text–image–edit triplets designed to advance research in text-guided image editing.&lt;lb/&gt; Each example contains:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;an original image (from Open Images),&lt;/item&gt;
      &lt;item&gt;a human-like edit instruction, and&lt;/item&gt;
      &lt;item&gt;the edited result generated by Nano-Banana and verified by Gemini-2.5-Pro.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The dataset spans 35 edit operations across 8 semantic categories, covering diverse transformations—from low-level color adjustments to high-level object, scene, and stylistic edits.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Feature&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Total Samples&lt;/cell&gt;
        &lt;cell&gt;~257K single-turn text–image–edit triplets for SFT, ~56K single-turn text-image(positive) - image(negative)-edit for preference learning, and ~72K multi-turn texts-images-edits for multi-turn applications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Source&lt;/cell&gt;
        &lt;cell&gt;Open Images&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edit Operations&lt;/cell&gt;
        &lt;cell&gt;35 across 8 semantic categories&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Categories&lt;/cell&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric, Object-Level, Scene Composition, Stylistic, Text &amp;amp; Symbol, Human-Centric, Scale &amp;amp; Perspective, Spatial/Layout&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Image Resolution&lt;/cell&gt;
        &lt;cell&gt;512–1024 px&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Prompt Generator&lt;/cell&gt;
        &lt;cell&gt;Gemini-2.5-Flash&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Editing Model&lt;/cell&gt;
        &lt;cell&gt;Nano-Banana&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Self-Evaluation&lt;/cell&gt;
        &lt;cell&gt;Automated judging pipeline using Gemini-2.5-Pro for edit quality&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K is built using a two-stage multimodal generation pipeline:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Instruction Generation&lt;lb/&gt;Each Open Images sample is passed to Gemini-2.5-Flash, which writes concise, natural-language editing instructions grounded in visible content. We also provide short instructions summarized by Qwen-2.5-Instruct-7B. Example:&lt;quote&gt;{ "instruction": "Change the red car to blue." }&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Editing + Self-Evaluation The Nano-Banana model performs the edit, then automatically evaluates the result using a structured quality prompt that measures: Instruction Compliance (40%) Editing Realism (25%) Preservation Balance (20%) Technical Quality (15%) Only edits scoring above a strict threshold (~0.7) are labeled as successful, forming the main dataset; the remaining ~56K are retained as failure cases for robustness and preference learning.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Nano-Banana-400K contains ~400K image editing data, covering a wide visual and semantic range drawn from real-world imagery.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Percentage&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Object-Level Semantic&lt;/cell&gt;
        &lt;cell&gt;Add, remove, replace, or relocate objects&lt;/cell&gt;
        &lt;cell&gt;35%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scene Composition &amp;amp; Multi-Subject&lt;/cell&gt;
        &lt;cell&gt;Contextual and environmental transformations&lt;/cell&gt;
        &lt;cell&gt;20%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;Edits involving clothing, expression, or appearance&lt;/cell&gt;
        &lt;cell&gt;18%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;Domain and artistic style transfer&lt;/cell&gt;
        &lt;cell&gt;10%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;Edits involving visible text, signs, or symbols&lt;/cell&gt;
        &lt;cell&gt;8%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric&lt;/cell&gt;
        &lt;cell&gt;Brightness, contrast, and tonal adjustments&lt;/cell&gt;
        &lt;cell&gt;5%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scale &amp;amp; Perspective&lt;/cell&gt;
        &lt;cell&gt;Zoom, viewpoint, or framing changes&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Spatial / Layout&lt;/cell&gt;
        &lt;cell&gt;Outpainting, composition, or canvas extension&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Single-Turn SFT samples (successful edits): ~257K&lt;/item&gt;
      &lt;item&gt;Single-Turn Preference samples (failure cases): ~56K&lt;/item&gt;
      &lt;item&gt;Multi-Turn SFT samples (successful cases): ~72K&lt;/item&gt;
      &lt;item&gt;Gemini-generated instructions: concise, natural, and image-aware&lt;/item&gt;
      &lt;item&gt;Edit coverage: 35 edit types across 8 semantic categories&lt;/item&gt;
      &lt;item&gt;Image diversity: includes humans, objects, text-rich scenes, etc from Open Images&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Below are representative examples from different categories:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Example&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Object-Level&lt;/cell&gt;
        &lt;cell&gt;“Replace the red apple with a green one.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Scene Composition&lt;/cell&gt;
        &lt;cell&gt;“Add sunlight streaming through the window.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;“Change the person’s expression to smiling.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;“Uppercase the text on the billboard.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;“Convert the image to a Van Gogh painting style.”&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K provides both breadth (diverse edit operations) and depth (quality-controlled multimodal supervision), making it a strong foundation for training and evaluating text-guided image editing models.&lt;/p&gt;
    &lt;p&gt;Pico-Banana-400K serves as a versatile resource for advancing controllable and instruction-aware image editing.&lt;lb/&gt; Beyond single-step editing, the dataset enables multi-turn, conversational editing and reward-based training paradigms.&lt;/p&gt;
    &lt;p&gt;The Pico-Banana-400K dataset is hosted on Apple’s public CDN.&lt;lb/&gt; You can download each component (single-turn, multi-turn, and preference data) using the provided manifest files.&lt;/p&gt;
    &lt;p&gt;Manifest files: sft link and preference link&lt;/p&gt;
    &lt;p&gt;Manifest file: multi-turn link&lt;/p&gt;
    &lt;p&gt;Urls to download source images are provided along with edit instructions in sft link, preference link, and multi-turn link. If you hit rate limit with Flickr when downloading images, you can either request higher rate limit with Flickr or follow steps below.&lt;/p&gt;
    &lt;p&gt;Another way to download the source images is to download packed files train_0.tar.gz and train_1.tar.gz from Open Images, then map with the urls we provide. We also provide a sample mapping code here. Due to legal requirements, we cannot provide the source image files directly.&lt;/p&gt;
    &lt;code&gt;# Install awscli if you don't have it (https://aws.amazon.com/cli/)
# Download Open Images packed files 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_0.tar.gz . 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_1.tar.gz . 

# Create folder for extracted images 
mkdir openimage_source_images

# Extract the tar files 
tar -xvzf train_0.tar.gz -C openimage_source_images
tar -xvzf train_1.tar.gz -C openimage_source_images

# Download metadata CSV (ImageID ↔ OriginalURL mapping)  
wget https://storage.googleapis.com/openimages/2018_04/train/train-images-boxable-with-rotation.csv

# Map urls to local paths
python map_openimage_url_to_local.py #please modify variable is_multi_turn and file paths as needed&lt;/code&gt;
    &lt;p&gt;Pico-Banana-400K is released under the Creative Commons Attribution–NonCommercial–NoDerivatives (CC BY-NC-ND 4.0) license. ✅ Free for research and non-commercial use ❌ Commercial use and derivative redistribution are not permitted 🖼️ Source images follow the Open Images (CC BY 2.0) license By using this dataset, you agree to comply with the terms of both licenses.&lt;/p&gt;
    &lt;p&gt;If you use 🍌 Pico-Banana-400K in your research, please cite it as follows:&lt;/p&gt;
    &lt;code&gt;@misc{qian2025picobanana400klargescaledatasettextguided,
      title={Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing}, 
      author={Yusu Qian and Eli Bocek-Rivele and Liangchen Song and Jialing Tong and Yinfei Yang and Jiasen Lu and Wenze Hu and Zhe Gan},
      year={2025},
      eprint={2510.19808},
      archivePrefix={arXiv},
      primaryClass={cs.CV},
      url={https://arxiv.org/abs/2510.19808}, 
}

&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/apple/pico-banana-400k"/><published>2025-10-26T02:01:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708686</id><title>PCB Edge USB C Connector Library</title><updated>2025-10-26T22:09:22.180199+00:00</updated><content>&lt;doc fingerprint="1bf656e13f840a3b"&gt;
  &lt;main&gt;
    &lt;p&gt;Use your PCB itself as a USB C connector! This repo includes a KiCAD and EasyEDA library containing 10 and 14 Pin versions.&lt;/p&gt;
    &lt;p&gt;To use this library in kicad, download the zip file, open the Plugin and Content Manager (PCM), click "Install from file" and choose the zip file.&lt;/p&gt;
    &lt;p&gt;To use this library in EasyEDA pro, import the .elibz files, or search the common library for "PCBTypeC_10P" or "PCBTypeC_14P" to add the symbol to your schematic.&lt;/p&gt;
    &lt;p&gt;Some other EDA tools like Altium support importing KiCAD footprints, and EasyEDA supports export to Altium and PADS. Double check against the same footprint in KiCAD or EasyEDA after import.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/AnasMalas/pcb-edge-usb-c"/><published>2025-10-26T02:31:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709819</id><title>Writing a RISC-V Emulator in Rust</title><updated>2025-10-26T22:09:22.024098+00:00</updated><content>&lt;doc fingerprint="b3e453454f1ba464"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Writing a RISC-V Emulator in Rust&lt;/head&gt;
    &lt;p&gt;NOTE: This project is actively ongoing. Pages are not perfect yet and it possible to change dramatically.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;This is the book for writing a 64-bit RISC-V emulator from scratch in Rust. You can run xv6, a simple Unix-like OS, in your emulator once you finish the book.&lt;/p&gt;
    &lt;p&gt;You'll learn the basic computer architecture such as ISA, previleged architecture, exceptions, interrupts, peripheral devices, and virtual memory system from making an emulator.&lt;/p&gt;
    &lt;p&gt;The source code used in this book is available at d0iasm/rvemu-for-book.&lt;/p&gt;
    &lt;head rend="h2"&gt;Chapter 1&lt;/head&gt;
    &lt;p&gt;Chapter 1 shows all hardward components we need to implement for running &lt;code&gt;xv6&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;CPU with Two Instructions&lt;/item&gt;
      &lt;item&gt;Memory and System Bus&lt;/item&gt;
      &lt;item&gt;Control and Status Registers&lt;/item&gt;
      &lt;item&gt;Privileged Architecture&lt;/item&gt;
      &lt;item&gt;Exceptions&lt;/item&gt;
      &lt;item&gt;PLIC (a platform-level interrupt controller) and CLINT (a core-local interrupter)&lt;/item&gt;
      &lt;item&gt;UART (a universal asynchronous receiver-transmitter)&lt;/item&gt;
      &lt;item&gt;Interrupts&lt;/item&gt;
      &lt;item&gt;Virtio&lt;/item&gt;
      &lt;item&gt;Virtual Memory System&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Chapter 2&lt;/head&gt;
    &lt;p&gt;Chapter 2 shows all ISAs we need to implement for running &lt;code&gt;xv6&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;RV64I Base Integer Instruction Set&lt;/item&gt;
      &lt;item&gt;"M" Standard Extension for Integer Multiplication and Division&lt;/item&gt;
      &lt;item&gt;"A" Standard Extension for AtomicInstructions&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Outcome&lt;/head&gt;
    &lt;p&gt;Once you read this book and implement the emulator, you will be able to run xv6 in your emulator!&lt;/p&gt;
    &lt;head rend="h2"&gt;Contact&lt;/head&gt;
    &lt;p&gt;The author is @d0iasm and please feel free to ask and request anything to me via Twitter or GitHub issues!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://book.rvemu.app/"/><published>2025-10-26T07:34:30+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709988</id><title>Clojure Land – Discover open-source Clojure libraries and frameworks</title><updated>2025-10-26T22:09:21.530869+00:00</updated><content>&lt;doc fingerprint="2302039003d1cf0"&gt;
  &lt;main&gt;
    &lt;list id="project-list" class="grid grid-cols-6 gap-2 divide-y divide-gray-100" rend="ul"&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Behavioral Programming for Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) - AI pair programming capabilities agnostic of editor&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) integration for Emacs&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Java2D wrapper + creative coding supporting functions (based on Processing and openFrameworks)&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Making VS Code Hackable like Emacs since 2022&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A data-driven rendering library for Clojure(Script) that renders hiccup to DOM or to strings.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Clojure library for building OpenAPI services&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;An optional type system for Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A better "prn" for debugging&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Managed lifecycle of stateful objects in Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;VS Code AI Agent Interactive Programming. Tools for CoPIlot and other assistants. Can also be used as an MCP server.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A functional quantum computer programming library for Clojure with backend protocols, simulation backends and visualizations.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Expose Lacinia GraphQL as Pedestal endpoints&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Clojure reducers, but for parallel execution: locally and on distributed systems.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) integration for Vscode&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;An open source tool set for building web applications in Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;JSON parser/generator to/from Clojure data structures&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;User aliases and Clojure CLI configuration for deps.edn based projects&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2" hx-get="/" hx-target="#project-list" hx-select="#project-list li" hx-swap="beforeend" hx-include="inherit" hx-vals="{&amp;quot;page&amp;quot;:2}" hx-trigger="revealed"&gt;
        &lt;div&gt;
          &lt;div&gt;Weave loom fibers into your Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Multi-pass compiler and runtime for probabilistic programming.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://clojure.land/"/><published>2025-10-26T08:15:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710006</id><title>Advent of Code 2025: Number of puzzles reduce from 25 to 12 for the first time</title><updated>2025-10-26T22:09:21.266186+00:00</updated><content>&lt;doc fingerprint="9ad8fbdb2d32aff8"&gt;
  &lt;main&gt;&lt;p&gt;Hi! I'm Eric Wastl. I make Advent of Code. I hope you like it! I also make lots of other things. I'm on Bluesky, Mastodon, and GitHub.&lt;/p&gt;&lt;p&gt;Advent of Code is an Advent calendar of small programming puzzles for a variety of skill levels that can be solved in any programming language you like. People use them as interview prep, company training, university coursework, practice problems, a speed contest, or to challenge each other.&lt;/p&gt;&lt;p&gt;You don't need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.&lt;/p&gt;&lt;p&gt;If you'd like to support Advent of Code, you can do so indirectly by helping to AoC++.&lt;/p&gt;it with others or directly via&lt;head rend="h2"&gt;--- General Tips ---&lt;/head&gt;&lt;p&gt;If you get stuck, try your solution against the examples given in the puzzle; you should get the same answers. If not, re-read the description. Did you misunderstand something? Is your program doing something you don't expect? After the examples work, if your answer still isn't correct, build some test cases for which you can verify the answer by hand and see if those work with your program. Make sure you have the entire puzzle input. If you're still stuck, maybe ask a friend for help, or come back to the puzzle later. You can also ask for hints in the subreddit.&lt;/p&gt;&lt;head rend="h2"&gt;--- Frequently Asked Questions ---&lt;/head&gt;&lt;p&gt;Is there an easy way to select entire code blocks? You should be able to triple-click code blocks to select them. You'll need JavaScript enabled.&lt;/p&gt;&lt;code&gt;#!/usr/bin/env perl
use warnings;
use strict;

print "You can test it out by ";
print "triple-clicking this code.\n";
&lt;/code&gt;&lt;p&gt;How does authentication work? Advent of Code uses OAuth to confirm your identity through other services. When you log in, you only ever give your credentials to that service - never to Advent of Code. Then, the service you use tells the Advent of Code servers that you're really you. In general, this reveals no information about you beyond what is already public; here are examples from Reddit and GitHub. Advent of Code will remember your unique ID, names, URL, and image from the service you use to authenticate.&lt;/p&gt;&lt;p&gt;Why was this puzzle so easy / hard? The difficulty and subject matter varies throughout each event. Very generally, the puzzles get more difficult over time, but your specific skillset will make each puzzle significantly easier or harder for you than someone else. Making puzzles is tricky.&lt;/p&gt;&lt;p&gt;Why do the puzzles unlock at midnight EST/UTC-5? Because that's when I can consistently be available to make sure everything is working. I also have a family, a day job, and even need sleep occasionally. If you can't participate at midnight, that's not a problem; if you want to race, many people use private leaderboards to compete with people in their area.&lt;/p&gt;&lt;p&gt;I find the text on the site hard to read. Is there a high contrast mode? There is a high contrast alternate stylesheet. Firefox supports these by default (View -&amp;gt; Page Style -&amp;gt; High Contrast).&lt;/p&gt;&lt;p&gt;I have a puzzle idea! Can I send it to you? Please don't. Because of legal issues like copyright and attribution, I don't accept puzzle ideas, and I won't even read your email if it looks like one just in case I use parts of it by accident.&lt;/p&gt;&lt;p&gt;Did I find a bug with a puzzle? Once a puzzle has been out for even an hour, many people have already solved it; after that point, bugs are very unlikely. Start by asking on the subreddit.&lt;/p&gt;&lt;p&gt;Should I try to get a fast solution time? Maybe. Solving puzzles is hard enough on its own, but trying for a fast time also requires many additional skills and a lot of practice; speed-solves often look nothing like code that would pass a code review. If that sounds interesting, go for it! However, you should do Advent of Code in a way that is useful to you, and so it is completely fine to choose an approach that meets your goals and ignore speed entirely.&lt;/p&gt;&lt;p&gt;Why did the number of days per event change? It takes a ton of my free time every year to run Advent of Code, and building the puzzles accounts for the majority of that time. After keeping a consistent schedule for ten years(!), I needed a change. The puzzles still start on December 1st so that the day numbers make sense (Day 1 = Dec 1), and puzzles come out every day (ending mid-December).&lt;/p&gt;&lt;p&gt;What happened to the global leaderboard? The global leaderboard was one of the largest sources of stress for me, for the infrastructure, and for many users. People took things too seriously, going way outside the spirit of the contest; some people even resorted to things like DDoS attacks. Many people incorrectly concluded that they were somehow worse programmers because their own times didn't compare. What started as a fun feature in 2015 became an ever-growing problem, and so, after ten years of Advent of Code, I removed the global leaderboard. (However, I've made it so you can share a read-only view of your private leaderboard. Please don't use this feature or data to create a "new" global leaderboard.)&lt;/p&gt;&lt;p&gt;While trying to get a fast time on a private leaderboard, may I use AI / watch streamers / check the solution threads / ask a friend for help / etc? If you are a member of any private leaderboards, you should ask the people that run them what their expectations are of their members. If you don't agree with those expectations, you should find a new private leaderboard or start your own! Private leaderboards might have rules like maximum runtime, allowed programming language, what time you can first open the puzzle, what tools you can use, or whether you have to wear a silly hat while working.&lt;/p&gt;&lt;p&gt;Should I use AI to solve Advent of Code puzzles? No. If you send a friend to the gym on your behalf, would you expect to get stronger? Advent of Code puzzles are designed to be interesting for humans to solve - no consideration is made for whether AI can or cannot solve a puzzle. If you want practice prompting an AI, there are almost certainly better exercises elsewhere designed with that in mind.&lt;/p&gt;&lt;p&gt;Can I copy/redistribute part of Advent of Code? Please don't. Advent of Code is free to use, not free to copy. If you're posting a code repository somewhere, please don't include parts of Advent of Code like the puzzle text or your inputs. If you're making a website, please don't make it look like Advent of Code or name it something similar.&lt;/p&gt;&lt;head rend="h2"&gt;--- Credits ---&lt;/head&gt;&lt;p&gt;Puzzles, Code, &amp;amp; Design: Eric Wastl&lt;/p&gt;&lt;p&gt;Beta Testing:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Tim Giannetti&lt;/item&gt;&lt;item&gt;Ben Lucek&lt;/item&gt;&lt;item&gt;JP Burke&lt;/item&gt;&lt;item&gt;Aneurysm9&lt;/item&gt;&lt;item&gt;Andrew Skalski&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Community Managers: Danielle Lucek and Aneurysm9&lt;/p&gt;&lt;p&gt;Playing: You!&lt;/p&gt;&lt;head rend="h2"&gt;--- Legal ---&lt;/head&gt;&lt;p&gt;Advent of Code is a registered trademark in the United States. The design elements, language, styles, and concept of Advent of Code are all the sole property of Advent of Code and may not be replicated or used by any other person or entity without express written consent of Advent of Code. Copyright 2015-2025 Advent of Code. All rights reserved.&lt;/p&gt;&lt;p&gt;You may link to or reference puzzles from Advent of Code in discussions, classes, source code, printed material, etc., even in commercial contexts. Advent of Code does not claim ownership or copyright over your solution implementation.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://adventofcode.com/2025/about#faq_num_days"/><published>2025-10-26T08:19:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710065</id><title>Asbestosis</title><updated>2025-10-26T22:09:17.003111+00:00</updated><content>&lt;doc fingerprint="fe60955783648a74"&gt;
  &lt;main&gt;
    &lt;p&gt;This monument popped up in the middle of Barking recently. I thought it was very recently but it was actually unveiled in April 2022 and I'm just not very observant.&lt;/p&gt;
    &lt;p&gt;It says "In Memory of those who lost their lives because of exposure to asbestos".&lt;/p&gt;
    &lt;p&gt;And it's here because Barking has one of the highest rates of asbestos-related deaths in the country.&lt;/p&gt;
    &lt;p&gt;In 1913 the Cape Asbestos Company built a huge asbestos factory beside the River Roding in Barking. The company mined asbestos-bearing rock at several sites in South Africa, then shipped them in sacks to a private quay in Barking for processing. Hundreds of people were employed to mill the ore into usable fibres and then process these into lagging, packaging, pipes, resins, boards and all forms of insulation widely used in the building trade. They worked without masks or other protection, the dangers of asbestos either unknown or not thought worth bothering about. And hundreds of workers died, often many years later, of insidious chronic respiratory disease.&lt;/p&gt;
    &lt;p&gt;I found a 32-page booklet published by Cape Asbestos in the days before blue asbestos was recognised as dangerous and banned, which was as late as 1985. It shows workers with rolled-up sleeves and women leaning over unshielded machines, all potentially inhaling enough fibres to ultimately kill them. I read reports about the local school in Barking, barely 100 metres away, saying that the playground was often covered in fine dust which children rolled up and played with as if it were snow. I read that mesothelioma was so common in the area it was known as the ‘Barking Cough’. These were different times, but times that linger on.&lt;/p&gt;
    &lt;p&gt;Cape Asbestos's plant eventually closed in 1968 and in its place was built the Harts Lane council estate, which is still not the loveliest corner of Barking. It included two tall tower blocks called Colne House and Mersey House, both of which Barking &amp;amp; Dagenham council would now like to demolish. This is chiefly because they're old and covered in combustible cladding, but the additional complications of potentially disturbing polluted land puts any remediation out of financial reach. It's always the insulation you have to watch out for.&lt;/p&gt;
    &lt;p&gt;The memorial in Barking Town Square comprises a polished chunk of blue pearl granite and was unveiled on Workers' Memorial Day 2022 in a ceremony attended by several trade unionists and representatives of the London Asbestos Support Awareness Group. The emphasis is partly on remembrance and partly on the importance of standing up for workers' rights to make conditions better for all. As the inscription says, "Remember the Dead and Fight for the Living".&lt;/p&gt;
    &lt;p&gt;My grandfather worked for another Cape Asbestos plant on Tolpits Lane in Watford. Originally it had been run by Universal Asbestos Manufacturing but in 1967 the factory was acquired by Cape as part of a diversification into cement-based products. They made corrugated roofing, flat sheets, decorated sheets, slates, soil pipes, decking for flat roofs and reinforced troughing - that kind of thing - the asbestos moulded into a multiplicity of shapes for the benefit of the building trade.&lt;/p&gt;
    &lt;p&gt;To him Cape Universal was just a convenient place to work, a short walk across the moor for a day's shift and then home again for tea. He worked there for many years, from the 1930s to the 1960s, rising through the ranks from a labourer to a machine operator on the factory floor. On his death certificate his occupation was listed as 'Asbestos Moulder', and it was very much a premature death because this didn't end well.&lt;/p&gt;
    &lt;p&gt;I don't remember very much about my grandfather because he died when I was 8. I know he was there when I took my first steps in his back garden and I can remember sitting at his dining room table and hoping nobody would force me to eat the celery. My final memory is being led up to his bedroom, I suspect not long before his death, to see an ill old man laid out in bed and struggling to breathe. I don't know what was said, nor how short a time I stayed in his presence, indeed my strongest recollection is of the room itself with its austere cupboards and the curtains drawn. And then at the age of 67 he was gone.&lt;/p&gt;
    &lt;p&gt;My family fought for asbestosis to be recognised as his cause of death but were not successful. I've read recently of fellow workers working at the Tolpits Lane factory now getting six figure payouts in compensation, indeed it's hard to research this topic without ending up on legal websites with popups urging you to make a claim. Even four decades after the factory's closure there are still employees severely affected, and many more already passed, as the toxic legacy endures. The factory site is now a rather cleaner industrial estate and business park, indeed it's where the National Lottery's been based for the last 30 years because risk and loss are still in play.&lt;/p&gt;
    &lt;p&gt;Today my Dad reaches the grand old age of 87, a full 20 years more than his father lived. Science has moved on a long way since the 1970s, also educational opportunities and also workers' rights. Health and safety is sometimes much derided but it can genuinely save lives, even much extend them, rather than everyone continually moaning about additional costs and annoying procedures. If someone had shouted earlier and louder about the dangers of asbestos I might have known my grandfather better, my grandmother could have had many more years of married life and my father could have had a father for much longer.&lt;/p&gt;
    &lt;p&gt;My Dad lost his Dad at the age of 34, which is no age at all in the grand scheme of things. By contrast I still have my Dad at the age of 60, which has meant an extra quarter century of guidance, support, advice, love and always being there. How lucky am I? Every day we overlap with our parents is a blessing and I've had 22,000 of them, for all of which I'm truly grateful. We're off out later to celebrate with a slap-up dinner, or as slap-up as an 87-year-old stomach requires, which the wider family are greatly looking forward to. What Barking's memorial reminded me is that many families have not been so fortunate, and sometimes that loss can be very close to home.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://diamondgeezer.blogspot.com/2025/10/asbestosis.html"/><published>2025-10-26T08:34:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710366</id><title>Connect to a 1980s Atari BBS through the web</title><updated>2025-10-26T22:09:16.648925+00:00</updated><content>&lt;doc fingerprint="8b6d9aee7de1037b"&gt;
  &lt;main&gt;
    &lt;p&gt;Restoration from the MACE 1986 Version of AMIS - Atari Message Information System. This Basic XE BBS shows off extensive Atascii Graphics&lt;/p&gt;
    &lt;p&gt;This is a United Federation of Pirates BBS back from the mid-late 1980s Part of a Very Elite Group of Atari Boards. Run by Sysop - Giarc The Warden&lt;/p&gt;
    &lt;p&gt;As the name provides, You are about to Enter Area 52. From Sysop Phigan This BBS Provides Plenty of Atascii Graphics&lt;/p&gt;
    &lt;p&gt;The Basement BBS running BBS Express Pro! With RealAtari BBS Look and Feel, themed to the movie Office Space, this BBS has tons of features and surprises!&lt;/p&gt;
    &lt;p&gt;NiteLite BBS 1984 Restored and put online as another representation of basic code and BBS history for Atari. NiteLite BBS was used as the Atari Corp BBS.&lt;/p&gt;
    &lt;p&gt;The Very First BBS Express Pro! Board from the man Keith Ledbetter himself. The Sysop BF2K+ took over the BBS and keeping history available to Atari BBSing die hards.&lt;/p&gt;
    &lt;p&gt;Carina II BBS Running 24/7 300/1200/9600 with 20 Mega Online, Sysop Jay C. Returned Carina to its Glory! Themed to Breaking Bad, This is a great BBS for Old Skool Games!&lt;/p&gt;
    &lt;p&gt;Restoration from the MACE 1986 Version of AMIS - Atari Message Information System. This Basic XE BBS shows off extensive Atascii Graphics&lt;/p&gt;
    &lt;p&gt;This is a United Federation of Pirates BBS back from the mid-late 1980s Part of a Very Elite Group of Atari Boards. Run by Sysop - Giarc The Warden&lt;/p&gt;
    &lt;p&gt;As the name provides, You are about to Enter Area 52. From Sysop Phigan This BBS Provides Plenty of Atascii Graphics&lt;/p&gt;
    &lt;p&gt;The BBS Express ST Legend! DarkForce BBS brings a very active and feature rich BBS experience. Sysop The DarkLord&lt;/p&gt;
    &lt;p&gt;The Basement BBS running BBS Express Pro! With RealAtari BBS Look and Feel, themed to the movie Office Space, this BBS has tons of features and surprises!&lt;/p&gt;
    &lt;p&gt;NiteLite BBS 1984 Restored and put online as another representation of basic code and BBS history for Atari. NiteLite BBS was used as the Atari Corp BBS.&lt;/p&gt;
    &lt;p&gt;The Very First BBS Express Pro! Board from the man Keith Ledbetter himself. The Sysop BF2K+ took over the BBS and keeping history available to Atari BBSing die hards.&lt;/p&gt;
    &lt;p&gt;Carina II BBS Running 24/7 300/1200/9600 with 20 Mega Online, Sysop Jay C. Returned Carina to its Glory! Themed to Breaking Bad, This is a great BBS for Old Skool Games!&lt;/p&gt;
    &lt;p&gt;Running on RatSoft SFHQ has a host of features, game library, and networked message bases. Sysop Commodore Clifford&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.southernamis.com/ataribbsconnect"/><published>2025-10-26T09:31:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710721</id><title>You Already Have a Git Server</title><updated>2025-10-26T22:09:16.053641+00:00</updated><content>&lt;doc fingerprint="dcf8f5f9c827be83"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;You already have a git server:&lt;/head&gt;(Programming)&lt;p&gt;If you have a git repository on a server with ssh access, you can just clone it:&lt;/p&gt;&lt;code&gt;# This works. 
git clone ssh://username@hostname/path/to/repo
&lt;/code&gt;&lt;p&gt;You can then work on it locally and push your changes back to the origin server. By default, git won’t let you push to the branch that is currently checked out, but this is easy to change:&lt;/p&gt;&lt;code&gt;# Run this on the remote server. 
git config receive.denyCurrentBranch updateInstead
&lt;/code&gt;&lt;p&gt;This is a great way to sync code between multiple computers or to work on server-side files without laggy typing or manual copying. If you want to publish your code, just point your web server at the git repo:&lt;/p&gt;&lt;code&gt;git clone https://hostname/path/to/repo/.git
# You can get rid of the .git part of the command by either setting the
# server to remap it to a nicer URL or by just renaming the .git directory
# (although this stops you from running git server side)
&lt;/code&gt;&lt;p&gt;… although you will have to run this command server-side to make it cloneable:&lt;/p&gt;&lt;code&gt;# Create some files used by git-over-http:
# Should be repeated after making changes.
git update-server-info
&lt;/code&gt;&lt;p&gt;That’s a lot of work, so let’s set up a hook to do that automatically:&lt;/p&gt;&lt;code&gt;# Automatically run git update-server-info.
# Should be run server-side
cp .git/hooks/post-update.sample .git/hooks/post-update
chmod a+x .git/hooks/post-update
&lt;/code&gt;&lt;p&gt;Git hooks are just shell scripts, so they can do things like running a static site generator:&lt;/p&gt;&lt;code&gt;cat &amp;gt; .git/hooks/post-update &amp;lt;&amp;lt;EOF
#!/bin/sh
set -euo pipefail
cd /path/to/site
/path/to/generator
EOF
chmod a+x .git/hooks/post-update
&lt;/code&gt;&lt;p&gt;This is how I’ve been doing this blog for a while now: It’s very nice to be able to type up posts locally (no network lag), and then push them to the server and have the rest handled automatically.&lt;/p&gt;&lt;p&gt;It’s also backed up by default: If the server breaks, I’ve still got the copy on my laptop, and if my laptop breaks, I can download everything from the server. Git’s version tracking also prevents accidental deletions, and if something breaks, it’s easy to figure out what caused it.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://maurycyz.com/misc/easy_git/"/><published>2025-10-26T10:53:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45711062</id><title>Formal Reasoning [pdf]</title><updated>2025-10-26T22:09:14.323764+00:00</updated><content/><link href="https://cs.ru.nl/~freek/courses/fr-2025/public/fr.pdf"/><published>2025-10-26T12:03:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45712517</id><title>Myanmar military shuts down a major cybercrime center, detains over 2k people</title><updated>2025-10-26T22:09:13.988370+00:00</updated><content>&lt;doc fingerprint="3996df1832927c81"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Myanmar military shuts down a major cybercrime center and detains over 2,000 people&lt;/head&gt;
    &lt;head rend="h2"&gt;Myanmar military shuts down a major cybercrime center and detains over 2,000 people&lt;/head&gt;
    &lt;p&gt;BANGKOK (AP) — Myanmar’s military has shut down a major online scam operation near the border with Thailand, detaining more than 2,000 people and seizing dozens of Starlink satellite internet terminals, state media reported Monday.&lt;/p&gt;
    &lt;p&gt;Myanmar is notorious for hosting cyberscam operations responsible for bilking people all over the world. These usually involve gaining victims’ confidence online with romantic ploys and bogus investment pitches.&lt;/p&gt;
    &lt;p&gt;The centers are infamous for recruiting workers from other countries under false pretenses, promising them legitimate jobs and then holding them captive and forcing them to carry out criminal activities.&lt;/p&gt;
    &lt;p&gt;Scam operations were in the international spotlight last week when the United States and Britain enacted sanctions against organizers of a major Cambodian cyberscam gang, and its alleged ringleader was indicted by a federal court in New York.&lt;/p&gt;
    &lt;p&gt;According to a report in Monday’s Myanma Alinn newspaper, the army raided KK Park, a well-documented cybercrime center, as part of operations starting in early September to suppress online fraud, illegal gambling, and cross-border cybercrime.&lt;/p&gt;
    &lt;p&gt;It published photos displaying seized Starlink equipment and soldiers said to be carrying out the raid, though it was unclear when exactly they were taken.&lt;/p&gt;
    &lt;p&gt;KK Park is located on the outskirts of Myawaddy, a major trading town on the border with Thailand in Myanmar’s Kayin state. The area is only loosely under the control of Myanmar’s military government, and also falls under the influence of ethnic minority militias.&lt;/p&gt;
    &lt;p&gt;Maj. Gen. Zaw Min Tun, the spokesperson for the military government, charged in a statement Monday night that the top leaders of the Karen National Union, an armed ethnic organization opposed to army rule, were involved in the scam projects at KK Park.&lt;/p&gt;
    &lt;p&gt;The allegation was previously made based on claims that a company backed by the Karen group allowed the land to be leased. However, the Karen, who are part of the larger armed resistance movement in Myanmar’s civil war, deny any involvement in the scams.&lt;/p&gt;
    &lt;p&gt;Myanma Alinn said the army ascertained that more than 260 buildings were unregistered, and seized equipment, including 30 sets of Starlink satellite internet terminals. It said 2,198 individuals were detained though it did not give their nationalities.&lt;/p&gt;
    &lt;p&gt;Starlink is part of Elon Musk’s SpaceX company and the terminals link to its satellites. It does not have licensed operations in Myanmar, but at least hundreds of terminals have been smuggled into the Southeast Asian nation.&lt;/p&gt;
    &lt;p&gt;The company could not be immediately reached for comment Monday but its policy bans “conduct that is defamatory, fraudulent, obscene, or deceptive.”&lt;/p&gt;
    &lt;p&gt;There have been previous crackdowns on cyberscam operations in Myanmar earlier this year and in 2023.&lt;/p&gt;
    &lt;p&gt;Facing pressure from China, Thailand and Myanmar’s governments launched an operation in February in which they released thousands of trafficked people from scam compounds, working with the ethnic armed groups that rule Myanmar’s border areas.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://apnews.com/article/scam-centers-cybercrime-myanmar-a2c9fda85187121e51bd0efdf29c81da"/><published>2025-10-26T15:11:51+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45713253</id><title>Making the Electron Microscope</title><updated>2025-10-26T22:09:13.472177+00:00</updated><content>&lt;doc fingerprint="328cd3a71931043b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Making the Electron Microscope&lt;/head&gt;
    &lt;head rend="h3"&gt;In a little over a century, the electron microscope evolved from a tool barely capable of resolving virus particles into one able to capture atomic detail.&lt;/head&gt;
    &lt;p&gt;Biological structures exist across a vast range of scales. At one end are whole organisms, varying in size from bacteria only a few micrometers across to mammals measured in feet.1 These can be seen with the naked eye or with simple light microscopes, which have been in use since the mid-1600s. At the smaller end, however, are atoms, amino acids, and proteins, spanning angstroms2 to nanometers in size.&lt;/p&gt;
    &lt;p&gt;Observing molecules at this smaller scale allows us to untangle the finer mechanisms of life: how individual neurons connect and communicate, how the ribosomal machinery translates genetic code into proteins, or how viruses like HIV invade and hijack host cells. Resolving fine structures, whether the double membrane of a chloroplast, the protein shell of a bacteriophage, or the branching architecture of a synapse, provides the bridge between atomic detail and whole-organism physiology, taking us from form to function.&lt;/p&gt;
    &lt;p&gt;The ability to explore and map such minute mechanisms eluded scientists until the invention of the electron microscope. Conceived in the 1930s, it promised theoretical resolutions on the order of angstroms, nearly a hundred times finer than the most advanced light microscope of that era. In 1931, Ernst Ruska and his advisor Max Knoll, working at the Technical University in Berlin, designed the first prototype by replacing glass lenses with electromagnetic coils to focus beams of electrons instead of light.&lt;/p&gt;
    &lt;p&gt;That first instrument barely outperformed a magnifying glass in terms of resolution. But over the next century, refinements in design, sample preparation, and computation transformed the electron microscope into an indispensable tool for modern biology.&lt;/p&gt;
    &lt;p&gt;By 1938, scientists used an electron microscope to take a photograph of a virus — the mouse ectromelia orthopoxvirus — for the first time.3 And today, modern cryo-electron microscopy, in which samples are frozen in liquid ethane prior to imaging, can resolve individual atoms within proteins. During the COVID-19 pandemic, cryo-electron microscopy revealed the spike protein in the SARS-CoV-2 virus, which directly influenced the development of COVID vaccines. The technique also revealed a protein receptor that senses heat and pain, demonstrating how it translates physical signals to our nervous system, a breakthrough discovery that earned the 2021 Nobel Prize in Physiology.&lt;/p&gt;
    &lt;p&gt;Even as electron microscopes have allowed us to view ever smaller structures with clarity, challenges remain. One is that the images remain limited to static snapshots. Because samples must be imaged in a vacuum, it is impossible to directly observe the dynamism of live cells.4 In addition, specimens must be extremely thin to allow the electron beam to pass through, which prevents imaging of thick tissues. And finally, beyond these biological constraints, electron microscopes are physically large, can cost millions of dollars, and demand specialized facilities, training, and expertise to operate.&lt;/p&gt;
    &lt;p&gt;Despite these limitations, electron microscopy remains a powerful tool in biology, bridging the scales between molecular structure and living function. The story of its discovery is one of persistent ingenuity, involving a large cast of characters and numerous breakthroughs that helped make the modern electron microscope possible.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Seeds of an Idea&lt;/head&gt;
    &lt;p&gt;By the late 19th century, biologists knew they were approaching the resolution limit of the light microscope. In their quest to see biology in finer detail, they had reached a barrier that light could not cross.&lt;/p&gt;
    &lt;p&gt;Proof of this came from Ernst Abbe, a professor of experimental physics and mathematics at the University of Jena in Germany. Until Abbe, microscope design had been more of an art than a science, with innovators building optical instruments through trial and error. Carl Zeiss, who had begun manufacturing microscopes in the 1850s, approached Abbe in 1866 about using his scientific expertise for the construction of microscopes. Together, they began developing tools to improve the uniformity and quality of optical lenses.&lt;/p&gt;
    &lt;p&gt;In the early 1870s, while working on the microscope objectives (the lens closest to the specimen in a microscope), Abbe discovered that the sharpness of an image did not only depend on how perfectly a lens was ground but also on how much diffracted light from the specimen the lens could capture. He realized that fine details in a specimen bend light into wide angles, and only objectives with a sufficiently large opening could collect those rays to bring the image into focus.&lt;/p&gt;
    &lt;p&gt;From this insight, Abbe defined the concept of the “numerical aperture” (a measure of how much light a lens can gather5) and showed that the smallest visible detail is limited by the wavelength of light divided by twice this value.6 Even with ultraviolet light, at the short end of the visible spectrum (400 nanometers), the limit of resolution was 200 nanometers — larger than most viruses, intracellular structures, and protein complexes.&lt;/p&gt;
    &lt;p&gt;Hope of resolving structures beneath this resolution boundary only arrived in 1895, when the German physicist Wilhelm Röntgen discovered X-rays, a form of high-energy electromagnetic radiation with wavelengths shorter than those of ultraviolet light, and published a (now-iconic) image of his wife Bertha’s hand, with her bones and wedding ring clearly visible. This was the first time the hidden insides of the body could be seen without dissection. The bones, joints, and even metal fragments lodged inside the body could be made visible.&lt;/p&gt;
    &lt;p&gt;Between 1913 and 1915, the British physicist William Henry Bragg and his son, William Lawrence Bragg, developed a technique called X-ray crystallography. Working with simple crystals such as salt and diamond, they showed that when X-rays strike a regularly ordered crystal lattice, they diffract at specific angles that reveal the spacing of atoms within the crystal. The method works because X-rays have wavelengths about the size of chemical bonds, allowing the beams to reach and bounce off each atom in the lattice, reflecting the structure at an atomic scale. By applying a mathematical operation called a Fourier transform to these diffraction patterns captured on photographic plates, the Braggs reconstructed the three-dimensional arrangements of the atoms in the crystal.&lt;/p&gt;
    &lt;p&gt;Biomolecules, however, are not naturally crystalline. To study them, they had to be laboriously extracted, purified, and crystallized, separating them from their environment. The X-ray crystallography of biomolecules began in the 1930s, ushering in the field of structural biology. With sub-nanometer resolution, the invention of X-ray crystallography enabled a revolution in molecular biology. It was applied, for example, to solve the structures of DNA, hemoglobin, and insulin, molecules that have shaped the trajectory of modern biology.&lt;/p&gt;
    &lt;p&gt;But many biological targets remained out of reach. Viruses could rarely be crystallized, and cellular structures often lost their integrity when removed from their natural contexts. Thus, even with X-ray crystallography revealing the structures of small proteins and light microscopy capable of imaging cells, a gulf persisted between the study of small molecules and whole cells, which left much of biology invisible.&lt;/p&gt;
    &lt;p&gt;Meanwhile, access to the parallel world of electrons was beginning to open. At the turn of the 20th century, Hans Busch, a German physicist at the University of Jena, was studying how electron beams behaved in magnetic fields. His work built on decades of experiments with cathode rays, streams of electrons released when a high voltage is applied inside a glass tube.&lt;/p&gt;
    &lt;p&gt;Cathode rays had become central to both physics and technology: Physicists used them to probe how electrons scattered, ionized gases, and responded to electric and magnetic fields, and engineers used them to form the basis of devices such as the radio and television. It was while trying to better understand and control these beams that Busch postulated his remarkable theories.&lt;/p&gt;
    &lt;p&gt;In 1926 and 1927, Busch published two papers demonstrating mathematically that a magnetic coil could focus an electron beam in the same manner that a glass lens focuses light. While it was already known that coils could bend electron beams,7 Busch’s key insight was to frame this behavior in the language of optics: Electron beams could be treated like light rays. Concepts such as focal length, magnification, image formation, and even lens aberrations could all be applied to electrons. This meant that the well-developed theory of optical systems could be imported almost directly to other disciplines.&lt;/p&gt;
    &lt;p&gt;The Nobel Prize–winning physicist and inventor of holography, Denis Gabor, later reflected on Busch’s contribution in a 1942 lecture: “Busch’s paper was more than an eye-opener; it was almost like a spark in an explosive mixture. In 1927, the situation in physics was such that nothing more than the words ‘electron lens’ were needed to start a real burst of creative activity.”&lt;/p&gt;
    &lt;p&gt;And so it was that Busch’s idea sparked the birth of electron optics. Within a few years, at least three independent inventors would lay claim to having designed the electron microscope, all tracing their inspiration back to his initial insight.&lt;/p&gt;
    &lt;head rend="h2"&gt;The First Electron Microscope&lt;/head&gt;
    &lt;p&gt;In 1928, the High Tension Laboratory at the Technical University in Berlin (a premier research facility focused on electrical engineering in the interwar years) was researching high-voltage power transmission and insulation. A persistent obstacle was the electrical surge often caused by thunderstorms, which repeatedly damaged the lab’s equipment. But before scientists could design a way to mitigate the problem, they first needed to understand it: Exactly when did these surges occur, and how fast or large were the voltage fluctuations?&lt;/p&gt;
    &lt;p&gt;To tackle this, the lab hoped to recruit a graduate student to create a proof-of-concept for a high-speed oscilloscope, a device that could directly visualize electrical pulses. A cathode ray oscilloscope worked by firing a beam of electrons across a phosphorescent screen inside a vacuum tube, where the impact produced a bright spot of light. Electric fields could be used to deflect the beam horizontally (to represent time) and vertically (to represent signal amplitude) so that electrical signals appeared as moving lines of light that could be observed directly.&lt;/p&gt;
    &lt;p&gt;Although cathode ray oscilloscopes were already in use, they served mainly to capture slower signals. The high voltage surges experienced in thunderstorms or short circuiting events, though, flashed by in one hundred millionths of a second, leaving almost no trace on the screen. To make such fleeting signals visible, the intensity of the electron beam had to be increased, which meant focusing the beam into as small and powerful a spot as possible. Only one student applied to take on the challenge: 21-year-old Ernst Ruska.&lt;/p&gt;
    &lt;p&gt;Ruska was born into a family of scientists in Heidelberg, Germany, in 1906. He had been exposed to optics from an early age, as his uncle was an astronomer at the local observatory and his father, a science historian, owned a large optical microscope that Ruska was strictly forbidden to touch. He recalls in his Nobel lecture: “We would see on a table in the other room the pretty yellowish wooden box that housed my father’s big Zeiss microscope … He sometimes demonstrated to us interesting objects under the microscope, it is true; for good reasons, however, he feared that children’s hands would damage the objective or the specimen by clumsy manipulation of the coarse and line drive. Thus, our first relation to the value of microscopy was not solely positive.”&lt;/p&gt;
    &lt;p&gt;Unlike the rest of his family, Ruska’s passion leaned less toward science and more toward technical projects and problem-solving through engineering. While the other Ruska children spent their weekends with their father classifying rock samples or identifying bird calls, Ernst preferred tinkering with electrical switchboards and reading Max Eyth’s Behind Plow and Vice, a memoir on engineering and invention. And when he grew older, he recalls being fascinated by his high school physics teacher’s explanations of the movement of electrons through electrostatic fields and the limitations of light microscopes — an interest he carried into adulthood.&lt;/p&gt;
    &lt;p&gt;At the High Tension Laboratory, under Max Knoll, Ruska began building the much-anticipated oscilloscope. In this device, the incoming electrical current would pass through the vertical deflection plates, causing the electron beam to shift in proportion to the amplitude of the surge. To sharpen the image, a magnetic focusing coil was placed upstream of the deflection plates, concentrating the beam into a small, bright spot before it reached the phosphorescent screen. Ruska’s task was to determine the optimal placement of these coils so that the dot appeared as sharp as possible.&lt;/p&gt;
    &lt;p&gt;For guidance, Ruska turned to Hans Busch’s recent papers on the lens-like action of magnetic fields on electron beams. In these papers, Busch had not only shown that a coil could act as a “magnetic electron lens,” but had also worked out the formulas describing electron trajectories in such a field and how the focal length changed with coil current. Using these calculations, Ruska confirmed Busch’s theories experimentally and determined the precise coil placement needed to bring the beam to a sharp focus. He then placed a small aperture in the beam’s path and, by varying the coil current, was able to project and record an image of the aperture at different magnifications on a screen.&lt;/p&gt;
    &lt;p&gt;As Ruska later recalled in his Nobel lecture, his 1929 Master’s thesis contained “numerous sharp images with different magnifications of an electron-irradiated anode aperture … the first recorded electron-optical images.”&lt;/p&gt;
    &lt;p&gt;By 1930, as Germany’s economy collapsed under the weight of post-war reparations and global depression, Ruska was unable to find work in industry and remained at the university for doctoral studies. Initially unsure of a research direction, he continued experimenting with magnetic lenses. He reasoned that if one coil could produce a magnified image, two in sequence might enlarge it further — the conceptual birth of the electron microscope.&lt;/p&gt;
    &lt;p&gt;By April 1931, Ruska had constructed a two-stage imaging system with a total magnification of 14.4 times — still far below the roughly 1000-fold magnification achieved by high-quality light microscopes of the time. The system began with a cathode inside a vacuum tube, which emitted electrons when a high voltage was applied. These electrons were accelerated toward an anode and passed through a small aperture, forming a narrow beam, much like light through a pinhole. Magnetic coils wrapped around the tube acted as electron lenses. The first coil, placed close to the object, served as the objective lens, bringing the transmitted electrons into focus and forming an intermediate image. A second coil downstream acted as a projector lens, refocusing and enlarging that intermediate image so it could be captured onto a fluorescent screen.&lt;/p&gt;
    &lt;p&gt;By carefully tuning the currents in both coils, Ruska could control the focal lengths and achieve much higher magnifications than with a single lens. The final image appeared as glowing light patterns on the screen, with bright areas where electrons passed through the specimen and dark regions where they were absorbed or scattered.&lt;/p&gt;
    &lt;p&gt;These images, photographed through a window in the tube, were the first electron micrographs, created by channeling electrons through successive magnetic lenses in a multistage system. Although its resolution was quite modest by today’s standards, this instrument is regarded as the first electron microscope. Ruska submitted the results for publication that same month, though the paper did not appear until August. Unfortunately, unbeknownst to him, between its submission and publication, a patent for an electron microscope had already been submitted by another inventor: Reinhold Rüdenberg.&lt;/p&gt;
    &lt;head rend="h2"&gt;From Paralysis to First Patents&lt;/head&gt;
    &lt;p&gt;Rüdenberg, born in Hanover in 1883, came of age during a golden decade of physics marked by Röntgen’s discovery of X-rays, the identification of the electron, and the first studies of radioactivity. As a high-school student, he eagerly replicated many of these experiments, building a two-way Morse telegraph, powering an X-ray tube with a hand-wound inductor, and constructing a radio transmitter and receiver. He received his first patent, for a radio oscillator, while still an electrical engineering student at the Technical University of Hanover.&lt;/p&gt;
    &lt;p&gt;After earning his doctorate, Rüdenberg spent three years (1906-1908) at Göttingen University, working in applied mechanics and collaborating with leading figures in electron theory, including Hans Busch. In 1908, he joined Siemens in Berlin as a design engineer and, by 1923, had risen to the position of Chief Electrical Engineer.&lt;/p&gt;
    &lt;p&gt;While at Siemens, Rüdenberg developed several new electrical designs, among which were cooling systems for high-voltage generators, one of the first 60-megawatt turbine generators, conductors for high-voltage transmission lines, and relay systems for distant power stations. He also spent three years apprenticing in Siemens’ patent department, an experience that doubtless helped fuel his prolific output of them. He was a prolific inventor and is estimated to have held over a hundred unique patents.&lt;/p&gt;
    &lt;p&gt;In the fall of 1930, while on vacation, Rüdenberg’s youngest son fell gravely ill. The three-year-old developed a high fever and paralysis. He had contracted polio. At a time when thousands were infected each year in Germany, with fatality rates around 15 percent, the diagnosis was devastating. Worse still, almost nothing was known about the “germ” responsible: No diagnostic test, no treatment, and no vaccine existed.&lt;/p&gt;
    &lt;p&gt;“This amazing fact and its significance for science and health gave me no rest in my thoughts,” Rüdenberg later recalled. “During many sleepless nights, tortured by the fate of my son, agonizing fantasies came and went, how to find ways to examine these minute germs, how possibly to attack them in order to attain healing or at least a standstill of the disease. Certainly, an agent finer than light had to be found to make these tiny viruses of immeasurable size visible to the human eye.”&lt;/p&gt;
    &lt;p&gt;Motivated by both paternal concern and engineering instinct, Rüdenberg began searching for a way to see such viruses. He considered X-rays but quickly dismissed them, as no method existed to focus the X-ray particles like visible light. Electrons, however, held promise. Having studied their behavior with Busch at Göttingen, he was aware of the focusing power of magnetic fields, and when Busch later published his 1926 and 1927 papers on magnetic electron lenses, he even sent copies directly to Rüdenberg.&lt;/p&gt;
    &lt;p&gt;During the winter of 1930-1931, Rüdenberg sketched out a complete conceptual design for an electron microscope, detailing its electron source, electrostatic lenses for focusing and magnification, and a fluorescent screen for visualization. In May 1931, just one week before Ruska publicly presented his own work, Rüdenberg submitted a series of patent applications describing this electron microscope.&lt;/p&gt;
    &lt;p&gt;Meanwhile, unaware of Rüdenberg’s patents, Ruska also pressed forward. For his doctoral research, Ruska focused on improving the electromagnetic lens, whose magnification ability still lagged far behind the optical lenses of conventional light microscopes. At the time, a state-of-the-art light microscope could magnify images up to about 1000 times, whereas in 1932, extant electron microscopes were still stuck at a paltry 17-fold.&lt;/p&gt;
    &lt;p&gt;To improve their performance, Ruska realized he needed to decrease the electron microscope’s focal length, since a shorter focal length would bend electrons more strongly, bringing them to a smaller focal point and producing a higher magnification. He discovered that encasing the coil in iron did so dramatically. This led to the invention of the polepiece lens, now a fundamental component of all electron microscopes.&lt;/p&gt;
    &lt;p&gt;Polepieces are shaped iron cylinders, each with a coil, placed a few millimeters apart. The narrow gap concentrates the magnetic field, producing a lens with stronger focusing ability and a shorter focal length. This not only increased the magnification but also provided more space to add a third lens (a condenser lens upstream of the sample) within the cathode ray column.&lt;/p&gt;
    &lt;p&gt;During this time, Ruska and Knoll also made a bold attempt to estimate the theoretical resolution limit of the electron microscope. They applied the formula used in light microscopy and substituted the wavelength of electrons for that of light. For electrons accelerated at 75 kilovolts (higher voltages would increase the electrons’ energy and further shorten their wavelength, which, in principle, yields even finer detail), they arrived at a resolution limit of 2.2 angstroms (2.2 x 10-10 meters).8&lt;/p&gt;
    &lt;p&gt;Ruska submitted his dissertation in mid-1933 and later that year built a vastly improved microscope, achieving magnification up to 12,000 times. The images, taken of a scrap of aluminum foil, exceeded the resolution limit of the light microscope for the first time (even though the high-energy beam incinerated the samples).&lt;/p&gt;
    &lt;p&gt;Ruska observed that very thin foils produced sharper images with stronger contrast while also surviving longer under the beam. He reasoned that, in thin specimens, most electrons passed through without losing energy, elastically scattered (diffracted) rather than absorbed. These transmitted electrons still carried structural information and built up the image on the screen. Because fewer electrons deposited energy in the material, less heating and radiation damage occurred, allowing longer exposures and finer detail.&lt;/p&gt;
    &lt;p&gt;By 1934, Ruska had published these findings and even speculated about imaging biological material. He stated, “This microscopy is accessible to any objects (including all organic ones), provided that they can be prepared as sufficiently thin foils and introduced into the vacuum without suffering damage (structural alteration).” And, “For better visualization of such objects — one might think, for example, of nerve fibrils with their extremely fine structure — it will perhaps be necessary to develop ‘staining’ methods adapted to the problem, such as impregnation with metal salts (silvering), similar to those already commonly used in ordinary histological microscopy.”&lt;/p&gt;
    &lt;p&gt;Rüdenberg’s design, meanwhile, was never built at Siemens. The political upheaval in Germany halted his advancement, as a German of Jewish descent, threatened his very survival. In 1936, with Siemens’ assistance, he and his family fled to England and, two years later, emigrated to the United States, where he became a professor of electrical engineering at Harvard.&lt;/p&gt;
    &lt;p&gt;Ironically, as a German, Rüdenberg was received with ambivalence; in 1942, during the war, his U.S. patents on the electron microscope were seized by the Alien Property Custodian, a government office tasked with seizing assets belonging to citizens of enemy nations during wartime. Post-war, he had to fight lengthy legal battles to reclaim them. He later consulted for Farrand Optical Company, a small company in New York which attempted to build an electrostatic microscope based on his patents, a venture which failed commercially. Happily, even as these obstacles abounded, his son made a full recovery from his polio.&lt;/p&gt;
    &lt;head rend="h2"&gt;From Prototype to Commercialization&lt;/head&gt;
    &lt;p&gt;By the early 1930s, electron microscopy had surpassed the resolving power of light microscopes, promising magnifications several orders of magnitude higher. Yet progress was uneven.&lt;/p&gt;
    &lt;p&gt;In Belgium, the Hungarian physicist Ladislaus Marton built his own instrument by 1932 and produced the first biological electron micrographs: images of the insectivorous plant Drosera intermedia and the blood-red bacterium, Serratia marcescens.&lt;/p&gt;
    &lt;p&gt;To make such delicate samples visible, Marton turned to osmium tetroxide, a heavy metal compound that binds strongly to cellular membranes. By coating thin sections of Drosera intermedia with osmium, he increased their ability to scatter electrons, resulting in clearer contrast in the final image. He also introduced an electronic shutter, a device that blocked the electron beam during focusing and opened only for the brief moment of exposure. This protected fragile specimens from unnecessary radiation damage while still allowing sharp images to be captured. For a time, it seemed Marton was leading the field.&lt;/p&gt;
    &lt;p&gt;Ruska, who had completed his PhD in 1933 and took a job in the television industry, returned to the field. He joined forces with Bodo von Borries, a longtime collaborator and future brother-in-law, to push the technology toward commercial viability. Between 1933 and 1935, they filed eight patents and canvassed a wide range of institutions for financial support. They approached the Kaiser Wilhelm Institute, the board of optical manufacturer Carl Zeiss, and even steel companies to see if they had any need for electron microscopes. While initial efforts with Zeiss seemed promising, they collapsed when Zeiss withdrew due to Siemens’s rights to Reinhold Rüdenberg’s earlier patents.&lt;/p&gt;
    &lt;p&gt;Despite these setbacks, interest in electron microscopy mounted. At the Technical School in Berlin, students modified Ruska’s prototypes to capture striking images of a fly’s leg hair magnified 25,000 times. To make the tissues more resistant to the beam, they used potassium dichromate, a fixative that coss-linked lipids and proteins in the tissue so it was less likely to collapse or vaporize. This fixative also increased scattering contrast, making fine details easier to discern.&lt;/p&gt;
    &lt;p&gt;Specimens were cooled to –17 °C, which reduced thermal motion and slowed the buildup of heat from inelastic electron collisions. Cooling didn’t prevent radiation damage, but it delayed it long enough for images to be recorded. These were early explorations of the cryogenic methods that would later define the field.&lt;/p&gt;
    &lt;p&gt;By 1936, electron microscopy centered around a highly active (albeit small) community with Marton in Belgium, Ruska and von Borries in Berlin, and younger researchers at their university extending the work. However, all still lacked financial support to develop a commercial system.&lt;/p&gt;
    &lt;p&gt;Momentum shifted when Ruska spoke at the 1936 German Conference of Physicists and Mathematicians. His brother Helmut, a physician newly appointed at Berlin’s University Hospital, added crucial medical endorsement by promoting the microscope’s potential in medical applications. This medical credibility brought Siemens back to the table. With both Siemens and Zeiss expressing interest, Ruska and von Borries chose Siemens, which already held the Rüdenberg patents and had stronger electrotechnical expertise.&lt;/p&gt;
    &lt;p&gt;In February 1937, a decade after Hans Busch first theorized the electron lens, Siemens launched development of the first commercial electron microscope in Berlin. By 1938, the first model was available, offering magnification of up to 30,000 times.&lt;/p&gt;
    &lt;p&gt;The device was a triumph of Ruska’s bench-top experiments and relentless iteration. At the top of the microscope column sat the cathode, generating electrons accelerated downward at high voltage. A condenser lens collected, narrowed, and focused the electron beam to illuminate the sample, which was introduced through a small vacuum airlock and held on a stage. Immediately below it lay the objective lens, a powerful magnetic coil that brought the transmitted electrons into sharp focus, forming a first, intermediate image. A second coil, the projection lens, then enlarged this image and cast it onto a fluorescent screen, where bright and dark regions revealed the specimen’s structure. Researchers could view the glowing picture directly through a built-in window or capture it on photographic plates housed beneath the screen. To maintain stable operation, the entire column was kept under high vacuum by a mercury diffusion pump.&lt;/p&gt;
    &lt;p&gt;A shared Siemens laboratory was set up and became an important hub for producing some of the earliest biological electron micrographs. Directed by Helmut Ruska, it housed four instruments available to visiting scientists, many of them biologists and medical researchers. In 1939 alone, nearly 2,000 images were produced, leading to 23 publications. Among them were the first electron micrographs of viruses, bacteriophages, and fine biological details never before seen.&lt;/p&gt;
    &lt;p&gt;The lab itself was destroyed in an air raid in 1944, and it would take nearly a decade before Siemens in Germany regained its footing in electron microscopy. But by then, the electron microscopy spark had spread: Laboratories in Britain and the United States continued to drive the field forward, building on the groundwork laid in Berlin. Ernst Ruska would go on to win the Nobel Prize in Physics in 1986 for his fundamental work in electron optics and microscopy.&lt;/p&gt;
    &lt;head rend="h2"&gt;Inside an Electron Microscope&lt;/head&gt;
    &lt;p&gt;Nearly a century after its invention, the electron microscope has transformed from a tool barely capable of resolving fuzzy virus particles into one capable of capturing atomic detail. While its progress has mostly been marked by steady refinements, it has also been punctuated by key breakthroughs.&lt;/p&gt;
    &lt;p&gt;For instance, from the start, electron microscopy for biology faced a water problem. Because the microscope operates under high vacuum, liquid water evaporates instantly, leaving delicate biological samples collapsed or distorted. To avoid this, aqueous samples had to be dried, fixed, or stained, which produced recognizable images but with obvious artifacts, such as shrunken cells, ruptured membranes, and structural distortions that no longer reflected the living state. Through the 1940s and 1950s, embedding samples in resins and the use of ultra-thin sectioning made cellular ultrastructure visible, while freeze-drying and early cryogenic sectioning offered partial preservation of hydrated material, though the results were still plagued by distortion.&lt;/p&gt;
    &lt;p&gt;A breakthrough came in the early 1980s, when Jacques Dubochet and his colleagues at the European Molecular Biology Laboratory in Heidelberg demonstrated that water could be vitrified; that is, cooled so rapidly that it solidifies into glass rather than crystallizing, finally allowing biomolecules to be preserved and imaged as they are in life.&lt;/p&gt;
    &lt;p&gt;In parallel, computational techniques were improving. Beginning in the 1970s, Joachim Frank developed statistical methods for aligning and averaging thousands of noisy electron micrographs of individual macromolecules. This “single-particle analysis” transformed faint, low-contrast images into coherent 3D reconstructions. When combined with Dubochet’s vitrification method, the two advances gave rise to single-particle cryo-electron microscopy: Molecules suspended in vitreous ice could be imaged in random orientations and computationally combined into detailed three-dimensional structures.&lt;/p&gt;
    &lt;p&gt;Three decades later, with the arrival of direct electron detectors, developed with the efforts of Richard Henderson and with more powerful algorithms, single-particle cryo-EM entered its “resolution revolution,” routinely delivering near-atomic detail and firmly establishing itself as one of the central methods of structural biology.&lt;/p&gt;
    &lt;p&gt;Today’s most advanced cryo-electron microscopes stand nearly two stories tall, cost millions of dollars, and operate with breathtaking precision. But they still rest on the same foundation laid in the 1930s: a beam of electrons, shaped by magnetic fields, interacting with matter to reveal what light cannot.&lt;lb/&gt;At the top of the vertical column is the electron gun, the source of the beam. A fine tungsten filament or sharp field-emission tip is held at high negative voltage, often 200–300 kilovolts, so electrons are released and accelerated down the column. At these energies, electrons travel close to the speed of light, with wavelengths thousands of times shorter than visible light, giving them their extraordinary resolving power. To prevent scattering, the column is maintained in an ultra-high vacuum, as even trace gases could deflect or scatter the beam.&lt;/p&gt;
    &lt;p&gt;Magnetic lenses, made of coiled wire encased in iron polepieces, focus and steer the electrons much like glass lenses bend light. The condenser lens narrows the beam onto the sample, while the objective lens forms the first magnified image. Additional projector lenses enlarge this image and deliver it to a detector.&lt;/p&gt;
    &lt;p&gt;When the beam passes through the specimen, electrons interact with its atoms. Some scatter elastically, shifting phase without losing energy; others scatter inelastically, losing energy, and are either absorbed or filtered out. The transmitted electrons carry structural information, encoded as variations in amplitude and phase, and create a contrast image on the detector.&lt;/p&gt;
    &lt;p&gt;In cryo-EM, millions of such low-contrast 2D projections are collected, each a noisy snapshot of a molecule in a random orientation. Computational algorithms align, classify, and combine them, using a mathematical method that breaks the images down into their underlying patterns of waves (using the Fourier transform), then piece those patterns back together to form a detailed 3D map.&lt;/p&gt;
    &lt;p&gt;The result begins as a grainy micrograph, but when assembled and refined, this picture reveals extraordinary detail: the honeycomb lattice of graphene, the folds of a viral capsid, or the ribosome caught mid-translation. &lt;lb/&gt;Today, no single imaging method captures everything. For following fast processes, tracking molecules in living cells, or imaging whole organisms, light microscopy remains indispensable. For atomic resolution of well-ordered proteins, X-ray crystallography is still unmatched. &lt;/p&gt;
    &lt;p&gt;But when it comes to bridging the scales between atoms and cells, there is no better tool than the electron microscope. The same instrument that in 1938 revealed the faint silhouettes of mouse ectromelia virus now resolves viral proteins at the scale of a chemical bond, an arc of progress that has helped biologists redefine what it means to “see.”&lt;/p&gt;
    &lt;p&gt;Smrithi Sunil is a research scientist developing imaging techniques to study how the brain works across scales. She has developed multimodal microscopy methods to bridge molecular, cellular, and systems-level measurements of structure and function. She also writes about science and metascience on her Substack, Engineering Discovery.&lt;/p&gt;
    &lt;p&gt;Thanks to Nicholas Porter and Alicia Botes for reading a draft of this essay. Lead image by Ella Watkins-Dulaney, adapted from Vossman/Wikimedia and Ernst Ruska. Whole-cell animation and video by Martina Maritan, Scripps Research.&lt;/p&gt;
    &lt;p&gt;Cite: Sunil, S. “Making the Electron Microscope.” Asimov Press (2025). https://doi.org/10.62211/57hg-22fw&lt;/p&gt;
    &lt;p&gt;One of the smallest known whole organisms is the bacteria Mycoplasma genitalium roughly 200 nm across. In contrast, the mycelium network Armillaria ostoyae in the Malheur National Forest in Oregon is possibly the largest living organism, covering almost four square miles and weighing around 35,000 tons.&lt;/p&gt;
    &lt;p&gt;The length between chemical bonds is measured in Angstroms, named after Swedish physicist Anders Jonas Angstrom who first described the unit.&lt;/p&gt;
    &lt;p&gt;A year later, in 1939, Gustav Kausche, Edgar Pfankuch, and Helmut Ruska reported the first images of the tobacco mosaic virus (TMV). Although TMV is often cited as the “first” virus to be imaged with an electron microscope since TMV was a classic model virus in biology and its rod-shaped form was immediately recognizable, the mouse orthopoxvirus micrographs technically appeared earlier.&lt;/p&gt;
    &lt;p&gt;To work around this, scientists capture dynamics indirectly by freezing specimens at different stages of a process (such as during the assembly of a protein complex) and then reconstruct the sequence from these static frames.&lt;/p&gt;
    &lt;p&gt;Numerical aperture NA = n sin θ, where n is the refractive index of the medium and θ is the half-angle of the widest cone of light the lens can accept.&lt;/p&gt;
    &lt;p&gt;Twice this value arises because fine structures in a specimen diffract light into symmetric beams on opposite sides of the optical axis. When both of these beams are captured by the objective and brought together at the image plane, they interfere with reconstructing the alternating patterns of light and dark that represent the specimen’s fine detail. Note that Abbe’s formula is for coherent transmitted light and not for fluorescent imaging. In fluorescence microscopy, each molecule emits light independently rather than by interfering wavefronts, so the image is not formed by overlapping diffraction orders. The resolution is instead limited by the microscope’s point spread function, described by the Rayleigh criterion (d = 1.22 λ / 2 NA), which sets the smallest distance at which two fluorescent emitters can be distinguished.&lt;/p&gt;
    &lt;p&gt;Even before “electrons” were named, Julius Plücker showed in the 1850s that magnetic fields could deflect the glowing path of cathode rays. Johann Hittorf (1869) and Kristian Birkeland (1896) had independently used magnetic coils to focus them. Hans Busch was the first to provide mathematical calculations for the electron trajectories during this focusing action.&lt;/p&gt;
    &lt;p&gt;This resolution was, in fact, achieved 40 years later. Today, electron microscopy has even surpassed that mark: Scientists have resolved biological structures to well below 2 angstroms, including the GABA receptor, a membrane protein channel that mediates inhibitory neurotransmission, at 1.7 angstroms. In this system, the electrons were accelerated to 300 kilovolts, yielding a resolution better than the one Ruska proposed with only 75 kilovolts.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.asimov.press/p/electron-microscope"/><published>2025-10-26T16:46:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45713738</id><title>Alzheimer's disrupts circadian rhythms of plaque-clearing brain cells</title><updated>2025-10-26T22:09:13.269832+00:00</updated><content>&lt;doc fingerprint="7e0030234a219fc7"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Alzheimer’s disrupts circadian rhythms of plaque-clearing brain cells&lt;/head&gt;&lt;p&gt;Mouse study shows how disease reprograms genes in specialized cells involved in amyloid removal&lt;/p&gt;Getty Images&lt;p&gt;Alzheimer’s disease is notorious for scrambling patients’ daily rhythms. Restless nights with little sleep and increased napping during the day are early indicators of disease onset, while sundowning, or confusion later in the day, is typical for later stages of the disease. These symptoms suggest a link between the progression of the disease and the circadian system — the body’s internal clock that controls our sleep and wake cycle — but scientists did not know the full nature of the connection.&lt;/p&gt;&lt;p&gt;Researchers from Washington University School of Medicine in St. Louis have now shown in mice that the circadian rhythms within particular brain cells are disrupted in Alzheimer’s disease in ways that change how and when hundreds of genes regulate key functions in the brain.&lt;/p&gt;&lt;p&gt;The findings, published October 23 in Nature Neuroscience, suggest that controlling or correcting these circadian rhythms could be a potential way to treat the disease.&lt;/p&gt;&lt;p&gt;“There are 82 genes that have been associated with Alzheimer’s disease risk, and we found that the circadian rhythm is controlling the activity of about half of those,” said Erik S. Musiek, MD, PhD, the Charlotte &amp;amp; Paul Hagemann Professor of Neurology at WashU Medicine, who led the study. In mice modeling Alzheimer’s disease, the typical daily activity patterns of those genes were altered. “Knowing that a lot of these Alzheimer’s genes are being regulated by the circadian rhythm gives us the opportunity to find ways to identify therapeutic treatments to manipulate them and prevent the progression of the disease.”&lt;/p&gt;&lt;p&gt;Musiek, the co-director of the Center on Biological Rhythms and Sleep (COBRAS) at WashU Medicine and a neurologist who specializes in aging and dementia, said that changes in sleep patterns are among the most frequent concerns reported to him by caregivers of Alzheimer’s patients. He and colleagues have previously shown that these changes begin in Alzheimer’s years before memory loss becomes apparent. He noted that in addition to creating burdens for caregivers and patients, disrupted sleep patterns generate biological and psychological stresses that accelerate the progression of the disease.&lt;/p&gt;&lt;p&gt;Breaking this feedback loop requires identifying its origins. The body’s circadian clock is thought to act on 20% of all genes in the human genome, controlling when they turn on or off to manage processes including digestion, the immune system and our sleep-wake cycle.&lt;/p&gt;&lt;p&gt;Musiek had previously identified a specific protein, YKL-40, that fluctuates across the circadian cycle and regulates normal levels of amyloid protein in the brain. He found that too much of YKL-40, which is linked to Alzheimer’s risk in humans, leads to amyloid build-up, an accumulation that is a hallmark of the neurodegenerative disease.&lt;/p&gt;&lt;head rend="h2"&gt;Amyloid disrupts rhythmic brain functions&lt;/head&gt;&lt;p&gt;The cyclic nature of Alzheimer’s symptoms suggests that there are more circadian-regulated proteins and their associated genes involved beyond YKL-40. So in this latest study, Musiek and his colleagues examined gene expression in the brains of mice with accumulations of amyloid proteins that mimic early stages of Alzheimer’s, as well as those of both healthy, young animals and aged mice without amyloid accumulations. The scientists collected tissue at 2-hour intervals over 24 hours and then performed an analysis of what genes were active during particular phases of the circadian cycle.&lt;/p&gt;&lt;p&gt;They found that the amyloid accumulations threw off the daily rhythms of hundreds of genes in brain cells known as microglia and astrocytes in ways that were different from what aging alone caused. Microglia are part of the brain’s immune response, clearing away toxic materials and dead cells, while astrocytes have roles in supporting and maintaining communication between neurons. The affected genes are generally involved in helping microglial cells break down waste material from the brain, including amyloid.&lt;/p&gt;&lt;p&gt;While the circadian disruption didn’t entirely shut down the genes in question, it turned an orderly sequence of events into a scattershot affair that could degrade the optimal synchronicity of brain cells’ functions, such as clearing amyloid.&lt;/p&gt;&lt;p&gt;In addition, the researchers found that the presence of amyloid appeared to create new rhythms in hundreds of genes that do not typically have a circadian pattern of activity. Many of the genes are involved in the brain’s inflammatory response to infection or imbalances such as amyloid plaque build-up.&lt;/p&gt;&lt;p&gt;Musiek said that altogether the findings point to exploring therapies that target circadian cycles in microglia and astrocytes to support healthy brain function.&lt;/p&gt;&lt;p&gt;“We have a lot of things we still need to understand, but where the rubber meets the road is trying to manipulate the clock in some way, make it stronger, make it weaker or turn it off in certain cell types,” he said. “Ultimately, we hope to learn how to optimize the circadian system to prevent amyloid accumulation and other aspects of Alzheimer’s disease.”&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://medicine.washu.edu/news/alzheimers-disrupts-circadian-rhythms-of-plaque-clearing-brain-cells/"/><published>2025-10-26T17:40:06+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45713835</id><title>Nvidia DGX Spark: When benchmark numbers meet production reality</title><updated>2025-10-26T22:09:12.532179+00:00</updated><link href="https://publish.obsidian.md/aixplore/Practical+Applications/dgx-lab-benchmarks-vs-reality-day-4"/><published>2025-10-26T17:53:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45714348</id><title>Smartphones manipulate our emotions and trigger our reflexes</title><updated>2025-10-26T22:09:12.267692+00:00</updated><content>&lt;doc fingerprint="b6a816178b433f98"&gt;
  &lt;main&gt;
    &lt;p&gt;The frequency and length of daily phone use continues to rise, especially among young people. It’s a global concern, driving recent decisions to ban phones in schools in Canada, the United States and elsewhere.&lt;/p&gt;
    &lt;p&gt;Read more: School smartphone bans reflect growing concern over youth mental health and academic performance&lt;/p&gt;
    &lt;p&gt;Social media, gaming, streaming and interacting with AI chatbots all contribute to this pull on our attention. But we need to look at the phones themselves to get the bigger picture.&lt;/p&gt;
    &lt;p&gt;As I argue in my newly published book, Needy Media: How Tech Gets Personal, our phones — and more recently, our watches — have become animated beings in our lives. These devices can build bonds with us by recognizing our presence and reacting to our bodies.&lt;/p&gt;
    &lt;p&gt;Packed with a growing range of technical features that target our sensory and psychological soft spots, smartphones create comforting ties that keep us picking them up. The emotional cues designed into these objects and interfaces imply that they need our attention, while in actuality, the devices are soaking up our data.&lt;/p&gt;
    &lt;head rend="h2"&gt;A responsive presence&lt;/head&gt;
    &lt;p&gt;Face recognition, geolocation, touchscreens, vibration, sound alerts and audio and motion sensing all play their part in catching our attention and responding to our actions. Separately, these may not create a strong emotional attachment, but collectively they situate the phone as a uniquely intimate, sensitive and knowing presence in our lives.&lt;/p&gt;
    &lt;p&gt;Take facial recognition locks, for example. Convenient for quick access, a smartphone will light up and unlock with a glance when it encounters a known and trusted face. When introducing Face ID in 2017, Apple claimed: “Do it up anyway you do it, Face ID learns your face. It learns who you are.” This implies a deeper user-device connection, like the one we have with folks we know when we spot them crossing our path.&lt;/p&gt;
    &lt;p&gt;Some devices have repurposed the hand wave — a typical gesture of friendship — into a feature that triggers the camera to take a photo.&lt;/p&gt;
    &lt;p&gt;Geolocation converts networking signals into a dot on a map, and we see that dot as us — not our phone — just as we may see the dots of our friends’ phones on the map as them.&lt;/p&gt;
    &lt;head rend="h2"&gt;Phantom vibrations&lt;/head&gt;
    &lt;p&gt;Sensory cues play a strong role. Touchscreens allow the phone’s interface to react subtly, like edge lighting and rubberbanding, to mimic the pliability of skin.&lt;/p&gt;
    &lt;p&gt;Vibration and sound alerts make us highly sensitive to the smallest movement or sound from the device. This produces conditions like phantom vibration syndrome, where we imagine that the device requires our attention, even when it doesn’t.&lt;/p&gt;
    &lt;p&gt;Audio and motion sensing, on the other hand, allows the device to react to us almost instantly, as when it lowers its ringing on an incoming call when we grab its body.&lt;/p&gt;
    &lt;head rend="h2"&gt;Roots and origins&lt;/head&gt;
    &lt;p&gt;Most of these features were developed decades ago for other uses. GPS was created by the U.S. military in the early 1970s, then was adopted by hikers and sailors to both navigate and to allow others to locate them if necessary.&lt;/p&gt;
    &lt;p&gt;Vibration alerts were created for pagers in the late 1970s for professionals — from hospital staff to travelling salespeople — to notify them of an important phone call.&lt;/p&gt;
    &lt;p&gt;Sound alerts became more widespread with Tamagotchi and other 1990s digital pets. Those toys are especially significant when discussing today’s psychological dependency on portable devices.&lt;/p&gt;
    &lt;p&gt;Through their beeping cries for attention, Tamagotchi trained millions of school-age millennials to build emotional attachments to virtual handheld companions needing care and nurturing. Not surprisingly, these toys were banned in many schools for their tendency to disrupt classes and distract students.&lt;/p&gt;
    &lt;head rend="h2"&gt;Indiscriminate tracking&lt;/head&gt;
    &lt;p&gt;Phones have become an essential part of who we are and how we behave. But there’s also an issue of privacy around our most intimate actions and behaviours. Sensors keep sensing, measuring sounds, movements and proximity.&lt;/p&gt;
    &lt;p&gt;There is the risk that our dependency will intensify as phones learn things about us that have, until recently, been off limits.&lt;/p&gt;
    &lt;p&gt;Sleep is a good example. Audio and motion sensing allows the device to get a reasonable picture of when and how we sleep, often collecting and sharing biometric data through pre-loaded health and wellness apps.&lt;/p&gt;
    &lt;p&gt;Another example is more sophisticated facial recognition, that will not only be able to recognize a face, but also analyze expressions to determine alertness or mood.&lt;/p&gt;
    &lt;p&gt;All of this collected data may have profound consequences, making our bodily behaviour, our off-line interactions with others and our emotional fragility a regular part of the data profiles used to leverage our lives for corporate profit.&lt;/p&gt;
    &lt;head rend="h2"&gt;Managing dependency&lt;/head&gt;
    &lt;p&gt;Short of powering off or walking away, what can we do to manage this dependency? We can access device settings and activate only those features we truly require, adjusting them now and again as our habits and lifestyles change.&lt;/p&gt;
    &lt;p&gt;Turning on geolocation only when we need navigation support, for example, increases privacy and helps break the belief that a phone and a user are an inseparable pair. Limiting sound and haptic alerts can gain us some independence, while opting for a passcode over facial recognition locks reminds us the device is a machine and not a friend. This may also make it harder for others to access the device.&lt;/p&gt;
    &lt;p&gt;So-called “dumb phones” limit what a user can do with their devices, though that’s a tough sell when 24/7 connectivity is becoming an expectation.&lt;/p&gt;
    &lt;p&gt;Manufacturers can do their part by placing more invasive device settings in the “off” position in the factory and being more transparent about their potential uses and data liabilities. That’s not likely to happen, however, without stronger government regulation that puts users and their data first.&lt;/p&gt;
    &lt;p&gt;In the meantime, at a minimum, we should broaden our public discussions of dependency beyond social media, gaming and artificial intelligence to acknowledge how phones, in themselves, can capture our attention and cultivate our loyalty.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://theconversation.com/smartphones-manipulate-our-emotions-and-trigger-our-reflexes-no-wonder-were-addicted-265014"/><published>2025-10-26T19:00:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45715055</id><title>Show HN: MyraOS – My 32-bit operating system in C and ASM (Hack Club project)</title><updated>2025-10-26T22:09:11.732178+00:00</updated><content>&lt;doc fingerprint="a2641ac90aa6e498"&gt;
  &lt;main&gt;
    &lt;p&gt;A x86 Unix-like OS made entirely from scratch.&lt;/p&gt;
    &lt;p&gt;Features&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Protected mode (GDT/IDT, ISRs/IRQs)&lt;/item&gt;
      &lt;item&gt;Paging and virtual memory&lt;/item&gt;
      &lt;item&gt;Memory management&lt;/item&gt;
      &lt;item&gt;Heap and dynamic memory&lt;/item&gt;
      &lt;item&gt;User-mode (ring 3) and kernel mode (ring 0)&lt;/item&gt;
      &lt;item&gt;Processes and scheduling&lt;/item&gt;
      &lt;item&gt;Drivers (PIT, RTC, Keyboard, Mouse, Framebuffer, PATA)&lt;/item&gt;
      &lt;item&gt;ext2 filesystem&lt;/item&gt;
      &lt;item&gt;UI compositor with window widgets, labels, icons, buttons, and even a custom-made font&lt;/item&gt;
      &lt;item&gt;ELF loader, which gives you the ability to run real apps&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;All these features let you run real games, just like Doom, giving the preloaded Doom port in MyraOS ready to be played!&lt;lb/&gt; So, this isn't just a toy OS or a look-alike, it's a real OS that can run on real devices&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Download the latest release from the release tab in GitHub&lt;/item&gt;
      &lt;item&gt;Download QEMU - an open-source machine emulator and virtualizer&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;After you get the latest release, you can run this on your platform:&lt;/p&gt;
    &lt;p&gt;Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen (if you are like me and want it to look real)&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -full-screen
&lt;/code&gt;
    &lt;p&gt;Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -display gtk,zoom-to-fit=on -full-screen
&lt;/code&gt;
    &lt;p&gt;Here, Linux/macOS or even WSL are better; use it as a last resort:&lt;lb/&gt; Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -display gtk,zoom-to-fit=on -full-screen
&lt;/code&gt;
    &lt;p&gt;I really hope you like it, as I spent a lot of time on it, and I'd really appreciate any feedback you have for me.&lt;lb/&gt; If you have anything, from feature requests to feedback, or even if you want to talk, email me here: &lt;code&gt;dvirm.biton@gmail.com&lt;/code&gt;.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/dvir-biton/MyraOS"/><published>2025-10-26T20:43:40+00:00</published></entry></feed>