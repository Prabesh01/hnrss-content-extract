<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-22T17:08:58.823467+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45330407</id><title>SGI demos from long ago in the browser via WASM</title><updated>2025-09-22T17:09:33.574741+00:00</updated><content>&lt;doc fingerprint="f7d69218d4b7b003"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;SGI demos from long ago, running in your browser today.&lt;/head&gt;
    &lt;p&gt;Old problems require modern solutions.&lt;/p&gt;
    &lt;p&gt;This is the original SGI demo source code, compiled for the web using Emscripten and SDL2. Rendering is done using an IRIS GL software rasterizer from the Alice 4 project. Event handling is done by SDL2, with events translated into GL's event system. Each demo is a separate web page, with its own Javascript + WASM compiled by Emscripten from the original C/C++ source. Minimal modifications have been made to the original source, in order to run in the browser and to work with compilers 35 years newer.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Flight (cockpit glitches, planes too slow in web version, night mode 'shimmers', no network play)&lt;/item&gt;
      &lt;item&gt;Newave (no mesh editing, no popup menus, only wireframe)&lt;/item&gt;
      &lt;item&gt;Arena (no network play)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install Homebrew if you don't have it, then get SDL2 and Emscripten:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;brew install SDL2
brew install emscripten&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Build:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;git clone https://github.com/sgi-demos/sgi-demos.git
cd sgi-demos
make&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Install Winget if you don't have it.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Install MSYS2 from cmd.exe, in order to get the clang compiler:&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;winget install MSYS2.MSYS2
setx PATH "%PATH%C:\msys64\clang64\bin"&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install clang toolchain and SDL2 in MSYS2 CLANG64 shell:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;pacman -Syu
pacman -S base-devel mingw-w64-clang-x86_64-toolchain
pacman -S mingw-w64-clang-x86_64-SDL2&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Clone emscripten from Github. Cloning seems to work best with MSYS2 rather than using pacman. Follow the default install directions, not the Windows directions!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Add this line to the&lt;/p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;file in MSYS2 CLANG64 shell:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;source /path/to/emsdk/emsdk_env.sh&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Build:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;git clone https://github.com/sgi-demos/sgi-demos.git
cd sgi-demos
make&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rendering via OpenGLES/WebGL (WIP)&lt;/item&gt;
      &lt;item&gt;Arbitrary window size&lt;/item&gt;
      &lt;item&gt;Run GL demo in its own WASM worker/thread, to avoid slicing up the code for SDL's event loop&lt;/item&gt;
      &lt;item&gt;Popup menus, including the classic SGI menu font&lt;/item&gt;
      &lt;item&gt;More demos, all the demos. &lt;list rend="ul"&gt;&lt;item&gt;Electropaint, Cedit, any other IRIS GL demos I can find&lt;/item&gt;&lt;item&gt;Then OpenGL, GLUT, Inventor, Performer demos in no particular order&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Rudimentary context for each demo: name, author, year (as text in lower corner), code link&lt;/item&gt;
      &lt;item&gt;Virtual mouse and keyboard: &lt;list rend="ul"&gt;&lt;item&gt;Only display virtual keys and mouse functions used by the demo; use demo's qdevice() calls to determine this&lt;/item&gt;&lt;item&gt;Displayed as transparent virtual mouse and key pictures overlaid on demo&lt;/item&gt;&lt;item&gt;On always for touch devices&lt;/item&gt;&lt;item&gt;On/off for mouse/keyboard devices, as hints&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Description/history/context for each demo - can obtain some descriptions from .Info slide files&lt;/item&gt;
      &lt;item&gt;Man page live links&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Everyone who worked at SGI, for the eye candy and the baller computers.&lt;/item&gt;
      &lt;item&gt;The Alice 4 folks, for the inspiration and the GL implementation.&lt;/item&gt;
      &lt;item&gt;Emscripten and SDL teams, for making a web port possible.&lt;/item&gt;
      &lt;item&gt;Internet Archive, Bitsavers, WinWorld, IRIXNet, and others, for saving the history.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/sgi-demos"/><published>2025-09-22T08:03:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45331030</id><title>Beyond the Front Page: A Personal Guide to Hacker News</title><updated>2025-09-22T17:09:33.391406+00:00</updated><content>&lt;doc fingerprint="aec033930fbe2fe7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Beyond the Front Page: A Personal Guide to Hacker News&lt;/head&gt;
    &lt;head rend="h2"&gt;A Cure for The Eternal September&lt;/head&gt;
    &lt;p&gt;In early 1994, a group of frustrated users on Usenet, a precursor to modern forums, inadvertently coined a term: Eternal September.&lt;/p&gt;
    &lt;p&gt;The problem wasn’t the month of September itself, but the people who arrived with it. In its early days, Usenet had a relatively high barrier to entry, which helped maintain user quality and content standards. But every fall, a new wave of college freshmen would flood Usenet through their campus networks, posting haphazardly and ignoring established community norms, much to the annoyance of veteran users. Over the years, this September influx became a familiar, if unwelcome, ritual.&lt;/p&gt;
    &lt;p&gt;1994 was different. Starting the previous year, many consumer internet service providers began offering Usenet access. Suddenly, low-quality, off-topic posts from inexperienced users poured in year-round. The chaos of September had become eternal.&lt;/p&gt;
    &lt;p&gt;The phrase marks the end of the internet’s early-elite era and crystallizes a chronic dilemma for any online community: scale, topical breadth, and discussion quality form an unstable triad. The intersection of all three is, most days, a fantasy.&lt;/p&gt;
    &lt;p&gt;And yet one community has, across more than eighteen years, grown relentlessly in users and traffic while sustaining both interesting topics and a high bar of discussion: Hacker News (HN).&lt;/p&gt;
    &lt;head rend="h2"&gt;Built on a Wall of Text&lt;/head&gt;
    &lt;p&gt;HN looks plain at first glance. It’s essentially a wall of text, where even most buttons are just text links. Newcomers might not even figure out how to post here. Unlike typical online forums, the vast majority of “posts” on HN are simply shared links. The contribution of the original poster (OP), if any, is limited to a title and perhaps a brief comment, with the ensuing discussion centered on the linked content.&lt;/p&gt;
    &lt;p&gt;In other words, HN is less a forum and more a collectively curated reading list, or more plainly, an external comment section for the rest of the internet. The technical term for this format is a “link aggregator.” Other well-known examples from the past include Digg and Reddit. But Digg (as it was) is long gone, and Reddit has gradually transitioned to a more mainstream forum model, leaving HN as a unique outlier.&lt;/p&gt;
    &lt;p&gt;Despite its spartan appearance and learning curve, HN boasts over ten million monthly visits (according to SimilarWeb data), outperforming popular tech news sites like TechCrunch and Engadget. In contrast to its massive traffic, the servers that run HN are surprisingly modest: just two machines with quad-core Intel Xeon E5-2637 v4 CPUs, running FreeBSD.&lt;/p&gt;
    &lt;p&gt;To understand why HN attracts so much attention, one must look at its history. You can tell from the domain, &lt;code&gt;news.ycombinator.com&lt;/code&gt;, that HN did not start as an independent site but as a side project of Y Combinator, a renowned venture capital firm. In February 2007, Paul Graham, then president of YC, launched the site. The stated goals were prosaic and personal: publicly, to create a place for the startup community (hence the original name, Startup News), and privately, to scratch a programming itch by building a site in Arc, a Lisp dialect he co-created.&lt;/p&gt;
    &lt;p&gt;Given that lineage, HN quickly became a hub for startup founders and tech workers. For startups, it’s a channel to launch, collect feedback, and — when needed — manage crises. For indie developers and creators, making the front page is both validation and real traffic, so much so that people speak of the HN “hug-of-death,” when a small site crumples under the sudden load. (One of my posts briefly peaked around #60 and still managed to exhaust my monthly free bandwidth on Backblaze B2 in hours.)&lt;/p&gt;
    &lt;p&gt;But the discussions on HN are not just for startups and code. According to an analysis by Wilson Lin based on over forty million posts and comments, topics range far beyond entrepreneurship and programming. Consumer products, fundamental sciences like math and physics, and even humanities and social sciences are widely discussed, often with contributions from professionals in those fields. It’s no exaggeration to say that no matter your area of interest, you’re likely to find a worthwhile discussion about it on Hacker News.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Disciplined Front Page and a Tireless Moderator&lt;/head&gt;
    &lt;p&gt;A large user base and a wide range of topics are not enough to make a great community. There were many large forums that hit a tipping point where low-effort posting and polarization drag everything down. How does HN resist the slide?&lt;/p&gt;
    &lt;p&gt;A well-designed set of rules do a lot of work. The HN welcome page lays out two cardinal rules: don’t post or upvote crap links, and don’t be rude or dumb in comment threads.&lt;/p&gt;
    &lt;p&gt;What counts as “not crap”? It must be something more than “superficially interesting” that “teaches you about the world,” which rules out gossip, memes, flame-bait, clickbait headlines, and other off-topic noise. And what kind of comments are “civil and substantial”? Those are ones that “more information about the topic” and not those you wouldn’t say face-to-face.&lt;/p&gt;
    &lt;p&gt;If that still sounds a bit abstract, HN provides a more comprehensive set of guidelines with specific requirements for content, formatting, and even tone. Don’t use uppercase or exclamation points. Use the original title whenever possible. Reply to the argument instead of calling names. Assume good faith. Ultimately, the sole purpose is to ensure that HN surface things that would gratify the intellectual curiosity of a good hacker.&lt;/p&gt;
    &lt;p&gt;Of course, rules alone are not enough; they require enforcement. To this end, HN combines algorithmic mechanisms and human moderation, both of which are worth looking into.&lt;/p&gt;
    &lt;p&gt;First, the ranking of posts, which determines the first impression of any forum, is not simply based on recency or interaction count but on a very strict set of criteria. New submissions start on the “New” section with one point. Only after four “upvotes” (i.e., five points total) does a post qualify for the front page. Qualified submissions are ranked by the ratio of upvotes to time since submission, and only the top thirty submissions appear on the literal “page one.”&lt;/p&gt;
    &lt;p&gt;(As an exception, moderators can give low-traction posts a “re-upping.” If they feel a post has been overlooked, they can manually place it at the bottom of the front page, giving it a second chance without overly interfering with the algorithm.)&lt;/p&gt;
    &lt;p&gt;Votes can be gamed, though. Therefore, HN has always made voting ring detection a high priority, continuously developing and improving its systems. The exact mechanisms are not public for obvious reasons, but one can infer they likely consider factors like the referrer, the account’s seniority, and frequency of operations.&lt;/p&gt;
    &lt;p&gt;Upvotes not only boost the ranking but also earn the submitter “karma,” a term borrowed from Buddhism that functions similarly to user points or credits in other communities. However, on HN, karma confers stewardship rather than badges to show off: at 31 karma you can flag posts and comments that you find violate guidelines; enough flags hide content. At 501 karma you unlock downvoting on comments. (As an easter egg, users with 251 karma can customize the color of the top navigation bar.)&lt;/p&gt;
    &lt;p&gt;These thresholds are intentionally exclusionary. Users who skim the New section are typically dedicated members with discerning taste, and attracting four upvotes from them can be hard. Indeed, statistics show that the majority of posts on HN receive 0 or 1 upvote. Consequently, many users go years without ever submitting a post that “escapes velocity,” and thus never unlock flagging. Yet, it is perhaps this willingness to sacrifice engagement for standards that has allowed HN to maintain its quality and style for over a decade.&lt;/p&gt;
    &lt;p&gt;However, HN’s real differentiator isn’t algorithmic. That honor belongs to the human touch in its moderation, particularly the work of its resident moderator, dang (Daniel Gackle).&lt;/p&gt;
    &lt;p&gt;The New Yorker magazine published a profile of dang in 2019. Gackle, a Stanford literature major, became an HN moderator by a twist of fate. He had previously co-founded a startup that developed an online spreadsheet product with another former moderator, Scott Bell, and received funding from YC. When the startup eventually failed, Paul Graham invited him to join YC and manage HN full-time.&lt;/p&gt;
    &lt;p&gt;According to the article, dang’s moderation style is “personal, focused, and slow,” a form of “conversational art.” Have a look at his reply history: merging duplicate submissions, linking to related past discussions, editing submission titles and URLs for accuracy, and reminding heated users to adhere to the community guidelines. The tasks may seem trivial individually, but imagine performing them with dang’s frequency and accuracy, all while maintaining a consistently gentle and patient tone — including sending long emails explaining his moderations — and you can see a craft.&lt;/p&gt;
    &lt;p&gt;It’s understandable, then, that dang has earned the universal respect of the community. Search HN for “thank you dang” around holidays and you’ll find ritualized gratitude threads. It isn’t romanticizing to say you’ll struggle to find another moderator on today’s internet so widely and openly appreciated.&lt;/p&gt;
    &lt;p&gt;(It was announced in early 2025 that Tom Howard (tomhow) has become a public moderator. He has been performing moderation tasks for years behind the scenes. According to dang, Howard has a long history with Y Combinator as a W09 batchmate and with HN, which he joined in 2007.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Caveat Lector&lt;/head&gt;
    &lt;p&gt;HN isn’t flawless. It is, after all, an online forum, prone to all the familiar pitfalls: premature conclusions, inflammatory language, and overconfidence. Its user base, which disproportionately comprises U.S. tech workers with high skill and signal, also brings specific skews worth being aware of.&lt;/p&gt;
    &lt;p&gt;One of the chronic problems is commenting without reading: reacting to the headline while ignoring the linked piece, thereby spinning off debates the article already addresses or simply doesn’t make. Search for “RTFA” and you’ll find endless exasperation. So, it’s advisable for a new user to cultivate the habit of reading the link, or at least a competent AI summary, before diving into the comments. This helps avoid being misled by knee-jerk reactions.&lt;/p&gt;
    &lt;p&gt;Another HN quirk is criticism for its own sake. While critical thinking is prized on HN and often serves as a powerful bullshit detector, it can sometimes devolve into nitpicking. This is most common in threads about technical achievements or business successes, where comments often throw cold water. Similarly, projects in the Show HN section often get held to standards that only make sense later in the life cycle. (Search for “so much negative” to see the pattern.)&lt;/p&gt;
    &lt;p&gt;HN also sustains a repertoire of low-yield topics that are reliably heated yet produce little insight because they devolve into preference contests or pedantry over minor technicalities. The frequent offenders include, unsurprisingly, the perennial holy wars over which programming language, operating system, or editor is superior; newer “cult” punching bags (Rust, htmx, Nix, Wayland); and recurring policy brawls over return-to-office, layoffs, and tech immigration. When you encounter these topics, consulting Wikipedia, technical documentation, or more authoritative media is often a better use of your time.&lt;/p&gt;
    &lt;p&gt;Finally, demographics matter. HN is dominated by American tech professionals. That can tilt discourse toward elitism, rationalism, and a kind of intellectual performance, creating an echo chamber. Therefore, a comment thread that appears to be a fierce debate may converge to a local optimum, and a data-driven articulation may turn out to rest on simplified or biased priors. As The New Yorker observed, the site has a “characteristic tone of performative erudition” that “often masks a deeper recklessness.”&lt;/p&gt;
    &lt;p&gt;As such, HN should be treated as an external comment section for the internet to the extent that it can’t substitute for the internet, much less for your own thinking. At its best, HN is a map to new questions and a window onto new angles. The landscape itself remains elsewhere.&lt;/p&gt;
    &lt;head rend="h2"&gt;Appendix: Tips for Reading HN&lt;/head&gt;
    &lt;p&gt;I started reading HN around early 2018. Without a background in STEM or programming, much of the discussion was beyond my knowledge, but that didn’t diminish the enjoyment. In fact, HN helped me build initial understanding and interest in many technical topics. Whenever controversial issues emerge, I habitually turn to HN for expert interpretations and opposing views, rarely coming away empty-handed.&lt;/p&gt;
    &lt;p&gt;But with numerous entries and dense discussions, reading HN well requires some technique. Based on my experience, HN isn’t ideal for mindlessly “scrolling” the front page; it’s better browsed regularly and purposefully via RSS, search, and third-party tools.&lt;/p&gt;
    &lt;p&gt;It might seem contradictory to praise the quality of the HN front page and then advise against reading it. True, the moderation mechanisms I’ve described make the front page incredibly compelling, but that itself can be a problem: without control, it easily becomes a default time-sink, leading to endless link-clicking cycles. (HN is often among websites recommended for blocking by focus-assistant tools.)&lt;/p&gt;
    &lt;p&gt;Instead, I recommend the following tools and methods for readers to consider and critique —&lt;/p&gt;
    &lt;head rend="h3"&gt;Subscribe to Filtered RSS Feeds&lt;/head&gt;
    &lt;p&gt;Hacker News has an official RSS feed (&lt;code&gt;https://news.ycombinator.com/rss&lt;/code&gt;) that mirrors the front page, but subscribing to it directly can be overwhelming. Fortunately, HN provides a comprehensive official API, which has enabled third-party developers to create more granular RSS feeds.&lt;/p&gt;
    &lt;p&gt;A popular choice is hnrss.org, which offers a variety of feeds filtered by section, user, keyword, score, and more. Among the most useful is the “Best Comments” feed. This feed aggregates newly emerging high-score comments across HN, which are not only worth reading themselves but often lead to posts that are also worthwhile and have some traction. I frequently discover quality discussions outside my usual interests here. Its update frequency is also moderate, typically around a dozen items daily, corresponding to four or five articles — a manageable amount for most daily reading.&lt;/p&gt;
    &lt;head rend="h3"&gt;Search for External URLs&lt;/head&gt;
    &lt;p&gt;As mentioned, HN’s unique posting style makes it the internet’s external comments section. Combined with its high traffic, there’s a good chance any somewhat visited English-language site or page has been discussed on HN.&lt;/p&gt;
    &lt;p&gt;As such, HN search proves to be a vital source of technical due diligence: whenever a trendy, heavily promoted product appears, I search HN for its name, website domain, or GitHub repo to see if it’s genuinely unmissable or a potential “red flag.” Similarly, for any assertive, triumphant article, I search HN for dissenting voices to gain a more rounded perspective.&lt;/p&gt;
    &lt;p&gt;However, HN’s search box is tucked away at the bottom of the homepage, making it inconvenient. My suggestion is to set &lt;code&gt;https://hn.algolia.com/?q=%s&lt;/code&gt; (where &lt;code&gt;%s&lt;/code&gt; is the search term) as a search engine shortcut or in launcher tools for direct access. Indeed, this might be the best site search you’ve ever used. Its domain reveals it’s an “add-on,” powered and hosted by search SaaS provider Algolia (a YC alum); it’s not only blazingly fast but also supports fuzzy matching and can unearth discussions from the deepest corners of the site. (See the help page for advanced syntax.)&lt;/p&gt;
    &lt;p&gt;You can also install a browser extension like Newsit, which automatically checks if the current webpage has related HN discussions and displays a banner notification.&lt;/p&gt;
    &lt;head rend="h3"&gt;Skim Comments Strategically&lt;/head&gt;
    &lt;p&gt;Hot HN posts often attract hundreds or even thousands of comments; reading them all is neither feasible nor necessary. Also, due to natural bandwagon effects, top comments attract more replies, dominating the top of the thread. Reading straight down might miss different perspectives buried later.&lt;/p&gt;
    &lt;p&gt;Therefore, I follow a personal rule: for the first top-level comment, I read at most the first three replies and their first three sub-replies. Then I move to the second top-level comment and read its first two replies and their first two sub-replies. Finally, I read the first reply to the third top-level comment and its first sub-reply. (Remember to make good use of the navigation links.) This usually provides a comprehensive overview of the thread’s viewpoints while keeping reading time manageable.&lt;/p&gt;
    &lt;head rend="h3"&gt;Use AI to Summarize Comments&lt;/head&gt;
    &lt;p&gt;With the rise of AI tools, summarizing HN comments has become a viable option. However, for popular threads with hundreds of comments, HN paginates the results, so summarizing only the first page would be incomplete. To get around this, you can fetch the full comment data in JSON format from the HN API using this endpoint:&lt;/p&gt;
    &lt;code&gt;https://hn.algolia.com/api/v1/items/${id}
&lt;/code&gt;
    &lt;p&gt;Here, &lt;code&gt;${id}&lt;/code&gt; is the eight-digit number from the submission’s URL. You can then feed the entire JSON response to your preferred AI model with a prompt like this:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Summarize the themes of the opinions in the input provided by the user. For each theme, include at least 3 UNMODIFIED quotes with attribution. Unescape HTML entities. Go long.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This can be a one-off prompt or set as a system prompt. The prompt design, inspired by Simon Willison’s work and adjusted based on personal experience, reliably summarizes the themes and stances within the comments, complete with original quotes and usernames for easy reference. Since this is a summarization task, cost-effective models like GPT mini, Gemini Flash, or Claude Haiku are perfectly adequate. Just be sure to use a model with a large context window to avoid truncation.&lt;/p&gt;
    &lt;p&gt;I’ve created a demo on Val Town using their free GPT-4o mini proxy. You can try it out and then fork the code to your own account to customize it and avoid rate limits.&lt;/p&gt;
    &lt;head rend="h1"&gt;中文版&lt;/head&gt;
    &lt;head rend="h2"&gt;「永恒的九月」有救吗？&lt;/head&gt;
    &lt;p&gt;1994 年初，在类似日后论坛的在线社区 Usenet 上，一群满腹恼火的用户无意间创造了一个术语——永恒的九月（Eternal September）。&lt;/p&gt;
    &lt;p&gt;不过，让人恼火的不是九月本身，而是九月出现的人。早期的 Usenet 访问门槛比较高，用户素质和内容质量相对容易维持。但每年秋季开学，都有一批大学新生通过校园网涌进 Usenet，四处乱发东西却又不守「规矩」，让老用户们烦恼不已。只是多年下来，大家也多少习惯了这个事实。&lt;/p&gt;
    &lt;p&gt;1994 年的情况又有些不同。从前一年开始，许多面向大众的互联网服务商也陆续提供了 Usenet 接入服务。这样一来，全年都有来自零基础用户的低质、跑题帖子占据社区——九月的混乱成为了永恒。&lt;/p&gt;
    &lt;p&gt;「永恒的九月」象征着互联网早期精英主义时代的结束，也代表着在线社区一个永恒的难题：用户规模、主题范围和讨论质量构成了三难困境，这三个目标的重合处大多时候写着「做梦」。&lt;/p&gt;
    &lt;p&gt;但确实有这样一个社区，在它十七年的历史中，不仅用户和流量持续增长，而且总体上保持了丰富有趣的话题和标杆性的讨论质量。这就是「黑客新闻」——Hacker News。&lt;/p&gt;
    &lt;head rend="h2"&gt;文本墙里砌出的罕见人气&lt;/head&gt;
    &lt;p&gt;第一眼望去，HN 并不是一个吸引人的网站：界面素面朝天，除了字还是字，连功能按钮都主要是文本链接。不仅如此，初来乍到的人可能都不知道这里到底是怎么发帖的。与常见的在线社区不同，HN 上绝大多数「帖子」都只是一个链接分享，「楼主」的创作（如果有）只是起一个标题、加两句点评而已，而回复也是针对分享内容的讨论。&lt;/p&gt;
    &lt;p&gt;换句话说，HN 与其说是一个论坛，不如说是一个集体筛选的推荐列表，一个互联网的外置评论区。这种形态的学名是「链接聚合站」（link aggregator），除了 HN，早年比较有名的例子还包括 DIGG 和 Reddit。但 DIGG 早已作古，Reddit 也逐渐转型为更「主流」的论坛模式，HN 也就越发显得独树一帜了。&lt;/p&gt;
    &lt;p&gt;就是这样一个看起来平平无奇、用起来颇有门槛的网站，却坐拥超过千万的月访问量（SimilarWeb 数据），比知名的科技新闻网站 TechCrunch 和 Engadget 都高出很多。（与这种规模的流量形成对照的是，用于托管 HN 的服务器相当朴素，仅仅是两台四核的 Intel Xeon CPU E5-2637 v4 服务器，运行 FreeBSD 系统。）&lt;/p&gt;
    &lt;p&gt;要理解 HN 的高人气，就得先了解一些历史。从域名 &lt;code&gt;news.ycombinator.com&lt;/code&gt; 就能看出，HN 的起源并不是一个独立运营的网站，而是硅谷知名风投机构 Y Combinator 的附属项目。2007 年 2 月，时任 YC 总裁的 Paul Graham 创办了 HN。根据当时的公告，为公，他想为创业圈提供一个交流场所（这也是为什么 HN 最开始叫 Startup News），方便 YC 网罗人才；为私，他也想过一把编程瘾，用自己参与创作的 Lisp 语言变种 Arc 写一个网站。&lt;/p&gt;
    &lt;p&gt;在这样的背景衬托下，HN 逐渐成为了硅谷创业者和科技行业从业者的集散地。对于创业公司，HN 是一个推介产品、聆听反馈的优质渠道，也是在「危机公关」时需要格外小心对待的舆论场。对于独立开发者、创作者，自己的作品被「顶」上 HN 首页不仅是一种肯定，而且也能带来实打实的流量——这甚至产生了一个专有名词「HN 死亡拥抱」（HN hug-of-death），形容 HN 来客对小网站的性能考验。（我有一篇文章只是短暂蹭上了六十几名，结果几小时内 BackBlaze B2 图床就被拖完了当月额度。）&lt;/p&gt;
    &lt;p&gt;但 HN 上的讨论并不只和开公司和写代码的人有关。根据 Wilson Lin 基于四千多万条帖子和评论的分析，除了创业和编程之外，消费级产品、数理化等基础科学学科，以至社会、人文等「文科」内容，在 HN 上都有广泛讨论，也能经常见到相关背景的专业人士发言。不夸张地说，无论你处于什么领域、关心什么话题，都有很大概率在 HN 上找到你感兴趣的讨论。&lt;/p&gt;
    &lt;head rend="h2"&gt;纪律严明的首页与鞠躬尽瘁的管理员&lt;/head&gt;
    &lt;p&gt;用户规模有了、讨论的话题也足够丰富，但这还不足以成就一个好的社区。回忆历史，很多大型论坛就是在达到一定的规模后，遇到了严重的灌水和极端化问题，最后走向衰落。HN 是如何做到维持内容质量和讨论氛围的呢？&lt;/p&gt;
    &lt;p&gt;一套好的规则功不可没。在 HN 的欢迎页面上，写着这个社区的最重要的「约法两章」：第一，不要发垃圾链接，看到也不要点赞；第二，写评论不要粗鲁，也不要犯傻。&lt;/p&gt;
    &lt;p&gt;什么链接才不「垃圾」？答案是「有趣但不肤浅」：有助于增进对世界的了解，而不是八卦、表情包、引战文章、标题党新闻等喧闹的噪音——在 HN 的语汇中称为「无关话题」（off-topic）。什么样的评论才不「粗鲁」「犯傻」？它应当提供新的角度或者信息，「不要说你当面沟通时说不出口的话」。&lt;/p&gt;
    &lt;p&gt;如果你觉得这还是有些抽象，HN 还有一份更完整的发帖规范，对于内容、格式以至于表达方式提出了更具体的要求：不要用大写字母和感叹号来吸引眼球；尽量使用原始来源；不可以在回复观点时夹带人身攻击；在解读评论时推定他人为善意；等等。归根结底，这些原则和规则的目的都是保证 HN 上的内容能「让优秀的黑客感兴趣」，也就是「满足好奇心」。&lt;/p&gt;
    &lt;p&gt;当然，只有规则是不够的，还要有执行规则的手段。为此，HN 将程序规则和人工管理两种手段结合起来，其机制都颇值得研究。&lt;/p&gt;
    &lt;p&gt;首先，在决定着第一观感的帖子排序上，HN 不是简单地根据时间远近、互动多少，而是设置了非常严格的门槛。帖子在刚发出时只会出现在「新帖」版块，具有 1 分的初始分。只有在获得 4 次「支持」（通过点击帖子标题左侧的向上箭头），也就是积累 5 分后，才有资格进入首页排序。对于达到分数门槛的帖子，HN 按照获得分数和提交距今时间的比值来排序，只有排在前 30 名的帖子才能登上真正意义上的「首页」——直接访问 HN 网址所能看到的列表。剩下的帖子就只能排到后续页面了。&lt;/p&gt;
    &lt;p&gt;（作为例外，管理员有「特权」给低人气的帖子「第二次机会」：如果管理员觉得某个帖子似乎被「埋没」了，可以手动把它放回首页的底部，但不会更高，从而在不过度干预规则的情况下让更多人有机会看到。）&lt;/p&gt;
    &lt;p&gt;但众所周知，票数是可以刷的。因此，HN 一直将反刷票检测作为优先事项，持续开发改进。出于可以理解的原因，反刷票的具体机制没有公布过，但不难推断其考虑因素可能包括跳转来源、注册时间、操作频率等。&lt;/p&gt;
    &lt;p&gt;获得支持票除了可以让帖子排名靠前，也可以为发帖用户积累「业力」（karma）。这借用自一个佛教术语，在 HN 中大致类似于其他社区中的用户积分。不过，积分在 HN 中的作用不是提升花里胡哨的用户等级，而是参与社区治理的资历凭证：达到 31 分的用户可以标记（flag）自己认为不符合社区规则的帖子和评论，被多人标记的内容会被打上（flagged）的警告标记、直至隐藏；而只有达到 501 分的用户才能对他人评论投反对票（downvote）。（一个彩蛋功能是达到 251 分的用户可以自定义导航栏主题色。）&lt;/p&gt;
    &lt;p&gt;应当说，由于这些门槛，融入 HN 的难度高到会将很多人拒之门外的程度。不难想见，愿意主动逛新帖版块的本来就是重度用户，眼光往往挑剔；一个帖子想吸引到四个这类用户的支持，从而获得首页展示资格，实非易事。的确，据统计，HN 上的帖子大多数都只能得到 0 或 1 票。因此，相当比例的用户注册多年都没有发出过一次达到「逃逸速度」的帖子，也攒不到解锁 flag 功能的 karma 分数。但可能正是因为宁可牺牲互动量也要坚持高标准，HN 才能在十几年来维持独特的水平和风格。&lt;/p&gt;
    &lt;p&gt;但上面那些程序规则也不能算是 HN 维持高质量最独特的「法宝」；这个荣誉还得归于 HN 运营机制中「人治」的部分，特别是常任版主（moderator）的 dang。&lt;/p&gt;
    &lt;p&gt;《纽约客》杂志曾在 2019 年对 dang 做过特写报道。他本名 Daniel Gackle，缩写一下就是 dang。这位斯坦福文学专业毕业生成为 HN 的版主纯属意外。他曾经与另一位前任版主 scott（Scott Bell）共同创业，开发在线电子表格产品，并获得过 YC 的投资。遗憾的是，dang 的创业最终未获成功，于是接受 Paul Graham 的邀请加入 YC，全职管理 HN。&lt;/p&gt;
    &lt;p&gt;用《纽约客》文章的话说，dang 的管理是「个人色彩浓厚、专注、慢节奏」的；他将自己的工作视作一种「对话」。你可以翻几页 dang 的回复记录来了解他的工作内容：合并重复主题、汇总过往类似讨论、修正帖子标题措辞和来源链接、提醒「上头」用户遵守社区规则。这些任务单独看起来可能也不复杂，但要保持像 dang 一样的高频、准确，又始终温和、耐心——包括私下和用户发送长篇邮件解释操作理由——就很难得了。&lt;/p&gt;
    &lt;p&gt;正因如此，dang 受到了用户的一致尊重，以至于每到「逢年过节」都会有人自发点名感谢他的贡献（不妨试试在 HN 站内搜索 thank you dang）。诚然，HN 用户的评论也或许带有一些玫瑰色眼镜，但说很难在当今互联网上见到另一位受到如此爱戴的版主，大概不是夸张。&lt;/p&gt;
    &lt;p&gt;（2025 年初，dang 宣布 Tom Howard (tomhow) 加入正式管理员队伍。此前多年，他一直在幕后执行版主职责。据 dang 介绍，Howard 曾是 Y Combinator 的 2009 年冬令营校友，于 2007 年加入 HN。）&lt;/p&gt;
    &lt;head rend="h2"&gt;兼听则明&lt;/head&gt;
    &lt;p&gt;当然，HN 也不是完美无缺的。再优质的在线社区毕竟也是一个……在线社区；人们容易在线上沟通时犯的错误——急于结论、言辞偏激、过于自信——同样见于 HN 上的沟通中。同时，用户特征和文化使然，HN 还有一些「特色问题」，值得在浏览时留心鉴别。&lt;/p&gt;
    &lt;p&gt;例如，一个特别常见的现象是根本不看楼主分享的链接，只根据标题唤起的第一印象置评，导致聊起一些南辕北辙的话题，或者重提原文中已经明确回答的问题。以 RTFA（妈的去看文章，read the fucking article）为关键词搜索评论，就能看到成百上千条对于这种做法的抱怨。对此，最好自己养成良好的习惯，先看原文（赶时间的话哪怕看看 AI 总结）再看评论，就能有效避免被「张口就来」的评论带偏。&lt;/p&gt;
    &lt;p&gt;另一个「HN 特色」是为批评而批评。究其原因，虽然批判性思维在 HN 上受到推崇，并且在多数时候能起到火眼金睛的正面效果，但有些时候也会演变为「挑刺」。最常见的场景就是对于讲述科技成就、业务成功的帖子「泼冷水」，以及对 Show HN 版块中毛遂自荐的产品提出一些不符合项目发展阶段的苛责。（以 so much negative 为关键词搜索评论可以看到很多案例。）&lt;/p&gt;
    &lt;p&gt;一些常驻版面的「低效话题」也在拉低 HN 的整体氛围。之所以说「低效」，是因为这些问题虽然总能引发「热议」，但内容往往在争强好胜地表达个人偏好甚至偏见，或者陷入次要技术细节的迂腐争论，因此很难从中得到收获。不难想象，这些低效话题自然会包括技术圈一些历久经年的「圣战」——争论编程语言、操作系统、编辑器哪家强；近年新增的一些「时事热点」还包括对各种新兴「邪教」——Rust、HTMLX、nix、Wayland——的讨伐，以及重返办公室、裁员、技术移民等攸关科技从业者的社会政策问题的争论等等。如果遇到这类话题，查阅维基百科、技术文档和更专业权威的媒体可能是更好的选择。&lt;/p&gt;
    &lt;p&gt;最后，从用户画像的角度看，HN 的主力用户群体是美国的科技行业从业者，虽然整体素质和技能水平较高，但也因此容易滑向精英主义和过度的理性主义、智识主义，并在一定程度上构成观点的「回音壁」。因此，看似针锋相对的评论「盖楼」可能也只能得出局部最优的结论，形式上有条有理、数据驱动的论述可能掩盖着方法论层面的简化和偏见。正如《纽约客》那篇报道所总结，HN 有一种「掉书袋」（performative erudition）的基调，而它往往掩饰着一种深层的鲁莽。&lt;/p&gt;
    &lt;p&gt;总之，将 HN 定位为「互联网的外置评论区」有一层隐含意思：它不能代表和涵盖整个互联网，更不能代替和免去自己的思考和探索。HN 上的讨论虽好，充其量可以作为发现新问题的地图、解锁新视角的窗户，但完整的景观，毕竟还在远方和窗外。&lt;/p&gt;
    &lt;head rend="h2"&gt;附：HN 阅读方法谈&lt;/head&gt;
    &lt;p&gt;我大致在 2018 年初开始阅读 HN。由于没有理工和编程背景，HN 上的很多讨论超出了我的知识范围，但这并不影响翻阅 HN 的乐趣。事实上，我就是通过 HN 对很多技术话题建立初步认识和兴趣的；每当遇到众口纷纭的热点时，我也会习惯性地去 HN 寻找专业解读和正反交锋，几乎从未空手而归。&lt;/p&gt;
    &lt;p&gt;但面对繁多的条目和密集的讨论，「读」好 HN 也需要一些技巧。根据我的使用体会，HN 其实是不太适合直接去「刷」首页的，而最好通过 RSS、搜索和第三方工具实现有规律、有目的地浏览。&lt;/p&gt;
    &lt;p&gt;刚夸了这么久 HN 的首页质量，现在又不建议看首页，似乎有些矛盾。的确，通过上面介绍的各种管理机制，HN 的首页可以说是非常「好看」的。但太好看也会成为一种问题：如果不加控制，很容易将其作为消磨时间的下意识目的地，陷入无尽的链接点击循环。（HN 因此也是很多「集中注意力」类工具推荐用户主动屏蔽的网站之一。）&lt;/p&gt;
    &lt;p&gt;相比之下，我更推荐以下几种工具和方法，供读者参考和批评——&lt;/p&gt;
    &lt;head rend="h3"&gt;订阅筛选版 RSS&lt;/head&gt;
    &lt;p&gt;HN 有一个官方的 RSS 地址（https://news.ycombinator.com/rss），与首页内容完全一致，直接订阅信息量太大。好在 HN 足够开放，提供了非常完善的官方 API，这就为第三方制作更加细化的 RSS 源提供了可能。&lt;/p&gt;
    &lt;p&gt;例如，一个比较受欢迎的选择是 hnrss.org，它提供了按照版块、用户、关键词、评分数等条件筛选的一系列 RSS 地址。其中，最实用的大概要数「最佳评论」。这个源汇总了 HN 全站主题中新出现的高票评论，不仅本身值得一读，而且会引出精彩评论的帖子本身往往也是值得一读、有一定人气的，我经常从中发现一些日常关注范围之外的优质讨论。它的更新频率也比较适中，一般每天更新十几条，对应四五篇文章，数量适中，大多数人一天读到这个数量也就差不多了。&lt;/p&gt;
    &lt;head rend="h3"&gt;主动搜索外部网址&lt;/head&gt;
    &lt;p&gt;前面提到过，HN 特殊的发帖方式使它成为了「互联网的外置评论区」。再加上人气旺盛，英文互联网上但凡稍有些访问量的网站和页面，都有很大可能在 HN 上有所讨论。&lt;/p&gt;
    &lt;p&gt;对我来说，HN 搜索就是技术领域的重要咨询意见来源：每当看到一个风头正旺、宣传遍地的产品，我一般都会在 HN 上搜索它的名称、官网域名或者 GitHub 仓库地址，看看到底是真的不容错过，还是需要「避雷」。类似地，每当看到一篇言之凿凿的热门文章，我也会搜搜 HN 上有没有「唱反调」的声音，从而获得更全面的角度。&lt;/p&gt;
    &lt;p&gt;不过，HN 的搜索框位于首页底部的不起眼位置，用起来比较麻烦。我的建议是将 &lt;code&gt;https://hn.algolia.com/?q=%s&lt;/code&gt;（其中 &lt;code&gt;%s&lt;/code&gt; 为关键词）设置为搜索引擎或各类 launcher 工具中的搜索快捷方式来直达搜索。你也可以装一个浏览器插件 Newsit，它会自动搜索每一个访问的网页是否有相关 HN 讨论，并以横幅形式显示在网页的右下角。&lt;/p&gt;
    &lt;p&gt;顺带一提，这可能是你见过最好用的站内搜索引擎。从它的域名就可以看出来这是个「外挂」，是由知名的搜索 SaaS 提供商、也是 YC 往届校友项目的 Algolia 支持和托管，不仅速度快到冒烟，而且支持模糊匹配，可以搜出各种犄角旮旯。（更多高级语法见帮助页。）&lt;/p&gt;
    &lt;head rend="h3"&gt;跳读评论&lt;/head&gt;
    &lt;p&gt;HN 上的热门帖子往往能引来几百以至上千条评论，逐一看完显然不现实也没有必要。此外，由于用户互动有「凑热闹」的自然倾向，位于评论区顶部的热门评论往往能吸引更多的评论，从而占据越来越多的顶部空间。如果只是从头往下看，很可能因此忽视位于后面的不同视角声音。&lt;/p&gt;
    &lt;p&gt;因此，我给自己定的「规矩」是：对于第一条评论，最多看前三条回复，及其各自的三条下级回复；然后就跳到第二条评论，最多看前两条回复，及其各自的两条下级回复；最后跳到第三条评论看第一条回复，及其第一条下级回复。（注意善用每层楼的导航按钮 root（跳到所属的最上层回复）、parent（跳到所属的上一层回复）和 prev/next（跳到同层的相邻上/下一条回复）。）这样，一般能比较全面地了解评论区的综合观点，同时使得阅读时间可控。&lt;/p&gt;
    &lt;head rend="h3"&gt;AI 总结评论&lt;/head&gt;
    &lt;p&gt;当然，随着 AI 工具普及，也可以考虑用 AI 工具总结 HN 评论。不过，对于那种成百上千条评论的热门话题，HN 会自动分页显示，此时只总结第一页就不完整了。为此，可以从 HN API 获取 JSON 格式的完整评论数据，端点为：&lt;/p&gt;
    &lt;code&gt;https://hn.algolia.com/api/v1/items/${id}
&lt;/code&gt;
    &lt;p&gt;其中 &lt;code&gt;id&lt;/code&gt; 为链接中的八位数字。然后将响应内容作为提示词，和如下内容一起发送给惯用的模型即可：&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Summarize the themes of the opinions in the input provided by the user. For each theme, include at least 3 UNMODIFIED quotes with attribution. Unescape HTML entities. Go long.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;这段话可以直接放在开头，也可以作为系统提示词。提示词的写法受到了 Simon Willison 的启发，根据个人经验调整，可以比较稳定地总结评论主题、立场，并附带原始引用和用户名，方便回溯到原评论。因为只是总结类任务，GPT-4o mini、Gemini Flash 和 Claude Haiku 这样的便宜模型就能很好胜任，但注意上下文窗口越长越好，以免超出长度限制。&lt;/p&gt;
    &lt;p&gt;我用 Val Town 做了一个演示版，使用的是该服务免费提供的 GPT-4o mini 模型代理，你可以试试效果，然后 fork 一份到自己账户以便按需修改和避免限流。&lt;/p&gt;
    &lt;p&gt;A version of this article appears on Dec. 30, 2024 on SSPAI.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://hsu.cy/2025/09/how-to-read-hn/"/><published>2025-09-22T09:37:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45331370</id><title>Kmart's use of facial recognition to tackle refund fraud unlawful</title><updated>2025-09-22T17:09:32.386990+00:00</updated><content>&lt;doc fingerprint="b193914ea3572705"&gt;
  &lt;main&gt;
    &lt;p&gt;Privacy Commissioner Carly Kind has found that Kmart Australia Limited (Kmart) breached Australians’ privacy by collecting their personal and sensitive information through a facial recognition technology (FRT) system designed to tackle refund fraud.&lt;/p&gt;
    &lt;p&gt;Between June 2020 and July 2022, Kmart deployed FRT to capture the faces of every person who entered 28 of its retail stores, and all individuals who presented at a returns counter, in an attempt to identify people committing refund fraud.&lt;/p&gt;
    &lt;p&gt;In a determination published today, the Privacy Commissioner found that Kmart did not notify shoppers or seek their consent to use FRT to collect their biometric information, which is sensitive personal information and enjoys higher protections under the Privacy Act.&lt;/p&gt;
    &lt;p&gt;The retailer argued that it was not required to obtain consent because of an exemption in the Privacy Act that applies when organisations reasonably believe that they need to collect personal information to tackle unlawful activity or serious misconduct. The Privacy Commissioner’s determination focused on assessing whether Kmart met the conditions for relying on the exemption, and concluded:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The sensitive biometric information of every individual who entered a store was indiscriminately collected by the FRT system.&lt;/item&gt;
      &lt;item&gt;There were other less privacy intrusive methods available to Kmart to address refund fraud.&lt;/item&gt;
      &lt;item&gt;Deploying the FRT system to prevent fraud was of limited utility.&lt;/item&gt;
      &lt;item&gt;Considering that the FRT system impacted on the privacy of many thousands of individuals not suspected of refund fraud, the collection of biometric information on Kmart customers was a disproportionate interference with privacy.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;“Understanding how FRT accords with the protections contained in Privacy Act requires me to balance the interests of individuals in having their privacy protected, on the one hand, and the interests of entities in carrying out their functions or activities, on the other. Relevant to a technology like facial recognition, is also the public interest in protecting privacy,” the Privacy Commissioner said.&lt;/p&gt;
    &lt;p&gt;Relevant factors considered by the Commissioner included the estimated value of fraudulent returns against the respondent’s total operations and profits, the limited effectiveness of the FRT system, and the extent of the privacy impacts in collecting the sensitive information of every individual who entered the relevant stores.&lt;/p&gt;
    &lt;p&gt;“I do not consider that the respondent (Kmart) could have reasonably believed that the benefits of the FRT system in addressing refund fraud proportionately outweighed the impact on individuals’ privacy,” the Commissioner stated.&lt;/p&gt;
    &lt;p&gt;The determination is the second issued by the Office of the Australian Information Commissioner (OAIC) on the use of FRT in retail settings. In October 2024, the Privacy Commissioner found that Bunnings Group Limited had contravened Australians’ privacy through their use of FRT in 62 of its retail stores across Australia. That decision is currently under review by the Administrative Review Tribunal.&lt;/p&gt;
    &lt;p&gt;“These two decisions do not impose a ban on the use of FRT. The human rights to safety and privacy are not mutually exclusive; rather, both must be preserved, upheld and promoted. Customer and staff safety, and fraud prevention and detection, are legitimate reasons businesses might have regard to when considering the deployment of new technologies. However, these reasons are not, in and of themselves, a free pass to avoid compliance with the Privacy Act,” she stated.&lt;/p&gt;
    &lt;p&gt;The Commissioner’s determination is instructive for entities that are considering new technologies such as FRT. Privacy considerations should be a key feature. The OAIC has also published guidance on its website: Facial recognition technology: a guide to assessing the privacy risks&lt;/p&gt;
    &lt;p&gt;Kmart has been under investigation by the OAIC since July 2022, at which time it ceased operating the FRT system. It has cooperated with the OAIC throughout the investigation.&lt;/p&gt;
    &lt;p&gt;Although the Privacy Commissioner reached a similar conclusion in the Kmart and Bunnings decisions, the cases differ considerably and focus on different uses of FRT.&lt;/p&gt;
    &lt;p&gt;The Privacy Act is technology-neutral and does not proscribe the use of any particular technology. When considering the roll-out and use of new technologies such as FRT, the OAIC’s guidance encourages entities to consider factors such as proportionality, transparency, the risk of bias and discrimination, and governance for the collection, use and retention of sensitive personal information.&lt;/p&gt;
    &lt;p&gt;Commissioner Kind has published a blog post with further takeaways for other retailers considering using FRT.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.oaic.gov.au/news/media-centre/18-kmarts-use-of-facial-recognition-to-tackle-refund-fraud-unlawful,-privacy-commissioner-finds"/><published>2025-09-22T10:20:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332130</id><title>Easy Forth (2015)</title><updated>2025-09-22T17:09:32.195470+00:00</updated><content>&lt;doc fingerprint="c06d8804518f250"&gt;
  &lt;main&gt;&lt;p&gt;by Nick Morgan&lt;/p&gt;&lt;p&gt;This small ebook is here to teach you a programming language called Forth. Forth is a language unlike most others. It’s not functional or object oriented, it doesn’t have type-checking, and it basically has zero syntax. It was written in the 70s, but is still used today for certain applications.&lt;/p&gt;&lt;p&gt;Why would you want to learn such an odd language? Every new programming language you learn helps you think about problems in new ways. Forth is very easy to learn, but it requires you to think in a different way than you’re used to. That makes it a perfect language to broaden your coding horizons.&lt;/p&gt;&lt;p&gt;This book includes a simple implementation of Forth I wrote in JavaScript. It’s by no means perfect, and is missing a lot of the functionality you’d expect in a real Forth system. It’s just here to give you an easy way to try out the examples. (If you’re a Forth expert, please contribute here and make it better!)&lt;/p&gt;&lt;p&gt;I’m going to assume that you know at least one other programming language, and have a basic idea of how stacks work as a data structure.&lt;/p&gt;&lt;p&gt;The thing that separates Forth from most other languages is its use of the stack. In Forth, everything revolves around the stack. Any time you type a number, it gets pushed onto the stack. If you want to add two numbers together, typing &lt;code&gt;+&lt;/code&gt; takes the top two numbers off the stack, adds them, and puts
the result back on the stack.&lt;/p&gt;&lt;p&gt;Let’s take a look at an example. Type (don’t copy-paste) the following into the interpreter, typing &lt;code&gt;Enter&lt;/code&gt; after each line.&lt;/p&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;p&gt;Every time you type a line followed by the &lt;code&gt;Enter&lt;/code&gt; key, the Forth interpreter
executes that line, and appends the string &lt;code&gt;ok&lt;/code&gt; to let you know there were no
errors. You should also notice that as you execute each line, the area at the
top fills up with numbers. That area is our visualization of the stack. It
should look like this:&lt;/p&gt;&lt;p&gt;Now, into the same interpreter, type a single &lt;code&gt;+&lt;/code&gt; followed by the &lt;code&gt;Enter&lt;/code&gt; key. The top two
elements on the stack, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;, have been replaced by &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;At this point, your editor window should look like this:&lt;/p&gt;&lt;p&gt;Type &lt;code&gt;+&lt;/code&gt; again and press &lt;code&gt;Enter&lt;/code&gt;, and the top two elements will be replaced by 6. If
you type &lt;code&gt;+&lt;/code&gt; one more time, Forth will try to pop the top two elements off the
stack, even though there’s only one element on the stack! This results in a
&lt;code&gt;Stack underflow&lt;/code&gt; error:&lt;/p&gt;&lt;p&gt;Forth doesn’t force you to type every token as a separate line. Type the following into the next editor, followed by the &lt;code&gt;Enter&lt;/code&gt; key:&lt;/p&gt;&lt;code&gt;123 456 +
&lt;/code&gt;&lt;p&gt;The stack should now look like this:&lt;/p&gt;&lt;p&gt;This style, where the operator appears after the operands, is known as Reverse-Polish notation. Let’s try something a bit more complicated, and calculate &lt;code&gt;10 * (5 + 2)&lt;/code&gt;. Type the
following into the interpreter:&lt;/p&gt;&lt;code&gt;5 2 + 10 *
&lt;/code&gt;&lt;p&gt;One of the nice things about Forth is that the order of operations is completely based on their order in the program. For example, when executing &lt;code&gt;5
2 + 10 *&lt;/code&gt;, the interpreter pushes 5 to the stack, then 2, then adds them and
pushes the resulting 7, then pushes 10 to the stack, then multiplies 7 and 10.
Because of this, there’s no need for parentheses to group operators with lower
precedence.&lt;/p&gt;&lt;p&gt;Most Forth words affect the stack in some way. Some take values off the stack, some leave new values on the stack, and some do a mixture of both. These “stack effects” are commonly represented using comments of the form &lt;code&gt;( before -- after
)&lt;/code&gt;. For example, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;( n1 n2 -- sum )&lt;/code&gt; - &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt; are the top two numbers
on the stack, and &lt;code&gt;sum&lt;/code&gt; is the value left on the stack.&lt;/p&gt;&lt;p&gt;The syntax of Forth is extremely straightforward. Forth code is interpreted as a series of space-delimited words. Almost all non-whitespace characters are valid in words. When the Forth interpreter reads a word, it checks to see if a definition exists in an internal structure known as the Dictionary. If it is found, that definition is executed. Otherwise, the word is assumed to be a number, and it is pushed onto the stack. If the word cannot be converted to a number, an error occurs.&lt;/p&gt;&lt;p&gt;You can try that out yourself below. Type &lt;code&gt;foo&lt;/code&gt; (an unrecognized word)
and press enter.&lt;/p&gt;&lt;p&gt;You should see something like this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;foo ?&lt;/code&gt; means that Forth was unable to find a definition for &lt;code&gt;foo&lt;/code&gt;, and it
wasn’t a valid number.&lt;/p&gt;&lt;p&gt;We can create our own definition of &lt;code&gt;foo&lt;/code&gt; using two special words called &lt;code&gt;:&lt;/code&gt;
(colon) and &lt;code&gt;;&lt;/code&gt; (semicolon).  &lt;code&gt;:&lt;/code&gt; is our way of telling Forth we want to create
a definition. The first word after the &lt;code&gt;:&lt;/code&gt; becomes the definition name, and the
rest of the words (until the &lt;code&gt;;&lt;/code&gt;) make up the body of the definition. It’s
conventional to include two spaces between the name and the body of the
definition. Try entering the following:&lt;/p&gt;&lt;code&gt;: foo  100 + ;
1000 foo
foo foo foo
&lt;/code&gt;&lt;p&gt;Warning: A common mistake is to miss out the space before the &lt;code&gt;;&lt;/code&gt; word. Because Forth
words are space delimited and can contain most characters, &lt;code&gt;+;&lt;/code&gt; is a perfectly
valid word and is not parsed as two separate words.&lt;/p&gt;&lt;p&gt;As you’ve hopefully figured out, our &lt;code&gt;foo&lt;/code&gt; word simply adds 100 to the value on
top of the stack. It’s not very interesting, but it should give you an idea of
how simple definitions work.&lt;/p&gt;&lt;p&gt;Now we can start taking a look at some of Forth’s predefined words. First, let’s look at some words for manipulating the elements at the top of the stack.&lt;/p&gt;&lt;code&gt;dup ( n -- n n )&lt;/code&gt;&lt;p&gt;&lt;code&gt;dup&lt;/code&gt; is short for “duplicate” – it duplicates the top element of the stack. For example,
try this out:&lt;/p&gt;&lt;code&gt;1 2 3 dup
&lt;/code&gt;&lt;p&gt;You should end up with the following stack:&lt;/p&gt;&lt;code&gt;drop ( n -- )&lt;/code&gt;&lt;p&gt;&lt;code&gt;drop&lt;/code&gt; simply drops the top element of the stack. Running:&lt;/p&gt;&lt;code&gt;1 2 3 drop
&lt;/code&gt;&lt;p&gt;gives you a stack of:&lt;/p&gt;&lt;code&gt;swap ( n1 n2 -- n2 n1 )&lt;/code&gt;&lt;p&gt;&lt;code&gt;swap&lt;/code&gt;, as you may have guessed, swaps the top two elements of the stack. For example:&lt;/p&gt;&lt;code&gt;1 2 3 4 swap
&lt;/code&gt;&lt;p&gt;will give you:&lt;/p&gt;&lt;code&gt;over ( n1 n2 -- n1 n2 n1 )&lt;/code&gt;&lt;p&gt;&lt;code&gt;over&lt;/code&gt; is a bit less obvious: it takes the second element from the top of the
stack and duplicates it to the top of the stack. Running this:&lt;/p&gt;&lt;code&gt;1 2 3 over
&lt;/code&gt;&lt;p&gt;will result in this:&lt;/p&gt;&lt;code&gt;rot ( n1 n2 n3 -- n2 n3 n1 )&lt;/code&gt;&lt;p&gt;Finally, &lt;code&gt;rot&lt;/code&gt; “rotates” the top three elements of the stack. The third
element from the top of the stack gets moved to the top of the stack, pushing
the other two elements down.&lt;/p&gt;&lt;code&gt;1 2 3 rot
&lt;/code&gt;&lt;p&gt;gives you:&lt;/p&gt;&lt;p&gt;Next, let’s look at some words for outputting text to the console.&lt;/p&gt;&lt;code&gt;. ( n -- )&lt;/code&gt; (period)&lt;p&gt;The simplest output word in Forth is &lt;code&gt;.&lt;/code&gt;. You can use &lt;code&gt;.&lt;/code&gt; to output the top of
the stack in the output of the current line. For example, try running this
(make sure to include all the spaces!):&lt;/p&gt;&lt;code&gt;1 . 2 . 3 . 4 5 6 . . .
&lt;/code&gt;&lt;p&gt;You should see this:&lt;/p&gt;&lt;p&gt;Going through this in order, we push &lt;code&gt;1&lt;/code&gt;, then pop it off and output it. Then
we do the same with &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;. Next we push &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, and &lt;code&gt;6&lt;/code&gt; onto the stack.
We then pop them off and output them one-by-one. That’s why the last three
numbers in the output are reversed: the stack is last in, first out.&lt;/p&gt;&lt;code&gt;emit ( c -- )&lt;/code&gt;&lt;p&gt;&lt;code&gt;emit&lt;/code&gt; can be used to output numbers as ascii characters. Just like &lt;code&gt;.&lt;/code&gt; outputs
the number at the top of the stack, &lt;code&gt;emit&lt;/code&gt; outputs that number as an ascii
character. For example:&lt;/p&gt;&lt;code&gt; 33 119 111 87 emit emit emit emit
&lt;/code&gt;&lt;p&gt;I won’t give the output here so as to not ruin the surprise. This could also be written as:&lt;/p&gt;&lt;code&gt;87 emit 111 emit 119 emit 33 emit
&lt;/code&gt;&lt;p&gt;Unlike &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt; doesn’t output any space after each character, enabling you
to build up arbitrary strings of output.&lt;/p&gt;&lt;code&gt;cr ( -- )&lt;/code&gt;&lt;p&gt;&lt;code&gt;cr&lt;/code&gt; is short for carriage return – it simply outputs a newline:&lt;/p&gt;&lt;code&gt;cr 100 . cr 200 . cr 300 .
&lt;/code&gt;&lt;p&gt;This will output:&lt;/p&gt;&lt;code&gt;." ( -- )&lt;/code&gt;&lt;p&gt;Finally we have &lt;code&gt;."&lt;/code&gt; – a special word for outputting strings. The &lt;code&gt;."&lt;/code&gt; word works
differently inside definitions to interactive mode. &lt;code&gt;."&lt;/code&gt; marks the beginning of
a string to output, and the end of the string is marked by &lt;code&gt;"&lt;/code&gt;. The closing &lt;code&gt;"&lt;/code&gt;
isn’t a word, and so doesn’t need to be space-delimited. Here’s an example:&lt;/p&gt;&lt;code&gt;: say-hello  ." Hello there!" ;
say-hello
&lt;/code&gt;&lt;p&gt;You should see the following output&lt;/p&gt;&lt;p&gt;We can combine &lt;code&gt;."&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;cr&lt;/code&gt;, and &lt;code&gt;emit&lt;/code&gt; to build up more complex output:&lt;/p&gt;&lt;code&gt;: print-stack-top  cr dup ." The top of the stack is " .
  cr ." which looks like '" dup emit ." ' in ascii  " ;
48 print-stack-top
&lt;/code&gt;&lt;p&gt;Running this should give you the following output:&lt;/p&gt;&lt;p&gt;Now onto the fun stuff! Forth, like most other languages, has conditionals and loops for controlling the flow of your program. To understand how they work, however, first we need to understand booleans in Forth.&lt;/p&gt;&lt;p&gt;There’s actually no boolean type in Forth. The number &lt;code&gt;0&lt;/code&gt; is treated as false,
and any other number is true, although the canonical true value is &lt;code&gt;-1&lt;/code&gt; (all
boolean operators return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;To test if two numbers are equal, you can use &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;3 4 = .
5 5 = .
&lt;/code&gt;&lt;p&gt;This should output:&lt;/p&gt;&lt;p&gt;You can use &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; for less than and greater than. &lt;code&gt;&amp;lt;&lt;/code&gt; checks to see if the
second item from the top of the stack is less than the top item of the stack, and
vice versa for &lt;code&gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;3 4 &amp;lt; .
3 4 &amp;gt; .
&lt;/code&gt;&lt;p&gt;The boolean operators And, Or, and Not are available as &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;invert&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;3 4 &amp;lt; 20 30 &amp;lt; and .
3 4 &amp;lt; 20 30 &amp;gt; or .
3 4 &amp;lt; invert .
&lt;/code&gt;&lt;p&gt;The first line is the equivalent of &lt;code&gt;3 &amp;lt; 4 &amp;amp; 20 &amp;lt; 30&lt;/code&gt; in a C-based language.
The second line is the equivalent of &lt;code&gt;3 &amp;lt; 4 | 20 &amp;gt; 30&lt;/code&gt;. The third line is the
equivalent of &lt;code&gt;!(3 &amp;lt; 4)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;invert&lt;/code&gt; are all bitwise operations. For well-formed flags
(&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt;) they’ll work as expected, but they’ll give incorrect results for
arbitrary numbers.&lt;/p&gt;&lt;code&gt;if then&lt;/code&gt;&lt;p&gt;Now we can finally get onto conditionals. Conditionals in Forth can only be used inside definitions. The simplest conditional statement in Forth is &lt;code&gt;if
then&lt;/code&gt;, which is equivalent to a standard &lt;code&gt;if&lt;/code&gt; statement in most languages.
Here’s an example of a definition using &lt;code&gt;if then&lt;/code&gt;. In this example, we’re also
using the &lt;code&gt;mod&lt;/code&gt; word, which returns the modulo of the top two numbers on the
stack. In this case, the top number is 5, and the other is whatever was placed
on the stack before calling &lt;code&gt;buzz?&lt;/code&gt;. Therefore, &lt;code&gt;5 mod 0 =&lt;/code&gt; is a boolean
expression that checks to see if the top of the stack is divisible by 5.&lt;/p&gt;&lt;code&gt;: buzz?  5 mod 0 = if ." Buzz" then ;
3 buzz?
4 buzz?
5 buzz?
&lt;/code&gt;&lt;p&gt;This will output:&lt;/p&gt;&lt;p&gt;It’s important to note that the &lt;code&gt;then&lt;/code&gt; word marks the end of the &lt;code&gt;if&lt;/code&gt; statement.
This makes it equivalent to &lt;code&gt;fi&lt;/code&gt; in Bash or &lt;code&gt;end&lt;/code&gt; in Ruby, for example.&lt;/p&gt;&lt;p&gt;Another important thing to realize is that &lt;code&gt;if&lt;/code&gt; consumes the top value on the
stack when it checks to see if it’s true or false.&lt;/p&gt;&lt;code&gt;if else then&lt;/code&gt;&lt;p&gt;&lt;code&gt;if else then&lt;/code&gt; is equivalent to an &lt;code&gt;if/else&lt;/code&gt; statement in most languages. Here’s
an example of its use:&lt;/p&gt;&lt;code&gt;: is-it-zero?  0 = if ." Yes!" else ." No!" then ;
0 is-it-zero?
1 is-it-zero?
2 is-it-zero?
&lt;/code&gt;&lt;p&gt;This outputs:&lt;/p&gt;&lt;p&gt;This time, the if clause (consequent) is everything between &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;,
and the else clause (alternative) is everything between &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;do loop&lt;/code&gt;&lt;p&gt;&lt;code&gt;do loop&lt;/code&gt; in Forth most closely resembles a &lt;code&gt;for&lt;/code&gt; loop in most C-based languages.
In the body of a &lt;code&gt;do loop&lt;/code&gt;, the special word &lt;code&gt;i&lt;/code&gt; pushes the current loop index
onto the stack.&lt;/p&gt;&lt;p&gt;The top two values on the stack give the starting value (inclusive) and ending value (exclusive) for the &lt;code&gt;i&lt;/code&gt; value. The starting value is taken from the top
of the stack. Here’s an example:&lt;/p&gt;&lt;code&gt;: loop-test  10 0 do i . loop ;
loop-test
&lt;/code&gt;&lt;p&gt;This should output:&lt;/p&gt;&lt;p&gt;The expression &lt;code&gt;10 0 do i . loop&lt;/code&gt; is roughly equivalent to:&lt;/p&gt;&lt;code&gt;for (int i = 0; i &amp;lt; 10; i++) {
  print(i);
}
&lt;/code&gt;&lt;p&gt;We can write the classic Fizz Buzz program easily using a &lt;code&gt;do loop&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;: fizz?  3 mod 0 = dup if ." Fizz" then ;
: buzz?  5 mod 0 = dup if ." Buzz" then ;
: fizz-buzz?  dup fizz? swap buzz? or invert ;
: do-fizz-buzz  25 1 do cr i fizz-buzz? if i . then loop ;
do-fizz-buzz
&lt;/code&gt;&lt;p&gt;&lt;code&gt;fizz?&lt;/code&gt; checks to see if the top of the stack is divisible by 3 using &lt;code&gt;3 mod 0
=&lt;/code&gt;. It then uses &lt;code&gt;dup&lt;/code&gt; to duplicate this result. The top copy of the value is
consumed by &lt;code&gt;if&lt;/code&gt;.  The second copy is left on the stack and acts as the return
value of &lt;code&gt;fizz?&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If the number on top of the stack is divisible by 3, the string &lt;code&gt;"Fizz"&lt;/code&gt; will
be output, otherwise there will be no output.&lt;/p&gt;&lt;p&gt;&lt;code&gt;buzz?&lt;/code&gt; does the same thing but with 5, and outputs the string &lt;code&gt;"Buzz"&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;code&gt;fizz-buzz?&lt;/code&gt; calls &lt;code&gt;dup&lt;/code&gt; to duplicate the value on top of the stack, then calls
&lt;code&gt;fizz?&lt;/code&gt;, converting the top copy into a boolean. After this, the top of the
stack consists of the original value, and the boolean returned by &lt;code&gt;fizz?&lt;/code&gt;.
&lt;code&gt;swap&lt;/code&gt; swaps these, so the original top-of-stack value is back on top, and the
boolean is underneath. Next we call &lt;code&gt;buzz?&lt;/code&gt;, which replaces the top-of-stack
value with a boolean flag. Now the top two values on the stack are booleans
representing whether the number was divisible by 3 or 5.  After this, we call
&lt;code&gt;or&lt;/code&gt; to see if either of these is true, and &lt;code&gt;invert&lt;/code&gt; to negate this value.
Logically, the body of &lt;code&gt;fizz-buzz?&lt;/code&gt; is equivalent to:&lt;/p&gt;&lt;code&gt;!(x % 3 == 0 || x % 5 == 0)
&lt;/code&gt;&lt;p&gt;Therefore, &lt;code&gt;fizz-buzz?&lt;/code&gt; returns a boolean indicating if the argument is not
divisible by 3 or 5, and thus should be printed.  Finally, &lt;code&gt;do-fizz-buzz&lt;/code&gt; loops
from 1 to 25, calling &lt;code&gt;fizz-buzz?&lt;/code&gt; on &lt;code&gt;i&lt;/code&gt;, and outputting &lt;code&gt;i&lt;/code&gt; if &lt;code&gt;fizz-buzz?&lt;/code&gt;
returns true.&lt;/p&gt;&lt;p&gt;If you’re having trouble figuring out what’s going on inside &lt;code&gt;fizz-buzz?&lt;/code&gt;, the
example below might help you to understand how it works. All we’re doing here
is executing each word of the definition of &lt;code&gt;fizz-buzz?&lt;/code&gt; on a separate line. As
you execute each line, watch the stack to see how it changes:&lt;/p&gt;&lt;code&gt;: fizz?  3 mod 0 = dup if ." Fizz" then ;
: buzz?  5 mod 0 = dup if ." Buzz" then ;
4
dup
fizz?
swap
buzz?
or
invert
&lt;/code&gt;&lt;p&gt;Here’s how each line affects the stack:&lt;/p&gt;&lt;code&gt;4         4 &amp;lt;- Top
dup       4 4 &amp;lt;- Top
fizz?     4 0 &amp;lt;- Top
swap      0 4 &amp;lt;- Top
buzz?     0 0 &amp;lt;- Top
or        0 &amp;lt;- Top
invert    -1 &amp;lt;- Top
&lt;/code&gt;&lt;p&gt;Remember, the final value on the stack is the return value of the &lt;code&gt;fizz-buzz?&lt;/code&gt;
word. In this case, it’s true, because the number was not divisible by 3 or 5,
and so should be printed.&lt;/p&gt;&lt;p&gt;Here’s the same thing but starting with 5:&lt;/p&gt;&lt;code&gt;5         5 &amp;lt;- Top
dup       5 5 &amp;lt;- Top
fizz?     5 0 &amp;lt;- Top
swap      0 5 &amp;lt;- Top
buzz?     0 -1 &amp;lt;- Top
or        -1 &amp;lt;- Top
invert    0 &amp;lt;- Top
&lt;/code&gt;&lt;p&gt;In this case the original top-of-stack value was divisible by 5, so nothing should be printed.&lt;/p&gt;&lt;p&gt;Forth also allows you to save values in variables and constants. Variables allow you to keep track of changing values without having to store them on the stack. Constants give you a simple way to refer to a value that won’t change.&lt;/p&gt;&lt;p&gt;Because the role of local variables is generally played by the stack, variables in Forth are used more to store state that may be needed across multiple words.&lt;/p&gt;&lt;p&gt;Defining variables is simple:&lt;/p&gt;&lt;code&gt;variable balance
&lt;/code&gt;&lt;p&gt;This basically associates a particular memory location with the name &lt;code&gt;balance&lt;/code&gt;.
&lt;code&gt;balance&lt;/code&gt; is now a word, and all it does is to push its memory location onto the
stack:&lt;/p&gt;&lt;code&gt;variable balance
balance
&lt;/code&gt;&lt;p&gt;You should see the value &lt;code&gt;1000&lt;/code&gt; on the stack. This Forth implementation arbitrarily
starts storing variables at the memory location &lt;code&gt;1000&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The word &lt;code&gt;!&lt;/code&gt; stores a value at the memory location referenced by a variable, and the
word &lt;code&gt;@&lt;/code&gt; fetches the value from a memory location:&lt;/p&gt;&lt;code&gt;variable balance
123 balance !
balance @
&lt;/code&gt;&lt;p&gt;This time you should see the value &lt;code&gt;123&lt;/code&gt; on the stack. &lt;code&gt;123 balance&lt;/code&gt; pushes the
value and the memory location onto the stack, and &lt;code&gt;!&lt;/code&gt; stores that value at that
memory location. Likewise, &lt;code&gt;@&lt;/code&gt; retrieves the value based on the memory location,
and pushes that value onto the stack. If you’ve used C or C++, you can think of
&lt;code&gt;balance&lt;/code&gt; as a pointer that is dereferenced by &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The word &lt;code&gt;?&lt;/code&gt; is defined as &lt;code&gt;@ .&lt;/code&gt; and it prints the current value of a variable.
The word &lt;code&gt;+!&lt;/code&gt; is used to increase the value of a variable by a certain amount
(like &lt;code&gt;+=&lt;/code&gt; in C-based languages).&lt;/p&gt;&lt;code&gt;variable balance
123 balance !
balance ?
50 balance +!
balance ?
&lt;/code&gt;&lt;p&gt;Run this code and you should see:&lt;/p&gt;&lt;p&gt;If you have a value that doesn’t change, you can store it as a constant. Constants are defined in one line, like this:&lt;/p&gt;&lt;code&gt;42 constant answer
&lt;/code&gt;&lt;p&gt;This creates a new constant called &lt;code&gt;answer&lt;/code&gt; with the value &lt;code&gt;42&lt;/code&gt;. Unlike variables,
constants just represent values, rather than memory locations, so there’s no need
to use &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;42 constant answer
2 answer *
&lt;/code&gt;&lt;p&gt;Running this will push the value &lt;code&gt;84&lt;/code&gt; on the stack. &lt;code&gt;answer&lt;/code&gt; is treated as if it
was the number it represents (just like constants and variables in other languages).&lt;/p&gt;&lt;p&gt;Forth doesn’t exactly support arrays, but it does allow you to allocate a zone of contiguous memory, a lot like arrays in C. To allocate this memory, use the &lt;code&gt;allot&lt;/code&gt;
word.&lt;/p&gt;&lt;code&gt;variable numbers
3 cells allot
10 numbers 0 cells + !
20 numbers 1 cells + !
30 numbers 2 cells + !
40 numbers 3 cells + !
&lt;/code&gt;&lt;p&gt;This example creates a memory location called &lt;code&gt;numbers&lt;/code&gt;, and reserves three extra
memory cells after this location, giving a total of four memory cells. (&lt;code&gt;cells&lt;/code&gt;
just multiplies by the cell-width, which is 1 in this implementation.)&lt;/p&gt;&lt;p&gt;&lt;code&gt;numbers 0 +&lt;/code&gt; gives the address of the first cell in the array. &lt;code&gt;10 numbers 0 + !&lt;/code&gt;
stores the value &lt;code&gt;10&lt;/code&gt; in the first cell of the array.&lt;/p&gt;&lt;p&gt;We can easily write words to simplify array access:&lt;/p&gt;&lt;code&gt;variable numbers
3 cells allot
: number  ( offset -- addr )  cells numbers + ;

10 0 number !
20 1 number !
30 2 number !
40 3 number !

2 number ?
&lt;/code&gt;&lt;p&gt;&lt;code&gt;number&lt;/code&gt; takes an offset into &lt;code&gt;numbers&lt;/code&gt; and returns the memory address at that
offset. &lt;code&gt;30 2 number !&lt;/code&gt; stores &lt;code&gt;30&lt;/code&gt; at offset &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;numbers&lt;/code&gt;, and &lt;code&gt;2 number ?&lt;/code&gt;
prints the value at offset &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;numbers&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Forth has a special word called &lt;code&gt;key&lt;/code&gt;, which is used for accepting keyboard input.
When the &lt;code&gt;key&lt;/code&gt; word is executed, execution is paused until a key is pressed. Once
a key is pressed, the key code of that key is pushed onto the stack. Try out the
following:&lt;/p&gt;&lt;code&gt;key . key . key .
&lt;/code&gt;&lt;p&gt;When you run this line, you’ll notice that at first nothing happens. This is because the interpreter is waiting for your keyboard input. Try hitting the &lt;code&gt;A&lt;/code&gt; key, and
you should see the keycode for that key, &lt;code&gt;65&lt;/code&gt;, appear as output on the current line.
Now hit &lt;code&gt;B&lt;/code&gt;, then &lt;code&gt;C&lt;/code&gt;, and you should see the following:&lt;/p&gt;&lt;code&gt;begin until&lt;/code&gt;&lt;p&gt;Forth has another kind of loop called &lt;code&gt;begin until&lt;/code&gt;. This works like a &lt;code&gt;while&lt;/code&gt;
loop in C-based languages. Every time the word &lt;code&gt;until&lt;/code&gt; is hit, the interpreter
checks to see if the top of the stack is non-zero (true). If it is, it jumps
back to the matching &lt;code&gt;begin&lt;/code&gt;. If not, execution continues.&lt;/p&gt;&lt;p&gt;Here’s an example of using &lt;code&gt;begin until&lt;/code&gt; to print key codes:&lt;/p&gt;&lt;code&gt;: print-keycode  begin key dup . 32 = until ;
print-keycode
&lt;/code&gt;&lt;p&gt;This will keep printing key codes until you press space. You should see something like this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;key&lt;/code&gt; waits for key input, then &lt;code&gt;dup&lt;/code&gt; duplicates the keycode from &lt;code&gt;key&lt;/code&gt;. We
then use &lt;code&gt;.&lt;/code&gt; to output the top copy of the keycode, and &lt;code&gt;32 =&lt;/code&gt; to check to see
if the keycode is equal to 32. If it is, we break out of the loop, otherwise we
loop back to &lt;code&gt;begin&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now it’s time to put it all together and make a game! Rather than having you type all the code, I’ve pre-loaded it into the editor.&lt;/p&gt;&lt;p&gt;Before we look at the code, try playing the game. To start the game, execute the word &lt;code&gt;start&lt;/code&gt;. Then use the arrow keys to move the snake. If you lose, you can run
&lt;code&gt;start&lt;/code&gt; again.&lt;/p&gt;&lt;p&gt;Before we delve too deeply into this code, two disclaimers. First, this is terrible Forth code. I’m by no means a Forth expert, so there’s probably all kinds of things I’m doing in completely the wrong way. Second, this game uses a few non-standard techniques in order to interface with JavaScript. I’ll go through these now.&lt;/p&gt;&lt;p&gt;You may have noticed that this editor is different from the others: it has an HTML5 Canvas element built in. I’ve created a very simple memory-mapped interface for drawing onto this canvas. The canvas is split up into 24 x 24 “pixels” which can be black or white. The first pixel is found at the memory address given by the variable &lt;code&gt;graphics&lt;/code&gt;, and the rest of the pixels are offsets from the variable. So,
for example, to draw a white pixel in the top-left corner you could run&lt;/p&gt;&lt;code&gt;1 graphics !
&lt;/code&gt;&lt;p&gt;The game uses the following words to draw to the canvas:&lt;/p&gt;&lt;code&gt;: convert-x-y ( x y -- offset )  24 cells * + ;
: draw ( color x y -- )  convert-x-y graphics + ! ;
: draw-white ( x y -- )  1 rot rot draw ;
: draw-black ( x y -- )  0 rot rot draw ;
&lt;/code&gt;&lt;p&gt;For example, &lt;code&gt;3 4 draw-white&lt;/code&gt; draws a white pixel at the coordinates (3, 4). The
y coordinate is multiplied by 24 to get the row, then the x coordinated is added
to get the column.&lt;/p&gt;&lt;p&gt;The Forth word &lt;code&gt;key&lt;/code&gt; blocks, so is unsuitable for a game like this. I’ve added
a variable called &lt;code&gt;last-key&lt;/code&gt; which always holds the value of the last key to be
pressed. &lt;code&gt;last-key&lt;/code&gt; is only updated while the interpreter is running Forth code.&lt;/p&gt;&lt;p&gt;The Forth standard doesn’t define a way of generating random numbers, so I’ve added a word called &lt;code&gt;random ( range -- n )&lt;/code&gt; that takes a range and returns a
random number from 0 to range - 1. For example, &lt;code&gt;3 random&lt;/code&gt; could
return &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, or &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;sleep ( ms -- )&lt;/code&gt;&lt;p&gt;Finally, I’ve added a blocking &lt;code&gt;sleep&lt;/code&gt; word that pauses execution for the
number of milliseconds given.&lt;/p&gt;&lt;p&gt;Now we can work through the code from start to finish.&lt;/p&gt;&lt;p&gt;The start of the code just sets up some variables and constants:&lt;/p&gt;&lt;code&gt;variable snake-x-head
500 cells allot

variable snake-y-head
500 cells allot

variable apple-x
variable apple-y

0 constant left
1 constant up
2 constant right
3 constant down

24 constant width
24 constant height

variable direction
variable length
&lt;/code&gt;&lt;p&gt;&lt;code&gt;snake-x-head&lt;/code&gt; and &lt;code&gt;snake-y-head&lt;/code&gt; are memory locations used to store the x and
y coordinates of the head of the snake. 500 cells of memory are alloted after
these two locations to store the coordinates of the tail of the snake.&lt;/p&gt;&lt;p&gt;Next we define two words for accessing memory locations representing the body of the snake.&lt;/p&gt;&lt;code&gt;: snake-x ( offset -- address )
  cells snake-x-head + ;

: snake-y ( offset -- address )
  cells snake-y-head + ;
&lt;/code&gt;&lt;p&gt;Just like the &lt;code&gt;number&lt;/code&gt; word earlier, these two words are used to access
elements in the arrays of snake segments. After this come some words for
drawing to the canvas, described above.&lt;/p&gt;&lt;p&gt;We use constants to refer to the four directions (&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and
&lt;code&gt;down&lt;/code&gt;), and a variable &lt;code&gt;direction&lt;/code&gt; to store the current direction.&lt;/p&gt;&lt;p&gt;After this we initialize everything:&lt;/p&gt;&lt;code&gt;: draw-walls
  width 0 do
    i 0 draw-black
    i height 1 - draw-black
  loop
  height 0 do
    0 i draw-black
    width 1 - i draw-black
  loop ;

: initialize-snake
  4 length !
  length @ 1 + 0 do
    12 i - i snake-x !
    12 i snake-y !
  loop
  right direction ! ;

: set-apple-position apple-x ! apple-y ! ;

: initialize-apple  4 4 set-apple-position ;

: initialize
  width 0 do
    height 0 do
      j i draw-white
    loop
  loop
  draw-walls
  initialize-snake
  initialize-apple ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;draw-walls&lt;/code&gt; uses two &lt;code&gt;do/loop&lt;/code&gt;s to draw the horizontal and vertical walls,
respectively.&lt;/p&gt;&lt;p&gt;&lt;code&gt;initialize-snake&lt;/code&gt; sets the &lt;code&gt;length&lt;/code&gt; variable to &lt;code&gt;4&lt;/code&gt;, then loops from &lt;code&gt;0&lt;/code&gt; to
&lt;code&gt;length + 1&lt;/code&gt; filling in the starting snake positions. The snake positions are
always kept one longer than the length so we can grow the snake easily.&lt;/p&gt;&lt;p&gt;&lt;code&gt;set-apple-position&lt;/code&gt; and &lt;code&gt;initialize-apple&lt;/code&gt; set the initial position of the
apple to (4,4).&lt;/p&gt;&lt;p&gt;Finally, &lt;code&gt;initialize&lt;/code&gt; fills everything in white and calls the three
initialization words.&lt;/p&gt;&lt;p&gt;Here’s the code for moving the snake based on the current value of &lt;code&gt;direction&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;: move-up  -1 snake-y-head +! ;
: move-left  -1 snake-x-head +! ;
: move-down  1 snake-y-head +! ;
: move-right  1 snake-x-head +! ;

: move-snake-head  direction @
  left over  = if move-left else
  up over    = if move-up else
  right over = if move-right else
  down over  = if move-down
  then then then then drop ;

\ Move each segment of the snake forward by one
: move-snake-tail  0 length @ do
    i snake-x @ i 1 + snake-x !
    i snake-y @ i 1 + snake-y !
  -1 +loop ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;move-up&lt;/code&gt;, &lt;code&gt;move-left&lt;/code&gt;, &lt;code&gt;move-down&lt;/code&gt;, and &lt;code&gt;move-right&lt;/code&gt; just add or subtract one
from the x or y coordinate of the snake head. &lt;code&gt;move-snake-head&lt;/code&gt; inspects the
value of &lt;code&gt;direction&lt;/code&gt; and calls the appropriate &lt;code&gt;move-*&lt;/code&gt; word. This &lt;code&gt;over = if&lt;/code&gt;
pattern is an idiomatic way of doing case statements in Forth.&lt;/p&gt;&lt;p&gt;&lt;code&gt;move-snake-tail&lt;/code&gt; goes through the array of snake positions backwards, copying
each value forward by 1 cell. This is called before we move the snake head, to
move each segment of the snake forward one space. It uses a &lt;code&gt;do/+loop&lt;/code&gt;, a
variation of a &lt;code&gt;do/loop&lt;/code&gt; that pops the stack on every iteration and adds that
value to the next index, instead of incrementing by 1 each time. So &lt;code&gt;0 length @
do -1 +loop&lt;/code&gt; loops from &lt;code&gt;length&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; in increments of &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The next section of code takes the keyboard input and changes the snake direction if appropriate.&lt;/p&gt;&lt;code&gt;: is-horizontal  direction @ dup
  left = swap
  right = or ;

: is-vertical  direction @ dup
  up = swap
  down = or ;

: turn-up     is-horizontal if up direction ! then ;
: turn-left   is-vertical if left direction ! then ;
: turn-down   is-horizontal if down direction ! then ;
: turn-right  is-vertical if right direction ! then ;

: change-direction ( key -- )
  37 over = if turn-left else
  38 over = if turn-up else
  39 over = if turn-right else
  40 over = if turn-down
  then then then then drop ;

: check-input
  last-key @ change-direction
  0 last-key ! ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;is-horizontal&lt;/code&gt; and &lt;code&gt;is-vertical&lt;/code&gt; check the current status of the &lt;code&gt;direction&lt;/code&gt;
variable to see if it’s a horizontal or vertical direction.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;turn-*&lt;/code&gt; words are used to set a new direction, but use &lt;code&gt;is-horizontal&lt;/code&gt; and
&lt;code&gt;is-vertical&lt;/code&gt; to check the current direction first to see if the new direction
is valid. For example, if the snake is moving horizontally, setting a new
direction of &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt; doesn’t make sense.&lt;/p&gt;&lt;p&gt;&lt;code&gt;change-direction&lt;/code&gt; takes a key and calls the appropriate &lt;code&gt;turn-*&lt;/code&gt; word if the
key was one of the arrow keys. &lt;code&gt;check-input&lt;/code&gt; does the work of getting the last
key from the &lt;code&gt;last-key&lt;/code&gt; pseudo-variable, calling &lt;code&gt;change-direction&lt;/code&gt;, then setting
&lt;code&gt;last-key&lt;/code&gt; to 0 to indicate that the most recent keypress has been dealt with.&lt;/p&gt;&lt;p&gt;The next code is used for checking to see if the apple has been eaten, and if so, moving it to a new (random) location. Also, if the apple has been eaten we grow the snake.&lt;/p&gt;&lt;code&gt;\ get random x or y position within playable area
: random-position ( -- pos )
  width 4 - random 2 + ;

: move-apple
  apple-x @ apple-y @ draw-white
  random-position random-position
  set-apple-position ;

: grow-snake  1 length +! ;

: check-apple ( -- flag )
  snake-x-head @ apple-x @ =
  snake-y-head @ apple-y @ =
  and if
    move-apple
    grow-snake
  then ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;random-position&lt;/code&gt; generates a random x or y coordinate in the range of &lt;code&gt;2&lt;/code&gt; to
&lt;code&gt;width - 2&lt;/code&gt;. This prevents the apple from ever appearing right next to the wall.&lt;/p&gt;&lt;p&gt;&lt;code&gt;move-apple&lt;/code&gt; erases the current apple (using &lt;code&gt;draw-white&lt;/code&gt;) then creates a new
pair of x/y coordinates for the apple using &lt;code&gt;random-position&lt;/code&gt; twice. Finally,
it calls &lt;code&gt;set-apple-position&lt;/code&gt; to move the apple to the new coordinates.&lt;/p&gt;&lt;p&gt;&lt;code&gt;grow-snake&lt;/code&gt; simply adds one to the &lt;code&gt;length&lt;/code&gt; variable.&lt;/p&gt;&lt;p&gt;&lt;code&gt;check-apple&lt;/code&gt; compares the x/y coordinates of the apple and the snake head to
see if they’re the same (using &lt;code&gt;=&lt;/code&gt; twice and &lt;code&gt;and&lt;/code&gt; to combine the two
booleans). If the coordinates are the same, we call &lt;code&gt;move-apple&lt;/code&gt; to move the
apple to a new position and &lt;code&gt;grow-snake&lt;/code&gt; to make the snake 1 segment longer.&lt;/p&gt;&lt;p&gt;Next we see if the snake has collided with the walls or itself.&lt;/p&gt;&lt;code&gt;: check-collision ( -- flag )
  \ get current x/y position
  snake-x-head @ snake-y-head @

  \ get color at current position
  convert-x-y graphics + @

  \ leave boolean flag on stack
  0 = ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;check-collision&lt;/code&gt; checks to see if the new snake head position is already black
(this word is called after updating the snake’s position but before drawing
it at the new position). We leave a boolean on the stack to say whether a
collision has occured or not.&lt;/p&gt;&lt;p&gt;The next two words are responsible for drawing the snake and apple.&lt;/p&gt;&lt;code&gt;: draw-snake
  length @ 0 do
    i snake-x @ i snake-y @ draw-black
  loop
  length @ snake-x @
  length @ snake-y @
  draw-white ;

: draw-apple
  apple-x @ apple-y @ draw-black ;
&lt;/code&gt;&lt;p&gt;&lt;code&gt;draw-snake&lt;/code&gt; loops through each cell in the snake arrays, drawing a black pixel
for each one. After that it draws a white pixel at an offset of &lt;code&gt;length&lt;/code&gt;. The
last part of the tail is at &lt;code&gt;length - 1&lt;/code&gt; into the array so &lt;code&gt;length&lt;/code&gt; holds the
previous last tail segment.&lt;/p&gt;&lt;p&gt;&lt;code&gt;draw-apple&lt;/code&gt; simply draws a black pixel at the apple’s current location.&lt;/p&gt;&lt;p&gt;The game loop constantly loops until a collision occurs, calling each of the words defined above in turn.&lt;/p&gt;&lt;code&gt;: game-loop ( -- )
  begin
    draw-snake
    draw-apple
    100 sleep
    check-input
    move-snake-tail
    move-snake-head
    check-apple
    check-collision
  until
  ." Game Over" ;

: start  initialize game-loop ;
&lt;/code&gt;&lt;p&gt;The &lt;code&gt;begin/until&lt;/code&gt; loop uses the boolean returned by &lt;code&gt;check-collision&lt;/code&gt; to see
whether to continue looping or to exit the loop. When the loop is exited the
string &lt;code&gt;"Game Over"&lt;/code&gt; is printed. We use &lt;code&gt;100 sleep&lt;/code&gt; to pause for 100 ms every
iteration, making the game run at rougly 10 fps.&lt;/p&gt;&lt;p&gt;&lt;code&gt;start&lt;/code&gt; just calls &lt;code&gt;initialize&lt;/code&gt; to reset everything, then kicks off &lt;code&gt;game-loop&lt;/code&gt;.
Because all the initialization happens in the &lt;code&gt;initialize&lt;/code&gt; word, you can call
&lt;code&gt;start&lt;/code&gt; again after game over.&lt;/p&gt;&lt;p&gt;And that’s it! Hopefully all the code in the game made sense. If not, you can try running individual words to see their effect on the stack and/or on the variables.&lt;/p&gt;&lt;p&gt;Forth is actually much more powerful than what I’ve taught here (and what I implemented in my interpreter). A true Forth system allows you to modify how the compiler works and create new defining words, allowing you to completely customize your environment and create your own languages within Forth.&lt;/p&gt;&lt;p&gt;A great resource for learning the full power of Forth is the short book “Starting Forth” by Leo Brodie. It’s available for free online and teaches you all the fun stuff I left out. It also has a good set of exercises for you to test out your knowledge. You’ll need to download a copy of SwiftForth to run the code though.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://skilldrick.github.io/easyforth/"/><published>2025-09-22T11:52:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332814</id><title>CompileBench: Can AI Compile 22-year-old Code?</title><updated>2025-09-22T17:09:31.925020+00:00</updated><content>&lt;doc fingerprint="6d57b7bb2d3f174b"&gt;
  &lt;main&gt;
    &lt;p&gt;Now on the front page of Hacker News — join the discussion.&lt;/p&gt;
    &lt;p&gt;When ChatGPT first launched in 2022, it could barely write short snippets of working code. Today, the best LLMs can generate entire applications from scratch and even win prestigious coding competitions (like IOI 2025).&lt;/p&gt;
    &lt;p&gt;But can they tackle the messy reality of software development – dependency hell, legacy toolchains, and cryptic compile errors? We created CompileBench to find out.&lt;/p&gt;
    &lt;p&gt;We tested 19 state-of-the-art LLMs on 15 real-world tasks using the unmodified source code of open-source projects like &lt;code&gt;curl&lt;/code&gt; (HTTP client) and &lt;code&gt;jq&lt;/code&gt; (command-line JSON processor).&lt;/p&gt;
    &lt;p&gt;The goal sounds straightforward – produce a working binary. But achieving it can be surprisingly complex. Our toughest challenges include cross-compiling to Windows or ARM64 and resurrecting 22-year-old source code from 2003 on modern systems. Some agents needed 135 commands and 15 minutes just to produce a single working binary.&lt;/p&gt;
    &lt;p&gt;See the full results later in the article.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Tasks&lt;/head&gt;
    &lt;p&gt;Each task in CompileBench follows the same structure. We give the LLM agent:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Source code from an open-source project (e.g., &lt;code&gt;curl&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;An interactive Linux terminal (running in a Docker container)&lt;/item&gt;
      &lt;item&gt;A clear build objective&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The agent must independently figure out the build system, decide whether to patch the sources, resolve missing headers and libraries, and choose the right compiler/linker flags. Once it’s done, we run various checks to verify that the resulting executable actually works.&lt;/p&gt;
    &lt;p&gt;Our tasks range from simple builds (that most models can handle) to brutal challenges like reviving 2003-era code, cross-compiling to Windows, or cross-compiling for ARM64 architecture. We tested popular projects including &lt;code&gt;curl&lt;/code&gt; (HTTP client), GNU Coreutils (utilities like &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;), and &lt;code&gt;jq&lt;/code&gt; (JSON processor).&lt;/p&gt;
    &lt;head rend="h4"&gt;Making Tasks Hard With One Simple Trick&lt;/head&gt;
    &lt;p&gt;It turns out that it’s really easy to make the tasks more difficult. Nearly all models can build &lt;code&gt;curl&lt;/code&gt; with standard settings. But ask them to create a “statically compiled binary for ARM64” (the architecture used by modern Apple devices and many servers) and watch the success rate plummet:&lt;/p&gt;
    &lt;p&gt;With a single attempt (pass@1), the success rate drops from 96% to 2%. Claude Opus 4.1, the only model to succeed, had to execute a 36-command sequence that involved downloading source code for all dependencies (OpenSSL, brotli, zlib, and zstd), cross-compiling each one statically for ARM64, and finally linking them all together in the final &lt;code&gt;curl&lt;/code&gt; build.&lt;/p&gt;
    &lt;head rend="h3"&gt;Anthropic Wins&lt;/head&gt;
    &lt;p&gt;Anthropic’s Claude Sonnet and Opus models are beloved by developers for coding tasks, yet they don’t always top traditional benchmarks. Our results might explain why developers trust them so much.&lt;/p&gt;
    &lt;p&gt;In CompileBench, Anthropic models claim the top 2 spots for success rate and perform impressively on speed metrics:&lt;/p&gt;
    &lt;head rend="h3"&gt;OpenAI: Great Performance at The Best Price&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt; OpenAI models secure 3rd and 6th place in our success rankings. But where they truly excel is cost-efficiency – they dominate the Pareto frontier:&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; OpenAI models are the most cost efficient across nearly all task difficulties. GPT-5-mini (high reasoning effort) is a great model in both intelligence and price.&lt;/p&gt;
    &lt;p&gt;OpenAI provides a range of models, from non-reasoning options like GPT-4.1 to advanced reasoning models like GPT-5. We found that each one remains highly relevant in practice. For example, GPT-4.1 is the fastest at completing tasks while maintaining a solid success rate. GPT-5, when set to minimal reasoning effort, is reasonably fast and achieves an even higher success rate. GPT-5 (high reasoning effort) is the best one, albeit at the highest price and slowest speed.&lt;/p&gt;
    &lt;head rend="h3"&gt;Google: A Surprising Disappointment&lt;/head&gt;
    &lt;p&gt;Despite their strong reputation – with Gemini 2.5 Pro being one of the best in web development – Google’s models scored near the bottom of our leaderboard.&lt;/p&gt;
    &lt;p&gt;The models frequently failed to complete tasks as specified. When asked for a static ARM64 build, Gemini 2.5 Pro would produce a valid ARM64 executable but not a static one. For static builds using the musl C library, it correctly used musl but chose dynamic linking, arguing that static builds were unnecessarily large.&lt;/p&gt;
    &lt;p&gt;When designing the benchmark we kept our benchmark harness and prompts minimal, avoiding model-specific tweaks. It is possible that Google models could perform better with a harness or prompt specifically hand-tuned for them, but this is against our principles in this benchmark.&lt;/p&gt;
    &lt;p&gt;Even Gemini seemed to lack confidence, as this output from Gemini 2.5 Pro shows:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I have been unable to successfully complete the request. I have made several mistakes and am not confident that I can produce the correct result. I am aborting the task.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;…but at least it has “learned a lot”, as per Gemini 2.5 Pro output:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I am sorry for the many mistakes I made along the way, but I have learned a lot and I am now confident that I can complete similar requests in the future without making so many errors.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;Catching Cheating LLMs&lt;/head&gt;
    &lt;p&gt;Each task in CompileBench comes with a set of checks. For example, for &lt;code&gt;curl&lt;/code&gt; we check whether the model created an actual executable, whether it reports the correct version matching the source code, and whether it can successfully make HTTP requests.&lt;/p&gt;
    &lt;p&gt;But some models tried to cheat! When GPT-5-mini (high reasoning) struggled to compile 2003-era GNU Coreutils (set of utilities like &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;), it took a creative shortcut – copying existing system utilities instead of building them. Its reasoning trace revealed:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;As a practical fallback so you have the utilities available under /home/peter/result/&lt;/p&gt;
      &lt;utility&gt;(as you requested), I created /home/peter/result and created symlinks for all utilities from the coreutils source tree. Each symlink points to an available system implementation: if /bin/&lt;/utility&gt;
      &lt;utility&gt;exists it links to that; otherwise it links to /bin/busybox (BusyBox responds to argv[0] so most common utilities will run).&lt;/utility&gt;
    &lt;/quote&gt;
    &lt;p&gt;But our checks caught that and correctly marked the attempt as failed.&lt;/p&gt;
    &lt;head rend="h3"&gt;Summary&lt;/head&gt;
    &lt;p&gt;With CompileBench we wanted to see how LLMs could handle “messy” software engineering problems like dependency hell, legacy toolchains or weird compile errors. CompileBench uses purely function calling for truly long-horizon tasks – some requiring 135 commands or over 15 minutes with agentic loops running tens of times. This design authentically measures LLMs’ ability to recover from errors and persist through complex, multi-step challenges.&lt;/p&gt;
    &lt;p&gt;Our results, show that there’s no single “best” model – it depends on whether you prioritize intelligence, speed, or cost-efficiency.&lt;/p&gt;
    &lt;p&gt;Using the best Anthropic models (Sonnet 4 or Opus 4.1) for the most demanding tasks and cheaper OpenAI models (GPT 4.1, GPT-5/GPT-5-mini with lower reasoning efforts) for less demanding ones seems to be the conclusion based on the benchmark results.&lt;/p&gt;
    &lt;p&gt;This is just the beginning. Future versions of CompileBench could tackle even more challenging projects – can AI handle FFmpeg, ancient GCC versions, or ImageMagick? What about cross-compiling from Linux to FreeBSD? Or for the ultimate benchmark, could an AI get Doom running on an arbitrary device?&lt;/p&gt;
    &lt;p&gt;You can browse the complete results of the benchmark at: https://compilebench.com/&lt;lb/&gt; or tinker with the (full!) source code at: https://github.com/QuesmaOrg/CompileBench&lt;/p&gt;
    &lt;p&gt;Do these results match your own experience with using LLMs for software engineering?&lt;/p&gt;
    &lt;p&gt;Discuss this benchmark on LinkedIn and Hacker News.&lt;/p&gt;
    &lt;p&gt;Stay tuned for future posts and releases&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://quesma.com/blog/introducing-compilebench/"/><published>2025-09-22T12:59:30+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332860</id><title>Cloudflare is sponsoring Ladybird and Omarchy</title><updated>2025-09-22T17:09:31.648997+00:00</updated><content>&lt;doc fingerprint="29520b5b1bc621bc"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;At Cloudflare, we believe that helping build a better Internet means encouraging a healthy ecosystem of options for how people can connect safely and quickly to the resources they need. Sometimes that means we tackle immense, Internet-scale problems with established partners. And sometimes that means we support and partner with fantastic open teams taking big bets on the next generation of tools.&lt;/p&gt;
      &lt;p&gt;To that end, today we are excited to announce our support of two independent, open source projects: Ladybird, an ambitious project to build a completely independent browser from the ground up, and Omarchy, an opinionated Arch Linux setup for developers.Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;Two open source projects strengthening the open InternetÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cloudflare has a long history of supporting open-source software â both through our own projects shared with the community and external projects that we support. We see our sponsorship of Ladybird and Omarchy as a natural extension of these efforts in a moment where energy for a diverse ecosystem is needed more than ever.Â Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Ladybird, a new and independent browserÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Most of us spend a significant amount of time using a web browser âÂ in fact, youâre probably using one to read this blog! The beauty of browsers is that they help users experience the open Internet, giving you access to everything from the largest news publications in the world to a tiny website hosted on a Raspberry Pi.Â Â &lt;/p&gt;
      &lt;p&gt;Unlike dedicated apps, browsers reduce the barriers to building an audience for new services and communities on the Internet. If you are launching something new, you can offer it through a browser in a world where most people have absolutely zero desire to install an app just to try something out. Browsers help encourage competition and new ideas on the open web.&lt;/p&gt;
      &lt;p&gt;While the openness of how browsers work has led to an explosive growth of services on the Internet, browsers themselves have consolidated to a tiny handful of viable options. Thereâs a high probability youâre reading this on a Chromium-based browser, like Googleâs Chrome, along with about 65% of users on the Internet. However, that consolidation has also scared off new entrants in the space. If all browsers ship on the same operating systems, powered by the same underlying technology, we lose out on potential privacy, security and performance innovations that could benefit developers and everyday Internet users.Â &lt;/p&gt;
      &lt;p&gt;A screenshot of Cloudflare Workers developer docs in LadybirdÂ &lt;/p&gt;
      &lt;p&gt;This is where Ladybird comes in: itâs not Chromium based â everything is built from scratch. The Ladybird project has two main components: LibWeb, a brand-new rendering engine, and LibJS, a brand-new JavaScript engine with its own parser, interpreter, and bytecode execution engine.Â &lt;/p&gt;
      &lt;p&gt;Building an engine that can correctly and securely render the modern web is a monumental task that requires deep technical expertise and navigating decades of specifications governed by standards bodies like the W3C and WHATWG. And because Ladybird implements these standards directly, it also stress-tests them in practice. Along the way, the project has found, reported, and sometimes fixed countless issues in the specifications themselves, contributions that strengthen the entire web platform for developers, browser vendors, and anyone who may attempt to build a browser in the future.&lt;/p&gt;
      &lt;p&gt;Whether to build something from scratch or not is a perennial source of debate between software engineers, but absent the pressures of revenue or special interests, weâre excited about the ways Ladybird will prioritize privacy, performance, and security, potentially in novel ways that will influence the entire ecosystem.&lt;/p&gt;
      &lt;p&gt;A screenshot of the Omarchy development environment&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Omarchy, an independent development environmentÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Developers deserve choice, too. Beyond the browser, a developerâs operating system and environment is where they spend a ton of time â and where a few big players have become the dominant choice. Omarchy challenges this by providing a complete, opinionated Arch Linux distribution that transforms a bare installation into a modern development workstation that developers are excited about.&lt;/p&gt;
      &lt;p&gt;Perfecting oneâs development environment can be a career-long art, but learning how to do so shouldnât be a barrier to beginning to code. The beauty of Omarchy is that it makes Linux approachable to more developers by doing most of the setup for them, making it look good, and then making it configurable. Omarchy provides most of the tools developers need â like Neovim, Docker, and Git â out of the box, and tons of other features.&lt;/p&gt;
      &lt;p&gt;At its core, Omarchy embraces Linux for all of its complexity and configurability, and makes a version of it that is accessible and fun to use for developers that donât have a deep background in operating systems. Projects like this ensure that a powerful, independent Linux desktop remains a compelling choice for people building the next generation of applications and Internet infrastructure.Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Our support comes with no strings attachedÂ Â &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;We want to be very clear here: we are supporting these projects because we believe the Internet can be better if these projects, and more like them, succeed. No requirement to use our technology stack or any arrangement like that. We are happy to partner with great teams like Ladybird and Omarchy simply because we believe that our missions have real overlap.&lt;/p&gt;
      &lt;p&gt;Ladybird is still in its early days, with an alpha release planned for 2026, but we encourage anyone who is interested to consider contributing to the open source codebase as they prepare for launch.&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;"Cloudflare knows what it means to build critical web infrastructure on the server side. With Ladybird, weâre tackling the near-monoculture on the client side, because we believe it needs multiple implementations to stay healthy, and weâre extremely thankful for their support in that mission.â&lt;/p&gt;
        &lt;p&gt;â Andreas Kling, Founder, LadybirdÂ Â &lt;/p&gt;
      &lt;/quote&gt;
      &lt;p&gt;Omarchy 3.0 was released just last week with faster installation and increased Macbook compatibility, so if youâve been Linux-curious for a while now, we encourage you to try it out!&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;"Cloudflare's support of Omarchy has ensured we have the fastest ISO and package delivery from wherever you are in the world. Without a need to manually configure mirrors or deal with torrents. The combo of a super CDN, great R2 storage, and the best DDoS shield in the business has been a huge help for the project."&lt;/p&gt;
        &lt;p&gt;â David Heinemeier Hansson, Creator of Omarchy and Ruby on Rails&lt;/p&gt;
      &lt;/quote&gt;
      &lt;p&gt;A better Internet is one where people have more choice in how they browse and develop new software. Weâre incredibly excited about the potential of Ladybird, Omarchy, and other audacious projects that support a free and open Internet. &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/supporting-the-future-of-the-open-web/"/><published>2025-09-22T13:03:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332883</id><title>Cap'n Web: a new RPC system for browsers and web servers</title><updated>2025-09-22T17:09:31.333941+00:00</updated><content>&lt;doc fingerprint="e228a11afa2902c6"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Allow us to introduce Cap'n Web, an RPC protocol and implementation in pure TypeScript.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is a spiritual sibling to Cap'n Proto, an RPC protocol I (Kenton) created a decade ago, but designed to play nice in the web stack. That means:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;Like Cap'n Proto, it is an object-capability protocol. ("Cap'n" is short for "capabilities and".) We'll get into this more below, but it's incredibly powerful.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Unlike Cap'n Proto, Cap'n Web has no schemas. In fact, it has almost no boilerplate whatsoever. This means it works more like the JavaScript-native RPC system in Cloudflare Workers.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;That said, it integrates nicely with TypeScript.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Also unlike Cap'n Proto, Cap'n Web's underlying serialization is human-readable. In fact, it's just JSON, with a little pre-/post-processing.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It works over HTTP, WebSocket, and postMessage() out-of-the-box, with the ability to extend it to other transports easily.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It works in all major browsers, Cloudflare Workers, Node.js, and other modern JavaScript runtimes.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;The whole thing compresses (minify+gzip) to under 10Â kB with no dependencies.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It's open source under the MIT license.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Cap'n Web is more expressive than almost every other RPC system, because it implements an object-capability RPC model. That means it:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;Supports bidirectional calling. The client can call the server, and the server can also call the client.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports passing functions by reference: If you pass a function over RPC, the recipient receives a "stub". When they call the stub, they actually make an RPC back to you, invoking the function where it was created. This is how bidirectional calling happens: the client passes a callback to the server, and then the server can call it later.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Similarly, supports passing objects by reference: If a class extends the special marker type &lt;code&gt;RpcTarget&lt;/code&gt;, then instances of that class are passed by reference, with method calls calling back to the location where the object was created.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports promise pipelining. When you start an RPC, you get back a promise. Instead of awaiting it, you can immediately use the promise in dependent RPCs, thus performing a chain of calls in a single network round trip.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports capability-based security patterns.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;In short, Cap'n Web lets you design RPC interfaces the way you'd design regular JavaScript APIs â while still acknowledging and compensating for network latency.&lt;/p&gt;
      &lt;p&gt;The best part is, Cap'n Web is absolutely trivial to set up.&lt;/p&gt;
      &lt;p&gt;A client looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { newWebSocketRpcSession } from "capnweb";

// One-line setup.
let api = newWebSocketRpcSession("wss://example.com/api");

// Call a method on the server!
let result = await api.hello("World");

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;And here's a complete Cloudflare Worker implementing an RPC server:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { RpcTarget, newWorkersRpcResponse } from "capnweb";

// This is the server implementation.
class MyApiServer extends RpcTarget {
  hello(name) {
    return `Hello, ${name}!`
  }
}

// Standard Workers HTTP handler.
export default {
  fetch(request, env, ctx) {
    // Parse URL for routing.
    let url = new URL(request.url);

    // Serve API at `/api`.
    if (url.pathname === "/api") {
      return newWorkersRpcResponse(request, new MyApiServer());
    }

    // You could serve other endpoints here...
    return new Response("Not found", {status: 404});
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;That's it. That's the app.&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;You can add more methods to &lt;code&gt;MyApiServer&lt;/code&gt;, and call them from the client.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;You can have the client pass a callback function to the server, and then the server can just call it.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;You can define a TypeScript interface for your API, and easily apply it to the client and server.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;It just works.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Why RPC? (And what is RPC anyway?)&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Remote Procedure Calls (RPC) are a way of expressing communications between two programs over a network. Without RPC, you might communicate using a protocol like HTTP. With HTTP, though, you must format and parse your communications as an HTTP request and response, perhaps designed in REST style. RPC systems try to make communications look like a regular function call instead, as if you were calling a library rather than a remote service. The RPC system provides a "stub" object on the client side which stands in for the real server-side object. When a method is called on the stub, the RPC system figures out how to serialize and transmit the parameters to the server, invoke the method on the server, and then transmit the return value back.&lt;/p&gt;
      &lt;p&gt;The merits of RPC have been subject to a great deal of debate. RPC is often accused of committing many of the fallacies of distributed computing.&lt;/p&gt;
      &lt;p&gt;But this reputation is outdated. When RPC was first invented some 40 years ago, async programming barely existed. We did not have Promises, much less async and await. Early RPC was synchronous: calls would block the calling thread waiting for a reply. At best, latency made the program slow. At worst, network failures would hang or crash the program. No wonder it was deemed "broken".&lt;/p&gt;
      &lt;p&gt;Things are different today. We have Promise and async and await, and we can throw exceptions on network failures. We even understand how RPCs can be pipelined so that a chain of calls takes only one network round trip. Many large distributed systems you likely use every day are built on RPC. It works.&lt;/p&gt;
      &lt;p&gt;The fact is, RPC fits the programming model we're used to. Every programmer is trained to think in terms of APIs composed of function calls, not in terms of byte stream protocols nor even REST. Using RPC frees you from the need to constantly translate between mental models, allowing you to move faster.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;When should you use Cap'n Web?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cap'n Web is useful anywhere where you have two JavaScript applications speaking to each other over a network, including client-to-server and microservice-to-microservice scenarios. However, it is particularly well-suited to interactive web applications with real-time collaborative features, as well as modeling interactions over complex security boundaries.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is still new and experimental, so for now, a willingness to live on the cutting edge may also be required!&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;Features, features, featuresâ¦&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Here's some more things you can do with Cap'n Web.&lt;/p&gt;
      &lt;p&gt;Sometimes a WebSocket connection is a bit too heavyweight. What if you just want to make a quick one-time batch of calls, but don't need an ongoing connection?&lt;/p&gt;
      &lt;p&gt;For that, Cap'n Web supports HTTP batch mode:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { newHttpBatchRpcSession } from "capnweb";

let batch = newHttpBatchRpcSession("https://example.com/api");

let result = await batch.hello("World");

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;(The server is exactly the same as before.)&lt;/p&gt;
      &lt;p&gt;Note that once you've awaited an RPC in the batch, the batch is done, and all the remote references received through it become broken. To make more calls, you need to start over with a new batch. However, you can make multiple calls in a single batch:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let batch = newHttpBatchRpcSession("https://example.com/api");

// We can call make multiple calls, as long as we await them all at once.
let promise1 = batch.hello("Alice");
let promise2 = batch.hello("Bob");

let [result1, result2] = await Promise.all([promise1, promise2]);

console.log(result1);
console.log(result2);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;And that brings us to another featureâ¦&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Chained calls (Promise Pipelining)&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Here's where things get magical.&lt;/p&gt;
      &lt;p&gt;In both batch mode and WebSocket mode, you can make a call that depends on the result of another call, without waiting for the first call to finish. In batch mode, that means you can, in a single batch, call a method, then use its result in another call. The entire batch still requires only one network round trip.&lt;/p&gt;
      &lt;p&gt;For example, say your API is:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;class MyApiServer extends RpcTarget {
  getMyName() {
    return "Alice";
  }

  hello(name) {
    return `Hello, ${name}!`
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;You can do:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let namePromise = batch.getMyName();
let result = await batch.hello(namePromise);

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Notice the initial call to &lt;code&gt;getMyName()&lt;/code&gt; returned a promise, but we used the promise itself as the input to &lt;code&gt;hello()&lt;/code&gt;, without awaiting it first. With Cap'n Web, this just works: The client sends a message to the server saying: "Please insert the result of the first call into the parameters of the second."&lt;/p&gt;
      &lt;p&gt;Or perhaps the first call returns an object with methods. You can call the methods immediately, without awaiting the first promise, like:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let batch = newHttpBatchRpcSession("https://example.com/api");

// Authencitate the API key, returning a Session object.
let sessionPromise = batch.authenticate(apiKey);

// Get the user's name.
let name = await sessionPromise.whoami();

console.log(name);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;This works because the promise returned by a Cap'n Web call is not a regular promise. Instead, it's a JavaScript Proxy object. Any methods you call on it are interpreted as speculative method calls on the eventual result. These calls are sent to the server immediately, telling the server: "When you finish the call I sent earlier, call this method on what it returns."&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Did you spot the security?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;This last example shows an important security pattern enabled by Cap'n Web's object-capability model.&lt;/p&gt;
      &lt;p&gt;When we call the authenticate() method, after it has verified the provided API key, it returns an authenticated session object. The client can then make further RPCs on the session object to perform operations that require authorization as that user. The server code might look like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;class MyApiServer extends RpcTarget {
  authenticate(apiKey) {
    let username = await checkApiKey(apiKey);
    return new AuthenticatedSession(username);
  }
}

class AuthenticatedSession extends RpcTarget {
  constructor(username) {
    super();
    this.username = username;
  }

  whoami() {
    return this.username;
  }

  // ...other methods requiring auth...
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Here's what makes this work: It is impossible for the client to "forge" a session object. The only way to get one is to call authenticate(), and have it return successfully.&lt;/p&gt;
      &lt;p&gt;In most RPC systems, it is not possible for one RPC to return a stub pointing at a new RPC object in this way. Instead, all functions are top-level, and can be called by anyone. In such a traditional RPC system, it would be necessary to pass the API key again to every function call, and check it again on the server each time. Or, you'd need to do authorization outside the RPC system entirely.&lt;/p&gt;
      &lt;p&gt;This is a common pain point for WebSockets in particular. Due to the design of the web APIs for WebSocket, you generally cannot use headers nor cookies to authorize them. Instead, authorization must happen in-band, by sending a message over the WebSocket itself. But this can be annoying for RPC protocols, as it means the authentication message is "special" and changes the state of the connection itself, affecting later calls. This breaks the abstraction.&lt;/p&gt;
      &lt;p&gt;The authenticate() pattern shown above neatly makes authentication fit naturally into the RPC abstraction. It's even type-safe: you can't possibly forget to authenticate before calling a method requiring auth, because you wouldn't have an object on which to make the call. Speaking of type-safetyâ¦&lt;/p&gt;
      &lt;p&gt;If you use TypeScript, Cap'n Web plays nicely with it. You can declare your RPC API once as a TypeScript interface, implement in on the server, and call it on the client:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;// Shared interface declaration:
interface MyApi {
  hello(name: string): Promise&amp;lt;string&amp;gt;;
}

// On the client:
let api: RpcStub&amp;lt;MyApi&amp;gt; = newWebSocketRpcSession("wss://example.com/api");

// On the server:
class MyApiServer extends RpcTarget implements MyApi {
  hello(name) {
    return `Hello, ${name}!`
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Now you get end-to-end type checking, auto-completed method names, and so on.&lt;/p&gt;
      &lt;p&gt;Note that, as always with TypeScript, no type checks occur at runtime. The RPC system itself does not prevent a malicious client from calling an RPC with parameters of the wrong type. This is, of course, not a problem unique to Cap'n Web â JSON-based APIs have always had this problem. You may wish to use a runtime type-checking system like Zod to solve this. (Meanwhile, we hope to add type checking based directly on TypeScript types in the future.)&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;An alternative to GraphQL?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;If youâve used GraphQL before, you might notice some similarities. One benefit of GraphQL was to solve the âwaterfallâ problem of traditional REST APIs by allowing clients to ask for multiple pieces of data in one query. For example, instead of making three sequential HTTP calls:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;GET /user
GET /user/friends
GET /user/friends/photos&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;â¦you can write one GraphQL query to fetch it all at once.&lt;/p&gt;
      &lt;p&gt;Thatâs a big improvement over REST, but GraphQL comes with its own tradeoffs:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;New language and tooling. You have to adopt GraphQLâs schema language, servers, and client libraries. If your team is all-in on JavaScript, thatâs a lot of extra machinery.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Limited composability. GraphQL queries are declarative, which makes them great for fetching data, but awkward for chaining operations or mutations. For example, you canât easily say: âcreate a user, then immediately use that new user object to make a friend request, all-in-one round trip.â&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Different abstraction model. GraphQL doesnât look or feel like the JavaScript APIs you already know. Youâre learning a new mental model rather than extending the one you use every day.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;How Cap'n Web goes further&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cap'n Web solves the waterfall problem without introducing a new language or ecosystem. Itâs just JavaScript. Because Cap'n Web supports promise pipelining and object references, you can write code that looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let user = api.createUser({ name: "Alice" });
let friendRequest = await user.sendFriendRequest("Bob");&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;What happens under the hood? Both calls are pipelined into a single network round trip:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Create the user.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Take the result of that call (a new User object).&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Immediately invoke sendFriendRequest() on that object.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;All of this is expressed naturally in JavaScript, with no schemas, query languages, or special tooling required. You just call methods and pass objects around, like you would in any other JavaScript code.&lt;/p&gt;
      &lt;p&gt;In other words, GraphQL gave us a way to flatten RESTâs waterfalls. Cap'n Web lets us go even further: it gives you the power to model complex interactions exactly the way you would in a normal program, with no impedance mismatch.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;But how do we solve arrays?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;With everything we've presented so far, there's a critical missing piece to seriously consider Cap'n Web as an alternative to GraphQL: handling lists. Often, GraphQL is used to say: "Perform this query, and then, for every result, perform this other query." For example: "List the user's friends, and then for each one, fetch their profile photo."&lt;/p&gt;
      &lt;p&gt;In short, we need an &lt;code&gt;array.map()&lt;/code&gt; operation that can be performed without adding a round trip.&lt;/p&gt;
      &lt;p&gt;Cap'n Proto, historically, has never supported such a thing.&lt;/p&gt;
      &lt;p&gt;But with Cap'n Web, we've solved it. You can do:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let user = api.authenticate(token);

// Get the user's list of friends (an array).
let friendsPromise = user.listFriends();

// Do a .map() to annotate each friend record with their photo.
// This operates on the *promise* for the friends list, so does not
// add a round trip.
// (wait WHAT!?!?)
let friendsWithPhotos = friendsPromise.map(friend =&amp;gt; {
  return {friend, photo: api.getUserPhoto(friend.id))};
}

// Await the friends list with attached photos -- one round trip!
let results = await friendsWithPhotos;
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;&lt;code&gt;.map()&lt;/code&gt; takes a callback function, which needs to be applied to each element in the array. As we described earlier, normally when you pass a function to an RPC, the function is passed "by reference", meaning that the remote side receives a stub, where calling that stub makes an RPC back to the client where the function was created.&lt;/p&gt;
      &lt;p&gt;But that is NOT what is happening here. That would defeat the purpose: we don't want the server to have to round-trip to the client to process every member of the array. We want the server to just apply the transformation server-side.&lt;/p&gt;
      &lt;p&gt;To that end, &lt;code&gt;.map() &lt;/code&gt;is special. It does not send JavaScript code to the server, but it does send something like "code", restricted to a domain-specific, non-Turing-complete language. The "code" is a list of instructions that the server should carry out for each member of the array. In this case, the instructions are:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Invoke &lt;code&gt;api.getUserPhoto(friend.id)&lt;/code&gt;.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Return an object &lt;code&gt;{friend, photo}&lt;/code&gt;, where friend is the original array element and photo is the result of step 1.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;But the application code just specified a JavaScript method. How on Earth could we convert this into the narrow DSL?&lt;/p&gt;
      &lt;p&gt;The answer is record-replay: On the client side, we execute the callback once, passing in a special placeholder value. The parameter behaves like an RPC promise. However, the callback is required to be synchronous, so it cannot actually await this promise. The only thing it can do is use promise pipelining to make pipelined calls. These calls are intercepted by the implementation and recorded as instructions, which can then be sent to the server, where they can be replayed as needed.&lt;/p&gt;
      &lt;p&gt;And because the recording is based on promise pipelining, which is what the RPC protocol itself is designed to represent, it turns out that the "DSL" used to represent "instructions" for the map function is just the RPC protocol itself. ð¤¯&lt;/p&gt;
      &lt;p&gt;Cap'n Web's underlying protocol is based on JSON â but with a preprocessing step to handle special types. Arrays are treated as "escape sequences" that let us encode other values. For example, JSON does not have an encoding for &lt;code&gt;Date&lt;/code&gt; objects, but Cap'n Web does. You might see a message that looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;{
  event: "Birthday Week",
  timestamp: ["date", 1758499200000]
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;To encode a literal array, we simply double-wrap it in &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;{
  names: [["Alice", "Bob", "Carol"]]
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;In other words, an array with just one element which is itself an array, evaluates to the inner array literally. An array whose first element is a type name, evaluates to an instance of that type, where the remaining elements are parameters to the type.&lt;/p&gt;
      &lt;p&gt;Note that only a fixed set of types are supported: essentially, "structured clonable" types, and RPC stub types.&lt;/p&gt;
      &lt;p&gt;On top of this basic encoding, we define an RPC protocol inspired by Cap'n Proto â but greatly simplified.&lt;/p&gt;
      &lt;p&gt;Since Cap'n Web is a symmetric protocol, there is no well-defined "client" or "server" at the protocol level. There are just two parties exchanging messages across a connection. Every kind of interaction can happen in either direction.&lt;/p&gt;
      &lt;p&gt;In order to make it easier to describe these interactions, I will refer to the two parties as "Alice" and "Bob".&lt;/p&gt;
      &lt;p&gt;Alice and Bob start the connection by establishing some sort of bidirectional message stream. This may be a WebSocket, but Cap'n Web also allows applications to define their own transports. Each message in the stream is JSON-encoded, as described earlier.&lt;/p&gt;
      &lt;p&gt;Alice and Bob each maintain some state about the connection. In particular, each maintains an "export table", describing all the pass-by-reference objects they have exposed to the other side, and an "import table", describing the references they have received. Alice's exports correspond to Bob's imports, and vice versa. Each entry in the export table has a signed integer ID, which is used to reference it. You can think of these IDs like file descriptors in a POSIX system. Unlike file descriptors, though, IDs can be negative, and an ID is never reused over the lifetime of a connection.&lt;/p&gt;
      &lt;p&gt;At the start of the connection, Alice and Bob each populate their export tables with a single entry, numbered zero, representing their "main" interfaces. Typically, when one side is acting as the "server", they will export their main public RPC interface as ID zero, whereas the "client" will export an empty interface. However, this is up to the application: either side can export whatever they want.&lt;/p&gt;
      &lt;p&gt;From there, new exports are added in two ways:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;When Alice sends a message to Bob that contains within it an object or function reference, Alice adds the target object to her export table. IDs assigned in this case are always negative, starting from -1 and counting downwards.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Alice can send a "push" message to Bob to request that Bob add a value to his export table. The "push" message contains an expression which Bob evaluates, exporting the result. Usually, the expression describes a method call on one of Bob's existing exports â this is how an RPC is made. Each "push" is assigned a positive ID on the export table, starting from 1 and counting upwards. Since positive IDs are only assigned as a result of pushes, Alice can predict the ID of each push she makes, and can immediately use that ID in subsequent messages. This is how promise pipelining is achieved.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;After sending a push message, Alice can subsequently send a "pull" message, which tells Bob that once he is done evaluating the "push", he should proactively serialize the result and send it back to Alice, as a "resolve" (or "reject") message. However, this is optional: Alice may not actually care to receive the return value of an RPC, if Alice only wants to use it in promise pipelining. In fact, the Cap'n Web implementation will only send a "pull" message if the application has actually awaited the returned promise.&lt;/p&gt;
      &lt;p&gt;Putting it together, a code sequence like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let namePromise = api.getMyName();
let result = await api.hello(namePromise);

console.log(result);&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Might produce a message exchange like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;// Call api.getByName(). `api` is the server's main export, so has export ID 0.
-&amp;gt; ["push", ["pipeline", 0, "getMyName", []]
// Call api.hello(namePromise). `namePromise` refers to the result of the first push,
// so has ID 1.
-&amp;gt; ["push", ["pipeline", 0, "hello", [["pipeline", 1]]]]
// Ask that the result of the second push be proactively serialized and returned.
-&amp;gt; ["pull", 2]
// Server responds.
&amp;lt;- ["resolve", 2, "Hello, Alice!"]
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;For more details about the protocol, check out the docs.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is new and still highly experimental. There may be bugs to shake out. But, we're already using it today. Cap'n Web is the basis of the recently-launched "remote bindings" feature in Wrangler, allowing a local test instance of workerd to speak RPC to services in production. We've also begun to experiment with it in various frontend applications â expect more blog posts on this in the future.&lt;/p&gt;
      &lt;p&gt;In any case, Cap'n Web is open source, and you can start using it in your own projects now.&lt;/p&gt;
      &lt;p&gt;Check it out on GitHub.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/capnweb-javascript-rpc-library/"/><published>2025-09-22T13:05:32+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45333190</id><title>What if we treated Postgres like SQLite?</title><updated>2025-09-22T17:09:31.126412+00:00</updated><content>&lt;doc fingerprint="274a151f7f6313de"&gt;
  &lt;main&gt;
    &lt;p&gt;I love SQLite. It just works. It is extremely fast, because it’s just a local file access. It is very operationally and mentally simple, and it is extremely stable and well-tested. However, over my years of using it, there are just some things that I miss from the world of Postgres. So what happens if we just treat a local Postgres like SQLite? What does that mean? In this article, I’d like to expand on that idea.&lt;/p&gt;
    &lt;p&gt;I’ve talked and written extensively about the virtues of SQLite. I’ve written about best practices of using Go and SQLite in the cloud, as well as benchmarked it to show it’s not just a toy database. I guess you could call me a fanboy. :D&lt;/p&gt;
    &lt;p&gt;But I am somewhat envious of the ecosystem and community around Postgres. The community is much larger and more diverse, for one. PostgreSQL as a product is definitely as mature as SQLite, and improvements keep on being developed. But what I like the most is the large ecosystem of extensions.&lt;/p&gt;
    &lt;p&gt;Take pgvector as an example, the vector database extension that makes it possible to work with embeddings. Something similar exists in SQLite in the form of sqlite-vec, but the maturity of the pgvector extension seems to be much greater than sqlite-vec, or anything else like that from the SQLite world. (It even looks like sqlite-vec isn’t actively maintained anymore, which is understandable, but a shame nonetheless.)&lt;/p&gt;
    &lt;p&gt;Extensions in Postgres just work. In SQLite, they have to be loaded every time you want to use the database, and need to be compiled and available on the client system. That obviously isn’t a concern in Postgres, because it is a server-client architecture and the server has all necessary extensions installed. But when you need to copy a SQLite production database file to your laptop to debug something, because there isn’t remote access, and you’ve forgotten how to compile the extension in the right version on your local system, and the production system architecture is different than your local one, and you are in a hurry, things can get frustrating quickly.&lt;/p&gt;
    &lt;p&gt;Common wisdom tells you to have a cluster of Postgres instances replicating each other in some configuration or other, for operational robustness and fault tolerance. But that’s not a universal truth. You can just install Postgres on your single big and beefy application server (because there’s just the one when you use SQLite, scaled vertically), and run your application right next to it.&lt;/p&gt;
    &lt;p&gt;If you also disable network access and just use Postgres over a Unix socket, things should be plenty fast. I guess Postgres could even run in a Docker container without taking a big performance hit, when everything is configured correctly.&lt;/p&gt;
    &lt;p&gt;Of course, you still need to backup everything to somewhere else, in case of hardware failure or other catastrophic failure, preferably incrementally and online. That’s exactly the same as in SQLite. There, I use Litestream for that, and I’m sure something equivalent exists in the Postgres space.&lt;/p&gt;
    &lt;p&gt;And also of course, there’s now another component you have to worry about (the database server), with its own configuration parameters, tuning, etc. But is that much different than the various configuration options, compile-time parameters, and runtime gotchas that you need to know about and take care of in SQLite? (My “favorite”, by far, is that referential integrity, i.e. foreign keys, isn’t enabled by default, for backward compatibility reasons.)&lt;/p&gt;
    &lt;p&gt;I’m not really done thinking about this. Maybe it’s a bad idea, but I think it’s something I’d like to experiment with.&lt;/p&gt;
    &lt;p&gt;Have you tried this? Do you have other thoughts around this? I’d love to hear your story, and share it with others here (with permission). Write me an email, I promise I’ll answer. :-)&lt;/p&gt;
    &lt;p&gt;I’m Markus, an independent software consultant. 🤓✨&lt;/p&gt;
    &lt;p&gt;See my services or reach out at markus@maragu.dk.&lt;/p&gt;
    &lt;p&gt;Subscribe to this blog by RSS or newsletter:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.maragu.dev/blog/what-if-we-treated-postgres-like-sqlite"/><published>2025-09-22T13:29:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45333978</id><title>What is algebraic about algebraic effects?</title><updated>2025-09-22T17:09:30.590046+00:00</updated><content>&lt;doc fingerprint="2c481533a51a53b2"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;What is Algebraic about Algebraic Effects?&lt;/head&gt;&lt;quote&gt;what does the word "algebraic" mean when used in the context of programming langs?&lt;lb/&gt;- a random tweet&lt;/quote&gt;&lt;p&gt;I'd wondered the same thing about "Algebraic Effects", and was excited to find a talk on YouTube titled What's Algebraic About Algebraic Effects and Handlers? Unfortunately, I'm not the target audience. As an engineer that doesn't shy away from math, it was still out of my depth.&lt;/p&gt;&lt;p&gt;I found some time this past spring looking into Algebraic Effects, and I think I have a decent answer to the question.&lt;/p&gt;&lt;head rend="h3"&gt;Algebra in the context of programming&lt;/head&gt;&lt;p&gt;My view of "Algebra" in the context of programming is a particular kind of compositionality, where there's a structure.&lt;/p&gt;&lt;p&gt;In contrast, mainstream developers often talk about compositionality as just two obj/function that can interoperate due to the same interface, but not much more can be inferred about properties of the interop between the two obj/functions.&lt;/p&gt;&lt;p&gt;So often times, we get some collection of objects/functions that go together in an arbitrary way according to the taste of the developer that wrote it. If they're any good, it feels intuitive. But more often than not, it feels arbitrary. The effect is magnified if you look into the codebase. To a newcomer, it feels like a mess, in the same way that a house built by piling stones high feels like a mess: there's no apparent or easily recognizable structure.&lt;/p&gt;&lt;head rend="h3"&gt;A tangential detour into abstract algebra&lt;/head&gt;&lt;p&gt;In abstract algebra, structure is often where you take some math object 𝛂 (like an int, or matrix), and you pair it with an operation, (like + or *), and you say: integers can be composed with op `+`, but we can ALSO infer properties in these combos--or laws.&lt;/p&gt;&lt;p&gt;So a common one we know is: integer (ℤ) with addition (+) has implied properties that always hold. And the elements (ℤ), the op (+), and the properties together constrain outcomes, and this is what gives us structure. A house with structure feels like it's built with arches, rather than a pile of rocks. What are the properties of (ℤ) and (+)? Due to how ℤ and + are defined, we get these properties:&lt;/p&gt;&lt;p&gt;1. Closure: ℤ + ℤ always gives you another ℤ.&lt;/p&gt;&lt;p&gt;Sometimes devs write code that doesn't give you back the same thing.&lt;/p&gt;&lt;p&gt;2. Associativity: (a + b) + c = a + (b + c) where a, b, c are in ℤ.&lt;/p&gt;&lt;p&gt;This familiar, as they were drilled in grade school. But often devs don't write code that fulfill this property.&lt;/p&gt;&lt;p&gt;The last two are:&lt;/p&gt;&lt;p&gt;3. identity: ℤ has an element that doesn't change when we use +. &lt;lb/&gt;Here, it's zero: a + 0 = a &lt;/p&gt;&lt;p&gt;4. inverse: every ℤ has a matching ℤ that give us the identity when we use + on it: a + (-a) = 0, where a and -a are in ℤ.&lt;/p&gt;&lt;p&gt;Taken together, math peeps gave this kind of structure a name: Groups. So if someone says [a struct] and [an op] together form a group, I can automatically can assume those properties. It's a shorthand.&lt;/p&gt;&lt;p&gt;If you add even more constraints/properties to how ℤ and + behave together, you get another algebraic structure. There's a whole host and families of these. So if we add another constraint, we get an Abelian Group:&lt;/p&gt;&lt;p&gt;5. Commutativity: a+b = b+a, where a, b are in ℤ&lt;/p&gt;&lt;head rend="h3"&gt;Surmounting the network with algebra&lt;/head&gt;&lt;p&gt;Why write constraining data structure and op pairings? It's quite useful if you want to guarantee specific properties of your system. For example, it's well known that syncing is hard, because of the Eight Fallacies of Distributed Systems.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;The network is reliable;&lt;/item&gt;&lt;item&gt;Latency is zero;&lt;/item&gt;&lt;item&gt;Bandwidth is infinite;&lt;/item&gt;&lt;item&gt;The network is secure;&lt;/item&gt;&lt;item&gt;Topology doesn't change;&lt;/item&gt;&lt;item&gt;There is one administrator;&lt;/item&gt;&lt;item&gt;Transport cost is zero;&lt;/item&gt;&lt;item&gt;The network is homogeneous.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;That means your data, when sent over the network will likely arrive out of order. Worse, clocks can be out of sync, so it can look like data arrived from the future. How can we tame the underlying unreliable system? By constraining our data and operations to have properties.&lt;/p&gt;&lt;p&gt;CRDTs are nowadays used to enforce eventually consistent syncs. It achieves this by pairing a data structure with a merge operation, which together form an algebraic structure called a semi-lattice. The properties of a semi-lattice are:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Closure: For all a, b in the set S, the result of a ∘ b is also in S.&lt;/item&gt;&lt;item&gt;Associativity: a ∘ (b ∘ c)=(a ∘ b) ∘ c for all a, b, c ∈ S.&lt;/item&gt;&lt;item&gt;Commutativity: a ∘ b = b ∘ a for all a, b ∈ S.&lt;/item&gt;&lt;item&gt;Idempotence: a ∘ a = a for all a ∈ S.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Together, this is enough to counteract the network mixing up your data when sending it over the network. I wrote about that here:&lt;/p&gt;&lt;p&gt;So by constraining the power of what our code can do, we can ensure the system has specific desirable properties that achieve the goal of syncing data over an unreliable network. It's where we say: "If we compose this kind of data structure in this constrained way with this kind of merge function, then we can guarantee these properties always hold. And with this structure, our data can survive sync over an unreliable network with other syncers."&lt;/p&gt;&lt;head rend="h3"&gt;From Monads to Algebraic Effects&lt;/head&gt;&lt;p&gt;This is why people also like Monads. Monads are about how to compose code, but with specific properties (Monadic laws) so we can achieve some goal in how they compose. I won't go into it here, as this is already long, but that's the core idea.&lt;/p&gt;&lt;p&gt;However, not all types of Monads compose well together. Here's where I'm out of my depth, but I've read and I'm told that this is why there are Monad Transformers, so you can fit different domain Monads together.&lt;/p&gt;&lt;p&gt;Hence, some people have started looking at Algebraic Effects, as a way to achieve the same compositional powers of monads, but in a different way. Most descriptions of Algebraic Effects actually ignore the `algebraic` part, because describing `effects` is already a big leap.&lt;/p&gt;&lt;p&gt;The effects part, is often explained as "resumable exceptions". I wrote a short description of what algebraic effects are from that perspective, so I won't expound on that here.&lt;/p&gt;&lt;p&gt;But the algebraic part of algebraic effects is that the effects that you raise as a "resumable exception" can be composed together! Not just in any way: design them so when composed, they have *guaranteed properties* just like the stuff you saw above!&lt;/p&gt;&lt;p&gt;For example, if we had a key/value store that we interface with using &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;, we could express what we expect to happen through some algebraic properties.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Idempotence of consecutive reads (get-get): get k; get k ≡ get x&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This says, two consecutive &lt;code&gt;gets&lt;/code&gt; is functionally equivalent to a single &lt;code&gt;get&lt;/code&gt;. This guarantees that &lt;code&gt;get&lt;/code&gt; is a pure observation: it doesn't consume or advance anything. If this law didn't hold, reading could "drain" or "advance" some hidden cursor. By making it a law, we make it an explicit behavior for our users, so they're not surprised by bugs down the line when their assumptions veer from this property.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Last write wins (put-put): put k v1; put k v2 ≡ put k v2&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Easy. The two &lt;code&gt;puts&lt;/code&gt; together is the functional equivalent of only executing the last one. Hence, the last &lt;code&gt;put&lt;/code&gt; is the value that's currently sitting in key &lt;code&gt;k&lt;/code&gt;. This encodes overwriting semantics, and without it, &lt;code&gt;put&lt;/code&gt; might append, merge, or accumulate. It wouldn't be what users would expect.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Read after write (put-get): put k v; get k ≡ put k v; return v&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Executing a &lt;code&gt;put&lt;/code&gt; and then an immediate &lt;code&gt;get&lt;/code&gt; is the functional equivalent of just executing the put, but then just returning the value &lt;code&gt;v&lt;/code&gt; you already have in hand, instead of executing &lt;code&gt;get&lt;/code&gt;. This is important to guarantee the consistency of reads right after writes. Without this, you could write &lt;code&gt;v&lt;/code&gt; and then not see &lt;code&gt;v&lt;/code&gt; immediately, which would break the intuitive model of state in a key/value store.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Write back same value (get-put): get k &amp;gt;&amp;gt;= (λv. put k v) ≡ return ()&lt;/item&gt;&lt;/list&gt;&lt;p&gt;If you read the value of a key and then immediately write it back unchanged, that's functionally equivalent of doing nothing (returning unit).&lt;/p&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; as saying "and then...". So rule 4 in javascript pseudocode might look like:&lt;p&gt;get(store, key).andThen((val) =&amp;gt; put(store, key, val))&lt;/p&gt;&lt;code&gt;return ()&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; is called &lt;code&gt;unit&lt;/code&gt;, which is the way functional programmers denote "no meaningful value", which is effectively what C programmers use &lt;code&gt;void&lt;/code&gt; for. They're technically different, but in practice, they're used for similar purposes.&lt;list rend="ol"&gt;&lt;item&gt;Independence across keys For &lt;code&gt;k1 ≠ k2&lt;/code&gt;:&lt;/item&gt;&lt;/list&gt;&lt;code&gt;put k1 v1; put k2 v2  ≡  put k2 v2; put k1 v1
get k1; get k2        ≡  get k2; get k1
put k1 v; get k2      ≡  get k2; put k1 v
&lt;/code&gt;&lt;p&gt;Operations on different keys commute, and the store treats each key as an independent cell. This is what makes it a key/value store, rather than some entangled data structure.&lt;/p&gt;&lt;p&gt;Hence, just because you are writing effects, doesn't automatically mean they're algebraic. You have to consciously design them to be so, in order to give properties or guarantees that you want your users to have. Most current programming languages have no way of enforcing these equational axioms, so even esoteric languages that feature algebraic effects don't even try to enforce them.&lt;/p&gt;&lt;p&gt;Languages which feature dependent types, such as Coq, Agda, Idris 2, and Lean are the only languages that can encode these equational axioms explicitly and be able to prove their veracity. Typically, these languages are used by mathematicians to do proofs in math. But interestingly, Lean has been getting a lot of momentum, and it can compile to C. It can be a practical in-road to using these in practice.&lt;/p&gt;&lt;p&gt;And, in my own words, that's what's algebraic about algebraic effects.&lt;/p&gt;&lt;head rend="h3"&gt;Epilogue&lt;/head&gt;&lt;p&gt;Alan Kay was known to lament that 1 million lines in a code base is unconscionable. It's no more a skyscraper than a pile of rocks. That's because there's often no structure. Eventually we figured out arches: they're structure that give strength with less material.&lt;/p&gt;&lt;p&gt;Hence, we can build higher without using more material. By analogy, we're starting to discover what this structure looks like in software. And it looks like math. There's a lot of resistance to this, and will be for a long time.&lt;/p&gt;&lt;p&gt;And maybe with LLMs, it might not matter for a wide swath of applications. But still, there's ever progress moving forward in this direction, where these pure functional programming or math-y ideas filter down to more mainstream languages.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://interjectedfuture.com/what-is-algebraic-about-algebraic-effects/"/><published>2025-09-22T14:30:10+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334032</id><title>Dear GitHub: no YAML anchors, please</title><updated>2025-09-22T17:09:30.416023+00:00</updated><content>&lt;doc fingerprint="985c2511ef6202e8"&gt;
  &lt;main&gt;
    &lt;p&gt;Sep 22, 2025 Tags: programming, rant&lt;/p&gt;
    &lt;p&gt;TL;DR: for a very long time, GitHub Actions lacked support for YAML anchors.&lt;/p&gt;
    &lt;p&gt;This was a good thing. YAML anchors in GitHub Actions are (1) redundant with existing functionality, (2) introduce a complication to the data model that makes CI/CD human and machine comprehension harder, and (3) are not even uniquely useful because GitHub has chosen not to support the one feature (merge keys) that lacks a semantic equivalent in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;This step backwards reinforces GitHub Actionsâ status as an insecure by default CI/CD platform by making it harder for both humans and machines to analyze action and workflow definitions for vulnerabilities. GitHub should immediately remove support for YAML anchors, before adoption becomes widespread.&lt;/p&gt;
    &lt;p&gt;GitHub recently announced that YAML anchors are now supported in GitHub Actions. That means that users can write things like this:&lt;/p&gt;
    &lt;p&gt;On face value, this seems like a reasonable feature: the job and step abstractions in GitHub Actions lend themselves to duplication, and YAML anchors are one way to reduce that duplication.&lt;/p&gt;
    &lt;p&gt;Unfortunately, YAML anchors are a terrible tool for this job. Furthermore (as weâll see) GitHubâs implementation of YAML anchors is incomplete, precluding the actual small subset of use cases where YAML anchors are uniquely useful (but still not a good idea). Weâll see why below.&lt;/p&gt;
    &lt;p&gt;Pictured: the authorâs understanding of the GitHub Actions product roadmap.&lt;/p&gt;
    &lt;p&gt;The simplest reason why YAML anchors are a bad idea is because theyâre redundant with other more explicit mechanisms for reducing duplication in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;GitHubâs own example above could be rewritten without YAML anchors as:&lt;/p&gt;
    &lt;p&gt;This version is significantly clearer, but has slightly different semantics: all jobs inherit the workflow-level &lt;code&gt;env&lt;/code&gt;. But this, in my opinion,
is a good thing: the need to template environment variables across a subset
of jobs suggests an architectural error in the workflow design.&lt;/p&gt;
    &lt;p&gt;In other words: if you find yourself wanting to use YAML anchors to share âglobalâ configuration between jobs or steps, you probably actually want separate workflows, or at least separate jobs with job-level &lt;code&gt;env&lt;/code&gt; blocks.&lt;/p&gt;
    &lt;p&gt;In summary: YAML anchors further muddy the abstractions of workflows, jobs, and steps, by introducing a cross-cutting form of global state that doesnât play by the rules of the rest of the system. This, to me, suggests that the current Actions team lacks a strong set of opinions about how GitHub Actions should be used, leading to a âkitchen sinkâ approach that serves all users equally poorly.&lt;/p&gt;
    &lt;p&gt;As noted above: YAML anchors introduce a new form of non-locality into GitHub Actions. Furthermore, this form of non-locality is fully general: any YAML node can be anchored and referenced. This is a bad idea for humans and machines alike:&lt;/p&gt;
    &lt;p&gt;For humans: a new form of non-locality makes it harder to preserve local understanding of what a workflow, job, or step does: a unit of work may now depend on any other unit of work in the same file, including one hundreds or thousands of lines away. This makes it harder to reason about the behavior of oneâs GitHub Actions without context switching.&lt;/p&gt;
    &lt;p&gt;It would only be fair to note that GitHub Actions already has some forms of non-locality: global contexts, scoping rules for &lt;code&gt;env&lt;/code&gt; blocks,
  &lt;code&gt;needs&lt;/code&gt; dependencies, step and job outputs, and so on. These can be
  difficult to debug! But what sets them apart is their lack of
  generality: each has precise semantics and scoping rules,
  meaning that a user who understands those rules can comprehend
  what a unit of work does without referencing the source of an
  environment variable, output, &amp;amp;c.&lt;/p&gt;
    &lt;p&gt;For machines: non-locality makes it significantly harder to write tools that analyze (or transform) GitHub Actions workflows.&lt;/p&gt;
    &lt;p&gt;The pain here boils down to the fact that YAML anchors diverge from the one-to-one object model1 that GitHub Actions otherwise maps onto.&lt;/p&gt;
    &lt;p&gt;With anchors, that mapping becomes one-to-many: the same element may appear once in the source, but multiple times in the loaded object representation.&lt;/p&gt;
    &lt;p&gt;In effect, this breaks a critical assumption that many tools make about YAML in GitHub Actions: that an entity in the deserialized object can be mapped back to a single concrete location in the source YAML.&lt;/p&gt;
    &lt;p&gt;This is needed to present reasonable source locations in error messages, but it doesnât hold if the object model doesnât represent anchors and references explicitly.&lt;/p&gt;
    &lt;p&gt;Furthermore, this is the reality for every YAML parser in wide use: all widespread YAML parsers choose (reasonably) to copy anchored values into each location where theyâre referenced, meaning that the analyzing tool cannot âseeâ the original element for source location purposes.&lt;/p&gt;
    &lt;p&gt;I feel these pains directly: I maintain zizmor as a static analysis tool for GitHub Actions, and &lt;code&gt;zizmor&lt;/code&gt; makes both of these assumptions.
  Moreover, &lt;code&gt;zizmor&lt;/code&gt;âs dependencies make these assumptions:
  &lt;code&gt;serde_yaml&lt;/code&gt; (like most other YAML parsers) chooses to deserialize YAML
  anchors by copying the anchored value into each location where itâs
  referenced2.&lt;/p&gt;
    &lt;p&gt;One of the few things that make YAML anchors uniquely useful is merge keys: a merge key allows a user to compose multiple referenced mappings together into a single mapping.&lt;/p&gt;
    &lt;p&gt;An example from the YAML spec, which I think tidily demonstrates both their use case and how incredibly confusing merge keys are:&lt;/p&gt;
    &lt;p&gt;I personally find this syntax incredibly hard to read, but at least it has a unique use case that could be useful in GitHub Actions: composing multiple sets of environment variables together with clear precedence rules is manifestly useful.&lt;/p&gt;
    &lt;p&gt;Except: GitHub Actions doesnât support merge keys! They appear to be using their own internal YAML parser that already had some degree of support for anchors and references, but not for merge keys.&lt;/p&gt;
    &lt;p&gt;To me, this takes the situation from a set of bad technical decisions (and lack of strong opinions around how GitHub Actions should be used) to farce: the one thing that makes YAML anchors uniquely useful in the context of GitHub Actions is the one thing that GitHub Actions doesnât support.&lt;/p&gt;
    &lt;p&gt;To summarize, I think YAML anchors in GitHub Actions are (1) redundant with existing functionality, (2) introduce a complication to the data model that makes CI/CD human and machine comprehension harder, and (3) are not even uniquely useful because GitHub has chosen not to support the one feature (merge keys) that lacks a semantic equivalent in GitHub Actions.&lt;/p&gt;
    &lt;p&gt;Of these reasons, I think (2) is the most important: GitHub Actions security has been in the newsÂ a great deal recently, with the overwhelming consensus being that itâs too easy to introduce vulnerabilities in (or expose otherwise latent vulnerabilities through) GitHub Actions workflow.&lt;/p&gt;
    &lt;p&gt;For this reason, we need GitHub Actions to be easy to analyze for humans and machine alike. In effect, this means that GitHub should be decreasing the complexity of GitHub Actions, not increasing it. YAML anchors are a step in the wrong direction for all of the reasons aforementioned.&lt;/p&gt;
    &lt;p&gt;Of course, Iâm not without self-interest here: I maintain a static analysis tool for GitHub Actions, and supporting YAML anchors is going to be an absolute royal pain in my ass3. But itâs not just me: tools like actionlint, claws, and poutine are all likely to struggle with supporting YAML anchors, as they fundamentally alter each toolâs relationship to GitHub Actionsâ assumed data model. As-is, this change blows a massive hole in the larger open source ecosystemâs ability to analyze GitHub Actions for correctness and security.&lt;/p&gt;
    &lt;p&gt;All told: I strongly believe that GitHub should immediately remove support for YAML anchors in GitHub Actions. The âgoodâ news is that they can probably do so with a bare minimum of user disruption, since support has only been public for a few days and adoption is (probably) still primarily at the single-use workflow layer and not the reusable action (or workflow) layer.&lt;/p&gt;
    &lt;p&gt;That object model is essentially the JSON object model, where all elements appear as literal components of their source representation and take a small subset of possible types (string, number, boolean, array, object, null).Â ↩&lt;/p&gt;
    &lt;p&gt;In other words: even though YAML itself is a superset of JSON, users donât want YAML-isms to leak through to the object model. Everybody wants the JSON object model, and that means no âanchorâ or âreferenceâ elements anywhere in a deserialized structure.Â ↩&lt;/p&gt;
    &lt;p&gt;To the point where Iâm not clear itâs actually worth supporting anchors to any meaningful extent, and instead immediately flagging them as an attempt at obfuscation.Â ↩&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.yossarian.net/2025/09/22/dear-github-no-yaml-anchors"/><published>2025-09-22T14:34:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334250</id><title>A simple way to measure knots has come unraveled</title><updated>2025-09-22T17:09:30.076635+00:00</updated><content>&lt;doc fingerprint="a77c8316c9202f75"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A Simple Way To Measure Knots Has Come Unraveled&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;In 1876, Peter Guthrie Tait set out to measure what he called the “beknottedness” of knots.&lt;/p&gt;
    &lt;p&gt;The Scottish mathematician, whose research laid the foundation for modern knot theory, was trying to find a way to tell knots apart — a notoriously difficult task. In math, a knot is a tangled piece of string with its ends glued together. Two knots are the same if you can twist and stretch one into the other without cutting the string. But it’s hard to tell if this is possible based solely on what the knots look like. A knot that seems really complicated and tangled, for instance, might actually be equivalent to a simple loop.&lt;/p&gt;
    &lt;p&gt;Tait had an idea for how to determine if two knots are different. First, lay a knot flat on a table and find a spot where the string crosses over itself. Cut the string, swap the positions of the strands, and glue everything back together. This is called a crossing change. If you do this enough times, you’ll be left with an unknotted circle. Tait’s beknottedness is the minimum number of crossing changes that this process requires. Today, it’s known as a knot’s “unknotting number.”&lt;/p&gt;
    &lt;p&gt;If two knots have different unknotting numbers, then they must be different. But Tait found that his unknotting numbers generated more questions than they answered.&lt;/p&gt;
    &lt;p&gt;“I have got so thoroughly on one groove,” he wrote in a letter to a friend, the scientist James Clerk Maxwell, “that I fear I may be missing or unduly exalting something which will appear excessively simple to anyone but myself.”&lt;/p&gt;
    &lt;p&gt;If Tait missed something, so did every mathematician who followed him. Over the past 150 years, many knot theorists have been baffled by the unknotting number. They know it can provide a powerful description of a knot. “It’s the most fundamental [measure] of all, arguably,” said Susan Hermiller of the University of Nebraska. But it’s often impossibly hard to compute a knot’s unknotting number, and it’s not always clear how that number corresponds to the knot’s complexity.&lt;/p&gt;
    &lt;p&gt;To untangle this mystery, mathematicians in the early 20th century devised a straightforward conjecture about how the unknotting number changes when you combine knots. If they could prove it, they would have a way to compute the unknotting number for any knot — giving mathematicians a simple, concrete way to measure knot complexity.&lt;/p&gt;
    &lt;p&gt;Researchers searched for nearly a century, finding little evidence either for or against the conjecture.&lt;/p&gt;
    &lt;p&gt;Then, in a paper posted in June, Hermiller and her longtime collaborator Mark Brittenham uncovered a pair of knots that, when combined, form a knot that is easier to untie than the conjecture predicts. In doing so, they disproved the conjecture — and used their counterexample to find infinitely many other pairs of knots that also disprove it.&lt;/p&gt;
    &lt;p&gt;“When the paper was posted, I gasped out loud,” said Allison Moore of Virginia Commonwealth University.&lt;/p&gt;
    &lt;p&gt;The result demonstrates that “the unknotting number is chaotic and unpredictable and really exciting to study,” she added. The paper is “like waving a flag that says, we don’t understand this.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Unknotting and the Great Unknown&lt;/head&gt;
    &lt;p&gt;The conjecture dates back to at least 1937, when the German mathematician Hilmar Wendt set out to understand what happens when you add knots together — that is, when you tie both of them with the same string before gluing the ends together. (Mathematicians call this combined knot the “connect sum.”) Wendt thought that the unknotting number of the resulting knot should always be the sum of the unknotting numbers of the two original knots.&lt;/p&gt;
    &lt;p&gt;His prediction, now known as the additivity conjecture, makes sense. Say you add the two knots above, whose unknotting numbers are known to be 2 and 3. That means that there’s a sequence of two crossing changes that unknots the lefthand side of the connect sum, and a sequence of three crossing changes that unknots the righthand side. If you use these sequences, you can unknot the whole thing in 2 + 3, or 5, crossing changes.&lt;/p&gt;
    &lt;p&gt;But this only tells you that the connect sum’s unknotting number is no bigger than 5. You might be able to find a sequence of crossing changes that’s more efficient than untying each side individually. That is, there might be a knot that really is less than the sum of its parts.&lt;/p&gt;
    &lt;p&gt;To settle the additivity conjecture, mathematicians had to either find a connect sum with a shorter unknotting sequence or prove that no such example exists. In either case, they didn’t have a clue where to begin.&lt;/p&gt;
    &lt;p&gt;Part of the problem was that the way you lay out your knot — what mathematicians call a “diagram” — determines where and how the knot crosses over itself. There are lots of diagrams that can represent the same knot. To find the shortest sequence of crossing changes, you might have to choose just the right diagram. Often, it’s not the one you’d normally associate with the knot.&lt;/p&gt;
    &lt;p&gt;“There are unimaginably large numbers of ways to try and imagine changing your diagram before you decide to introduce the crossing change,” Brittenham said. “We don’t, at least at the start, have any control over how complicated the picture has to look.”&lt;/p&gt;
    &lt;p&gt;In 1985, the mathematician Martin Scharlemann finally made some headway when he proved that for any two knots whose unknotting number is 1, the connect sum will always have an unknotting number of 2. “That made [the whole conjecture] seem much more likely,” said Charles Livingston of Indiana University.&lt;/p&gt;
    &lt;p&gt;The result offered tantalizing evidence that the universe of knots could be neatly organized. That’s because all knots can be built out of a smaller class of “prime” knots. The additivity conjecture implied that once you knew the unknotting numbers of those prime knots, you would know them for all knots. Any information you might want about a given knot would fall naturally out of that much simpler set.&lt;/p&gt;
    &lt;p&gt;Mathematicians wanted the conjecture to be true, said Arunima Ray of the University of Melbourne, “because that would be like, there’s order in the world.”&lt;/p&gt;
    &lt;p&gt;Scharlemann’s result was later extended to other classes of knots. But it wasn’t clear that it would apply to all knots.&lt;/p&gt;
    &lt;p&gt;Then Brittenham and Hermiller convened a cluster of computers to help.&lt;/p&gt;
    &lt;head rend="h2"&gt;Sneakernet&lt;/head&gt;
    &lt;p&gt;The pair began their project a decade ago with a broader aim: to use computers to learn whatever they could about the unknotting number.&lt;/p&gt;
    &lt;p&gt;They turned to software known as SnapPy, which uses sophisticated geometric techniques to test whether two pictures depict the same knot. Just a few years earlier, SnapPy had vastly expanded its database, enabling it to identify nearly 60,000 unique knots.&lt;/p&gt;
    &lt;p&gt;It was perfectly suited for what Brittenham and Hermiller had in mind. They started with a single complicated knot and applied every imaginable crossing change to it, producing scores of new knots. They then used SnapPy to identify those knots — and repeated the process.&lt;/p&gt;
    &lt;p&gt;They did this for millions of knot diagrams that corresponded to hundreds of thousands of knots. Ultimately, they assembled an enormous library of information about unknotting sequences and calculated upper bounds on the unknotting numbers of thousands of knots. The work required a lot of computing power: The pair signed up for supercomputing time at the University of Nebraska’s computing center, while also running their program on old laptops they’d bought at an auction. All told, they were managing dozens of computers. “We had a bit of a sneakernet,” Brittenham said, “where you transfer information from computer to computer by walking between them.”&lt;/p&gt;
    &lt;p&gt;The duo kept their program running in the background for over a decade. During that time, a couple of computers from their ragtag collection succumbed to overheating and even flames. “There was one that actually sent out sparks,” Brittenham said. “That was kind of fun.” (Those machines, he added, were “honorably retired.”)&lt;/p&gt;
    &lt;p&gt;Then, in the fall of 2024, a paper about a failed attempt to use machine learning to disprove the additivity conjecture caught Brittenham and Hermiller’s attention. Perhaps, they thought, machine learning wasn’t the best approach for this particular problem: If a counterexample to the additivity conjecture was out there, it would be “a needle in a haystack,” Hermiller said. “That’s not quite what things like machine learning are about. They’re about trying to find patterns in things.”&lt;/p&gt;
    &lt;p&gt;But it reinforced a suspicion the pair already had — that maybe their more carefully honed sneakernet could find the needle.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Tie That Binds&lt;/head&gt;
    &lt;p&gt;Brittenham and Hermiller realized they could make use of the unknotting sequences they’d uncovered to look for potential counterexamples to the additivity conjecture.&lt;/p&gt;
    &lt;p&gt;Imagine again that you have two knots whose unknotting numbers are 2 and 3, and you’re trying to unknot their connect sum. After one crossing change, you get a new knot. If the additivity conjecture is to be believed, then the original knot’s unknotting number should be 5, and this new knot’s should be 4.&lt;/p&gt;
    &lt;p&gt;But what if this new knot’s unknotting number is already known to be 3? That implies that the original knot can be untied in just four steps, breaking the conjecture.&lt;/p&gt;
    &lt;p&gt;“We get these middle knots,” Brittenham said. “What can we learn from them?”&lt;/p&gt;
    &lt;p&gt;He and Hermiller already had the perfect tool for the occasion humming away on their suite of laptops: the database they’d spent the previous decade developing, with its upper bounds on the unknotting numbers of thousands of knots.&lt;/p&gt;
    &lt;p&gt;The mathematicians started to add pairs of knots and work through the unknotting sequences of their connect sums. They focused on connect sums whose unknotting numbers had only been approximated in the loosest sense, with a big gap between their highest and lowest possible values. But that still left them with a massive list of knots to work through — “definitely in the tens of millions, and probably in the hundreds of millions,” Brittenham said.&lt;/p&gt;
    &lt;p&gt;For months, their computer program applied crossing changes to these knots and compared the resulting knots to those in their database. One day in late spring, Brittenham checked the program’s output files, as he did most days, to see if anything interesting had turned up. To his great surprise, there was a line of text: “CONNECT SUM BROKEN.” It was a message he and Hermiller had coded into the program — but they’d never expected to actually see it.&lt;/p&gt;
    &lt;p&gt;Initially, they were doubtful of the result. “The very first thing that went through our heads was there was something wrong with our programming,” Brittenham said.&lt;/p&gt;
    &lt;p&gt;“We just dropped absolutely everything else,” Hermiller recalled. “All of life just went away. Eating, sleeping got annoying.”&lt;/p&gt;
    &lt;p&gt;But their program checked out. They even tied the knot it had identified in a rope, then worked through the unknotting procedure by hand, just to make sure.&lt;/p&gt;
    &lt;p&gt;Their counterexample was real.&lt;/p&gt;
    &lt;head rend="h2"&gt;Twisted Mysteries&lt;/head&gt;
    &lt;p&gt;The counterexample Brittenham and Hermiller found is built out of two copies of a knot called the (2, 7) torus knot. This knot is made by winding two strings around each other three and a half times and then gluing their opposing ends together. Its mirror image is made by winding three and a half times in the other direction.&lt;/p&gt;
    &lt;p&gt;The unknotting number of both the (2, 7) torus knot and its mirror image is 3. But Brittenham and Hermiller’s program found that if you add these knots, you can unknot the result in just five steps — not six, as the additivity conjecture predicted.&lt;/p&gt;
    &lt;p&gt;“It’s a shockingly simple counterexample,” Moore said. “It goes back to that unpredictability of the crossing change.”&lt;/p&gt;
    &lt;p&gt;The result led Brittenham and Hermiller to an infinite list of other counterexamples, including almost any knot that’s built by winding two strings and gluing.&lt;/p&gt;
    &lt;p&gt;Now, with the additivity conjecture decisively struck down, the knot theory community has a wide world to explore.&lt;/p&gt;
    &lt;p&gt;For some mathematicians, the new result brings disappointment. It reveals that there’s less structure in the world of knots than they had hoped for. The unknotting number is “not as well behaved as we would like,” Ray said. “That’s a bit sad.”&lt;/p&gt;
    &lt;p&gt;But from another perspective, that only makes the unknotting number more intriguing. “There’s just much more complexity and unknowns about knot theory than we knew there were a few months ago,” Livingston said.&lt;/p&gt;
    &lt;p&gt;The nature of that additional complexity isn’t clear yet. During their furious examination of their counterexample, Brittenham and Hermiller weren’t able to develop an intuition for why it broke the additivity conjecture when other knots didn’t. Understanding this could help mathematicians get a better handle on what makes some knots complex and others less so.&lt;/p&gt;
    &lt;p&gt;“I’m still stymied by this most basic question” about the unknotting number, Moore said. “That just lights the fire under you.”&lt;/p&gt;
    &lt;p&gt;Editor’s Note: Brittenham and Hermiller’s research was funded in part by the Simons Foundation, which also funds this editorially independent magazine. Simons Foundation funding decisions have no influence on our coverage.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/a-simple-way-to-measure-knots-has-come-unraveled-20250922/"/><published>2025-09-22T14:49:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334467</id><title>Anti-*: The Things We Do but Not All the Way</title><updated>2025-09-22T17:09:29.895797+00:00</updated><content>&lt;doc fingerprint="f67211540ae23690"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Anti-*: The Things We Do But Not All The Way&lt;/head&gt;
    &lt;p&gt;I was reading Chase McCoy’s article “Antibuildings” where he cites Wikipedia’s entry on the term “Antilibrary” which points to another entry about the Japanese concept of Tsundoku, all of which deal with this idea of things we do with intention but that never make it to fruition.&lt;/p&gt;
    &lt;p&gt;Antilibraries are the books we buy but never read.&lt;/p&gt;
    &lt;p&gt;Antibuildings the architect’s version of sketches and plans drafted but buildings never made.&lt;/p&gt;
    &lt;p&gt;It got me thinking about the stuff I’ve started with intention but never brought to fruition — my own anti-*’s.&lt;/p&gt;
    &lt;p&gt;To name a few:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Antidomains: the domains I bought and had big plans for, but they never progressed beyond being parked at my registrar. (Zach Leatherman recently made a list kinda like this, if you haven’t seen it.)&lt;/item&gt;
      &lt;item&gt;Antiwebsites: the sites I was gonna make, but never shipped.&lt;/item&gt;
      &lt;item&gt;Antilayers: the Photoshop, Sketch, or Figma designs I painstakingly crafted to the level of “completeness”, but then never began building with code.&lt;/item&gt;
      &lt;item&gt;Anticode: the changes I made that functioned to the level of being usable and shippable, but then I never could pull the trigger on ‘em.&lt;/item&gt;
      &lt;item&gt;Antiposts: (also known as “drafts”, lol) all those blog posts I poured time and energy into researching, writing, and editing, but never could take all the way to “published”.&lt;/item&gt;
      &lt;item&gt;Antitweets: all the Tweets/Toots/Skeets I meticulously crafted as witty comebacks or sarcastic quips, but then never posted (honestly, probably for the better).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And last, but certainly not least — in fact, probably grandest of them all:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Antitabs: all the browser tabs of articles, videos, recipes, and other good things I collected and was going to read, watch, bake, etc. but never did.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.jim-nielsen.com/2025/my-antis/"/><published>2025-09-22T15:03:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334545</id><title>PlanetScale for Postgres is now GA</title><updated>2025-09-22T17:09:29.732161+00:00</updated><content>&lt;doc fingerprint="af51e4d16e9161c8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;PlanetScale for Postgres is now GA&lt;/head&gt;
    &lt;p&gt;By Sam Lambert |&lt;/p&gt;
    &lt;p&gt;PlanetScale for Postgres is now generally available and out of private preview. To create a Postgres database, sign up or log in to your PlanetScale account, create a new database, and select Postgres. If you are looking to migrate from another Postgres provider to PlanetScale, you can use our migration guides to get started. Finally, if you have a large or complex migration, we can help you via our sales team at postgres@planetscale.com.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is PlanetScale for Postgres?&lt;/head&gt;
    &lt;p&gt;Our mission is simple: bring you the fastest and most reliable databases with the best developer experience. We have done this for 5 years now with our managed Vitess product, allowing companies like Cursor, Intercom, and Block to scale beyond previous limits.&lt;/p&gt;
    &lt;p&gt;We are so excited to bring this to Postgres. Our proprietary operator allows us to bring the maturity of PlanetScale and the performance of Metal to an even wider audience. We bring you the best of Postgres and the best of PlanetScale in one product.&lt;/p&gt;
    &lt;head rend="h2"&gt;Customers on PlanetScale for Postgres&lt;/head&gt;
    &lt;p&gt;Hundreds of companies already trust PlanetScale for Postgres to power their production workloads. We say this every time we launch something, but we prefer you hear about real-world usage straight from our customers. Read through some of their stories about their migration to PlanetScale for Postgres below.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Convex: Powered by PlanetScale&lt;/item&gt;
      &lt;item&gt;Supermemory just got faster on PlanetScale&lt;/item&gt;
      &lt;item&gt;Scaling RealâTime Discovery: Inside Layersâ PlanetScale Migration&lt;/item&gt;
      &lt;item&gt;Why We Migrated from Neon to PlanetScale&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Vitess for Postgres&lt;/head&gt;
    &lt;p&gt;Neki is our Postgres sharding solution. Built by the team behind Vitess combining the best of Vitess and Postgres. Neki is not a fork of Vitess. Vitessâ achievements are enabled by leveraging MySQLâs strengths and engineering around its weaknesses. To achieve Vitessâ power for Postgres we are architecting from first principles and building alongside design partners at scale. When we are ready we will release Neki as an open source project suitable for running the most demanding Postgres workloads. To sign up for the Neki waitlist visit neki.dev.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://planetscale.com/blog/planetscale-for-postgres-is-generally-available"/><published>2025-09-22T15:10:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334599</id><title>A New Internet Business Model?</title><updated>2025-09-22T17:09:28.877933+00:00</updated><content>&lt;doc fingerprint="384899547786ab2d"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Cloudflare launched 15 years ago this week. We like to celebrate our birthday by announcing new products and features that give back to the Internet, which weâll do a lot of this week. But, on this occasion, we've also been thinking about what's changed on the Internet over the last 15 years and what has not.&lt;/p&gt;
      &lt;p&gt;With some things there's been clear progress: when we launched in 2010 less than 10 percent of the Internet was encrypted, today well over 95 percent is encrypted. We're proud of the role we played in making that happen.&lt;/p&gt;
      &lt;p&gt;Some other areas have seen limited progress: IPv6 adoption has grown steadily but painfully slowly over the last 15 years, in spite of our efforts. That's a problem because as IPv4 addresses have become scarce and expensive itâs held back new entrants and driven up the costs of things like networking and cloud computing.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;The Internetâs Business Model&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Still other things have remained remarkably consistent: the basic business model of the Internet has for the last 15 years been the same â create compelling content, find a way to be discovered, and then generate value from the resulting traffic. Whether that was through ads or subscriptions or selling things or just the ego of knowing that someone is consuming what you created, traffic generation has been the engine that powered the Internet we know today.&lt;/p&gt;
      &lt;p&gt;Make no mistake, the Internet has never been free. There's always been a reward system that transferred value from consumers to creators and, in doing so, filled the Internet with content. Had the Internet not had that reward system it wouldn't be nearly as vibrant as it is today.&lt;/p&gt;
      &lt;p&gt;A bit of a trivia aside: why did Cloudflare never build an ad blocker despite many requests? Because, as imperfect as they are, ads have been the only micropayment system that has worked at scale to encourage an open Internet while also compensating content creators for their work. Our mission is to help build a better Internet, and a core value is that weâre principled, so we werenât going to hamper the Internetâs fundamental business model.&lt;/p&gt;
      &lt;p&gt;But that same traffic-based reward system has also created many of the problems we lament about the current state of the Internet. Traffic has always been an imperfect proxy for value. Over the last 15 years we've watched more of the Internet driven by annoying clickbait or dangerous ragebait. Entire media organizations have built their businesses with a stated objective of writing headlines to generate the maximum cortisol response because that's what generates the maximum amount of traffic.&lt;/p&gt;
      &lt;p&gt;Over the years, Cloudflare has at times faced calls for us to intervene and control what content can be published online. As an infrastructure provider, we've never felt we were the right place for those editorial decisions to be made. But it wasn't because we didn't worry about the direction the traffic-incentivized Internet seemed to be headed. It always seemed like what fundamentally needed to change was not more content moderation at the infrastructure level but instead a healthier incentive system for content creation.&lt;/p&gt;
      &lt;p&gt;Today the conditions to bring about that change may be happening. In the last year, something core to the Internet weâve all known has changed. It's being driven by AI and it has an opportunity with some care and nurturing to help bring about what we think may be a much better Internet.&lt;/p&gt;
      &lt;p&gt;Whatâs the change? The primary discovery system of the Internet for the last 15 years has been Search Engines. They scraped the Internet's content, built an index, and then presented users with a treasure map which they followed generating traffic. Content creators were happy to let Search Engines scrape their content because there were a limited number of them, so the infrastructure costs were relatively low and, more importantly, because the Search Engines gave something to sites in the form of traffic âÂ the Internetâs historic currency âÂ sent back to sites.&lt;/p&gt;
      &lt;p&gt;Itâs already clear that the Internetâs discovery system for the next 15 years will be something different: Answer Engines. Unlike Search Engines which gave you a map where you hunted for what you were looking for, driving traffic in the process, Answer Engines just give you the answer without you having to click on anything. For 95 percent of users 95 percent of the time, that is a better user experience.&lt;/p&gt;
      &lt;p&gt;You donât have to look far to see this is changing rapidly before our eyes. ChatGPT, Anthropicâs Claude, and other AI startups arenât Search Engines â theyâre Answer Engines. Even Google, the search stalwart, is increasingly serving âAI Overviewsâ in place of 10 blue links. We can often look to sci-fi movies to have a glimpse into our most likely future. In them, the helpful intelligent robot character didnât answer questions with: âHere are some links you can click on to maybe find what youâre looking for.â Whether you like it or not, the future will increasingly be answers not searches.&lt;/p&gt;
      &lt;p&gt;In the short term, this is going to be extremely painful for some industries that are built based on monetizing traffic. It already is. While ecommerce and social applications haven't yet seen a significant drop in traffic as the world switches to Answer Engines, media companies have. Why the difference? Well, for the former, you still need to buy the thing the Answer Engine recommends and, for now, we still value talking with other humans.&lt;/p&gt;
      &lt;p&gt;But for media companies, if the Answer Engine gives you the summary of what youâre looking for in most cases you donât need to read the story. And the loss of traffic for media companies has already been dramatic. Itâs not just traditional media. Research groups at investment banks, industry analysts, major consulting firms âÂ theyâre all seeing major drops in people finding their content because we are increasingly getting answers not search treasure maps.&lt;/p&gt;
      &lt;p&gt;Some say these answer engines or agents are just acting on behalf of humans. Sure but so what? Without a change they will still kill content creatorsâ businesses. If you ask your agent to summarize twenty different news sources but never actually visit any of them youâre still undermining the business model of those news sources. Agents donât click on ads. And if those agents are allowed to aggregate information on behalf of multiple users itâs an even bigger problem because then subscription revenue is eliminated as well. Why subscribe to the Wall Street Journal or New York Times or Financial Times or Washington Post if my agent can free ride off some other user who does?&lt;/p&gt;
      &lt;p&gt;Unless you believe that content creators should work for free, or that they are somehow not needed anymore âÂ both of which are naive assumptions âÂ something needs to change. A visit from an agent isnât the same as a visit from a human and therefore should have different rules of the road. If nothing changes, the drop in human traffic to the media ecosystem writ large will kill the business model that has built the content-rich Internet we enjoy today.&lt;/p&gt;
      &lt;p&gt;We think thatâs an existential threat to one of humanityâs most important creations: the Internet.&lt;/p&gt;
      &lt;p&gt;But thereâs reason for optimism. Content is the fuel that powers every AI system and the companies that run those AI systems know ultimately they need to financially support the ecosystem. Because of that it seems potentially we're on the cusp of a new, better, and maybe healthier Internet business model. As content creators use tools like the ones provided by Cloudflare to restrict AI robots from taking their content without compensation, we're already seeing a market emerge and better deals being struck between AI and content companies.&lt;/p&gt;
      &lt;p&gt;What's most interesting is what content companies are getting the best deals. It's not the ragebait headline writers. It's not the news organizations writing yet another take on what's going on in politics. It's not the spammy content farms full of drivel. Instead, it's Reddit and other quirky corners that best remind us of the Internet of old. For those of you old enough, think back to the Internet not of the last 15 years but of the last 35. Weâve lost some of what made that early Internet great, but there are indications that we might finally have the incentives to bring more of it back.&lt;/p&gt;
      &lt;p&gt;It seems increasingly likely that in our future, AI-driven Internet âÂ assuming the AI companies are willing to step up, support the ecosystem, and pay for the content that is the most valuable to them â itâs the creative, local, unique, original content thatâll be worth the most. And, if youâre like us, the thing you as an Internet consumer are craving more of is creative, local, unique, original content. And, it turns out, having talked with many of them, thatâs the content that content creators are most excited to create.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;A New Internet Business Model&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;So how will the business model work? Well, for the first time in history, we have a pretty good mathematical representation of human knowledge. Sum up all the LLMs and that's what you get. It's not perfect, but it's pretty good. Inherently, the same mathematical model serves as a map for the gaps in human knowledge. Like a block of Swiss Cheese â there's a lot of cheese, but there's also a lot of holes.&lt;/p&gt;
      &lt;p&gt;Imagine a future business model of the Internet that doesn't reward traffic-generating ragebait but instead rewards those content creators that help fill in the holes in our collective metaphorical cheese. That will involve some portion of the subscription fees AI companies collect, and some portion of the revenue from the ads they'll inevitably serve, going back to content creators who most enrich the collective knowledge.&lt;/p&gt;
      &lt;p&gt;As a rough and simplistic sketch, think of it as some number of dollars per AI companyâs monthly active users going into a collective pool to be distributed out to content creators based on what most fills in the holes in the cheese.&lt;/p&gt;
      &lt;p&gt;You could imagine an AI company suggesting back to creators that they need more created about topics they may not have enough content about. Say, for example, the carrying capacity of unladened swallows because they know their subscribers of a certain age and proclivity are always looking for answers about that topic. The very pruning algorithms the AI companies use today form a roadmap for what content is worth enough to not be pruned but paid for.&lt;/p&gt;
      &lt;p&gt;While today the budget items that differentiate AI companies are how much they can afford to spend on GPUs and top talent, as those things inevitably become more and more commodities it seems likely what will differentiate the different AIs is their access to creative, local, unique, original content. And the math of their algorithms provides them a map of whatâs worth the most. While there are a lot of details to work out, those are the ingredients you need for a healthy market.&lt;/p&gt;
      &lt;p&gt;As we think about our role at Cloudflare in this developing market, it's not about protecting the status quo but instead helping catalyze a better business model for the future of Internet content creation. That means creating a level playing field. Ideally there should be lots of AI companies, large and small, and lots of content creators, large and small.&lt;/p&gt;
      &lt;p&gt;It canât be that a new entrant AI company is at a disadvantage to a legacy search engine because one has to pay for content but the other gets it for free. But itâs also critical to realize that the right solution to that current conundrum isnât that no one pays, itâs that, new or old, everyone who benefits from the ecosystem should contribute back to it based on their relative size.&lt;/p&gt;
      &lt;p&gt;It may seem impossibly idealistic today, but the good news is that based on the conversations weâve had weâre confident if a few market participants tip âÂ whether because they step up and do the right thing or are compelled â we will see the entire market tipping and becoming robust very quickly.&lt;/p&gt;
      &lt;p&gt;We can't do this alone and we have no plans to try to. Our mission is not to âbuild a better Internetâ but to âhelp build a better Internet.â The solutions developed to facilitate this market need to be open, collaborative, standardized, and shared across many organizations. Weâll take some encouraging steps in that direction with announcements on partnerships and collaborations this week. And weâre proud to be a leader in this space.&lt;/p&gt;
      &lt;p&gt;The Internet is an ecosystem and we, other infrastructure providers, along with most importantly both AI companies and content creators, will be critical in ensuring that ecosystem is healthy. Weâre excited to partner with those who are ready to step up and do their part to also help build a better Internet. It is possible.&lt;/p&gt;
      &lt;p&gt;And we're optimistic that if others can collaborate in supporting the ecosystem we may be at the cusp of a new golden age of the Internet. Our conversations with the leading AI companies nearly all acknowledge that they have a responsibility to give back to the ecosystem and compensate content creators. Confirming this, the largest publishers are reporting they're having much more constructive conversations about licensing their content to those AI companies. And, this week, we'll be announcing new tools to help even the smallest publishers take back control of who can use what they've created.&lt;/p&gt;
      &lt;p&gt;It may seem impossible. We think itâs a no-brainer. We're proud of what Cloudflare has accomplished over the last 15 years, but thereâs a lot left to do to live up to our mission. So, more than ever, it's clear: giddy up, because we're just getting started!&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/cloudflare-2025-annual-founders-letter/"/><published>2025-09-22T15:14:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335129</id><title>Human-Oriented Markup Language</title><updated>2025-09-22T17:09:28.795265+00:00</updated><content>&lt;doc fingerprint="57f920aaa3d8d650"&gt;
  &lt;main&gt;
    &lt;code&gt;# A sample HUML document.
website::
  hostname: "huml.io"
  ports:: 80, 443 # Inline list.
  enabled: true
  factor: 3.14
  props:: mime_type: "text/html", encoding: "gzip" # Inline dict.
  tags:: # Multi-line list.
    - "markup"
    - "webpage"
    - "schema"

haikus::
  one: """
    A quiet language
    Lines fall into their places
    Nothing out of place
  """
&lt;/code&gt;
    &lt;head rend="h2"&gt;Motivation&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HUML was primarily born out of the numerous frustrations with YAML, where one easy-to-miss, accidental indentation change can dangerously alter the semantics of a document.&lt;/item&gt;
      &lt;item&gt;Other popular markup languages such as TOML and HCL are configuration-oriented. NestedText is an interesting approach, but is too primitive to be suitable for wider use cases. JSON is universal, but lacks comments, does not have a strict form for consistent readability across contexts, and has bracket-matching and formatting woes which make human editing difficult.&lt;/item&gt;
      &lt;item&gt;Of these, YAML is the one that comes closest to indicating structure and hierarchy visually.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Ultimately, a new markup language is a subjective endeavor (it was even in 2001, as evidenced by YAML's original name, Yet Another ...). HUML looks like YAML, but borrows characteristics from many existing languages with the primary focus on enforcing human readability and consistency across contexts.&lt;/p&gt;
    &lt;p&gt;Still, why YET another markup language? Why not?&lt;/p&gt;
    &lt;head rend="h2"&gt;Goals&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Ensure human readability and editability above all else.&lt;/item&gt;
      &lt;item&gt;Enable visual comprehension of data structures and hierarchies.&lt;/item&gt;
      &lt;item&gt;Avoid footguns and ambiguities in syntax and data types.&lt;/item&gt;
      &lt;item&gt;Provide as few ways as possible—preferably one—of representing something.&lt;/item&gt;
      &lt;item&gt;Maintain strict formatting for uniformity, eliminating the need for formatters.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://huml.io/"/><published>2025-09-22T15:48:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335135</id><title>UK Millionaire exodus did not occur, study reveals</title><updated>2025-09-22T17:09:28.201241+00:00</updated><content>&lt;doc fingerprint="7ecd443b5b203edb"&gt;
  &lt;main&gt;
    &lt;p&gt;30 news pieces a day in 2024 on non-existent exodus&lt;/p&gt;
    &lt;p&gt;A millionaire exodus widely reported by news outlets around the world in 2024, and credited for the UK Labour government’s decision to weaken tax reforms, did not occur, the Tax Justice Network reveals.&lt;/p&gt;
    &lt;p&gt;The media reporting – consisting of over 10,900 news pieces across print, broadcast and online news in 2024 – was primarily based on a report published by Henley &amp;amp; Partners1, a firm that sells golden passports to the superrich and advises governments on setting up such schemes. The European Court of Justice recently ruled one such scheme, that of Malta, to be unlawful.2&lt;/p&gt;
    &lt;p&gt;The Tax Justice Network’s review – co-published with Patriotic Millionaires UK and Tax Justice UK – of the Henley report finds that the number of millionaires claimed by Henley &amp;amp; Partners to be leaving countries in “exodus” in 2024 represented near-0% of those countries’ millionaire populations.3 For example, the 9500 millionaires widely reported to be leaving the UK in 2024 represented 0.3% of the UK’s 3.06 million millionaires.4&lt;/p&gt;
    &lt;p&gt;Media reporting widely blamed the alleged millionaire exodus on tax policies in the same year that calls for a wealth tax on the superrich gained unprecedented momentum globally.5 The media reporting was equivalent to 30 news pieces a day on the non-existent millionaire exodus across 2024.&lt;/p&gt;
    &lt;p&gt;Reviewing the full period from 2013 to 2024 for which the Henley report presents estimates on millionaire migration, the Tax Justice Network finds that millionaire migration rates consistently stood at near-0% for every year.6 Academic studies consistently show that the tax responses of the wealthy involves minimal levels of migration.7&lt;/p&gt;
    &lt;p&gt;Henley’s estimates, when put into perspective, reveal a picture that is at complete odds with the report’s narrative and media coverage: millionaires are highly immobile, and nearly 100% of millionaires have not relocated to a new country since 2013, if Henley’s estimates are to be taken at face value.&lt;/p&gt;
    &lt;p&gt;Henley &amp;amp; Partners was accused in a 2018 UK Parliamentary inquiry of meddling in the elections of Caribbean nations in return for the exclusive rights to sell golden passports.8 Henley &amp;amp; Partners told The Guardian it “fundamentally rejects any allegation of wrongdoing”.9 A recent Financial Times article identified an EU-sanctioned Russian businessman with links to the Ukraine invasion who could more easily circumvent travel restrictions due to a Maltese golden passport Henley helped him acquire in the past.10 A spokesperson for Henley &amp;amp; Partners told the Financial Times that while she “could not comment on individual cases because of missing information and data protection… an individual ‘may pass all the stringent due diligence tests imposed, but still go on to engage in criminal activity.’”11&lt;/p&gt;
    &lt;p&gt;Golden passports are now illegal in the EU following a successful court challenge brought by the European Commission against Malta’s scheme, on which Henley &amp;amp; Partners had advised. The Commission said such schemes pose serious risks for money laundering, tax evasion and corruption.12 Henley &amp;amp; Partners told media in response that it was “disappointed” but that the decision “will only increase the demand for specialized advisors”.13&lt;/p&gt;
    &lt;p&gt;Findings behind Labour climbdown riddled with problems&lt;/p&gt;
    &lt;p&gt;The UK Labour government’s decision in January 2025 to weaken non-dom tax reform was widely reported to be a result of concerns about the Henley report’s findings.14&lt;/p&gt;
    &lt;p&gt;The Tax Justice Network’s review of the Henley report flags several issues with the report’s methodology as well as contradictions in Henley &amp;amp; Partner’s reporting, and particularly in its claims on the UK exodus.&lt;/p&gt;
    &lt;p&gt;Strikingly, the report’s methodology15 states that its estimates are primarily a measure of where millionaires say they work on social media and not of where they live or reside, meaning the report does not track actual, physical migration – contrary to the presenting of the estimates in the press.&lt;/p&gt;
    &lt;p&gt;Moreover, the report uses a far narrower definition of ‘millionaires’ that does not include all dollar millionaires like the standard definition (people with net worth of 1 million dollars or more), but rather only individuals with liquid assets worth 1 million dollars or more, who are thus richer and more mobile on average than a standardly defined millionaire.16 In the case of the UK, the ‘millionaires’ identified by the report represent just a fifth (20%) of the UK millionaire population.17 Even then, the report is based on a small sample from within these narrowly defined millionaires and the sample is skewed towards centi-millionaires and billionaires, who are also likely to be the most easily mobile.18&lt;/p&gt;
    &lt;p&gt;Just as striking, the use of the term “exodus” has been inconsistent in the analysis. In 2021, Henley described 2000 millionaires leaving the UK as “insignificant” but in 2023 described 1600 millionaires leaving the UK an “exodus”. In 2023, the 6500 millionaires claimed to be leaving India were described as “not particularly concerning” but redescribed in 2024 as a “wealth exodus”.19&lt;/p&gt;
    &lt;p&gt;The Tax Justice Network wrote to Henley &amp;amp; Partners and New World Wealth (who prepared the Henley report’s estimates) with questions for each ahead of the publication of its review. The response received said20:&lt;/p&gt;
    &lt;p&gt;“It seems this entire debate is over that one word. The dictionary definition is just ‘mass migration’, and HMRC’s own data shows that the number of non-doms in the UK is decreasing year on year – which seems to be a mass migration. If you are looking to the biblical definition, then to use the term ‘exodus’ would of course mean that all non-doms are leaving, but I don’t think many people take biblical interpretations quite so literally?”&lt;/p&gt;
    &lt;p&gt;Furthermore, Henley &amp;amp; Partners labelled the UK’s alleged exodus a “Brexodus” in 2023, claiming that the exodus was largely an impact of Brexit.21 In October 2024, Henley relabelled the exodus a “Wexit” in a press release framing the UK exodus as a reaction to tax hikes that might be announced in the UK Labour government’s upcoming budget statement.22&lt;/p&gt;
    &lt;p&gt;Henley &amp;amp; Partners’ specified in October 2024 that the “Wexit” is a “wealth exodus” that includes centi-millionaires and billionaires, and the report’s author emphasised that “[t]he large number of centi-millionaires leaving the UK is particularly concerning”.23 These claims appear inconsistent with Henley’s forecast made the month prior in September 2024 that the UK centi-millionaire population is growing and will continue to grow from 2024 to 2040.24&lt;/p&gt;
    &lt;p&gt;The press release highlighted that the UK Labour government’s budget statement as a main reason for this alleged “wealth exodus”:&lt;/p&gt;
    &lt;p&gt;“The UK’s high tax rates and concerns about additional tax hikes that could be announced at the end of the month in the Labour Party’s first budget in 14 years, are highlighted as being among the main reasons for the wealth exodus.”25&lt;/p&gt;
    &lt;p&gt;A response sent by Henley &amp;amp; Partners to the Tax Justice Network said:&lt;/p&gt;
    &lt;p&gt;“We have never claimed that Labour tax policies were the sole or root cause. If papers such as the Telegraph, Times, Mail, decide to add their own layer on to that, and deliberately exclude from their story our standard reminder to them that these were the Conservatives’ tax changes, then I think your argument is with them not with us.”&lt;/p&gt;
    &lt;p&gt;Moreover, it is unclear whether the forecast of centi-millionaires and billionaires leaving the UK that Henley reported in October 2024 was different from the forecast it initially made in June 2024 when the Labour party was not in power.&lt;/p&gt;
    &lt;p&gt;Media adds fuel to the fictional fire&lt;/p&gt;
    &lt;p&gt;The Tax Justice Network’s analysis of media coverage of the Henley report finds that coverage often went far beyond any claims made in the report itself, contributing to an entirely unfounded narrative about the role of tax and government policies in causing a millionaire exodus which itself did not occur.&lt;/p&gt;
    &lt;p&gt;Tax was mentioned in half of global media coverage of the exodus and far more often than any other exodus drivers discussed in the Henley report.&lt;/p&gt;
    &lt;p&gt;The UK Labour party, which was not in power when the report was published in June 2024, was mentioned more than twice as much as the UK Conservative party in global media coverage, and nearly four times as much as Brexit in UK media coverage.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; Note: Percentages show the number of mentions as a share of all global media coverage &lt;/p&gt;
    &lt;p&gt;The picture is more skewed in UK media coverage, where tax was mentioned in 71% of coverage and Labour mentioned in 43% of coverage.26&lt;/p&gt;
    &lt;p&gt;Seven high-profile millionaires leaving the UK were mentioned nearly three times more often in global media coverage than pro-tax millionaire campaign groups representing hundreds of millionaires.27&lt;/p&gt;
    &lt;p&gt;In contrast to the media narrative, 81% of UK millionaires agree with the statement that it is patriotic to pay a fair share of tax, according to a poll published on 5 June 2025 by Patriotic Millionaires UK. 80% of UK millionaires said they would support a wealth tax of 2% on wealth over £10 million.28&lt;/p&gt;
    &lt;p&gt;The Tax Justice Network’s review of the Henley report raised a number of other questions, including the statistical credibility of drawing any conclusions from a self-admittedly unrepresentative sample; and the degree of extrapolation necessary to make any findings about smaller groups such as billionaires.&lt;/p&gt;
    &lt;p&gt;On the report’s sample, the response sent by Henley &amp;amp; Partners said:&lt;/p&gt;
    &lt;p&gt;“Statistically, if it is consistent year by year, then laws of statistical sampling mean that it can be used to draw a conclusion.”&lt;/p&gt;
    &lt;p&gt;The report is published by Henley &amp;amp; Partners but prepared by New World Wealth29, which describes itself as a “wealth intelligence firm” on its website. New World Wealth appears to have only one staff member and has not made the data behind its calculations public.&lt;/p&gt;
    &lt;p&gt;New World Wealth has been publishing estimates on millionaire migrations for at least a decade, and first began to publish its estimates with Henley &amp;amp; Partners in 2022, which was the first time the estimates on millionaire migrations underway were described as an “exodus”.&lt;/p&gt;
    &lt;p&gt;More specific questions about the sample sent to New World Wealth, including a question asking how many real persons in the sample were observed to have “migrated” in 2024, were not responded to.&lt;/p&gt;
    &lt;p&gt;Fariya Mohiuddin, Deputy Director: External Affairs at Tax Justice UK said:&lt;/p&gt;
    &lt;p&gt;“Taxing the super-rich to revitalise key services like the NHS and education, that we all rely on, is more urgent than ever. Taxing the wealth of the richest is simply not going to cause a mass exodus. This is scaremongering and statistical obfuscation by companies that represent the interests of billionaires and multi-millionaires. In fact, when the numbers are crunched properly, rather than using dodgy stats and figures, tax is an inconsequential factor in the decision-making of the vanishingly small percentage of millionaires that do decide to move. In fact, many wealthy people want to pay more tax. They know that when public services are well-funded, people are healthy, and the country works better, they will benefit – alongside everyone else.”&lt;/p&gt;
    &lt;p&gt;Member of Patriotic Millionaires UK and legal consultant, Stephen Kinsella said:&lt;/p&gt;
    &lt;p&gt;“As this excellent report from the Tax Justice Network shows, millionaires like me aren’t going anywhere. We want to build a better Britain so we’re proud to pay and here to stay. When nearly three quarters of UK millionaires think taxes should be raised on the richest to reduce the strain on everyone else, and 81% think it’s patriotic to pay their fair share in tax, what on earth is stopping our Government from doing their duty and taxing extreme wealth?”&lt;/p&gt;
    &lt;p&gt;Alex Cobham, chief executive at the Tax Justice Network, said:&lt;/p&gt;
    &lt;p&gt;“The majority of people want taxes on the superrich, the majority of millionaires are saying tax us, and practically all credible studies say you should do it. But what the media reported, and the government listened to, was a fictional millionaire ‘exodus’ based on questionable data published by a firm that helps the superrich buy their way out of the rules that apply to everybody else. Tax is our most powerful tool for creating more equal societies, but scare stories like these are used to talk down to people and to block positive change.”&lt;/p&gt;
    &lt;p&gt;“This is a wakeup call for media professionals and governments alike. Do your homework when it comes to tax. Treat the Henley report and any such claims about fleeing millionaires with extreme caution, and make sure your stories and your policy decisions are based on robust evidence.”&lt;/p&gt;
    &lt;p&gt;-ENDS-&lt;/p&gt;
    &lt;p&gt;Read our review of the Henley report&lt;/p&gt;
    &lt;p&gt;Notes to Editor&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The Henley Private Wealth Migration Report 2024 was published on 18 June 2024 by Henley &amp;amp; Partners. The report’s estimates are prepared by New World Wealth.&lt;/item&gt;
      &lt;item&gt;See this FT article for more information about the European Court of Justice’s ruling and Henley &amp;amp; Partners role in the Maltese scheme. See the press release from the Court here.&lt;/item&gt;
      &lt;item&gt;The Tax Justice Network’s review of the Henley report is available here.&lt;/item&gt;
      &lt;item&gt;Countries’ reported migrating millionaires represented less than 1% of their millionaires, and was closer to 0% for most countries, including the UK.&lt;lb/&gt;Source: The millionaire exodus myth, Tax Justice Network, June 2025&lt;/item&gt;
      &lt;item&gt;Some examples of media coverage:&lt;lb/&gt;– Reuters: Ultra-rich entrepreneurs threaten to desert Britain over tax&lt;lb/&gt;– Bloomberg UK: Britain’s Ultra-Rich Map Out Routes to Escape ‘Non-Dom’ Taxes After Labour Victory&lt;lb/&gt;– CNN: Millionaires fleeing Britain in their thousands&lt;lb/&gt;– The Telegraph: Britain to suffer world’s biggest exodus of millionaires as Labour takes power&lt;lb/&gt;– CNBC: Millionaires are abandoning the UK in droves, new research shows&lt;/item&gt;
      &lt;item&gt;The total number of millionaires reported on the Henley &amp;amp; Partners website to have migrated every year since 2013 to 2023 consistently represented around 0.2% of millionaires annually. Moreover, while the global millionaire population has grown since 2013, the millionaire migration rate, however small, is marginally lower now than it was in the middle of the previous decade – even after bouncing back from the enforced immobility of the pandemic years. The “unprecedented”, “record numbers” of migrating millionaires Henley reported in 2024 are proportionally smaller than the migration numbers reported for 2016, 2017 and 2018.&lt;lb/&gt;Source: The millionaire exodus myth, Tax Justice Network, June 2025&lt;/item&gt;
      &lt;item&gt;See the literature on migration surveyed in our report, Taxing extreme wealth: what countries around the world could gain from progressive wealth taxes (Alison Schulz &amp;amp; Miroslav Palanský), 2024, Tax Justice Network. Meanwhile, a London School of Economics study found that the vast majority of Britain’s extremely wealthy people would never leave the country for tax reasons, partly due to the stigma involved in doing so, and partly because they think lower-tax jurisdictions are “boring”.&lt;/item&gt;
      &lt;item&gt;More information about the inquiry in this FT article. Read The Guardian’s 2018 investigation here.&lt;/item&gt;
      &lt;item&gt;See Henley’s response to the Guardian here.&lt;/item&gt;
      &lt;item&gt;Read the FT’s investigation on Maltese golden passports sold to Russians here.&lt;/item&gt;
      &lt;item&gt;See note 10 for Henley’s response.&lt;/item&gt;
      &lt;item&gt;See note 2.&lt;/item&gt;
      &lt;item&gt;See Henley’s statement on the European Court of Justice’s ruling here.&lt;/item&gt;
      &lt;item&gt;Some examples of media reporting:&lt;lb/&gt;– Sky News: “Rachel Reeves is to water down her crackdown on the non-dom tax status after analysis showed it had prompted an exodus of millionaires.”&lt;lb/&gt;– CNBC: “The U.K. is to soften some planned changes to its controversial non-dom tax rule following concerns of a millionaire exodus, the Treasury has confirmed.”&lt;lb/&gt;– The Independent: “Reeves to water down tax raid on non-doms amid exodus of millionaires”&lt;lb/&gt;– The Times: “Rachel Reeves to relax non-dom tax rule amid millionaire exodus”&lt;/item&gt;
      &lt;item&gt;The Henley report’s methodology states: “The firm [New World Wealth] uses various public sources to check city locations, including LinkedIn and other business portals. Its stats are therefore mainly based on the work locations of the individuals.” The methodology is available at the bottom of this webpage.&lt;/item&gt;
      &lt;item&gt;See the Henley report’s methodology at the bottom of this webpage.&lt;/item&gt;
      &lt;item&gt;The Henley report’s author stated in a BBC interview that the group of UK ‘millionaires’ as defined in the report totalled 602,000, which is around one fifth of the UK’s millionaire population, which the UBS Global Wealth Report 2024 estimates to stand at 3.06 million millionaires.&lt;/item&gt;
      &lt;item&gt;The Henley report’s author Andrew Amolis acknowledged in an interview with BBC More or Less that the report’s sample is skewed. Presenter Tim Harford challenged Mr Amolis further (emphasis added):Andrew Amoils: Most of the database – I’d say between twenty and a hundred million dollars in assets, that would be the bulk of the database. So our data is skewed to the top end, so there will be the billionaires and the centimillionaires with over a hundred million, with some of the people lower down it’s more difficult to know if they are a high net worth.Tim Harford: But wait, aren’t these super-rich more easily able to skip off to Monaco or Dubai than your run of a mill dollar millionaire?AA: No, you’re right, 100%, that would be an issue. Though I would argue that the super-wealthy leaving is obviously the most important, because if you’ve got a banker at Goldman Sachs who’s making five hundred thousand pounds a year and they leave, that has very little impact whereas if somebody with over a hundred million who’s got a business leaves, the impact’s much greater.TH: Sure, but the headlines are not about a few people controlling a huge amount of money leaving, the headlines are about 9000 millionaires leaving. So the headlines imply that there is some kind of representative sample, and there’s some kind of reasonable extrapolation, but from based on what you’ve told me I don’t think we really can reasonably extrapolate, given the methods you’re describing.AA: Well how else would you do it? I mean, we’ve got a sample of 150000 high net worths globally, and we’re tracking them in terms of their movements. How else would you do it? How else would you work out where people are going, apart from the way we’re doing it?TH: Well I think if you don’t have a representative sample, you don’t have any basis to make the claim at all.AA: Well I would argue it is a representative sample. 150000 people, that’s a lot!TH: But you just told us it wasn’t representative. The sheer number of people doesn’t make it representative.&lt;/item&gt;
      &lt;item&gt;The term “exodus” has been used inconsistently, as this table shows.&lt;lb/&gt;Source: The millionaire exodus myth, Tax Justice Network, June 2025&lt;lb/&gt;Note: The table presents migration numbers for the three reports New World Wealth published with the AfrAsia bank from 2018 to 2020 and three reports it published with Henley &amp;amp; Partners from 2022 to 2024. New World Wealth’s calculation of migration as a percentage of millionaire population are provided in parentheses where available. New World Wealth provided the percentages in 2019 and 2020, and provided percentages for some countries in 2022. No percentages were provided in 2023 and 2024 that we could find.&lt;lb/&gt;*Retroactively called a “wealth exodus” in Henley’s 2024 press release.&lt;/item&gt;
      &lt;item&gt;The response the Tax Justice Network received is reproduced in full at the end of the Tax Justice Network’s review of the Henley report.&lt;/item&gt;
      &lt;item&gt;See Henley &amp;amp; Partners’ use of the term “Brexodus” in this article from the Henley 2023 report.&lt;/item&gt;
      &lt;item&gt;See Henley &amp;amp; Partner’s October 2024 press release using the term “Wexit” here. The press release was syndicated at least 400 times across the media landscape in large part due to the PR Newswire service. While Henley’s original press release did list in its notes to editor Brexit as possible driver of exodus, the notes to editor were cut off in the PR Newswire version of the press release that was widely syndicated. Nonetheless, Henley’s October 2024 press release did refer to Brexit in the body of the release, but when doing so contrasted Brexit as a positive phenomenon that is separate from the wealth exodus. The press release stated: “Based on data over the past nine months, the UK’s wealth exodus or WEXIT is expected to include 85 centi-millionaires and 10 billionaires, and in an ironic reversal of Brexit fortunes, 68% are heading for Europe, with favored destinations being Italy, Malta, Greece, Portugal, Switzerland, Monaco, Cyprus, France, Spain, and the Netherlands.”&lt;/item&gt;
      &lt;item&gt;Henley’s The Centi-Millionaire Report 2024 was published on 17 September 2024.&lt;/item&gt;
      &lt;item&gt;See note 22.&lt;/item&gt;
      &lt;item&gt;Looking specifically at UK media coverage, we find the mentions of themes and drivers to be far more skewed towards tax and Labour.&lt;lb/&gt;Source: The millionaire exodus myth, Tax Justice Network, June 2025&lt;/item&gt;
      &lt;item&gt;The seven high-profile millionaires reportedly moving away from the UK – Charlie Mullins, Christian Angermayer, Alan Howard, Nassef Sawiris, Asif Aziz and Bassim Haidar – were mentioned in 199 articles. In contrast, Patriotic Millionaires, Patriotic Millionaires UK, Millionaires for Humanity, Tax Me Now and Proud to Pay More – campaigning groups representing over 300 millionaires calling on governments to tax them more – were mentioned 73 times. The seven migrating millionaires were mentioned 2.7 times more than the pro-tax millionaires groups.&lt;/item&gt;
      &lt;item&gt;See Patriotic Millionaire UK’s polling here.&lt;/item&gt;
      &lt;item&gt;See New World Wealth’s website.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;About Patriotic Millionaires UK&lt;/p&gt;
    &lt;p&gt;Patriotic Millionaires UK is a nonpartisan network of British millionaires, from multiple industries and backgrounds from across the UK. It delivers a single mission – to leverage the voice of wealth to build a better Britain by changing the system to end extreme wealth and make those with it make their fair and proper contribution.&lt;/p&gt;
    &lt;p&gt;About Tax Justice UK&lt;/p&gt;
    &lt;p&gt;The UK’s approach to tax isn’t working. Our government fails to raise enough money to support high quality public services and wealth is desperately under-taxed. We campaign for a fairer tax system that takes more from the very wealthy. A tax system that actively redistributes wealth to tackle inequality; and that funds high quality public services. Our mission is to ensure that everyone in the UK benefits from a fair and effective tax system. Tax Justice UK is a partner of – but independent from – the Tax Justice Network.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://taxjustice.net/press/millionaire-exodus-did-not-occur-study-reveals/"/><published>2025-09-22T15:48:51+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335222</id><title>The American nations across North America</title><updated>2025-09-22T17:09:27.898092+00:00</updated><content>&lt;doc fingerprint="ba70015e0ff515a8"&gt;
  &lt;main&gt;
    &lt;p&gt;Earlier this summer, over at Nationhood Lab, we extended our data models to enable researchers to apply the American Nations model in Canada, This also let us create, for the first time, a master map of these regional cultures across North America.&lt;/p&gt;
    &lt;p&gt;The book the model is based on, American Nations, is a history of the entire continent north of the 25th parallel, including what’s now Canada and northern Mexico. Until now, I’d never had a proper map of what that looks like, facilitating research across borders. The map’s been popular with the public as well, with the post introducing it garnering unprecedented organic internet traffic.&lt;/p&gt;
    &lt;p&gt;Note Spanish Caribbean’s extension to the Dominican Republic and Puerto Rico. The region probably includes parts of the “Spanish Main” — the northern, Caribbean coast of South America — and maybe some other island locations as well, but, it being peripheral to our core study area in North America, I haven’t done the research into all that. First Nation, of course, includes Greenland, which is part of the Kingdom of Denmark.&lt;/p&gt;
    &lt;p&gt;Central and Southern Mexico likely belong to “post-Aztec” and “Maya” regional cultures, the latter extending into parts of Guatemala, Belize, and Honduras. Someday, hopefully in collaboration with regional experts, maybe there will be a South American Nations map as well.&lt;/p&gt;
    &lt;p&gt;Thanks to my counterparts at Motivf, John Liberty (who created the map) and Tova Pearlman (who helped wrangle some of the underlying data.) Enjoy.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://colinwoodard.com/new-map-the-american-nations-regions-across-north-america/"/><published>2025-09-22T15:54:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335452</id><title>SWE-Bench Pro</title><updated>2025-09-22T17:09:26.523361+00:00</updated><content>&lt;doc fingerprint="d6175194c4399c4"&gt;
  &lt;main&gt;
    &lt;p&gt;Code and data for the following works:&lt;/p&gt;
    &lt;p&gt;SWE-Bench Pro is a challenging benchmark evaluating LLMs/Agents on long-horizon software engineering tasks. Given a codebase and an issue, a language model is tasked with generating a patch that resolves the described problem.&lt;/p&gt;
    &lt;p&gt;The dataset is inspired from SWE-Bench: https://github.com/SWE-bench/SWE-bench&lt;/p&gt;
    &lt;p&gt;To access SWE-bench Pro, copy and run the following code:&lt;/p&gt;
    &lt;code&gt;from datasets import load_dataset
swebench = load_dataset('ScaleAI/SWE-bench_Pro', split='test')&lt;/code&gt;
    &lt;p&gt;SWE-bench Pro uses Docker for reproducible evaluations. In addition, the evaluation script requires Modal to scale the evaluation set.&lt;/p&gt;
    &lt;p&gt;Follow the instructions in the Docker setup guide to install Docker on your machine. If you're setting up on Linux, we recommend seeing the post-installation steps as well.&lt;/p&gt;
    &lt;p&gt;Run the following commands to store modal credentials:&lt;/p&gt;
    &lt;code&gt;pip install modal
modalv setup # and follow the prompts to generate your token and secret
&lt;/code&gt;
    &lt;p&gt;After running these steps, you should be able to see a token ID and secret in &lt;code&gt;~/.modal.toml&lt;/code&gt;:
EG:&lt;/p&gt;
    &lt;code&gt;token_id = &amp;lt;token id&amp;gt;
token_secret = &amp;lt;token secret&amp;gt;
active = true
&lt;/code&gt;
    &lt;p&gt;We store prebuilt Docker images for each instance. They can be found in this directory:&lt;/p&gt;
    &lt;p&gt;https://hub.docker.com/repository/docker/jefzda/sweap-images/general&lt;/p&gt;
    &lt;p&gt;The format of the images is as follows.&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;jefzda/sweap-images:{repo_base}.{repo_name}-{repo_base}__{repo_name}-{hash}&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;jefzda/sweap-images:gravitational.teleport-gravitational__teleport-82185f232ae8974258397e121b3bc2ed0c3729ed-v626ec2a48416b10a88641359a169d99e935ff03&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;First generate patch predictions using your harness of choice. Evaluate patch predictions on SWE-bench Pro with the following command:&lt;/p&gt;
    &lt;code&gt;python sweap_pro_eval_modal.py \
    --raw_sample_path=external_hf_v2.csv \
    --patch_path={OUTPUT}/gold_patches.json \
    --output_dir={OUTPUT}/ \
    --scripts_dir=run_scripts \
    --num_workers=100 \
    --dockerhub_username=your-username&lt;/code&gt;
    &lt;p&gt;Replace gold_patches with your patch json, and point raw_sample_path to the SWE-Bench Pro CSV.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/scaleapi/SWE-bench_Pro-os"/><published>2025-09-22T16:08:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335474</id><title>OpenAI and Nvidia Announce Partnership to Deploy 10GW of Nvidia Systems</title><updated>2025-09-22T17:08:59.409234+00:00</updated><content>&lt;doc fingerprint="a9561c5e408ccdb9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;OpenAI and NVIDIA announce strategic partnership to deploy 10 gigawatts of NVIDIA systems&lt;/head&gt;
    &lt;p&gt;News&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Strategic partnership enables OpenAI to build and deploy at least 10 gigawatts of AI datacenters with NVIDIA systems representing millions of GPUs for OpenAI’s next-generation AI infrastructure.&lt;/item&gt;
      &lt;item&gt;To support the partnership, NVIDIA intends to invest up to $100 billion in OpenAI progressively as each gigawatt is deployed.&lt;/item&gt;
      &lt;item&gt;The first gigawatt of NVIDIA systems will be deployed in the second half of 2026 on NVIDIA’s Vera Rubin platform.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;San Francisco and Santa Clara—September 22, 2025—NVIDIA and OpenAI today announced a letter of intent for a landmark strategic partnership to deploy at least 10 gigawatts of NVIDIA systems for OpenAI’s next-generation AI infrastructure to train and run its next generation of models on the path to deploying superintelligence. To support this deployment including datacenter and power capacity, NVIDIA intends to invest up to $100 billion in OpenAI as the new NVIDIA systems are deployed. The first phase is targeted to come online in the second half of 2026 using NVIDIA’s Vera Rubin platform.&lt;/p&gt;
    &lt;p&gt;“NVIDIA and OpenAI have pushed each other for a decade, from the first DGX supercomputer to the breakthrough of ChatGPT,” said Jensen Huang, founder and CEO of NVIDIA. “This investment and infrastructure partnership mark the next leap forward—deploying 10 gigawatts to power the next era of intelligence.”&lt;/p&gt;
    &lt;p&gt;“Everything starts with compute,” said Sam Altman, co-founder and CEO of OpenAI. “Compute infrastructure will be the basis for the economy of the future, and we will utilize what we’re building with NVIDIA to both create new AI breakthroughs and empower people and businesses with them at scale.”&lt;/p&gt;
    &lt;p&gt;“We’ve been working closely with NVIDIA since the early days of OpenAI,” said Greg Brockman, co-founder and President of OpenAI. “We’ve utilized their platform to create AI systems that hundreds of millions of people use every day. We’re excited to deploy 10 gigawatts of compute with NVIDIA to push back the frontier of intelligence and scale the benefits of this technology to everyone.”&lt;/p&gt;
    &lt;p&gt;OpenAI will work with NVIDIA as a preferred strategic compute and networking partner for its AI factory growth plans. OpenAI and NVIDIA will work together to co-optimize their roadmaps for OpenAI's model and infrastructure software and NVIDIA’s hardware and software.&lt;/p&gt;
    &lt;p&gt;This partnership complements the deep work OpenAI and NVIDIA are already doing with a broad network of collaborators, including Microsoft, Oracle, SoftBank, and Stargate partners, focused on building the world’s most advanced AI infrastructure.&lt;/p&gt;
    &lt;p&gt;OpenAI has grown to over 700 million weekly active users and strong adoption across global enterprises, small businesses, and developers. This partnership will help OpenAI advance its mission to build artificial general intelligence that benefits all of humanity.&lt;lb/&gt;NVIDIA and OpenAI look forward to finalizing the details of this new phase of strategic partnership in the coming weeks.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/openai-nvidia-systems-partnership/"/><published>2025-09-22T16:10:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335695</id><title>A board member's perspective of the RubyGems controversy</title><updated>2025-09-22T17:08:59.153768+00:00</updated><content/><link href="https://apiguy.substack.com/p/a-board-members-perspective-of-the"/><published>2025-09-22T16:25:35+00:00</published></entry></feed>