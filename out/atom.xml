<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-12T16:10:00.192901+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45218111</id><title>Debian 13, Postgres, and the US time zones</title><updated>2025-09-12T16:10:14.058295+00:00</updated><link href="https://rachelbythebay.com/w/2025/09/11/debtz/"/></entry><entry><id>https://news.ycombinator.com/item?id=45219228</id><title>Qwen3-Next</title><updated>2025-09-12T16:10:12.873984+00:00</updated><link href="https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;from=research.latest-advancements-list"/></entry><entry><id>https://news.ycombinator.com/item?id=45220069</id><title>Show HN: I made a generative online drum machine with ClojureScript</title><updated>2025-09-12T16:10:12.207666+00:00</updated><link href="https://dopeloop.ai/beat-maker/"/></entry><entry><id>https://news.ycombinator.com/item?id=45220121</id><title>Examples from The LaTeX Companion book (3rd edition)</title><updated>2025-09-12T16:10:06.462468+00:00</updated><content>&lt;doc fingerprint="2be3413d43f3dcbb"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;tlc3-examples – All examples from “The LaTeX Companion”, third edition&lt;/head&gt;
    &lt;p&gt;The PDFs (as used with spotcolor and trimming) and sources for all examples from the third edition (Parts I+II), together with necessary supporting files. The edition is published by Addison-Wesley, 2023, ISBN-13: 978-0-13-816648-9, ISBN-10: 0-13-816648-X (bundle of Part I &amp;amp; II).&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Sources&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;/info/examples/tlc3&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Documentation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Bug tracker&lt;/cell&gt;
        &lt;cell&gt;https://github.com/FrankMittelbach/tlc3-examples/issues&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Repository&lt;/cell&gt;
        &lt;cell&gt;https://github.com/FrankMittelbach/tlc3-examples&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Licenses&lt;/cell&gt;
        &lt;cell&gt;The LaTeX Project Public License 1.3c&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Maintainer&lt;/cell&gt;
        &lt;cell&gt;Frank Mittelbach&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Contained in&lt;/cell&gt;
        &lt;cell&gt;TeX Live as tlc3-examples&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Topics&lt;/cell&gt;
        &lt;cell&gt;Book examples&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Download the contents of this package in one zip archive (82.4M).&lt;/p&gt;
    &lt;head rend="h2"&gt;Community Comments&lt;/head&gt;
    &lt;p&gt;Loading...&lt;/p&gt;
    &lt;head rend="h2"&gt;Announcements&lt;/head&gt;
    &lt;head rend="h2"&gt;Suggestions&lt;/head&gt;
    &lt;p&gt;Maybe you are interested in the following packages as well.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ctan.org/pkg/tlc3-examples"/></entry><entry><id>https://news.ycombinator.com/item?id=45220656</id><title>Becoming the person who does the thing</title><updated>2025-09-12T16:10:05.976595+00:00</updated><content>&lt;doc fingerprint="3a08130fcd2f463d"&gt;
  &lt;main&gt;
    &lt;p&gt;It can be disorienting when our beliefs shift. The world we helped create no longer exists, and our role in it transforms too.&lt;/p&gt;
    &lt;p&gt;It can be unsettling, naturally. But that's kind of the point.&lt;/p&gt;
    &lt;p&gt;Looking back at times when I held certain beliefs—about how the world works, and what my role in this story is—it can feel less like a mod was installed and more like an entirely new operating system was swapped in.&lt;/p&gt;
    &lt;p&gt;Up until my late twenties, I could count the number of times I had been to the gym on one hand.&lt;/p&gt;
    &lt;p&gt;And worse, as a nerd, I was quietly proud of it. Why waste hours a week on something that hardly mattered? I have better things to do. I pitied the jocks who slaved away in the gym chasing vanity. What for? I don't need that. Who cares?&lt;/p&gt;
    &lt;p&gt;Like all childish thinking, it contained some truth. Physical fitness is less important than spiritual, emotional, and mental fitness; but it’s still important.&lt;/p&gt;
    &lt;p&gt;Even Paul, one of history’s most influential figures, with a worldview shaped by the utter centrality of spiritual health, said as much.&lt;/p&gt;
    &lt;p&gt;Your beliefs—and therefore approach to what a healthy life looks like—are foundational. It might sound obvious, but what you believe a "life well lived" looks like has a pretty transformative impact on both what life you end up building and how well lived it looks.&lt;/p&gt;
    &lt;p&gt;So if we’re a product of our beliefs and our most formative preconceptions are imposed by others, then where’s the hope?&lt;/p&gt;
    &lt;p&gt;We build, layer upon layer, and the layers laid first—now deeply buried within—are the ones we had the least say in.&lt;/p&gt;
    &lt;p&gt;We didn't pick them, but they shape everything we are and do. Bad luck, I guess.&lt;/p&gt;
    &lt;p&gt;Thankfully, we are dynamic beings. Old beliefs can peel off, and new ones take their place. Later layers can somehow seep deeper. Some recent beliefs can even become cornerstones.&lt;/p&gt;
    &lt;p&gt;For me, something shifted in my late twenties. Growing up I guess you could call it. I don’t remember the exact straw that broke the camel’s back, but a desire for change grew. I started working out.&lt;/p&gt;
    &lt;p&gt;It began slowly, but I began. Knee press-ups to start, later adding assisted pull-ups.&lt;/p&gt;
    &lt;p&gt;If anyone was watching, it would have looked stupid. A grown man barely able to push himself off the floor. But I showed up and put in my reps, day by day, week by week, in the privacy of my bedroom.&lt;/p&gt;
    &lt;p&gt;As the weeks and months passed, my strength grew.&lt;/p&gt;
    &lt;p&gt;Eventually, I graduated to full press-ups and pull-ups, no mods required.&lt;/p&gt;
    &lt;p&gt;Every small win reinforced the last and led me further away from who I used to be.&lt;/p&gt;
    &lt;p&gt;Fast forward almost to a decade and I feel a lot more friction not going to the gym than I do going. Cognitive dissonance is wonderful when it’s on your side, and it pops up whenever my healthy-Fred self-identity and actions diverge.&lt;/p&gt;
    &lt;p&gt;I'm far from a gym junkie—it hasn't become my life—but I go every weekday, 20 minutes a day. I arrive, do my workout, and leave, while most people are just getting started.&lt;/p&gt;
    &lt;p&gt;Our self-identity dictates everything, but it is not set in stone.&lt;/p&gt;
    &lt;p&gt;Changing our beliefs isn’t easy. Both those about the world around us and the world within. We can't simply will our way there and snap our fingers. We must journey. As with all great things, it's a process.&lt;/p&gt;
    &lt;p&gt;But it is possible. A well-trodden path is ahead for those who wish to walk it.&lt;/p&gt;
    &lt;p&gt;So how do you? How do you become the person who does the thing?&lt;/p&gt;
    &lt;p&gt;Earlier this week I spent a couple hours crafting my digital /shelf, a place where I can put the things that have impacted me the most up for all to see, so others can take them for themselves should they wish.&lt;/p&gt;
    &lt;p&gt;On it are these two quotes that have been living rent-free in my head from the beginning. Together, they create a twin-cog flywheel that cannot be stopped:&lt;/p&gt;
    &lt;quote&gt;“People like us do things like this” Seth Godin&lt;/quote&gt;
    &lt;quote&gt;“Every action you take is a vote for the type of person you wish to become” James Clear&lt;/quote&gt;
    &lt;p&gt;Your actions follow your self-beliefs.&lt;/p&gt;
    &lt;p&gt;If you identity as a failure, incapable of achievement, unfit, unlovable, destined to play a bit-part role in your own story, then by heck no matter how much willpower you put in to push that boulder up the hill, it will return to its place.&lt;/p&gt;
    &lt;p&gt;But there's a way through: every action you take is a vote for who you wish to become. Every day you wake up, look your old identity in the eye and say "thanks for your service, but you're not needed around here anymore," step forward and lean in, is a day your new identity is built.&lt;/p&gt;
    &lt;p&gt;It takes time. You have to actually want it. You have to choose to adopt a new mindset. Rome wasn't built in a day. But it comes, a little like how Hazel Grace Lancaster describes falling in love in The Fault In Our Stars: "slowly, and then all at once."&lt;/p&gt;
    &lt;p&gt;The path is there, should you choose.&lt;/p&gt;
    &lt;p&gt;Identify where your identity needs to shift. Then take a step. Cast today’s vote. Find your way through.&lt;/p&gt;
    &lt;p&gt;Do that day by day, then soon enough, your inner world will shift and recalibrate around the new reality you're co-creating.&lt;/p&gt;
    &lt;p&gt;Then one day you'll see it.&lt;/p&gt;
    &lt;p&gt;People like us really do things like this.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.fredrivett.com/2025/09/10/becoming-the-person-who-does-the-thing/"/></entry><entry><id>https://news.ycombinator.com/item?id=45220843</id><title>Astrophysics Source Code Library</title><updated>2025-09-12T16:10:05.609906+00:00</updated><content>&lt;doc fingerprint="eeb0eafba791d14b"&gt;
  &lt;main&gt;
    &lt;p&gt;The Astrophysics Source Code Library (ASCL) is a free online registry and repository for source codes of interest to astronomers and astrophysicists, including solar system astronomers, and lists codes that have been used in research that has appeared in, or been submitted to, peer-reviewed publications. The ASCL is indexed by the SAO/NASA Astrophysics Data System (ADS) and Web of Science and is citable by using the unique ascl ID assigned to each code. The ascl ID can be used to link to the code entry by prefacing the number with ascl.net (i.e., ascl.net/1201.001).&lt;/p&gt;
    &lt;p&gt;adstex automatically identifies all citation keys in a TeX source file and builds the corresponding bibliography file (.bib file) by fetching the reference information from NASA's Astrophysics Data System (ADS). adstex recognizes all variants of the cite commands in TeX, and works with various styles of citation keys, including arXiv IDs, DOIs, and ADS bibcodes. When a citation key is in the format of first-author name and year, adstex will query NASA's ADS and return a list of possible reference matches for the user to select the intended one. When a reference entry has updated information on NASA's ADS, adstex can detect such changes and fetch the new information and update the user's bibliography file. adstex supports any reference entry that is available on NASA's ADS, and allows the authors to write papers without manually searching for the bibliography entries.&lt;/p&gt;
    &lt;p&gt;IAR_Model fits unequally spaced time series from the Irregular Autoregressive (IAR). Available as Python and R functions, IAR_Model can generate observations for each process, compute the negative of the log likelihood of these process, fit each model to irregularly sampled data, and test the significance of the estimate.&lt;/p&gt;
    &lt;p&gt;fm4ar (flow matching for atmospheric retrievals) infers atmospheric properties of exoplanets from observed spectra. It uses flow matching posterior estimation (FMPE) for its machine learning (ML) approach to atmospheric retrieval; this approach provides many of the advantages of neural posterior estimation (NPE) while also providing greater architectural flexibility and scalability. The package uses importance sampling (IS) to verify and correct ML results, and to compute an estimate of the Bayesian evidence. fm4ar's ML models are conditioned on the assumed noise level of a spectrum (i.e., error bars), thus making them adaptable to different noise models.&lt;/p&gt;
    &lt;p&gt;AGNI simulates the atmospheric temperature-, height-, and compositional-structures of atmospheres overlying magma oceans while ensuring that radiative-convective equilibrium is maintained throughout the atmosphere. The code also supports real gas equations of state, self-gravitation, and various spectral surface compositions. Accounting for these energy transport processes permits AGNI to calculate atmospheric structure, which also yields realistic cooling rates for young rocky planets with magma oceans.&lt;/p&gt;
    &lt;p&gt;FiCUS (FItting the stellar Continuum of Uv Spectra) fit the stellar continuum of extragalactic ultraviolet (UV) spectra. The code takes observed-frame wavelength, flux density (with errors) and user-defined mask arrays as inputs, and returns an estimation of the galaxy stellar age, metallicity and dust extinction, as well as other secondary Spectral Energy Distribution (SED) parameters. FiCUS has two scripts; the first reads the INPUT file provided by the user and performs the fit according to selected options. It then gives the best-fit parameters and creates the OUTPUT files and figures. The second script includes pre-defined routines for spectral analysis, loading INPUT files and handling with data and models, as well as functions for the fitting routine, SED-parameters calculations and plotting, and imports functions into the first script.&lt;/p&gt;
    &lt;p&gt;pyStarburst99 is a Python version of the Starburst99 (ascl:1104.003) population synthesis code for star-forming galaxies. This Python version includes new evolutionary tracks and synthetic spectral energy distributions. pyStarburst99 provides wider coverage in metallicity, mass, and resolution, and includes evolutionary and spectral models of stars up to 300–500 M⊙.&lt;/p&gt;
    &lt;p&gt;The SIGWAY data analysis pipeline computes second-order, scalar induced gravitational wave signals emitted by curvature perturbations in the early universe. The package solves the Mukhanov-Sasaki equation for single field ultra-slow roll inflationary models and computes the primordial scalar power spectrum Pζ. SIGWAY also computes the second order gravitational wave power spectrum ΩGW from P ζ for reentry during radiation domination or a phase of early matter domination.&lt;/p&gt;
    &lt;p&gt;sMV (serial MultiView) scripts provide a semi-automatic and easy-to-use workflow for serial MultiView phase plane estimation. The phase plane is iteratively rotated based on the time series of calibrator residual phases; because time-domain information is included in the iterations, phase ambiguities are accurately and automatically identified. sMV enables efficient, high-accuracy differential astrometry and artifact-reduced imaging for astrophysical studies.&lt;/p&gt;
    &lt;p&gt;Built on Flax (ascl:2504.026), DeepSSM emulates gravitational wave (GW) spectra produced by sound waves during cosmological first-order phase transitions in the radiation-dominated era. It uses neural networks trained on an enhanced version of the Sound Shell Model (SSM). The code provides instantaneous predictions of GW spectra given the phase transition parameters, while achieving agreement with the enhanced SSM model. DeepSSM is particularly suitable for direct Bayesian inference on phase transition parameters without relying on empirical templates, such as broken power-law models.&lt;/p&gt;
    &lt;p&gt;The flux transport model HipFT implements advection, diffusion, and data assimilation on the solar surface on a logically rectangular nonuniform spherical grid. It is parallelized for use with multi-core CPUs and GPUs using a combination of Fortran's standard parallel do concurrent (DC), OpenMP Target data directives, and MPI. Serving as the computational core of the Open-source Flux Transport (OFT) software suite (ascl:2508.013), HipFT incorporates various differential rotation, meridional flow, super granular convective flow, and data assimilation models. HipRT also computes multiple realizations in a single run spanning multiple choices of parameters.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="http://ascl.net/"/></entry><entry><id>https://news.ycombinator.com/item?id=45221103</id><title>Lumina-DiMOO: An open-source discrete multimodal diffusion model</title><updated>2025-09-12T16:10:05.520896+00:00</updated><content>&lt;doc fingerprint="5d32a9963856c184"&gt;
  &lt;main&gt;
    &lt;p&gt;We introduce Lumina-DiMOO, an open-source foundational model for seamless multimodal generation and understanding. Lumina-DiMOO sets itself apart from prior unified models by utilizing a fully discrete diffusion modeling to handle inputs and outputs across various modalities. This innovative approach allows Lumina-DiMOO to achieve higher sampling efficiency compared to previous autoregressive (AR) or hybrid AR-diffusion paradigms and adeptly support a broad spectrum of multimodal tasks, including text-to-image generation, image-to-image generation (e.g., image editing, subject-driven generation, and image inpainting, etc.), as well as image understanding. Lumina-DiMOO achieves state-of-the-art performance on multiple benchmarks, surpassing existing open-source unified multimodal models. To foster further advancements in multimodal and dicrete diffusion model research, we release our code and checkpoints.&lt;/p&gt;
    &lt;p&gt;Overview of Lumina-DiMOO’s Multifunctionality and Superior Performance.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;Methods&lt;/cell&gt;
        &lt;cell role="head"&gt;#Params&lt;/cell&gt;
        &lt;cell role="head"&gt;Single Object&lt;/cell&gt;
        &lt;cell role="head"&gt;Two Object&lt;/cell&gt;
        &lt;cell role="head"&gt;Counting&lt;/cell&gt;
        &lt;cell role="head"&gt;Colors&lt;/cell&gt;
        &lt;cell role="head"&gt;Position&lt;/cell&gt;
        &lt;cell role="head"&gt;Attibute&lt;/cell&gt;
        &lt;cell role="head"&gt;Overall ↑&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Gen. Only&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;SDXL&lt;/cell&gt;
        &lt;cell&gt;2.6B&lt;/cell&gt;
        &lt;cell&gt;0.98&lt;/cell&gt;
        &lt;cell&gt;0.74&lt;/cell&gt;
        &lt;cell&gt;0.39&lt;/cell&gt;
        &lt;cell&gt;0.85&lt;/cell&gt;
        &lt;cell&gt;0.15&lt;/cell&gt;
        &lt;cell&gt;0.23&lt;/cell&gt;
        &lt;cell&gt;0.55&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Emu3-Gen&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;0.98&lt;/cell&gt;
        &lt;cell&gt;0.71&lt;/cell&gt;
        &lt;cell&gt;0.34&lt;/cell&gt;
        &lt;cell&gt;0.81&lt;/cell&gt;
        &lt;cell&gt;0.17&lt;/cell&gt;
        &lt;cell&gt;0.21&lt;/cell&gt;
        &lt;cell&gt;0.54&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;SD3-Medium&lt;/cell&gt;
        &lt;cell&gt;2B&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.94&lt;/cell&gt;
        &lt;cell&gt;0.72&lt;/cell&gt;
        &lt;cell&gt;0.89&lt;/cell&gt;
        &lt;cell&gt;0.33&lt;/cell&gt;
        &lt;cell&gt;0.60&lt;/cell&gt;
        &lt;cell&gt;0.74&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;DALL-E 3&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;0.96&lt;/cell&gt;
        &lt;cell&gt;0.87&lt;/cell&gt;
        &lt;cell&gt;0.47&lt;/cell&gt;
        &lt;cell&gt;0.83&lt;/cell&gt;
        &lt;cell&gt;0.43&lt;/cell&gt;
        &lt;cell&gt;0.45&lt;/cell&gt;
        &lt;cell&gt;0.67&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;FLUX.1 [Dev]&lt;/cell&gt;
        &lt;cell&gt;12B&lt;/cell&gt;
        &lt;cell&gt;0.98&lt;/cell&gt;
        &lt;cell&gt;0.81&lt;/cell&gt;
        &lt;cell&gt;0.74&lt;/cell&gt;
        &lt;cell&gt;0.79&lt;/cell&gt;
        &lt;cell&gt;0.22&lt;/cell&gt;
        &lt;cell&gt;0.45&lt;/cell&gt;
        &lt;cell&gt;0.66&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;OmniGen&lt;/cell&gt;
        &lt;cell&gt;3.8B&lt;/cell&gt;
        &lt;cell&gt;0.98&lt;/cell&gt;
        &lt;cell&gt;0.84&lt;/cell&gt;
        &lt;cell&gt;0.66&lt;/cell&gt;
        &lt;cell&gt;0.74&lt;/cell&gt;
        &lt;cell&gt;0.40&lt;/cell&gt;
        &lt;cell&gt;0.43&lt;/cell&gt;
        &lt;cell&gt;0.68&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Lumina-mGPT 2.0&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.87&lt;/cell&gt;
        &lt;cell&gt;0.44&lt;/cell&gt;
        &lt;cell&gt;0.85&lt;/cell&gt;
        &lt;cell&gt;0.44&lt;/cell&gt;
        &lt;cell&gt;0.54&lt;/cell&gt;
        &lt;cell&gt;0.69&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Unified&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Show-o&lt;/cell&gt;
        &lt;cell&gt;1.3B&lt;/cell&gt;
        &lt;cell&gt;0.95&lt;/cell&gt;
        &lt;cell&gt;0.52&lt;/cell&gt;
        &lt;cell&gt;0.49&lt;/cell&gt;
        &lt;cell&gt;0.82&lt;/cell&gt;
        &lt;cell&gt;0.11&lt;/cell&gt;
        &lt;cell&gt;0.28&lt;/cell&gt;
        &lt;cell&gt;0.53&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;TokenFlow-XL&lt;/cell&gt;
        &lt;cell&gt;14B&lt;/cell&gt;
        &lt;cell&gt;0.95&lt;/cell&gt;
        &lt;cell&gt;0.60&lt;/cell&gt;
        &lt;cell&gt;0.41&lt;/cell&gt;
        &lt;cell&gt;0.81&lt;/cell&gt;
        &lt;cell&gt;0.16&lt;/cell&gt;
        &lt;cell&gt;0.24&lt;/cell&gt;
        &lt;cell&gt;0.55&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Janus-Pro&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.89&lt;/cell&gt;
        &lt;cell&gt;0.59&lt;/cell&gt;
        &lt;cell&gt;0.90&lt;/cell&gt;
        &lt;cell&gt;0.79&lt;/cell&gt;
        &lt;cell&gt;0.66&lt;/cell&gt;
        &lt;cell&gt;0.80&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;GPT-4o&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.92&lt;/cell&gt;
        &lt;cell&gt;0.85&lt;/cell&gt;
        &lt;cell&gt;0.92&lt;/cell&gt;
        &lt;cell&gt;0.75&lt;/cell&gt;
        &lt;cell&gt;0.61&lt;/cell&gt;
        &lt;cell&gt;0.84&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;BAGAL&lt;/cell&gt;
        &lt;cell&gt;14B&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.94&lt;/cell&gt;
        &lt;cell&gt;0.81&lt;/cell&gt;
        &lt;cell&gt;0.88&lt;/cell&gt;
        &lt;cell&gt;0.64&lt;/cell&gt;
        &lt;cell&gt;0.63&lt;/cell&gt;
        &lt;cell&gt;0.82&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MMaDA&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;0.76&lt;/cell&gt;
        &lt;cell&gt;0.61&lt;/cell&gt;
        &lt;cell&gt;0.84&lt;/cell&gt;
        &lt;cell&gt;0.20&lt;/cell&gt;
        &lt;cell&gt;0.37&lt;/cell&gt;
        &lt;cell&gt;0.63&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Lumina-DiMOO&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;1.0&lt;/cell&gt;
        &lt;cell&gt;0.94&lt;/cell&gt;
        &lt;cell&gt;0.85&lt;/cell&gt;
        &lt;cell&gt;0.89&lt;/cell&gt;
        &lt;cell&gt;0.85&lt;/cell&gt;
        &lt;cell&gt;0.76&lt;/cell&gt;
        &lt;cell&gt;0.88&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="8"&gt;
        &lt;cell role="head"&gt;Methods&lt;/cell&gt;
        &lt;cell role="head"&gt;#Params&lt;/cell&gt;
        &lt;cell role="head"&gt;Global&lt;/cell&gt;
        &lt;cell role="head"&gt;Entity&lt;/cell&gt;
        &lt;cell role="head"&gt;Attribute&lt;/cell&gt;
        &lt;cell role="head"&gt;Relation&lt;/cell&gt;
        &lt;cell role="head"&gt;Other&lt;/cell&gt;
        &lt;cell role="head"&gt;Overall ↑&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Gen. Only&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;SDXL&lt;/cell&gt;
        &lt;cell&gt;2.6B&lt;/cell&gt;
        &lt;cell&gt;83.27&lt;/cell&gt;
        &lt;cell&gt;82.43&lt;/cell&gt;
        &lt;cell&gt;80.91&lt;/cell&gt;
        &lt;cell&gt;86.76&lt;/cell&gt;
        &lt;cell&gt;80.41&lt;/cell&gt;
        &lt;cell&gt;74.65&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Emu3-Gen&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;85.21&lt;/cell&gt;
        &lt;cell&gt;86.68&lt;/cell&gt;
        &lt;cell&gt;86.84&lt;/cell&gt;
        &lt;cell&gt;90.22&lt;/cell&gt;
        &lt;cell&gt;83.15&lt;/cell&gt;
        &lt;cell&gt;80.60&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;SD3-Medium&lt;/cell&gt;
        &lt;cell&gt;2B&lt;/cell&gt;
        &lt;cell&gt;87.90&lt;/cell&gt;
        &lt;cell&gt;91.01&lt;/cell&gt;
        &lt;cell&gt;88.83&lt;/cell&gt;
        &lt;cell&gt;80.70&lt;/cell&gt;
        &lt;cell&gt;88.68&lt;/cell&gt;
        &lt;cell&gt;84.08&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;DALL-E 3&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;90.97&lt;/cell&gt;
        &lt;cell&gt;89.61&lt;/cell&gt;
        &lt;cell&gt;88.39&lt;/cell&gt;
        &lt;cell&gt;90.58&lt;/cell&gt;
        &lt;cell&gt;89.83&lt;/cell&gt;
        &lt;cell&gt;83.50&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;FLUX.1 [Dev]&lt;/cell&gt;
        &lt;cell&gt;12B&lt;/cell&gt;
        &lt;cell&gt;74.35&lt;/cell&gt;
        &lt;cell&gt;90.00&lt;/cell&gt;
        &lt;cell&gt;88.96&lt;/cell&gt;
        &lt;cell&gt;90.87&lt;/cell&gt;
        &lt;cell&gt;88.33&lt;/cell&gt;
        &lt;cell&gt;83.84&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;OmniGen&lt;/cell&gt;
        &lt;cell&gt;3.8B&lt;/cell&gt;
        &lt;cell&gt;87.90&lt;/cell&gt;
        &lt;cell&gt;88.97&lt;/cell&gt;
        &lt;cell&gt;88.47&lt;/cell&gt;
        &lt;cell&gt;87.95&lt;/cell&gt;
        &lt;cell&gt;83.56&lt;/cell&gt;
        &lt;cell&gt;81.16&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Lumina-mGPT 2.0&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;88.94&lt;/cell&gt;
        &lt;cell&gt;88.08&lt;/cell&gt;
        &lt;cell&gt;91.70&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;84.30&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Unified&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Show-o&lt;/cell&gt;
        &lt;cell&gt;1.3B&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;67.48&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;TokenFlow-XL&lt;/cell&gt;
        &lt;cell&gt;14B&lt;/cell&gt;
        &lt;cell&gt;78.72&lt;/cell&gt;
        &lt;cell&gt;79.22&lt;/cell&gt;
        &lt;cell&gt;81.29&lt;/cell&gt;
        &lt;cell&gt;85.22&lt;/cell&gt;
        &lt;cell&gt;71.20&lt;/cell&gt;
        &lt;cell&gt;73.38&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Janus-Pro&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;86.90&lt;/cell&gt;
        &lt;cell&gt;88.90&lt;/cell&gt;
        &lt;cell&gt;89.40&lt;/cell&gt;
        &lt;cell&gt;89.32&lt;/cell&gt;
        &lt;cell&gt;89.48&lt;/cell&gt;
        &lt;cell&gt;84.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;GPT-4o&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;88.89&lt;/cell&gt;
        &lt;cell&gt;88.94&lt;/cell&gt;
        &lt;cell&gt;89.84&lt;/cell&gt;
        &lt;cell&gt;92.63&lt;/cell&gt;
        &lt;cell&gt;90.96&lt;/cell&gt;
        &lt;cell&gt;85.15&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;BAGAL&lt;/cell&gt;
        &lt;cell&gt;14B&lt;/cell&gt;
        &lt;cell&gt;88.94&lt;/cell&gt;
        &lt;cell&gt;90.37&lt;/cell&gt;
        &lt;cell&gt;91.29&lt;/cell&gt;
        &lt;cell&gt;90.82&lt;/cell&gt;
        &lt;cell&gt;88.67&lt;/cell&gt;
        &lt;cell&gt;85.07&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;MMaDA&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;77.81&lt;/cell&gt;
        &lt;cell&gt;78.48&lt;/cell&gt;
        &lt;cell&gt;81.74&lt;/cell&gt;
        &lt;cell&gt;84.79&lt;/cell&gt;
        &lt;cell&gt;63.2&lt;/cell&gt;
        &lt;cell&gt;69.97&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Lumina-DiMOO&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;81.46&lt;/cell&gt;
        &lt;cell&gt;92.08&lt;/cell&gt;
        &lt;cell&gt;88.98&lt;/cell&gt;
        &lt;cell&gt;94.31&lt;/cell&gt;
        &lt;cell&gt;82.0&lt;/cell&gt;
        &lt;cell&gt;86.04&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Methods&lt;/cell&gt;
        &lt;cell role="head"&gt;#Params&lt;/cell&gt;
        &lt;cell role="head"&gt;POPE&lt;/cell&gt;
        &lt;cell role="head"&gt;MME-P&lt;/cell&gt;
        &lt;cell role="head"&gt;MMB&lt;/cell&gt;
        &lt;cell role="head"&gt;SEED&lt;/cell&gt;
        &lt;cell role="head"&gt;MMMU&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Under. Only&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;LLaVA&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;76.3&lt;/cell&gt;
        &lt;cell&gt;809.6&lt;/cell&gt;
        &lt;cell&gt;38.7&lt;/cell&gt;
        &lt;cell&gt;33.5&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;LLaVA-v1.5&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;85.9&lt;/cell&gt;
        &lt;cell&gt;1510.7&lt;/cell&gt;
        &lt;cell&gt;64.3&lt;/cell&gt;
        &lt;cell&gt;58.6&lt;/cell&gt;
        &lt;cell&gt;35.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;InstructBLIP&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;36.0&lt;/cell&gt;
        &lt;cell&gt;53.4&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Qwen-VL-Chat&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;1487.5&lt;/cell&gt;
        &lt;cell&gt;60.6&lt;/cell&gt;
        &lt;cell&gt;58.2&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Emu3-Chat&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;85.2&lt;/cell&gt;
        &lt;cell&gt;1244&lt;/cell&gt;
        &lt;cell&gt;58.5&lt;/cell&gt;
        &lt;cell&gt;68.2&lt;/cell&gt;
        &lt;cell&gt;31.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Unified&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Show-o&lt;/cell&gt;
        &lt;cell&gt;1.3B&lt;/cell&gt;
        &lt;cell&gt;80.0&lt;/cell&gt;
        &lt;cell&gt;1097.2&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;26.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;TokenFlow-XL&lt;/cell&gt;
        &lt;cell&gt;13B&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
        &lt;cell&gt;1545.9&lt;/cell&gt;
        &lt;cell&gt;68.9&lt;/cell&gt;
        &lt;cell&gt;68.7&lt;/cell&gt;
        &lt;cell&gt;38.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Janus-Pro&lt;/cell&gt;
        &lt;cell&gt;7B&lt;/cell&gt;
        &lt;cell&gt;87.4&lt;/cell&gt;
        &lt;cell&gt;1567.1&lt;/cell&gt;
        &lt;cell&gt;79.2&lt;/cell&gt;
        &lt;cell&gt;72.1&lt;/cell&gt;
        &lt;cell&gt;41.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;BAGAL&lt;/cell&gt;
        &lt;cell&gt;14B&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;1687&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;55.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MMaDA&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;86.1&lt;/cell&gt;
        &lt;cell&gt;1410.7&lt;/cell&gt;
        &lt;cell&gt;68.5&lt;/cell&gt;
        &lt;cell&gt;64.2&lt;/cell&gt;
        &lt;cell&gt;30.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Lumina-DiMOO&lt;/cell&gt;
        &lt;cell&gt;8B&lt;/cell&gt;
        &lt;cell&gt;87.4&lt;/cell&gt;
        &lt;cell&gt;1534.2&lt;/cell&gt;
        &lt;cell&gt;84.5&lt;/cell&gt;
        &lt;cell&gt;83.1&lt;/cell&gt;
        &lt;cell&gt;58.6&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://synbol.github.io/Lumina-DiMOO/"/></entry><entry><id>https://news.ycombinator.com/item?id=45221274</id><title>The Treasury Is Expanding the Patriot Act to Attack Bitcoin Self Custody</title><updated>2025-09-12T16:10:05.418935+00:00</updated><content>&lt;doc fingerprint="365d59be7c351fbd"&gt;
  &lt;main&gt;
    &lt;p&gt;We shouldn't have to cater to the lowest common denominator.&lt;/p&gt;
    &lt;p&gt;We warned a couple of months ago when the Trump administration's "Crypto Brief" was released that there was some language in the brief that advised the government to expand the Patriot Act to account for digital assets. Well, it looks like FinCen and the Treasury have been working on guidelines and a rough outline is shared above courtesy of The Rage, and they are absolutely horrid.&lt;/p&gt;
    &lt;p&gt;It seems that FinCen and the Treasury are preparing to outlaw the use of CoinJoin, atomic swaps, single address use, and transaction broadcast timing delays. All of which are common best use practices that I would recommend any bitcoiner leveraging self-custody practice. This is an all out attack on financial privacy within bitcoin. If enacted, any user who leverages these tools will be flagged as a suspicious, any attempts to send a UTXO that has touched any of these tools will be rejected by regulated services, and could potentially be sent to prison.&lt;/p&gt;
    &lt;p&gt;This is an absurd affront to common sensibilities and freedom in the digital age. The fact that they want to prevent people from using single addresses for individual UTXOs is patently absurd. Not only is it a massive infringement on privacy, but it makes bitcoin usage less economically efficient and degrades the security of every bitcoiner. Loading up a single address with too many UTXOs degrades the entropy of a public-private key pair and makes it easier to brute force a user's private key.&lt;/p&gt;
    &lt;p&gt;Instead of expanding the Patriot Act, it should be abolished. Instead of trying to eliminate financial privacy for the 99.9% of law abiding citizens in this country, the government should be actively trying to foster an environment in which it can be improved. The proposed solutions will do nothing but put good Americans in harm's way and degrade the security of their savings.&lt;/p&gt;
    &lt;p&gt;We shouldn't have to live in a world where standards cater to the lowest common denominator, in this case criminals, and make things worse off for the overwhelming majority of the population. It's crazy that this even has to be said. The onus is on law enforcement to be so good at their jobs that they are able to prevent crimes from happening before they occur and effectively bring criminals to heel after they commit crimes. It shouldn't be on a neutral protocol and the industry being built on top of it that, when used effectively, provides people with a stable monetary system that respects user privacy and equips them with the tools to receive and spend in a way that provides them with peace of mind.&lt;/p&gt;
    &lt;p&gt;Why should everyone have to suffer because of a few bad apples? Isn't that letting the terrorist win?&lt;/p&gt;
    &lt;p&gt;Mel Mattison revealed a fascinating shift in Bitcoin's market dynamics that challenges conventional crypto wisdom. He pointed out that Bitcoin futures now exhibit lower volatility than platinum futures - a remarkable transformation for an asset once synonymous with wild price swings. The proliferation of ETFs, options, futures, and other traditional financial instruments has fundamentally altered Bitcoin's behavior, creating what Mel calls "volatility suppression." This institutionalization comes with trade-offs: while reducing dramatic downswings, it also caps explosive upside potential.&lt;/p&gt;
    &lt;quote&gt;"Bitcoin is becoming a TradFi security instrument and it's getting TradFi vol." - Mel Mattison&lt;/quote&gt;
    &lt;p&gt;Mel argued that the relationship between volatility and returns means investors must recalibrate expectations. Where 100% annual gains once seemed routine, he now considers 50% returns "massive" for this new era of Bitcoin. This maturation reflects Bitcoin's evolution from speculative experiment to financial infrastructure - less exciting perhaps, but ultimately more sustainable for long-term adoption.&lt;/p&gt;
    &lt;p&gt;Check out the full podcast here for more on China's gold strategy, Fed independence battles, and housing market manipulation plans.&lt;/p&gt;
    &lt;p&gt;New Bill for Strategic Bitcoin Reserve - via X&lt;/p&gt;
    &lt;p&gt;SEC to Host Crypto Roundtable October 17 - via X&lt;/p&gt;
    &lt;p&gt;Research Proposes Bitcoin for Mars Trade Standard - via X&lt;/p&gt;
    &lt;p&gt;Tom Honzik has helped 1,000+ people secure more than 5,000 BTC. Now, TFTC and Unchained are teaming up for a live online session on bitcoin custody.What you’ll learn:&lt;/p&gt;
    &lt;p&gt;Stick around for the AMA to ask Tom Honzik and Marty Bent anything—from privacy considerations to the tradeoffs of different multisig quorums.&lt;/p&gt;
    &lt;p&gt;Created by Carl Dong (former Bitcoin Core contributor), unlike other VPNs, it can’t log your activity by design, delivering verifiable privacy you can trust.&lt;/p&gt;
    &lt;p&gt;Outsmarts internet censorship: works even on the most restrictive Wi-Fi networks where other VPNs fail.&lt;lb/&gt;Pay with bitcoin over Lightning: better privacy and low fees.&lt;lb/&gt;No email required: accounts are generated like bitcoin wallets.&lt;lb/&gt;No trade-offs: browse freely with fast, reliable speeds.&lt;/p&gt;
    &lt;p&gt;Exclusive Deal for TFTC Listeners:&lt;lb/&gt;Sign up at obscura.net and use code TFTC25 for 25% off your first 12 months.&lt;/p&gt;
    &lt;p&gt;Now available on macOS, iOS, and WireGuard, with more platforms coming soon — so your privacy travels with you wherever you go.&lt;/p&gt;
    &lt;p&gt;Ten31, the largest bitcoin-focused investor, has deployed $200M across 30+ companies through three funds. I am a Managing Partner at Ten31 and am very proud of the work we are doing. Learn more at ten31.vc/invest.&lt;/p&gt;
    &lt;p&gt;Final thought...&lt;/p&gt;
    &lt;p&gt;Rest in peace, Charlie Kirk. Pray for humanity and for peace.&lt;/p&gt;
    &lt;p&gt;Download our free browser extension, Opportunity Cost: https://www.opportunitycost.app/ start thinking in SATS today.&lt;/p&gt;
    &lt;p&gt;Get this newsletter sent to your inbox daily: https://www.tftc.io/bitcoin-brief/&lt;/p&gt;
    &lt;p&gt;Subscribe to our YouTube channels and follow us on Nostr and X:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.tftc.io/treasury-iexpanding-patriot-act/"/></entry><entry><id>https://news.ycombinator.com/item?id=45221580</id><title>Chat Control faces blocking minority in the EU</title><updated>2025-09-12T16:10:05.157220+00:00</updated><content>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://twitter.com/TutaPrivacy/status/1966384776883142661"/></entry><entry><id>https://news.ycombinator.com/item?id=45221772</id><title>UK launches Project Octopus, thousands of interceptor drones to Ukraine</title><updated>2025-09-12T16:10:04.700300+00:00</updated><content>&lt;doc fingerprint="a6b0ab9520a1a4d9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;DSEI 2025: UK launches Project Octopus to deliver thousands of interceptor drones to Ukraine&lt;/head&gt;
    &lt;p&gt;UK defence secretary John Healey has outlined new plans to send thousands of interceptor missiles to Ukraine every month, with the Ukrainian-developed UAV to be shared with the UK to help in the fight against Russia.&lt;/p&gt;
    &lt;p&gt;Speaking at DSEI, Healey outlined ‘Project Octopus’, a new partnership between the UK and Ukraine. Under the project, Ukraine would share technology developed for a new interceptor drone that had proved highly effective against Iranian-made, Russian-deployed Shahed one-way attack drones and cost less than 10% of the Russian systems destroyed.&lt;/p&gt;
    &lt;p&gt;According to Healey, the UK would in turn “rapidly develop” this Ukrainian interceptor drone – with the IP and technology shared with the UK – to mass produce it. Thousands of small interceptor drones are planned to be sent to Ukraine every month.&lt;/p&gt;
    &lt;head rend="h4"&gt;Related Articles&lt;/head&gt;
    &lt;p&gt;UK bets big on drone investment and boosts its drone deliveries to Ukraine tenfold&lt;/p&gt;
    &lt;p&gt;“It demonstrates that wartime necessity really is the mother of constant invention,” he said. “It [Project Octopus] means we have access to the best and developing battlefield technology for our own forces”.&lt;/p&gt;
    &lt;p&gt;The agreement followed investment from Ukraine’s largest drone manufacturer, UKRSPECSYSTEMS, which announced that it would invest £200 million (US$271.2 million) into two new UK facilities – the first major investment by a Ukrainian defence company in the UK, according to Healy.&lt;/p&gt;
    &lt;p&gt;At DSEI, other UK-Ukraine drone partnerships reared their heads, as the UK sought to boost drone output for its armed forces. This includes a joint venture between the UK firm Prevail Partners and Ukrainian manufacturer Skyeton for its Raybird UAV. The drone is, as Shephard reported, to be submitted for Project Corvus as a potential bid to replace the Watchkeeper drone.&lt;/p&gt;
    &lt;p&gt;“We know that whenever equipment is in the hands of the war fighter, whoever can get that new technology into their hands fastest has the edge. We’ve proved we can do it with Ukraine through the excellent work of Task Forces Kindred. We now must do it for ourselves in Britain,” he emphasised.&lt;/p&gt;
    &lt;head rend="h4"&gt;Related Equipment in Defence Insight&lt;/head&gt;
    &lt;head rend="h3"&gt;More from DSEI 2025&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;Amazon Project Kuiper offers network-centric approach to sovereignty of space systems (Studio)&lt;/head&gt;
        &lt;p&gt;Shephard's Alix Valenti interviewed Project Kuiper's Don Brown at DSEI 2025, discussing the company's innovative approach to sovereignty of space communications systems, which focuses on being able to control the network rather than ownership of satellite constellations.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;Amazon Project Kuiper emphasises user-friendly solutions for multi-domain connectivity (Studio)&lt;/head&gt;
        &lt;p&gt;At DSEI 2025, Shephard's Alix Valenti spoke to Project Kuiper's Rich Pang about the importance of enabling seamless communication between allied forces such as NATO members in challenging operational environments.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;DSEI 2025: ST Engineering kicks off export drive for new Bronco 3&lt;/head&gt;
        &lt;p&gt;The original Bronco was developed to meet the requirements of the Singapore Army and subsequently built in large numbers and many configurations.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;DSEI 2025: ST Engineering and ARIS discuss partnership to offer Bronco all-terrain carrier to Italian Army.&lt;/head&gt;
        &lt;p&gt;On the show floor at DSEI 2025, representatives from ST Engineering and ARIS, and retired Italian general Ivan Caruso outlined the background to the teaming agreement with land warfare expert Christopher F Foss.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;Amazon Project Kuiper teams up with GRC to offer governments unprecedented capabilities (Studio)&lt;/head&gt;
        &lt;p&gt;At DSEI 2025, Amazon Project Kuiper's Don Brown and GRC's Steve Slater talked to Shephard's Alix Valenti about how their partnership can offer unique capabilities in defence SATCOM to government customers, with a focus on assurance, security and choice.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h2"&gt;DSEI 2025: Raytheon UK CEO highlights RTX skills, innovation and UK footprint&lt;/head&gt;
        &lt;p&gt;At DSEI 2025, James Gray, Managing Director and CEO of Raytheon UK (part of RTX), outlines the company’s century-long presence in the UK and its evolving role across defence, aerospace, cyber, and training domains.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.shephardmedia.com/news/air-warfare/dsei-2025-uk-launches-project-octopus-to-deliver-thousands-of-interceptor-drones-to-ukraine/"/></entry><entry><id>https://news.ycombinator.com/item?id=45221938</id><title>Justice Department Announces Actions to Combat North Korean Remote IT Workers</title><updated>2025-09-12T16:10:04.479215+00:00</updated><content>&lt;doc fingerprint="6e25c25fb73803e4"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Related Content&lt;/head&gt;
    &lt;p&gt;Press Release&lt;/p&gt;
    &lt;p&gt;Note: This press release has been updated to reflect new information regarding the guilty plea of one defendant in the District of Massachusetts.&lt;/p&gt;
    &lt;p&gt;The Justice Department announced today coordinated actions against the Democratic People’s Republic of North Korea (DPRK) government’s schemes to fund its regime through remote information technology (IT) work for U.S. companies. These actions include two indictments, an information and related plea agreement, an arrest, searches of 29 known or suspected “laptop farms” across 16 states, and the seizure of 29 financial accounts used to launder illicit funds and 21 fraudulent websites.&lt;/p&gt;
    &lt;p&gt;According to court documents, the schemes involve North Korean individuals fraudulently obtaining employment with U.S. companies as remote IT workers, using stolen and fake identities. The North Korean actors were assisted by individuals in the United States, China, United Arab Emirates, and Taiwan, and successfully obtained employment with more than 100 U.S. companies.&lt;/p&gt;
    &lt;p&gt;As alleged in court documents, certain U.S.-based individuals enabled one of the schemes by creating front companies and fraudulent websites to promote the bona fides of the remote IT workers, and hosted laptop farms where the remote North Korean IT workers could remote access into U.S. victim company-provided laptop computers. Once employed, the North Korean IT workers received regular salary payments, and they gained access to, and in some cases stole, sensitive employer information such as export controlled U.S. military technology and virtual currency. In another scheme, North Korean IT workers used false or fraudulently obtained identities to gain employment with an Atlanta, Georgia-based blockchain research and development company and stole virtual currency worth approximately over $900,000.&lt;/p&gt;
    &lt;p&gt;“These schemes target and steal from U.S. companies and are designed to evade sanctions and fund the North Korean regime’s illicit programs, including its weapons programs,” said Assistant Attorney General John A. Eisenberg of the Department’s National Security Division. “The Justice Department, along with our law enforcement, private sector, and international partners, will persistently pursue and dismantle these cyber-enabled revenue generation networks.”&lt;/p&gt;
    &lt;p&gt;“North Korean IT workers defraud American companies and steal the identities of private citizens, all in support of the North Korean regime,” said Assistant Director Brett Leatherman of FBI’s Cyber Division. “That is why the FBI and our partners continue to work together to disrupt infrastructure, seize revenue, indict overseas IT workers, and arrest their enablers in the United States. Let the actions announced today serve as a warning: if you host laptop farms for the benefit of North Korean actors, law enforcement will be waiting for you.”&lt;/p&gt;
    &lt;p&gt;“North Korea remains intent on funding its weapons programs by defrauding U.S. companies and exploiting American victims of identity theft, but the FBI is equally intent on disrupting this massive campaign and bringing its perpetrators to justice,” said Assistant Director Roman Rozhavsky of the FBI Counterintelligence Division. “North Korean IT workers posing as U.S. citizens fraudulently obtained employment with American businesses so they could funnel hundreds of millions of dollars to North Korea’s authoritarian regime. The FBI will do everything in our power to defend the homeland and protect Americans from being victimized by the North Korean government, and we ask all U.S. companies that employ remote workers to remain vigilant to this sophisticated threat.”&lt;/p&gt;
    &lt;p&gt;Zhenxing Wang, et al. Indictment, Seizure Warrants, and Arrest – District of Massachusetts&lt;/p&gt;
    &lt;p&gt;Today, the United States Attorney’s Office for the District of Massachusetts and the National Security Division announced the arrest of U.S. national Zhenxing “Danny” Wang of New Jersey pursuant to a five-count indictment. The indictment describes a multi-year fraud scheme by Wang and his co-conspirators to obtain remote IT work with U.S. companies that generated more than $5 million in revenue. The indictment also charges Chinese nationals Jing Bin Huang (靖斌 黄), Baoyu Zhou (周宝玉), Tong Yuze (佟雨泽), Yongzhe Xu (徐勇哲 andيونجزهي أكسو), Ziyou Yuan (زيو) and Zhenbang Zhou (周震邦), and Taiwanese nationals Mengting Liu (劉 孟婷) and Enchia Liu (刘恩) for their roles in the scheme. A second U.S. national, Kejia “Tony” Wang of New Jersey, has agreed to plead guilty for his role in the scheme and was charged separately in an information unsealed today.&lt;/p&gt;
    &lt;p&gt;“The threat posed by DPRK operatives is both real and immediate. Thousands of North Korean cyber operatives have been trained and deployed by the regime to blend into the global digital workforce and systematically target U.S. companies,” said U.S. Attorney Leah B. Foley for the District of Massachusetts. “We will continue to work relentlessly to protect U.S. businesses and ensure they are not inadvertently fueling the DPRK’s unlawful and dangerous ambitions.”&lt;/p&gt;
    &lt;p&gt;According to the indictment, from approximately 2021 until October 2024, the defendants and other co-conspirators compromised the identities of more than 80 U.S. persons to obtain remote jobs at more than 100 U.S. companies, including many Fortune 500 companies, and caused U.S. victim companies to incur legal fees, computer network remediation costs, and other damages and losses of at least $3 million. Overseas IT workers were assisted by Kejia Wang, Zhenxing Wang, and at least four other identified U.S. facilitators. Kejia Wang, for example, communicated with overseas co-conspirators and IT workers, and traveled to Shenyang and Dandong, China, including in 2023, to meet with them about the scheme. To deceive U.S. companies into believing the IT workers were located in the United States, Kejia Wang, Zhenxing Wang, and the other U.S. facilitators received and/or hosted laptops belonging to U.S. companies at their residences, and enabled overseas IT workers to access the laptops remotely by, among other things, connecting the laptops to hardware devices designed to allow for remote access (referred to as keyboard-video-mouse or “KVM” switches).&lt;/p&gt;
    &lt;p&gt;Kejia Wang and Zhenxing Wang also created shell companies with corresponding websites and financial accounts, including Hopana Tech LLC, Tony WKJ LLC, and Independent Lab LLC, to make it appear as though the overseas IT workers were affiliated with legitimate U.S. businesses. Kejia Wang and Zhenxing Wang established these and other financial accounts to receive money from victimized U.S. companies, much of which was subsequently transferred to overseas co‑conspirators. In exchange for their services, Kejia Wang, Zhenxing Wang, and the four other U.S. facilitators received a total of at least $696,000 from the IT workers.&lt;/p&gt;
    &lt;p&gt;IT workers employed under this scheme also gained access to sensitive employer data and source code, including International Traffic in Arms Regulations (ITAR) data from a California-based defense contractor that develops artificial intelligence-powered equipment and technologies. Specifically, between on or about Jan. 19, 2024, and on or about April 2, 2024, an overseas co-conspirator remotely accessed without authorization the company’s laptop and computer files containing technical data and other information. The stolen data included information marked as being controlled under the ITAR.&lt;/p&gt;
    &lt;p&gt;Simultaneously with today’s announcement, the FBI and Defense Criminal Investigative Service (DCIS) seized 17 web domains used in furtherance of the charged scheme and further seized 29 financial accounts, holding tens of thousands of dollars in funds, used to launder revenue for the North Korean regime through the remote IT work scheme.&lt;/p&gt;
    &lt;p&gt;Previously, in October 2024, as part of this investigation, federal law enforcement executed searches at eight locations across three states that resulted in the recovery of more than 70 laptops and remote access devices, such as KVMs. Simultaneously with that action, the FBI seized four web domains associated with Kejia Wang’s and Zhenxing Wang’s shell companies used to facilitate North Korean IT work.&lt;/p&gt;
    &lt;p&gt;The FBI Las Vegas Field Office, DCIS San Diego Resident Agency, and Homeland Security Investigations San Diego Field Office are investigating the case.&lt;/p&gt;
    &lt;p&gt;Assistant U.S. Attorney Jason Casey for the District of Massachusetts and Trial Attorney Gregory J. Nicosia, Jr. of the National Security Division’s National Security Cyber Section are prosecuting the case, with significant assistance from Legal Assistants Daniel Boucher and Margaret Coppes. Valuable assistance was also provided by Mark A. Murphy of the National Security Division’s Counterintelligence and Export Control Section and the U.S. Attorneys’ Offices for the District of New Jersey, Eastern District of New York, and Southern District of California.&lt;/p&gt;
    &lt;p&gt;Kim Kwang Jin et al. Indictment – Northern District of Georgia&lt;/p&gt;
    &lt;p&gt;Today, the Northern District of Georgia unsealed a five-count wire fraud and money laundering indictment charging four North Korean nationals, Kim Kwang Jin (김관진), Kang Tae Bok (강태복), Jong Pong Ju (정봉주) and Chang Nam Il (창남일), with a scheme to steal virtual currency from two companies, valued at over $900,000 at the time of the thefts, and to launder proceeds of those thefts. The defendants remain at large and wanted by the FBI.&lt;/p&gt;
    &lt;p&gt;“The defendants used fake and stolen personal identities to conceal their North Korean nationality, pose as remote IT workers, and exploit their victims’ trust to steal hundreds of thousands of dollars,” said U.S. Attorney Theodore S. Hertzberg for the Northern District of Georgia. “This indictment highlights the unique threat North Korea poses to companies that hire remote IT workers and underscores our resolve to prosecute any actor, in the United States or abroad, who steals from Georgia businesses.”&lt;/p&gt;
    &lt;p&gt;According to the indictment, the defendants traveled to the United Arab Emirates on North Korean travel documents and worked as a co-located team. In approximately December 2020 and May 2021, respectively, Kim Kwang Jin (using victim P.S.’s stolen identity) and Jong Pong Ju (using the alias “Bryan Cho”) were hired by a blockchain research and development company headquartered in Atlanta, Georgia, and a virtual token company based in Serbia. Both defendants concealed their North Korean identities from their employers by providing false identification documents containing a mix of stolen and fraudulent identity information. Neither company would have hired Kim Kwang Jin and Jong Pong Ju had they known that they were North Korean citizens. Later, on a recommendation from Jong Pong Ju, the Serbian company hired “Peter Xiao,” who in fact was Chang Nam Il.&lt;/p&gt;
    &lt;p&gt;After gaining their employers’ trust, Kim Kwang Jin and Jong Pong Ju were assigned projects that provided them access to their employers’ virtual currency assets. In February 2022, Jong Pong Ju used that access to steal virtual currency worth approximately $175,000 at the time of the theft, sending it to a virtual currency address he controlled. In March 2022, Kim Kwang Jin stole virtual currency worth approximately $740,000 at the time of theft by modifying the source code of two of his employer’s smart contracts, then sending it to a virtual currency address he controlled.&lt;/p&gt;
    &lt;p&gt;To launder the funds after the thefts, Kim Kwang Jin and Jong Pong Ju “mixed” the stolen funds using the virtual currency mixer Tornado Cash and then transferred the funds to virtual currency exchange accounts controlled by defendants Kang Tae Bok and Chang Nam Il but held in the name of aliases. These accounts were opened using fraudulent Malaysian identification documents.&lt;/p&gt;
    &lt;p&gt;The FBI Atlanta Field Office is investigating the case.&lt;/p&gt;
    &lt;p&gt;Assistant U.S. Attorneys Samir Kaushal and Alex Sistla for the Northern District of Georgia and Trial Attorney Jacques Singer-Emery of the National Security Division’s National Security Cyber Section are prosecuting the case.&lt;/p&gt;
    &lt;p&gt;21 Searches of Known or Suspected U.S.-based Laptop Farms – Multi-District&lt;/p&gt;
    &lt;p&gt;Between June 10 and June 17, 2025, the FBI executed searches of 21 premises across 14 states hosting known and suspected laptop farms. These actions, coordinated by the FBI Denver Field Office, related to investigations of North Korean remote IT worker schemes being conducted by the U.S. Attorneys’ Offices of the District of Colorado, Eastern District of Missouri, and Northern District of Texas. In total, the FBI seized approximately 137 laptops.&lt;/p&gt;
    &lt;p&gt;Valuable assistance was provided by the U.S. Attorney’s Offices for the District of Connecticut, the Eastern District of Michigan, the Eastern District of Wisconsin, the Middle District of Florida, the Northern District of Georgia, the Northern District of Illinois, the Northern District of Indiana, the District of Oregon, the Southern District of Florida, the Southern District of Ohio, the Western District of New York, and the Western District of Pennsylvania.&lt;/p&gt;
    &lt;p&gt;***&lt;/p&gt;
    &lt;p&gt;The Department’s actions to combat these schemes are the latest in a series of law enforcement actions under a joint National Security Division and FBI Cyber and Counterintelligence Divisions effort, the DPRK RevGen: Domestic Enabler Initiative. This effort prioritizes targeting and disrupting the DPRK’s illicit revenue generation schemes and its U.S.-based enablers. The Department previously announced other actions pursuant to the initiative, including in January 2025 and prior, as well as the filing of a civil forfeiture complaint in early June 2025 for over $7.74 million tied to an illegal employment scheme.&lt;/p&gt;
    &lt;p&gt;As the FBI has described in Public Service Announcements published in May 2024 and January 2025, North Korean remote IT workers posing as legitimate remote IT workers have committed data extortion and exfiltrated the proprietary and sensitive data from U.S. companies. DPRK IT worker schemes typically involve the use of stolen identities, alias emails, social media, online cross-border payment platforms, and online job site accounts, as well as false websites, proxy computers, and witting and unwitting third parties located in the U.S. and elsewhere.&lt;/p&gt;
    &lt;p&gt;Other public advisories about the threats, red flag indicators, and potential mitigation measures for these schemes include a May 2022 advisory released by the FBI, Department of the Treasury, and Department of State; a July 2023 advisory from the Office of the Director of National Intelligence; and guidance issued in October 2023 by the United States and the Republic of Korea (South Korea). As described the May 2022 advisory, North Korean IT workers have been known individually to earn up to $300,000 annually, generating hundreds of millions of dollars collectively each year, on behalf of designated entities, such as the North Korean Ministry of Defense and others directly involved in the DPRK’s weapons programs.&lt;/p&gt;
    &lt;p&gt;The U.S. Department of State has offered potential rewards for up to $5 million in support of international efforts to disrupt the DPRK’s illicit financial activities, including for cybercrimes, money laundering, and sanctions evasion.&lt;/p&gt;
    &lt;p&gt;The details in the above-described court documents are merely allegations. All defendants are presumed innocent until proven guilty beyond a reasonable doubt in a court of law.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.justice.gov/opa/pr/justice-department-announces-coordinated-nationwide-actions-combat-north-korean-remote"/></entry><entry><id>https://news.ycombinator.com/item?id=45221996</id><title>Over 100 ships have sailed with fake insurance from the Norwegian Ro Marine</title><updated>2025-09-12T16:10:03.727952+00:00</updated><content>&lt;doc fingerprint="a25c819ab4077144"&gt;
  &lt;main&gt;
    &lt;p&gt;This ship is transporting Russian missiles.&lt;/p&gt;
    &lt;p&gt;The ship purchased fake insurance from the Norwegian company Ro Marine.&lt;/p&gt;
    &lt;p&gt;The company acted in Putin’s interests.&lt;/p&gt;
    &lt;p&gt;The scale shocks experts.&lt;/p&gt;
    &lt;head rend="h1"&gt;He made a fool of the world&lt;/head&gt;
    &lt;head rend="h1"&gt;Over 100 ships have sailed without legitimate insurance from the Norwegian company Ro Marine&lt;/head&gt;
    &lt;p&gt;All large ships must have insurance, and Ro Marine has provided this in a big way.&lt;/p&gt;
    &lt;p&gt;The Norwegian company did not have permission to sell insurance but did it anyway — to clients worldwide.&lt;/p&gt;
    &lt;p&gt;In March, we reported how select ships used false papers to deceive inspectors in NATO countries.&lt;/p&gt;
    &lt;p&gt;Now, NRK and Dossier Center can reveal how extensive and global the fraud was: over 100 ships have sailed with illegitimate insurance documents from Ro Marine.&lt;/p&gt;
    &lt;p&gt;“It's very serious and unusual that such a serious fraud happens with the help of a Norwegian company. At worst, it could undermine the trust in the Norwegian maritime industry,” says Thomas Angell Bergh from the Norwegian Maritime Authority.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;head rend="h4"&gt;Thomas Angell Bergh&lt;/head&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Most of the fake insurance papers were for ships transporting goods out of Russia, mainly oil.&lt;/p&gt;
    &lt;p&gt;NRK has contacted dozens of Ro Marine’s clients. Only a few were willing to speak with us.&lt;/p&gt;
    &lt;p&gt;One of the customers says he was scammed by Ro Marine because he believed the insurance policies he purchased were valid.&lt;/p&gt;
    &lt;p&gt;Another says that "everyone" knows Ro Marine is fake, but that the ships need Western insurance documents. Such documents can make it easier to sail freely, without Western countries interfering in the transport.&lt;/p&gt;
    &lt;p&gt;This signature appears time and again on documents issued by Ro Marine.&lt;/p&gt;
    &lt;p&gt;The search for the owner of the signature led us to a Russian website, where you can download many different signatures. The one used by Ro Marine belongs to a "doctor," says the website.&lt;/p&gt;
    &lt;head rend="h2"&gt;Norwegian-Russian scam&lt;/head&gt;
    &lt;p&gt;Behind the global hoax is this man.&lt;/p&gt;
    &lt;p&gt;His name is Andrey Mochalin, a Russian citizen and resident of St. Petersburg. Mochalin has experience working for a reputable Norwegian insurance company.&lt;/p&gt;
    &lt;p&gt;In March, he, two Norwegians and a Bulgarian were charged with forging documents and operating an insurance business without a permit. Mochalin is also being investigated for violating international sanctions.&lt;/p&gt;
    &lt;p&gt;Through an attorney, the Norwegians say they do not understand the charges (see their full response in the fact box later in the article). The Bulgarian tells NRK he is innocent.&lt;/p&gt;
    &lt;p&gt;For several months, NRK and Dossier Center have tried unsuccessfully to get in touch with Mochalin. At the same time, we investigated Ro Marine's operations. What we found surprised experts.&lt;/p&gt;
    &lt;head rend="h2"&gt;“Among the worst of the worst”&lt;/head&gt;
    &lt;p&gt;Sanctions expert David Tannenbaum is shocked by the the scale of it. He knows how far Russia is willing to go to protect its oil exports, which are crucial for funding Putin’s illegal war in Ukraine.&lt;/p&gt;
    &lt;p&gt;Sanctions against Russia can make it difficult for tankers carrying Russian oil to obtain insurance that is approved in the West. But they are finding ways around it.&lt;/p&gt;
    &lt;p&gt;This is where Ro Marine enters the picture.&lt;/p&gt;
    &lt;p&gt;“Seems like Ro Marine is popular with sanctions evaders. You don't have this roster by accident,” says David Tannenbaum from Deep Blue Intelligence. The American company specializes in detecting sanctions evasion.&lt;/p&gt;
    &lt;p&gt;For Tannenbaum, it appears that Ro Marine primarily serves the shadow fleet or ships engaged in illegal activities or sanctions evasion.&lt;/p&gt;
    &lt;p&gt;“Is Ro Marine the worst of the worst? I think they're definitely in contention,” he both asks and answers.&lt;/p&gt;
    &lt;p&gt;Our documentation shows, for example, that Gatik, known as one of the largest players in the Russian shadow fleet, appears to have placed almost all of their ships with Ro Marine.&lt;/p&gt;
    &lt;p&gt;In addition, six ships linked to the Russian gas giant Novatek have had fake insurance from the Norwegian company. All six have sailed along the Norwegian coast towards the gas facility Arctic LNG2 in Russia, which is sanctioned by the USA. The ships are sanctioned by the EU.&lt;/p&gt;
    &lt;p&gt;Ships linked to the sanctioned Iranian oil industry and Iranian military have also been customers of Ro Marine.&lt;/p&gt;
    &lt;head rend="h2"&gt;Dangerous cargo from Russia&lt;/head&gt;
    &lt;p&gt;Among the cargo ships that have purchased invalid insurance from Ro Marine, we found "Agattu". Here, the vessel is sailing between Denmark and Sweden with explosives in the cargo, bound for Algeria.&lt;/p&gt;
    &lt;p&gt;Three tonnes of missile weapons were transported from St. Petersburg in Russia, according to Russian port records.&lt;/p&gt;
    &lt;p&gt;The ship joins the ranks of Ro Marine customers who have contributed to Russia's export revenues by transporting goods from Russian ports. This does not apply to all customers, but the vast majority, according to research by NRK and Dossier Center.&lt;/p&gt;
    &lt;head rend="h2"&gt;Provoked a NATO country&lt;/head&gt;
    &lt;p&gt;Not long ago, it was difficult to imagine that ordinary shipping in Europe could lead to military confrontation. Today, the situation is different. European countries may intervene in oil shipments that violate Western sanctions, which are intended to oppose Putin's bloody war in Ukraine. Russia has its countermeasures.&lt;/p&gt;
    &lt;p&gt;An illustrative example happened to a Ro Marine customer in mid-May: The oil tanker "Blint".&lt;/p&gt;
    &lt;p&gt;The Estonian navy suspected the ship was sailing without a flag—a clear violation of international regulations. The navy radioed the vessel, but according to Estonian authorities, the captain refused to cooperate.&lt;/p&gt;
    &lt;p&gt;Suddenly, a Russian fighter jet came whizzing over them, violating the NATO country’s airspace. Instead of stopping, the sanctioned tanker sailed on to the Russian oil port of Primorsk.&lt;/p&gt;
    &lt;p&gt;This video of the incident is filmed from inside the ship.&lt;/p&gt;
    &lt;p&gt;Like many other tankers transporting Russian oil, "Blint" has had fake insurance from Ro Marine, NRK can document.&lt;/p&gt;
    &lt;p&gt;In this way, Ro Marine has acted in line with the interests of the Russian authorities.&lt;/p&gt;
    &lt;p&gt;Russia's president, October 2023:&lt;/p&gt;
    &lt;p&gt;“Thanks to the actions of companies and authorities, the tanker fleet has grown, new mechanisms for payment, insurance and reinsurance of our cargo have been created.”&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;head rend="h4"&gt;Vladimir Putin&lt;/head&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Researcher Åse Gilje Østensen at the Norwegian Naval Academy tells that “sometimes, entities act in the Russian interest on their own initiative. Sometimes, Putin or other central figures around him have signaled that certain initiatives are welcome. In such cases, actors will often seek to please the regime.”&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;head rend="h4"&gt;Åse Gilje Østensen&lt;/head&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;“Russia is an authoritarian regime that can force civilian actors to assist the regime. Other times, state bodies may be more directly involved. What is the case regarding Ro Marine is difficult to know.”&lt;lb/&gt; The Russian Embassy in Norway does not answer NRK's questions about Ro Marine's operations because the company is Norwegian and refers us to the Norwegian authorities. They also do not respond to whether Ro Marine has acted in accordance with the interests of Russian authorities, or any other statements and findings in this case.&lt;/p&gt;
    &lt;p&gt;The embassy does however choose to point out that the sanctions against the "shadow fleet" are contrary to international law.&lt;/p&gt;
    &lt;head rend="h2"&gt;Approved by the largest flag state&lt;/head&gt;
    &lt;p&gt;For several years, the Norwegian company operated without permission and with fake documents without any authorities noticing — neither in Norway nor abroad.&lt;/p&gt;
    &lt;p&gt;The earliest objectionable activity was in 2021, according to NRK’s investigation.&lt;/p&gt;
    &lt;p&gt;At that time, Ro Marine applied to be recognized as an insurance company by the world's largest flag state, Panama, despite missing the necessary approval from Norwegian authorities.&lt;/p&gt;
    &lt;p&gt;Ro Marine sent the flag state a forged reference, which was originally given to a completely different company, sources tell NRK. With this reference, Ro Marine was recognized by the flag state of Panama in December 2021.&lt;/p&gt;
    &lt;p&gt;In the time that followed, several flag states were fooled by Ro Marine, including by forged documents that looked like they were from the Norwegian Financial Supervisory Authority.&lt;/p&gt;
    &lt;p&gt;The illegal activity continued unencumbered until NRK alerted the flag states.&lt;/p&gt;
    &lt;head rend="h2"&gt;Russian owner worked many years for a Norwegian company&lt;/head&gt;
    &lt;p&gt;The Russian owner of Ro Marine, Andrey Mochalin, has gone underground. Mochalin has not responded to any of the numerous inquiries from NRK and Dossier Center.&lt;/p&gt;
    &lt;p&gt;For over ten years, he worked for a legitimate Norwegian insurance company. Most of the time, he worked from St. Petersburg.&lt;/p&gt;
    &lt;p&gt;Occasionally, he visited his employer's office in Oslo. Here he is pictured with his former colleagues.&lt;/p&gt;
    &lt;p&gt;At this time, two of his Norwegian managers also owned another company that offered insurance. This company later became Ro Marine.&lt;/p&gt;
    &lt;p&gt;A few weeks after Russia's war against Ukraine began in 2022, Ro Marine passed from Norwegian to Russian ownership.&lt;/p&gt;
    &lt;p&gt;This is when Mochalin bought Ro Marine from the company of the two Norwegians for almost two million NOK.&lt;/p&gt;
    &lt;p&gt;These two Norwegians, along with Andrey Mochalin and a Bulgarian citizen, are charged with forging documents and conducting illegal insurance business.&lt;/p&gt;
    &lt;p&gt;Out of respect for the ongoing investigation, the Norwegians did not want to be interviewed by NRK, according to their lawyer.&lt;/p&gt;
    &lt;head rend="h2"&gt;Money trail in Russia&lt;/head&gt;
    &lt;p&gt;Alongside the Norwegian company Ro Marine, Andrey Mochalin runs a company in St. Petersburg with direct links to Ro Marine.&lt;/p&gt;
    &lt;p&gt;NRK and Dossier Center have obtained access to bank documents for his Russian company.&lt;/p&gt;
    &lt;p&gt;The money transfers are many, and some stand out.&lt;/p&gt;
    &lt;p&gt;Last year, there were 36 payments totaling approximately five million NOK that we can connect to Ro Marine.&lt;/p&gt;
    &lt;p&gt;The bank transfers were marked with the name of the ship and the policy number.&lt;/p&gt;
    &lt;p&gt;The number corresponds to insurance documents issued by Ro Marine.&lt;/p&gt;
    &lt;p&gt;The company’s account also shows salary payments to Mochalin.&lt;/p&gt;
    &lt;head rend="h2"&gt;Those charged&lt;/head&gt;
    &lt;p&gt;Here’s what we can share about the Russian Andrey Mochalin and the others charged in the case (in parentheses is the time period they had official roles in Ro Marine):&lt;/p&gt;
    &lt;p&gt;A. Mochalin (2022-2025):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Sole owner of Ro Marine during the period when the company's illegal insurance activities were most widespread, according to our documentation.&lt;/item&gt;
      &lt;item&gt;Majority owner of the Russian company that received payments worth millions of NOK last year marked for Ro Marine.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Norwegian 1 (2016-2023):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Registered as co-owner in the Russian company that last year received payments worth millions of NOK marked for Ro Marine.&lt;/item&gt;
      &lt;item&gt;Owner and board chairman in 2021 when someone sent a forged reference on behalf of Ro Marine to Panama. At the time the company lacked a permit to sell insurance.&lt;/item&gt;
      &lt;item&gt;In 2024, a year after he left the board, contributed to ensuring Ro Marine’s continued operations by securing a new board member: the charged Bulgarian.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Norwegian 2 (2017-2023):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Owner and managing director in 2021 when someone sent a forged reference on behalf of Ro Marine to Panama. At the time the company lacked a permit to sell insurance.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Bulgarian (2024-2025):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Car mechanic without any experience in marine insurance.&lt;/item&gt;
      &lt;item&gt;Tenant of Norwegian 1 for years.&lt;/item&gt;
      &lt;item&gt;Board member in Ro Marine for over half a year, up to March 2025.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;After the Norwegians left the board in 2023, the Norwegian company had a problem. With a Russian as the only board member, the company was in violation of the Companies Act of Norway, which requires at least one board member to be from an EEA country. Since Bulgaria is a member of the EEA, the Bulgarian could solve the issue.&lt;/p&gt;
    &lt;p&gt;According to the Bulgarian, his Norwegian landlord arranged the board position to help him financially.&lt;/p&gt;
    &lt;p&gt;However, he never received the money he was promised and left the board because he realized something was wrong, the Bulgarian says. He does not understand the police's suspicion towards him.&lt;/p&gt;
    &lt;p&gt;“I had no idea what they were doing. I have nothing to hide,” says the Bulgarian to NRK. He has been contacted by the police and says he is fully cooperating with them.&lt;/p&gt;
    &lt;head rend="h2"&gt;The consequences of uncovering the scam&lt;/head&gt;
    &lt;p&gt;After NRK's revelation in March, several flag states have issued stop orders to ships that used Ro Marine.&lt;/p&gt;
    &lt;p&gt;Panama alone has banned 16 ships from sailing because the ships have not shown new, real insurance within the deadline they were given.&lt;/p&gt;
    &lt;p&gt;The UK has sanctioned Ro Marine. Ro Marines’s website has been taken down. In July, the Oslo District Court forcibly dissolved the company for breach of accounting obligations, because Ro Marine had not submitted annual accounts for 2023.&lt;/p&gt;
    &lt;p&gt;However, the Russian company in St. Petersburg, which received payments worth millions of NOK marked for Ro Marine, is still active.&lt;/p&gt;
    &lt;p&gt;One month after NRK's revelation in March, another ship in the Russian shadow fleet presented a fake insurance certificate from Ro Marine. Inspectors at the oil port of Primorsk were presented with a document "signed in Oslo."&lt;/p&gt;
    &lt;p&gt;The expiration date of the fake insurance?&lt;/p&gt;
    &lt;p&gt;April next year.&lt;/p&gt;
    &lt;p&gt;NRK has contacted the companies that operate the mentioned ships "Agattu" and "Blint", with no response. We have not been able to contact Gatik. Novatek has not responded to our questions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Contact us&lt;/head&gt;
    &lt;p&gt;Hi!&lt;/p&gt;
    &lt;p&gt;NRK made this article in cooperation with investigative journalists in Dossier Center.&lt;/p&gt;
    &lt;p&gt;Earlier, NRK, together with Danwatch, uncovered how forged documents were used to trick NATO countries in controls of shadow fleet ships.&lt;/p&gt;
    &lt;p&gt;In collaboration with Follow The Money and investigative journalists in eleven other editorial teams, NRK has mapped out in The Shadow Fleet Secrets how much of Putin's shadow fleet originates in Europe and in particular in Norway.&lt;/p&gt;
    &lt;p&gt;Do you have tips regarding the Ro Marine case or the shadow fleet? Or do you have information on other issues we should investigate further?&lt;/p&gt;
    &lt;p&gt;Send us an email or contact us securely via Signal or WhatsApp at +47 920 26 425.&lt;lb/&gt; Editor: Jenny Duesund.&lt;lb/&gt; Head of investigative journalism NRK West: Anniken Hjertholm.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nrk.no/vestland/xl/over-100-ships-have-sailed-without-legitimate-insurance-from-the-norwegian-company-ro-marine-1.17565216"/></entry><entry><id>https://news.ycombinator.com/item?id=45222369</id><title>3D Modeling with Paper</title><updated>2025-09-12T16:10:03.503000+00:00</updated><content>&lt;doc fingerprint="bd5add43313c429e"&gt;
  &lt;main&gt;
    &lt;p&gt;August 31, 2025&lt;/p&gt;
    &lt;head rend="h1"&gt;3D Modeling with Paper&lt;/head&gt;
    &lt;p&gt;Over the past several years, I've enjoyed the hobby of paper modeling (or papercraft), the art of creating 3D models from cut and glued parts from paper sheets. This hobby is a superset of origami, in that it allows for cutting and gluing, as well as for multiple sheets of paper for a single model. The alleviation of these constraints means that papercraft allows for more complex models that are easier to assemble.&lt;/p&gt;
    &lt;p&gt;Over many years, I've built models designed by others as well as designed my own. In this post, I want to share everything I've learned along the way, covering the entire process from design to assembly.&lt;/p&gt;
    &lt;p&gt;I love this hobby for three reasons:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;It is extremely accessible. There is no fancy hardware or software involved. As we'll see, the core tools are paper, scissors, and glue; everything else is an addon to make the experience better. All software tools can be free. Accidentally messed up during assembly and need a replacement part? Just print out another page. The entire creation of a model can be done in the ballpark of a few cents.&lt;/item&gt;
      &lt;item&gt;It is equally technical and creative. As we'll see, many of the problems faced in papercraft require an engineering-like approach and a willingness to experiment and iterate on designs. While it may appear outwardly like a craft project, the end-to-end process involves constraints and optimizing within them.&lt;/item&gt;
      &lt;item&gt;There's no limits on what you can make. What you decide to build is limited by your patience and imagination. Theoretically, nearly any object can be represented as a paper model.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Let's dive in. My most recent model is a papercraft plane inspired by the SR-71 Blackbird, a reconnaissance plane that to this day holds many records for being one of the fastest aircrafts ever. It's now one of most iconic planes ever designed and an engineering masterpiece. The program was ultimately retired in 1999.&lt;/p&gt;
    &lt;p&gt;We're going to walk through the full model design and assembly process, while referencing specific examples I encountered during creating this SR-71.&lt;/p&gt;
    &lt;head rend="h2"&gt;Constraints#&lt;/head&gt;
    &lt;p&gt;Let's set some constraints for how we're allowed to model our creation. These are self-imposed limitations that fit my preferred-style for model design:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;All parts in the assembled model must be made of paper.&lt;/item&gt;
      &lt;item&gt;Each part must be a single, solid color. The parts must not use any printed textures or designs.&lt;/item&gt;
      &lt;item&gt;The model must be represented as a simple polyhedron. There may be no curvatures, holes, two-dimensional surfaces, or surface-to-surface contact. If the figure we're trying to capture has any of these features, we must find a way to approximate it using only flat faces. The object must be manifold (an edge is only shared by 2 faces).&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Why constraints?#&lt;/head&gt;
    &lt;p&gt;It may feel weird to impose constraints on an art. However, I find that these constraints encourage a better designed model that can be assembled easily and predictably, including by others.&lt;/p&gt;
    &lt;p&gt;Using features like curvatures, printing with textures, etc. are shortcuts. For example, printing textures helps fill in details that aren't captured inherently by the model; curvatures and 2d surfaces are flimsy and introduce variances in how a model can be assembled. Simply polyhedral designs with single color parts ensure that the 3D form itself captures the object being depicted, and can be assembled in a structurally sound, predictable way.&lt;/p&gt;
    &lt;head rend="h2"&gt;Goals#&lt;/head&gt;
    &lt;p&gt;In addition to constraints, we also have some goals that we're optimzing for. These goals will be considered in each step of our design process.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Ease of assembly: By far the most important goal, our model should be easy to put together. Given the nature of paper and glue, a model that is difficult to assemble will almost certainly look bad. A model can have a well-designed topology, but still be difficult to assemble based on the parts design we put together.&lt;/item&gt;
      &lt;item&gt;Aesthetic appeal: This is an art, after all. The model we design should be aesthetically pleasing and resemble the object of interest.&lt;/item&gt;
      &lt;item&gt;Minimal consumption of resources: We should aim to minimize waste and use our materials efficiently.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As in engineering, we have to consider trade-offs between these goals, and optimize for these goals within our constraints.&lt;/p&gt;
    &lt;head rend="h2"&gt;Steps#&lt;/head&gt;
    &lt;p&gt;The process of designing a paper model is iterative. Each iteration consists of the following steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Mesh modeling - using software to create a 3D polyhedron mesh of our desired form&lt;/item&gt;
      &lt;item&gt;Mesh unfolding - unfolding the mesh into a 2D layout of parts&lt;/item&gt;
      &lt;item&gt;Assembly - putting the parts together to create the final model&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The remainder of this article will be walking through each step in detail. The discussion of each step will be centered around the goals and constraints declared from above.&lt;/p&gt;
    &lt;head rend="h2"&gt;Mesh Modeling#&lt;/head&gt;
    &lt;p&gt;Related goals: Ease of assembly, aesthetic appeal&lt;/p&gt;
    &lt;p&gt;In this phase, we design the mesh for our model. We aim to capture the essence of an object in a way that can feasibly be built with paper. Depending on how you approach this, this can easily be the most complicated step.&lt;/p&gt;
    &lt;p&gt;What do I mean by "feasibly built with paper"? Our mesh is a collection of polygons that represent a 3D object. The closeness of that representation is largely determined by how many polygons we use. We could use many really small polygons to closely match the subtle curves of our plane, but this would be hard to assemble in reality. Alternatively, we could simplifiy our representation down to a triangular pyramid. This would be trivially easy to assemble, but it wouldn't look a lot like our plane.&lt;/p&gt;
    &lt;p&gt;We can now see that our goals of ease of assembly and aesthetic appeal are at odds. Imagine that we have a continuum, where on the left we have a triangular pyramid (the simplest possible polyhedron) and on the right we have a mesh of the SR-71 with an arbitrarily high number (millions) of polygons.&lt;/p&gt;
    &lt;p&gt;Generally, an "easy" to assemble model will have somewhere around a few hundred polygons. Thus, our ideal model exists somewhere on the far left of this spectrum.&lt;/p&gt;
    &lt;p&gt;The challenge here is what I call "allocation of resolution" - we have a finite number of polygons to distribute across the features of our object. Certain features will naturally require more polygons to be accurately captured than others. For example, curved features require more polygons than flat features - in this model, the cylindrical engines will require more detail, than say, the flat wings.&lt;/p&gt;
    &lt;p&gt;In addition to the number of polygons and their concentrations, the arrangement of the polygons themselves matters - this is the topology of the mesh. Most discourse on 3D mesh topology is related to shading and animation. For our purposes, we're considered with ease of assembly. Certain topologies are easier to assemble and more structurally sound. Generally, here's some positive topological qualities for papercraft:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Symmetries: a good mesh design is symetrical when possible. Symmetrical shapes are intuitive and easier to reason about when assembling.&lt;/item&gt;
      &lt;item&gt;No narrow shapes: really narrow shapes are hard to cut out, hard to fold, and hard to glue. Avoid them at all costs.&lt;/item&gt;
      &lt;item&gt;Use quads: quad faces have an aesthetic appeal to them.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If all of this is sounding hard, we've got some options, in increasing order of difficulty:&lt;/p&gt;
    &lt;head rend="h3"&gt;Easy: Use an existing mesh#&lt;/head&gt;
    &lt;p&gt;The easiest way past this step is to find an existing mesh. There's a whole genre of 3D modeling called "low-poly" that you can find with a quick search on Thingiverse or Printables. These are usually designed for video games or 3D printing, but can be taken up for papercraft.&lt;/p&gt;
    &lt;head rend="h3"&gt;Medium: Converting an existing mesh#&lt;/head&gt;
    &lt;p&gt;Sometimes, you can find a high-resolution mesh of your desired object, but not a low-poly one. In this case, there are tools available to reduce the polygon count while preserving the overall shape. This is called "mesh simplification" or "mesh decimation."&lt;/p&gt;
    &lt;p&gt;This Instructable goes over the process of doing this with Meshlab, but there's many other software alternatives out there.&lt;/p&gt;
    &lt;p&gt;The pitfall of this approach is that automatic mesh decimation typically results in some nasty topologies, and there's not a lot you can do to control the output. To get around this, we could add an additional refinement step where we take the raw decimated mesh output and "clean it up" using a mesh editor software.&lt;/p&gt;
    &lt;p&gt;As an example, let's try this with a SR-71 mesh on Thingiverse. The original mesh has more than 1.2 million faces, and we're going to try decimating down to ~1,000. Here's what we get from Meshlab:&lt;/p&gt;
    &lt;p&gt;In this case, the output is not usable - it's wildly asymetric and is full of self-intersections. Refining this topology would take just as long (if not longer) as creating a model from scratch.&lt;/p&gt;
    &lt;head rend="h3"&gt;Hard: Creating your own mesh#&lt;/head&gt;
    &lt;p&gt;The most difficult option is to create your own mesh from scratch. This option gives you full control over the design, and is what I chose for the SR-71 model.&lt;/p&gt;
    &lt;p&gt;My software of choice for this is Blender. Blender has a steep learning curve, but the type of mesh design we're doing for this project doesn't begin to scratch the surface of its full capabilities. I highly recommend this low-poly tutorial if you've never used Blender before and need somewhere to start. Two things I found very handy were the mirror modifier to enforce symmetry, and the 3D Print Toolbox to auto-cleanup the mesh and check for manifoldness.&lt;/p&gt;
    &lt;p&gt;This process is very tedious. My advice here is: simplify your mesh to the point where you feel uncomfortable. Recall that we're largely optimizing for ease of assembly. When modeling, it's very tempting to capture finer details, but fine details have costs (small parts, hard to glue regions, etc.) that are not worth it during the assembly phase. Scrutinize every feature, and zoom out once in a while. When you zoom out, your omissions won't feel as weird.&lt;/p&gt;
    &lt;p&gt;After many days, here's the initial mesh I created. It contains 732 triangles. Note the symmetry along the y-axis.&lt;/p&gt;
    &lt;head rend="h2"&gt;Mesh Unfolding#&lt;/head&gt;
    &lt;p&gt;Related goals: Ease of assembly, minimal consumption of resources&lt;/p&gt;
    &lt;p&gt;Once we have a mesh, we have to convert it into a 2D template of parts that can be printed and assembled. This process is called unfolding. Each of the faces of our mesh are grouped into parts, and the arrangement of our parts is a layout, or template.&lt;/p&gt;
    &lt;p&gt;To do this, we're going to turn to software again. The most popular unfolding tool (and my favorite) is Pepakura Designer. Pepakura is not free (at the time of this writing, it's a one time $70 purchase) and it only runs on Windows. There's also Unfolder for Mac, which is $30. If you can't use either of these, Blender can save the day again with its free Paper Model plugin.&lt;/p&gt;
    &lt;p&gt;I believe that the unfolding step is one that does not get as much attention as it deserves. There is a noticable difference between a good template and a bad one. A good template has parts that make intuitive sense, with logical groupings and clear flow. The faces themselves are grouped into parts that are easy to cut out and handle. All of this equates to a better building experience, which means a better looking model.&lt;/p&gt;
    &lt;p&gt;Part of unfolding is also deciding the scale of your model. You can make your model as big or small as you want, but again, ease of assembly should be top of mind when deciding. A model that's too small will end up with parts that are hard to cut out and fold. Bigger models are easier to assemble, but you're limited to the point where the faces of your model must fit on a page.&lt;/p&gt;
    &lt;p&gt;I ended up making this model 25 inches long. With the original SR-71 being about 107 feet long, this puts our model at around a 1:50 ratio.&lt;/p&gt;
    &lt;head rend="h3"&gt;Creating many parts#&lt;/head&gt;
    &lt;p&gt;Let's start off with the creation of parts. In most unfolding software, the software will auto-unfold for you, and from there you can regroup faces into whatever parts you want. Here's Pepakura's auto unfold:&lt;/p&gt;
    &lt;p&gt;The parts it generated are pretty complicated, so we have some work to do.&lt;/p&gt;
    &lt;p&gt;If you have a mesh with faces, you can have anywhere from 1 (all the faces in a single part) to total parts (each part is a single face). We want our model to be easy to assemble, and neither of these extremes are easy.&lt;/p&gt;
    &lt;p&gt;Rather than trying to fix the number of parts and going from there, I recommend creating parts that are logical. Identify features that can be captured in a single part, and go from there. For example, in the SR-71, each engine intake spike makes sense as a single part. So does the nose cone.&lt;/p&gt;
    &lt;p&gt;If your mesh has an axis of symmetry, then your parts have symmetrical pairings as well. The same feature on either side of the axis should be represented with a mirrored part. In the SR-71, the entire plane is symmetrical on the vertical axis, so all parts across this axis are mirrored. This is good because once someone builds one side, they can more easily reason about the other side.&lt;/p&gt;
    &lt;p&gt;I ended up dividing this model into 42 parts. These parts were carefully divided in such a way that I felt would make them easier to assemble. If you look at any part in particular, chances are it'll have a symmetric counterpart.&lt;/p&gt;
    &lt;p&gt;They're arranged pretty haphazardly right now, but we'll cleanup this up in the next step.&lt;/p&gt;
    &lt;head rend="h3"&gt;Arranging the parts#&lt;/head&gt;
    &lt;p&gt;Again, most software will automatically arrange the parts for you as part of unfolding. Here's the 14 page arrangement Pepakura decided for the parts I created:&lt;/p&gt;
    &lt;p&gt;I highlighted all the parts on the first two pages so you can see where the are on the finished model. Notice that they're scattered throughout different sections. That's why I typically don't like auto-arrangement - they're designed to minimize paper usage, but they often result in a less intuitive assembly process. You can't look at any particular page and loosely know where its parts will go.&lt;/p&gt;
    &lt;p&gt;A good part layout reads like a story. Parts are arranged in a logical order, with related parts grouped together. I like to arrange mine left to right, top to bottom on a page. Here's my layout, with the first two pages highlighted.&lt;/p&gt;
    &lt;p&gt;All the parts that are near each other in the layout are also near each other in the final assembly. In this case, I even was able to reduce the page count down to 12 from the starting 14.&lt;/p&gt;
    &lt;head rend="h3"&gt;Flap structure#&lt;/head&gt;
    &lt;p&gt;Flaps, or tabs, are the appendages on each part that allow for gluing parts together. Each flap has a singular counterpart edge that it's glued to - this is known as an edge/flap pair. Most software will auto-assign a shared number between an edge and its flap to make identify pairs easy during the assembly process.&lt;/p&gt;
    &lt;p&gt;For an edge/flap pair, most unfolding software will allow us to swap the flap across parts. Doing this strategically is critical for creating an easy to assemble model, and also has implications for the structural integrity of the final build.&lt;/p&gt;
    &lt;p&gt;For example, consider the two example parts shown above. These two parts that meet at two shared edges, so these parts have two edge/flap pairs between them. We could arrange the flaps so that one part has both of them:&lt;/p&gt;
    &lt;p&gt;We could also interlace the flaps, so each part has one flap on each side.&lt;/p&gt;
    &lt;p&gt;Interlacing flaps between parts can create a more stable structure, since there's only one way for the parts to meet. If two flaps are on the same side, they can over-extend when glued to the edge. That being said, same-side flaps can be easier to work with, especially when reaching the closing stages of a model.&lt;/p&gt;
    &lt;p&gt;In general, I like to using interlaced flaps wherever possible to create an overall stronger model, and use same-side flaps selectively.&lt;/p&gt;
    &lt;p&gt;Once we have an arrangement we like, we can export our layout as a PDF.&lt;/p&gt;
    &lt;head rend="h2"&gt;Assembly#&lt;/head&gt;
    &lt;p&gt;With our layout PDF ready, we can now print it and move on to assembly. We'll finally get to see our design come to life.&lt;/p&gt;
    &lt;head rend="h3"&gt;Materials and Tools#&lt;/head&gt;
    &lt;p&gt;For our materials, we'll need:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;65lb (176 ) cardstock: This is the ideal paper weight for creating sturdy models, while still being thin/flexible enough to pass through a normal printer and be easy to fold.&lt;/item&gt;
      &lt;item&gt;Adhesive. My recommended adhesive is tacky glue: it's strong, dries clear, but is forgiving enough to allow for repositioning during assembly. Specifically, I use Aleene's Original Tacky Glue. I've also had past success with a glue stick.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We'll also need some tools, which I've listed these in order of importance. The ones with asterisks are essential. Everything else is a nice-to-have.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Printer*: You'll need access to a printer to print the template on the cardstock. Laser jet printers are great because the prints don't smudge.&lt;/item&gt;
      &lt;item&gt;Cutting tools*: You'll need a pair of scissors or a craft knife to cut out the parts. Use sharp tools for clean cuts - it makes a difference.&lt;/item&gt;
      &lt;item&gt;Ruler*: Cutting/scoring perfectly straight lines is a must. Steel rulers are great for their consistent edge, and they don't catch against your tools. That being said, I used a clear plastic ruler for this model. Being able to see through the ruler helps with alignment.&lt;/item&gt;
      &lt;item&gt;Scoring tool*: This will help you prepare a part for folding. You can use a bone folder or scoring wheel. I use an embossing tool I found at a dollar store, but before that, I used a ballpoint pen than ran out of ink. Anything with a precise (but not too sharp) tip will do.&lt;/item&gt;
      &lt;item&gt;Toothpicks: I use toothpicks to spread blobs of glue into thin layers and get into tight spaces.&lt;/item&gt;
      &lt;item&gt;Assembly surface: A cutting mat or piece of cardboard will protect your work surface and give you a stable surface to cut/score your parts.&lt;/item&gt;
      &lt;item&gt;Tweezers: Tweezers are helpful for handling small parts and getting into tight spaces, especially while holding parts together as glue dries.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you want to get fancy, you can also purchase an automatic cutting machine, like a Cricut or Silhouette. These machines can precisely cut/score your parts from cardstock. Getting the template into their software takes some extra effort, but it results in the best quality parts. I did not use a machine for this project.&lt;/p&gt;
    &lt;p&gt;To match the real SR-71, I printed my template on black cardstock. Darker cardstocks are harder to work with because of the low contrast between the ink and the paper itself. If you're new to the hobby, I would recommend starting with a lighter color.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assembly phases#&lt;/head&gt;
    &lt;p&gt;The assembly of a model has 4 steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Cutting: Cutting the parts out from the paper with your cutting tool of choice. Scissors are quicker, but the combination of ruler and craft knife results in cleaner cuts.&lt;/item&gt;
      &lt;item&gt;Scoring: Running a scoring tool over fold lines to get cleaner folds. This may be tempting to skip, but I cannot emphasize the importance of this step enough. Scoring is especially important when dealing with thicker paper.&lt;/item&gt;
      &lt;item&gt;Folding: Folding the parts in prep for gluing. There's only two types of folds: mountain folds and valley folds.&lt;/item&gt;
      &lt;item&gt;Gluing: Gluing the parts together.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;How you decide to batch these steps is up to you. For example, you could cut all the parts out at once, then score all of them, etc. This approach is effective because you can develop a rhythm by doing each phase only once, so you're not constantly switching between tools; the downside is that you only get to start assembly after a pretty lengthy process. Alternatively, you can do it per part: cut one part out, score it, fold it, and secure it to the assembly. Here, the pros and cons are flipped: you get to see the model come together quicker, but there's a lot of context switching between phases. I've tried both of these approaches, and find that the latter results in a non-negligible increase in the assembly time of the model.&lt;/p&gt;
    &lt;p&gt;To strike a balance, the approach I took for this model was performing the phases at the granularity of sections (engines, wings, fuselage, etc.) of the model. This approach has the added final step of assembling all the standalone sections together into the final model.&lt;/p&gt;
    &lt;p&gt;Here's some pictures I took during the assembly process. In total, assembly took 6-8 hours.&lt;/p&gt;
    &lt;head rend="h3"&gt;Tips#&lt;/head&gt;
    &lt;p&gt;Use little glue: When gluing parts together, apply as little glue as possible. Using too much glue will result in spillover when the flaps/edges are put together, and this spillover is hard to wipe away from a porous surface like paper. Too much glue can even result in subtle paper warping. In the recommended tools, I suggested a toothpick. I apply a small bead of glue to a flap and use the toothpick to spread it into a thin film. This prevents any spillage and keeps the model clean.&lt;/p&gt;
    &lt;p&gt;Start in complex areas: As you progress further in gluing parts together, the degrees of freedom of your model will reduce. This is why I recommend starting with more complicated areas of your model where you'll need those degrees of freedom. In this model, this meant starting with precise features, like the engine inlet spikes or the vertical stabilizers.&lt;/p&gt;
    &lt;p&gt;Finish in hidden areas: This goes hand in hand with the tip above. As you reach to the end of your model, gluing the final parts together can be very hard, which means the final edges may come out a bit sloppy. Why does this happen? Any minor imperfections we made throughout the assembly process result in stresses in our model that will be felt at the end. Gluing the last part may be challenging because it'll feel misaligned, and it has the added challenge of attempting to close a 3D object from the outside. That's why I always recommend choosing an assembly order that results in the last parts being glued in an area that is out of sight. For the SR-71, that happens to be the underside of the fuselage.&lt;/p&gt;
    &lt;head rend="h3"&gt;Final Model#&lt;/head&gt;
    &lt;p&gt;Here's the final model, displayed on a stand (also made from paper):&lt;/p&gt;
    &lt;head rend="h2"&gt;Iteration#&lt;/head&gt;
    &lt;p&gt;No matter how much you scrutinize the modeling and layout phases, you will inevitably find areas for improvement as you assemble. In the case of the SR-71, I spotted a few minor assymetries in part tabs, and more importantly, an opportunity to reduce face count by simplifying the topology of the bottom of the plane and the nose cone.&lt;/p&gt;
    &lt;p&gt;I took my mesh back into Blender, and was able to get the triangle count down to 636, which is almost a full 100 faces fewer than the original mesh.&lt;/p&gt;
    &lt;p&gt;Below, you can see the old mesh (left) next to the new mesh (right). It's hard to tell the difference, yet the new one has almost 15% fewer faces.&lt;/p&gt;
    &lt;p&gt;A faster way to iterate is to render the model rather than physically building it. This allows you to quickly identify and fix visual issues without going through the hours of assembly. Here's some renders (in Blender) of the final iteration:&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion#&lt;/head&gt;
    &lt;p&gt;In total, the full cycle of designing the mesh, creating the parts layout, assembly, and subsequent refinement iterations occurred over the course of a few months. The process is long, but the results are well worth it.&lt;/p&gt;
    &lt;p&gt;If you're interested in making this model yourself, you can download the PDFs for the first iteration of the model below. I've included a template for the stand as well.&lt;/p&gt;
    &lt;p&gt;Hope you enjoy!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.arvinpoddar.com/blog/3d-modeling-with-paper"/></entry><entry><id>https://news.ycombinator.com/item?id=45222695</id><title>Many Hard LeetCode Problems Are Easy Constraint Problems</title><updated>2025-09-12T16:10:02.229378+00:00</updated><content>&lt;doc fingerprint="cd8a25908f10ff1f"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Many Hard Leetcode Problems are Easy Constraint Problems&lt;/head&gt;
    &lt;head rend="h2"&gt;Use the right tool for the job.&lt;/head&gt;
    &lt;p&gt;In my first interview out of college I was asked the change counter problem:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a set of coin denominations, find the minimum number of coins required to make change for a given number. IE for USA coinage and 37 cents, the minimum number is four (quarter, dime, 2 pennies).&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I implemented the simple greedy algorithm and immediately fell into the trap of the question: the greedy algorithm only works for "well-behaved" denominations. If the coin values were &lt;code&gt;[10, 9, 1]&lt;/code&gt;, then making 37 cents would take 10 coins in the greedy algorithm but only 4 coins optimally (&lt;code&gt;10+9+9+9&lt;/code&gt;). The "smart" answer is to use a dynamic programming algorithm, which I didn't know how to do. So I failed the interview.&lt;/p&gt;
    &lt;p&gt;But you only need dynamic programming if you're writing your own algorithm. It's really easy if you throw it into a constraint solver like MiniZinc and call it a day.&lt;/p&gt;
    &lt;code&gt;int: total;
array[int] of int: values = [10, 9, 1];
array[index_set(values)] of var 0..: coins;

constraint sum (c in index_set(coins)) (coins[c] * values[c]) == total;
solve minimize sum(coins);
&lt;/code&gt;
    &lt;p&gt;You can try this online here. It'll give you a prompt to put in &lt;code&gt;total&lt;/code&gt; and then give you successively-better solutions:&lt;/p&gt;
    &lt;code&gt;coins = [0, 0, 37];
----------
coins = [0, 1, 28];
----------
coins = [0, 2, 19];
----------
coins = [0, 3, 10];
----------
coins = [0, 4, 1];
----------
coins = [1, 3, 0];
----------
&lt;/code&gt;
    &lt;p&gt;Lots of similar interview questions are this kind of mathematical optimization problem, where we have to find the maximum or minimum of a function corresponding to constraints. They're hard in programming languages because programming languages are too low-level. They are also exactly the problems that constraint solvers were designed to solve. Hard leetcode problems are easy constraint problems.1 Here I'm using MiniZinc, but you could just as easily use Z3 or OR-Tools or whatever your favorite generalized solver is.&lt;/p&gt;
    &lt;head rend="h3"&gt;More examples&lt;/head&gt;
    &lt;p&gt;This was a question in a different interview (which I thankfully passed):&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a list of stock prices through the day, find maximum profit you can get by buying one stock and selling one stock later.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It's easy to do in O(n^2) time, or if you are clever, you can do it in O(n). Or you could be not clever at all and just write it as a constraint problem:&lt;/p&gt;
    &lt;code&gt;array[int] of int: prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
var int: buy;
var int: sell;
var int: profit = prices[sell] - prices[buy];

constraint sell &amp;gt; buy;
constraint profit &amp;gt; 0;
solve maximize profit;
&lt;/code&gt;
    &lt;p&gt;Reminder, link to trying it online here. While working at that job, one interview question we tested out was:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a list, determine if three numbers in that list can be added or subtracted to give 0?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is a satisfaction problem, not a constraint problem: we don't need the "best answer", any answer will do. We eventually decided against it for being too tricky for the engineers we were targeting. But it's not tricky in a solver;&lt;/p&gt;
    &lt;code&gt;include "globals.mzn";
array[int] of int: numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
array[index_set(numbers)] of var {0, -1, 1}: choices;

constraint sum(n in index_set(numbers)) (numbers[n] * choices[n]) = 0;
constraint count(choices, -1) + count(choices, 1) = 3;
solve satisfy;
&lt;/code&gt;
    &lt;p&gt;Okay, one last one, a problem I saw last year at Chipy AlgoSIG. Basically they pick some leetcode problems and we all do them. I failed to solve this one:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The "proper" solution is a tricky thing involving tracking lots of bookkeeping states, which you can completely bypass by expressing it as constraints:&lt;/p&gt;
    &lt;code&gt;array[int] of int: numbers = [2,1,5,6,2,3];

var 1..length(numbers): x; 
var 1..length(numbers): dx;
var 1..: y;

constraint x + dx &amp;lt;= length(numbers);
constraint forall (i in x..(x+dx)) (y &amp;lt;= numbers[i]);

var int: area = (dx+1)*y;
solve maximize area;

output ["(\(x)-&amp;gt;\(x+dx))*\(y) = \(area)"]
&lt;/code&gt;
    &lt;p&gt;There's even a way to automatically visualize the solution (using &lt;code&gt;vis_geost_2d&lt;/code&gt;), but I didn't feel like figuring it out in time for the newsletter.&lt;/p&gt;
    &lt;head rend="h3"&gt;Is this better?&lt;/head&gt;
    &lt;p&gt;Now if I actually brought these questions to an interview the interviewee could ruin my day by asking "what's the runtime complexity?" Constraint solvers runtimes are unpredictable and almost always than an ideal bespoke algorithm because they are more expressive, in what I refer to as the capability/tractability tradeoff. But even so, they'll do way better than a bad bespoke algorithm, and I'm not experienced enough in handwriting algorithms to consistently beat a solver.&lt;/p&gt;
    &lt;p&gt;The real advantage of solvers, though, is how well they handle new constraints. Take the stock picking problem above. I can write an O(n²) algorithm in a few minutes and the O(n) algorithm if you give me some time to think. Now change the problem to&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Maximize the profit by buying and selling up to&lt;/p&gt;&lt;code&gt;max_sales&lt;/code&gt;stocks, but you can only buy or sell one stock at a given time and you can only hold up to&lt;code&gt;max_hold&lt;/code&gt;stocks at a time?&lt;/quote&gt;
    &lt;p&gt;That's a way harder problem to write even an inefficient algorithm for! While the constraint problem is only a tiny bit more complicated:&lt;/p&gt;
    &lt;code&gt;include "globals.mzn";
int: max_sales = 3;
int: max_hold = 2;
array[int] of int: prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
array [1..max_sales] of var int: buy;
array [1..max_sales] of var int: sell;
array [index_set(prices)] of var 0..max_hold: stocks_held;
var int: profit = sum(s in 1..max_sales) (prices[sell[s]] - prices[buy[s]]);

constraint forall (s in 1..max_sales) (sell[s] &amp;gt; buy[s]);
constraint profit &amp;gt; 0;

constraint forall(i in index_set(prices)) (stocks_held[i] = (count(s in 1..max_sales) (buy[s] &amp;lt;= i) - count(s in 1..max_sales) (sell[s] &amp;lt;= i)));
constraint alldifferent(buy ++ sell);
solve maximize profit;

output ["buy at \(buy)\n", "sell at \(sell)\n", "for \(profit)"];
&lt;/code&gt;
    &lt;p&gt;Most constraint solving examples online are puzzles, like Sudoku or "SEND + MORE = MONEY". Solving leetcode problems would be a more interesting demonstration. And you get more interesting opportunities to teach optimizations, like symmetry breaking.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Because my dad will email me if I don't explain this: "leetcode" is slang for "tricky algorithmic interview questions that have little-to-no relevance in the actual job you're interviewing for." It's from leetcode.com. ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you're reading this on the web, you can subscribe here. Updates are once a week. My main website is here.&lt;/p&gt;
    &lt;p&gt;My new book, Logic for Programmers, is now in early access! Get it here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/"/></entry><entry><id>https://news.ycombinator.com/item?id=45222772</id><title>Crates.io Phishing Attempt</title><updated>2025-09-12T16:10:01.963782+00:00</updated><content>&lt;doc fingerprint="7840121a5e4d0a9f"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;crates.io phishing attempt&lt;/head&gt;
    &lt;p&gt;Thanks to my sponsors: me, Arjen Laarhoven, Twan Walpot, zed, xales, teor, Max Heaton, Kai Kaufman, Marco Carmosino, Morgan Rosenkranz, psentee, Philipp Angerer, Michał Bartoszkiewicz, Jake Demarest-Mays, Noel, Pete Bevin, Marcus Griep, Jim, Mateusz Wykurz, Jonas Platte and 279 more&lt;/p&gt;
    &lt;p&gt;Earlier this week, an npm supply chain attack.&lt;/p&gt;
    &lt;p&gt;It’s turn for crates.io, the main public repository for Rust crates (packages).&lt;/p&gt;
    &lt;p&gt;The phishing e-mail looks like this:&lt;/p&gt;
    &lt;p&gt;And it leads to a GitHub login page that looks like this:&lt;/p&gt;
    &lt;p&gt;Several maintainers received it — the issue is being discussed on GitHub.&lt;/p&gt;
    &lt;p&gt;The crates.io team has acknowledged the attack and said they’d see if they can do something about it.&lt;/p&gt;
    &lt;p&gt;No compromised packages have been identified as of yet (Sep 12, 14:10 UTC).&lt;/p&gt;
    &lt;p&gt;Important links:&lt;/p&gt;
    &lt;p&gt;Here's another article just for you:&lt;/p&gt;
    &lt;head rend="h2"&gt;A dynamic linker murder mystery&lt;/head&gt;
    &lt;p&gt;I write a ton of articles about rust. And in those articles, the main focus is about writing Rust code that compiles. Once it compiles, well, we’re basically in the clear! Especially if it compiles to a single executable, that’s made up entirely of Rust code.&lt;/p&gt;
    &lt;p&gt;That works great for short tutorials, or one-off explorations.&lt;/p&gt;
    &lt;p&gt;Unfortunately, “in the real world”, our code often has to share the stage with other code. And Rust is great at that. Compiling Go code to a static library, for example, is relatively finnicky. It insists on being built with GCC (and no other compiler), and linked with GNU ld (and no other linker).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://fasterthanli.me/articles/crates-io-phishing-attempt"/></entry><entry><id>https://news.ycombinator.com/item?id=45222777</id><title>Active phishing campaign targeting crates.io users</title><updated>2025-09-12T16:10:01.887623+00:00</updated><content>&lt;doc fingerprint="8c032c1b4b48ca60"&gt;
  &lt;main&gt;
    &lt;p&gt;We received multiple reports of a phishing campaign targeting crates.io users (from the &lt;code&gt;rustfoundation.dev&lt;/code&gt; domain name), mentioning a compromise of our
infrastructure and asking users to authenticate to limit damage to their crates.&lt;/p&gt;
    &lt;p&gt;These emails are malicious and come from a domain name not controlled by the Rust Foundation (nor the Rust Project), seemingly with the purpose of stealing your GitHub credentials. We have no evidence of a compromise of the crates.io infrastructure.&lt;/p&gt;
    &lt;p&gt;We are taking steps to get the domain name taken down and to monitor for suspicious activity on crates.io. Do not follow any links in these emails if you receive them, and mark them as phishing with your email provider.&lt;/p&gt;
    &lt;p&gt;If you have any further questions please reach out to security@rust-lang.org and help@crates.io.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/"/></entry><entry><id>https://news.ycombinator.com/item?id=45222799</id><title>Oq: Terminal OpenAPI Spec Viewer</title><updated>2025-09-12T16:10:01.498280+00:00</updated><content>&lt;doc fingerprint="3599bed529cf6d98"&gt;
  &lt;main&gt;
    &lt;code&gt;oq openapi.yaml
# or
cat openapi.yaml | oq
# or
curl https://api.example.com/openapi.json | oq&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;↑/↓ or k/j - Navigate up/down through items&lt;/item&gt;
      &lt;item&gt;Tab - Switch between Endpoints and Components views&lt;/item&gt;
      &lt;item&gt;Enter or Space - Toggle fold/unfold for endpoint and component details&lt;/item&gt;
      &lt;item&gt;q or Ctrl+C - Quit the application&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;&lt;code&gt;oq&lt;/code&gt; supports both modern major OpenAPI specification versions:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OpenAPI 3.0.x&lt;/item&gt;
      &lt;item&gt;OpenAPI 3.1.x&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Both JSON and YAML formats are supported.&lt;/p&gt;
    &lt;code&gt;git clone git@github.com:plutov/oq.git
cd oq
go build -o oq .&lt;/code&gt;
    &lt;p&gt;MIT License - see LICENSE file for details.&lt;/p&gt;
    &lt;p&gt;Contributions are welcome! Please feel free to submit issues and pull requests.&lt;/p&gt;
    &lt;p&gt;When contributing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Ensure tests pass: &lt;code&gt;go test -v&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Test with both OpenAPI 3.0 and 3.1 examples&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/plutov/oq"/></entry><entry><id>https://news.ycombinator.com/item?id=45222993</id><title>Doom-ada: Doom Emacs Ada language module with syntax, LSP and Alire support</title><updated>2025-09-12T16:10:01.022512+00:00</updated><content>&lt;doc fingerprint="72e18e3db801abaa"&gt;
  &lt;main&gt;
    &lt;p&gt;This is a Doom Emacs &lt;code&gt;:lang ada&lt;/code&gt; module providing:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Tree-sitter highlighting via &lt;code&gt;ada-ts-mode&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;LSP support with &lt;code&gt;ada_language_server&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Autocomplete (company-capf)&lt;/item&gt;
      &lt;item&gt;Alire integration (&lt;code&gt;alr build&lt;/code&gt;,&lt;code&gt;alr run&lt;/code&gt;,&lt;code&gt;alr clean&lt;/code&gt;)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Clone into your Doom modules folder:&lt;/p&gt;
    &lt;code&gt;git clone https://github.com/tomekw/doom-ada ~/.doom.d/modules/lang/ada&lt;/code&gt;
    &lt;p&gt;Enable in &lt;code&gt;~/.doom.d/init.el&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;:lang
ada&lt;/code&gt;
    &lt;p&gt;Sync Doom:&lt;/p&gt;
    &lt;code&gt;doom sync&lt;/code&gt;
    &lt;p&gt;Restart Emacs.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;SPC m b&lt;/code&gt;→ build with&lt;code&gt;alr build&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SPC m r&lt;/code&gt;→ run with&lt;code&gt;alr run&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SPC m c&lt;/code&gt;→ clean with&lt;code&gt;alr clean&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Errors are parsed into the compilation buffer, and &lt;code&gt;eglot&lt;/code&gt; provides inline diagnostics and completions.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/tomekw/doom-ada"/></entry><entry><id>https://news.ycombinator.com/item?id=45223053</id><title>Show HN: DWS OS, a Plan 9 Inspired Web "OS"</title><updated>2025-09-12T16:10:00.726144+00:00</updated><link href="https://dws.rip"/></entry><entry><id>https://news.ycombinator.com/item?id=45223239</id><title>A Beginner's Guide to Extending Emacs</title><updated>2025-09-12T16:10:00.440048+00:00</updated><content>&lt;doc fingerprint="8c00b9736825d3b5"&gt;
  &lt;main&gt;&lt;p&gt;This post isn’t about the virtues of some editors versus others: that's already been written by somebody else (and it’s really good) – if you want to know why I use emacs, I suggest reading that instead.&lt;/p&gt;&lt;p&gt; This post will help you understand why "extensibility" and "introspectability" are such prominent emacs features even without an emacs lisp background. Bridging the gap from spacemacs or doom emacs to a bespoke configuration wasn't easy for me because I didn’t know how to learn emacs, so I'm going to stumble through one of my own use cases to demonstrate how this process goes if you're peeking in from outside the emacs ecosystem, &lt;del&gt;horrified&lt;/del&gt; curious about how this all works. &lt;/p&gt;&lt;p&gt;Let's talk about reStructuredText.&lt;/p&gt;&lt;head rend="h4"&gt;Table of Contents&lt;/head&gt;&lt;head rend="h4"&gt;reStructuredText&lt;/head&gt;&lt;p&gt; At my day job I write our user documentation using Sphinx. It expects my stilted prose in &lt;code&gt;.rst&lt;/code&gt; format, which is kind of like Markdown if you squint.
&lt;/p&gt;&lt;p&gt; I do an awful lot of cross-referencing between references (or &lt;code&gt;refs&lt;/code&gt;) to link concepts across the documentation.
You define a reference like this:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used for directives and roles.&lt;/item&gt;&lt;item&gt;Font used for all other defining constructs.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;.. _code_example:&lt;/code&gt;&lt;code&gt;.. code::&lt;/code&gt;&lt;code&gt;echo "HELP I'M TRAPPED IN A CODE EXAMPLE"&lt;/code&gt;&lt;/quote&gt;&lt;p&gt;…and then link to it later like this:&lt;/p&gt;ReST&lt;list rend="ul"&gt;&lt;item&gt;Font used for field names and interpreted text.&lt;/item&gt;&lt;item&gt;Font used for directives and roles.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;This :ref:`doesn't look like anything to me &amp;lt;code_example&amp;gt;`.
&lt;/code&gt;&lt;p&gt; …or like this (if the &lt;code&gt;ref&lt;/code&gt; is associated with a title of some sort):
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used for field names and interpreted text.&lt;/item&gt;&lt;item&gt;Font used for directives and roles.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;Don't say :ref:`code_example`.
&lt;/code&gt;&lt;p&gt;My problem is that I have an assload of references across the all of the documentation and my brain cannot recall them on the spot. What I really need is the ability to call up the list of references to easily discover and select from that list – this is basically auto-completion but for documentation headers (or titles).&lt;/p&gt;&lt;p&gt;I am ready to write some shitty elisp with the help of aliens.&lt;/p&gt;&lt;head rend="h5"&gt;A Parentheses Prelude&lt;/head&gt;&lt;p&gt;Before we dig into emacs' guts, here are some principles that I learned after my first elisp experiments that might help somebody digging into this ecosystem for the first time:&lt;/p&gt;&lt;head rend="h6"&gt;1. Emacs Wants You to Extend It&lt;/head&gt;&lt;p&gt; I haven't written plugins for other editors extensively, but I can tell you this: emacs doesn't just make deep customization available, but it actively encourages you to make an absolute customization &lt;del&gt;messes&lt;/del&gt; masterpieces. Core editor functions aren't just documented, but often include tidbits about "you probably want to see this other variable" or "here's how you should use this". &lt;/p&gt;&lt;p&gt; Not only that, but emacs happily hands you functions shaped like nuclear warheads like &lt;code&gt;advice-add&lt;/code&gt; (that let you override any function) that can absolutely obliterate your editor if you hold it the wrong way.
Of course, this also grants you unlimited power.
&lt;/p&gt;&lt;p&gt;Remember that emacs is designed to be torn apart and rearranged.&lt;/p&gt;&lt;head rend="h6"&gt;2. Geriatric Software&lt;/head&gt;&lt;p&gt;The first public release of GNU emacs happened in 1985. Literally 40 years of development sits inside of emacs and its developers are still adding non-trivial features (native language server support landed in version 29 in 2023).&lt;/p&gt;&lt;p&gt;The ecosystem is vast and the language has evolved for a long time. There's nearly always something useful if you need a particular piece of functionality, so even moreso than with other ecosystems: remember to do your homework first.&lt;/p&gt;&lt;head rend="h6"&gt;3. Lisp for for the un-Lisped&lt;/head&gt;&lt;p&gt;The syntax is polarizing, I know. Gurus will wince when I get this wrong, but:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Writing lisp is like writing any other code, just with the parentheses wrapping everything instead of just arguments. &lt;code&gt;print("Macrodata Refinement")&lt;/code&gt;becomes&lt;code&gt;(print "Macrodata Refinement")&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Sometimes you don't get functions, you get macros that behave special ways. For example, &lt;code&gt;let&lt;/code&gt;sets variables for an inner block of code. Like this:&lt;code&gt;(let (name "Mark S.") (print name))&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Lispers say "this is actually data and not calling code" by doing this with single quotes: &lt;code&gt;'("list" "of" "strings")&lt;/code&gt;&lt;/item&gt;&lt;/list&gt;&lt;p&gt;I'm out of my depth in lisp, but if you're a novice, those notes might help.&lt;/p&gt;&lt;head rend="h4"&gt;Extensible MACroS&lt;/head&gt;&lt;p&gt;With that prelude out of the way, let's begin.&lt;/p&gt;&lt;p&gt;Inside of emacs you can call up a list of potential completions by using the keyboard shortcut M-. (that’s "hit the meta key along with period", where "meta" is the Alt key for me). This applies in a wide variety of scenarios, like when completing class names or variables. If we want to ask emacs to hand us a list of potential references, then the system we want to hook into is this completions system.&lt;/p&gt;&lt;p&gt; (This is the only time I'll assume we know where to go without crawling through documentation. You could discover it yourself looking for "&lt;code&gt;completion&lt;/code&gt;" or similar string in emacs docs).
&lt;/p&gt;&lt;p&gt; To start our hero’s journey, we figure out what the hell M-. actually does. We can ask emacs this by calling the function &lt;code&gt;describe-key&lt;/code&gt;, which is bound to C-h k.
Hitting Ctrl-h, then k, then M-. drops us into a help buffer that looks like this:
&lt;/p&gt;&lt;quote&gt;&lt;code&gt;M-. runs the command completion-at-point (found in&lt;/code&gt;&lt;code&gt;evil-insert-state-map), which is an interactive native-compiled Lisp&lt;/code&gt;&lt;code&gt;function in ‘minibuffer.el’.&lt;/code&gt;&lt;code&gt;It is bound to M-..&lt;/code&gt;&lt;code&gt;(completion-at-point)&lt;/code&gt;&lt;code&gt;Perform completion on the text around point.&lt;/code&gt;&lt;code&gt;The completion method is determined by ‘completion-at-point-functions’.&lt;/code&gt;&lt;code&gt;Probably introduced at or before Emacs version 23.2.&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; We have the next breadcrumb to follow, which is the variable &lt;code&gt;completion-at-point-functions&lt;/code&gt;.
Running &lt;code&gt;completion-at-point&lt;/code&gt; by hitting M-. consults that variable to hand us completion candidates, so we &lt;code&gt;describe-variable&lt;/code&gt; it with C-h v and then choose &lt;code&gt;completion-at-point-functions&lt;/code&gt; from the list of variables:
&lt;/p&gt;&lt;quote&gt;&lt;code&gt;completion-at-point-functions is a variable defined in ‘minibuffer.el’.&lt;/code&gt;&lt;code&gt;Its value is (cape-dict cape-file tags-completion-at-point-function)&lt;/code&gt;&lt;code&gt;Special hook to find the completion table for the entity at point.&lt;/code&gt;&lt;code&gt;Each function on this hook is called in turn without any argument and&lt;/code&gt;&lt;code&gt;should return either nil, meaning it is not applicable at point,&lt;/code&gt;&lt;code&gt;or a function of no arguments to perform completion (discouraged),&lt;/code&gt;&lt;code&gt;or a list of the form (START END COLLECTION . PROPS)&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; …and it goes on from there. You can see some existing completion functions in there: I use a package called cape to offer helpful suggestions like file paths if I start typing in something like &lt;code&gt;./filename&lt;/code&gt;.
&lt;/p&gt;&lt;p&gt;The description for this variable instructs us about how to add our own functions (scary!) You’ll note that emacs calls this a "hook", which is most often just a term used to describe a variable that is a list of functions that get called at a specific time (hooks show up everywhere).&lt;/p&gt;&lt;p&gt; I elided the full description for &lt;code&gt;completion-at-point-functions&lt;/code&gt; – which is lengthy! – but if you parse it all out, you learn the following:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Your completion at point function should return either &lt;code&gt;nil&lt;/code&gt;(the elisp "null") – which means your completion function doesn’t apply right now – or another function (which emacs discourages), or a list, which is what we’ll do because it sounds like the most-correct thing to do.&lt;/item&gt;&lt;item&gt;The list we return is &lt;code&gt;(START END COLLECTION . PROPS)&lt;/code&gt;:&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;START&lt;/code&gt;and&lt;code&gt;END&lt;/code&gt;should be positions in the buffer between which emacs will replace the completed symbol with our candidate. That is, if your cursor is calling a method on a Python object like&lt;code&gt;file.ope|&lt;/code&gt;(where the bar is your cursor), emacs will replace just&lt;code&gt;ope&lt;/code&gt;when you select&lt;code&gt;open&lt;/code&gt;from a list of completions and not the entire&lt;code&gt;file.ope&lt;/code&gt;string.&lt;/item&gt;&lt;item&gt;&lt;code&gt;COLLECTION&lt;/code&gt;is the juicy bit. The documentation calls it a completion "table", and there’s probably hidden meaning there, but you can just return a list of candidates and move on with your day, which is what I'll do.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Okay, so we need to write something to find the bounds of a string to replace and a function that returns that list.&lt;/p&gt;&lt;head rend="h5"&gt;Completions Abound&lt;/head&gt;&lt;p&gt; I fooled around with some regular expressions for a while until I did the right thing and examined how other completion backends do it. If you have the package installed, the aforementioned &lt;code&gt;cape-file&lt;/code&gt; function gives us a hint: hit M-x, then choose &lt;code&gt;find-function&lt;/code&gt;, select &lt;code&gt;cape-file&lt;/code&gt;, and poke around. You’ll find the use of a function called &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt;.
Describing it with C-h f &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt; gives us:
&lt;/p&gt;&lt;quote&gt;&lt;code&gt;Determine the start and end buffer locations for the THING at point.&lt;/code&gt;&lt;code&gt;THING should be a symbol specifying a type of syntactic entity.&lt;/code&gt;&lt;code&gt;Possibilities include ‘symbol’, ‘list’, ‘sexp’, ‘defun’, ‘number’,&lt;/code&gt;&lt;code&gt;‘filename’, ‘url’, ‘email’, ‘uuid’, ‘word’, ‘sentence’, ‘whitespace’,&lt;/code&gt;&lt;code&gt;‘line’, and ‘page’.&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; And that is useful for our &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; needs.
You can take it for a test drive at any time with M-: &lt;code&gt;(bounds-of-thing-at-point 'word)&lt;/code&gt; to see where emacs thinks the word at your cursor starts and ends.
This is a common theme when developing elisp: try out functions all the time within the editor since they’re near at hand.
&lt;/p&gt;&lt;p&gt; The argument to &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt; is a symbol for a literal thing that is predefined by the function &lt;code&gt;define-thing-chars&lt;/code&gt;.
We pass &lt;code&gt;define-thing-chars&lt;/code&gt; a name for our "thing" and a regex, and we can call &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt; with it from that point on.
The function documentation in &lt;code&gt;thingatpt.el&lt;/code&gt; that emacs refers you to explains more if you’re interested.
&lt;/p&gt;&lt;p&gt;&lt;code&gt;define-thing-chars&lt;/code&gt; expects a string with characters to put into a regex character class (like &lt;code&gt;[...]&lt;/code&gt;) - just any valid character.
This is a pretty standard character class and we can start with something super simple.
I can’t be bothered to look up whatever the reStructedText spec is for references, but let’s start with "word characters, dashes, and underscores".
That expressed as a "thing" looks like this:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(define-thing-chars rst-ref "[:alpha:]_-")
&lt;/code&gt;&lt;p&gt; Now we have a thing called &lt;code&gt;rst-ref&lt;/code&gt; we can use with &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt;.
In typical emacs fashion, we can run elisp ad-hoc in our editor just to tinker, so let’s do that now.
&lt;/p&gt;&lt;p&gt; Remember: we’re trying to write a function to give us the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; of whatever piece of text we intend for a completion to replace.
Let’s try it out: in any sort of buffer, put a piece of fake &lt;code&gt;.rst&lt;/code&gt; text with a reference, like this:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used for field names and interpreted text.&lt;/item&gt;&lt;item&gt;Font used for directives and roles.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;This is a :ref:`other-reference`.
&lt;/code&gt;&lt;p&gt; Place your point somewhere within "&lt;code&gt;other-reference&lt;/code&gt;" and try out your &lt;code&gt;thing&lt;/code&gt;:
&lt;/p&gt;&lt;p&gt; M-: &lt;code&gt;(bounds-of-thing-at-point 'rst-ref)&lt;/code&gt;
&lt;/p&gt;&lt;p&gt; You’ll see something like &lt;code&gt;(number . number)&lt;/code&gt; in the echo area (the little minibuffer at the bottom of the emacs window frame).
Congratulations!
We’ve got the first part of the problem solved.
&lt;/p&gt;&lt;head rend="h4"&gt;Gathering Completions&lt;/head&gt;&lt;p&gt;Recall the structure of what our "completion backend" needs to return to emacs:&lt;/p&gt;ELisp&lt;code&gt;(START END COLLECTION . PROPS)
&lt;/code&gt;&lt;p&gt; We can construct &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; with &lt;code&gt;bounds-of-thing-at-point&lt;/code&gt;, now we just need &lt;code&gt;COLLECTION&lt;/code&gt;, which is a list of potential candidates.
&lt;/p&gt;&lt;p&gt;Conceptually the task isn’t hard: we should find all instances of strings of the form:&lt;/p&gt;ReST&lt;list rend="ul"&gt;&lt;item&gt;Font used for all other defining constructs.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;.. _my-reference:
&lt;/code&gt;&lt;p&gt; in our document and capture &lt;code&gt;my-reference&lt;/code&gt;.
Where do we start?
&lt;/p&gt;&lt;p&gt; Once again you can rely on discovery mechanisms like searching for functions that sound related (by browsing &lt;code&gt;describe-function&lt;/code&gt;) or look at existing code.
Personally, I found this:
&lt;/p&gt;&lt;quote&gt;&lt;code&gt;(re-search-forward REGEXP &amp;amp;optional BOUND NOERROR COUNT)&lt;/code&gt;&lt;code&gt;Search forward from point for regular expression REGEXP.&lt;/code&gt;&lt;/quote&gt;&lt;p&gt;The documentation refers you to some other related functions, like this one:&lt;/p&gt;&lt;quote&gt;&lt;code&gt;(match-beginning SUBEXP)&lt;/code&gt;&lt;code&gt;Return position of start of text matched by last search.&lt;/code&gt;&lt;code&gt;SUBEXP, a number, specifies which parenthesized expression in the last&lt;/code&gt;&lt;code&gt;regexp.&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; So we can &lt;code&gt;(re-search-forward)&lt;/code&gt; for something then invoke &lt;code&gt;(match-beginning 1)&lt;/code&gt;, for example, if we used a regex capture group to grab the reference’s label.
Cool: we can start there.
&lt;/p&gt;&lt;p&gt;As you get deeper into elisp you’ll find that regular expressions are everywhere, and this case is no different. We need a solid regex to search through a reStructuredText buffer (and honor any quirks in emacs’ regular expression engine), so we’ll use this opportunity to kick the tires on interactively developing regular expressions in emacs.&lt;/p&gt;&lt;head rend="h5"&gt;Regexes&lt;/head&gt;&lt;p&gt;Geriatric millennial software engineers like myself grew up on https://regexr.com/ when it was still a Flash application. Unless you’re a masochist that lives and breathes regular expressions, it’s kind of hard to develop a good regex without live feedback, which sites like https://regexr.com/ provide.&lt;/p&gt;&lt;p&gt;Little did I know that emacs comes with its own live regular expression builder and it's goooood.&lt;/p&gt;&lt;p&gt; Within any emacs buffer, run M-x &lt;code&gt;re-builder&lt;/code&gt; to open the regex builder window split alongside the current buffer.
If I then enter the string &lt;code&gt;"re-\\(builder\\)"&lt;/code&gt; into that buffer, that string a) gets highlighted in my original buffer and b) the capture group gets highlighted in its own unique group color.
&lt;/p&gt;&lt;p&gt; You can do this all day long to fine-tune a regular expression, but there’s yet another trick when writing regular expressions, which is to use the &lt;code&gt;rx&lt;/code&gt; macro.
&lt;/p&gt;&lt;p&gt; My previous example regular expression &lt;code&gt;"re-\\(builder\\)"&lt;/code&gt; works, but the quirks when writing emacs regular expressions pile up quickly: escaping characters is one example but there are more, too.
&lt;/p&gt;&lt;p&gt; Instead, the &lt;code&gt;rx&lt;/code&gt; macro will let you define a regular expression in lisp-y form and evaluate it into a typical string-based regular expression you can use normally, so it works any place emacs expects a string-based regular expression.
For example, if you evaluate this with M-::
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(rx "re-" (group "builder"))
&lt;/code&gt;&lt;p&gt;This is what emacs returns:&lt;/p&gt;ELisp&lt;list rend="ul"&gt;&lt;item&gt;Font for backslashes in Lisp regexp grouping constructs.&lt;/item&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;"re-\\(builder\\)"
&lt;/code&gt;&lt;p&gt; Identical! The &lt;code&gt;rx&lt;/code&gt; documentation explains all the constructs available to you.
&lt;/p&gt;&lt;p&gt; Jumping back to &lt;code&gt;re-builder&lt;/code&gt;, with the &lt;code&gt;re-builder&lt;/code&gt; window active, invoke M-x &lt;code&gt;reb-change-syntax&lt;/code&gt; and choose &lt;code&gt;rx&lt;/code&gt;.
Now you can interactively build regular expressions with the &lt;code&gt;rx&lt;/code&gt; macro!
In the &lt;code&gt;re-builder&lt;/code&gt; window, you’ve got to enter a weird syntax to get it to take &lt;code&gt;rx&lt;/code&gt; constructs (I’m… not sure why this is), but you end up with the same outcome:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;'(: "re-" (group "builder"))
&lt;/code&gt;&lt;p&gt;Watch the regex get highlighted live just as it was in the string-based regex mode.&lt;/p&gt;&lt;p&gt; To bring this full circle, hop into a buffer with an example &lt;code&gt;.rst&lt;/code&gt; document like this one:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used for all other defining constructs.&lt;/item&gt;&lt;item&gt;Font used for the adornment of a section header.&lt;/item&gt;&lt;item&gt;Default font for section title text at level 1.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;A Heading&lt;/code&gt;&lt;code&gt;=========&lt;/code&gt;&lt;code&gt;.. _my-reference:&lt;/code&gt;&lt;code&gt;Link to me!&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; Using our newfound &lt;code&gt;re-builder&lt;/code&gt; knowledge, let’s build a regex interactively to make short work of it:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Invoke M-x &lt;code&gt;re-builder&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Change the engine to something easier with M-x &lt;code&gt;reb-change-syntax&lt;/code&gt;and choose&lt;code&gt;rx&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Start trying out solutions&lt;/item&gt;&lt;/list&gt;&lt;p&gt; I’ll refer here to the rx constructs documentation which lists out all the possibilities that you can plug into the &lt;code&gt;rx&lt;/code&gt; macro.
Here’s a recorded example of what developing it looks like from start to finish, ending up with a functional &lt;code&gt;rx&lt;/code&gt; construct:
&lt;/p&gt;&lt;p&gt;Live-highlighting regex development. Nice. If you add more groups, more colors show up. In this example the rx constructs I’m using are:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Any strings end up as literal matches&lt;/item&gt;&lt;item&gt;Special symbols &lt;code&gt;bol&lt;/code&gt;and&lt;code&gt;eol&lt;/code&gt;for "beginning of line" and "end of line", respectively&lt;/item&gt;&lt;item&gt;Symbols like &lt;code&gt;+&lt;/code&gt;behave like their regex counterparts ("at least one")&lt;/item&gt;&lt;item&gt;Some symbols like &lt;code&gt;not&lt;/code&gt;are nice little shortcuts (in this case, to negate the next form)&lt;/item&gt;&lt;/list&gt;&lt;p&gt; Because &lt;code&gt;rx&lt;/code&gt; is a macro, we don’t ever actually need to compile its regular expressions to use elsewhere - we can always just use &lt;code&gt;rx&lt;/code&gt; when we need a regex.
&lt;/p&gt;&lt;head rend="h4"&gt;Gathering Completions: Continued&lt;/head&gt;&lt;p&gt;Okay, we've cut our teeth on emacs regular expressions. Let's use 'em. (Not our teeth. Regexes.)&lt;/p&gt;&lt;p&gt; To start, let's save our reStructuredText regular expression to find a &lt;code&gt;ref&lt;/code&gt; so we can easily grab it later.
I'll save the one I came up with to the name &lt;code&gt;tmp/re&lt;/code&gt; (this name is arbitrary, I drop temporary variables into &lt;code&gt;tmp/&amp;lt;name&amp;gt;&lt;/code&gt; out of habit)
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(setq tmp/re (rx bol ".." (+ blank) "_" (group (+ (not ":"))) ":" eol))
&lt;/code&gt;&lt;p&gt; Now we can reference it easily. I mentioned before that &lt;code&gt;re-search-forward&lt;/code&gt; accepts a regex, so let's hop into a reStructuredText rev up the regex.
&lt;/p&gt;&lt;p&gt;Here's my sample text that I'll work with:&lt;/p&gt;ReST&lt;list rend="ul"&gt;&lt;item&gt;Font used for directives and roles.&lt;/item&gt;&lt;item&gt;Font used for all other defining constructs.&lt;/item&gt;&lt;item&gt;Font used for the adornment of a section header.&lt;/item&gt;&lt;item&gt;Default font for section title text at level 1.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;A Title&lt;/code&gt;&lt;code&gt;=======&lt;/code&gt;&lt;code&gt;Beware the Jabberwock, my son.&lt;/code&gt;&lt;code&gt;.. _my-reference:&lt;/code&gt;&lt;code&gt;You are like a little baby. Watch this.&lt;/code&gt;&lt;code&gt;.. _code-sample:&lt;/code&gt;&lt;code&gt;.. code:: python&lt;/code&gt;&lt;code&gt;print("emacs needs telemetry")&lt;/code&gt;&lt;code&gt;The end?&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; The &lt;code&gt;re-search-forward&lt;/code&gt; documentation indicates that it starts at the &lt;code&gt;point&lt;/code&gt;'s current position, so head to the start of the buffer, hit M-: to enter the elisp &lt;code&gt;Eval&lt;/code&gt; prompt, and try:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(re-search-forward tmp/re)
&lt;/code&gt;&lt;p&gt;This is anticlimactic because you'll just see the point move to the end of one of the references. BUT. This means that the search succeeded. So… what now?&lt;/p&gt;&lt;p&gt; More reading in the &lt;code&gt;re-search-forward&lt;/code&gt; documentation will educate you about emacs global match data.
In non-functional-programming style, functions like &lt;code&gt;match-beginning&lt;/code&gt; and &lt;code&gt;match-end&lt;/code&gt; serve to interrogate a global state that functions like &lt;code&gt;re-search-forward&lt;/code&gt; will modify.
In concise terms, our regular expression defines one match group and we can grab it with &lt;code&gt;(match-string-no-properties 1)&lt;/code&gt; to get the first group match (&lt;code&gt;match-string&lt;/code&gt; will return a string with "properties", which is a bunch of data like font styling that we don't want).
&lt;/p&gt;&lt;p&gt;Within our example buffer, executing this after the regex search should return our match:&lt;/p&gt;ELisp&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(match-string-no-properties 1)
&lt;/code&gt;&lt;p&gt; I see &lt;code&gt;"my-reference"&lt;/code&gt; from this command.
Now we're cooking like it's 1985, baby.
You can enter the minibuffer again with M-:, press ↑ to find the &lt;code&gt;re-search-forward&lt;/code&gt; command again, and repeat this process again to watch the point move to the next match, after which you can see the matched string with &lt;code&gt;match-string-no-properties&lt;/code&gt;.
&lt;/p&gt;&lt;p&gt;Note that running this a few times will eventually error out after no matches exist past your point. We'll address this.&lt;/p&gt;&lt;p&gt;If you're a human (or Claude) at this point, you can see the path ahead – we need to write some elisp that will:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Move the point to the beginning of the buffer (important, remember that &lt;code&gt;re-search-forward&lt;/code&gt;relies upon the current position of your point)&lt;/item&gt;&lt;item&gt;Iteratively execute an &lt;code&gt;re-search-forward&lt;/code&gt;command to aggregate reference targets&lt;/item&gt;&lt;item&gt;Conclude when there aren't any more matches&lt;/item&gt;&lt;/list&gt;&lt;p&gt;I'll start with the code and then explain which demons the parentheses are summoning afterward:&lt;/p&gt;ELisp&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight special form names.&lt;/item&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;item&gt;Font used to highlight comments.&lt;/item&gt;&lt;item&gt;Font used to highlight comment delimiters.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;;; This function will save the current position of the cursor and then&lt;/code&gt;&lt;code&gt;;; return it to this position once the code that it wraps has finished&lt;/code&gt;&lt;code&gt;;; executing, which lets us hop around the buffer without driving the&lt;/code&gt;&lt;code&gt;;; programmer insane. Important for any functions that move the point&lt;/code&gt;&lt;code&gt;;; around.&lt;/code&gt;&lt;code&gt;(save-excursion&lt;/code&gt;&lt;code&gt;;; progn is a simple function that just executes each lisp form&lt;/code&gt;&lt;code&gt;;; step-by-step.&lt;/code&gt;&lt;code&gt;(progn&lt;/code&gt;&lt;code&gt;;; Step one: go to the beginning of the buffer.&lt;/code&gt;&lt;code&gt;(goto-char (point-min))&lt;/code&gt;&lt;code&gt;;; Step two: loop&lt;/code&gt;&lt;code&gt;;;&lt;/code&gt;&lt;code&gt;;; cl-loop is a macro with a long and venerable heritage stemming&lt;/code&gt;&lt;code&gt;;; from the common lisp family of macros, which it mimics the&lt;/code&gt;&lt;code&gt;;; behavior of. You could spend hours honing your ability to wield&lt;/code&gt;&lt;code&gt;;; the common lisp `loop` macro, but we'll just explain the parts&lt;/code&gt;&lt;code&gt;;; we're using:&lt;/code&gt;&lt;code&gt;;;&lt;/code&gt;&lt;code&gt;;; `while` runs the loop until its argument evalutates to a falsy&lt;/code&gt;&lt;code&gt;;; value. We can overload our use of `re-search-forward` here: we&lt;/code&gt;&lt;code&gt;;; can use it to step our loop forward each time and also rely&lt;/code&gt;&lt;code&gt;;; upon it returning `nil` once it stops matching substrings in&lt;/code&gt;&lt;code&gt;;; the buffer and we should finish up.&lt;/code&gt;&lt;code&gt;(cl-loop while (re-search-forward&lt;/code&gt;&lt;code&gt;(rx bol ".." (+ blank) "_" (group (+ (not ":"))) ":" eol)&lt;/code&gt;&lt;code&gt;;; The aforementioned `while` termination case&lt;/code&gt;&lt;code&gt;;; relies upon this `t` parameter, which says&lt;/code&gt;&lt;code&gt;;; "don't error out with no matches, just return&lt;/code&gt;&lt;code&gt;;; nil". Once no more matches are found, the loop&lt;/code&gt;&lt;code&gt;;; exits.&lt;/code&gt;&lt;code&gt;nil t)&lt;/code&gt;&lt;code&gt;;; The `collect` keyword instructs `cl-loop` how to form&lt;/code&gt;&lt;code&gt;;; its return value. We can helpfully summarize the regex&lt;/code&gt;&lt;code&gt;;; match item by pulling out the global match data.&lt;/code&gt;&lt;code&gt;collect (match-string-no-properties 1))))&lt;/code&gt;&lt;/quote&gt;&lt;p&gt;The code is less intimidating without comments:&lt;/p&gt;ELisp&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight special form names.&lt;/item&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;(save-excursion&lt;/code&gt;&lt;code&gt;(progn&lt;/code&gt;&lt;code&gt;(goto-char (point-min))&lt;/code&gt;&lt;code&gt;(cl-loop while (re-search-forward&lt;/code&gt;&lt;code&gt;(rx bol ".." (+ blank) "_" (group (+ (not ":"))) ":" eol)&lt;/code&gt;&lt;code&gt;nil t)&lt;/code&gt;&lt;code&gt;collect (match-string-no-properties 1))))&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; Without belaboring the point, you can – like I did – discover most of these functions by skimming existing elisp code and using it as a launch pad. Many of these functions are bog standard and show up all over the place in emacs packages (&lt;code&gt;save-excursion&lt;/code&gt;, &lt;code&gt;progn&lt;/code&gt;, &lt;code&gt;goto-char&lt;/code&gt;…)
&lt;/p&gt;&lt;p&gt; Here's the result when I run this code against our example &lt;code&gt;.rst&lt;/code&gt; file:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;("my-reference" "code-sample")
&lt;/code&gt;&lt;p&gt;Looks good!&lt;/p&gt;&lt;head rend="h4"&gt;Completing the Completion Backend&lt;/head&gt;&lt;p&gt;We're now armed with the ability to:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Identify the bounds of the string we want to replace, and&lt;/item&gt;&lt;item&gt;Collect a list of targets for completion candidates&lt;/item&gt;&lt;/list&gt;&lt;p&gt;We are so close. Recall the description of the variable we need to modify:&lt;/p&gt;&lt;quote&gt;&lt;code&gt;completion-at-point-functions is a variable defined in ‘minibuffer.el’.&lt;/code&gt;&lt;code&gt;Its value is (cape-dict cape-file tags-completion-at-point-function)&lt;/code&gt;&lt;code&gt;Special hook to find the completion table for the entity at point.&lt;/code&gt;&lt;code&gt;Each function on this hook is called in turn without any argument and&lt;/code&gt;&lt;code&gt;should return either nil, meaning it is not applicable at point,&lt;/code&gt;&lt;code&gt;or a function of no arguments to perform completion (discouraged),&lt;/code&gt;&lt;code&gt;or a list of the form (START END COLLECTION . PROPS)&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; To return the list that &lt;code&gt;completion-at-point-functions&lt;/code&gt; expects, we already have the ability to identify the bounds of a &lt;code&gt;thing&lt;/code&gt; and sweep up a list of candidates in our buffer.
Note the comment about returning &lt;code&gt;nil&lt;/code&gt;: we probably don't always want to run our backend, so we should short-circuit our function to eagerly return nil to avoid tying up emacs with a regex loop we don't need.
&lt;/p&gt;&lt;p&gt;With all that said, consider the following:&lt;/p&gt;ELisp&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight special form names.&lt;/item&gt;&lt;item&gt;Font to highlight quoted Lisp symbols.&lt;/item&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;item&gt;Font used to highlight documentation embedded in program code. It is typically used for special documentation comments or strings.&lt;/item&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;item&gt;Font used to highlight strings.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;item&gt;Font used to highlight comments.&lt;/item&gt;&lt;item&gt;Font used to highlight comment delimiters.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;;; Our reStructuredText reference "thing"&lt;/code&gt;&lt;code&gt;(define-thing-chars rst-ref "[:alpha:]_-")&lt;/code&gt;&lt;code&gt;(defun my/rst-internal-reference-capf ()&lt;/code&gt;&lt;code&gt;"Completion backend for buffer reStructuredText references"&lt;/code&gt;&lt;code&gt;;; Only applies when we're within a reference - outside of a&lt;/code&gt;&lt;code&gt;;; reference, we bail out with nil.&lt;/code&gt;&lt;code&gt;(when (looking-back (rx ":ref:`" (* (not "`"))) (point-at-bol))&lt;/code&gt;&lt;code&gt;;; Get potential bounds for the string to replace&lt;/code&gt;&lt;code&gt;(let* ((bounds (or (bounds-of-thing-at-point 'rst-ref)&lt;/code&gt;&lt;code&gt;;; Fallback to the current position&lt;/code&gt;&lt;code&gt;(cons (point) (point))))&lt;/code&gt;&lt;code&gt;(start (car bounds))&lt;/code&gt;&lt;code&gt;(end (cdr bounds))&lt;/code&gt;&lt;code&gt;;; Collect all reference candidates&lt;/code&gt;&lt;code&gt;(candidates&lt;/code&gt;&lt;code&gt;;; Our previously-noted reference collector&lt;/code&gt;&lt;code&gt;(save-excursion&lt;/code&gt;&lt;code&gt;(progn&lt;/code&gt;&lt;code&gt;(goto-char (point-min))&lt;/code&gt;&lt;code&gt;(cl-loop while (re-search-forward&lt;/code&gt;&lt;code&gt;(rx bol ".." (+ blank) "_" (group (+ (not ":"))) ":" eol)&lt;/code&gt;&lt;code&gt;nil t)&lt;/code&gt;&lt;code&gt;collect (match-string-no-properties 1))))))&lt;/code&gt;&lt;code&gt;;; Return value suitable for `completion-at-point-functions`&lt;/code&gt;&lt;code&gt;(list start end candidates))))&lt;/code&gt;&lt;/quote&gt;&lt;list rend="ul"&gt;&lt;item&gt;We're following some naming conventions by calling this a "&lt;code&gt;capf&lt;/code&gt;" (a "completion-at-point function) and prefixing with&lt;code&gt;my/&lt;/code&gt;(a habit to namespace your own functions)&lt;/item&gt;&lt;item&gt;Our short-circuit takes the form of using &lt;code&gt;looking-back&lt;/code&gt;to ask, "are we inside of a reStructuredText reference"? Note the use of&lt;code&gt;rx&lt;/code&gt;here again to clean up our lisp.&lt;/item&gt;&lt;item&gt;We use our &lt;code&gt;rst-ref&lt;/code&gt;&lt;code&gt;thing&lt;/code&gt;to easily snag the&lt;code&gt;start&lt;/code&gt;and&lt;code&gt;end&lt;/code&gt;of the string to replace – note our fallback to just the immediate point if we can't find the bounds of our&lt;code&gt;thing&lt;/code&gt;.&lt;/item&gt;&lt;/list&gt;&lt;p&gt; We wrap it all up with &lt;code&gt;list&lt;/code&gt;.
Personally, even as somebody relatively new to writing Lisps, I find the code pleasant to read and self-evident.
We did a lot in 17 lines of code!
&lt;/p&gt;&lt;p&gt; Inside of our test &lt;code&gt;.rst&lt;/code&gt; buffer, we can test drive this function.
First, invoke M-x &lt;code&gt;eval-defun&lt;/code&gt; with your cursor somewhere in the function to evaluate it, which makes &lt;code&gt;my/rst-internal-reference-capf&lt;/code&gt; available.
Then run:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font to highlight quoted Lisp symbols.&lt;/item&gt;&lt;item&gt;Font used to highlight variable names.&lt;/item&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;/list&gt;&lt;code&gt;(add-hook 'completion-at-point-functions 'my/rst-internal-reference-capf)
&lt;/code&gt;&lt;p&gt; Huzzah! Our function is now live in emacs' completion framework. You can trigger the completion by calling &lt;code&gt;completion-at-point&lt;/code&gt; at a relevant spot in a buffer.
Many batteries-included emacs distributions like spacemacs or doom emacs slap nice-looking porcelain on top of the completion framework; here's an example that uses the corfu package:
&lt;/p&gt;&lt;p&gt;Congratulations, you've extended emacs for the first time!&lt;/p&gt;&lt;head rend="h4"&gt;Dressing Up the Bones&lt;/head&gt;&lt;p&gt;Okay, this is a pretty basic setup. You could improve it in many ways, but here are a few ideas about potential directions:&lt;/p&gt;&lt;head rend="h5"&gt;Mode Hooks&lt;/head&gt;&lt;p&gt; Manually adding your custom completion function to the &lt;code&gt;completion-at-point-functions&lt;/code&gt; hook is tedious, but there's a way to automate it.
Recall that in emacs parlance, a "hook" is usually a variable that holds a list of functions that get called at a specific time.
&lt;/p&gt;&lt;p&gt; If you use rst-mode, then opening an &lt;code&gt;.rst&lt;/code&gt; file will drop you into &lt;code&gt;rst-mode&lt;/code&gt; and implicitly call the &lt;code&gt;rst-mode-hook&lt;/code&gt; functions.
That means that this line is sufficient to integrate our completion function:
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font to highlight quoted Lisp symbols.&lt;/item&gt;&lt;item&gt;Font to highlight Lisp quotes.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;item&gt;Font used to highlight variable names.&lt;/item&gt;&lt;item&gt;Font used to highlight function names.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;(add-hook 'rst-mode-hook (lambda ()&lt;/code&gt;&lt;code&gt;(add-hook 'completion-at-point-functions #'my/rst-internal-reference-capf 0 t)))&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; This says: "when I open an &lt;code&gt;.rst&lt;/code&gt; file, run this lambda that modifies &lt;code&gt;completion-at-point-functions&lt;/code&gt; only for this buffer by adding my internal reference completion function".
It's a little nested which makes it less obvious with the two &lt;code&gt;add-hook&lt;/code&gt; calls.
&lt;/p&gt;&lt;head rend="h5"&gt;Other Files&lt;/head&gt;&lt;p&gt;Okay, our example works for references in the same buffer but this is sort of pointless for uses across files.&lt;/p&gt;&lt;p&gt;You can solve this too, although my post is already too long so we won't solve this step-by-step. However, here's how I solved it:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Turn my &lt;code&gt;capf&lt;/code&gt;into a minor mode that manages the completion variables&lt;/item&gt;&lt;item&gt;Doesn't search the buffer every time but instead does so once and then rebuilds it with a hook in &lt;code&gt;after-change-functions&lt;/code&gt;, saving it to a hash cache&lt;/item&gt;&lt;item&gt;Walk all &lt;code&gt;.rst&lt;/code&gt;files in the current project and run the reference collection function for each, storing the results into a hash cache for all files that don't have live buffers&lt;/item&gt;&lt;item&gt;When it comes time to call the completion function, combine the hash for completions for files without buffers along with each &lt;code&gt;.rst&lt;/code&gt;buffer's cached list of references&lt;/item&gt;&lt;/list&gt;&lt;p&gt; It sounds complicated, but it works! Functions like &lt;code&gt;with-temp-buffer&lt;/code&gt; make this pretty easy by aggregating reference targets for files using the exact same function we do for live buffers.
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Font used to highlight built-in function names.&lt;/item&gt;&lt;item&gt;Font used to highlight keywords.&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;code&gt;(with-temp-buffer&lt;/code&gt;&lt;code&gt;(insert-file-contents file)&lt;/code&gt;&lt;code&gt;(my/rst-internal-references))&lt;/code&gt;&lt;/quote&gt;&lt;head rend="h5"&gt;Fancy Completion&lt;/head&gt;&lt;p&gt; Emacs' long history includes company-mode, which is a third-party completion framework that integrates with the &lt;code&gt;completion-at-point&lt;/code&gt; set of functions.
Some &lt;code&gt;company-mode&lt;/code&gt; features include additional metadata about completion candidates, and I found two that were useful: &lt;code&gt;company-kind&lt;/code&gt; and &lt;code&gt;company-doc-buffer&lt;/code&gt;.
&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;company-kind&lt;/code&gt;is a simple key that just tells the completion caller what the completion cadidate is. In our case we can add some eye candy by indicating it's&lt;code&gt;'text&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;&lt;code&gt;company-doc-buffer&lt;/code&gt;lets us add additional context to a completion candidate. I leveraged this to include a couple of lines following the reference line to help me figure out what exactly the link refers to. It's easier to show what this looks like rather than tell:&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Notes:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;I'm using GUI emacs here for the nicer completion popup with corfu which displays a transparent, floating frame&lt;/item&gt;&lt;item&gt;My completion candidate "context" is a real excerpt from the text around the reference, complete with styling, etc.&lt;/item&gt;&lt;item&gt;The small icon to the left of each candidate comes from the &lt;code&gt;company-kind&lt;/code&gt;attribute.&lt;/item&gt;&lt;item&gt;The &lt;code&gt;~&lt;/code&gt;syntax is part of orderless&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Completion candidate context is an extra frill but very helpful.&lt;/p&gt;&lt;head rend="h4"&gt;Summary&lt;/head&gt;&lt;p&gt;My experience extending a core emacs function was an instructive and interesting exercise. I don't know what the future of emacs looks like in an increasingly LLM-crazed world, but I hope that future includes an open and powerful way to extend and customize the tools we use to write software.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.tjll.net/a-beginners-guide-to-extending-emacs/"/></entry></feed>