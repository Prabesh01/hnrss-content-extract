<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-03T02:13:24.173052+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45104907</id><title>Anthropic raises $13B Series F</title><updated>2025-09-03T02:13:30.433747+00:00</updated><content>&lt;doc fingerprint="ec368bfc2c378ca8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Anthropic raises $13B Series F at $183B post-money valuation&lt;/head&gt;
    &lt;p&gt;Anthropic has completed a Series F fundraising of $13 billion led by ICONIQ. This financing values Anthropic at $183 billion post-money. Along with ICONIQ, the round was co-led by Fidelity Management &amp;amp; Research Company and Lightspeed Venture Partners. The investment reflects Anthropic’s continued momentum and reinforces our position as the leading intelligence platform for enterprises, developers, and power users.&lt;/p&gt;
    &lt;p&gt;Significant investors in this round include Altimeter, Baillie Gifford, affiliated funds of BlackRock, Blackstone, Coatue, D1 Capital Partners, General Atlantic, General Catalyst, GIC, Growth Equity at Goldman Sachs Alternatives, Insight Partners, Jane Street, Ontario Teachers' Pension Plan, Qatar Investment Authority, TPG, T. Rowe Price Associates, Inc., T. Rowe Price Investment Management, Inc., WCM Investment Management, and XN.&lt;/p&gt;
    &lt;p&gt;“From Fortune 500 companies to AI-native startups, our customers rely on Anthropic’s frontier models and platform products for their most important, mission-critical work,” said Krishna Rao, Chief Financial Officer of Anthropic. “We are seeing exponential growth in demand across our entire customer base. This financing demonstrates investors’ extraordinary confidence in our financial performance and the strength of their collaboration with us to continue fueling our unprecedented growth.”&lt;/p&gt;
    &lt;p&gt;Anthropic has seen rapid growth since the launch of Claude in March 2023. At the beginning of 2025, less than two years after launch, Anthropic’s run-rate revenue had grown to approximately $1 billion. By August 2025, just eight months later, our run-rate revenue reached over $5 billion—making Anthropic one of the fastest-growing technology companies in history.&lt;/p&gt;
    &lt;p&gt;Anthropic’s trajectory has been driven by our leading technical talent, our focus on safety, and our frontier research, including pioneering alignment and interpretability work, all of which underpin the performance and reliability of our models. Every day more businesses, developers, and consumer power users are trusting Claude to help them solve their most challenging problems. Anthropic now serves over 300,000 business customers, and our number of large accounts—customers that each represent over $100,000 in run-rate revenue—has grown nearly 7x in the past year.&lt;/p&gt;
    &lt;p&gt;This growth spans the entire Anthropic platform, with advancements for businesses, developers, and consumers. For businesses, our API and industry-specific products make it easy to add powerful AI to their critical applications without complex integration work. Developers have made Claude Code their tool of choice since its full launch in May 2025. Claude Code has quickly taken off—already generating over $500 million in run-rate revenue with usage growing more than 10x in just three months. For individual users, the Pro and Max plans for Claude deliver enhanced AI capabilities for everyday tasks and specialized projects.&lt;/p&gt;
    &lt;p&gt;“Anthropic is on an exceptional trajectory, combining research excellence, technological leadership, and relentless focus on customers. We’re honored to partner with Dario and the team, and our lead investment in their Series F reflects our belief in their values and their ability to shape the future of responsible AI,” said Divesh Makan, Partner at ICONIQ. “Enterprise leaders tell us what we’re seeing firsthand—Claude is reliable, built on a trustworthy foundation, and guided by leaders truly focused on the long term.”&lt;/p&gt;
    &lt;p&gt;The Series F investment will expand our capacity to meet growing enterprise demand, deepen our safety research, and support international expansion as we continue building reliable, interpretable, and steerable AI systems.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.anthropic.com/news/anthropic-raises-series-f-at-usd183b-post-money-valuation"/></entry><entry><id>https://news.ycombinator.com/item?id=45104974</id><title>Launch HN: Datafruit (YC S25) – AI for DevOps</title><updated>2025-09-03T02:13:29.993803+00:00</updated><content>&lt;doc fingerprint="ee5fd4d201abb246"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Hey HN! We’re Abhi, Venkat, Tom, and Nick and we are building Datafruit (&lt;/p&gt;https://datafruit.dev/&lt;p&gt;), an AI DevOps agent. We’re like Devin for DevOps. You can ask Datafruit to check your cloud spend, look for loose security policies, make changes to your IaC, and it can reason across your deployment standards, design docs, and DevOps practices.&lt;/p&gt;&lt;p&gt;Demo video: https://www.youtube.com/watch?v=2FitSggI7tg.&lt;/p&gt;&lt;p&gt;Right now, we have two main methods to interact with Datafruit:&lt;/p&gt;&lt;p&gt;(1) automated infrastructure audits— agents periodically scan your environment to find cost optimization opportunities, detect infrastructure drift, and validate your infra against compliance requirements.&lt;/p&gt;&lt;p&gt;(2) chat interface (available as a web UI and through slack) — ask the agent questions for real-time insights, or assign tasks directly, such as investigating spend anomalies, reviewing security posture, or applying changes to IaC resources.&lt;/p&gt;&lt;p&gt;Working at FAANG and various high-growth startups, we realized that infra work requires an enormous amount of context, often more than traditional software engineering. The business decisions, codebase, and cloud itself are all extremely important in any task that has been assigned. To maximize the success of the agents, we do a fair amount of context engineering. Not hallucinating is super important!&lt;/p&gt;&lt;p&gt;One thing which has worked incredibly well for us is a multi-agent system where we have specialized sub-agents with access to specific tool calls and documentation for their specialty. Agents choose to “handoff” to each other when they feel like another agent would be more specialized for the task. However, all agents share the same context (https://cognition.ai/blog/dont-build-multi-agents). We’re pretty happy with this approach, and believe it could work in other disciplines which require high amounts of specialized expertise.&lt;/p&gt;&lt;p&gt;Infrastructure is probably the most mission-critical part of any software organization, and needs extremely heavy guardrails to keep it safe. Language models are not yet at the point where they can be trusted to make changes (we’ve talked to a couple of startups where the Claude Code + AWS CLI combo has taken their infra down). Right now, Datafruit receives read-only access to your infrastructure and can only make changes through pull requests to your IaC repositories. The agent also operates in a sandboxed virtual environment so that it could not write cloud CLI commands if it wanted to!&lt;/p&gt;&lt;p&gt;Where LLMs can add significant value is in reducing the constant operational inefficiencies that eat up cloud spend and delay deadlines—the small-but-urgent ops work. Once Datafruit indexes your environment, you can ask it to do things like:&lt;/p&gt;&lt;quote&gt;&lt;code&gt;  "Grant @User write access to analytics S3 bucket for 24 hours"
    -&amp;gt; Creates temporary IAM role, sends least-privilege credentials, auto-revokes tomorrow

  "Find where this secret is used so I can rotate it without downtime"
    -&amp;gt; Discovers all instances of your secret, including old cron-jobs you might not know about, so you can safely rotate your keys


  "Why did database costs spike yesterday?"
    -&amp;gt; Identifies expensive queries, shows optimization options, implements fixes

&lt;/code&gt;&lt;/quote&gt;&lt;p&gt; We charge a straightforward subscription model for a managed version, but we also offer a bring-your-own-cloud model. All of Datafruit can be deployed on Kubernetes using Helm charts for enterprise customers where data can’t leave your VPC. For the time being, we’re installing the product ourselves on customers' clouds. It doesn’t exist in a self-serve form yet. We’ll get there eventually, but in the meantime if you’re interested we’d love for you guys to email us at founders@datafruit.dev.&lt;/p&gt;&lt;p&gt;We would love to hear your thoughts! If you work with cloud infra, we are especially interested in learning about what kinds of work you do which you wish could be offloaded onto an agent.&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45104974"/></entry><entry><id>https://news.ycombinator.com/item?id=45105710</id><title>'World Models,' an old idea in AI, mount a comeback</title><updated>2025-09-03T02:13:29.687898+00:00</updated><content>&lt;doc fingerprint="3c198b9fef1780ca"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;‘World Models,’ an Old Idea in AI, Mount a Comeback&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;The latest ambition of artificial intelligence research — particularly within the labs seeking “artificial general intelligence,” or AGI — is something called a world model: a representation of the environment that an AI carries around inside itself like a computational snow globe. The AI system can use this simplified representation to evaluate predictions and decisions before applying them to its real-world tasks. The deep learning luminaries Yann LeCun (of Meta), Demis Hassabis (of Google DeepMind) and Yoshua Bengio (of Mila, the Quebec Artificial Intelligence Institute) all believe world models are essential for building AI systems that are truly smart, scientific and safe.&lt;/p&gt;
    &lt;p&gt;The fields of psychology, robotics and machine learning have each been using some version of the concept for decades. You likely have a world model running inside your skull right now — it’s how you know not to step in front of a moving train without needing to run the experiment first.&lt;/p&gt;
    &lt;p&gt;So does this mean that AI researchers have finally found a core concept whose meaning everyone can agree upon? As a famous physicist once wrote: Surely you’re joking. A world model may sound straightforward — but as usual, no one can agree on the details. What gets represented in the model, and to what level of fidelity? Is it innate or learned, or some combination of both? And how do you detect that it’s even there at all?&lt;/p&gt;
    &lt;p&gt;It helps to know where the whole idea started. In 1943, a dozen years before the term “artificial intelligence” was coined, a 29-year-old Scottish psychologist named Kenneth Craik published an influential monograph in which he mused that “if the organism carries a ‘small-scale model’ of external reality … within its head, it is able to try out various alternatives, conclude which is the best of them … and in every way to react in a much fuller, safer, and more competent manner.” Craik’s notion of a mental model or simulation presaged the “cognitive revolution” that transformed psychology in the 1950s and still rules the cognitive sciences today. What’s more, it directly linked cognition with computation: Craik considered the “power to parallel or model external events” to be “the fundamental feature” of both “neural machinery” and “calculating machines.”&lt;/p&gt;
    &lt;p&gt;The nascent field of artificial intelligence eagerly adopted the world-modeling approach. In the late 1960s, an AI system called SHRDLU wowed observers by using a rudimentary “block world” to answer commonsense questions about tabletop objects, like “Can a pyramid support a block?” But these handcrafted models couldn’t scale up to handle the complexity of more realistic settings. By the late 1980s, the AI and robotics pioneer Rodney Brooks had given up on world models completely, famously asserting that “the world is its own best model” and “explicit representations … simply get in the way.”&lt;/p&gt;
    &lt;p&gt;It took the rise of machine learning, especially deep learning based on artificial neural networks, to breathe life back into Craik’s brainchild. Instead of relying on brittle hand-coded rules, deep neural networks could build up internal approximations of their training environments through trial and error and then use them to accomplish narrowly specified tasks, such as driving a virtual race car. In the past few years, as the large language models behind chatbots like ChatGPT began to demonstrate emergent capabilities that they weren’t explicitly trained for — like inferring movie titles from strings of emojis, or playing the board game Othello — world models provided a convenient explanation for the mystery. To prominent AI experts such as Geoffrey Hinton, Ilya Sutskever and Chris Olah, it was obvious: Buried somewhere deep within an LLM’s thicket of virtual neurons must lie “a small-scale model of external reality,” just as Craik imagined.&lt;/p&gt;
    &lt;p&gt;The truth, at least so far as we know, is less impressive. Instead of world models, today’s generative AIs appear to learn “bags of heuristics”: scores of disconnected rules of thumb that can approximate responses to specific scenarios, but don’t cohere into a consistent whole. (Some may actually contradict each other.) It’s a lot like the parable of the blind men and the elephant, where each man only touches one part of the animal at a time and fails to apprehend its full form. One man feels the trunk and assumes the entire elephant is snakelike; another touches a leg and guesses it’s more like a tree; a third grasps the elephant’s tail and says it’s a rope. When researchers attempt to recover evidence of a world model from within an LLM — for example, a coherent computational representation of an Othello game board — they’re looking for the whole elephant. What they find instead is a bit of snake here, a chunk of tree there, and some rope.&lt;/p&gt;
    &lt;p&gt;Of course, such heuristics are hardly worthless. LLMs can encode untold sackfuls of them within their trillions of parameters — and as the old saw goes, quantity has a quality all its own. That’s what makes it possible to train a language model to generate nearly perfect directions between any two points in Manhattan without learning a coherent world model of the entire street network in the process, as researchers from Harvard University and the Massachusetts Institute of Technology recently discovered.&lt;/p&gt;
    &lt;p&gt;So if bits of snake, tree and rope can do the job, why bother with the elephant? In a word, robustness: When the researchers threw their Manhattan-navigating LLM a mild curveball by randomly blocking 1% of the streets, its performance cratered. If the AI had simply encoded a street map whose details were consistent — instead of an immensely complicated, corner-by-corner patchwork of conflicting best guesses — it could have easily rerouted around the obstructions.&lt;/p&gt;
    &lt;p&gt;Given the benefits that even simple world models can confer, it’s easy to understand why every large AI lab is desperate to develop them — and why academic researchers are increasingly interested in scrutinizing them, too. Robust and verifiable world models could uncover, if not the El Dorado of AGI, then at least a scientifically plausible tool for extinguishing AI hallucinations, enabling reliable reasoning, and increasing the interpretability of AI systems.&lt;/p&gt;
    &lt;p&gt;That’s the “what” and “why” of world models. The “how,” though, is still anyone’s guess. Google DeepMind and OpenAI are betting that with enough “multimodal” training data — like video, 3D simulations, and other input beyond mere text — a world model will spontaneously congeal within a neural network’s statistical soup. Meta’s LeCun, meanwhile, thinks that an entirely new (and non-generative) AI architecture will provide the necessary scaffolding. In the quest to build these computational snow globes, no one has a crystal ball — but the prize, for once, may just be worth the hype.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.quantamagazine.org/world-models-an-old-idea-in-ai-mount-a-comeback-20250902/"/></entry><entry><id>https://news.ycombinator.com/item?id=45106049</id><title>&lt;template&gt;: The Content Template element</title><updated>2025-09-03T02:13:29.279076+00:00</updated><content>&lt;doc fingerprint="2a029f791cad1b64"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;&amp;lt;template&amp;gt;: The Content Template element&lt;/head&gt;&lt;head&gt; Baseline Widely available * &lt;/head&gt;&lt;p&gt;This feature is well established and works across many devices and browser versions. Itâs been available across browsers since â¨November 2015â©.&lt;/p&gt;&lt;p&gt;* Some parts of this feature may have varying levels of support.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; HTML element serves as a mechanism for holding HTML fragments, which can either be used later via JavaScript or generated immediately into shadow DOM.&lt;/p&gt;&lt;head rend="h2"&gt;Attributes&lt;/head&gt;&lt;p&gt;This element includes the global attributes.&lt;/p&gt;&lt;list rend="dl"&gt;&lt;item rend="dt-1"&gt;&lt;code&gt;shadowrootmode&lt;/code&gt;&lt;/item&gt;&lt;item rend="dd-1"&gt;&lt;p&gt;Creates a shadow root for the parent element. It is a declarative version of the&lt;/p&gt;&lt;code&gt;Element.attachShadow()&lt;/code&gt;method and accepts the same enumerated values.&lt;list rend="dl"&gt;&lt;item rend="dt-2"&gt;&lt;code&gt;open&lt;/code&gt;&lt;/item&gt;&lt;item rend="dd-2"&gt;&lt;p&gt;Exposes the internal shadow root DOM for JavaScript (recommended for most use cases).&lt;/p&gt;&lt;/item&gt;&lt;item rend="dt-3"&gt;&lt;code&gt;closed&lt;/code&gt;&lt;/item&gt;&lt;item rend="dd-3"&gt;&lt;p&gt;Hides the internal shadow root DOM from JavaScript.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Note: The HTML parser creates a&lt;/p&gt;&lt;code&gt;ShadowRoot&lt;/code&gt;object in the DOM for the first&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;in a node with this attribute set to an allowed value. If the attribute is not set, or not set to an allowed value â or if a&lt;code&gt;ShadowRoot&lt;/code&gt;has already been declaratively created in the same parent â then an&lt;code&gt;HTMLTemplateElement&lt;/code&gt;is constructed. A&lt;code&gt;HTMLTemplateElement&lt;/code&gt;cannot subsequently be changed into a shadow root after parsing, for example, by setting&lt;code&gt;HTMLTemplateElement.shadowRootMode&lt;/code&gt;.&lt;p&gt;Note: You may find the non-standard&lt;/p&gt;&lt;code&gt;shadowroot&lt;/code&gt;attribute in older tutorials and examples that used to be supported in Chrome 90-110. This attribute has since been removed and replaced by the standard&lt;code&gt;shadowrootmode&lt;/code&gt;attribute.&lt;/item&gt;&lt;item rend="dt-4"&gt;&lt;code&gt;shadowrootclonable&lt;/code&gt;&lt;/item&gt;&lt;item rend="dd-4"&gt;&lt;p&gt;Sets the value of the&lt;/p&gt;&lt;code&gt;clonable&lt;/code&gt;property of a&lt;code&gt;ShadowRoot&lt;/code&gt;created using this element to&lt;code&gt;true&lt;/code&gt;. If set, a clone of the shadow host (the parent element of this&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;) created with&lt;code&gt;Node.cloneNode()&lt;/code&gt;or&lt;code&gt;Document.importNode()&lt;/code&gt;will include a shadow root in the copy.&lt;/item&gt;&lt;item rend="dt-5"&gt;&lt;code&gt;shadowrootdelegatesfocus&lt;/code&gt;&lt;/item&gt;&lt;item rend="dd-5"&gt;&lt;p&gt;Sets the value of the&lt;/p&gt;&lt;code&gt;delegatesFocus&lt;/code&gt;property of a&lt;code&gt;ShadowRoot&lt;/code&gt;created using this element to&lt;code&gt;true&lt;/code&gt;. If this is set and a non-focusable element in the shadow tree is selected, then focus is delegated to the first focusable element in the tree. The value defaults to&lt;code&gt;false&lt;/code&gt;.&lt;/item&gt;&lt;item rend="dt-6"&gt;&lt;code&gt;shadowrootserializable&lt;/code&gt;Experimental&lt;/item&gt;&lt;item rend="dd-6"&gt;&lt;p&gt;Sets the value of the&lt;/p&gt;&lt;code&gt;serializable&lt;/code&gt;property of a&lt;code&gt;ShadowRoot&lt;/code&gt;created using this element to&lt;code&gt;true&lt;/code&gt;. If set, the shadow root may be serialized by calling the&lt;code&gt;Element.getHTML()&lt;/code&gt;or&lt;code&gt;ShadowRoot.getHTML()&lt;/code&gt;methods with the&lt;code&gt;options.serializableShadowRoots&lt;/code&gt;parameter set&lt;code&gt;true&lt;/code&gt;. The value defaults to&lt;code&gt;false&lt;/code&gt;.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;Usage notes&lt;/head&gt;&lt;p&gt;This element has no permitted content, because everything nested inside it in the HTML source does not actually become the children of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element. The &lt;code&gt;Node.childNodes&lt;/code&gt; property of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element is always empty, and you can only access said nested content via the special &lt;code&gt;content&lt;/code&gt; property. However, if you call &lt;code&gt;Node.appendChild()&lt;/code&gt; or similar methods on the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element, then you would be inserting children into the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element itself, which is a violation of its content model and does not actually update the &lt;code&gt;DocumentFragment&lt;/code&gt; returned by the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;&lt;p&gt;Due to the way the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element is parsed, all &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; opening and closing tags inside the template are syntax errors and are ignored by the parser, so &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt; is the same as &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;There are two main ways to use the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element.&lt;/p&gt;&lt;head rend="h3"&gt;Template document fragment&lt;/head&gt;&lt;p&gt;By default, the element's content is not rendered. The corresponding &lt;code&gt;HTMLTemplateElement&lt;/code&gt; interface includes a standard &lt;code&gt;content&lt;/code&gt; property (without an equivalent content/markup attribute). This &lt;code&gt;content&lt;/code&gt; property is read-only and holds a &lt;code&gt;DocumentFragment&lt;/code&gt; that contains the DOM subtree represented by the template.
This fragment can be cloned via the &lt;code&gt;cloneNode&lt;/code&gt; method and inserted into the DOM.&lt;/p&gt;&lt;p&gt;Be careful when using the &lt;code&gt;content&lt;/code&gt; property because the returned &lt;code&gt;DocumentFragment&lt;/code&gt; can exhibit unexpected behavior.
For more details, see the Avoiding DocumentFragment pitfalls section below.&lt;/p&gt;&lt;head rend="h3"&gt;Declarative Shadow DOM&lt;/head&gt;&lt;p&gt;If the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element contains the &lt;code&gt;shadowrootmode&lt;/code&gt; attribute with a value of either &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;, the HTML parser will immediately generate a shadow DOM. The element is replaced in the DOM by its content wrapped in a &lt;code&gt;ShadowRoot&lt;/code&gt;, which is attached to the parent element.
This is the declarative equivalent of calling &lt;code&gt;Element.attachShadow()&lt;/code&gt; to attach a shadow root to an element.&lt;/p&gt;&lt;p&gt;If the element has any other value for &lt;code&gt;shadowrootmode&lt;/code&gt;, or does not have the &lt;code&gt;shadowrootmode&lt;/code&gt; attribute, the parser generates a &lt;code&gt;HTMLTemplateElement&lt;/code&gt;.
Similarly, if there are multiple declarative shadow roots, only the first one is replaced by a &lt;code&gt;ShadowRoot&lt;/code&gt; â subsequent instances are parsed as &lt;code&gt;HTMLTemplateElement&lt;/code&gt; objects.&lt;/p&gt;&lt;head rend="h2"&gt;Examples&lt;/head&gt;&amp;gt;&lt;head rend="h3"&gt;Generating table rows&lt;/head&gt;&lt;p&gt;First we start with the HTML portion of the example.&lt;/p&gt;&lt;code&gt;&amp;lt;table id="producttable"&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;UPC_Code&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Product_Name&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;!-- existing data could optionally be included here --&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;template id="productrow"&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td class="record"&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;p&gt;First, we have a table into which we will later insert content using JavaScript code. Then comes the template, which describes the structure of an HTML fragment representing a single table row.&lt;/p&gt;&lt;p&gt;Now that the table has been created and the template defined, we use JavaScript to insert rows into the table, with each row being constructed using the template as its basis.&lt;/p&gt;&lt;code&gt;// Test to see if the browser supports the HTML template element by checking
// for the presence of the template element's content attribute.
if ("content" in document.createElement("template")) {
  // Instantiate the table with the existing HTML tbody
  // and the row with the template
  const tbody = document.querySelector("tbody");
  const template = document.querySelector("#productrow");

  // Clone the new row and insert it into the table
  const clone = template.content.cloneNode(true);
  let td = clone.querySelectorAll("td");
  td[0].textContent = "1235646565";
  td[1].textContent = "Stuff";

  tbody.appendChild(clone);

  // Clone the new row and insert it into the table
  const clone2 = template.content.cloneNode(true);
  td = clone2.querySelectorAll("td");
  td[0].textContent = "0384928528";
  td[1].textContent = "Acme Kidney Beans 2";

  tbody.appendChild(clone2);
} else {
  // Find another way to add the rows to the table because
  // the HTML template element is not supported.
}
&lt;/code&gt;&lt;p&gt;The result is the original HTML table, with two new rows appended to it via JavaScript:&lt;/p&gt;&lt;head rend="h3"&gt;Implementing a declarative shadow DOM&lt;/head&gt;&lt;p&gt;In this example, a hidden support warning is included at the beginning of the markup. This warning is later set to be displayed via JavaScript if the browser doesn't support the &lt;code&gt;shadowrootmode&lt;/code&gt; attribute. Next, there are two &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements, each containing nested &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements with different behaviors. The first &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element is global to the whole document. The second one is scoped to the shadow root generated in place of the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element because of the presence of the &lt;code&gt;shadowrootmode&lt;/code&gt; attribute.&lt;/p&gt;&lt;code&gt;&amp;lt;p hidden&amp;gt;
  â Your browser doesn't support &amp;lt;code&amp;gt;shadowrootmode&amp;lt;/code&amp;gt; attribute yet.
&amp;lt;/p&amp;gt;
&amp;lt;article&amp;gt;
  &amp;lt;style&amp;gt;
    p {
      padding: 8px;
      background-color: wheat;
    }
  &amp;lt;/style&amp;gt;
  &amp;lt;p&amp;gt;I'm in the DOM.&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;article&amp;gt;
  &amp;lt;template shadowrootmode="open"&amp;gt;
    &amp;lt;style&amp;gt;
      p {
        padding: 8px;
        background-color: plum;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;p&amp;gt;I'm in the shadow DOM.&amp;lt;/p&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;code&gt;const isShadowRootModeSupported = Object.hasOwn(
  HTMLTemplateElement.prototype,
  "shadowRootMode",
);

document
  .querySelector("p[hidden]")
  .toggleAttribute("hidden", isShadowRootModeSupported);
&lt;/code&gt;&lt;head rend="h3"&gt;Declarative Shadow DOM with delegated focus&lt;/head&gt;&lt;p&gt;This example demonstrates how &lt;code&gt;shadowrootdelegatesfocus&lt;/code&gt; is applied to a shadow root that is created declaratively, and the effect this has on focus.&lt;/p&gt;&lt;p&gt;The code first declares a shadow root inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element, using the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element with the &lt;code&gt;shadowrootmode&lt;/code&gt; attribute.
This displays both a non-focusable &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; containing text and a focusable &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.
It also uses CSS to style elements with &lt;code&gt;:focus&lt;/code&gt; to blue, and to set the normal styling of the host element.&lt;/p&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;template shadowrootmode="open"&amp;gt;
    &amp;lt;style&amp;gt;
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;div&amp;gt;Clickable Shadow DOM text&amp;lt;/div&amp;gt;
    &amp;lt;input type="text" placeholder="Input inside Shadow DOM" /&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;p&gt;The second code block is identical except that it sets the &lt;code&gt;shadowrootdelegatesfocus&lt;/code&gt; attribute, which delegates focus to the first focusable element in the tree if a non-focusable element in the tree is selected.&lt;/p&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;template shadowrootmode="open" shadowrootdelegatesfocus&amp;gt;
    &amp;lt;style&amp;gt;
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    &amp;lt;/style&amp;gt;
    &amp;lt;div&amp;gt;Clickable Shadow DOM text&amp;lt;/div&amp;gt;
    &amp;lt;input type="text" placeholder="Input inside Shadow DOM" /&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;p&gt;Last of all we use the following CSS to apply a red border to the parent &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element when it has focus.&lt;/p&gt;&lt;code&gt;div:focus {
  border: 2px solid red;
}
&lt;/code&gt;&lt;p&gt;The results are shown below. When the HTML is first rendered, the elements have no styling, as shown in the first image. For the shadow root that does not have &lt;code&gt;shadowrootdelegatesfocus&lt;/code&gt; set you can click anywhere except the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and the focus does not change (if you select the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element it will look like the second image).&lt;/p&gt;&lt;p&gt;For the shadow root with &lt;code&gt;shadowrootdelegatesfocus&lt;/code&gt; set, clicking on the text (which is non-focusable) selects the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element, as this is the first focusable element in the tree.
This also focuses the parent element as shown below.&lt;/p&gt;&lt;head rend="h2"&gt;Avoiding DocumentFragment pitfalls&lt;/head&gt;&lt;p&gt;When a &lt;code&gt;DocumentFragment&lt;/code&gt; value is passed, &lt;code&gt;Node.appendChild&lt;/code&gt; and similar methods move only the child nodes of that value into the target node. Therefore, it is usually preferable to attach event handlers to the children of a &lt;code&gt;DocumentFragment&lt;/code&gt;, rather than to the &lt;code&gt;DocumentFragment&lt;/code&gt; itself.&lt;/p&gt;&lt;p&gt;Consider the following HTML and JavaScript:&lt;/p&gt;&lt;head rend="h3"&gt;HTML&lt;/head&gt;&lt;code&gt;&amp;lt;div id="container"&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;template id="template"&amp;gt;
  &amp;lt;div&amp;gt;Click me&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;head rend="h3"&gt;JavaScript&lt;/head&gt;&lt;code&gt;const container = document.getElementById("container");
const template = document.getElementById("template");

function clickHandler(event) {
  event.target.append(" â Clicked this div");
}

const firstClone = template.content.cloneNode(true);
firstClone.addEventListener("click", clickHandler);
container.appendChild(firstClone);

const secondClone = template.content.cloneNode(true);
secondClone.children[0].addEventListener("click", clickHandler);
container.appendChild(secondClone);
&lt;/code&gt;&lt;head rend="h3"&gt;Result&lt;/head&gt;&lt;p&gt;Since &lt;code&gt;firstClone&lt;/code&gt; is a &lt;code&gt;DocumentFragment&lt;/code&gt;, only its children are added to &lt;code&gt;container&lt;/code&gt; when &lt;code&gt;appendChild&lt;/code&gt; is called; the event handlers of &lt;code&gt;firstClone&lt;/code&gt; are not copied. In contrast, because an event handler is added to the first child node of &lt;code&gt;secondClone&lt;/code&gt;, the event handler is copied when &lt;code&gt;appendChild&lt;/code&gt; is called, and clicking on it works as one would expect.&lt;/p&gt;&lt;head rend="h2"&gt;Technical summary&lt;/head&gt;&lt;table&gt;&lt;row span="2"&gt;&lt;cell role="head"&gt;Content categories&lt;/cell&gt;&lt;cell&gt;Metadata content, flow content, phrasing content, script-supporting element&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;Permitted content&lt;/cell&gt;&lt;cell&gt;Nothing (see Usage notes)&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;Tag omission&lt;/cell&gt;&lt;cell&gt;None, both the starting and ending tag are mandatory.&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;Permitted parents&lt;/cell&gt;&lt;cell&gt; Any element that accepts metadata content, phrasing content, or script-supporting elements. Also allowed as a child of a &lt;code&gt;&amp;lt;colgroup&amp;gt;&lt;/code&gt;
        element that does not have a
        &lt;code&gt;span&lt;/code&gt; attribute.
      &lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;Implicit ARIA role&lt;/cell&gt;&lt;cell&gt;No corresponding role&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;Permitted ARIA roles&lt;/cell&gt;&lt;cell&gt;No &lt;code&gt;role&lt;/code&gt; permitted&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;DOM interface&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;HTMLTemplateElement&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;head rend="h2"&gt;Specifications&lt;/head&gt;&lt;table&gt;&lt;row&gt;&lt;cell role="head"&gt;Specification&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;HTML&amp;gt;&lt;p&gt;# the-template-element&amp;gt;&lt;/p&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;head rend="h2"&gt;Browser compatibility&lt;/head&gt;&lt;p&gt;Loadingâ¦&lt;/p&gt;&lt;head rend="h2"&gt;See also&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;part&lt;/code&gt;and&lt;code&gt;exportparts&lt;/code&gt;HTML attributes&lt;/item&gt;&lt;item&gt;&lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;HTML element&lt;/item&gt;&lt;item&gt;&lt;code&gt;:has-slotted&lt;/code&gt;,&lt;code&gt;:host&lt;/code&gt;,&lt;code&gt;:host()&lt;/code&gt;, and&lt;code&gt;:host-context()&lt;/code&gt;CSS pseudo-classes&lt;/item&gt;&lt;item&gt;&lt;code&gt;::part&lt;/code&gt;and&lt;code&gt;::slotted&lt;/code&gt;CSS pseudo-elements&lt;/item&gt;&lt;item&gt;&lt;code&gt;ShadowRoot&lt;/code&gt;interface&lt;/item&gt;&lt;item&gt;Using templates and slots&lt;/item&gt;&lt;item&gt;CSS scoping module&lt;/item&gt;&lt;item&gt;Declarative Shadow DOM (with html) in Using Shadow DOM&lt;/item&gt;&lt;item&gt;Declarative shadow DOM on web.dev (2023)&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template"/></entry><entry><id>https://news.ycombinator.com/item?id=45106189</id><title>Python has had async for 10 years – why isn't it more popular?</title><updated>2025-09-03T02:13:29.156093+00:00</updated><content>&lt;doc fingerprint="363096d5e4a0b040"&gt;
  &lt;main&gt;&lt;p&gt;The Python Documentary dropped this morning. In the middle of the documentary, there’s a dramatic segment about how the transition from Python 2 to 3 divided the community (spoiler alert: it didn’t in the end).&lt;/p&gt;&lt;p&gt;The early versions of Python 3 (3.0-3.4) were mostly focused on stability and offering pathways for users moving from 2.7. Along came 3.5 in 2015 with a new feature: &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords for executing coroutines.&lt;/p&gt;&lt;p&gt;Ten years and nine releases later, Python 3.14 is weeks away.&lt;/p&gt;&lt;p&gt;Whilst everyone will be distracted by the shiny, colorful REPL features in 3.14, there are some big announcements nestled in the release notes — both related to concurrency and parallelism&lt;/p&gt;&lt;p&gt;Both of these features are huge advancements in how Python can be used to execute concurrent code. But if &lt;code&gt;async&lt;/code&gt; has been here for 10 years, why do we need them?&lt;/p&gt;&lt;p&gt;The killer use-case for async is web development. Coroutines lend well to out-of-process network calls, like HTTP requests and database queries. Why block the entire Python interpreter waiting for a SQL query to run on another server?&lt;/p&gt;&lt;p&gt;Yet, among the three most popular Python web frameworks, async support is still not universal. FastAPI is async from the ground-up, Django has some support, but is “still working on async support” in key areas like the ORM (database). Then Flask is and probably always will be synchronous (Quart is an async alternative with similar APIs). The most popular ORM for Python, SQLAlchemy, only added asyncio support in 2023 (changelog).&lt;/p&gt;&lt;p&gt;I posed the question “Why isn’t async more popular” to a couple of other developers to get their thoughts.&lt;/p&gt;&lt;p&gt;Christopher Trudeau, co-host of the Real Python Podcast, shared his perspective:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Certain kinds of errors get caught by the compiler, others just disappear. Why didn’t that function run? Oops, forgot to await it. Error in the coroutine? Did you remember to launch with the right params, if not, it doesn’t percolate up. I still find threads easier to wrap my head around.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Michael Kennedy offered some additional insight:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The [GIL] is so omnipresent that most Python people never developed multithreaded/async thinking. Because async/await only works for I/O bound work, not CPU as well, it’s of much less use. E.g. You can use in on the web, but most servers fork out to 4-8 web workers anyway&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;So what’s going on here and can we apply the lessons to Free-Threading and Multiple Interpreters in 3.14 so that in another ten years we’re looking back and wondering why they aren’t more popular?&lt;/p&gt;&lt;p&gt;Coroutines are most valuable with IO-related tasks. In Python, you can start hundreds of coroutines to make network requests, then wait for them all to finish without running them one at a time. The concepts behind coroutines are quite straightforward. You have a loop (the event loop) and you pass it coroutines to evaluate.&lt;/p&gt;&lt;p&gt;Let’s go back to the classic use-case, HTTP requests:&lt;/p&gt;&lt;code&gt;def get_thing_sync():
    return http_client.get('/thing/which_takes?ages=1')
&lt;/code&gt;&lt;p&gt;The equivalent async function is clean and readable:&lt;/p&gt;&lt;code&gt;async def get_thing_async():
    return await http_client.get('/thing/which_takes?ages=1')
&lt;/code&gt;&lt;p&gt;If you call function &lt;code&gt;get_thing_sync()&lt;/code&gt; versus &lt;code&gt;await get_thing_async()&lt;/code&gt;, they take the same amount of time. Calling it “✨ asynchronously ✨” does not somehow make it faster. The gains are when you have more than one coroutine running at once. &lt;/p&gt;&lt;p&gt;When fetching multiple HTTP resources you can start all the requests at once via the OS network stack, then handle each response as it arrives. The important point is that the actual work — sending packets and waiting for remote servers — happens outside your Python process while your code waits. Async is most effective here: you start operations, receive awaitable handles (tasks/futures), and the event loop efficiently notifies the coroutine when each operation completes without wasting CPU on busy‑polling.&lt;/p&gt;&lt;p&gt;This scenario works well because:&lt;/p&gt;&lt;p&gt;That’s all fine, but I started with the statement Coroutines are most valuable with IO-related tasks. I then picked the one task that asyncio can handle really well, HTTP requests.&lt;/p&gt;&lt;p&gt;What about disk IO? I have far more applications in Python which read and write from files on disks or memory than I do making HTTP requests. I also have Python programs which run other programs using &lt;code&gt;subprocess&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Can I make all of those &lt;code&gt;async&lt;/code&gt;?  &lt;/p&gt;&lt;p&gt;No, not really. From the asyncio Wiki:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;asyncio does not support asynchronous operations on the filesystem. Even if files are opened with O_NONBLOCK, read and write will block.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;The solution is to use a third-party package, &lt;code&gt;aiofiles&lt;/code&gt;, which gives you async file I/O capabilities:&lt;/p&gt;&lt;code&gt;async with aiofiles.open('filename', mode='r') as f:
    contents = await f.read()
&lt;/code&gt;&lt;p&gt;So, mission accomplished? No because &lt;code&gt;aiofiles&lt;/code&gt; uses a thread pool to offload the blocking file I/O operations. &lt;/p&gt;&lt;p&gt;Windows has an async file IO API called IoRing. Linux has this availability in newer Kernels via &lt;code&gt;io_uring&lt;/code&gt;. All I could find for a Python implementation of &lt;code&gt;io_uring&lt;/code&gt; is this synchronous API written in Cython.&lt;/p&gt;&lt;p&gt;There were io_uring APIs for other platforms, Rust has implementations with tokio, C++ has Asio and Node.JS has libuv.&lt;/p&gt;&lt;p&gt;So, the asyncio Wiki is a little out of date, but&lt;/p&gt;&lt;code&gt;io_uring&lt;/code&gt;&lt;code&gt;io_uring&lt;/code&gt; has been plagued by security issues so bad that RedHat, Google and others have restricted or removed its availability. After paying out $1 million in bug bounties related to &lt;code&gt;io_uring&lt;/code&gt;, Google disabled it on some products. The issue was severe; many of the related bug‑bounty reports involved io_uring exploits.&lt;p&gt;So we should hold our horses a little while longer. Operating Systems have long held a file IO API that handles threads for concurrent IO. It does the job just fine for now.&lt;/p&gt;&lt;p&gt;So in summary, Coroutines are most valuable with IO-related tasks is only really true for network I/O and network sockets in Python were never blocking operations in the first place. Socket open in Python is one of the few operations which releases the GIL and works concurrently in a thread pool as a non-blocking operation.&lt;/p&gt;&lt;table&gt;&lt;row span="3"&gt;&lt;cell role="head"&gt;Operation&lt;/cell&gt;&lt;cell role="head"&gt;Asyncio API&lt;/cell&gt;&lt;cell role="head"&gt;Description&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;Sleep&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;asyncio.sleep()&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;Asynchronously sleep for a given duration.&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;TCP/UDP Streams&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;asyncio.open_connection()&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;Open a TCP/UDP connection.&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;HTTP&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;aiohttp.ClientSession()&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;Asynchronous HTTP client.&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;Run Subprocesses&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;asyncio.subprocess&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;Asynchronously run subprocesses.&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;Queues&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;asyncio.Queue&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;Asynchronous queue implementation.&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;Will McGugan, the creator of Rich, Textualize, and several other extremely popular Python libraries offered his perspective on async:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;I really enjoy async programming, but it isn’t intuitive for most devs that don’t have a background writing network code. A reoccurring problem I see with Textual is folk testing concurrency by dropping in a&lt;/p&gt;&lt;code&gt;time.sleep(10)&lt;/code&gt;call to simulate the work they are planning. Of course, that blocks the entire loop. But that’s a class of issue which is difficult to explain to devs who haven’t used async much. i.e. what does it mean for code to “block”, and when is it necessary to defer to threads. Without that grounding in the fundamentals, your async code is going to misbehave, but its not going to break per se. So devs don’t get the rapid iteration and feedback that we expect from Python.&lt;/quote&gt;&lt;p&gt;Now that we’ve covered the limited use cases for async, another challenge keeps coming up. The Python GIL.&lt;/p&gt;&lt;p&gt;I’ve been working on this C#/Python bridge project called CSnakes, one of the features that caused the most head-scratching was async.&lt;/p&gt;&lt;p&gt;C#, the language from which the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax was borrowed, has far broader async support in its core I/O libraries because it implements a Task‑based Asynchronous Pattern (TAP), where tasks are dispatched onto a managed thread pool. Disk, network, and memory I/O operations commonly provide both async and sync methods.&lt;/p&gt;&lt;p&gt;In fact, the C# implementation goes all the way up from the disk to the higher-level APIs, such as serialization libraries. JSON deserialization is async, so is XML.&lt;/p&gt;&lt;p&gt;The C# Async model and the Python Async models have some important differences:&lt;/p&gt;&lt;p&gt;The benefit of C#’s model is that a &lt;code&gt;Task&lt;/code&gt; is a higher-level abstraction over a thread or coroutine. This means that you don’t have to worry about the underlying thread management, you can schedule several tasks to be awaited concurrently or you can run them in parallel with Task Parallel Library (TPL).&lt;/p&gt;&lt;p&gt;In Python “An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread. While a Task is running in the event loop, no other Tasks can run in the same thread. When a Task executes an await expression, the running Task gets suspended, and the event loop executes the next Task.” 1&lt;/p&gt;&lt;p&gt;Going back to Will’s comment “Of course, that blocks the entire loop”, he’s talking about operations inside async functions which are blocking and therefore block the entire event loop. Since we covered in Problem 1, that’s practically everything except network calls and sleeping.&lt;/p&gt;&lt;p&gt;With Python’s GIL, it doesn’t matter if you’re running 1 thread or 10, the GIL will lock everything so that only 1 is operating at a time.&lt;/p&gt;&lt;p&gt;There are some operations don’t block the GIL (e.g. File IO) and in those cases you can run them in threads. For example, if you used &lt;code&gt;httpx&lt;/code&gt;‘s streaming feature to stream a large network download onto disk:&lt;/p&gt;&lt;code&gt;import httpx
import tempfile

def download_file(url: str):
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        with httpx.stream("GET", url) as response:
            for chunk in response.iter_bytes():
                tmp_file.write(chunk)
    return tmp_file.name
&lt;/code&gt;

&lt;p&gt;Neither the &lt;code&gt;httpx&lt;/code&gt; stream iterator nor &lt;code&gt;tmp_file.write&lt;/code&gt; is GIL-blocking, so they benefit from running in separate threads.&lt;/p&gt;&lt;p&gt;We can merge this behavior with an asyncio API, by using the Event Loop &lt;code&gt;run_in_executor()&lt;/code&gt; function and passing it a thread pool:&lt;/p&gt;&lt;code&gt;import asyncio
import concurrent.futures

async def main():
    loop = asyncio.get_running_loop()

    URLS = [
        "https://example.place/big-file-1",
        "https://example.place/big-file-2",
        "https://example.place/big-file-3",
        # etc.
    ]

    tasks = set()
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as pool:
        for url in URLS:
            tasks.add(loop.run_in_executor(pool, download_file, url))
        files = await asyncio.gather(*tasks)
    print(files)
&lt;/code&gt;

&lt;p&gt;It’s not immediately clear to me what the benefit of this is over running a thread-pool and calling &lt;code&gt;pool.submit&lt;/code&gt;. We retain an async API, so if that is important this is an interesting workaround. &lt;/p&gt;&lt;p&gt;I find that memorizing, documenting, and explaining what is and isn’t “blocking” in Python to be confusing and continually changing.&lt;/p&gt;&lt;p&gt;Python 3.13 introduced a very-unstable “free-threaded” build of Python where the GIL is removed and replaced with smaller, more granular locks. See my PyCon US 2024 Talk for a summary of parallelism. The 3.13 build wasn’t stable enough for any production use. 3.14 is looking far improved and I think we can start to introduce free-threading in 2026 in some narrow, well-tested scenarios.&lt;/p&gt;&lt;p&gt;One major benefit to coroutines versus threads is that they have a far smaller memory footprint, a lower context-switching overhead, and faster startup times. async APIs are also easier to reason about and compose.&lt;/p&gt;&lt;p&gt;Because parallelism in Python using threads has always been so limited, the APIs in the standard library are quite rudimentary. I think there is an opportunity to have a task-parallelism API in the standard library once free-threading is stabilized.&lt;/p&gt;&lt;p&gt;Last week I was implementing a registry function that did two discrete tasks. One calls a very slow sync-only API and the other calls several async APIs.&lt;/p&gt;&lt;p&gt;I want the behavior that:&lt;/p&gt;&lt;quote&gt;flowchart LR Start([Start]) --&amp;gt; Invoke["tpl.invoke()"] Invoke --&amp;gt; f1["f1()"] Invoke --&amp;gt; f2["f2()"] f1 --&amp;gt;|f1 -&amp;gt; T1| Join["Tuple[T1, T2]"] f2 --&amp;gt;|f2 -&amp;gt; T2| Join Join --&amp;gt; End([End])&lt;/quote&gt;&lt;p&gt;Since there are only two tasks, I don’t want to have to define a thread-pool or a set number of workers. I also don’t want to have to map or gather the callees. I want to retain my typing information so that the resulting variables are strongly typed from the return types of &lt;code&gt;function_a&lt;/code&gt; and &lt;code&gt;function_a&lt;/code&gt;. Essentially an API like this:&lt;/p&gt;&lt;code&gt;import tpl


def function_a() -&amp;gt; T1:
    ...

def function_b() -&amp;gt; T2:
    ...

result_a: T1, result_b: T2 = tpl.invoke(function_a, function_b)
&lt;/code&gt;

&lt;p&gt;This is all possible today but there are many constraints with the GIL. Free-threading will make parallel programming more popular in Python and we’ll have to revisit some of the APIs.&lt;/p&gt;&lt;p&gt;As a package maintainer, supporting both synchronous and asynchronous APIs is a big challenge. You also have to be selective with where you support async. Much of the stdlib doesn’t support async natively (e.g. logging backends).&lt;/p&gt;&lt;p&gt;Python’s Magic (&lt;code&gt;__dunder__&lt;/code&gt;) methods cannot be async. &lt;code&gt;__init__&lt;/code&gt; cannot be async for example, so none of your code can use network requests in the initializer.&lt;/p&gt;&lt;p&gt;This is an odd-pattern but I’ll keep it simple to illustrate my point. You have a class &lt;code&gt;User&lt;/code&gt; with a property &lt;code&gt;records&lt;/code&gt;. This property gives a list of records for that user. A synchronous API is straightforward:&lt;/p&gt;&lt;code&gt;class User:
    @property
    def records(self) -&amp;gt; list[RecordT]:
        # fetch records from database lazily
        ...
&lt;/code&gt;

&lt;p&gt;We can even use a lazily-initialized instance variable to cache this data.&lt;/p&gt;&lt;p&gt;Porting this API to async is a challenge because whilst &lt;code&gt;@property&lt;/code&gt; methods can be async, standard attributes are not. Having to &lt;code&gt;await&lt;/code&gt; some instance attributes and not others leaves a very odd API:&lt;/p&gt;&lt;code&gt;class AsyncDatabase:
    @staticmethod
    async def fetch_many(id: str, of: Type[RecordT]) -&amp;gt; list[RecordT]:
        ...

class User:
    @property
    async def records(self) -&amp;gt; list[RecordT]:
        # fetch records from database lazily
        return await AsyncDatabase.fetch_many(self.id, RecordT)
&lt;/code&gt;

&lt;p&gt;Anytime you access that property, it needs to be awaited:&lt;/p&gt;&lt;code&gt;user = User(...)
# single access
await user.records
# if
if await user.records:
    ...
# comprehension?
[record async for record in user.records]
&lt;/code&gt;

&lt;p&gt;The further we go into this implementation, the more we wait for the user to accidentally forget to await the property and it fails silently.&lt;/p&gt;&lt;p&gt;The Azure Python SDK, a ginormous Python project supports both sync and async. Maintaining both is achieved via a lot of code-generation infrastructure. This is ok for a project with tens of full-time engineers, but for anything small or voluntary you need to copy + paste a lot of your code base to create an async version. Then you need to patch and backport fixes and changes between the two. The differences (mostly &lt;code&gt;await&lt;/code&gt; calls) are big enough to confuse Git. I was reviewing some langchain implementations last year which had both sync and async implementation. Every method was copied+pasted, with little behavioral differences and their own bugs. People would submit bug fix PR’s to one implementation and not the other so instead of merging directly, maintainers had to port the fix, skip it, or ask the contributors to do both.&lt;/p&gt;&lt;p&gt;Since we’re largely talking about HTTP/Network IO, you also need to pick a backend for sync and async. For synchronous HTTP calls, &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;httpx&lt;/code&gt; are suitable backends. For &lt;code&gt;async&lt;/code&gt;, its &lt;code&gt;aiohttp&lt;/code&gt; and &lt;code&gt;httpx&lt;/code&gt;. Since neither are part of the Python standard library, the adoption and support for CPython’s main platforms is out of sync. E.g. as of today, &lt;code&gt;aiohttp&lt;/code&gt; has no Python 3.14 wheels, nor free-threaded support. UV Loop, the alternative implementation of the event loop has no Python 3.14 support, nor any Windows support. (Python 3.14 isn’t out yet, so it’s reasonable to not have support in either open-source project).&lt;/p&gt;&lt;p&gt;Further down the copy+paste maintainer overhead is the testing of these APIs. Testing your async code requires different mocks, different calls and in the case of Pytest a whole set of extensions and patterns for fixtures. This situation is so confusing I wrote a post about it and it’s one of the most popular on my blog.&lt;/p&gt;&lt;p&gt;In summary, I think the use cases for asyncio are limited (mostly for reasons beyond the control of &lt;code&gt;asyncio&lt;/code&gt;) and this has constrained it’s popularity. Maintaining duplicate code-bases is a burden.&lt;/p&gt;&lt;p&gt;FastAPI, the web framework that’s async from-the-ground-up grew in popularity again from 29% to 38% share of the web frameworks for Python, taking the #1 spot. It has over 100-million downloads a month. Considering the big use-case for async is HTTP and network IO, having the #1 web framework be an async one is a sign of asyncio’s success.&lt;/p&gt;&lt;p&gt;I think in 3.14 the sub-interpreter executor and free-threading features make more parallel and concurrency use cases practical and useful. For those, we don’t need &lt;code&gt;async&lt;/code&gt; APIs and it alleviates much of the issues I highlighted in this post.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://tonybaloney.github.io/posts/why-isnt-python-async-more-popular.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45106314</id><title>Introduction to Ada: a project-based exploration with rosettas</title><updated>2025-09-03T02:13:28.922780+00:00</updated><content>&lt;doc fingerprint="a48888018a6d1bd8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Introduction to Ada: a project-based exploration with rosettas&lt;/head&gt;
    &lt;head rend="h2"&gt;by Romain Gora –&lt;/head&gt;
    &lt;head rend="h2"&gt;Context&lt;/head&gt;
    &lt;p&gt;This practical walkthrough, designed as a short tutorial, was created upon joining AdaCore as a Field Engineer. In this new role, Iâll be working directly with customers to help them succeed with Ada. Although I was first introduced to the language nearly two decades ago, this new position inspired me to revisit its fundamentals, and I used the excellent https://learn.adacore.com portal as a quick refresher.&lt;/p&gt;
    &lt;p&gt;While that platform takes a concept-based approach, I chose to complement it with a project-based method by developing a small, end-to-end Ada program that generates animated rosettas in the form of SVG files. These are technically hypotrochoid curves, producing patterns that many will recognize from the classic Spirographâ¢ toy.&lt;/p&gt;
    &lt;p&gt;In this walkthrough, weâll show that Ada can be fun and easy to learn. Although the language is famous for safety-critical systems, we will use it as a modern, general-purpose programming language and try out some new features from Ada 2022 along the way.&lt;/p&gt;
    &lt;p&gt;Let's dive in!&lt;/p&gt;
    &lt;head rend="h2"&gt;A brief note on Ada&lt;/head&gt;
    &lt;p&gt;This section leans a bit more into background context, with a slightly encyclopedic flavor that's especially useful for readers new to Ada. If you're already familiar with Adaâs history and principles, feel free to joyfully skip ahead to the next section!&lt;/p&gt;
    &lt;p&gt;Ada was created in the late 1970s after a call from the U.S. Department of Defense to unify its fragmented software landscape. The winning proposal became Ada, a language that's been literally battle-tested (!) and built on a deeply thought-out design that continues to evolve today.&lt;/p&gt;
    &lt;p&gt;While Ada is absolutely a general-purpose programming language, it has carved out a strong niche in fields where software correctness and reliability are mission-critical:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Embedded and real-time systems&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Aerospace and defense&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rail, automotive, and aviation&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Any system where failure is not just a bug, but a risk&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Its strict compile-time checks, safety features, and clear structure make it particularly appealing when you need your software to be dependable from day one and still maintainable ten years later.&lt;/p&gt;
    &lt;p&gt;Ada's design is grounded in a strong and principled philosophy:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Readability over conciseness: Ada favors clarity. It avoids symbols and abbreviations in favor of full keywords, making the language more accessible and less error-prone.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Strong and explicit typing: It is extremely easy to declare new types in Ada, with precise constraints, which makes it much harder to accidentally misuse data. While some functional languages share this strong typing discipline, Ada stands out by requiring the programmer to be very explicit. It uses little to no type inference.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Explicit is better than implicit: Unlike many modern languages that prioritize convenience, Ada leans heavily toward precision. Most types must be explicitly named and matched.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Defined semantics and minimal undefined behavior: Ada offers a level of predictability and safety unmatched in many languages. This makes it a strong choice not only for safety-critical systems, but also for codebases where long-term maintenance, verifiability, and correctness are essential.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Compiler as a partner: Ada compilers are strict by design, not to frustrate, but to help the programmer write clearer, more correct code. This philosophy encourages the developer to communicate intent clearly, both to the compiler and to future readers.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;How the program works&lt;/head&gt;
    &lt;p&gt;Sometimes the best way to figure out how something works is to start at the end. Let's do that!&lt;lb/&gt;In this tutorial, we'll walk through how the program produces its final output â a rosetta SVG file â and use that as a way to explore how Ada's structure, type system, and tooling come together.&lt;lb/&gt;This is a simple command-line program that generates an SVG file. You run it like this:&lt;/p&gt;
    &lt;p&gt;./bin/rosetta&lt;/p&gt;
    &lt;p&gt;The idea was to create something visual: learning is more fun when there's an immediate, satisfying result and generating rosettas fits that goal perfectly.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;Why SVG? Because it's a lightweight and portable vector format that you can view in any modern browser. I wanted to avoid relying on a graphical library, which would have added extra weight and gone beyond the scope of this approach. And while XML isn't the most pleasant format to write by hand, generating it from code is straightforward and gives a surprisingly clean result.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tooling &amp;amp; setup&lt;/head&gt;
    &lt;p&gt;To build and run the project, I used Alire, the Ada package manager. It plays a similar role in the Ada ecosystem as Cargo does for Rust or npm for JavaScript. It's well-documented, and while we won't dive deep into it here, it's a solid and accessible way to manage Ada projects. I encourage anyone curious to get it from https://alire.ada.dev. Interestingly, "Alire" is also the French expression for "Ã lire" â which means "for reading." A fitting name for a tool that supports a language so focused on clarity and readability!&lt;/p&gt;
    &lt;p&gt;Once Alire is set up, the natural next step is choosing where to write the code. You have two excellent options for your development environment. For a dedicated experience, you can download the latest release of GNAT Studio from its GitHub repository. If you prefer a more general-purpose editor, you can install the official Ada &amp;amp; SPARK for Visual Studio Code extension from AdaCore.&lt;/p&gt;
    &lt;p&gt;As a new learner, I also kept https://learn.adacore.com close at hand. Itâs a particularly clear and comprehensive resource â and I especially appreciated being able to download the ebook version and read through it on my phone.&lt;/p&gt;
    &lt;head rend="h2"&gt;Entry point&lt;/head&gt;
    &lt;code&gt;with Rosetta_Renderer;

procedure Main is
begin
   Rosetta_Renderer.Put_SVG_Rosettas;
end Main;&lt;/code&gt;
    &lt;p&gt;There are several interesting things to notice right away:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;The&lt;/p&gt;&lt;code&gt;with&lt;/code&gt;clause is not a preprocessor directive like in C or C++. Itâs a compiled, checked reference to another package â a reliable and explicit way to express a dependency. This eliminates entire classes of bugs related to fragile&lt;code&gt;#include&lt;/code&gt;chains, macro collisions, or dependency order issues.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;This&lt;/p&gt;&lt;code&gt;procedure&lt;/code&gt;is not a&lt;code&gt;function&lt;/code&gt;: it does not return a value. In Ada, procedures are used to perform actions (like printing or modifying state), and functions are used to compute and query values.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The syntax is designed for readability. Youâll find&lt;/p&gt;&lt;code&gt;begin&lt;/code&gt;and&lt;code&gt;end&lt;/code&gt;here instead of&lt;code&gt;{}&lt;/code&gt;as in C/C++, reinforcing Adaâs philosophy that clarity matters more than brevity.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Put_SVG_Rosettas&lt;/code&gt;uses the idiomatic Pascal_Snake_Case naming style. This reflects a common Ada convention and avoids acronyms or compressed identifiers in favor of more descriptive names.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The entry point is minimal but meaningful: it simply calls a procedure which generates the output we'll explore in the next sections.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Geometry and computation (package Rosetta)&lt;/head&gt;
    &lt;p&gt;In Ada, a package is a modular unit that groups related types, procedures, and functions. Following the convention from GNAT (the Ada compiler, part of the GNU Compiler Collection, fondly known as GCC), each package has a specification file (with the&lt;code&gt; .ads&lt;/code&gt; extension â short for Ada Specification) and an implementation file (with the &lt;code&gt;.adb&lt;/code&gt; extension â short for Ada Body). This clear and enforced split means you always know where to find interface definitions versus their implementation.&lt;/p&gt;
    &lt;p&gt;The following code is the package specification for Rosetta. It defines the data types for the rosetta shapes and declares the public interface of operations available to manipulate them.&lt;/p&gt;
    &lt;code&gt;with Ada.Strings.Text_Buffers;

package Rosetta is

   --  A mathematical description of a rosetta (specifically, a hypotrochoid).
   --  formed by tracing a point attached to a circle rolling inside another circle.
   type Hypotrochoid is record
      Outer_Radius : Float;     --  Radius of the fixed outer circle.
      Inner_Radius : Float;     --  Radius of the rolling inner circle.
      Pen_Offset   : Float;     --  From the center of the inner circle to the drawing point.
      Steps        : Positive;  --  Number of steps (points) used to approximate the curve.
   end record;

   --  A 2D coordinate in Cartesian space.
   type Coordinate is record
      X_Coord, Y_Coord : Float;
   end record
     with Put_Image =&amp;gt; Put_Image_Coordinate;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate 
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; 
      Value  : Coordinate);

   --  A type for an unconstrained array of 2D points forming a curve.
   --  The actual bounds are set when an array object of this type is declared.
   type Coordinate_Array is array (Natural range &amp;lt;&amp;gt;) of Coordinate;

   --  Computes the coordinates of the rosetta curve defined by Curve (a hypotrochoid).
   --  Returns a centered array of coordinates.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array;

end Rosetta;&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Rosetta&lt;/code&gt; package is responsible for all the math and curve computation. It defines:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;Hypotrochoid&lt;/code&gt;, type describing the geometry of the rosetta&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Coordinate&lt;/code&gt;, type representing points in 2D space&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Coordinate_Array&lt;/code&gt;, type holding a series of such points&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Compute_Points&lt;/code&gt;, function which calculates all the points of the curve based on the&lt;code&gt;Hypotrochoid&lt;/code&gt;parameters and recenters them around the origin&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This package is focused solely on computation. It doesnât concern itself with how the result is rendered.&lt;/p&gt;
    &lt;p&gt;Fun fact for the curious: when the rolling circle rolls outside the fixed circle rather than inside, the resulting curve is called an epitrochoid.&lt;/p&gt;
    &lt;p&gt;In Ada, a &lt;code&gt;record&lt;/code&gt; is similar to a &lt;code&gt;struct&lt;/code&gt; in C or a class with only data members in other languages. It's a user-defined type composed of named components, making it ideal for modeling structured data.&lt;/p&gt;
    &lt;p&gt;Using a record for &lt;code&gt;Hypotrochoid&lt;/code&gt; was particularly appropriate: it allows grouping all geometric parameters (outer radius, inner radius, pen offset, and steps) into a single, cohesive unit. This improves readability and maintainability. The compiler enforces correctness by ensuring all required values are present and of the expected type â reinforcing Adaâs philosophy of clarity and safety.&lt;/p&gt;
    &lt;p&gt;The type &lt;code&gt;Coordinate_Array&lt;/code&gt; is an unconstrained array type that holds a range of &lt;code&gt;Coordinate&lt;/code&gt; records. In this context, âunconstrainedâ simply means that we donât define the arrayâs size when we declare the type. Instead, the size is defined when we declare an object of that type. This gives us the flexibility to use this type for a variety of shapes.&lt;/p&gt;
    &lt;p&gt;You may also notice the use of &lt;code&gt;Natural range &amp;lt;&amp;gt;. Natural&lt;/code&gt; is a predefined subtype of Integer that only allows non-negative values. And yes, I mean subtype: Adaâs powerful type system allows you to take an existing type and create a more specific, constrained version of it.&lt;/p&gt;
    &lt;head rend="h3"&gt;Highlights from the .adb file&lt;/head&gt;
    &lt;p&gt;Here are a few notable aspects from the implementation (&lt;code&gt;rosetta.adb&lt;/code&gt;) that illustrate Adaâs strengths for writing safe, clear, and structured code:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Declarative and modular design: Both&lt;/p&gt;&lt;code&gt;Generate_Point&lt;/code&gt;and&lt;code&gt;Compute_Points&lt;/code&gt;are pure functions that operate only on their inputs. Their behavior is fully deterministic and encapsulated.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Safe bounds and array handling: The&lt;/p&gt;&lt;code&gt;Points&lt;/code&gt;array is statically bounded using&lt;code&gt;(0 .. Curve.Steps)&lt;/code&gt;, and its access is strictly safe. The compiler ensures that any index outside this range would raise an error at runtime. This immediate error is a feature, not a bug. It stops silent memory corruption and security flaws by ensuring the program fails predictably and safely at the source of the problem.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Use of constants for robustness: Variables such as&lt;/p&gt;&lt;code&gt;Pi&lt;/code&gt;,&lt;code&gt;R_Diff&lt;/code&gt;, and Ratio are declared as constant, enforcing immutability. This helps ensure clarity of intent and prevents accidental reassignment, a common source of subtle bugs in more permissive languages. Ada encourages this explicit declaration style, promoting safer code.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;with Ada.Numerics;
with Ada.Numerics.Elementary_Functions;

use Ada.Numerics;
use Ada.Numerics.Elementary_Functions;

package body Rosetta is

   --  Computes a single point on the hypotrochoid curve for a given angle Theta.
   --  Uses the standard parametric equation of a hypotrochoid.
   function Generate_Point (Curve : Hypotrochoid; Theta : Float) return Coordinate is
      R_Diff : constant Float := Curve.Outer_Radius - Curve.Inner_Radius;
      Ratio  : constant Float := R_Diff / Curve.Inner_Radius;
   begin
      return (
              X_Coord =&amp;gt; R_Diff * Cos (Theta) + Curve.Pen_Offset * Cos (Ratio * Theta),
              Y_Coord =&amp;gt; R_Diff * Sin (Theta) - Curve.Pen_Offset * Sin (Ratio * Theta)
             );
   end Generate_Point;

   --  Computes all the points of the hypotrochoid curve and recenters them.
   --  The result is an array of coordinates centered around the origin.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array is
      Points : Coordinate_Array (0 .. Curve.Steps);
      Max_X  : Float := Float'First;
      Min_X  : Float := Float'Last;
      Max_Y  : Float := Float'First;
      Min_Y  : Float := Float'Last;
      Offset : Coordinate;
   begin
      --  Computes raw points and updates the bounding box extents.
      for J in 0 .. Curve.Steps loop
         declare
            Theta : constant Float := 2.0 * Pi * Float (J) / Float (Curve.Steps) * 50.0;
            P     : constant Coordinate := Generate_Point (Curve, Theta);
         begin
            Points (J) := P;
            Max_X := Float'Max (Max_X, P.X_Coord);
            Min_X := Float'Min (Min_X, P.X_Coord);
            Max_Y := Float'Max (Max_Y, P.Y_Coord);
            Min_Y := Float'Min (Min_Y, P.Y_Coord);
         end;
      end loop;

      --  Computes the center offset based on the bounding box.
      Offset := (
                 X_Coord =&amp;gt; (Max_X + Min_X) / 2.0,
                 Y_Coord =&amp;gt; (Max_Y + Min_Y) / 2.0
                );

      --  Recenters all points by subtracting the center offset.
      for J in Points'Range loop
         Points (J).X_Coord := @ - Offset.X_Coord;
         Points (J).Y_Coord := @ - Offset.Y_Coord;
      end loop;

      return Points;
   end Compute_Points;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;
      Value  : Coordinate)
   is   
      X_Text : constant String := Float'Image (Value.X_Coord);
      Y_Text : constant String := Float'Image (Value.Y_Coord);
   begin
      Output.Put (X_Text &amp;amp; "," &amp;amp; Y_Text);
   end Put_Image_Coordinate;

end Rosetta;&lt;/code&gt;
    &lt;head rend="h2"&gt;On style: strict and predictable (and satisfying!)&lt;/head&gt;
    &lt;p&gt;Ada is one of those rare languages that not only compiles your code but asks you to write it properly. With the compiler switch -gnaty, you can enforce a comprehensive set of style rules, many of which are stricter than what you'd see in most languages.&lt;/p&gt;
    &lt;p&gt;This includes things like:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;No trailing whitespace at the end of lines&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No consecutive blank lines&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Proper indentation and alignment of keywords and parameters&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;A space before â(â when calling a procedure or function&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Consistent casing&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;At first, this can feel surprisingly strict. But once you get used to it, the benefits are clear: it helps enforce a consistent and clean coding style across a codebase. That in turn improves readability, reduces ambiguity, and leads to more maintainable programs.&lt;/p&gt;
    &lt;p&gt;Rather than leaving formatting up to personal taste or optional linter tools, Ada integrates this attention to detail into the compilation process itself. The result is not only more elegant: it's genuinely satisfying. And you can do even more with GNATcheck and GNATformat but itâs outside of the scope of this post.&lt;/p&gt;
    &lt;p&gt;Outputting to SVG (package &lt;code&gt;Rosetta_Renderer&lt;/code&gt;)&lt;/p&gt;
    &lt;p&gt;The Rosetta_Renderer package is responsible for producing the SVG output. It defines a single high-level procedure:&lt;/p&gt;
    &lt;code&gt;package Rosetta_Renderer is

   --  Renders a predefined set of rosettas into an SVG output.
   procedure Put_SVG_Rosettas;

end Rosetta_Renderer;&lt;/code&gt;
    &lt;p&gt;This procedure generates an SVG file directly. It takes care of formatting the SVG structure (header, shapes, animations, and footer) and calls into the math logic defined in the &lt;code&gt;Rosetta &lt;/code&gt;package to generate point data.&lt;/p&gt;
    &lt;p&gt;This separation of concerns is deliberate and beneficial: the math logic doesnât need to know anything about SVG, and the renderer doesnât care how the coordinates were generated.&lt;/p&gt;
    &lt;p&gt;Now let's talk about the body of the package... but not for long. We're keeping it brief because its core is essentially the SVG plumbing required to draw and animate the curves, so we'll skip the fine details. And for those who enjoy seeing how the sausage is made, I've made the fully commented source code available for you right here.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;The procedure &lt;code&gt;Put_Path&lt;/code&gt; handles the creation of the SVG path. Its main job is to take an array of coordinates and write the corresponding command string to the &lt;code&gt;d &lt;/code&gt;attribute of a&lt;code&gt; &amp;lt;path&amp;gt;&lt;/code&gt; element. In SVG, this attribute defines the geometry of the shape. The code iterates over each coordinate, using &lt;code&gt;M &lt;/code&gt;(moveto) for the first point and &lt;code&gt;L&lt;/code&gt; (lineto) for all the others to draw the connecting lines.&lt;/p&gt;
    &lt;code&gt;--  Puts coordinates to a single SVG path string ("d" attribute).
   procedure Put_Path (Stream : File_Type; Points : Coordinate_Array) is
   begin
      Put (Stream, "M "); -- Moves the pen without drawing.
      for J in Points'Range loop
         declare 
            Coord_Text : constant String := Coordinate'Image (Points (J));
         begin   
            Put (Stream, Coord_Text);
            if J &amp;lt; Points'Last then
               Put (Stream, " L "); --  Draws a line.
            end if;
         end;
      end loop;
   end Put_Path;&lt;/code&gt;
    &lt;head rend="h2"&gt;Afterword&lt;/head&gt;
    &lt;p&gt;This small project was an enjoyable and useful way to get back into Ada. It helped me reconnect with the languageâs main strengths and refamiliarize myself with its tools and design. It was a great reminder of how fun, easy to learn, and remarkably modern Ada can be, especially for developers focused on building robust, maintainable, and efficient software.&lt;/p&gt;
    &lt;p&gt;I hope this short walkthrough gives a good idea of that feeling, whether you're already into Ada or just starting to explore it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.adacore.com/introduction-to-ada-a-project-based-exploration-with-rosettas"/></entry><entry><id>https://news.ycombinator.com/item?id=45106846</id><title>Physically based rendering from first principles</title><updated>2025-09-03T02:13:28.633755+00:00</updated><content>&lt;doc fingerprint="4fae1661081d071f"&gt;
  &lt;main&gt;
    &lt;p&gt;In this interactive article, we will explore the physical phenomena that create light and the fundamental laws governing its interaction with matter. We will learn how our human eyes capture light and how our brains interpret it as visual information. We will then model approximations of these physical interactions and learn how to create physically realistic renderings of various materials.&lt;/p&gt;
    &lt;p&gt;We are all familiar with light: it’s the thing that allows us to see the world, distinguish colors and textures, and keeps the universe from being a dark, lifeless void. But precisely defining what light is has proven to be a tricky question.&lt;/p&gt;
    &lt;p&gt;Throughout history, many philosophers (and later, physicists) studied light in an effort to demystify its nature. Some ancient Greeks considered it to be one of the four fundamental elements that composed the universe: beams of fire emanating from our eyes.&lt;/p&gt;
    &lt;p&gt;Descartes proposed that light behaved like waves, while Newton thought that it consisted of tiny particles of matter called corpuscles.&lt;/p&gt;
    &lt;p&gt;Each of these more or less scientific theories explained some aspects of light's behavior, but none could account for all of them in a single, unified framework. That was until the 1920s when physicists came up with quantum electrodynamics. This theory is, as of now, the most accurate way to describe every interaction of light and matter.&lt;/p&gt;
    &lt;p&gt;You can hover the diagram below to see which light's phenomena can be explained using each model:&lt;/p&gt;
    &lt;p&gt;For the purpose of computer graphics, the ray optics model is accurate enough at simulating light interactions. But for the sake of scientific curiosity, we will explore some aspects of the other models, starting with electromagnetism.&lt;/p&gt;
    &lt;p&gt;One of the fundamental properties of matter is the electric charge, and it comes in two types: positive and negative.&lt;lb/&gt;Charges determine how particles interact: charges of the same type repel each other, while opposite charges attract.&lt;/p&gt;
    &lt;p&gt;The amount of force affecting two charged particles is calculated using Coulomb's law:&lt;/p&gt;
    &lt;p&gt;Where is a constant, and are the quantities of each charge, and is the distance between them.&lt;/p&gt;
    &lt;p&gt;You can drag around these charges to see how the electric force affects them:&lt;/p&gt;
    &lt;p&gt;Every charge contributes to the electric field, it represents the force exerted on other charges at each point in space. We can visualize the electric field with a or a :&lt;/p&gt;
    &lt;p&gt;Another way to visualize the electric field is by coloring each point in space with a color gradient representing the force experienced by a small charge at that point:&lt;/p&gt;
    &lt;p&gt;Imagine a moving object carrying a positive electric charge placed under a cable carrying an electrical current.&lt;lb/&gt; From , the object and the negative charges in the wire are moving, and since the positive and negative charges in the cable compensate each other, the object doesn't experience any force.&lt;/p&gt;
    &lt;p&gt;In the , it appears to be static alongside the negative charges, while the positive charges are moving to the left, and the object still doesn't get affected by any force.&lt;/p&gt;
    &lt;p&gt;Now if we take into account , the moving charges in the wire appear "stretched" due to relativistic effects, causing a change in the distribution of charges. This stretching leads to a repulsive force between the object and the wire, which we interpret as magnetism.&lt;/p&gt;
    &lt;p&gt;Maxwell's equations describe how electric and magnetic fields are created and interact with each other. We will focus on the third and fourth equations.&lt;/p&gt;
    &lt;p&gt;Maxwell's third equation, known as Faraday's law of induction, shows how changing magnetic fields can generate electric currents.&lt;lb/&gt;An example of this is moving a magnet inside a coil, which induces an electric current in the wire due to the changing magnetic field.&lt;/p&gt;
    &lt;p&gt;This is the principle behind electric generators: Mechanical energy (like the flow of steam) is used to move magnets inside coils (a turbine), converting it to electrical energy through electromagnetic induction.&lt;/p&gt;
    &lt;p&gt;By moving the magnet left and right, we can see the voltmeter picking up a current and the electric charges in the coil moving back and forth:&lt;/p&gt;
    &lt;p&gt;Maxwell's fourth and final equation, Ampère's Law, illustrates how electric currents (moving charges) produce magnetic fields around them. This is the basis of how electromagnets function:&lt;/p&gt;
    &lt;p&gt;Together, these laws demonstrate how electric and magnetic fields are interdependent. A changing magnetic field generates an electric field, and a changing electric field generates a magnetic field.&lt;/p&gt;
    &lt;p&gt;This continuous cycle enables self-sustaining, self-propagating electromagnetic waves, which can travel through space without requiring a medium.&lt;/p&gt;
    &lt;p&gt;Electromagnetic radiation consists of waves created by synchronized oscillations of electric and magnetic fields. These waves travel at the speed of light in a vacuum.&lt;/p&gt;
    &lt;p&gt;The amplitude of a wave determines the maximum strength of its electric or magnetic field. It represents the wave's intensity or "brightness". In quantum terms, a higher amplitude corresponds to a greater number of photons.&lt;/p&gt;
    &lt;p&gt;The frequency of a wave determines the energy of the individual photons that compose it. Higher frequencies correspond to shorter wavelengths and more energetic photons.&lt;/p&gt;
    &lt;p&gt;When the wavelength falls between approximately 400 nm and 700 nm, the human eye perceives it as visible light.&lt;/p&gt;
    &lt;p&gt;While other wavelengths are invisible to the human eye, many are quite familiar in everyday life. For example, microwaves are used for Wi-Fi and cooking, X-rays are used in medical imaging, and radio waves enable communication.&lt;/p&gt;
    &lt;p&gt;Some insects, like bees, can see ultraviolet light, which helps them locate flowers by revealing hidden patterns and markings created by specialized pigments, such as flavonoids, that reflect UV wavelengths.&lt;/p&gt;
    &lt;p&gt;On the other end of the spectrum, gamma rays are highly energetic and can be dangerous, they are generated by radioactive decay, nuclear bombs, and space phenomena like supernovas.&lt;/p&gt;
    &lt;p&gt;There are many ways for light to be generated, the two most common ones we encounter everyday are incandescence and electroluminescence.&lt;/p&gt;
    &lt;p&gt;Incandescence is the process by which a material emits visible light due to high temperature. It is how incandescent lightbulbs and the sun generates light.&lt;/p&gt;
    &lt;p&gt;An incandescent lightbulb produces light through the heating of a filament until it starts glowing. The filament is made of tungsten, an element with a high melting point, high durability, and a positive temperature coefficient of resistance, which means its resistance increases with temperature.&lt;/p&gt;
    &lt;p&gt;When we increase the current flowing through the filament, it starts heating up (Due to Joule heating), which increases the resistance in turn causing more heat to get dissipated. This feedback loop stabilizes at around 2500°C.&lt;/p&gt;
    &lt;p&gt;This heat makes the electrons in the filament wiggle and collide with each other, releasing photons in the process. This radiation can be approximated as Black-body radiation.&lt;/p&gt;
    &lt;p&gt;The Sun also generates light by incandescence, but unlike the lightbulb's filament glowing via Joule heating, the Sun’s energy is produced by nuclear fusion in the core, where hydrogen nuclei fuse to form helium and release photons as gamma rays.&lt;/p&gt;
    &lt;p&gt;These photons travel from the core through the radiative zone, getting absorbed and remitted countless times while shifting to longer wavelengths. After hundreds of thousands of years of bouncing around, the photons make it to the surface of the Sun, called the photosphere, where they get radiated away.&lt;/p&gt;
    &lt;p&gt;Most (~49%) of the sun's emissions are in infrared, which is responsible for the heat we get on Earth, ~43% is visible light and the ~8% left is ultraviolet.&lt;/p&gt;
    &lt;p&gt;An interesting fact is that illustrations of the Sun's cross-section typically depict the interior with bright orange or yellow colors. However, if we could actually see a cross-section of the Sun, even the hottest regions like the core would appear dark and opaque, because the radiation generated there isn't in the visible spectrum.&lt;/p&gt;
    &lt;p&gt;Another way to generate light is by electroluminescence, this is the phenomenon that powers LEDs&lt;/p&gt;
    &lt;p&gt;The main component of a light-emitting diode is a semiconductor chip. Semiconductors are materials whose electrical conductivity can be modified by mixing them with impurities in a process known as doping.&lt;/p&gt;
    &lt;p&gt;Depending on the type of impurity (called the dopant) used in the mix, the semiconductor can be turned into either an n-type, which has extra electrons freely moving around, or a p-type, which has a lack of electrons and instead carrying an electron "hole", also moving around and acting as a positive charge.&lt;/p&gt;
    &lt;p&gt;When you stick a p-type and an n-type semiconductor side by side, they form a p-n junction. When a current flows through the junction, the electrons and the holes recombine and emit photons in the process.&lt;/p&gt;
    &lt;p&gt;Aside from incandescence and electroluminescence, which are the two most common sources of light we encounter in everyday life, light can come from other places. Some materials glow when exposed to ultraviolet radiation, others absorb that radiation and re-emit it after some time. Some animals like fireflies use special enzymes to produce light. You can read this page to learn more about other sources of luminescence.&lt;/p&gt;
    &lt;p&gt;In the previous chapter, we examined the nature of light and the various methods by which it can be emitted, we will now focus on how it interacts with matter.&lt;/p&gt;
    &lt;p&gt;When a photon hits a material, it interacts with the electrons in the atoms and molecules of that material, then two things can happen, it can either be absorbed or scattered.&lt;/p&gt;
    &lt;p&gt;The electrons occupy atomic orbitals: regions around the nucleus of the atom where an electron is most likely to be found. A higher orbital corresponds to a higher energy level of the electron.&lt;/p&gt;
    &lt;p&gt;If the photon has the energy needed to excite the electron to a higher energy level, the photon can be absorbed. Eventually the electron returns to a lower level and releases the energy as heat.&lt;/p&gt;
    &lt;p&gt;If the photon does not get absorbed, its electric field will make the electrons oscillate in return and generate secondary waves that interfere constructively and destructively with the photon waves in complicated ways.&lt;/p&gt;
    &lt;p&gt;We can simplify these complicated interactions by making a few assumptions about the material:&lt;/p&gt;
    &lt;p&gt;We can use Maxwell's equations to show that such a perfect flat material splits the incoming light waves into two parts: reflected and refracted.&lt;/p&gt;
    &lt;p&gt;The angle of reflection is equal to the angle of incidence relative to the normal of the surface, as per the law of reflection:&lt;/p&gt;
    &lt;p&gt;The angle of refraction is determined by how much slower (or faster) light travels through the material, that speed is defined by the index of refraction, and the angle is calculated using Snell's law:&lt;/p&gt;
    &lt;p&gt;At a and refractive indices light is no longer refracted and seems to disappear.&lt;/p&gt;
    &lt;p&gt;The amount of light that is reflected and refracted is calculated using Fresnel equations.&lt;/p&gt;
    &lt;p&gt;However, computing the full Fresnel equation in real time can be slow, so in 1994 Christophe Schlick came up with an approximation.&lt;/p&gt;
    &lt;p&gt;First we compute the reflectance at zero degrees from the normal:&lt;/p&gt;
    &lt;p&gt;Then we plug in the approximation function for the reflectance:&lt;/p&gt;
    &lt;p&gt;The transmitted (or refracted) light simply becomes:&lt;/p&gt;
    &lt;p&gt;If we try the where the refracted ray disappeared, we can now see it getting reflected back inside the medium, this is called total internal reflection.&lt;/p&gt;
    &lt;p&gt;Total internal reflection gives rise to an interesting phenomenon called Snell's window. If you dive underwater and look up, the light above the surface is refracted through a circular window 96 degrees wide, and everything outside is a reflection of the bottom of the water.&lt;/p&gt;
    &lt;p&gt;This is what it looks underwater:&lt;/p&gt;
    &lt;p&gt;Like we saw earlier, we can explain light reflecting and refracting using different models, depending on the size of the surface irregularities we are considering.&lt;/p&gt;
    &lt;p&gt;For example, wave optics explains light interacting with matter as light waves diffracting on the surface nanogeometry.&lt;/p&gt;
    &lt;p&gt;If we zoom out a bit and use ray optics, we consider light as straight line rays that reflect and refract on the surface microgeometry. With this model we can use the optical laws we described earlier: law of reflection, Snell's law, Fresnel equations.&lt;/p&gt;
    &lt;p&gt;Now for rendering, we can zoom out even further and consider one pixel at a time, each pixel contains many microgeometry surfaces that we call a microfacet. We can use a statistical average of the microfacets in a pixel to simulate the appearance of the surface at that pixel, without considering each individual microfacet which would be unfeasible in real time.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Size&lt;/cell&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Phenomenon&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Nanogeometry&lt;/cell&gt;
        &lt;cell&gt;Wave optics&lt;/cell&gt;
        &lt;cell&gt;Light diffraction&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Microgeometry&lt;/cell&gt;
        &lt;cell&gt;Ray optics&lt;/cell&gt;
        &lt;cell&gt;Reflection/refraction, change in local normal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Macrogeometry&lt;/cell&gt;
        &lt;cell&gt;BRDF&lt;/cell&gt;
        &lt;cell&gt;Statistical average over a pixel, wider cone -&amp;gt; more roughness&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Here we can see a microgeometry surface, changing the roughness makes it more bumpy and the microfacets normals aren't aligned anymore:&lt;/p&gt;
    &lt;p&gt;At the macrogeometry level, a bigger roughness value means light rays have a wider cone where they can spread out. The function that describes this cone is called bidirectional reflectance distribution function, we will discuss it in the next chapter.&lt;/p&gt;
    &lt;p&gt;In our microfacet model, we distinguish two types of materials by the nature of their interaction with light: metals and non-metals.&lt;/p&gt;
    &lt;p&gt;Metals have a sea of free electrons that absorb light very easily when the photons enter a few nanometers deep inside the surface. The light that isn't absorbed is reflected equally across the visible light spectrum, this is why metals have that distinct "silvery" gray color.&lt;/p&gt;
    &lt;p&gt;Notable exceptions are gold, copper, osmium and caesium.&lt;/p&gt;
    &lt;p&gt;Changing the roughness of a metal only changes its specular reflection, making it more or less mirror-like. But there is no diffuse reflection at all.&lt;/p&gt;
    &lt;p&gt;Also called dielectrics, these are materials that do not conduct electricity (insulators). They include plastic, wood, glass, water, diamond, air...&lt;/p&gt;
    &lt;p&gt;When a photon hits a dielectric material, it only gets absorbed if it's energy matches the electron's energy in the material. So light either gets reflected, and the specular reflection depends on the roughness of the surface.&lt;/p&gt;
    &lt;p&gt;The light can also get refracted inside the dielectric material, it bounces around and interacts with the pigments inside the material until it exits the surface, this is called diffuse reflection.&lt;/p&gt;
    &lt;p&gt;If we take the example of a red apple. When we shine a white light (which contains all visible wavelengths) on it, the apple's pigments (anthocyanins) absorb most of the wavelengths like violet, blue and green wavelengths, thus decreasing the intensity of those colors from the light. The remaining wavelengths, mostly red, gets scattered off the apple's surface making us perceive the apple as red.&lt;/p&gt;
    &lt;p&gt;We can characterize the incoming light by describing the amount of energy it carries at each wavelength using a function called the Spectral Power Distribution or SPD for short.&lt;/p&gt;
    &lt;p&gt;For example, below is the SPD for D65, a theoretical source of light standardized by The International Commission on Illumination (CIE). It represents the spectrum of average midday light in Western Europe or North America:&lt;/p&gt;
    &lt;p&gt;We can compare this SPD to AM0, which is the measured solar radiation in outer space before entering Earth's atmosphere. Notice the absence of a dip in the ultraviolet range:&lt;/p&gt;
    &lt;p&gt;And here is the SPD of a typical tungsten incandescent light:&lt;/p&gt;
    &lt;p&gt;The SPD shows us how much of each "color" a light is composed of. Another interesting function we can look at is called the spectral reflectance curve, which shows the fraction of incident light reflected by an object at each wavelength, effectivly representing the color of said object.&lt;/p&gt;
    &lt;p&gt;Going back to our apple example, since it reflects most of its light in the red wavelength, its spectral reflectance curve might look like this:&lt;/p&gt;
    &lt;p&gt;The light we see is the combination of the light spectral power distribution with the object spectral reflectance.&lt;/p&gt;
    &lt;p&gt;If we shine a light on our red apple, depending on the wavelengths of the light, the final color we see changes. A makes the apple appear red, because it's like multiplying the apple's color by one. We get the same result with a , because the apple reflects mostly in the red spectrum.&lt;lb/&gt;However if we shine a , besides the leaf, the rest of the apple doesn't reflect any light, thus appearing black.&lt;/p&gt;
    &lt;p&gt;On the top right you can see the SPD of the flashlight, under it the reflectance curve of the apple, and the resulting reflected light below it:&lt;/p&gt;
    &lt;p&gt;If we now add a banana and shine a , we can obviously tell the apple and the banana apart, one being red while the other is yellow.&lt;lb/&gt;But what happens when the light is ? Both objects appear reddish to our eyes, because the banana doesn't have any green light to reflect, making it lose its yellow color. This phenomenon is called metamerism.&lt;/p&gt;
    &lt;p&gt;You can display the or the :&lt;/p&gt;
    &lt;p&gt;There are different types of metamerism, depending on when it happens during the light transport process. The apple and banana example is called illuminant metamerism, where objects that reflect light differently appear the same under some specific illumination.&lt;/p&gt;
    &lt;p&gt;Observer metamerism is when objects appear different between observers, a good example of this is colorblindness.&lt;/p&gt;
    &lt;p&gt;The rendering equation gives us the light reflected towards a direction at a point by summing all the incoming lights at that point coming from direction in the hemisphere , weighted by the BRDF at that point and the cosine term.&lt;/p&gt;
    &lt;p&gt;Let's peel off this equation step by step, starting with the easiest part:&lt;/p&gt;
    &lt;p&gt;When a beam of light hits a surface, the area it touches is inversly proportional to the cosine of the angle of incidence. When the angle of incidence is , the area is at minimum and the intensity is concentrated, but the more the angle gets, the larger the area and the intensity gets spread out.&lt;/p&gt;
    &lt;p&gt;The BRDF is arguably the most important part of the rendering equation, it characterizes the surface of our material and its appearance. This is where the we can apply the microfacet theory and energy conservation to make our rendering model physically based.&lt;/p&gt;
    &lt;p&gt;It takes as input the incoming and outgoing light direction, and the roughness of the surface . It equals the diffuse and the specular components weighted by their respective coefficients and .&lt;/p&gt;
    &lt;p&gt;There are many different BRDFs, the most common in realtime rendering is the Cook-Torrance specular microfacet model combined with Lambertian diffuse model.&lt;/p&gt;
    &lt;p&gt;The lambertian diffuse component is the diffuse color, called albedo, multiplied by the cosine factor. But since we already have the cosine factor in the rendering equation, the diffuse equation becomes:&lt;/p&gt;
    &lt;p&gt;The Cook-Torrance specular component itself has three components: the normal distribution function , the geometric function and the Fresnel equation .&lt;/p&gt;
    &lt;p&gt;The normal distribution function is an approximation of the number of microfacets oriented in such a way that they will reflect light from the incoming direction to the outgoing direction .&lt;/p&gt;
    &lt;p&gt;The one we will use is the Trowbridge-Reitz GGX function:&lt;/p&gt;
    &lt;p&gt;is the halfway vector between the incoming and outgoing directions, we calculate it like this:&lt;/p&gt;
    &lt;p&gt;Some incoming rays get occluded by some microfacets before they get a chance to bounce off to the outgoing direction, this is called shadowing. Other rays get occluded by microfacets on their way to the outgoing direction, this is called masking. The geometric function approximates this effect.&lt;/p&gt;
    &lt;p&gt;Here we can see the shadowed rays in red and the masked rays in blue. The yellow rays succesfully reflected to the outgoing direction:&lt;/p&gt;
    &lt;p&gt;We will use the Schlick-GGX geometric function:&lt;/p&gt;
    &lt;p&gt;Where:&lt;/p&gt;
    &lt;p&gt;Like we discussed in the previous chapter, we will use the Fresnel-Schlick approximation which is fast for realtime rendering and accurate enough:&lt;/p&gt;
    &lt;p&gt;Now we can combine the diffuse and specular components to get our final PBR render:&lt;/p&gt;
    &lt;p&gt;Here is a grid of spheres with different roughness and metallic values on each axis:&lt;/p&gt;
    &lt;p&gt;Usually the metallic values is either 0 or 1, but it is useful in PBR rendering to consider intermediate values to smoothly interpolate between metals and non-metals. Take this rusted metal material for example:&lt;/p&gt;
    &lt;p&gt;Physically based rendering is a very vast topic and there is a lot more to cover.&lt;/p&gt;
    &lt;p&gt;In the chapter about the physics of light, I omitted the quantum explanation of light's behaviour using probability amplitudes. We didn't talk about the double slit experiment or the wave-particle duality. I may cover this in the future when I learn more about it, for now I'll leave you with this quote from Richard Feynman's QED book:&lt;/p&gt;
    &lt;quote&gt;The theory of quantum electrodynamics describes Nature as absurd from the point of view of common sense. And it agrees fully with experiment. So I hope you accept Nature as She is — absurd.&lt;/quote&gt;
    &lt;p&gt;We didn't talk about polarization and assumed all our light sources are unpolarized, this isn't very important for general rendering but can be useful for research.&lt;/p&gt;
    &lt;p&gt;We focused on surface rendering, in the future I will cover volume rendering, subsurface scattering, effects like optical dispersion, thin-film interference/iridescence...etc&lt;/p&gt;
    &lt;p&gt;There are a lot more implementation specific details. Whether we are implementing PBR in raytracing or rasterization, we need to use optimization techniques to make the rendering faster while still being accurate. Examples that come to mind are prefiltred envmaps and importance sampling (or efficient sampling in general).&lt;/p&gt;
    &lt;p&gt;This article is mainly based on this SIGGRAPH talk by Naty Hoffman and Physically Based Rendering: From Theory To Implementation&lt;/p&gt;
    &lt;p&gt;My main inspiration for writing interactive articles is this fantastic blog by Bartosz Ciechanowski. A lot of interactive demos in this article are similar to the ones in this post.&lt;/p&gt;
    &lt;p&gt;Other resources include LearnOpenGL, the ScienceClic youtube channel, and 3Blue1Brown of course.&lt;/p&gt;
    &lt;p&gt;I can't recommend enough the famous book QED: The Strange Theory of Light and Matter by Richard Feynman.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://imadr.me/pbr/"/></entry><entry><id>https://news.ycombinator.com/item?id=45106981</id><title>Vijaye Raji to become CTO of Applications with acquisition of Statsig</title><updated>2025-09-03T02:13:28.472050+00:00</updated><content>&lt;doc fingerprint="f974305d9fc3edac"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Vijaye Raji to become CTO of Applications with acquisition of Statsig&lt;/head&gt;
    &lt;p&gt;We’re expanding our Applications leadership, the org responsible for how our research reaches and benefits the world.&lt;/p&gt;
    &lt;p&gt;As we scale ChatGPT and build new applications to serve hundreds of millions of people and businesses around the world, our ambition is to push the frontier of AI research and turn it into intuitive, safe, and useful tools that people love. That takes strong engineering systems, fast iteration, and a long-term focus on quality and reliability.&lt;/p&gt;
    &lt;p&gt;Vijaye Raji will step into a new role as CTO of Applications, reporting to Fidji Simo, following the acquisition of Statsig. As a hands-on builder and trusted leader, Vijaye will head product engineering for ChatGPT and Codex, with responsibilities that span core systems and product lines including infrastructure and Integrity. His experience as founder and CEO of Statsig, and a decade leading large-scale consumer engineering at Meta, brings both entrepreneurial vision and operating expertise to scale our next generation of products.&lt;/p&gt;
    &lt;p&gt;“Vijaye has a remarkable record of building new consumer and B2B products and systems at scale. He’s joining at a time when our models are opening entirely new ways to build, and his leadership will help turn that progress into safe applications that empower people with many new tools to improve their lives, help companies increase their impact and allow developers to build faster and better products.”&lt;/p&gt;
    &lt;p&gt;—Fidji Simo, CEO of Applications, OpenAI&lt;/p&gt;
    &lt;p&gt;As part of this transition, we’re acquiring Statsig, one of the most trusted experimentation platforms in the industry—powering A/B testing, feature flagging, and real-time decisioning for some of the world’s most innovative companies, including OpenAI.&lt;/p&gt;
    &lt;p&gt;Vijaye and his team founded Statsig on the belief that the best products come from rapid experimentation, tight feedback loops, and data-informed decision-making.&lt;/p&gt;
    &lt;p&gt;The Statsig platform has already played a central role in how we ship and learn quickly. Bringing it in-house will strengthen our ability to accelerate experimentation across our Applications org and build even better, more responsive experiences for the people and businesses we serve.&lt;/p&gt;
    &lt;p&gt;“Joining OpenAI as CTO of Applications is an extraordinary opportunity to bring my experience scaling consumer and enterprise products to a mission I deeply believe in: advancing AI in ways that are capable of solving hard problems, reliable, and truly beneficial to people everywhere. The journey with Statsig has been deeply gratifying, leading me to this moment and giving me conviction that we will continue helping teams ship better software every day.”&lt;/p&gt;
    &lt;p&gt;—Vijaye Raji, incoming CTO of Applications, OpenAI&lt;/p&gt;
    &lt;p&gt;Once the acquisition is finalized, Statsig employees will become OpenAI employees. It will continue operating independently and serving its customer base out of its Seattle office. We’ll take a measured approach to any future integration, ensuring continuity for current customers and enabling the team to stay focused on what they do best.&lt;/p&gt;
    &lt;p&gt;The closing of the acquisition is subject to customary closing conditions, including receipt of regulatory approval.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/vijaye-raji-to-become-cto-of-applications-with-acquisition-of-statsig/"/></entry><entry><id>https://news.ycombinator.com/item?id=45107364</id><title>Show HN: Amber – better Beeper, a modern all-in-one messenger</title><updated>2025-09-03T02:13:28.326721+00:00</updated><content>&lt;doc fingerprint="2f512b770b2b50c2"&gt;
  &lt;main&gt;
    &lt;p&gt;Amber&lt;/p&gt;
    &lt;head rend="h1"&gt;The ultimate AI-enabled all-in-one messenger and personal CRM&lt;/head&gt;
    &lt;p&gt;iMessage, Whatsapp, and Telegram seamlessly in one place&lt;/p&gt;
    &lt;head rend="h3"&gt;Operate your relationships at the speed of thought&lt;/head&gt;
    &lt;p&gt;All messages in one place&lt;/p&gt;
    &lt;p&gt;iMessage, Whatsapp, Telegram in one place.&lt;/p&gt;
    &lt;p&gt;ð¨ Split Inboxes&lt;/p&gt;
    &lt;p&gt;Organize conversations by projects, communities, context, and remove all distractions.&lt;/p&gt;
    &lt;p&gt;â¨ AI Assistance (optional)&lt;/p&gt;
    &lt;p&gt;AI suggested replies and search.&lt;/p&gt;
    &lt;p&gt;â° Send Later &amp;amp; Reminders&lt;/p&gt;
    &lt;p&gt;Have perfect timing with scheduling and reminders.&lt;/p&gt;
    &lt;p&gt;â Command Bar &amp;amp; Shortcuts&lt;/p&gt;
    &lt;p&gt;Every action is at your fingertips. Navigate the app like a pro from the first minute.&lt;/p&gt;
    &lt;p&gt;ð Secure Chats&lt;/p&gt;
    &lt;p&gt;All your messages are end-to-end encrypted and stored on device. They go straight from your device to the network following the latest security standards.&lt;/p&gt;
    &lt;p&gt;ð A lightweight CRM&lt;/p&gt;
    &lt;p&gt;Never forget a crucial detail about anyone.&lt;/p&gt;
    &lt;p&gt;â Mark Done &amp;amp; Ninja Mode&lt;/p&gt;
    &lt;p&gt;The messages are read only when you mark them as read. The recipient doesn't know if you've read it until you say so.&lt;/p&gt;
    &lt;head rend="h2"&gt;Become a superconnector&lt;/head&gt;
    &lt;p&gt;We spend hours on messages. Yet we often reply late, sometimes completely forget to reply. We then end up losing deals, opportunities for connection, and missing connections.&lt;/p&gt;
    &lt;p&gt;It's not anybody's fault. Messaging itself has not changed a decade â it has just gotten messier. Our conversations are scattered across different social networks with distinct UI full of distractions. Finding the right thread takes minutes. The context and the small details are forgotten.&lt;lb/&gt;Meanwhile, some people manage thousands of relationships and only grow stronger connections. Whatâs their secret?&lt;/p&gt;
    &lt;p&gt;John D. Rockefeller had a rolodex filled with contact details of 100,000 people. Marlon Brando, Holly Solomon, Akio Morita, David Ogilvy â each relied on personal CRMs and skilled assistants to maintain and deepen their networks. They had systems. They had tools.&lt;/p&gt;
    &lt;p&gt;With the arrival of the latest AI models and well-crafted software, these capabilities are now within everyoneâs reach.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://useamber.app/"/></entry><entry><id>https://news.ycombinator.com/item?id=45107505</id><title>Civics is boring, so, let's encrypt something (2024)</title><updated>2025-09-03T02:13:27.296051+00:00</updated><content>&lt;doc fingerprint="86929a1018252219"&gt;
  &lt;main&gt;
    &lt;p&gt;It's a common trope in entertainment for some character to deliver a nonlinear response to something seemingly trivial, only for that to later prove to have been a vitally important clue. So, that room the janitor won't let anybody into? Right, that isn't actually a storage closet, but instead it's the Portal to Hell. Governments have a quirk like that in the sense that you can get away with a lot of crap—in particular, if it looks like it might benefit the economy—But Nobody Messes with Fundamental Human Rights, OK?&lt;/p&gt;
    &lt;p&gt;As I write this, the founder of the encrypted communication service Telegram is under arrest in France. And, depending on where you get your news, he's either a freedom fighter subject to political persecution or a criminal mastermind getting his due. He probably is a bit of both, but he's under arrest now because he messed with the Fundamental Human Rights of people in France.&lt;/p&gt;
    &lt;p&gt;I'll spare you a long civics lesson, but I will provide two important clues to figure out what is going on with politicians and encryption right now. First, when legislators write laws to protect human rights, they decide who has to take responsibility for the problem, and what happens if they fail to lift the burden. So, if you're present when somebody falls off a ladder, the law has made it your problem to try to save that person's life. If you witness a crime, the law has made it your problem to tell the truth about what you saw in court. Similarly, if you publish something that somebody else wrote, the law makes you responsible for ensuring it doesn't endanger national security.&lt;/p&gt;
    &lt;p&gt;Second clue: Judges are superusers. To perform their job, which is to correct wrongs, judges are empowered to write court orders that sanction otherwise illegal violations of human rights. So, a judge who is convinced you're about to kill somebody can unleash the police to follow you everywhere in hopes of preventing that crime. Similarly, a judge who thinks your computer system contains information related to financial crimes can allow the police to hack that system. Likewise, a judge who thinks you're stalking your ex can order you to stay out of a certain part of town. And if there doesn't seem to be any other way to keep you from harming somebody else's human rights, you can be jailed.&lt;/p&gt;
    &lt;p&gt;Then, should you fail to comply with a court order, that's considered contempt of court and can be addressed with punishments far more severe than most people imagine, since court orders are deemed to be crucially important to the maintenance of law and order. What's more, a judge who becomes convinced you are planning a crime or human-rights violation—or have participated in one—can order that the privacy of your communications be violated as part of a search for evidence.&lt;/p&gt;
    &lt;p&gt;The problem for law enforcement in all this is that modern computer-aided encryption is fast, effortless, omnipresent, and unbreakable, thus negating many of these efforts. This is the frustration law-enforcement types are referring to whenever they complain about "criminals going dark." It's also what leads some politicians to say silly things about "banning encryption."&lt;/p&gt;
    &lt;p&gt;It's not as if people didn't communicate in code previously, if only to save on telco expenses. But this used to be slow, bothersome, and error prone, which limited usage and left law enforcement with places to insert the knife—so it was somewhat tolerated.&lt;/p&gt;
    &lt;p&gt;IT libertarians have gone so far as to set up "offshore" services that employ encryption specifically designed to make it impossible for anyone to comply with a court order. So, because the Internet is global, now even petty criminals in Hoople, North Dakota, can effortlessly prevent judges from employing their superuser privileges.&lt;/p&gt;
    &lt;p&gt;This is a direct, in-your-face challenge to any state that considers itself to be a nation built on laws. Predictably, a response delivered with all due force is certain to come. The United Nations' new "cybercrime" treaty, readied for signatures at the time of this writing, is very much focused on how to get court orders to work quickly and efficiently across borders. Bear in mind that international bodies don't fashion treaties like this unless they think an urgent response is vital.&lt;/p&gt;
    &lt;p&gt;Which means we, as IT professionals, now have a choice to make. We can either sit by passively and suffer the consequences of whatever ill-conceived solution the politicians cook up for us, or we can participate in the process in hopes of achieving a less awful solution.&lt;/p&gt;
    &lt;p&gt;In terms of what might be done in that way, here's one straw-man proposal to consider.&lt;/p&gt;
    &lt;p&gt;First, we provide legislators with the essential technical tools.&lt;/p&gt;
    &lt;p&gt;We can make it possible for one side of a TLS protocol negotiation to declare, "I'll deal with court orders related to this communication," in such a way that law enforcement can find out where to send the court order for their wiretap without learning more than they already know.&lt;/p&gt;
    &lt;p&gt;Moreover, parties to a TLS connection should be able to insist that the session key starts with a certain number of zero bits. If the other party thinks that isn't good enough, the TLS handshake fails.&lt;/p&gt;
    &lt;p&gt;Then the legislators can get to work. First, they'll need to make it a crime to force or trick anyone into using stronger encryption than they consent to, no matter how that might be done. (Note that IT liberalists who claim encryption is a human right never realize this should also include the right not to be forced to use encryption against one's will.)&lt;/p&gt;
    &lt;p&gt;Second, they'll need to lay out what it takes for an attestation to handle court orders to be validated—along with the consequences for noncompliance. This will probably be something along the lines of: "The attestation must be signed with Interpol's or XYZ government's certificate."&lt;/p&gt;
    &lt;p&gt;Third, it will need to be legislated that, if the other end attested to handling court orders or if the session key requires fewer than N bits to brute force, you will not be subject to any adverse treatment for using encryption. (N is a political choice since the hardware that law enforcement will need in order to brute-force the N bits will be paid for out of your taxes. Don't argue here; take it up with your politicians.)&lt;/p&gt;
    &lt;p&gt;Then, fourth and finally (drum roll, please!), they'll need to allow courts to jail the accused until: (a) the communication has been decrypted by someone; (b) the maximum penalty for the charged crime has been exceeded; or (c) the court decides to release the accused.&lt;/p&gt;
    &lt;p&gt;Following a bit of implementation work, your browser or mobile phone will then work as follows:&lt;/p&gt;
    &lt;p&gt;You'll configure your jurisdiction—for example, USA, EU, or China—so that the browser will know how to validate attestations from the other end.&lt;/p&gt;
    &lt;p&gt;Whenever you connect to a site that attests, you'll be able to use any kind of encryption with any key size, and since almost all commercial sites, such as your bank, already are legally required to keep records and respond to court orders, they'll have no trouble attesting.&lt;/p&gt;
    &lt;p&gt;Should you contact a site that does not attest—be it Crimes R Us in Elbonia or your Homeowner Association's "50 Rules for Appropriate Lawn Maintenance," your browser will keep you out of jail by refusing to use a session key longer than the N legal bits.&lt;/p&gt;
    &lt;p&gt;If for some reason, however, you think that isn't nearly enough encryption, you'll also be at liberty to go into your browser settings to select whatever session key size you are willing to use—provided, of course, that the other end accepts that as well.&lt;/p&gt;
    &lt;p&gt;The slider should probably be graduated in units of time, days, weeks, months, and years since what you're really setting is the length of time you're willing to rot in jail while refusing to comply with a court order.&lt;/p&gt;
    &lt;p&gt;It goes without saying that you'll suffer no ill consequences even if you set the slider to "eternity," provided you keep a logfile of all your session keys and then hand them over whenever a court order demands it. Just make sure you don't lose that file.&lt;/p&gt;
    &lt;p&gt;Companies can also set up client-side proxies that attest to handling court orders and insist upon proper session key sizes, according to company policy, so their employees won't even have to think about it.&lt;/p&gt;
    &lt;p&gt;Which is to say that this straw-man proposal, in theory, ought to make everybody happy. What's not to like? Law enforcement will have ways to gain access to communications, provided they can convince a judge it's necessary. All important communications will be able to continue using the same strength of encryption they use today. Communications that didn't require encryption in the first place, like that HOA guide to proper lawn maintenance, will be able to employ sufficient encryption to prevent trivial wiretapping, but nothing strong enough to prevent brute-force access should a judge decide that's necessary. And if legislators think that too much or too little encryption is being brute-forced, they can always revise the law to change N.&lt;/p&gt;
    &lt;p&gt;IT libertarians, meanwhile, will have the freedom to encrypt any way they please, and they can even throw away their session keys if they so choose, but they won't be able to force anyone else to do so. If they try, they'll have to stand up in court for it—just like that IT libertarian who's currently in French custody.&lt;/p&gt;
    &lt;p&gt;In reality, I expect that law enforcement will demand more access and that IT libertarians will consider any kind of compromise to be treasonous. So, no, I do not expect my proposed compromise has any chance of adoption whatsoever.&lt;/p&gt;
    &lt;p&gt;But, then, don't tell me 10 or 20 years from now that we didn't have any other options.&lt;/p&gt;
    &lt;p&gt;Poul-Henning Kamp has haunted the Unix world for 40 years and written a lot of widely used open-source software, including bits of FreeBSD and the Varnish HTTP Cache. Living in Denmark with his wife, two cats, and three lawn-mower robots, he remains unconvinced that an older/wiser correlation exists.&lt;/p&gt;
    &lt;p&gt;Copyright © 2024 held by owner/author. Publication rights licensed to ACM.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; Originally published in Queue vol. 22, no. 5— &lt;lb/&gt; Comment on this article in the ACM Digital Library &lt;/p&gt;
    &lt;p&gt; Jinnan Guo, Peter Pietzuch, Andrew Paverd, Kapil Vaswani - Trustworthy AI using Confidential Federated Learning &lt;lb/&gt; The principles of security, privacy, accountability, transparency, and fairness are the cornerstones of modern AI regulations. Classic FL was designed with a strong emphasis on security and privacy, at the cost of transparency and accountability. CFL addresses this gap with a careful combination of FL with TEEs and commitments. In addition, CFL brings other desirable security properties, such as code-based access control, model confidentiality, and protection of models during inference. Recent advances in confidential computing such as confidential containers and confidential GPUs mean that existing FL frameworks can be extended seamlessly to support CFL with low overheads. &lt;/p&gt;
    &lt;p&gt; Raluca Ada Popa - Confidential Computing or Cryptographic Computing? &lt;lb/&gt; Secure computation via MPC/homomorphic encryption versus hardware enclaves presents tradeoffs involving deployment, security, and performance. Regarding performance, it matters a lot which workload you have in mind. For simple workloads such as simple summations, low-degree polynomials, or simple machine-learning tasks, both approaches can be ready to use in practice, but for rich computations such as complex SQL analytics or training large machine-learning models, only the hardware enclave approach is at this moment practical enough for many real-world deployment scenarios. &lt;/p&gt;
    &lt;p&gt; Matthew A. Johnson, Stavros Volos, Ken Gordon, Sean T. Allen, Christoph M. Wintersteiger, Sylvan Clebsch, John Starks, Manuel Costa - Confidential Container Groups &lt;lb/&gt; The experiments presented here demonstrate that Parma, the architecture that drives confidential containers on Azure container instances, adds less than one percent additional performance overhead beyond that added by the underlying TEE. Importantly, Parma ensures a security invariant over all reachable states of the container group rooted in the attestation report. This allows external third parties to communicate securely with containers, enabling a wide range of containerized workflows that require confidential access to secure data. Companies obtain the advantages of running their most confidential workflows in the cloud without having to compromise on their security requirements. &lt;/p&gt;
    &lt;p&gt; Charles Garcia-Tobin, Mark Knight - Elevating Security with Arm CCA &lt;lb/&gt; Confidential computing has great potential to improve the security of general-purpose computing platforms by taking supervisory systems out of the TCB, thereby reducing the size of the TCB, the attack surface, and the attack vectors that security architects must consider. Confidential computing requires innovations in platform hardware and software, but these have the potential to enable greater trust in computing, especially on devices that are owned or controlled by third parties. Early consumers of confidential computing will need to make their own decisions about the platforms they choose to trust. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://queue.acm.org/detail.cfm?id=3703126"/></entry><entry><id>https://news.ycombinator.com/item?id=45107891</id><title>Amazon must face US nationwide class action over third-party sales</title><updated>2025-09-03T02:13:26.992076+00:00</updated><content/><link href="https://www.reuters.com/legal/government/amazon-must-face-us-nationwide-class-action-over-third-party-sales-2025-09-02/"/></entry><entry><id>https://news.ycombinator.com/item?id=45107962</id><title>A staff engineer's journey with Claude Code</title><updated>2025-09-03T02:13:26.541903+00:00</updated><content>&lt;doc fingerprint="1e680603ea861e8e"&gt;
  &lt;main&gt;
    &lt;p&gt;This started as an internal Sanity workshop where I demoed how I actually use AI. Spoiler: it's running multiple agents like a small team with daily amnesia.&lt;/p&gt;
    &lt;p&gt;Vincent Quigley&lt;/p&gt;
    &lt;p&gt;Vincent Quigley is a Staff Software Engineer at Sanity&lt;/p&gt;
    &lt;p&gt;Published&lt;/p&gt;
    &lt;p&gt;Until 18 months ago, I wrote every line of code myself. Today, AI writes 80% of my initial implementations while I focus on architecture, review, and steering multiple development threads simultaneously.&lt;/p&gt;
    &lt;p&gt;This isn't another "AI will change everything" post. This is about the messy reality of integrating AI into production development workflows: what actually works, what wastes your time, and why treating AI like a "junior developer who doesn't learn" became my mental model for success.&lt;/p&gt;
    &lt;p&gt;The backstory: We run monthly engineering workshops at Sanity where someone presents what they've been experimenting with. Last time was my turn, and I showed how I'd been using Claude Code.&lt;/p&gt;
    &lt;p&gt;This blog post is from my presentation at our internal workshop (10-min recording below).&lt;/p&gt;
    &lt;p&gt;My approach to solving code problems has pivoted four times in my career:&lt;/p&gt;
    &lt;p&gt;For the first 5 years, I was reading books and SDK documentation.&lt;/p&gt;
    &lt;p&gt;Then 12 years of googling for crowd-sourced answers.&lt;/p&gt;
    &lt;p&gt;It was 18 months of using Cursor for AI-assisted coding&lt;/p&gt;
    &lt;p&gt;And recently, 6 weeks of using Claude Code for full AI delegation&lt;/p&gt;
    &lt;p&gt;Each transition happened faster than the last. The shift to Claude Code? That took just hours of use for me to become productive.&lt;/p&gt;
    &lt;p&gt;Here's what my workflow looks like now, stripped of the hype. I use AI mostly "to think with" as I'm working with it towards the code that ends up in production.&lt;/p&gt;
    &lt;p&gt;Forget the promise of one-shot perfect code generation. Your job as an engineer is to find the best solution for the problem, not just write a bunch of code.&lt;/p&gt;
    &lt;p&gt;Then you take the learnings from this attempt and feed it back.&lt;/p&gt;
    &lt;p&gt;This isn't failure; it's the process! Expecting perfection on attempt one is like expecting a junior developer to nail a complex feature without context.&lt;/p&gt;
    &lt;p&gt;The biggest challenge? AI can't retain learning between sessions (unless you spend the time manually giving it the "memories"). So typically, every conversation starts fresh.&lt;/p&gt;
    &lt;p&gt;My solutions:&lt;/p&gt;
    &lt;p&gt;Create a project-specific context file with:&lt;/p&gt;
    &lt;p&gt;Thanks to MCP integrations, I can now connect my AI to:&lt;/p&gt;
    &lt;p&gt;Without this context, you're explaining the same constraints repeatedly. With it, you start at attempt two instead of attempt one.&lt;/p&gt;
    &lt;p&gt;I run multiple Claude instances in parallel now, it's like managing a small team of developers who reset their memory each morning.&lt;/p&gt;
    &lt;p&gt;Key strategies:&lt;/p&gt;
    &lt;p&gt;Writing code is one part of the job, but so is reviewing code. Adopting AI has evolved my code review process as well.&lt;/p&gt;
    &lt;p&gt;This saves me and my peers time and extra rounds.&lt;/p&gt;
    &lt;p&gt;At Sanity, our policy is that the engineer is responsible for the code they ship, even if it's AI generated. I want to make sure that I ship:&lt;/p&gt;
    &lt;p&gt;The key take away: I'm more critical of "my code" now because I didn't type out a lot of it. No emotional attachment means better reviews.&lt;/p&gt;
    &lt;p&gt;We're testing Slack-triggered agents using Cursor for simple tasks:&lt;/p&gt;
    &lt;p&gt;Current limitations:&lt;/p&gt;
    &lt;p&gt;But the potential? Imagine agents handling your backlog's small tickets while you sleep. We're actively exploring this at Sanity, sharing learnings across teams as we figure out what works.&lt;/p&gt;
    &lt;p&gt;Let's talk money. My Claude Code usage costs my company not an insignificant percent of what they pay me monthly.&lt;/p&gt;
    &lt;p&gt;But for that investment:&lt;/p&gt;
    &lt;p&gt;The ROI is obvious, but budget for $1000-1500/month for a senior engineer going all-in on AI development. It's also reasonable to expect engineers to get more efficient with AI spend as they get good with it, but give them time.&lt;/p&gt;
    &lt;p&gt;Not everything in AI-assisted development is smooth. Here are the persistent challenges I find myself in:&lt;/p&gt;
    &lt;p&gt;The learning problem&lt;lb/&gt;AI doesn't learn from mistakes. You fix the same misunderstandings repeatedly. Your solution: better documentation and more explicit instructions.&lt;/p&gt;
    &lt;p&gt;The confidence problem&lt;lb/&gt;AI confidently writes broken code claiming that it's great. Always verify, especially for:&lt;/p&gt;
    &lt;p&gt;The context limit problem&lt;lb/&gt;Large codebases overwhelm AI context windows. Break problems into smaller chunks and provide focused context.&lt;/p&gt;
    &lt;p&gt;The hardest part? Letting go of code ownership. But now I don't care about "my code" anymore; it's just output to review and refine.&lt;/p&gt;
    &lt;p&gt;This detachment is actually quite liberating!&lt;/p&gt;
    &lt;p&gt;If a better AI tool appears tomorrow, I'll switch immediately. The code isn't precious; the problems we solve are.&lt;/p&gt;
    &lt;p&gt;If I were to give advice from an engineer's perspective, if you're a technical leader considering AI adoption:&lt;/p&gt;
    &lt;p&gt;The engineers who adapt to the new AI workflows will find themselves with a new sharp knife in their toolbox: They're becoming orchestrators, handling multiple AI agents while focusing on architecture, review, and complex problem-solving.&lt;/p&gt;
    &lt;p&gt;Pick one small, well-defined feature. Give AI three attempts at implementing it. Review the output like you're mentoring a junior developer.&lt;/p&gt;
    &lt;p&gt;That's it. No huge transformation needed, no process overhaul required. Just one feature, three attempts, and a honest review.&lt;/p&gt;
    &lt;p&gt;The future isn't about AI replacing developers. It's about developers working faster, creating better solutions, and leveraging the best tools available.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.sanity.io/blog/first-attempt-will-be-95-garbage"/></entry><entry><id>https://news.ycombinator.com/item?id=45108066</id><title>Making a Linux home server sleep on idle and wake on demand (2023)</title><updated>2025-09-03T02:13:26.362182+00:00</updated><content>&lt;doc fingerprint="96f37d91e92280c3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Making a Linux home server sleep on idle and wake on demand â the simple way&lt;/head&gt;
    &lt;p&gt;It began with what seemed like a final mundane touch to my home server setup for hosting Time Machine backups: I wanted it to automatically sleep when idle and wake up again when needed. You know, sleep on idle â hasnât Windows had that built in since like Windows 98? How hard could it be to configure on a modern Ubuntu install?&lt;/p&gt;
    &lt;p&gt;To be fair, I wanted more than just sleep on idle, I also wanted wake on request â and that second bit turns out to be the hard part. There were a bunch of dead ends, but I stuck out it to find something that âjust worksâ without the need to manually turn on the server for every backup. Join me on the full adventure further down, or cut to the chase with the setup instructions below.&lt;/p&gt;
    &lt;head rend="h1"&gt;tl;dr&lt;/head&gt;
    &lt;head rend="h4"&gt;Outcome:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Server automatically suspends to RAM when idle&lt;/item&gt;
      &lt;item&gt;Server automatically wakes when needed by anything else on the network, including SSH, Time Machine backups, etc.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Youâll need:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;An always-on Linux device on the same network as your server, e.g. a Raspberry Pi&lt;/item&gt;
      &lt;item&gt;A network interface device for your server that supports wake-on-LAN with unicast packets&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;On the server:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable wake-on-LAN with unicast packets (not just magic packets), make it persistent&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sudo ethtool -s eno1 wol ug
sudo tee /etc/networkd-dispatcher/configuring.d/wol &amp;lt;&amp;lt; EOF
#!/usr/bin/env bash

ethtool -s eno1 wol ug || true
EOF
sudo chmod 755 /etc/networkd-dispatcher/configuring.d/wol
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set up a cron job to sleep on idle (replace &lt;code&gt;/home/ubuntu&lt;/code&gt;with your desired script location)&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;tee /home/ubuntu/auto-sleep.sh &amp;lt;&amp;lt; EOF
#!/bin/bash
logged_in_count=$(who | wc -l)
# We expect 2 lines of output from `lsof -i:548` at idle: one for output headers, another for the 
# server listening for connections. More than 2 lines indicates inbound connection(s).
afp_connection_count=$(lsof -i:548 | wc -l)
if [[ $logged_in_count &amp;lt; 1 &amp;amp;&amp;amp; $afp_connection_count &amp;lt; 3 ]]; then
  systemctl suspend
else
  echo "Not suspending, logged in users: $logged_in_count, connection count: $afp_connection_count"
fi
EOF
chmod +x /home/ubuntu/auto-sleep.sh
sudo crontab -e
# In the editor, add the following line:
*/10 * * * * /home/ubuntu/auto-sleep.sh | logger -t autosuspend
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Disable IPv6: this approach relies on ARP, which IPv6 doesnât use&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sudo nano /etc/default/grub
# Find GRUB_CMDLINE_LINUX=""
# Change to GRUB_CMDLINE_LINUX="ipv6.disable=1"
sudo update-grub
sudo reboot
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Optional: Configure network services (e.g. Netatalk) to stop before sleep to prevent unwanted wakeups due to network activity&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sudo tee /etc/systemd/system/netatalk-sleep.service &amp;lt;&amp;lt; EOF
[Unit]
Description=Netatalk sleep hook
Before=sleep.target
StopWhenUnneeded=yes

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=-/usr/bin/systemctl stop netatalk
ExecStop=-/usr/bin/systemctl start netatalk

[Install]
WantedBy=sleep.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable netatalk-sleep.service
&lt;/code&gt;
    &lt;head rend="h4"&gt;On the always-on device:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install ARP Stand-in: a super simple Ruby script that runs as a system service and responds to ARP requests on behalf of another machine. Configure it to respond on behalf of the sleeping server.&lt;/item&gt;
      &lt;item&gt;Optional: Configure Avahi to advertise network services on behalf of the server when itâs sleeping.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sudo apt install avahi-daemon
sudo tee /etc/systemd/system/avahi-publish.service &amp;lt;&amp;lt; EOF
[Unit]
Description=Publish custom Avahi records
After=network.target avahi-daemon.service
Requires=avahi-daemon.service

[Service]
ExecStart=/usr/bin/avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable avahi-publish.service --now
systemctl status avahi-publish.service
&lt;/code&gt;
    &lt;head rend="h4"&gt;Caveats&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The serverâs network device needs to support wake-on-LAN from unicast packets&lt;/item&gt;
      &lt;item&gt;To prevent unwanted wake-ups, youâll need to ensure no device on the network is sending extraneous packets to the server&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;How I got there&lt;/head&gt;
    &lt;p&gt;First, a bit about my hardware, as this solution is somewhat hardware-dependent:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HP ProDesk 600 G3 SFF&lt;/item&gt;
      &lt;item&gt;CPU: Intel Core i5-7500&lt;/item&gt;
      &lt;item&gt;Network adapter: Intel I219-LM&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Sleeping on idle&lt;/head&gt;
    &lt;p&gt;I started with sleep-on-idle, which boiled down to two questions:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;How to determine if the server is idle or busy at any given moment&lt;/item&gt;
      &lt;item&gt;How to automatically suspend to RAM after being idle for some time&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Most of the guides I found for sleep-on-idle, like this one, were for Ubuntu Desktop â sleep-on-idle doesnât seem to be something thatâs commonly done with Ubuntu Server. I came across a few tools that looked promising, the most notable being &lt;code&gt;circadian&lt;/code&gt;. In general, though, there didnât seem to be a standard/best-practice way to do it, so I decided Iâd roll it myself the simplest way I could.&lt;/p&gt;
    &lt;head rend="h3"&gt;Determining idle/busy state&lt;/head&gt;
    &lt;p&gt;I asked myself what server activity would constitute being busy, and landed on two things:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Logged in SSH sessions&lt;/item&gt;
      &lt;item&gt;In-progress Time Machine backups&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Choosing corresponding metrics was pretty straightforward:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Count of logged in users, using &lt;code&gt;who&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Count of connections on the AFP port (548), using &lt;code&gt;lsof&lt;/code&gt;(Iâm using AFP for Time Machine network shares)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For both metrics, I noted the values first at idle, and then again when the server was busy.&lt;/p&gt;
    &lt;head rend="h3"&gt;Automatically suspending to RAM&lt;/head&gt;
    &lt;p&gt;To keep things simple, I opted for a cron job that triggers a bash script â check out the final version shared above. So far itâs worked fine; if I ever need to account for more metrics in detecting idle state, Iâll consider using a more sophisticated option like &lt;code&gt;circadian&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Waking on request&lt;/head&gt;
    &lt;p&gt;With sleep-on-idle out of the way, I moved on to figuring out how the server would wake on demand.&lt;/p&gt;
    &lt;p&gt;Could the machine be configured to automatically wake upon receiving a network request? I knew Wake-on-LAN supported waking a computer up using a specially crafted âmagic packetâ, and it was straightforward to get this working. The question was if a regular, non-âmagic packetâ could somehow do the same thing.&lt;/p&gt;
    &lt;head rend="h3"&gt;Wake on PHY?&lt;/head&gt;
    &lt;p&gt;Some online searching yielded a superuser discussion that looked particularly promising. It pointed to the man page for ethtool, the Linux utility used to configure network hardware. It shared ethtoolâs complete wake-on-LAN configuration options:&lt;/p&gt;
    &lt;code&gt;wol p|u|m|b|a|g|s|f|d...
      Sets Wake-on-LAN options.  Not all devices support
      this.  The argument to this option is a string of
      characters specifying which options to enable.

      p   Wake on PHY activity
      u   Wake on unicast messages
      m   Wake on multicast messages
      b   Wake on broadcast messages
      a   Wake on ARP
      g   Wake on MagicPacketâ¢
      s   Enable SecureOnâ¢ password for MagicPacketâ¢
      f   Wake on filter(s)
      d   Disable (wake on nothing).  This option
          clears all previous options.
&lt;/code&gt;
    &lt;p&gt;It pointed in particular to the &lt;code&gt;Wake on PHY activity&lt;/code&gt; option, which seemed perfect for this use-case. It seemed to mean that any packet sent to the network interfaceâs MAC address would wake it. I enabled the flag using &lt;code&gt;ethtool&lt;/code&gt;, manually put the machine to sleep, then tried logging back in using SSH and sending pings. No dice: the machine remained asleep despite multiple attempts. So much for that ð&lt;/p&gt;
    &lt;head rend="h3"&gt;Breakthrough: wake on unicast&lt;/head&gt;
    &lt;p&gt;None of &lt;code&gt;ethtool&lt;/code&gt;âs other wake-on-LAN options seemed relevant, but some more searching pointed to the &lt;code&gt;Wake on unicast messages&lt;/code&gt; as another option to try. I enabled the flag using &lt;code&gt;ethtool&lt;/code&gt;, manually put the machine to sleep, then tried logging back in using SSH. Bingo! This time, the machine woke up. ð With that, I figured I was done.&lt;/p&gt;
    &lt;p&gt;Not so fast â there were two problems:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Sometimes, the server would wake up without any network activity that I knew of&lt;/item&gt;
      &lt;item&gt;Some period of time after the server went to sleep, it would become impossible to wake it again using network activity other than a magic packet&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A closer look at the same superuser discussion above revealed exactly the reason for the second problem: shortly after going to sleep, the machine was effectively disappearing from the network because it was no longer responding to ARP requests.&lt;/p&gt;
    &lt;head rend="h3"&gt;ARP&lt;/head&gt;
    &lt;p&gt;So the cached ARP entry for other machines on the network was expiring, meaning that they had no way to resolve the serverâs IP address to its MAC address. In other words, an attempt to ping my server at &lt;code&gt;192.168.1.2&lt;/code&gt; was failing to even send a packet to the server, because the serverâs MAC address wasnât known. Without a packet being sent, there was no way that server was going to wake up.&lt;/p&gt;
    &lt;head rend="h4"&gt;Static ARP?&lt;/head&gt;
    &lt;p&gt;My first reaction: letâs manually create ARP cache entries on each network client. This is indeed possible on macOS using:&lt;/p&gt;
    &lt;code&gt;sudo arp -s [IP address] [MAC address]
&lt;/code&gt;
    &lt;p&gt;But it also didnât meet the goal of having things âjust workâ: I was not interested in creating static ARP cache entries on each machine that would be accessing the server. On to other options.&lt;/p&gt;
    &lt;head rend="h4"&gt;ARP protocol offload?&lt;/head&gt;
    &lt;p&gt;Some more searching revealed something interesting: this problem had already been solved long ago in the Windows world.&lt;/p&gt;
    &lt;p&gt;It was called ARP protocol offload, and it goes like this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The network hardware is capable of responding to ARP requests independently of the CPU&lt;/item&gt;
      &lt;item&gt;Before going to sleep, the OS configures the network hardware to respond to ARP requests&lt;/item&gt;
      &lt;item&gt;While sleeping, the network hardware responds to ARP requests on its own, without waking the rest of the machine to use the CPU&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Voila, this was exactly what I needed. I even looked at the datasheet for my network hardware, which lists ARP Offload as a feature on the front page.&lt;/p&gt;
    &lt;p&gt;The only problem? No Linux support. I searched the far reaches of the internet, then finally dug into the Linux driver source code to find that ARP offload isnât supported by the Linux driver. This was when I briefly pondered trying to patch the driver to add ARP offloadâ¦ before reminding myself that successfully patching Linux driver code is far beyond what I could hope to achieve in a little free-time project like this one. (Though maybe one dayâ¦)&lt;/p&gt;
    &lt;head rend="h4"&gt;Other solutions using magic packets&lt;/head&gt;
    &lt;p&gt;Some more searching led me to some other clever and elaborate solutions involving magic packets. The basic idea was to automate sending magic packets. One solution (wake-on-arp) listens for ARP requests to a specified host to trigger sending a magic packet to that host. Another solution implements a web interface and Home Assistant integration to enable triggering a magic packet from a smartphone web browser. These are impressive, but I wanted something simpler that didnât require manually waking up the server.&lt;/p&gt;
    &lt;p&gt;I considered a few other options, but abandoned them because they felt too complex and prone to breaking:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Writing a script to send a magic packet and then immediately trigger a Time Machine backup using &lt;code&gt;tmutil&lt;/code&gt;. The script would need to be manually installed and scheduled to run periodically on each Mac.&lt;/item&gt;
      &lt;item&gt;Using HAProxy to proxy all relevant network traffic through the Raspberry Pi and using a hook to send a magic packet to the server on activity.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Breakthrough: ARP Stand-in&lt;/head&gt;
    &lt;p&gt;What I was attempting didnât seem much different from the static IP mapping thatâs routinely configured on home routers, except that it was for DHCP instead of ARP. Was there no way to make my router do the same thing for ARP?&lt;/p&gt;
    &lt;p&gt;Some more digging into the ARP protocol revealed that ARP resolution doesnât even require a specific, authoritative host to answer requests â any other network device can respond to ARP requests. In other words, my router didnât need to be the one resolving ARP requests, it could be anything. Now how could I just set up something to respond on behalf of the sleeping server?&lt;/p&gt;
    &lt;p&gt;Hereâs what I was trying to do:&lt;/p&gt;
    &lt;p&gt;I thought it must be possible to implement as a Linux network configuration, but the closest thing I found was Proxy ARP, which accomplished a different goal. So I went one level deeper, to network programming.&lt;/p&gt;
    &lt;p&gt;Now, how to go about listening for ARP request packets? This is apparently possible to do using a raw socket, but I also knew that &lt;code&gt;tcpdump&lt;/code&gt; and Wireshark were capable of using filters to capture only packets of a given type. That led me to look into libpcap, the library that powers both of those tools. I learned that using &lt;code&gt;libpcap&lt;/code&gt; had a clear advantage over a raw socket: &lt;code&gt;libpcap&lt;/code&gt; implements very efficient filtering directly in the kernel, whereas a raw socket would require manual packet filtering in user space, which is less performant.&lt;/p&gt;
    &lt;p&gt;Aiming to keep things simple, I decided to try writing the solution in Ruby, which led me to the pcaprub Ruby bindings for &lt;code&gt;libpcap&lt;/code&gt;. From there, I just needed to figure out what filter to use with &lt;code&gt;libpcap&lt;/code&gt;. Some research and trial/error yielded this filter:&lt;/p&gt;
    &lt;code&gt;arp and arp[6:2] == 1 and arp[24:4] == [IP address converted to hex]
&lt;/code&gt;
    &lt;p&gt;For example, using a target IP address of &lt;code&gt;192.168.1.2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;arp and arp[6:2] == 1 and arp[24:4] == 0xc0a80102
&lt;/code&gt;
    &lt;p&gt;Letâs break this down, using the ARP packet structure definition for byte offets and lengths:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;arp&lt;/code&gt;â ARP packets&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;arp[6:2] == 1&lt;/code&gt;â ARP request packets.&lt;code&gt;[6:2]&lt;/code&gt;means âthe 2 bytes found at byte offset 6â.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;arp[24:4] == [IP address converted to hex]&lt;/code&gt;â ARP packets with the specified target address.&lt;code&gt;[24:4]&lt;/code&gt;means âthe 4 bytes found at byte offset 24â.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The rest is pretty straightforward and the whole solution comes out to only ~50 lines of Ruby code. In short, &lt;code&gt;arp_standin&lt;/code&gt; is a daemon that does the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Starts up, taking these configuration options: &lt;list rend="ul"&gt;&lt;item&gt;IP and MAC address of the machine itâs standing in for (the âtargetâ)&lt;/item&gt;&lt;item&gt;Network interface to operate on&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Listens for ARP requests for the targetâs IP address&lt;/item&gt;
      &lt;item&gt;On detecting an ARP request for the targetâs IP address, responds with the targetâs MAC address&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Since the serverâs IP â MAC address mapping is defined statically through the &lt;code&gt;arp_standin&lt;/code&gt; daemonâs configuration, it doesnât matter if the Raspberry Piâs ARP cache entry for the server is expired.&lt;/p&gt;
    &lt;p&gt;Check out the link below to install it or explore the source code further:&lt;/p&gt;
    &lt;p&gt;danielpgross/arp_standin on GitHub&lt;/p&gt;
    &lt;p&gt;ARP is used in IPv4 and is replaced by Neighbor Discovery Protocol (NDP) in IPv6. I donât have any need for IPv6 right now, so I disabled IPv6 entirely on the server using the steps shown above. It should be possible to add support for Neighbor Discovery to the ARP-Standin service as a future enhancement.&lt;/p&gt;
    &lt;p&gt;With the new service running on my Raspberry Pi, I used Wireshark to confirm that ARP requests being sent to the server were triggering responses from the ARP Stand-in. It worked ð â things were looking promising.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting it all working&lt;/head&gt;
    &lt;p&gt;The big pieces were in place:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;the server went to sleep after becoming idle&lt;/item&gt;
      &lt;item&gt;the server could wake up from unicast packets&lt;/item&gt;
      &lt;item&gt;other machines could resolve the serverâs MAC address using ARP, long after it went to sleep&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;With the ARP Stand-in running, I turned on the server and ran a backup from my computer. When the backup was finished, the server went to sleep automatically. But there was a problem: the server was waking up immediately after going to sleep.&lt;/p&gt;
    &lt;head rend="h3"&gt;Unwanted wake-ups&lt;/head&gt;
    &lt;p&gt;First thing I checked was the Linux system logs, but these didnât prove too helpful, since they didnât show what network packet actually triggered the wakeup. Wireshark/tcpdump were no help here either, because they wouldnât be running when the computer was sleeping. Thatâs when I thought to use port mirroring: capturing packets from an intermediary device between the server and the rest of the network. After a brief, unsuccessful attempt to repurpose an extra router running OpenWRT, a search for the least expensive network switch with port mirroring support yielded the TP-Link TL-SG105E for ~$30.&lt;/p&gt;
    &lt;p&gt;With the switch connected and port mirroring enabled, I started capturing with Wireshark and the culprits immediately became clear:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;My Mac, which was configured to use the server as a Time Machine backup host using AFP, was sending AFP packets to the server after it had gone to sleep&lt;/item&gt;
      &lt;item&gt;My Netgear R7000, acting as a wireless access point, was sending frequent, unsolicited NetBIOS &lt;code&gt;NBTSTAT&lt;/code&gt;queries to the server&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Eliminating AFP packets&lt;/head&gt;
    &lt;p&gt;I had a hunch about why the Mac was sending these packets:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Mac mounted the AFP share to perform a Time Machine backup&lt;/item&gt;
      &lt;item&gt;The Time Machine backup finished, but the share remained mounted&lt;/item&gt;
      &lt;item&gt;The Mac was checking on the status of the share periodically, as would be done normally for a mounted network share&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I also had a corresponding hunch that the solution would be to make sure the share got unmounted before the server went to sleep, so that the Mac would no longer ping the server for its status afterwards. I figured that shutting down the AFP service would trigger unmounting of shares on all its clients, achieving the goal. Now I just needed to ensure the service would shut down when the server was going to sleep, then start again when it woke back up.&lt;/p&gt;
    &lt;p&gt;Fortunately, &lt;code&gt;systemd&lt;/code&gt; supports exactly that, and relatively easily â I defined a dedicated &lt;code&gt;systemd&lt;/code&gt; service to hook into sleep/wake events (check out the configuration shared above). A Wireshark capture confirmed that it did the trick.&lt;/p&gt;
    &lt;head rend="h4"&gt;Eliminating NetBIOS packets&lt;/head&gt;
    &lt;p&gt;This one proved to be harder, because the packets were unsolicited â they seemed random and unrelated to any activity being done by the server. I thought they might be related to Samba services running on the server, but the packets persisted even after I completely removed Samba from the server.&lt;/p&gt;
    &lt;p&gt;Why was my network router sending NetBIOS requests, anyway? Turns out that Netgear routers have a feature called ReadySHARE for sharing USB devices over the network using the SMB protocol. Presumably, the router firmware uses Samba behind the scenes, which uses NetBIOS queries to build and maintain its own representation of NetBIOS hosts on the network. Easy â turn off ReadySHARE, right? Nope, thereâs no way to do that in Netgearâs stock firmware ð.&lt;/p&gt;
    &lt;p&gt;That led me to take the plunge and flash the router with open-source FreshTomato firmware. Iâm glad I did, because the firmware is much better than the stock one anyway, and it immediately stopped the unwanted NetBIOS packets.&lt;/p&gt;
    &lt;head rend="h3"&gt;Time Machine not triggering wake-up&lt;/head&gt;
    &lt;p&gt;I was getting close now: the server remained asleep, and I could reliably wake it up by logging in with SSH, even long after it went to sleep.&lt;/p&gt;
    &lt;p&gt;This was great, but one thing wasnât working: when starting a backup on my Mac, Time Machine would show a loading state indefinitely with &lt;code&gt;Connecting to backup disk...&lt;/code&gt; and eventually give up. Was the server failing to wake up from packets the Mac was sending, or was the Mac not sending packets at all?&lt;/p&gt;
    &lt;p&gt;A port-mirrored Wireshark capture answered that question: the Mac wasnât sending any packets to the server, even long after it started to say &lt;code&gt;Connecting to backup disk...&lt;/code&gt;. Digging into the macOS Time Machine logs with:&lt;/p&gt;
    &lt;code&gt;log show --style syslog --predicate 'senderImagePath contains[cd] "TimeMachine"' --info
&lt;/code&gt;
    &lt;p&gt;A few entries made it clear:&lt;/p&gt;
    &lt;code&gt;(TimeMachine) [com.apple.TimeMachine:Mounting] Attempting to mount 'afp://backup_mbp@homeserver._afpovertcp._tcp.local./tm_mbp'
...
(TimeMachine) [com.apple.TimeMachine:General] Failed to resolve CFNetServiceRef with name = homeserver type = _afpovertcp._tcp. domain = local.
&lt;/code&gt;
    &lt;p&gt;The Mac was using mDNS (a.k.a. Bonjour, Zeroconf) to resolve the backup serverâs IP address using its hostname. The server was asleep and therefore not responding to the requests, so the Mac was failing to resolve its IP address. This explained why the Mac wasnât sending any packets to the server, leaving it asleep.&lt;/p&gt;
    &lt;head rend="h4"&gt;mDNS stand-in&lt;/head&gt;
    &lt;p&gt;I already had an ARP stand-in service, now I needed my Raspberry Pi to also respond to mDNS queries for the server while it slept. I knew that Avahi was one of the main mDNS implementations for Linux. I first tried these instructions using &lt;code&gt;.service&lt;/code&gt; files to configure my Raspberry Pi to respond to mDNS queries on behalf of the server. I used the following on the Mac to check the result:&lt;/p&gt;
    &lt;code&gt;dns-sd -L homeserver _afpovertcp._tcp local
&lt;/code&gt;
    &lt;p&gt;For some reason, that approach just didnât work; Avahi didnât respond on behalf of the server. I experimented instead with &lt;code&gt;avahi-publish&lt;/code&gt; (man page), which (to my pleasant surprise) worked right away using the following:&lt;/p&gt;
    &lt;code&gt;avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local
&lt;/code&gt;
    &lt;p&gt;With that, I just needed to create a &lt;code&gt;systemd&lt;/code&gt; service definition that would automatically run the &lt;code&gt;avahi-publish&lt;/code&gt; command on boot (check out the configuration shared above).&lt;/p&gt;
    &lt;head rend="h2"&gt;ð Finish&lt;/head&gt;
    &lt;p&gt;With all the wrinkles ironed out, everything has been working well now for over a month. I hope youâve enjoyed following along and that this approach works for you too.&lt;/p&gt;
    &lt;p&gt;This post was discussed on Hacker News and Reddit.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://dgross.ca/blog/linux-home-server-auto-sleep"/></entry><entry><id>https://news.ycombinator.com/item?id=45108548</id><title>Google can keep its Chrome browser but will be barred from exclusive contracts</title><updated>2025-09-03T02:13:26.153307+00:00</updated><content>&lt;doc fingerprint="19469cf013a53348"&gt;
  &lt;main&gt;
    &lt;p&gt;Alphabet shares popped 8% in extended trading as investors celebrated what they viewed as minimal consequences from a historic defeat last year in the landmark antitrust case.&lt;/p&gt;
    &lt;p&gt;Last year, Google was found to hold an illegal monopoly in its core market of internet search.&lt;/p&gt;
    &lt;p&gt;U.S. District Judge Amit Mehta ruled against the most severe consequences that were proposed by the Department of Justice, including the forced sale of Google's Chrome browser, which provides data that helps its advertising business deliver targeted ads.&lt;/p&gt;
    &lt;p&gt;"Google will not be required to divest Chrome; nor will the court include a contingent divestiture of the Android operating system in the final judgment," the decision stated. "Plaintiffs overreached in seeking forced divestiture of these key assets, which Google did not use to effect any illegal restraints."&lt;/p&gt;
    &lt;p&gt;Mehta, who oversaw the remedies trial in May, ordered the parties to meet by Sept. 10 for the final judgment.&lt;/p&gt;
    &lt;p&gt;In August 2024, the U.S. District Court for the District of Columbia ruled that Google violated Section 2 of the Sherman Act and held a monopoly in search and related advertising.&lt;/p&gt;
    &lt;p&gt;The antitrust trial started in September 2023.&lt;/p&gt;
    &lt;p&gt;"Now the Court has imposed limits on how we distribute Google services, and will require us to share Search data with rivals," Google said in a blog post. "We have concerns about how these requirements will impact our users and their privacy, and we're reviewing the decision closely. The Court did recognize that divesting Chrome and Android would have gone beyond the case's focus on search distribution, and would have harmed consumers and our partners."&lt;/p&gt;
    &lt;p&gt;One of the key areas of focus was the exclusive contracts Google held for distribution.&lt;/p&gt;
    &lt;p&gt;In his decision Tuesday, Mehta said the company can make payments to preload products, but it cannot have exclusive contracts that condition payments or licensing.&lt;/p&gt;
    &lt;p&gt;The DOJ had asked Google to stop the practice of "compelled syndication," which refers to the practice of making certain deals with companies to ensure its search engine remains the default choice in browsers and smartphones.&lt;/p&gt;
    &lt;p&gt;"The court's ruling today recognizes the need for remedies that will pry open the market for general search services, which has been frozen in place for over a decade," the DOJ said in a press release. "The ruling also recognizes the need to prevent Google from using the same anticompetitive tactics for its GenAI products as it used to monopolize the search market, and the remedies will reach GenAI technologies and companies."&lt;/p&gt;
    &lt;p&gt;Google pays Apple billions of dollars per year to be the default search engine on iPhones. It's lucrative for Apple and a valuable way for Google to get more search volume and users.&lt;/p&gt;
    &lt;p&gt;Apple stock rose 4% on Tuesday after hours.&lt;/p&gt;
    &lt;p&gt;"Google will not be barred from making payments or offering other consideration to distribution partners for preloading or placement of Google Search, Chrome, or its GenAI products. Cutting off payments from Google almost certainly will impose substantial—in some cases, crippling—downstream harms to distribution partners, related markets, and consumers, which counsels against a broad payment ban."&lt;/p&gt;
    &lt;p&gt;Google was also ordered to loosen its hold on search data.&lt;/p&gt;
    &lt;p&gt;During the remedies trial in May, the DOJ asked the judge to force Google to share the data it uses for generating search results, such as data about what users click on.&lt;/p&gt;
    &lt;p&gt;Mehta ruled Tuesday that Google will have to make available certain search index data and user interaction data, though "not ads data."&lt;/p&gt;
    &lt;p&gt;Google does not have to share or provide access to granular data with advertisers.&lt;/p&gt;
    &lt;p&gt;The court narrowed the datasets Google will be required to share and said they must occur on "ordinary commercial terms that are consistent with Google's current syndication services."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.cnbc.com/2025/09/02/google-antitrust-search-ruling.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45109324</id><title>You're Not Interviewing for the Job. You're Auditioning for the Job Title</title><updated>2025-09-03T02:13:26.013995+00:00</updated><content>&lt;doc fingerprint="a999312c2f11ceaa"&gt;
  &lt;main&gt;
    &lt;p&gt;I once had a job interview for a backend position. Their stack was Node.js, MySQL, nothing exotic. The interviewer asked: "If you have an array containing a million entries, how would you sort the data by name?"&lt;/p&gt;
    &lt;p&gt;My immediate thought was: If you have a JavaScript array with a million entries, you're certainly doing something wrong.&lt;/p&gt;
    &lt;p&gt;The interviewer continued: "There are multiple fields that you should be able to sort by."&lt;/p&gt;
    &lt;p&gt;This felt like a trick question. Surely the right answer was to explain why you shouldn't be sorting millions of records in JavaScript. Pagination, database indexing, server-side filtering. So I said exactly that.&lt;/p&gt;
    &lt;p&gt;I was wrong. He wanted me to show him &lt;code&gt;Array.prototype.sort()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;My crime? Prioritizing real-world efficiency over theatrical scale. The interviewer didn't see a practical engineer, he saw a candidate who "lacked vision."&lt;/p&gt;
    &lt;head rend="h2"&gt;The Theater of Technical Interviews&lt;/head&gt;
    &lt;p&gt;I once read that "a complex system usually reflects an absence of good design." It's brilliant. True. And if you're prepping for a system design interview, forget it immediately.&lt;/p&gt;
    &lt;p&gt;In real-world engineering, simplicity is king. In interviews, complexity is currency.&lt;/p&gt;
    &lt;p&gt;Job interviews aren't assessments. They're auditions for a job title: The Architect Who Solves Hard Problems™.&lt;/p&gt;
    &lt;p&gt;You're not being evaluated on whether you can build the described system efficiently. You're being evaluated on whether you can perform the role of someone who could theoretically build Google.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Unwritten Script&lt;/head&gt;
    &lt;p&gt;Every system design interview follows the same theatrical formula:&lt;/p&gt;
    &lt;p&gt;Act I: Summon the Dragons&lt;lb/&gt; First, you assume infinite users and planetary-scale traffic. Multiply every reasonable number by 1,000. Treat a todo app like it's handling the New York Stock Exchange. The interviewer nods approvingly as you describe millions of concurrent users for what is essentially a digital notepad.&lt;/p&gt;
    &lt;p&gt;Act II: Draw the Arcane Symbols&lt;lb/&gt; Next, you cover the whiteboard in boxes, arrows, and at least one redundant Kubernetes cluster. Add a message queue, Kafka obviously, regardless of whether you need one. Sprinkle in some microservices because monoliths are for peasants, and draw load balancers like protective talismans around every component.&lt;/p&gt;
    &lt;p&gt;Act III: Invoke the Gods of Tech&lt;lb/&gt; Finally, you debate consensus algorithms for a blog comment system, mention observability and SLOs for good measure, and whisper "eventual consistency" like an incantation that will ward off all future scaling problems.&lt;/p&gt;
    &lt;p&gt;The performance has nothing to do with the actual job. It's about proving you know the vocabulary of scale.&lt;/p&gt;
    &lt;p&gt;Interview World: Complexity = Competence&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Show knowledge of distributed systems patterns&lt;/item&gt;
      &lt;item&gt;Demonstrate familiarity with enterprise-grade tools&lt;/item&gt;
      &lt;item&gt;Prove you can architect for theoretical millions&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Real World: Simplicity = Good Design&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Start with the simplest solution that works&lt;/item&gt;
      &lt;item&gt;Add complexity only when genuinely needed&lt;/item&gt;
      &lt;item&gt;Optimize for maintainability, not theoretical scale&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I've seen great engineers fail interviews because they suggested using a relational database instead of a distributed NoSQL cluster, for a system that would handle 100 requests per day.&lt;/p&gt;
    &lt;p&gt;I've also seen mediocre engineers get hired because they could fluently discuss sharding strategies for problems that didn't need sharding.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why the Theater Exists&lt;/head&gt;
    &lt;p&gt;This isn't malicious. It's structural, driven by several interconnected forces:&lt;/p&gt;
    &lt;p&gt;Signal vs. Noise: Complexity is easier to evaluate than judgment. Anyone can memorize CAP theorem and recite the differences between SQL and NoSQL databases. But knowing about when not to use distributed systems? That's harder to assess in a 45-minute conversation. Interviewers gravitate toward what they can measure.&lt;/p&gt;
    &lt;p&gt;Risk Aversion: Hiring committees fear false negatives more than false positives. A "simple" answer feels risky. What if this person can't handle complexity when it's genuinely needed? A "complex" answer feels safer, even if it's complete overkill for the actual problem at hand.&lt;/p&gt;
    &lt;p&gt;The Aspiration Gap: Companies hire for their aspirational selves, not their current reality. They want "Senior Staff Engineers" who can theoretically scale to millions of users, not "People Who Write Maintainable Code" for their current 10,000 daily active users. The fantasy of future scale drives present hiring decisions.&lt;/p&gt;
    &lt;p&gt;Interviewer Incentives: Discussing load balancing strategies and distributed consensus is more intellectually stimulating than talking about boring CRUD operations. Even if CRUD is 90% of what the actual job entails. Interviewers are human, and humans prefer interesting conversations over practical ones.&lt;/p&gt;
    &lt;p&gt;Once you're hired, the script flips entirely. You'll spend your days deleting unused microservices that "future-proofed" against scale that never came, arguing against message queues for problems that cron jobs solve perfectly, and consolidating databases that were split "for scalability" but now just create maintenance overhead. You'll find yourself explaining to eager junior developers why the new feature doesn't need its own Kubernetes namespace, and why sometimes a simple bash script is more reliable than a distributed system.&lt;/p&gt;
    &lt;p&gt;The very complexity that got you hired becomes the tech debt you'll spend years dismantling. I've worked with engineers who aced system design interviews by proposing elaborate architectures, then spent their first year on the job simplifying systems that previous hires had over-engineered using the exact same interview logic. It's a cycle of complexity creation and subsequent complexity destruction, driven entirely by hiring theater.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Cost of Honesty&lt;/head&gt;
    &lt;p&gt;What happens when you try to be pragmatic in interviews?&lt;/p&gt;
    &lt;p&gt;The Backpressure Question: "How do you handle backpressure in your system?"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Honest answer: "We don't generate enough load to need backpressure handling."&lt;/item&gt;
      &lt;item&gt;Interview answer: "We implement exponential backoff with circuit breakers and queue depth monitoring."&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Database Question: "SQL or NoSQL for this use case?"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Honest answer: "Postgres handles this fine and the team knows SQL."&lt;/item&gt;
      &lt;item&gt;Interview answer: "We'll use a polyglot persistence strategy with Redis for caching, Cassandra for time-series data, and Neo4j for the social graph."&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Scaling Question: "How do you handle 10 million users?"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Honest answer: "We don't have 10 million users. We have 10,000. Let's solve that first."&lt;/item&gt;
      &lt;item&gt;Interview answer: "We'll implement horizontal sharding with consistent hashing and auto-scaling Kubernetes pods."&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The honest answers demonstrate experience. The interview answers demonstrate vocabulary. Guess which ones get job offers?&lt;/p&gt;
    &lt;head rend="h2"&gt;How to Win the Game&lt;/head&gt;
    &lt;p&gt;I'm not advocating dishonesty, I'm acknowledging reality. Interviews are a ritual, and rituals have rules. Here's how to navigate them:&lt;/p&gt;
    &lt;p&gt;Separate Performance from Practice: Playing the interview game doesn't make you a hypocrite. It makes you pragmatic about a broken system. You can excel at interview theater while still being a principled engineer once you're hired.&lt;/p&gt;
    &lt;p&gt;Learn the Sacred Texts: Study distributed systems patterns even if you'll never use them. Memorize the CAP theorem even if it's mostly irrelevant to your daily work. Practice drawing architecture diagrams that look impressive on whiteboards. Think of it as learning a foreign language you'll only speak during interviews.&lt;/p&gt;
    &lt;p&gt;Embrace the Tropes: Always start discussions with "At scale, we'd need to consider..." Mention monitoring and observability early and often, even for simple systems. Add redundancy everywhere, even for non-critical components. Use the magic words that signal competence in interview-land.&lt;/p&gt;
    &lt;p&gt;Then Drop the Act: Once hired, advocate ruthlessly for simplicity. Be the voice of reason who asks "Do we actually need this complexity?" Use your hard-earned credibility to push back against unnecessary over-engineering. This is where the real engineering work begins.&lt;/p&gt;
    &lt;p&gt;This system is frustrating but not permanent. Some companies are starting to recognize the disconnect and experiment with better approaches. They're giving candidates real problems the company actually faces rather than theoretical scaling challenges. They're rewarding engineers who question complexity, not just those who can implement it. They're asking candidates to identify over-engineering in existing systems rather than create new complexity from scratch.&lt;/p&gt;
    &lt;p&gt;But until these practices become widespread, we're stuck with the performance. The theater continues because it serves too many psychological needs: it makes interviewers feel smart, companies feel rigorous, and candidates feel like they're solving important problems.&lt;/p&gt;
    &lt;p&gt;Technical interviews exist in a parallel universe where different rules apply. The stage demands a performance of complexity; the job rewards mastery of simplicity.&lt;/p&gt;
    &lt;p&gt;The system is broken, but individual actors can't fix it by martyring themselves. Play your part, get the role, then use your position to advocate for sanity.&lt;/p&gt;
    &lt;p&gt;Remember: the goal isn't to perpetuate the theater forever. It's to get inside the building where you can help others see that the emperor's distributed microservices architecture has no clothes.&lt;/p&gt;
    &lt;p&gt;The best revenge against interview theater isn't failing the performance, it's succeeding at it. Then you can spend your career deleting the unnecessary complexity it celebrated.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://idiallo.com/blog/performing-for-the-job-title"/></entry><entry><id>https://news.ycombinator.com/item?id=45110209</id><title>This blog is running on a recycled Google Pixel 5 (2024)</title><updated>2025-09-03T02:13:25.467823+00:00</updated><content>&lt;doc fingerprint="37c26d064887b8aa"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;This blog is running on a recycled Google Pixel 5&lt;/head&gt;
    &lt;p&gt;If you glance over this blog, you will see that I am an avid Android fan. After setting up numerous Linux &lt;code&gt;proot&lt;/code&gt; desktops on phones, I wanted to see if I use a phone as a server and run my blog from an Android phone. Since you are reading this, I was successful.&lt;/p&gt;
    &lt;p&gt;I was inspired my a few Mastodon posts earlier this week to give it a go. First, I stumbled on a post from @kaimac who is running a site from an ESP32 microcontroller. In the comments of that post, I saw a mention to compost.party created by user @computersandblues that runs completely on an Android device and a solar panel. Last, @stevelord who is essentially running a homelab on a TP-Link router with OpenWRT installed.&lt;/p&gt;
    &lt;p&gt;I think a lot about power consumption of my homelab and I also love using old hardware for random projects to give them new life. I was truly inspired by the above works, so I got right down to business.&lt;/p&gt;
    &lt;head rend="h2"&gt;The hardware&lt;/head&gt;
    &lt;p&gt;I looked through the devices I had laying around and I chose a Google Pixel 5 my brother-in-law gave me after he upgraded. The Pixel 5 is carrier locked to Verizon, which is notorious for making it impossible to also unlock the bootloader and install custom ROMs. At first I wanted a device that I could install PostmarketOS to run a proper Linux server. In the end, I’m glad I didn’t go that route.&lt;/p&gt;
    &lt;p&gt;Another reason I chose the Pixel 5 is because it supports USB-OTG and can use docks with hard-wired internet. I didn’t want to run the site on wifi and having an ethernet connection was mandatory.&lt;/p&gt;
    &lt;p&gt;Last, it is the most current phone I have. This device is open to the internet, so I wanted to make sure it is an updated as possible.&lt;/p&gt;
    &lt;head rend="h4"&gt;Solar powered blog!&lt;/head&gt;
    &lt;p&gt;This summer I’ve been testing using a 100w solar panel I got from Harbor Freight Tools so I can learn more about how it all works before diving into larger projects. I have that panel connected to a Jackery 160w power station to keep it charged up and we use it to charge our mobile devices. I got the Jackery last year as a power bank I use while on jobsites.&lt;/p&gt;
    &lt;p&gt;Since I already have this set up, I am now using it to power this blog. I’m happy with this setup as I’ve been getting more into permacomputing. Having a website that is fully offgrid using recycled parts is exciting!&lt;/p&gt;
    &lt;head rend="h2"&gt;What I used to create the site (Termux is the GOAT)&lt;/head&gt;
    &lt;p&gt;While considering what projects I could do with this phone, I was thinking I was going to install a &lt;code&gt;proot&lt;/code&gt; desktop and then run from within a Linux environment. Before I started I decided to check out a few packages that are in Termux (the flat out amazing terminal emulator) to see how far I could push it.&lt;/p&gt;
    &lt;p&gt;I checked for some basics and read about setting up an &lt;code&gt;ssh&lt;/code&gt; connection. Then I randomly searched for Hugo, which is what my blog was already built on. Sure enough, it is right there in the Termux repos! Turns out, it has been in there for a long time. I see a lot of posts from 2018 with people using it.&lt;/p&gt;
    &lt;head rend="h2"&gt;How has it been going&lt;/head&gt;
    &lt;p&gt;Great! Site is fast and reliable. I ran into a few hiccups on the first day or so, which were mostly around the version of Hugo on my server and the newer version I am using on the phone. The other is related to my solar setup and keeping an eye on the battery levels.&lt;/p&gt;
    &lt;p&gt;To be honest, I don’t think anyone can tell it is running on an Android phone instead of a x86 Linux box or a hyperscaler VPS.&lt;/p&gt;
    &lt;p&gt;At the moment I have no plans to change this setup and will leave it as-is until some issue arises. But, there’s really not much to report other than it works fantastic.&lt;/p&gt;
    &lt;p&gt;Below are my longform notes on how I set it up. But, the short version is it was way simpler than I thought it would be. You can get up and running with a Hugo site by just installing &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;screen&lt;/code&gt;, your favorite text editor, and &lt;code&gt;hugo&lt;/code&gt; straight from the repos.&lt;/p&gt;
    &lt;p&gt;Not included in this post is how I add new posts to the phone. I can use &lt;code&gt;scp&lt;/code&gt; to send a files, but I prefer to use dufs that is a static file server in that can be accessed in the browser. Using &lt;code&gt;dufs&lt;/code&gt; I can upload files and make quick edits straight in the browser from any device. Surprise! &lt;code&gt;dufs&lt;/code&gt; is also in the Termux repos and is so easy to get up and running. Again, message me if you’d like to see a write-up about it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Installs&lt;/head&gt;
    &lt;p&gt;Of course I need some basic utilities. These are the utilities I need to have at a minimum when working with a Linux system:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;rsync&lt;/item&gt;
      &lt;item&gt;openssh&lt;/item&gt;
      &lt;item&gt;git&lt;/item&gt;
      &lt;item&gt;wget&lt;/item&gt;
      &lt;item&gt;curl&lt;/item&gt;
      &lt;item&gt;fish shell&lt;/item&gt;
      &lt;item&gt;cronie&lt;/item&gt;
      &lt;item&gt;termux-services&lt;/item&gt;
      &lt;item&gt;iperf3&lt;/item&gt;
      &lt;item&gt;speedtest-go&lt;/item&gt;
      &lt;item&gt;screen&lt;/item&gt;
      &lt;item&gt;helix&lt;/item&gt;
      &lt;item&gt;hugo&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Restart Termux and use &lt;code&gt;sv-enable&lt;/code&gt; to run certain items as services. I do this for &lt;code&gt;sshd&lt;/code&gt; and &lt;code&gt;cronie&lt;/code&gt;. It looks like this:&lt;/p&gt;
    &lt;code&gt;$ sv-enable sshd
$ sv-enable cronie
&lt;/code&gt;
    &lt;p&gt;After running &lt;code&gt;sv-enable&lt;/code&gt;, restart Termux.&lt;/p&gt;
    &lt;head rend="h4"&gt;openssh&lt;/head&gt;
    &lt;p&gt;I could build all of this straight from the phone using either the touchscreen keyboard or connecting a standard keyboard and mouse either with a USB-C dock or bluetooth. But, I want to manage this like all of my other servers, which is to &lt;code&gt;ssh&lt;/code&gt; into the device and work from my desk.&lt;/p&gt;
    &lt;p&gt;There is an official guide for setting up an &lt;code&gt;ssh&lt;/code&gt; server. All I will add here is some pointers I learned along the way.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Adding an &lt;code&gt;ssh&lt;/code&gt;key is simple and should be one of the first steps done. After generating the key and importing with&lt;code&gt;ssh-copy-id&lt;/code&gt;from the desktop, edit the&lt;code&gt;sshd&lt;/code&gt;file in&lt;code&gt;$PREFIX/etc/ssh/sshd_config&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Termux generates its own username and cannot be changed. Run &lt;code&gt;whoami&lt;/code&gt;to see what it is.&lt;/item&gt;
      &lt;item&gt;It is the same for the &lt;code&gt;ssh&lt;/code&gt;port. As far as I can tell you cannot change the port, which is automatically set to 8022.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Running the site&lt;/head&gt;
    &lt;p&gt;There are lots of guides out there on how to setup a &lt;code&gt;hugo&lt;/code&gt; site. I have an existing site that I migrated from a VM to this phone, so my notes do not include how to get a &lt;code&gt;hugo&lt;/code&gt; site running. I also do not need to do any port forwarding as I already have a reverse proxy that I just changed where it points for my blog.&lt;/p&gt;
    &lt;p&gt;I would like to hear feedback if there is a need to add those notes here. Message me on Mastodon or by email using the links at the bottom of this post.&lt;/p&gt;
    &lt;p&gt;Below are notes on how I use the package &lt;code&gt;cronie&lt;/code&gt; to start the blog using &lt;code&gt;screen&lt;/code&gt; and the automatically reload the blog occasionally. &lt;code&gt;cronie&lt;/code&gt; is for setting up &lt;code&gt;cron&lt;/code&gt; tasks. Once installed and enabled, run &lt;code&gt;crontab -e&lt;/code&gt; like usual to setup tasks.&lt;/p&gt;
    &lt;p&gt;This is how I do it.&lt;/p&gt;
    &lt;p&gt;First, set a &lt;code&gt;fish&lt;/code&gt; alias for the command to reload the blog:&lt;/p&gt;
    &lt;code&gt;alias blog_run='cd /data/data/com.termux/files/home/&amp;lt;website_root_dir&amp;gt; &amp;amp;&amp;amp; /data/data/com.termux/files/usr/bin/hugo serve --bind=0.0.0.0 --baseURL=https://blog.ctms.me --appendPort=false --environment=production --disableFastRender --cacheDir /data/data/com.termux/files/home/&amp;lt;website_root_dir&amp;gt;/cache'

funcsave blog_run
&lt;/code&gt;
    &lt;p&gt;Now, create a script and place in &lt;code&gt;~/scripts&lt;/code&gt; that closes a previous instance of &lt;code&gt;screen&lt;/code&gt;, clears the cache, and then starts a new &lt;code&gt;screen&lt;/code&gt; session titled “hugo” and execute the alias:&lt;/p&gt;
    &lt;code&gt;#! /bin/bash
screen -X -S "hugo" quit
rm -rf /data/data/com.termux/files/home/&amp;lt;website_root_dir/cache/&amp;lt;site_name_dir&amp;gt;/filecache/getresource/
screen -S hugo -d -m fish -c 'blog_run; exec fish'
&lt;/code&gt;
    &lt;p&gt;Last, set it to run with &lt;code&gt;cron&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;*/5 * * * * cd /data/data/com.termux/files/home/scripts &amp;amp;&amp;amp; sh blog_reload.sh
&lt;/code&gt;
    &lt;head rend="h2"&gt;Backing up&lt;/head&gt;
    &lt;p&gt;Since Termux supports &lt;code&gt;ssh&lt;/code&gt; connections, I can use it on remote machines to pull the files from the phone using &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;First, need to install &lt;code&gt;rsync&lt;/code&gt; on the phone with &lt;code&gt;pkg install rsync&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h4"&gt;Desktop backup&lt;/head&gt;
    &lt;p&gt;Now we can run it from my desktop to pull the files:&lt;/p&gt;
    &lt;code&gt;rsync -aP pixel:~/&amp;lt;website_root_dir&amp;gt; /local/dir/pixel_blog/
&lt;/code&gt;
    &lt;p&gt;On my desktop, I have this for &lt;code&gt;cron&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;@reboot sleep 30 &amp;amp;&amp;amp; rsync -aP pixel:~/&amp;lt;website_root_dir&amp;gt; /local/dir/pixel_blog/ &amp;gt;&amp;gt; $HOME/logs/pixel-hugo-backup.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;
    &lt;head rend="h4"&gt;nas backup&lt;/head&gt;
    &lt;p&gt;This is the same configuration. The only difference is the backup location and the &lt;code&gt;cron&lt;/code&gt; timing.&lt;/p&gt;
    &lt;code&gt;rsync -aP pixel:~/&amp;lt;website_root_dir&amp;gt; /local/dir/pixel_blog
&lt;/code&gt;
    &lt;p&gt;The automation:&lt;/p&gt;
    &lt;code&gt;5 6 * * * rsync -aP pixel:~/&amp;lt;website_root_dir&amp;gt; /local/dir/pixel_blog &amp;gt;&amp;gt; $HOME/logs/pixel-hugo-backup.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;
    &lt;head rend="h4"&gt;git backup&lt;/head&gt;
    &lt;p&gt;I have a local self-hosted git instance I push backups to, but you can totally set it up to send them to Github or whatever forge you use. No instructions here because there are plenty of guides out there on how to set this up.&lt;/p&gt;
    &lt;p&gt;- - - - -&lt;/p&gt;
    &lt;p&gt;Thank you for reading! If you would like to comment on this post you can start a conversation on the Fediverse. Message me on Mastodon at @cinimodev@masto.ctms.me. Or, you may email me at blog.discourse904@8alias.com. This is an intentionally masked email address that will be forwarded to the correct inbox.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.ctms.me/posts/2024-08-29-running-this-blog-on-a-pixel-5/"/></entry><entry><id>https://news.ycombinator.com/item?id=45110386</id><title>Indices, not Pointers</title><updated>2025-09-03T02:13:25.373359+00:00</updated><content>&lt;doc fingerprint="2ec99cf839102298"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Indices, not Pointers&lt;/head&gt;
    &lt;p&gt;There is a pattern I’ve learned while using Zig which I’ve never seen used in any other language. It’s an extremely simple trick which - when applied to a data structure - reduces memory usage, reduces memory allocations, speeds up accesses, makes freeing instantaneous, and generally makes everything much, much faster. The trick is to use indices, not pointers.&lt;/p&gt;
    &lt;p&gt;This is something I learned from a talk by Andrew Kelley (Zig’s creator) on data-oriented design. It’s used in Zig’s compiler to make very memory-efficient ASTs, and can be applied to pretty much any node-based data structure, usually trees.&lt;/p&gt;
    &lt;p&gt;So what does this mean exactly? Well, to use indices means to store the nodes of the data structure in a dynamic array, appending new nodes instead of individually allocating them. Nodes can then reference each other via indices instead of pointers.&lt;/p&gt;
    &lt;p&gt;Pretty simple, right? But this strategy has some major performance benefits.&lt;/p&gt;
    &lt;head rend="h2"&gt;Smaller Nodes&lt;/head&gt;
    &lt;p&gt;A pointer costs 8 bytes to store on a modern 64-bit system, but unless your planning on storing over 4 billion nodes in memory, an index can be stored in just 4 bytes.&lt;/p&gt;
    &lt;head rend="h2"&gt;Faster Access&lt;/head&gt;
    &lt;p&gt;Due to the reduced node size and the fact that nodes are stored contiguously in memory, the data structure will fit into fewer memory pages and more nodes will fit in the cpu’s cache line, which generally improves access times significantly.&lt;/p&gt;
    &lt;head rend="h2"&gt;Less Allocation Overhead&lt;/head&gt;
    &lt;p&gt;The way most people learn to implement data structures like trees is to make a separate allocation for each individual node, one at a time. This is a very naive way of allocating memory, however, as each memory allocation comes with a small but significant overhead which can really slow things down for a large number of nodes. Storing nodes in a growable arraylist minimizes this overhead as arraylists grow superlinearly (e.g, doubling in size each time more space is needed) meaning the majority of new nodes can just be placed in the next available slot without requesting more memory!&lt;/p&gt;
    &lt;head rend="h2"&gt;Instant Frees&lt;/head&gt;
    &lt;p&gt;Freeing structures which are allocated in the traditional “nest of pointers” fashion can be very slow, as the entire structure has to be traversed to find and individually free each node. Storing nodes in a single allocation eliminates this problem entirely and freeing the structure becomes just a single free call, as it should be.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Downside - Freeing Single Nodes&lt;/head&gt;
    &lt;p&gt;One disadvantage of storing all the nodes in a contiguous buffer is that it makes it harder to free an individual node as removing a single element from an arraylist would involve shifting over all the elements after it, a linear time operation which is almost always too slow to be practical. In practice this isn’t something you normally need to do as many data structures, like an AST, can be freed all at once, but if you need to be able to free individual nodes and still want to use this technique then the obvious solution would be to use a freelist.&lt;/p&gt;
    &lt;head rend="h3"&gt;Freelists&lt;/head&gt;
    &lt;p&gt;A freelist is, as the name suggests, a list used to track free slots in memory allocators. In our case we can simply use a stack to store indices of free slots in our arraylist and attempt to pop off this stack any time we add a new element. The extra code complexity should be weighed against the actual performance benefit when considering this approach.&lt;/p&gt;
    &lt;head rend="h2"&gt;Code Example&lt;/head&gt;
    &lt;p&gt;Here is a short demo of this technique in Zig (v0.14.1). There are some Zig quirks involved like passing memory allocators and using an enum as an index type but hopefully the general idea is clear.&lt;/p&gt;
    &lt;code&gt;pub fn main() !void {
    var debug_allocator = std.heap.DebugAllocator(.{}).init;
    defer _ = debug_allocator.deinit();

    var tree = Tree{
        // Zig uses a memory allocator interface to allow us to pass in an allocation strategy for the arraylist to use.
        .nodes = ArrayList(Tree.Node).init(debug_allocator.allocator()),
    };
    defer tree.nodes.deinit();

    // append the root node.
    const root = try tree.createNode(45);

    const a = try tree.createNode(-10);
    const b = try tree.createNode(89000);
    const c = try tree.createNode(2);

    tree.setLeftChild(root, a);
    tree.setRightChild(root, b);
    tree.setLeftChild(b, c);

    printTree(&amp;amp;tree);
}

const Tree = struct {
    /// Stores all the nodes in the tree. The root node is at index 0.
    nodes: ArrayList(Node),

    const Node = struct {
        data: i32,
        left_child: NodeIndex = .none,
        right_child: NodeIndex = .none,
    };

    // In Zig it is common to use a non-exhaustive enum instead of a bare integer for indices
    // to add back some of the type safety which is lost since we're not using pointers.
    const NodeIndex = enum(u32) {
        // The root nodes is stored at index 0, so 0 can be used as a null-value for child indices.
        none = 0,
        _,
    };

    fn createNode(tree: *Tree, value: i32) std.mem.Allocator.Error!NodeIndex {
        const index: NodeIndex = @enumFromInt(@as(u32, @intCast(tree.nodes.items.len)));
        try tree.nodes.append(.{ .data = value });
        return index;
    }

    fn setLeftChild(tree: *const Tree, parent: NodeIndex, child: NodeIndex) void {
        tree.nodes.items[@intFromEnum(parent)].left_child = child;
    }

    fn setRightChild(tree: *const Tree, parent: NodeIndex, child: NodeIndex) void {
        tree.nodes.items[@intFromEnum(parent)].right_child = child;
    }
};

fn printTree(tree: *const Tree) void {
    assert(tree.nodes.items.len &amp;gt; 0);

    // print the root node.
    printNode(tree, @enumFromInt(0), 0);
}

fn printNode(tree: *const Tree, node_index: Tree.NodeIndex, depth: u32) void {
    const node = tree.nodes.items[@intFromEnum(node_index)];

    for (0..depth) |_| print("  ", .{});
    print("[{d}] {d}\n", .{ @intFromEnum(node_index), node.data });

    if (node.left_child != .none) printNode(tree, node.left_child, depth + 1);
    if (node.right_child != .none) printNode(tree, node.right_child, depth + 1);
}

const std = @import("std");
const ArrayList = std.ArrayList;
const assert = std.debug.assert;
const print = std.debug.print;
&lt;/code&gt;
    &lt;p&gt;And here is the output:&lt;/p&gt;
    &lt;code&gt;$ zig run indices.zig
[0] 45
  [1] -10
  [2] 89000
    [3] 2
&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://joegm.github.io/blog/indices-not-pointers/"/></entry><entry><id>https://news.ycombinator.com/item?id=45110688</id><title>%CPU utilization is a lie</title><updated>2025-09-03T02:13:25.221947+00:00</updated><content>&lt;doc fingerprint="7287344734add095"&gt;
  &lt;main&gt;
    &lt;p&gt;I deal with a lot of servers at work, and one thing everyone wants to know about their servers is how close they are to being at max utilization. It should be easy, right? Just pull up &lt;code&gt;top&lt;/code&gt; or another system monitor tool, look at network, memory and CPU utilization, and whichever one is the highest tells you how close you are to the limits.&lt;/p&gt;
    &lt;p&gt;And yet, whenever people actually try to project these numbers, they find that CPU utilization doesn't quite increase linearly. But how bad could it possibly be?&lt;/p&gt;
    &lt;p&gt;To answer this question, I ran a bunch of stress tests and monitored both how much work they did and what the system-reported CPU utilization was, then graphed the results.&lt;/p&gt;
    &lt;head rend="h1"&gt;Setup&lt;/head&gt;
    &lt;p&gt;For my test machine, I used a desktop computer running Ubuntu with a Ryzen 9 5900X (12 core / 24 thread) processor. I also enabled Precision Boost Overdrive (i.e. Turbo).&lt;/p&gt;
    &lt;p&gt;I vibe-coded a script that runs stress-ng in a loop, first using 24 workers and attempting to run them each at different utilizations from 1% to 100%, then using 1 to 24 workers all at 100% utilization. It used different stress testing method and measured the number of operations that could be completed ("Bogo ops1").&lt;/p&gt;
    &lt;p&gt;The reason I did two different methods was that operating systems are smart about how they schedule work, and scheduling a small number of workers at 100% utilization can be done optimally (spoilers) but with 24 workers all at 50% utilization it's hard for the OS to do anything other than spreading the work evenly.&lt;/p&gt;
    &lt;head rend="h1"&gt;Results&lt;/head&gt;
    &lt;p&gt;You can see the raw CSV results here.&lt;/p&gt;
    &lt;head rend="h2"&gt;General CPU&lt;/head&gt;
    &lt;p&gt;The most basic test just runs all of stress-ng's CPU stress tests in a loop.&lt;/p&gt;
    &lt;p&gt;You can see that when the system is reporting 50% CPU utilization, it's actually doing 60-65% of the actual maximum work it can do.&lt;/p&gt;
    &lt;head rend="h2"&gt;64-bit Integer Math&lt;/head&gt;
    &lt;p&gt;But maybe that one was just a fluke. What if we just run some random math on 64-bit integers?&lt;/p&gt;
    &lt;p&gt;This one is even worse! At "50% utilization", we're actually doing 65-85% of the max work we can get done. It can't possibly get worse than that though, right?&lt;/p&gt;
    &lt;head rend="h2"&gt;Matrix Math&lt;/head&gt;
    &lt;p&gt;Something is definitely off. Doing matrix math, "50% utilization" is actually 80% to 100% of the max work that can be done.&lt;/p&gt;
    &lt;p&gt;In case you were wondering about the system monitor screenshot from the start of the article, that was a matrix math test running with 12 workers, and you can see that it really did report 50% utilization even though additional workers do absolutely nothing (except make the utilization number go up).&lt;/p&gt;
    &lt;head rend="h1"&gt;What's Going On?&lt;/head&gt;
    &lt;head rend="h2"&gt;Hyperthreading&lt;/head&gt;
    &lt;p&gt;You might notice that this the graph keeps changing at 50%, and I've helpfully added piecewise linear regressions showing the fit.&lt;/p&gt;
    &lt;p&gt;The main reason this is happening is hyperthreading: Half of the "cores" on this machine (and most machines) are sharing resources with other cores. If I run 12 workers on this machine, they each get scheduled on their own physical core with no shared resources, but once I go over that, each additional worker is sharing resources with another. In some cases (general CPU benchmarks), this makes things slightly worse, and in some cases (SIMD-heavy matrix math), there are no useful resources left to share.&lt;/p&gt;
    &lt;head rend="h2"&gt;Turbo&lt;/head&gt;
    &lt;p&gt;It's harder to see, but Turbo is also having an effect. This particular processor runs at 4.9 GHz at low utilization, but slowly drops to 4.3 GHz as more cores become active2.&lt;/p&gt;
    &lt;p&gt;Note the zoomed-in y-axis. The clock speed "only" drops by 15% on this processor.&lt;/p&gt;
    &lt;p&gt;Since CPU utilization is calculated as busy cycles / total cycles, this means the denominator is getting smaller as the numerator gets larger, so we get yet another reason why actual CPU utilization increases faster than linearly.&lt;/p&gt;
    &lt;head rend="h1"&gt;Does This Matter?&lt;/head&gt;
    &lt;p&gt;If you look at CPU utilization and assume it will increase linearly, you're going to have a rough time. If you're using the CPU efficiently (running above "50%" utilization), the reported utilization is an underestimate, sometimes significantly so.&lt;/p&gt;
    &lt;p&gt;And keep in mind that I've only shown results for one processor, but hyperthreading performance and Turbo behavior can vary wildly between different processors, especially from different companies (AMD vs Intel).&lt;/p&gt;
    &lt;p&gt;The best way I know to work around this is to run benchmarks and monitor actual work done:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Benchmark how much work your server can do before having errors or unacceptable latency.&lt;/item&gt;
      &lt;item&gt;Report how much work your server is currently doing.&lt;/item&gt;
      &lt;item&gt;Compare those two metrics instead of CPU utilization.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Bogo ops is presumably a reference to BogoMIPS, a "bogus" benchmark that Linux does at startup to very roughly understand CPU performance.Â â©&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;One of the main constraints processors operate under is needing to dissipate heat fast enough. When only one core is running, the processor can give that core some of the heat headroom that other cores aren't using and run it faster, but it can't do that all of the cores are running.Power usage works similarly and can be a constraint in some environments (usually not in a desktop computer, but frequently in servers).Â â©&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.brendanlong.com/cpu-utilization-is-a-lie.html"/></entry><entry><id>https://news.ycombinator.com/item?id=45110748</id><title>Show HN: LightCycle, a FOSS game in Rust based on Tron</title><updated>2025-09-03T02:13:24.848146+00:00</updated><content>&lt;doc fingerprint="d9086396b91ed9f"&gt;
  &lt;main&gt;
    &lt;p&gt;A classic TRON-inspired light cycle game built with Rust and ggez.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Single-player and Two-player modes - Battle against AI or a friend&lt;/item&gt;
      &lt;item&gt;Adjustable AI Difficulty - Easy, Medium, and Hard AI opponents&lt;/item&gt;
      &lt;item&gt;Boost Mechanic - Limited energy boost system for strategic gameplay&lt;/item&gt;
      &lt;item&gt;Visual Effects - Particle trails, screen shake, and glow effects&lt;/item&gt;
      &lt;item&gt;Pause Menu - Full pause functionality with in-game controls&lt;/item&gt;
      &lt;item&gt;Retro Aesthetic - 8-bit styled graphics with neon colors&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;1&lt;/code&gt;- Start single-player game&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;2&lt;/code&gt;- Start two-player game&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;D&lt;/code&gt;- Cycle AI difficulty (Easy/Medium/Hard)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;W&lt;/code&gt;/&lt;code&gt;A&lt;/code&gt;/&lt;code&gt;S&lt;/code&gt;/&lt;code&gt;D&lt;/code&gt;- Movement&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Left Shift&lt;/code&gt;- Boost&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;Arrow Keys&lt;/code&gt;- Movement&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Right Shift&lt;/code&gt;- Boost&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;P&lt;/code&gt;- Pause/Resume&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ESC&lt;/code&gt;- Return to menu&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rust (latest stable version)&lt;/item&gt;
      &lt;item&gt;Cargo&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone the repository
git clone https://github.com/Tortured-Metaphor/LightCycle.git
cd LightCycle

# Build the project
cargo build --release

# Run the game
cargo run --release&lt;/code&gt;
    &lt;p&gt;Navigate your light cycle around the arena, leaving a trail behind you. Avoid crashing into walls, your own trail, or your opponent's trail. The last cycle standing wins!&lt;/p&gt;
    &lt;p&gt;Use your boost strategically - it doubles your speed but drains energy quickly. Energy regenerates when not boosting.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Easy: Shorter reaction time, makes mistakes more often&lt;/item&gt;
      &lt;item&gt;Medium: Balanced gameplay, moderate challenge&lt;/item&gt;
      &lt;item&gt;Hard: Advanced pathfinding, optimal decision making, aggressive boost usage&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Built with:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;v0.2.0 - Added pause menu, boost mechanics, AI difficulties, visual effects&lt;/item&gt;
      &lt;item&gt;v0.1.0 - Initial game implementation&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This project is open source and available under the MIT License.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/Tortured-Metaphor/LightCycle"/></entry><entry><id>https://news.ycombinator.com/item?id=45111179</id><title>I want to be left alone</title><updated>2025-09-03T02:13:24.424964+00:00</updated><content>&lt;doc fingerprint="be9b284d92f7203"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;I want to be left alone&lt;/head&gt;
    &lt;p&gt;Do you want to sign up for text alerts? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to get a phone call reminder before your appointment? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you need help with self-checkout? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to sign up for our rewards program? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to provide your email address to read the rest of the article? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to turn on notifications? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to see what I’m selling door-to-door? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to use our A.I. text prediction? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to go to our seminar? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to set up a meeting with one of our sales ninjas? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to scan a QR code? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you agree to our terms? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want our extended warranty? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to connect your contacts? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to sign up to our subscription service? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to leave a review? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to leave a tip? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to join our Discord? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to buy the DLC? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to give us your phone number to get a coupon? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to use our online portal? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want your quiz results emailed to you? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to turn on location services? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to create an account? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to redeem your points? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to round-up? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to read the whitepaper? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you accept our cookies? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to subscribe to our newsletter? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to watch these ads for extra coins? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to see a list of our new features? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to subscribe to our podcast? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to follow us on Instagram? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to watch our YouTube instructions? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to like and subscribe? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want a free home evaluation? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to upgrade to our pro service? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to join our Patreon? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to sign up for our credit card? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to go ad free? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want the bonus content? No, I want to be left alone.&lt;/p&gt;
    &lt;p&gt;Do you want to pet my cat? Yes. Yes I do.&lt;/p&gt;
    &lt;p&gt;- - - - -&lt;/p&gt;
    &lt;p&gt;Thank you for reading! If you would like to comment on this post you can start a conversation on the Fediverse. Message me on Mastodon at @cinimodev@masto.ctms.me. Or, you may email me at blog.discourse904@8alias.com. This is an intentionally masked email address that will be forwarded to the correct inbox.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.ctms.me/posts/2024-07-26-i-want-to-be-left-alone/"/></entry></feed>