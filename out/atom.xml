<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-26T14:35:51.077170+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45706792</id><title>Show HN: Diagram as code tool with draggable customizations</title><updated>2025-10-26T14:36:01.400379+00:00</updated><content>&lt;doc fingerprint="2e583e5e3b2d53b2"&gt;
  &lt;main&gt;
    &lt;head class="px-3 py-2"&gt;oxdraw_demo.mov&lt;/head&gt;
    &lt;p&gt;The goal of &lt;code&gt;oxdraw&lt;/code&gt; is to make it easy to create and maintain high-quality diagrams using a declarative and reproducible syntax.
Charts are written in Mermaid syntax, while a web interface allows users to fine-tune positions connector paths, colors, and other styling components. Whenever a diagram is tweaked visually, the structural changes are persisted back to the source file as declarative code so that everything remains deterministic and versionable.
The changes are saved as comments in the mermaid file so it remains compatible with other Mermaid tools.
The repo is composed of the Rust CLI to compile &lt;code&gt;.mmd&lt;/code&gt; files into images and the React based web interface to editing the files.&lt;/p&gt;
    &lt;p&gt;The reason I started this project was I used Mermaid a lot in the past when making architecture diagrams or trying to understand large codebases through having AI tools generate .mmd files to visualize them. However what typically happened was since these diagrams couldn't be edited minutely for example cleaning up joints and chart organization, I would have to move over the diagrams I started to things like Lucidchart. So the big picture goal of this project is to unite the benefits of code generated diagramming like Mermaid with the customizability of diagram software like Lucidchart.&lt;/p&gt;
    &lt;code&gt;cargo install oxdraw&lt;/code&gt;
    &lt;code&gt;oxdraw --input flow.mmd  &lt;/code&gt;
    &lt;code&gt;oxdraw --input flow.mmd --edit&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Flag&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-i, --input &amp;lt;PATH&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Read a Mermaid source file; pass &lt;code&gt;-&lt;/code&gt; to consume stdin instead.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-o, --output &amp;lt;PATH&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Write the rendered asset to a specific path; pass &lt;code&gt;-&lt;/code&gt; to stream SVG to stdout. Defaults to &lt;code&gt;&amp;lt;input&amp;gt;.svg&lt;/code&gt; (or &lt;code&gt;&amp;lt;input&amp;gt;.&amp;lt;format&amp;gt;&lt;/code&gt; if an explicit format is chosen) and &lt;code&gt;out.svg&lt;/code&gt; when reading from stdin.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--png&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Shorthand for &lt;code&gt;--output-format png&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--scale &amp;lt;FACTOR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Scale multiplier for PNG rasterization (default &lt;code&gt;10.0&lt;/code&gt;); values must be greater than zero. Ignored for SVG output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--edit&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Launch the interactive editor pointing at the supplied diagram instead of emitting an asset once.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--serve-host &amp;lt;ADDR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Override the bind address used while &lt;code&gt;--edit&lt;/code&gt; is active (default &lt;code&gt;127.0.0.1&lt;/code&gt;).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--serve-port &amp;lt;PORT&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Override the HTTP port while &lt;code&gt;--edit&lt;/code&gt; is active (default &lt;code&gt;5151&lt;/code&gt;).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-b, --background-color &amp;lt;COLOR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Background fill passed to the renderer (currently SVG only). Applies to both one-off renders and the editor preview.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;-q, --quiet&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Suppress informational stdout such as the success message after rendering to disk.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Control&lt;/cell&gt;
        &lt;cell role="head"&gt;What it does&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Delete selected&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Removes the currently selected node or edge; available via the Delete/Backspace keys as well.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Node Fill/Stroke/Text pickers&lt;/cell&gt;
        &lt;cell&gt;Apply per-node color overrides; double-clicking a node clears its override.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Reset node style&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Remove all color overrides for the selected node.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Color picker&lt;/cell&gt;
        &lt;cell&gt;Override the selected edge stroke color.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Line selector&lt;/cell&gt;
        &lt;cell&gt;Toggle between solid and dashed stroke styles.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Arrow selector&lt;/cell&gt;
        &lt;cell&gt;Choose arrow directions (forward/backward/both/none).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Add control point&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Insert a new draggable waypoint on the selected edge to fine-tune routing.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;Reset edge style&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Drop edge-specific styling and revert to defaults; double-clicking an edge handle also clears its manual path.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Canvas and editor interactions&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Drag nodes to update their stored positions with grid snapping and live alignment guides; Shift+Arrow nudges the selection in grid-sized jumps.&lt;/item&gt;
      &lt;item&gt;Drag edge handles (or the label handle) to reshape routes; double-click an edge to insert a handle and double-click a handle to remove overrides.&lt;/item&gt;
      &lt;item&gt;Drag an entire subgraph container to move all of its member nodes (and any edge overrides) together while maintaining separation from sibling groups.&lt;/item&gt;
      &lt;item&gt;The source panel mirrors the Mermaid file, auto-saves after short idle periods, and surfaces pending/saving/error states alongside the current selection.&lt;/item&gt;
      &lt;item&gt;Status text in the top toolbar signals loading, saving, and the currently edited file path.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head class="px-3 py-2"&gt;path_algo.mov&lt;/head&gt;
    &lt;p&gt;The path drawing algorithm is fun because there is a lot of ambiguity with what optimal behavior could be. Some prefer smooth lines because there is less total line but I prefer strong edges to make the diagram a bit more clear. Some prefer no overlapping lines but I sometimes prefer an overlap rather than letting the lines get super long and string out of the diagram very far. This is an example of using the delete key to remove one relationship and then using the arrow keys to move around one the nodes and seeing how the algorithm recomputes the positioning. There's definitely some improvements to be made to this algorithm so I imagine this will keep getting better :)&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/RohanAdwankar/oxdraw"/><published>2025-10-25T20:38:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45706938</id><title>How programs get run: ELF binaries (2015)</title><updated>2025-10-26T14:36:01.220073+00:00</updated><content>&lt;doc fingerprint="aba318d5a40737c8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How programs get run: ELF binaries&lt;/head&gt;
    &lt;quote&gt;This article brought to you by LWN subscribers&lt;p&gt;Subscribers to LWN.net made this article — and everything that surrounds it — possible. If you appreciate our content, please buy a subscription and make the next set of articles possible.&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;The previous article in this series described the general mechanisms that the Linux kernel has for executing programs as a result of a user-space call to execve(). However, the particular format handlers described in that article each deferred the process of execution to an inner call to search_binary_handler(). That recursion almost always ends with the invocation of an ELF binary program, which is the subject of this article.&lt;/p&gt;
    &lt;head rend="h4"&gt;The ELF format&lt;/head&gt;
    &lt;p&gt;The ELF (Executable and Linkable Format) format is the main binary format in use on modern Linux systems, and support for it is implemented in the file fs/binfmt_elf.c. It's also a slightly complicated format for the kernel to handle; the main load_elf_binary() function spans over 400 lines, and the ELF support code is more than four times as big as the code that supports the old a.out format.&lt;/p&gt;
    &lt;p&gt;An ELF file for an executable program (rather than a shared library or an object file) must always contain a program header table near the start of the file, after the ELF header; each entry in this table provides information that is needed to run the program.&lt;/p&gt;
    &lt;p&gt;The kernel only really cares about three types of program header entries. The first type is the PT_LOAD segment, which describes areas of the new program's running memory. This includes code and data sections that come from the executable file, together with the size of a BSS section. The BSS will be filled with zeroes (thus only its length needs to be stored in the executable file). The second entry of interest is a PT_INTERP entry, which identifies the run-time linker needed to assemble the complete program; for the time being, we'll assume a statically linked ELF binary and return to dynamic linking later. Finally, the kernel also gets a single bit of information from a PT_GNU_STACK entry, if present, which indicates whether the program's stack should be made executable or not.&lt;/p&gt;
    &lt;p&gt;(This article only focuses on what's needed to load an ELF program, rather than exploring all of the details of the format. The interested reader can find much more information via the references linked from Wikipedia's ELF article or by exploring real binaries with the objdump tool.)&lt;/p&gt;
    &lt;head rend="h4"&gt;Processing ELF binaries&lt;/head&gt;
    &lt;p&gt;Loading an ELF binary is handled by the load_elf_binary() function, which starts by examining the ELF header to check that the file in question does indeed look like a supported ELF format. The handler needs the whole of the ELF program header, whether it is within the first 128 bytes read into buf in linux_binprm or not, so it needs to read it into some scratch space.&lt;/p&gt;
    &lt;p&gt;The code now loops over the program header entries, checking for an interpreter (PT_INTERP) and whether the program's stack should be executable (from the PT_GNU_STACK entry). With this preparation done, the code needs to initialize those attributes of the new program that are not inherited from the old program; the Single UNIX Specification version 3 (SUSv3) exec specification describes most of the required behavior (and table 28-4 of The Linux Programming Interface gives an excellent summary of the attributes involved).&lt;/p&gt;
    &lt;p&gt;The process of setting up the new program starts with a call to flush_old_exec(), which clears up state in the kernel that refers to the previous program. Any other threads of the old program are killed so the new program starts with a single thread, and the signal-handling information for the process is unshared so that it can be safely altered later. Any pending POSIX timers for the old program are cleared, and the location of the executable file for the program (visible at /proc/pid/exe) is updated. The virtual memory mappings for the old program are released, which also kills any pending asynchronous I/O operations and frees any uprobes. Finally, the personality of the process is updated to remove any features that could affect security, as previously recorded in the per_clear field in linux_binprm. The main handler code also calls the SET_PERSONALITY() macro to set the thread flags appropriately for a new 64-bit program.&lt;/p&gt;
    &lt;p&gt;A corresponding call to setup_new_exec() now sets up the kernel's internal state for the new program. This function starts by determining whether the new program can generate a core dump (or have ptrace() attach to it); this is disabled by default for setuid or setgid programs. Dumping is also disabled when the program file isn't readable under the current credentials. A call to __set_task_comm() sets the current task's comm field to the basename of the originally invoked filename; this value is used as a thread name, and is accessible to user space via the PR_GET_NAME and PR_SET_NAME prctl() operations. A call to flush_signal_handlers() sets up the signal handlers for the new program; any signal handler that's not SIG_IGN gets set to the default SIG_DFL value (so any ignored signals are inherited by the new program). Finally, a call to do_close_on_exec() closes all of the old program's file descriptors that have the O_CLOEXEC flag set; other file descriptors will be inherited by the new program.&lt;/p&gt;
    &lt;p&gt;The virtual memory for the new program also needs to be set up. To improve security (by helping protect against stack overflow attacks), the highest address for the stack is typically moved downward by a random offset. An initial call to setup_arg_pages() then sets up the kernel's memory tracking structures, and adjusts for the new location of the stack. The code loops through all of the PT_LOAD segments in the program file and maps them into the process's address space, setting up the new program's memory layout. It then sets up zero-filled pages that correspond to the program's BSS segment. Also, additional special pages — such as the virtual dynamic shared object (vDSO) pages — need to be mapped, which is taken care of by a call to arch_setup_additional_pages(). An empty page may also be mapped at the zero address in the program's address space for backward-compatibility reasons (old SVr4 programs apparently assume that reading from a NULL pointer would return zeros rather than SIGSEGV).&lt;/p&gt;
    &lt;p&gt;Next, the credentials for the new program are set up via a call to install_exec_creds(). This function lets any active Linux Security Module (LSM) know about the change in credentials (through the bprm_committing_creds and bprm_committed_creds LSM hooks), and the inner commit_creds() function performs the assignment.&lt;/p&gt;
    &lt;p&gt;The final preparation for running the new program is to set up the rest of its stack (in its new randomized location), by calling the create_elf_tables() function; this is described in a separate section below.&lt;/p&gt;
    &lt;p&gt;All of the preparation has now been done, and the new program can be launched. An earlier article explained how the kernel's system_call entry point pushes the user-space CPU registers to the kernel stack before entering the main kernel code, and these registers are correspondingly restored when the system call completes. The area of the stack that holds the saved registers is cast to a pt_regs structure, and the saved user-space CPU registers can thus be overwritten with suitable values (zeroes) for the start of the new program. The call to the start_thread() function also sets the saved instruction pointer to the entry point of the program (or the dynamic linker), and the saved stack pointer to the current top of the stack (from the p field in linux_binprm). The zero return code from the handler indicates success, and the execve() syscall returns to user space — but to a completely different user space, where the process's memory has been remapped, and the restored registers have values that start the execution of the new program.&lt;/p&gt;
    &lt;head rend="h4"&gt;Populating the stack: the auxiliary vector, environment and arguments&lt;/head&gt;
    &lt;p&gt;The create_elf_tables() function adds more information to the new program's stack, below the argument and environment information added by the generic code, as two distinct chunks. An initial call to arch_align_stack() rounds down the existing stack position to a 16-byte boundary, and may also further randomize the stack position downward slightly.&lt;/p&gt;
    &lt;p&gt;The first collection of information forms the ELF auxiliary vector, a collection of (id, value) pairs that describe useful information about the program being run and the environment it is running in, communicated from the kernel to user space. To build this vector, the handler code first needs to push onto the stack any information that doesn't fit within a 64-bit value; for x86_64 this is a platform capability description (the string "x86_64") and 16 bytes of random data (to help seed user-space random number generators).&lt;/p&gt;
    &lt;p&gt;Next, the code assembles the (id, value) pairs for the auxiliary vector in the saved_auxv space within the mm_struct. An LWN article from Michael Kerrisk describes the contents of this vector, so here we just mention a few interesting entries:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The (architecture-specific) first entry in the vector is the AT_SYSINFO_EHDR value for x86_64; this indicates the location of the vDSO page, as referenced in an earlier article.&lt;/item&gt;
      &lt;item&gt;The AT_PLATFORM value is the location of the "x86_64" platform capability description pushed earlier.&lt;/item&gt;
      &lt;item&gt;The AT_RANDOM value is the location of the random data pushed earlier.&lt;/item&gt;
      &lt;item&gt;The AT_EXECFN value holds the location of the program filename that was pushed as the very first thing on the stack (and whose location was stored in the exec field of linux_binprm), above the arguments and environment values.&lt;/item&gt;
      &lt;item&gt;The AT_ENTRY value holds the entry point for the text segment, i.e. where program execution should start.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once this auxiliary vector is created, the code now assembles the rest of the new program's stack. The required space is calculated, and then the entries are inserted from low addresses to higher ones:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The argc argument count is inserted first.&lt;/item&gt;
      &lt;item&gt;An array of argument pointers is inserted next, ending with a NULL pointer. This is where main()'s argv will eventually point.&lt;/item&gt;
      &lt;item&gt;An array of environment pointers is inserted next, ending with a NULL pointer. This is where environ will point.&lt;/item&gt;
      &lt;item&gt;The auxiliary vector is put at the highest address, just below the additional values it references.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Taken together, the top of the new program's address space will have contents like the following example (this page has a similar example):&lt;/p&gt;
    &lt;quote&gt;------------------------------------------------------------- 0x7fff6c845000 0x7fff6c844ff8: 0x0000000000000000 _ 4fec: './stackdump\0' &amp;lt;------+ env / 4fe2: 'ENVVAR2=2\0' | &amp;lt;----+ \_ 4fd8: 'ENVVAR1=1\0' | &amp;lt;---+ | / 4fd4: 'two\0' | | | &amp;lt;----+ args | 4fd0: 'one\0' | | | &amp;lt;---+ | \_ 4fcb: 'zero\0' | | | &amp;lt;--+ | | 3020: random gap padded to 16B boundary | | | | | | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -| | | | | | 3019: 'x86_64\0' &amp;lt;-+ | | | | | | auxv 3009: random data: ed99b6...2adcc7 | &amp;lt;-+ | | | | | | data 3000: zero padding to align stack | | | | | | | | . . . . . . . . . . . . . . . . . . . . . . . . . . .|. .|. .| | | | | | 2ff0: AT_NULL(0)=0 | | | | | | | | 2fe0: AT_PLATFORM(15)=0x7fff6c843019 --+ | | | | | | | 2fd0: AT_EXECFN(31)=0x7fff6c844fec ------|---+ | | | | | 2fc0: AT_RANDOM(25)=0x7fff6c843009 ------+ | | | | | ELF 2fb0: AT_SECURE(23)=0 | | | | | auxiliary 2fa0: AT_EGID(14)=1000 | | | | | vector: 2f90: AT_GID(13)=1000 | | | | | (id,val) 2f80: AT_EUID(12)=1000 | | | | | pairs 2f70: AT_UID(11)=1000 | | | | | 2f60: AT_ENTRY(9)=0x4010c0 | | | | | 2f50: AT_FLAGS(8)=0 | | | | | 2f40: AT_BASE(7)=0x7ff6c1122000 | | | | | 2f30: AT_PHNUM(5)=9 | | | | | 2f20: AT_PHENT(4)=56 | | | | | 2f10: AT_PHDR(3)=0x400040 | | | | | 2f00: AT_CLKTCK(17)=100 | | | | | 2ef0: AT_PAGESZ(6)=4096 | | | | | 2ee0: AT_HWCAP(16)=0xbfebfbff | | | | | 2ed0: AT_SYSINFO_EHDR(33)=0x7fff6c86b000 | | | | | . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . | | | | | 2ec8: environ[2]=(nil) | | | | | 2ec0: environ[1]=0x7fff6c844fe2 ------------------|-+ | | | 2eb8: environ[0]=0x7fff6c844fd8 ------------------+ | | | 2eb0: argv[3]=(nil) | | | 2ea8: argv[2]=0x7fff6c844fd4 ---------------------------|-|-+ 2ea0: argv[1]=0x7fff6c844fd0 ---------------------------|-+ 2e98: argv[0]=0x7fff6c844fcb ---------------------------+ 0x7fff6c842e90: argc=3&lt;/quote&gt;
    &lt;p&gt;Note that although there are two randomizations in the stack layout (the position of the top of memory and the size of the gap between the argument values and the auxiliary vector), the newly running program can still figure out where all of the information on the stack is. The SP register tells the program where the top of the stack is (i.e. the lowest address), and the command-line arguments are arranged upwards in memory from there, with a NULL pointer to mark where they end. The environment values are found next, again with a NULL pointer to terminate, and the auxiliary vector is found at the next consecutive addresses, closing with an AT_NULL ID. The values found within all of this information give the addresses of the argument strings, environment strings, and auxiliary data values, so no explicit information about the size of the random gap is needed.&lt;/p&gt;
    &lt;head rend="h4"&gt;Dynamically linked programs&lt;/head&gt;
    &lt;p&gt;So far we've assumed the program being executed is statically linked and skipped over steps that would be triggered by the presence of a PT_INTERP entry in the ELF program header. However, most programs are dynamically linked, meaning that required shared libraries have to be located and linked at run-time. This is performed by the runtime linker (typically something like /lib64/ld-linux-x86-64.so.2), and the identity of this linker is specified by the PT_INTERP program header entry.&lt;/p&gt;
    &lt;p&gt;To cope with a runtime linker, the ELF handler first reads the ELF interpreter file name into scratch space, then opens the executable file with open_exec(). The first 128 bytes of the file are read into the bprm-&amp;gt;buf scratch area, replacing the contents of the original program file and allowing access to the ELF header of the interpreter program — which must therefore be an ELF binary itself, rather than any other format.&lt;/p&gt;
    &lt;p&gt;After the program code has been loaded into memory as described previously, the ELF handler also loads the ELF interpreter program into memory with load_elf_interp(). This process is similar to the process of loading the original program: the code checks the format information in the ELF header, reads in the ELF program header, maps all of the PT_LOAD segments from the file into the new program's memory, and leaves room for the interpreter's BSS segment.&lt;/p&gt;
    &lt;p&gt;The execution start address for the program is also set to be the entry point of the interpreter, rather than that of the program itself. When the execve() system call completes, execution then begins with the ELF interpreter, which takes care of satisfying the linkage requirements of the program from user space — finding and loading the shared libraries that the program depends on, and resolving the program's undefined symbols to the correct definitions in those libraries. Once this linkage process is done (which relies on a much deeper understanding of the ELF format than the kernel has), the interpreter can start the execution of the new program itself, at the address previously recorded in the AT_ENTRY auxiliary value.&lt;/p&gt;
    &lt;head rend="h4"&gt;Compatibility with other architectures&lt;/head&gt;
    &lt;p&gt;As described previously, a modern 64-bit (x86_64) Linux system can also support running 32-bit binaries of two types: normal 32-bit binaries (x86_32), and x32 ABI programs (which can make use of additional x86_64 registers). So how does the kernel support these binaries?&lt;/p&gt;
    &lt;p&gt;The key file that provides support for these formats is compat_binfmt_elf.c, which is included in the kernel when the CONFIG_COMPAT_BINFMT_ELF config option is set. This file didn't appear in our earlier list of places that register binary handlers, because the file contains almost no code of its own. Instead, it includes the main binfmt_elf.c ELF handler code (using #include), and uses the preprocessor to redirect various internal functions and values to 32-bit compatibility versions. Other than these changes, the format handler therefore behaves the same as the normal ELF handler described above.&lt;/p&gt;
    &lt;p&gt;One set of changes uses 32-bit versions of the structures describing the layout of the ELF file; similarly, the appropriate constant values for 32-bit binaries are used, which ensures that the compatibility handler only claims support for the relevant ELF binary types. In particular, the elf_check_arch() call is replaced with a compat_elf_check_arch() version that checks for either x86_32 or (if configured) x32.&lt;/p&gt;
    &lt;p&gt;The preprocessor changes also redirect some of the inner functionality of the ELF handler code. The invocation of the SET_PERSONALITY() macro is redirected to set_personality_ia32() so that the relevant thread flags for the 32-bit architecture are set and, similarly, the arch_setup_additional_pages() function is replaced with a version that sets up a 32-bit vDSO. More significantly, the start_thread() function is replaced with compat_start_thread(), which maps to start_thread_ia32(). This alters the arguments to the inner start_thread_common() function so that the saved segment registers are initialized differently than for x86_64 binaries (and the ELF_PLAT_INIT() macro is also adjusted to match).&lt;/p&gt;
    &lt;head rend="h4"&gt;Epilogue&lt;/head&gt;
    &lt;p&gt;Every program that runs on a Linux system passes through the portal of execve(); as such it's a key piece of kernel functionality that's worth understanding in detail. Although the kernel natively supports script and other machine-code format programs, program execution on a modern Linux system eventually involves running an ELF binary. ELF is a complicated format, but fortunately the kernel can ignore most of that complexity — it only needs to understand just enough ELF to load segments into memory, and to invoke a user space run-time linker program to finish the job of assembling a complete running program.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Kernel&lt;/cell&gt;
        &lt;cell&gt;exec()&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;GuestArticles&lt;/cell&gt;
        &lt;cell&gt;Drysdale, David&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Feb 5, 2015 19:24 UTC (Thu) by Tara_Li (guest, #26706) [Link] (4 responses) http://www.muppetlabs.com/~breadbox/software/tiny/teensy.... The creation of a 45 byte ELF executable - admitted, all it does is return 42, but it *does* execute. Posted Feb 6, 2015 2:14 UTC (Fri) by vonbrand (subscriber, #4458) [Link] That one contains a nice discussion of checks that aren't made when launching an executable... any possible screwups by not checking? Posted Feb 6, 2015 13:34 UTC (Fri) by jzbiciak (guest, #5246) [Link] That was a fun read. :-) Posted Feb 7, 2015 14:05 UTC (Sat) by felixfix (subscriber, #242) [Link] (1 responses) Posted Feb 16, 2015 16:04 UTC (Mon) by bokr (guest, #58369) [Link] http://en.wikipedia.org/wiki/LGP-30 Likewise, the RPC-4000 was manufactured by Librascope, Posted Feb 7, 2015 4:01 UTC (Sat) by felixfix (subscriber, #242) [Link] (2 responses) Then I learned machine language for it, and delighted in knowing that 11 was add, 12 was subtract, while 21 was add immediate and 22 was subtract immediate (just reaching; those may not be correct!). My teacher and I began a contest to see who could get the most interesting program on a single 80 column card. I think he gave up when I got 120 digits of instruction with various nefarious overlaps. The program printed out THIMK over and over on the console typewriter. One sense switch would bypass a delay loop; a second halted the program. It couldn't print THINK because that M was the halt instruction. I think I learned for more about useful programming in that summer than any class since. Posted Feb 7, 2015 13:18 UTC (Sat) by vonbrand (subscriber, #4458) [Link] I remember the IBM 1620 had no proper FORTRAN II, but some cut-down dialect called PDQ FORTRAN. Posted Sep 8, 2018 2:23 UTC (Sat) by Since1969 (guest, #127103) [Link] 1* were the immediate instructions; 2* were the "storage-to-storage" ones. My first program was computing Hero's Formula using "FORTRAN with Format". Later we got Load and Go FORTRAN, which saved a lot of trees. But after a few FORTRAN programs, I learned SPS (assembler). One of the coolest tricks was coding loops of different lengths which produced tones in various pitches in a nearby FM radio. Great machine. Posted Feb 8, 2015 18:50 UTC (Sun) by kleptog (subscriber, #1183) [Link] Posted Feb 12, 2015 16:52 UTC (Thu) by nye (subscriber, #51576) [Link] (1 responses) I have an instinctive reaction that this sort of behaviour should have to be explicitly enabled via sysctl or something - it seems to violate the principle of least astonishment in a way that could have surprising implications, including security ones. Am I way off base here? Certainly I am working from a position of abject ignorance. Posted Feb 12, 2015 17:20 UTC (Thu) by drysdale (guest, #95971) [Link] Posted Feb 16, 2015 17:26 UTC (Mon) by nix (subscriber, #2304) [Link] &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head/&gt; There's also The Story of Mel. &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;LGP-30&lt;/head&gt;&lt;lb/&gt; deserves more credit than "The Story of Mel" gives.&lt;lb/&gt; which had become a division of General Precision by then, IIRC.&lt;lb/&gt; (I started work at Librascope Sept '59, and those were the&lt;lb/&gt; computers I cut my teeth on. It's been interesting -- and still is ;-)&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;lb/&gt; &amp;gt;space for backward-compatibility reasons (old SVr4 programs apparently assume&lt;lb/&gt; &amp;gt;that reading from a NULL pointer would return zeros rather than SIGSEGV).&lt;head/&gt; That behaviour does need to be explicitly enabled via the personality() syscall; of the pre-defined personality values, only PER_SRV4 and PER_UW7 set the MMAP_PAGE_ZERO bit that controls this behaviour. (The bit is also explicitly cleared when running a setuid/setgid binary.) &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://lwn.net/Articles/631631/"/><published>2025-10-25T21:03:39+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45707539</id><title>D2: Diagram Scripting Language</title><updated>2025-10-26T14:36:01.083168+00:00</updated><content>&lt;doc fingerprint="14eb1b5921af8090"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;D2 Tour&lt;/head&gt;
    &lt;p&gt;D2 is a diagram scripting language that turns text to diagrams. It stands for Declarative Diagramming. Declarative, as in, you describe what you want diagrammed, it generates the image.&lt;/p&gt;
    &lt;p&gt;For example, download the CLI, create a file named &lt;code&gt;input.d2&lt;/code&gt;, copy paste the following,
run this command, and you get the image below.&lt;/p&gt;
    &lt;head rend="h2"&gt;Using the CLI watch modeâ&lt;/head&gt;
    &lt;p&gt;You can finish this tour in about 5-10 minutes, and at the end, there's a cheat sheet you can download and refer to. If you want just the bare essentials, Getting Started takes ~2 mins.&lt;/p&gt;
    &lt;p&gt;The source code for D2 is hosted here: https://github.com/terrastruct/d2.&lt;/p&gt;
    &lt;p&gt;The source code for these docs are here: https://github.com/terrastruct/d2-docs.&lt;/p&gt;
    &lt;p&gt;For each D2 snippet, you can hover over it to open directly in the Playground and tinker.&lt;/p&gt;
    &lt;p&gt;There's some exceptions like snippets that use imports.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://d2lang.com/tour/intro/"/><published>2025-10-25T22:40:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45707658</id><title>The Linux Boot Process: From Power Button to Kernel</title><updated>2025-10-26T14:36:00.960262+00:00</updated><content>&lt;doc fingerprint="a2b71910e515bfcd"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;The Linux Boot Process: From Power Button to Kernel&lt;/head&gt;- 15 mins&lt;head rend="h2"&gt;Part 1 — From power button to the kernel’s first breath&lt;/head&gt;&lt;p&gt;You press the power button. A second later a wall of text scrolls by, or a logo fades in, and eventually Linux appears. What happens in between is not magic. It is a careful handshake between tiny programs and a very literal CPU. This part follows that handshake until the very first line of C code inside the Linux kernel runs.&lt;/p&gt;&lt;head rend="h3"&gt;The very first instruction&lt;/head&gt;&lt;p&gt;When power stabilizes, the CPU resets itself to a tiny, old‑fashioned mode called real mode. Real mode dates back to the original 8086 chip. The rules are simple on purpose. Memory addresses are built from two values the CPU keeps in special fast storage called registers. You combine a segment and an offset like this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;physical_address = (segment &amp;lt;&amp;lt; 4) + offset&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If you see numbers like &lt;code&gt;0xFFFFFFF0&lt;/code&gt;, that is hexadecimal. Hex is base 16. We write &lt;code&gt;0x&lt;/code&gt; in front to make that clear. &lt;code&gt;0x10&lt;/code&gt; is 16 in everyday counting. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex lines up nicely with how hardware stores bits, which is why you see it everywhere in low‑level code.&lt;/p&gt;&lt;p&gt;Right after reset the CPU jumps to a special address called the reset vector at &lt;code&gt;0xFFFFFFF0&lt;/code&gt;. Think of it as a permanent bookmark that says “start here.” There is room for almost nothing at that address, so manufacturers put a short jump there that passes control to the firmware on your motherboard.&lt;/p&gt;&lt;p&gt;Tiny explainer: register A register is a tiny slot inside the CPU. It holds a number the CPU is using right now. Names like CS and IP are register names. CS means “code segment,” which marks the current neighborhood for instructions. IP means “instruction pointer,” which marks which instruction comes next.&lt;/p&gt;&lt;head rend="h3"&gt;BIOS and UEFI&lt;/head&gt;&lt;p&gt;The firmware is a small starter program baked into your board.&lt;/p&gt;&lt;p&gt;BIOS stands for Basic Input Output System. It is the older style. BIOS does a quick health check called POST, looks at the boot order, and tries each device. If it finds a disk whose very first 512‑byte sector ends with the marker bytes &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xAA&lt;/code&gt;, it treats that device as bootable. BIOS copies that sector to memory at &lt;code&gt;0x7C00&lt;/code&gt; and jumps there. That sector is tiny, so it usually knows only how to load the next, larger piece.&lt;/p&gt;&lt;p&gt;UEFI is the modern replacement. It still starts the machine, but it understands filesystems directly and can load bigger boot programs without the old “first sector” dance. UEFI also passes richer information to the operating system. Different path, same goal: hand control to a boot program that can load Linux.&lt;/p&gt;&lt;head rend="h3"&gt;Meet the bootloader&lt;/head&gt;&lt;p&gt;The bootloader is the usher that gets the operating system into place. GRUB is a popular choice on PCs. It reads its configuration, shows a menu if you installed one, and loads the Linux kernel into memory. The Linux kernel file actually contains two things:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a small setup program that still runs in real mode&lt;/item&gt;&lt;item&gt;the larger compressed kernel that will be unpacked a little later&lt;/item&gt;&lt;/list&gt;&lt;p&gt;GRUB also fills out a small structure called the setup header with useful facts: where it placed the kernel, where the command line lives, where the initrd is if you have one. Then it jumps into the setup program.&lt;/p&gt;&lt;head rend="h3"&gt;The setup program makes a safe room&lt;/head&gt;&lt;p&gt;Before Linux can do anything interesting, the setup code creates a predictable workspace.&lt;/p&gt;&lt;p&gt;It lines up the segment registers so memory copies behave the same way every time. Names you’ll see here are CS for code, DS for data, and SS for stack. It also clears a single CPU bit called the “direction flag” so copy instructions move forward through memory.&lt;/p&gt;&lt;p&gt;It creates a stack. The stack is a last‑in, first‑out workbench where functions store temporary values. SS says which segment the stack uses. SP is the pointer to the current top of the stack.&lt;/p&gt;&lt;p&gt;It clears a region called BSS. BSS is where global variables that must start as zero live. C code assumes BSS is zero. The setup program writes zeros over that entire span to keep that promise.&lt;/p&gt;&lt;p&gt;If you passed &lt;code&gt;earlyprintk&lt;/code&gt; on the kernel command line, the setup code also programs the serial port so it can print very early messages. This is useful when graphics are not ready yet.&lt;/p&gt;&lt;p&gt;Finally the setup program asks the firmware “how much usable RAM do we really have and where are the holes.” On old BIOS this is a call people often nickname e820, which returns a simple list of usable and reserved ranges. The kernel will use that list to avoid stepping on the firmware’s toes.&lt;/p&gt;&lt;p&gt;With that done, the setup code calls its first C function, which is literally named &lt;code&gt;main&lt;/code&gt;. We are still in the small old real mode at this point. The next job is to leave it.&lt;/p&gt;&lt;p&gt;Tiny explainer: interrupt An interrupt is a hardware or software “excuse me” that pauses what the CPU is doing and runs a small handler for something urgent. A timer tick is an interrupt. A key press is an interrupt. There are two flavors here. Maskable interrupts follow your rules and can be temporarily blocked so they do not fire during delicate moments. Non‑maskable interrupts, often called NMI, always cut in because they usually report serious hardware issues. We will control both while switching modes so nothing surprises us halfway through.&lt;/p&gt;&lt;head rend="h2"&gt;Part 2 — Leaving real mode, stepping through 32‑bit land, and arriving in 64‑bit&lt;/head&gt;&lt;p&gt;Modern Linux on PCs runs in long mode, which is the 64‑bit mode of x86_64. You cannot jump there directly from real mode. The path is real mode to protected mode and then protected mode to long mode. This part covers that path and explains the vocabulary on the way.&lt;/p&gt;&lt;head rend="h3"&gt;Protected mode, without the jargon haze&lt;/head&gt;&lt;p&gt;Protected mode is the 32‑bit world introduced to get past the limits of the 1980s. It adds two central ideas.&lt;/p&gt;&lt;p&gt;The Global Descriptor Table, or GDT, is a short list of segment descriptions. A description says “this segment starts here, covers this much, and is allowed to do these things.” Linux keeps this simple. It uses a flat model, which means the base is zero and the size covers the whole 32‑bit space. When everything is flat, addresses look like plain numbers again.&lt;/p&gt;&lt;p&gt;The Interrupt Descriptor Table, or IDT, is a directory of “phone numbers” for emergency calls. If an interrupt arrives, the CPU looks up the entry in the IDT and jumps to the handler listed there. During the switch we load a tiny placeholder IDT because we are about to block interrupts anyway. The full‑featured IDT arrives later once the real kernel is in charge.&lt;/p&gt;&lt;head rend="h3"&gt;The careful switch&lt;/head&gt;&lt;p&gt;The setup code turns off the noisy parts first. It disables maskable interrupts with a single instruction. It quiets the old PIC chips so hardware interrupts are fully blocked for a moment. It opens the A20 line. This is a historical quirk. Early PCs made addresses wrap at 1 megabyte. Opening A20 removes that wrap so higher addresses work like you expect. It resets the math coprocessor so the floating point state is clean.&lt;/p&gt;&lt;p&gt;Then it loads a tiny GDT with only what we need right now and a tiny IDT. Finally it sets a single bit named PE in a control register named CR0 and performs a far jump. That jump reloads the code segment from the GDT and locks in protected mode. It reloads the data and stack segments and fixes the stack pointer to match the new flat world.&lt;/p&gt;&lt;p&gt;We are now in 32‑bit protected mode.&lt;/p&gt;&lt;p&gt;Tiny explainer: control registers The CPU has a few special registers for on off switches. CR0 turns on protected mode. CR3 holds the address of the top of the page tables, which we will need in a second. CR4 enables a set of extended features such as larger page table entries.&lt;/p&gt;&lt;head rend="h3"&gt;Why we still are not done&lt;/head&gt;&lt;p&gt;Linux wants 64‑bit. That is long mode. Two things are needed.&lt;/p&gt;&lt;p&gt;Paging must be on. Paging is the translator between virtual addresses and physical addresses. Programs use virtual addresses. The hardware reads and writes physical memory. Page tables map one to the other in fixed‑size chunks called pages. On PCs a normal page is 4 kilobytes. There are also bigger pages. Early in boot the kernel uses 2 megabyte pages to describe low memory quickly.&lt;/p&gt;&lt;p&gt;A single bit named LME in a special register called EFER must be set to allow long mode. EFER is a model specific register, which is a fancy way of saying “a register used for certain CPU features.”&lt;/p&gt;&lt;head rend="h3"&gt;Building just enough paging&lt;/head&gt;&lt;p&gt;The 32‑bit prologue builds a small set of page tables that say “for this region, virtual equals physical.” That is called an identity map. It is enough to flip paging on safely.&lt;/p&gt;&lt;p&gt;To make this work the code enables PAE in CR4 so larger entries are used. It builds a minimal set of tables that cover low memory in 2 megabyte chunks. It writes the address of the top table into CR3. Paging is now ready.&lt;/p&gt;&lt;p&gt;Finally it sets LME in EFER and performs a far return into a label that is written as 64‑bit code. Long mode is now active. Segments are still “flat,” but addresses and registers are 64‑bit wide.&lt;/p&gt;&lt;p&gt;Why all the extra care Switching modes while a live system runs is like changing a car tire while rolling. The code blocks interruptions, prepares the minimum needed tables, flips the bit, and only then invites interrupts back. Slow and steady prevents weird half‑switched states.&lt;/p&gt;&lt;head rend="h2"&gt;Part 3 — Unpacking the real kernel, fixing addresses, and why Linux sometimes moves itself&lt;/head&gt;&lt;p&gt;We have a 64‑bit CPU with paging on and a compressed kernel in memory. Now the small 64‑bit stub does the practical work: get out of the way if needed, unpack the kernel, fix addresses if the kernel is not at its default spot, and jump.&lt;/p&gt;&lt;head rend="h3"&gt;Clearing a path and setting safety nets&lt;/head&gt;&lt;p&gt;The stub first figures out where it is actually running. Early code is linked as if it lived at address zero and then computes its real base at runtime. If the planned destination for the decompressed kernel would overlap the stub, it copies itself to a safe place.&lt;/p&gt;&lt;p&gt;It clears its own BSS so global state starts clean.&lt;/p&gt;&lt;p&gt;It loads a minimal IDT with two handlers. One for page fault and one for NMI. A page fault happens when the CPU cannot find a mapping for a virtual address it just tried to use. In our early identity‑mapped world, the tiny page fault handler can add the missing mapping on the fly and continue. The NMI handler is there so a non‑maskable interrupt does not crash the machine while we are still bringing things up.&lt;/p&gt;&lt;p&gt;It also builds identity mappings for the regions it will touch next. That includes the future home of the kernel, the small boot parameters page the bootloader filled in, and the command line buffer.&lt;/p&gt;&lt;head rend="h3"&gt;Decompressing Linux…&lt;/head&gt;&lt;p&gt;A C function commonly named &lt;code&gt;extract_kernel&lt;/code&gt; takes over. It sets aside a tiny heap for temporary buffers, prints the classic line, and unpacks the kernel using whatever algorithm the kernel was built with. gzip, xz, zstd, lzo, and others all plug into the same wrapper.&lt;/p&gt;&lt;p&gt;When the bytes are out, the decompressor reads the kernel’s ELF headers. ELF, short for Executable and Linkable Format, is both a file format and a map. It says which chunks are code, which are data, and exactly where each chunk wants to live. The decompressor copies each chunk where it belongs.&lt;/p&gt;&lt;p&gt;If the kernel is being loaded at a different address than it was built for, the decompressor applies relocations. A relocation is a small fix‑up that adjusts a pointer or an instruction that contains an address. The decompressor walks a list of these and patches each place so it points to the right spot in the address space we are actually using.&lt;/p&gt;&lt;p&gt;When everything is in place, the decompressor returns the entry point of the real kernel and jumps there, passing a pointer to the boot parameters. From that moment you are in the full kernel. The first function you meet is &lt;code&gt;start_kernel&lt;/code&gt;, and the big initialization begins.&lt;/p&gt;&lt;head rend="h3"&gt;Why the kernel sometimes moves itself on purpose&lt;/head&gt;&lt;p&gt;You may see kASLR mentioned in kernel logs. That stands for Kernel Address Space Layout Randomization. The idea is simple. If attackers do not know where the kernel lives in memory, certain attacks get a lot harder.&lt;/p&gt;&lt;p&gt;Early in boot, if kASLR is enabled, the decompressor chooses two “bases” at random:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a physical base, which is where the bytes will live in RAM&lt;/item&gt;&lt;item&gt;a virtual base, the starting virtual address the kernel will use once full paging is set up&lt;/item&gt;&lt;/list&gt;&lt;p&gt;How does it choose without breaking anything&lt;/p&gt;&lt;p&gt;It builds a do not touch list. That includes the decompressor itself, the compressed image, the initial ramdisk, the boot parameters page, and the command line buffer. It can also include ranges you reserve with a &lt;code&gt;memmap=&lt;/code&gt; option on the command line.&lt;/p&gt;&lt;p&gt;It scans the memory map from firmware to find large free regions. For each free region it counts how many aligned “slots” of the right size would fit. It draws a random number using the best early entropy source it has. On modern CPUs that might be a hardware random instruction. It reduces the number to the total number of slots and picks the matching slot. That becomes the physical base. The virtual base is chosen the same way, but within the kernel’s virtual address window.&lt;/p&gt;&lt;p&gt;If nothing suitable exists, the code falls back to the default addresses and prints a small warning. If you pass &lt;code&gt;nokaslr&lt;/code&gt; on the command line, the randomization step is skipped by design.&lt;/p&gt;&lt;head rend="h2"&gt;A quick glossary you can bookmark&lt;/head&gt;&lt;p&gt;Hexadecimal. Base 16 numbers written with &lt;code&gt;0x&lt;/code&gt;. &lt;code&gt;0x10&lt;/code&gt; is 16. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex maps cleanly to bits, which is why low‑level code uses it.&lt;/p&gt;&lt;p&gt;Register. A tiny slot inside the CPU that holds a number right now. Examples: CS, DS, SS, IP, SP.&lt;/p&gt;&lt;p&gt;Segment and offset. The two pieces used to build real‑mode addresses. Physical address equals segment times 16 plus offset.&lt;/p&gt;&lt;p&gt;BIOS. Older firmware that starts the machine, checks hardware, and loads the first boot sector into memory.&lt;/p&gt;&lt;p&gt;UEFI. Modern firmware that understands filesystems and loads larger boot programs directly.&lt;/p&gt;&lt;p&gt;Bootloader. The usher that places the kernel in memory and passes facts about the system to it. GRUB is a common one.&lt;/p&gt;&lt;p&gt;Stack. A last‑in, first‑out workbench for functions. SS selects its segment. SP points at the current top.&lt;/p&gt;&lt;p&gt;BSS. A region where global variables that must start as zero live. The kernel setup code clears it before C runs.&lt;/p&gt;&lt;p&gt;Interrupt. A fast “excuse me” from hardware or software. The CPU pauses, runs a small handler, then resumes. Maskable interrupts can be blocked for a moment. NMI cannot.&lt;/p&gt;&lt;p&gt;GDT. Global Descriptor Table. Short list of segment descriptors. Linux sets it to a simple flat model.&lt;/p&gt;&lt;p&gt;IDT. Interrupt Descriptor Table. Directory of interrupt handlers. Early boot uses a minimal one. The full kernel installs the real one later.&lt;/p&gt;&lt;p&gt;A20 line. Historical switch that must be opened to address above 1 megabyte correctly on old PCs.&lt;/p&gt;&lt;p&gt;Protected mode. 32‑bit mode that introduces the GDT and IDT and allows paging.&lt;/p&gt;&lt;p&gt;Long mode. 64‑bit mode on x86_64. Requires paging and a bit named LME set in the EFER register.&lt;/p&gt;&lt;p&gt;Paging. The translator from virtual addresses to physical memory. Implemented with page tables.&lt;/p&gt;&lt;p&gt;Page tables. The data structure that maps virtual pages to physical pages. Early boot uses identity maps. Normal pages are 4 KB. Early boot often uses 2 MB pages to cover ground quickly.&lt;/p&gt;&lt;p&gt;CR0, CR3, CR4. Control registers. CR0 turns on protected mode. CR3 points to the top of the page tables. CR4 enables extended features such as PAE.&lt;/p&gt;&lt;p&gt;EFER. A model‑specific register that holds Long Mode Enable among other bits.&lt;/p&gt;&lt;p&gt;ELF. The kernel’s on‑disk format with a built‑in map of what belongs where.&lt;/p&gt;&lt;p&gt;Relocation. A fix‑up that adjusts addresses when code is loaded at a different base than it was built for.&lt;/p&gt;&lt;p&gt;kASLR. Randomizes kernel base addresses at boot to make exploitation harder.&lt;/p&gt;&lt;p&gt;Feedback is extremely welcomed! You can reach out to me on X @0xkato&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.0xkato.xyz/linux-boot/"/><published>2025-10-25T23:04:23+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708292</id><title>A worker fell into a nuclear reactor pool</title><updated>2025-10-26T14:36:00.662056+00:00</updated><content>&lt;doc fingerprint="36763bc70a7784d2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Event Notification Report for October 22, 2025&lt;/head&gt;
    &lt;p&gt;U.S. Nuclear Regulatory Commission&lt;lb/&gt;Operations Center&lt;/p&gt;
    &lt;p&gt;EVENT REPORTS FOR&lt;lb/&gt;10/21/2025 - 10/22/2025 &lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57994&lt;/p&gt;
    &lt;p&gt; Facility: Wolf Creek&lt;lb/&gt;Region: 4 State: KS&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-4-LP&lt;lb/&gt;NRC Notified By: Michael J. Payne&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 4 State: KS&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Michael J. Payne&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 14:37 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 06:10 [CDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 14:37 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 06:10 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; BOTH TRAINS OF CONTROL ROOM EMERGENCY VENTILATION SYSTEM INOPERABLE&lt;lb/&gt;The following is a summary of information provided by the licensee via phone and email:&lt;lb/&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;lb/&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;lb/&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;The following is a summary of information provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;/p&gt;
    &lt;p&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;/p&gt;
    &lt;p&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57996&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 16:52 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 16:32 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:52 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 16:32 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;lb/&gt;Grant, Jeffery (IRMOC)&lt;lb/&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Grant, Jeffery (IRMOC)&lt;/p&gt;
    &lt;p&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; TRANSPORT OF CONTAMINATED PERSON OFFSITE&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;lb/&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;lb/&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;/p&gt;
    &lt;p&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57997&lt;/p&gt;
    &lt;p&gt; Facility: North Anna&lt;lb/&gt;Region: 2 State: VA&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;lb/&gt;NRC Notified By: Nick Wilson&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 2 State: VA&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Nick Wilson&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 23:10 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 21:08 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 23:10 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 21:08 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;p&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;A/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;74&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; AUTOMATIC REACTOR TRIP&lt;lb/&gt;The following information was provided by the licensee via email and phone:&lt;lb/&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;lb/&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via email and phone:&lt;/p&gt;
    &lt;p&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;/p&gt;
    &lt;p&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57990&lt;/p&gt;
    &lt;p&gt; Rep Org: Georgia Radioactive Material Pgm&lt;lb/&gt;Licensee: Piedmont Heart Institute&lt;lb/&gt;Region: 1&lt;lb/&gt;City: Douglasville State: GA&lt;lb/&gt;County:&lt;lb/&gt;License #: GA 1195-2&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Avionne Fortner&lt;lb/&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt;Licensee: Piedmont Heart Institute&lt;/p&gt;
    &lt;p&gt;Region: 1&lt;/p&gt;
    &lt;p&gt;City: Douglasville State: GA&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: GA 1195-2&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Avionne Fortner&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 08:20 [ET]&lt;lb/&gt;Event Date: 10/08/2025&lt;lb/&gt;Event Time: 00:00 [EDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:20 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/08/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Young, Matt (R1DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Young, Matt (R1DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - LEAKING SOURCE&lt;lb/&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;lb/&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;lb/&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;/p&gt;
    &lt;p&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;/p&gt;
    &lt;p&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57991&lt;/p&gt;
    &lt;p&gt; Rep Org: NV Div of Rad Health&lt;lb/&gt;Licensee: Universal Engineering Services&lt;lb/&gt;Region: 4&lt;lb/&gt;City: Reno State: NV&lt;lb/&gt;County:&lt;lb/&gt;License #: 00-11-14033-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Corey Creveling&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Universal Engineering Services&lt;/p&gt;
    &lt;p&gt;Region: 4&lt;/p&gt;
    &lt;p&gt;City: Reno State: NV&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: 00-11-14033-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Corey Creveling&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 13:51 [ET]&lt;lb/&gt;Event Date: 10/16/2025&lt;lb/&gt;Event Time: 08:15 [PDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 13:51 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 08:15 [PDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;lb/&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - STOLEN GAUGE&lt;lb/&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;lb/&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;lb/&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;lb/&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;lb/&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;/p&gt;
    &lt;p&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;/p&gt;
    &lt;p&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;/p&gt;
    &lt;p&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;/p&gt;
    &lt;p&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57992&lt;/p&gt;
    &lt;p&gt; Rep Org: Illinois Emergency Mgmt. Agency&lt;lb/&gt;Licensee: Elmhurst Hospital&lt;lb/&gt;Region: 3&lt;lb/&gt;City: Elmhurst State: IL&lt;lb/&gt;County:&lt;lb/&gt;License #: IL-01612-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Kimberly Stice&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Elmhurst Hospital&lt;/p&gt;
    &lt;p&gt;Region: 3&lt;/p&gt;
    &lt;p&gt;City: Elmhurst State: IL&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: IL-01612-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Kimberly Stice&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 16:35 [ET]&lt;lb/&gt;Event Date: 10/15/2025&lt;lb/&gt;Event Time: 00:00 [CDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:35 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/15/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Ziolkowski, Michael (R3DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Ziolkowski, Michael (R3DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - UNPLANNED CONTAMINATION&lt;lb/&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;lb/&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;lb/&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;lb/&gt;"Additional updates will be provided as they become available."&lt;lb/&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;/p&gt;
    &lt;p&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;/p&gt;
    &lt;p&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;/p&gt;
    &lt;p&gt;"Additional updates will be provided as they become available."&lt;/p&gt;
    &lt;p&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57998&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 08:06 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 04:52 [EDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:06 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 04:52 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; OFFSITE NOTIFICATION&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;lb/&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 58002&lt;/p&gt;
    &lt;p&gt; Facility: Clinton&lt;lb/&gt;Region: 3 State: IL&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] GE-6&lt;lb/&gt;NRC Notified By: Pat Bulpitt&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: IL&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] GE-6&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Pat Bulpitt&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 18:57 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 15:35 [CDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 18:57 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 15:35 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;M/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;86&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; MANUAL REACTOR SCRAM&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;lb/&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;lb/&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;/p&gt;
    &lt;p&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;/p&gt;
    &lt;p&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE"/><published>2025-10-26T01:15:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708524</id><title>Pico-Banana-400k</title><updated>2025-10-26T14:36:00.246306+00:00</updated><content>&lt;doc fingerprint="19072a4816fa0fc8"&gt;
  &lt;main&gt;
    &lt;p&gt;Pico-Banana-400K is a large-scale dataset of ~400K text–image–edit triplets designed to advance research in text-guided image editing.&lt;lb/&gt; Each example contains:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;an original image (from Open Images),&lt;/item&gt;
      &lt;item&gt;a human-like edit instruction, and&lt;/item&gt;
      &lt;item&gt;the edited result generated and verified by the Nano-Banana model.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The dataset spans 35 edit operations across 8 semantic categories, covering diverse transformations—from low-level color adjustments to high-level object, scene, and stylistic edits.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Feature&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Total Samples&lt;/cell&gt;
        &lt;cell&gt;~257K single-turn text–image–edit triplets for SFT, ~56K single-turn text-image(positive) - image(negative)-edit for preference learning, and ~72K multi-turn texts-images-edits for multi-turn applications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Source&lt;/cell&gt;
        &lt;cell&gt;Open Images&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edit Operations&lt;/cell&gt;
        &lt;cell&gt;35 across 8 semantic categories&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Categories&lt;/cell&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric, Object-Level, Scene Composition, Stylistic, Text &amp;amp; Symbol, Human-Centric, Scale &amp;amp; Perspective, Spatial/Layout&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Image Resolution&lt;/cell&gt;
        &lt;cell&gt;512–1024 px&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Prompt Generator&lt;/cell&gt;
        &lt;cell&gt;Gemini-2.5-Flash&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Editing Model&lt;/cell&gt;
        &lt;cell&gt;Nano-Banana&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Self-Evaluation&lt;/cell&gt;
        &lt;cell&gt;Automated judging pipeline using Gemini-2.5-Pro for edit quality&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K is built using a two-stage multimodal generation pipeline:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Instruction Generation&lt;lb/&gt;Each Open Images sample is passed to Gemini-2.5-Flash, which writes concise, natural-language editing instructions grounded in visible content. We also provide short instructions summarized by Qwen-2.5-Instruct-7B. Example:&lt;quote&gt;{ "instruction": "Change the red car to blue." }&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Editing + Self-Evaluation The Nano-Banana model performs the edit, then automatically evaluates the result using a structured quality prompt that measures: Instruction Compliance (40%) Editing Realism (25%) Preservation Balance (20%) Technical Quality (15%) Only edits scoring above a strict threshold (~0.7) are labeled as successful, forming the main dataset; the remaining ~56K are retained as failure cases for robustness and preference learning.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Nano-Banana-400K contains ~400K image editing data, covering a wide visual and semantic range drawn from real-world imagery.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Percentage&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Object-Level Semantic&lt;/cell&gt;
        &lt;cell&gt;Add, remove, replace, or relocate objects&lt;/cell&gt;
        &lt;cell&gt;35%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scene Composition &amp;amp; Multi-Subject&lt;/cell&gt;
        &lt;cell&gt;Contextual and environmental transformations&lt;/cell&gt;
        &lt;cell&gt;20%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;Edits involving clothing, expression, or appearance&lt;/cell&gt;
        &lt;cell&gt;18%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;Domain and artistic style transfer&lt;/cell&gt;
        &lt;cell&gt;10%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;Edits involving visible text, signs, or symbols&lt;/cell&gt;
        &lt;cell&gt;8%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric&lt;/cell&gt;
        &lt;cell&gt;Brightness, contrast, and tonal adjustments&lt;/cell&gt;
        &lt;cell&gt;5%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scale &amp;amp; Perspective&lt;/cell&gt;
        &lt;cell&gt;Zoom, viewpoint, or framing changes&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Spatial / Layout&lt;/cell&gt;
        &lt;cell&gt;Outpainting, composition, or canvas extension&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Single-Turn SFT samples (successful edits): ~257K&lt;/item&gt;
      &lt;item&gt;Single-Turn Preference samples (failure cases): ~56K&lt;/item&gt;
      &lt;item&gt;Multi-Turn SFT samples (successful cases): ~72K&lt;/item&gt;
      &lt;item&gt;Gemini-generated instructions: concise, natural, and image-aware&lt;/item&gt;
      &lt;item&gt;Edit coverage: 35 edit types across 8 semantic categories&lt;/item&gt;
      &lt;item&gt;Image diversity: includes humans, objects, text-rich scenes, etc from Open Images&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Below are representative examples from different categories:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Example&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Object-Level&lt;/cell&gt;
        &lt;cell&gt;“Replace the red apple with a green one.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Scene Composition&lt;/cell&gt;
        &lt;cell&gt;“Add sunlight streaming through the window.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;“Change the person’s expression to smiling.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;“Uppercase the text on the billboard.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;“Convert the image to a Van Gogh painting style.”&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K provides both breadth (diverse edit operations) and depth (quality-controlled multimodal supervision), making it a strong foundation for training and evaluating text-guided image editing models.&lt;/p&gt;
    &lt;p&gt;Pico-Banana-400K serves as a versatile resource for advancing controllable and instruction-aware image editing.&lt;lb/&gt; Beyond single-step editing, the dataset enables multi-turn, conversational editing and reward-based training paradigms.&lt;/p&gt;
    &lt;p&gt;The Pico-Banana-400K dataset is hosted on Apple’s public CDN.&lt;lb/&gt; You can download each component (single-turn, multi-turn, and preference data) using the provided manifest files.&lt;/p&gt;
    &lt;p&gt;Manifest files: sft link and preference link&lt;/p&gt;
    &lt;p&gt;Manifest file: multi-turn link&lt;/p&gt;
    &lt;p&gt;Urls to download source images are provided along with edit instructions in sft link, preference link, and multi-turn link. If you hit rate limit with Flickr when downloading images, you can either request higher rate limit with Flickr or follow steps below.&lt;/p&gt;
    &lt;p&gt;Another way to download the source images is to download packed files train_0.tar.gz and train_1.tar.gz from Open Images, then map with the urls we provide. We also provide a sample mapping code here. Due to legal requirements, we cannot provide the source image files directly.&lt;/p&gt;
    &lt;code&gt;# install awscli(https://aws.amazon.com/cli/)
# Download Open Images packed files 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_0.tar.gz . 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_1.tar.gz . 

# Create folder for extracted images 
mkdir openimage_source_images

# Extract the tar files 
tar -xvzf train_0.tar.gz -C openimage_source_images
tar -xvzf train_1.tar.gz -C openimage_source_images

# Download metadata CSV (ImageID ↔ OriginalURL mapping)  
wget https://storage.googleapis.com/openimages/2018_04/train/train-images-boxable-with-rotation.csv

# Map urls to local paths
python map_openimage_url_to_local.py #please modify variable is_multi_turn and file paths as needed&lt;/code&gt;
    &lt;p&gt;Pico-Banana-400K is released under the Creative Commons Attribution–NonCommercial–NoDerivatives (CC BY-NC-ND 4.0) license. ✅ Free for research and non-commercial use ❌ Commercial use and derivative redistribution are not permitted 🖼️ Source images follow the Open Images (CC BY 2.0) license By using this dataset, you agree to comply with the terms of both licenses.&lt;/p&gt;
    &lt;p&gt;If you use 🍌 Pico-Banana-400K in your research, please cite it as follows:&lt;/p&gt;
    &lt;code&gt;@inproceedings{Qian2025PicoBanana400KAL,
  title={Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing},
  author={Yusu Qian and Eli Bocek-Rivele and Liangchen Song and Jialing Tong and Yinfei Yang and Jiasen Lu and Wenze Hu and Zhe Gan},
  year={2025},
  url={https://api.semanticscholar.org/CorpusID:282272484}
}

&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/apple/pico-banana-400k"/><published>2025-10-26T02:01:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708686</id><title>PCB Edge USB C Connector Library</title><updated>2025-10-26T14:35:59.903984+00:00</updated><content>&lt;doc fingerprint="1bf656e13f840a3b"&gt;
  &lt;main&gt;
    &lt;p&gt;Use your PCB itself as a USB C connector! This repo includes a KiCAD and EasyEDA library containing 10 and 14 Pin versions.&lt;/p&gt;
    &lt;p&gt;To use this library in kicad, download the zip file, open the Plugin and Content Manager (PCM), click "Install from file" and choose the zip file.&lt;/p&gt;
    &lt;p&gt;To use this library in EasyEDA pro, import the .elibz files, or search the common library for "PCBTypeC_10P" or "PCBTypeC_14P" to add the symbol to your schematic.&lt;/p&gt;
    &lt;p&gt;Some other EDA tools like Altium support importing KiCAD footprints, and EasyEDA supports export to Altium and PADS. Double check against the same footprint in KiCAD or EasyEDA after import.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/AnasMalas/pcb-edge-usb-c"/><published>2025-10-26T02:31:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45708795</id><title>GenAI Image Editing Showdown</title><updated>2025-10-26T14:35:59.735027+00:00</updated><link href="https://genai-showdown.specr.net/"/><published>2025-10-26T02:57:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709698</id><title>Bitmovin (YC S15) Is Hiring Engineering ICs and Managers in Europe</title><updated>2025-10-26T14:35:59.540651+00:00</updated><content>&lt;doc fingerprint="ea7c8125cf36d33e"&gt;
  &lt;main&gt;
    &lt;p&gt;CAREERS AT BITMOVIN&lt;/p&gt;
    &lt;head rend="h1"&gt;Come work with us!&lt;/head&gt;
    &lt;p&gt;At Bitmovin, we’re constantly seeking out forward thinking&lt;lb/&gt; individuals who want to shape the future of video.&lt;/p&gt;
    &lt;p&gt;ORIGIN STORY&lt;/p&gt;
    &lt;head rend="h2"&gt;The Bitmovin founder story&lt;/head&gt;
    &lt;p&gt;Born out of innovation, learn about the story of Bitmovin and its founders.&lt;/p&gt;
    &lt;p&gt;COMPANY TRAJECTORY&lt;/p&gt;
    &lt;p&gt;Our vision is to shape &lt;lb/&gt;the future of video&lt;/p&gt;
    &lt;p&gt;Our mission is to enable developers, worldwide, to play, encode and analyze video simply, efficiently and with the highest quality attainable.&lt;/p&gt;
    &lt;p&gt;We aspire for a seamless experience that allows our customers to bring incredible video content out that maximizes the engagement and experience of their consumers.&lt;/p&gt;
    &lt;p&gt;THE RIGHT BALANCE&lt;/p&gt;
    &lt;head rend="h3"&gt;Work and live in equal measure&lt;/head&gt;
    &lt;p&gt;As a Bitmover, we want you to be able to bring your best self to work. We believe that a happy employee will put their best foot forward for the company, every day.&lt;/p&gt;
    &lt;head rend="h4"&gt;Our Core Values&lt;/head&gt;
    &lt;p&gt;Our core values are designed to be unique to Bitmovin, a set of operational commandments designed to unite our team under one streamlined operational umbrella. They serve as our behavioural lens through which each employee should look through when it comes to knowing how to act on a day-to-day basis.&lt;/p&gt;
    &lt;head rend="h3"&gt;Think through the customer lens.&lt;/head&gt;
    &lt;p&gt;Create the best solutions to enable our customers to deliver the best experiences to the markets they serve. Go the extra mile to surprise and delight our customers.&lt;/p&gt;
    &lt;head rend="h3"&gt;Own it.&lt;/head&gt;
    &lt;p&gt;Take pride in your work and accomplish what you set out to do. See it through to completion. Find and provide solutions to problems and take initiative.&lt;/p&gt;
    &lt;head rend="h3"&gt;Attack the idea, not the person.&lt;/head&gt;
    &lt;p&gt;Engage in constructive conflict and get all ideas out in the open at the start of a project. Treat others respectfully and embrace new perspectives with an open mind.&lt;/p&gt;
    &lt;head rend="h3"&gt;Innovate relentlessly.&lt;/head&gt;
    &lt;p&gt;Seek to learn continuously and cultivate a culture of innovation and curiosity. Adopt an always learning mindset and flex your idea muscles often.&lt;/p&gt;
    &lt;head rend="h3"&gt;Execute and get results.&lt;/head&gt;
    &lt;p&gt;A strategy is just a theory unless it is executed. Plans, while important, don’t move the needle for the company. Results do. Look to create the highest impact, efficiently.&lt;/p&gt;
    &lt;p&gt;GLOBAL OFFICES&lt;/p&gt;
    &lt;p&gt;About Us&lt;/p&gt;
    &lt;p&gt;Bitmovin has offices all over the world with our headquarters in San Francisco and major offices in Vienna and Klagenfurt, Austria, as well as London, Berlin and Denver.&lt;/p&gt;
    &lt;p&gt;Bitmovin is an equal opportunity employer and gives consideration for employment to qualified applicants without regard to race, color, religion, sex, sexual orientation, gender identity, national origin, disability or protected veteran status.&lt;/p&gt;
    &lt;head rend="h3"&gt;170+&lt;/head&gt;
    &lt;p&gt;Employees&lt;/p&gt;
    &lt;head rend="h3"&gt;87M&lt;/head&gt;
    &lt;p&gt;Raised&lt;/p&gt;
    &lt;head rend="h3"&gt;10&lt;/head&gt;
    &lt;p&gt;Locations&lt;/p&gt;
    &lt;p&gt;OPEN POSITIONS&lt;/p&gt;
    &lt;head rend="h6"&gt;We are hiring!&lt;/head&gt;
    &lt;p&gt;The Bitmovin job board is a busy place. We are looking for a wide range of skills across all of our departments.&lt;/p&gt;
    &lt;head rend="h5"&gt;Search&lt;/head&gt;
    &lt;head rend="h5"&gt;Positions&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;AI &amp;amp; Beyond Internship Incubator (Summer 2026)&lt;/p&gt;
        &lt;p&gt;Vienna; Klagenfurt; Berlin&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Business Internship (Praxissemester)&lt;/p&gt;
        &lt;p&gt;Klagenfurt, Austria&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Customer Success Manager (EMEA)&lt;/p&gt;
        &lt;p&gt;Remote - EMEA&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Engineering Manager (VOD Encoding)&lt;/p&gt;
        &lt;p&gt;Klagenfurt, Vienna&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Marketing &amp;amp; PR Executive&lt;/p&gt;
        &lt;p&gt;London or Vienna&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Product Support Engineer&lt;/p&gt;
        &lt;p&gt;Denver&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sales Executive (EMEA)&lt;/p&gt;
        &lt;p&gt;Remote - EMEA&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sales Executive (USA)&lt;/p&gt;
        &lt;p&gt;Remote - USA/Denver&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Senior Product Manager LIVE Encoding&lt;/p&gt;
        &lt;p&gt;Vienna, Klagenfurt, London&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Senior Software Engineer Java (LIVE Encoding)&lt;/p&gt;
        &lt;p&gt;Vienna; Klagenfurt&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Senior/Staff Software Engineer C++&lt;/p&gt;
        &lt;p&gt;Berlin; Vienna; Klagenfurt&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Senior Video Streaming Engineer&lt;/p&gt;
        &lt;p&gt;Berlin; Vienna; Klagenfurt; Remote - EU&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Software Engineer (Android)&lt;/p&gt;
        &lt;p&gt;Vienna; Klagenfurt&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Software Engineer – Player Web SDK&lt;/p&gt;
        &lt;p&gt;Austria, Germany, Spain&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Can’t see a position for you?&lt;/p&gt;
    &lt;p&gt;We are always looking for talented people to join the team, so just send us your resume&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bitmovin.com/careers"/><published>2025-10-26T07:00:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709819</id><title>Writing a RISC-V Emulator in Rust</title><updated>2025-10-26T14:35:59.336698+00:00</updated><content>&lt;doc fingerprint="b3e453454f1ba464"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Writing a RISC-V Emulator in Rust&lt;/head&gt;
    &lt;p&gt;NOTE: This project is actively ongoing. Pages are not perfect yet and it possible to change dramatically.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;This is the book for writing a 64-bit RISC-V emulator from scratch in Rust. You can run xv6, a simple Unix-like OS, in your emulator once you finish the book.&lt;/p&gt;
    &lt;p&gt;You'll learn the basic computer architecture such as ISA, previleged architecture, exceptions, interrupts, peripheral devices, and virtual memory system from making an emulator.&lt;/p&gt;
    &lt;p&gt;The source code used in this book is available at d0iasm/rvemu-for-book.&lt;/p&gt;
    &lt;head rend="h2"&gt;Chapter 1&lt;/head&gt;
    &lt;p&gt;Chapter 1 shows all hardward components we need to implement for running &lt;code&gt;xv6&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;CPU with Two Instructions&lt;/item&gt;
      &lt;item&gt;Memory and System Bus&lt;/item&gt;
      &lt;item&gt;Control and Status Registers&lt;/item&gt;
      &lt;item&gt;Privileged Architecture&lt;/item&gt;
      &lt;item&gt;Exceptions&lt;/item&gt;
      &lt;item&gt;PLIC (a platform-level interrupt controller) and CLINT (a core-local interrupter)&lt;/item&gt;
      &lt;item&gt;UART (a universal asynchronous receiver-transmitter)&lt;/item&gt;
      &lt;item&gt;Interrupts&lt;/item&gt;
      &lt;item&gt;Virtio&lt;/item&gt;
      &lt;item&gt;Virtual Memory System&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Chapter 2&lt;/head&gt;
    &lt;p&gt;Chapter 2 shows all ISAs we need to implement for running &lt;code&gt;xv6&lt;/code&gt;.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;RV64I Base Integer Instruction Set&lt;/item&gt;
      &lt;item&gt;"M" Standard Extension for Integer Multiplication and Division&lt;/item&gt;
      &lt;item&gt;"A" Standard Extension for AtomicInstructions&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Outcome&lt;/head&gt;
    &lt;p&gt;Once you read this book and implement the emulator, you will be able to run xv6 in your emulator!&lt;/p&gt;
    &lt;head rend="h2"&gt;Contact&lt;/head&gt;
    &lt;p&gt;The author is @d0iasm and please feel free to ask and request anything to me via Twitter or GitHub issues!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://book.rvemu.app/"/><published>2025-10-26T07:34:30+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709922</id><title>LaserTweezer – Optical Trap</title><updated>2025-10-26T14:35:58.739685+00:00</updated><content>&lt;doc fingerprint="354cd73082a0ce0b"&gt;
  &lt;main&gt;
    &lt;p&gt;Optical Tweezers are scientific instruments to manipulate objects of microscopic size. These can be small plastic beads or biological material like cells. The trapping is achieved by focusing a laser beam on the dielectric particles that are then attracted to the region of strongest electric field, which is the center of the beam. The fact that samples under a microscope can be manipulated gives new possibilities to explore. The force applied on the object depends linearly on its displacement from the trap center just as with a simple spring system. Micro-beads can thus be used as handles and forces can be determined though the interaction.&lt;/p&gt;
    &lt;p&gt;The main component of an optical tweezer are a microscope to see the sample, a laser beam focused on the sample to manipulate, special filter and lenses and a movable stage. The sum of this equipment as used in regular laboratories are usually big and quite expensive. The her after described devices uses only recycled parts from consumer electronics and comes at a fraction of the cost while still reproducing the original concept in a fully functional way. The work is based on the scientific publication “Single-cell isolation using a DVD optical pickup” [1]. The paper describes in detail the setup used and the circuit to power the laser. In fact the DVD head unit comprises some key components such as a powerful laser, a collimator lens as well as a focusing mechanism perfect for the application. However the setup as described in the paper still uses a conventional microscope and specialized filter to prevent the strong laser from shining into the microscope. In the presented setup these elements could further be replaced by using a USB computer web-cam and a filter made from a shutter disc synchronized with an intermittent switching of the small solid state laser. The compact unit of a “DIY Optical Tweezer” now weights less than 500g and can be built entirely from recycled consumer electronic parts at a cost of less than 100$. Small styrol beads were shown to be moved around with good accuracy and with a good image quality [2].&lt;/p&gt;
    &lt;head rend="h3"&gt;Construction Details&lt;/head&gt;
    &lt;p&gt;Construction Details of “DIY Laser Tweezer” [7]:&lt;/p&gt;
    &lt;p&gt;Conventional DVD drive optical pickups emit a laser beam form a diode that passes through a diffraction grating, a polarizing beam splitter and is then collimated and focused onto a plane. The DVD drive unit is fixed on a ground plate with the laser pointing up. A glass slide is positioned in the focus plane of the laser. With the diffraction grating removed from the optical path, an output power of ~40 mW can be achieved in the primary beam, enough to obtain stable optical trapping. The objective lens of the optical pickup rests on an electromagnetically suspended frame that can be steered to control focus and and move the laser beam in one direction of the focus plane. The second axis to move the sample is constructed from a simple mechanical lever. On top of the device a USB computer web-cam looks down on the sample slide. By inverting the original lens of the web-cam and refocusing a good image can be recored on a computer through the USB connection and standard web-cam software with a magnification of ~400x [3]. To prevent overexposing of the camera by the laser beam a scatter disk made from black cardboard material with two slits of about 10° is positioned in the optical path just in front of the camera. The disk is rotated by a tiny cell-phone vibration motor (DC motor) at a speed of ~600rpm . The position of the slit is detected by an optical fork light barrier and synchronized with the DVD laser. The laser is turned of when the scatter disk opening is in front of the camera lens to prevent overexposure. The high sensitivity of the CMOS web-cam chip results in a good quality image despite the short and intermittent exposure. The sample is illuminated thought simple white LEDs from the side. To facilitate manipulation the laser is not turned off completely during the camera exposure but dimmed to give a weak pilot laser point. Due to the numerical aperture of ~0.6 the optics within the pickup, particles are not trapped in the vertical and are instead slightly pushed towards the top surface. A cover slip was used to limit the movement. The particles were suspended in water with a whiff of soap to reduce adhesion of the particle on the glass surface.&lt;/p&gt;
    &lt;p&gt;LaserTweezerII Control Board Schematics&lt;/p&gt;
    &lt;p&gt;LaserTweezerII Control Board Layout&lt;/p&gt;
    &lt;p&gt;DOWNLOAD: LaserTweezer II Board Schematic, Layout and Arduino Control Software&lt;/p&gt;
    &lt;head rend="h3"&gt;References&lt;/head&gt;
    &lt;p&gt;[1] Kasukurti A., Potcoava M., Desai S. A., Eggleton C., Marr D. W. M., “Single-cell isolation using a DVD optical pickup,” Opt. Express 19(11), 10377–10386 (2011).10.1364/OE.19.010377&lt;/p&gt;
    &lt;p&gt;[2] DIY Open-Laser-Tweezer based on a WebCam and a DVD Laser, https://www.youtube.com/watch?v=BT6NgV5XQqQ&lt;/p&gt;
    &lt;p&gt;[3] Dominik Landwehr and Verena Kuni, “Home Made Bio Electronic Arts”, Christoph Merian Verlag&lt;/p&gt;
    &lt;p&gt;[4] It’s a Hackteria Network Project. See more here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.gaudi.ch/GaudiLabs/?page_id=578"/><published>2025-10-26T08:03:14+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45709988</id><title>Clojure Land – Discover open-source Clojure libraries and frameworks</title><updated>2025-10-26T14:35:58.355516+00:00</updated><content>&lt;doc fingerprint="2302039003d1cf0"&gt;
  &lt;main&gt;
    &lt;list id="project-list" class="grid grid-cols-6 gap-2 divide-y divide-gray-100" rend="ul"&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Behavioral Programming for Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) - AI pair programming capabilities agnostic of editor&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) integration for Emacs&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Java2D wrapper + creative coding supporting functions (based on Processing and openFrameworks)&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Making VS Code Hackable like Emacs since 2022&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A data-driven rendering library for Clojure(Script) that renders hiccup to DOM or to strings.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Clojure library for building OpenAPI services&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;An optional type system for Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A better "prn" for debugging&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Managed lifecycle of stateful objects in Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;VS Code AI Agent Interactive Programming. Tools for CoPIlot and other assistants. Can also be used as an MCP server.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;A functional quantum computer programming library for Clojure with backend protocols, simulation backends and visualizations.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Expose Lacinia GraphQL as Pedestal endpoints&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Clojure reducers, but for parallel execution: locally and on distributed systems.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Editor Code Assistant (ECA) integration for Vscode&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;An open source tool set for building web applications in Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;JSON parser/generator to/from Clojure data structures&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;User aliases and Clojure CLI configuration for deps.edn based projects&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2" hx-get="/" hx-target="#project-list" hx-select="#project-list li" hx-swap="beforeend" hx-include="inherit" hx-vals="{&amp;quot;page&amp;quot;:2}" hx-trigger="revealed"&gt;
        &lt;div&gt;
          &lt;div&gt;Weave loom fibers into your Clojure&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
      &lt;item class="relative flex justify-between gap-x-6 py-4 col-span-6 md:col-span-4 mx-6 md:mx-2 md:col-start-2"&gt;
        &lt;div&gt;
          &lt;div&gt;Multi-pass compiler and runtime for probabilistic programming.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://clojure.land/"/><published>2025-10-26T08:15:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710006</id><title>Advent of Code 2025: Number of puzzles reduce from 25 to 12 for the first time</title><updated>2025-10-26T14:35:58.208866+00:00</updated><content>&lt;doc fingerprint="9ad8fbdb2d32aff8"&gt;
  &lt;main&gt;&lt;p&gt;Hi! I'm Eric Wastl. I make Advent of Code. I hope you like it! I also make lots of other things. I'm on Bluesky, Mastodon, and GitHub.&lt;/p&gt;&lt;p&gt;Advent of Code is an Advent calendar of small programming puzzles for a variety of skill levels that can be solved in any programming language you like. People use them as interview prep, company training, university coursework, practice problems, a speed contest, or to challenge each other.&lt;/p&gt;&lt;p&gt;You don't need a computer science background to participate - just a little programming knowledge and some problem solving skills will get you pretty far. Nor do you need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.&lt;/p&gt;&lt;p&gt;If you'd like to support Advent of Code, you can do so indirectly by helping to AoC++.&lt;/p&gt;it with others or directly via&lt;head rend="h2"&gt;--- General Tips ---&lt;/head&gt;&lt;p&gt;If you get stuck, try your solution against the examples given in the puzzle; you should get the same answers. If not, re-read the description. Did you misunderstand something? Is your program doing something you don't expect? After the examples work, if your answer still isn't correct, build some test cases for which you can verify the answer by hand and see if those work with your program. Make sure you have the entire puzzle input. If you're still stuck, maybe ask a friend for help, or come back to the puzzle later. You can also ask for hints in the subreddit.&lt;/p&gt;&lt;head rend="h2"&gt;--- Frequently Asked Questions ---&lt;/head&gt;&lt;p&gt;Is there an easy way to select entire code blocks? You should be able to triple-click code blocks to select them. You'll need JavaScript enabled.&lt;/p&gt;&lt;code&gt;#!/usr/bin/env perl
use warnings;
use strict;

print "You can test it out by ";
print "triple-clicking this code.\n";
&lt;/code&gt;&lt;p&gt;How does authentication work? Advent of Code uses OAuth to confirm your identity through other services. When you log in, you only ever give your credentials to that service - never to Advent of Code. Then, the service you use tells the Advent of Code servers that you're really you. In general, this reveals no information about you beyond what is already public; here are examples from Reddit and GitHub. Advent of Code will remember your unique ID, names, URL, and image from the service you use to authenticate.&lt;/p&gt;&lt;p&gt;Why was this puzzle so easy / hard? The difficulty and subject matter varies throughout each event. Very generally, the puzzles get more difficult over time, but your specific skillset will make each puzzle significantly easier or harder for you than someone else. Making puzzles is tricky.&lt;/p&gt;&lt;p&gt;Why do the puzzles unlock at midnight EST/UTC-5? Because that's when I can consistently be available to make sure everything is working. I also have a family, a day job, and even need sleep occasionally. If you can't participate at midnight, that's not a problem; if you want to race, many people use private leaderboards to compete with people in their area.&lt;/p&gt;&lt;p&gt;I find the text on the site hard to read. Is there a high contrast mode? There is a high contrast alternate stylesheet. Firefox supports these by default (View -&amp;gt; Page Style -&amp;gt; High Contrast).&lt;/p&gt;&lt;p&gt;I have a puzzle idea! Can I send it to you? Please don't. Because of legal issues like copyright and attribution, I don't accept puzzle ideas, and I won't even read your email if it looks like one just in case I use parts of it by accident.&lt;/p&gt;&lt;p&gt;Did I find a bug with a puzzle? Once a puzzle has been out for even an hour, many people have already solved it; after that point, bugs are very unlikely. Start by asking on the subreddit.&lt;/p&gt;&lt;p&gt;Should I try to get a fast solution time? Maybe. Solving puzzles is hard enough on its own, but trying for a fast time also requires many additional skills and a lot of practice; speed-solves often look nothing like code that would pass a code review. If that sounds interesting, go for it! However, you should do Advent of Code in a way that is useful to you, and so it is completely fine to choose an approach that meets your goals and ignore speed entirely.&lt;/p&gt;&lt;p&gt;Why did the number of days per event change? It takes a ton of my free time every year to run Advent of Code, and building the puzzles accounts for the majority of that time. After keeping a consistent schedule for ten years(!), I needed a change. The puzzles still start on December 1st so that the day numbers make sense (Day 1 = Dec 1), and puzzles come out every day (ending mid-December).&lt;/p&gt;&lt;p&gt;What happened to the global leaderboard? The global leaderboard was one of the largest sources of stress for me, for the infrastructure, and for many users. People took things too seriously, going way outside the spirit of the contest; some people even resorted to things like DDoS attacks. Many people incorrectly concluded that they were somehow worse programmers because their own times didn't compare. What started as a fun feature in 2015 became an ever-growing problem, and so, after ten years of Advent of Code, I removed the global leaderboard. (However, I've made it so you can share a read-only view of your private leaderboard. Please don't use this feature or data to create a "new" global leaderboard.)&lt;/p&gt;&lt;p&gt;While trying to get a fast time on a private leaderboard, may I use AI / watch streamers / check the solution threads / ask a friend for help / etc? If you are a member of any private leaderboards, you should ask the people that run them what their expectations are of their members. If you don't agree with those expectations, you should find a new private leaderboard or start your own! Private leaderboards might have rules like maximum runtime, allowed programming language, what time you can first open the puzzle, what tools you can use, or whether you have to wear a silly hat while working.&lt;/p&gt;&lt;p&gt;Should I use AI to solve Advent of Code puzzles? No. If you send a friend to the gym on your behalf, would you expect to get stronger? Advent of Code puzzles are designed to be interesting for humans to solve - no consideration is made for whether AI can or cannot solve a puzzle. If you want practice prompting an AI, there are almost certainly better exercises elsewhere designed with that in mind.&lt;/p&gt;&lt;p&gt;Can I copy/redistribute part of Advent of Code? Please don't. Advent of Code is free to use, not free to copy. If you're posting a code repository somewhere, please don't include parts of Advent of Code like the puzzle text or your inputs. If you're making a website, please don't make it look like Advent of Code or name it something similar.&lt;/p&gt;&lt;head rend="h2"&gt;--- Credits ---&lt;/head&gt;&lt;p&gt;Puzzles, Code, &amp;amp; Design: Eric Wastl&lt;/p&gt;&lt;p&gt;Beta Testing:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Tim Giannetti&lt;/item&gt;&lt;item&gt;Ben Lucek&lt;/item&gt;&lt;item&gt;JP Burke&lt;/item&gt;&lt;item&gt;Aneurysm9&lt;/item&gt;&lt;item&gt;Andrew Skalski&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Community Managers: Danielle Lucek and Aneurysm9&lt;/p&gt;&lt;p&gt;Playing: You!&lt;/p&gt;&lt;head rend="h2"&gt;--- Legal ---&lt;/head&gt;&lt;p&gt;Advent of Code is a registered trademark in the United States. The design elements, language, styles, and concept of Advent of Code are all the sole property of Advent of Code and may not be replicated or used by any other person or entity without express written consent of Advent of Code. Copyright 2015-2025 Advent of Code. All rights reserved.&lt;/p&gt;&lt;p&gt;You may link to or reference puzzles from Advent of Code in discussions, classes, source code, printed material, etc., even in commercial contexts. Advent of Code does not claim ownership or copyright over your solution implementation.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://adventofcode.com/2025/about#faq_num_days"/><published>2025-10-26T08:19:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710065</id><title>Asbestosis</title><updated>2025-10-26T14:35:57.888168+00:00</updated><content>&lt;doc fingerprint="fe60955783648a74"&gt;
  &lt;main&gt;
    &lt;p&gt;This monument popped up in the middle of Barking recently. I thought it was very recently but it was actually unveiled in April 2022 and I'm just not very observant.&lt;/p&gt;
    &lt;p&gt;It says "In Memory of those who lost their lives because of exposure to asbestos".&lt;/p&gt;
    &lt;p&gt;And it's here because Barking has one of the highest rates of asbestos-related deaths in the country.&lt;/p&gt;
    &lt;p&gt;In 1913 the Cape Asbestos Company built a huge asbestos factory beside the River Roding in Barking. The company mined asbestos-bearing rock at several sites in South Africa, then shipped them in sacks to a private quay in Barking for processing. Hundreds of people were employed to mill the ore into usable fibres and then process these into lagging, packaging, pipes, resins, boards and all forms of insulation widely used in the building trade. They worked without masks or other protection, the dangers of asbestos either unknown or not thought worth bothering about. And hundreds of workers died, often many years later, of insidious chronic respiratory disease.&lt;/p&gt;
    &lt;p&gt;I found a 32-page booklet published by Cape Asbestos in the days before blue asbestos was recognised as dangerous and banned, which was as late as 1985. It shows workers with rolled-up sleeves and women leaning over unshielded machines, all potentially inhaling enough fibres to ultimately kill them. I read reports about the local school in Barking, barely 100 metres away, saying that the playground was often covered in fine dust which children rolled up and played with as if it were snow. I read that mesothelioma was so common in the area it was known as the ‘Barking Cough’. These were different times, but times that linger on.&lt;/p&gt;
    &lt;p&gt;Cape Asbestos's plant eventually closed in 1968 and in its place was built the Harts Lane council estate, which is still not the loveliest corner of Barking. It included two tall tower blocks called Colne House and Mersey House, both of which Barking &amp;amp; Dagenham council would now like to demolish. This is chiefly because they're old and covered in combustible cladding, but the additional complications of potentially disturbing polluted land puts any remediation out of financial reach. It's always the insulation you have to watch out for.&lt;/p&gt;
    &lt;p&gt;The memorial in Barking Town Square comprises a polished chunk of blue pearl granite and was unveiled on Workers' Memorial Day 2022 in a ceremony attended by several trade unionists and representatives of the London Asbestos Support Awareness Group. The emphasis is partly on remembrance and partly on the importance of standing up for workers' rights to make conditions better for all. As the inscription says, "Remember the Dead and Fight for the Living".&lt;/p&gt;
    &lt;p&gt;My grandfather worked for another Cape Asbestos plant on Tolpits Lane in Watford. Originally it had been run by Universal Asbestos Manufacturing but in 1967 the factory was acquired by Cape as part of a diversification into cement-based products. They made corrugated roofing, flat sheets, decorated sheets, slates, soil pipes, decking for flat roofs and reinforced troughing - that kind of thing - the asbestos moulded into a multiplicity of shapes for the benefit of the building trade.&lt;/p&gt;
    &lt;p&gt;To him Cape Universal was just a convenient place to work, a short walk across the moor for a day's shift and then home again for tea. He worked there for many years, from the 1930s to the 1960s, rising through the ranks from a labourer to a machine operator on the factory floor. On his death certificate his occupation was listed as 'Asbestos Moulder', and it was very much a premature death because this didn't end well.&lt;/p&gt;
    &lt;p&gt;I don't remember very much about my grandfather because he died when I was 8. I know he was there when I took my first steps in his back garden and I can remember sitting at his dining room table and hoping nobody would force me to eat the celery. My final memory is being led up to his bedroom, I suspect not long before his death, to see an ill old man laid out in bed and struggling to breathe. I don't know what was said, nor how short a time I stayed in his presence, indeed my strongest recollection is of the room itself with its austere cupboards and the curtains drawn. And then at the age of 67 he was gone.&lt;/p&gt;
    &lt;p&gt;My family fought for asbestosis to be recognised as his cause of death but were not successful. I've read recently of fellow workers working at the Tolpits Lane factory now getting six figure payouts in compensation, indeed it's hard to research this topic without ending up on legal websites with popups urging you to make a claim. Even four decades after the factory's closure there are still employees severely affected, and many more already passed, as the toxic legacy endures. The factory site is now a rather cleaner industrial estate and business park, indeed it's where the National Lottery's been based for the last 30 years because risk and loss are still in play.&lt;/p&gt;
    &lt;p&gt;Today my Dad reaches the grand old age of 87, a full 20 years more than his father lived. Science has moved on a long way since the 1970s, also educational opportunities and also workers' rights. Health and safety is sometimes much derided but it can genuinely save lives, even much extend them, rather than everyone continually moaning about additional costs and annoying procedures. If someone had shouted earlier and louder about the dangers of asbestos I might have known my grandfather better, my grandmother could have had many more years of married life and my father could have had a father for much longer.&lt;/p&gt;
    &lt;p&gt;My Dad lost his Dad at the age of 34, which is no age at all in the grand scheme of things. By contrast I still have my Dad at the age of 60, which has meant an extra quarter century of guidance, support, advice, love and always being there. How lucky am I? Every day we overlap with our parents is a blessing and I've had 22,000 of them, for all of which I'm truly grateful. We're off out later to celebrate with a slap-up dinner, or as slap-up as an 87-year-old stomach requires, which the wider family are greatly looking forward to. What Barking's memorial reminded me is that many families have not been so fortunate, and sometimes that loss can be very close to home.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://diamondgeezer.blogspot.com/2025/10/asbestosis.html"/><published>2025-10-26T08:34:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710366</id><title>Connect to a 1980s Atari BBS through the web</title><updated>2025-10-26T14:35:57.667544+00:00</updated><content>&lt;doc fingerprint="8b6d9aee7de1037b"&gt;
  &lt;main&gt;
    &lt;p&gt;Restoration from the MACE 1986 Version of AMIS - Atari Message Information System. This Basic XE BBS shows off extensive Atascii Graphics&lt;/p&gt;
    &lt;p&gt;This is a United Federation of Pirates BBS back from the mid-late 1980s Part of a Very Elite Group of Atari Boards. Run by Sysop - Giarc The Warden&lt;/p&gt;
    &lt;p&gt;As the name provides, You are about to Enter Area 52. From Sysop Phigan This BBS Provides Plenty of Atascii Graphics&lt;/p&gt;
    &lt;p&gt;The Basement BBS running BBS Express Pro! With RealAtari BBS Look and Feel, themed to the movie Office Space, this BBS has tons of features and surprises!&lt;/p&gt;
    &lt;p&gt;NiteLite BBS 1984 Restored and put online as another representation of basic code and BBS history for Atari. NiteLite BBS was used as the Atari Corp BBS.&lt;/p&gt;
    &lt;p&gt;The Very First BBS Express Pro! Board from the man Keith Ledbetter himself. The Sysop BF2K+ took over the BBS and keeping history available to Atari BBSing die hards.&lt;/p&gt;
    &lt;p&gt;Carina II BBS Running 24/7 300/1200/9600 with 20 Mega Online, Sysop Jay C. Returned Carina to its Glory! Themed to Breaking Bad, This is a great BBS for Old Skool Games!&lt;/p&gt;
    &lt;p&gt;Restoration from the MACE 1986 Version of AMIS - Atari Message Information System. This Basic XE BBS shows off extensive Atascii Graphics&lt;/p&gt;
    &lt;p&gt;This is a United Federation of Pirates BBS back from the mid-late 1980s Part of a Very Elite Group of Atari Boards. Run by Sysop - Giarc The Warden&lt;/p&gt;
    &lt;p&gt;As the name provides, You are about to Enter Area 52. From Sysop Phigan This BBS Provides Plenty of Atascii Graphics&lt;/p&gt;
    &lt;p&gt;The BBS Express ST Legend! DarkForce BBS brings a very active and feature rich BBS experience. Sysop The DarkLord&lt;/p&gt;
    &lt;p&gt;The Basement BBS running BBS Express Pro! With RealAtari BBS Look and Feel, themed to the movie Office Space, this BBS has tons of features and surprises!&lt;/p&gt;
    &lt;p&gt;NiteLite BBS 1984 Restored and put online as another representation of basic code and BBS history for Atari. NiteLite BBS was used as the Atari Corp BBS.&lt;/p&gt;
    &lt;p&gt;The Very First BBS Express Pro! Board from the man Keith Ledbetter himself. The Sysop BF2K+ took over the BBS and keeping history available to Atari BBSing die hards.&lt;/p&gt;
    &lt;p&gt;Carina II BBS Running 24/7 300/1200/9600 with 20 Mega Online, Sysop Jay C. Returned Carina to its Glory! Themed to Breaking Bad, This is a great BBS for Old Skool Games!&lt;/p&gt;
    &lt;p&gt;Running on RatSoft SFHQ has a host of features, game library, and networked message bases. Sysop Commodore Clifford&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.southernamis.com/ataribbsconnect"/><published>2025-10-26T09:31:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45710721</id><title>You Already Have a Git Server</title><updated>2025-10-26T14:35:57.284550+00:00</updated><content>&lt;doc fingerprint="dcf8f5f9c827be83"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;You already have a git server:&lt;/head&gt;(Programming)&lt;p&gt;If you have a git repository on a server with ssh access, you can just clone it:&lt;/p&gt;&lt;code&gt;# This works. 
git clone ssh://username@hostname/path/to/repo
&lt;/code&gt;&lt;p&gt;You can then work on it locally and push your changes back to the origin server. By default, git won’t let you push to the branch that is currently checked out, but this is easy to change:&lt;/p&gt;&lt;code&gt;# Run this on the remote server. 
git config receive.denyCurrentBranch updateInstead
&lt;/code&gt;&lt;p&gt;This is a great way to sync code between multiple computers or to work on server-side files without laggy typing or manual copying. If you want to publish your code, just point your web server at the git repo:&lt;/p&gt;&lt;code&gt;git clone https://hostname/path/to/repo/.git
# You can get rid of the .git part of the command by either setting the
# server to remap it to a nicer URL or by just renaming the .git directory
# (although this stops you from running git server side)
&lt;/code&gt;&lt;p&gt;… although you will have to run this command server-side to make it cloneable:&lt;/p&gt;&lt;code&gt;# Create some files used by git-over-http:
# Should be repeated after making changes.
git update-server-info
&lt;/code&gt;&lt;p&gt;That’s a lot of work, so let’s set up a hook to do that automatically:&lt;/p&gt;&lt;code&gt;# Automatically run git update-server-info.
# Should be run server-side
cp .git/hooks/post-update.sample .git/hooks/post-update
chmod a+x .git/hooks/post-update
&lt;/code&gt;&lt;p&gt;Git hooks are just shell scripts, so they can do things like running a static site generator:&lt;/p&gt;&lt;code&gt;cat &amp;gt; .git/hooks/post-update &amp;lt;&amp;lt;EOF
#!/bin/sh
set -euo pipefail
cd /path/to/site
/path/to/generator
EOF
chmod a+x .git/hooks/post-update
&lt;/code&gt;&lt;p&gt;This is how I’ve been doing this blog for a while now: It’s very nice to be able to type up posts locally (no network lag), and then push them to the server and have the rest handled automatically.&lt;/p&gt;&lt;p&gt;It’s also backed up by default: If the server breaks, I’ve still got the copy on my laptop, and if my laptop breaks, I can download everything from the server. Git’s version tracking also prevents accidental deletions, and if something breaks, it’s easy to figure out what caused it.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://maurycyz.com/misc/easy_git/"/><published>2025-10-26T10:53:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45711062</id><title>Formal Reasoning [pdf]</title><updated>2025-10-26T14:35:55.986388+00:00</updated><content/><link href="https://cs.ru.nl/~freek/courses/fr-2025/public/fr.pdf"/><published>2025-10-26T12:03:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45711094</id><title>You Should Feed the Bots</title><updated>2025-10-26T14:35:55.520259+00:00</updated><content>&lt;doc fingerprint="273b981161f213a7"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;You should feed the bots:&lt;/head&gt;(Programming)&lt;p&gt;A week ago, I set up an infinite nonsense crawler trap – now it makes up 99% of my server’s traffic. What surprised me is that feeding scrapers garbage is the cheapest and easiest thing I could do.&lt;/p&gt;&lt;head rend="h2"&gt;Meet the bots:&lt;/head&gt;&lt;p&gt;These aren’t the indexing bots of old, but scrapers collecting data to train LLMs. Unlike search engines, which need the websites they crawl to stay up, AI companies provide a replacement.&lt;/p&gt;&lt;p&gt;It should come as no surprise that these bots are aggressive and relentless: They ignore robots.txt, and if block them by user agent they just pretend to be a browser. If you ban their IP, they switch addresses.&lt;/p&gt;&lt;p&gt;… all while sending multiple requests per second, all day, every day.&lt;/p&gt;&lt;head rend="h2"&gt;Giving up:&lt;/head&gt;&lt;p&gt;So what if we let them access the site?&lt;/p&gt;&lt;p&gt;Serving static files is is relatively cheap, but not free. SSD access times are in the tens milliseconds, and that’s before you pay the filesystem tax. Bots also like to grab old and obscure pages, ones that are unlikely to be in cache. As a result, it doesn’t take all that many requests to bog down the server.&lt;/p&gt;&lt;p&gt;Then there’s the matter of bandwidth: Many blog posts also include images weighing hundreds to thousands of kB, which can add up quite quickly. With an average file size of 100 kB, 4 requests per second adds up to a terabyte each month – not a huge amount of data, but more then I’m willing to throw away.&lt;/p&gt;&lt;head rend="h2"&gt;The ban hammer:&lt;/head&gt;&lt;p&gt;Simply making a list of IPs and blocking them would for normal bots…&lt;/p&gt;&lt;p&gt;… but these are hardly normal bots. Because they are backed by billion dollar companies, they don’t just have a few addresses, but many thousands. If you managed to ban all of their addresses, they’ll just buy more.&lt;/p&gt;&lt;p&gt;Rate limits fail for the same reason: They just switch IPs. I’ve even seen them using new IP for each request.&lt;/p&gt;&lt;head rend="h2"&gt;Building a wall:&lt;/head&gt;&lt;p&gt;Ok, what about a pay-wall, login-wall, CAPTCHA-wall, or a hash based proof-of-work?&lt;/p&gt;&lt;p&gt;All of these inconvenience users. Requiring an account guaranties that no one will read what I wrote. Even just a simple JavaScript challenge will block anyone who’s browser doesn’t support JS … and when it works, anything that must load before the does content still hugely slows down page loads.&lt;/p&gt;&lt;head rend="h2"&gt;Throw them some bombs:&lt;/head&gt;&lt;p&gt;“Serve them few gzip bombs, that’ll teach them” — Half the internet.&lt;/p&gt;&lt;p&gt;Gzip only provides a compression ratio of a little over 1000: If I want a file that expands to 100 GB, I’ve got to serve a 100 MB asset. Worse, when I tried it, the bots just shrugged it off, with some even coming back for more.&lt;/p&gt;&lt;head rend="h2"&gt;Jedi mind tricks:&lt;/head&gt;&lt;p&gt;Ok, what if we just send them 404s – try and make them think my site doesn’t exist.&lt;/p&gt;&lt;p&gt;These tricks only work if your adversary has a mind to trick. If a link is posted somewhere, the bots will know it exists, and if they can’t access it, they’ll just become more aggressive:. sending more requests, with more user agents and using more addresses.&lt;/p&gt;&lt;p&gt;Keeping them happy keeps them tolerable.&lt;/p&gt;&lt;head rend="h2"&gt;Garbage:&lt;/head&gt;&lt;p&gt;But surely sending them dynamically generated content would be expensive right?&lt;/p&gt;&lt;p&gt;Well… no.&lt;/p&gt;&lt;p&gt;CPU and RAM are the fastest parts of a modern computer. Dynamic content has the reputation of being slow because it often involves a database (lots of disk IO), a million lines of JavaScript, or both.&lt;/p&gt;&lt;p&gt;My lightly optimized Markov babbler consumes around ~60 CPU microseconds per request. There’s no disk IO, and the memory cost is only around 1.2 MB. There’s also no rules or blacklists to maintain: the bots come to it and it consumes them.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://maurycyz.com/misc/the_cost_of_trash/"/><published>2025-10-26T12:09:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45711279</id><title>Let's Help NetBSD Cross the Finish Line Before 2025 Ends</title><updated>2025-10-26T14:35:55.326020+00:00</updated><content>&lt;doc fingerprint="170ca1784822ef67"&gt;
  &lt;main&gt;NetBSD-Users archive&lt;lb/&gt;[Date Prev][Date Next][Thread Prev][Thread Next][Date Index][Thread Index][Old Index]&lt;head rend="h1"&gt;Let's Help NetBSD Cross the Finish Line Before 2025 Ends&lt;/head&gt;&lt;lb/&gt;Hello all NetBSD users, enthusiasts/hobbyists, retro gamers.&lt;p&gt;As 2025 draws to a close, I are reaching out to community with a request for helping The NetBSD Foundation.&lt;/p&gt;&lt;p&gt;Right now, The NetBSD foundation have raised $10,738 of $50,000 goal for the year. The foundation need one final push to help it cross the finish line and fully fund their work for the coming year.&lt;/p&gt;&lt;p&gt;If you donate today, your contribution will directly support critical, tangible projects that keep NetBSD modern, secure, and available to everyone:&lt;/p&gt;&lt;p&gt;=&amp;gt; RISC-V Support: Expanding NetBSD's reach to this new, open-source hardware architecture.&lt;/p&gt;&lt;p&gt;=&amp;gt; Wi-Fi Renewal: A massive, ongoing project to modernize our wireless networking stack, making NetBSD more practical than ever on laptops and embedded devices.&lt;/p&gt;&lt;p&gt;NetBSD isn't just another operating system. It is a vital part of the entire technology ecosystem.&lt;/p&gt;&lt;p&gt;In an age of planned obsolescence, NetBSD is a powerful force for sustainability. Foundation's commitment to running on a vast array of hardware—new and old—helps reduce e-waste. Old laptops and single-board computers that would otherwise be in a landfill are given new life as robust firewalls, file servers, or even retro-gaming machines, all thanks to NetBSD.&lt;/p&gt;&lt;p&gt;The NetBSD foundation need our help to close this $39,262 gap before the year ends.&lt;/p&gt;&lt;p&gt;Please consider making a year-end donation to help them continue this important work.&lt;/p&gt;&lt;p&gt;https://netbsd.org/donations/&lt;/p&gt;&lt;p&gt;Thanking you in Advance,&lt;/p&gt;&lt;p&gt;Humble NetBSD user Jay&lt;/p&gt;&lt;p&gt;P.S. If you've already donated, thank you! You can also help by sharing this email or posting on social media about why you support NetBSD using the hashtag #WhyIRunNetBSD 🙏&lt;/p&gt;&lt;lb/&gt;Home |
Main Index |
Thread Index |
Old Index&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://mail-index.netbsd.org/netbsd-users/2025/10/26/msg033327.html"/><published>2025-10-26T12:34:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45711786</id><title>The FSF considers large language models</title><updated>2025-10-26T14:35:55.037669+00:00</updated><content>&lt;doc fingerprint="6d029d97eda656d8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The FSF considers large language models&lt;/head&gt;
    &lt;quote&gt;Ready to give LWN a try?The Free Software Foundation's Licensing and Compliance Lab concerns itself with many aspects of software licensing, Krzysztof Siewicz said at the beginning of his 2025 GNU Tools Cauldron session. These include supporting projects that are facing licensing challenges, collecting copyright assignments, and addressing GPL violations. In this session, though, there was really only one topic that the audience wanted to know about: the interaction between free-software licensing and large language models (LLMs).&lt;p&gt;With a subscription to LWN, you can stay current with what is happening in the Linux and free-software community and take advantage of subscriber-only site features. We are pleased to offer you a free trial subscription, no credit card required, so that you can see for yourself. Please, join us!&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;Anybody hoping to exit the session with clear answers about the status of LLM-created code was bound to be disappointed; the FSF, too, is trying to figure out what this landscape looks like. The organization is currently running a survey of free-software projects with the intent of gathering information about what position those projects are taking with regard to LLM-authored code. From that information (and more), the FSF eventually hopes to come up with guidance of its own.&lt;/p&gt;
    &lt;p&gt;Nick Clifton asked whether the FSF is working on a new version of the GNU General Public License — a GPLv4 — that takes LLM-generated code into account. No license changes are under consideration now, Siewicz answered; instead, the FSF is considering adjustments to the Free Software Definition first.&lt;/p&gt;
    &lt;p&gt;Siewicz continued that LLM-generated code is problematic from a free-software point of view because, among other reasons, the models themselves are usually non-free, as is the software used to train them. Clifton asked why the training code mattered; Siewicz said that at this point he was just highlighting the concern that some feel. There are people who want to avoid proprietary software even when it is being run by others.&lt;/p&gt;
    &lt;p&gt; Siewicz went on to say that one of the key questions is whether code that is created by an LLM is copyrightable and, if not, if there is some way to make it copyrightable. It was never said explicitly, but the driving issue seems to be whether this software can be credibly put under a copyleft license. Equally important is whether such code infringes on the rights of others. With regard to copyrightability, the question is still open; there are some cases working their way through the courts now. Regardless, though, he said that it seems possible to ensure that LLM output can be copyrighted by applying some human effort to enhance the resulting code. The use of a "&lt;quote&gt;creative prompt&lt;/quote&gt;" might also make the code copyrightable. &lt;/p&gt;
    &lt;p&gt;Many years ago, he said, photographs were not generally seen as being copyrightable. That changed over time as people figured out what could be done with that technology and the creativity it enabled. Photography may be a good analogy for LLMs, he suggested.&lt;/p&gt;
    &lt;p&gt; There is also, of course, the question of copyright infringements in code produced by LLMs, usually in the form of training data leaking into the model's output. Prompting an LLM for output "&lt;quote&gt;in the style of&lt;/quote&gt;" some producer may be more likely to cause that to happen. Clifton suggested that LLM-generated code should be submitted with the prompt used to create it so that the potential for copyright infringement can be evaluated by others. &lt;/p&gt;
    &lt;p&gt;Siewicz said that he does not know of any model that says explicitly whether it incorporates licensed data. As some have suggested, it could be possible to train a model exclusively on permissively licensed material so that its output would have to be distributable, but even permissive licenses require the preservation of copyright notices, which LLMs do not do. A related concern is that some LLMs come with terms of service that assert copyright over the model's output; incorporating such code into a free-software project could expose that project to copyright claims.&lt;/p&gt;
    &lt;p&gt;Siewicz concluded his talk with a few suggested precautions for any project that accepts LLM-generated code, assuming that the project accepts it at all. These suggestions mostly took the form of collecting metadata about the code. Submissions should disclose which LLM was used to create them, including version information and any available information on the data that the model was trained on. The prompt used to create the code should also be provided. The LLM-generated code should be clearly marked. If there are any use restrictions on the model output, those need to be documented as well. All of this information should be recorded and saved when the code is accepted.&lt;/p&gt;
    &lt;p&gt;A member of the audience pointed out that the line between LLMs and assistive (accessibility) technology can be blurry, and that any outright ban of the former can end up blocking developers needing assistive technology, which nobody wants to do.&lt;/p&gt;
    &lt;p&gt;There were some questions about how to distinguish LLM-generated code from human-authored code, given that some contributors may not be up-front about their model use. Clifton said that there must always be humans in the loop; they, in the end, are responsible for the code they submit. Jeff Law added that the developers certificate of origin, under which code is submitted to many projects, includes a statement that the contributor has the right to submit the code in question. Determining whether that right is something the contributor truly holds is not a new concern; developers could be, for example, submitting code that is owned by their employer.&lt;/p&gt;
    &lt;p&gt;A real concern, Siewicz said, is whether contributors are sufficiently educated to know where the risks actually are.&lt;/p&gt;
    &lt;p&gt;Mark Wielaard said that developers are normally able to cite any inspirations for the code they write; an LLM is clearly inspired by other code, but is unable to make any such citations. So there is no way to really know where LLM-generated code came from. A developer would have to publish their entire session with the LLM to even begin to fill that in.&lt;/p&gt;
    &lt;p&gt;The session came to an end with, perhaps, participants feeling that they had a better understanding of where some of the concerns are, but nobody walked out convinced that they knew the answers.&lt;/p&gt;
    &lt;p&gt;A video of this session is available on YouTube.&lt;/p&gt;
    &lt;p&gt; [Thanks to the Linux Foundation, LWN's travel sponsor, for supporting my travel to this event.]&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Conference&lt;/cell&gt;
        &lt;cell&gt;GNU Tools Cauldron/2025&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Oct 14, 2025 16:43 UTC (Tue) by gwolf (subscriber, #14632) [Link] If most of my programming consisted of searching for answers to a question related to mine in StackOverflow... I *could* get persuaded to link to the post in question in a comment before each included snippet. But that's also not something I've seen to be frequent. And if I didn't write the comment _the same moment_ I included said snippet, it's most likely I never will. So... I think there is an argumentative issue in here :-) Posted Oct 15, 2025 2:13 UTC (Wed) by Baughn (subscriber, #124425) [Link] (21 responses) - Discuss a problem with the LLM. The LLM autonomously reads large parts of the repository you’re working in, during the discussion. - Ask it to write a plan. Edit the plan. Ask it about the edited plan. Edit it some more. - Repeatedly restart the LLM, asking it to code different parts of the plan. Debug the results. Write some code yourself. Create, rebase, or otherwise play around with the repository; keep multiple branches of potential code. - Go back and edit the original plan, now that you know what might work. Port some unit tests back in time, sometimes. - Repeat until done. There is a prompt. Actually, there are many prompts, all conveniently stored in verbose JSONL that also requires point in time snapshots of the repository you’re working in to make sense of. If someone were to ask me for that, I wouldn’t know where to start. It’s like asking for a recording of my desktop so they can be sure I’m not doing something they disapprove of. Posted Oct 15, 2025 4:21 UTC (Wed) by mussell (subscriber, #170320) [Link] (9 responses) Posted Oct 15, 2025 14:25 UTC (Wed) by Baughn (subscriber, #124425) [Link] (7 responses) LLMs just force it, since they don’t work well without a plan. You can rely on them reading your mind. And I don’t know. Is a 5x increase in project scope worthwhile? Because that’s what I’ve been getting. Posted Oct 15, 2025 21:18 UTC (Wed) by SLi (subscriber, #53131) [Link] (5 responses) According to lore, some programmers talk to rubber ducks to solve their problems. Well, even GPT-3 was definitely more than a rubber duck. Not necessarily 10x better, but still better. These recent models? I think they're genuinely useful also in domains that you don't know so well. An example (I could also give another from a domain I knew even less about, book binding, but this message is already long): I've been taking a deep dive into Rust for the past few days, and I don't think how I would replace the crate and approach suggestions I've got from LLMs. Probably the old-fashioned way, reading enough rust code to see what people do today, but I'm sure that would have been several times the effort. The same applies to them digging quickly the reason why a particular snippet makes the borrow checker unhappy and suggesting an alternative. One does not easily learn to search for `smallvec` without having ever heard of it. Or, today, diving into the interaction of process groups, sessions, their interaction with ptys (which I didn't know well), and "why on earth do I end up with a process tree like this"—the LLM taught be about subreapers, which I did not know and would not have easily guessed to search for. I think one problem is that people get angry if LLMs are not right 100% of the time. Even that seems a bit like "you're using it wrong". Don't rely on it to be right all the time. (As a side note, don't rely on humans to be either, unless they say very little.) Rely on it to give a big picture fast, which is where you might be after some time of self-study while still harboring misconceptions to be corrected—and much preferable to having no idea. Posted Oct 16, 2025 7:03 UTC (Thu) by Wol (subscriber, #4433) [Link] (2 responses) I have a stuffed Tux on my desk for exactly that reason (although I rarely use it). But how often has explaining the problem to a colleague resulted in you solving it, often without a word from said colleague? That's why a rubber duck / stuffed Tux / whatever is such a useful debugging aid. It might feel weird holding a conversation with an inanimate object, but don't knock it. It works ... Cheers, Posted Oct 16, 2025 11:48 UTC (Thu) by iabervon (subscriber, #722) [Link] (1 responses) Of course, it means I have a file in version control which says that it's a list of explanations of the issues I'm facing with features in progress, and then doesn't have anything else in any mainline commit. Posted Oct 16, 2025 16:04 UTC (Thu) by SLi (subscriber, #53131) [Link] But I think writing clearly in a non-dialog setting is a skill that perhaps even most engineers lack. I think all engineers should be taught technical writing (I know my university didn't for me). Many don't even seem to realize it's a rather different skill set. Posted Oct 16, 2025 13:40 UTC (Thu) by kleptog (subscriber, #1183) [Link] (1 responses) The first time I really saw this was when I was trying to do something with CodeMirror and was getting all sorts of conflicting advice from different sites. Eventually fed the errors to ChatGPT and it pointed out that version 5 and 6 use completely different configuration styles. No search engine would have told me that info. No website specifies which version they are using. And for one off scripts it's amazing. Hey, I need a script that does the steps X, Y and Z in Python. Here is the previous bash script that did this. And voila. Treat it like an idiot that knows everything and understands nothing. Because that's what it is... The trick is to combine your understanding with its knowledge. Posted Oct 23, 2025 11:07 UTC (Thu) by nye (subscriber, #51576) [Link] I think this is the best description of an LLM that I've seen anywhere. Posted Oct 20, 2025 2:14 UTC (Mon) by gmatht (subscriber, #58961) [Link] Like all C programmers, I can write C in any language. Sometimes when I start writing C in Python the LLM will offer to complete my involved algorithm with a 2 line pythonic solution. Also the LLM's initial draft of a UI looks nicer than the functional but plain version I would call v1.0. I seem to recall a quote saying something along the lines of: I will always write better code than a compiler/LLM, because I can use a compiler/LLM. The biggest weakness of LLMs seems to be that it is not possible to reach v1 with vibe coding because once the code base reaches a certain level of quality the LLM will become more interested in adding new bugs than fixing old ones. For example, it will find a polished algorithm and observe that the tests only cover several values so it can simplify the algorithm by just hardcoding those values and still "pass". Posted Oct 16, 2025 6:06 UTC (Thu) by azumanga (subscriber, #90158) [Link] I was stuck with a slowly dying Python 2 program, which a few people had tried to update (and failed) to Python 3. I previously tried for 4 full days before I realised I was no-where close, and gave up. I sat for an afternoon with Claude Code, and finished a full Python 3 translation. Claude found replacement libraries for things without a Python 3 version, wrote fresh implementations of a couple of functions that didn't get a Python 3 upgrade (I checked, it didn't just copy the originals), and helped me then fix up all the unicode issues from the Python 2 -&amp;gt; Python 3 upgrade process. Posted Oct 15, 2025 20:39 UTC (Wed) by SLi (subscriber, #53131) [Link] (7 responses) Even with ChatGPT this should be the case. I've come to suspect that the usual difference between people who insist LLMs are absolutely useless and those who get a lot of good out of them is likely exactly that: Take a human who's likely not even very good at communicating textually (few of us are; technical writing is a discipline for a reason), have him write a single sloppy prompt and dismiss the results when the LLM was not able to read his mind. Posted Oct 15, 2025 20:54 UTC (Wed) by Wol (subscriber, #4433) [Link] (1 responses) Okay, the only AI I've (knowingly) used is Google search. And at least it has the decency to rephrase my query into the query it's going to answer (which it then answers pretty well). It's just that the question it's answering bears precious little resemblance to the question I asked it. Cheers, Posted Oct 15, 2025 21:19 UTC (Wed) by SLi (subscriber, #53131) [Link] Posted Oct 16, 2025 8:17 UTC (Thu) by taladar (subscriber, #68407) [Link] Posted Oct 20, 2025 8:35 UTC (Mon) by ssmith32 (subscriber, #72404) [Link] (3 responses) I asked my claude-powered assistant to: - upgrade a library to a specific version. Instead, it updated an unrelated config value that had a similar name to the library to be the name of the library. The config file was most emphatically _not_ part of the build system. If LLMs truly understood "context" like people claim, it should have ruled out touching that file completely. - generate a bunch of boilerplate for writing out new objects to a datastore that still needs boilerplate. Mostly got it right. - generate a dockerfile for me. It saved time and worked, but added an unusual amount of completely useless cruft. Still faster to quickly remove it then make it myself from scratch. - how to install a particular java version on my mac. Utterly failed. Kept on insisting on using a cask that no longer exists, on downloading it from locations that no longer hosted that particular version, etc. It was clearly just barfing up the suggestions from a bunch of outdated blogs. For something that has similar patterns in your codebase, or has plenty of (correct) examples in documentation and random websites, it can do great. For something novel or unique, even if it is something as banal as updating a library version by understanding it's pulled in transitively, and another library must be updated - or something both unique and genuinely interesting, LLMs fail miserably. Which is not surprising. They are useful tools, once you know how they work. And a remarkable amout of code is not really doing anything that novel or unique. For conversations about design, a co-worker or rubber duck is still much better for me. Posted Oct 20, 2025 12:36 UTC (Mon) by pizza (subscriber, #46) [Link] (2 responses) In other words, where LLMs are most useful is are twofold: * A successor to the boilerplate-generating development environment "Wizards" [1] [1] Referring to interactive prompt-guided templating engines popularized by Microsoft in Visual&amp;lt;whatever&amp;gt; development environments in the early 90s. Posted Oct 22, 2025 17:25 UTC (Wed) by raven667 (subscriber, #5198) [Link] (1 responses) Posted Oct 23, 2025 7:32 UTC (Thu) by taladar (subscriber, #68407) [Link] Posted Oct 23, 2025 10:34 UTC (Thu) by jvoss2 (guest, #7065) [Link] (1 responses) Posted Oct 24, 2025 7:50 UTC (Fri) by taladar (subscriber, #68407) [Link] Posted Oct 25, 2025 19:28 UTC (Sat) by davidgerard (guest, #100304) [Link] Posted Oct 15, 2025 4:42 UTC (Wed) by pabs (subscriber, #43278) [Link] Personally I like Debian's document about that: https://salsa.debian.org/deeplearning-team/ml-policy/ It would be very useful to have at least some of the former, for things like human language translation, noise removal from audio, text to speech, speech to text and so on. Posted Oct 16, 2025 1:20 UTC (Thu) by davecb (subscriber, #1574) [Link] Rinse, repeat. &lt;head&gt;Now can we?&lt;/head&gt;&lt;lb/&gt; Be it that I learnt programming at school or by reading books, or that I took a "BootCamp", I cannot usually said where I got a particular construct from. I could, of course, say that I write C in the K&amp;amp;R style — but I doubt that's what Siewicz refers to. And of course, Perl-heads will recognize a "Schwartzian transform". But in general, I learnt _how to code_, and I am not able to attribute specific constructs of my programming to specific bits of code. Just like an LLM.&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;lb/&gt; Wol&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Better than human (sometimes)&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;lb/&gt; Wol&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;lb/&gt; * Fancy autocomplete.&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Define “prompt”&lt;/head&gt;&lt;head&gt;Libre AI?&lt;/head&gt;&lt;head&gt;And if we use bugs in our model?&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://lwn.net/Articles/1040888/"/><published>2025-10-26T13:38:30+00:00</published></entry></feed>