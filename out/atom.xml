<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-27T17:37:31.129201+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45719669</id><title>Microsoft needs to open up more about its OpenAI dealings</title><updated>2025-10-27T17:37:38.611670+00:00</updated><content/><link href="https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8"/><published>2025-10-27T11:19:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719788</id><title>You are how you act</title><updated>2025-10-27T17:37:38.473223+00:00</updated><content>&lt;doc fingerprint="7e0099193ae60539"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;You Are How You Act&lt;/head&gt;
    &lt;p&gt;The modern American self is best defined by two Enlightenment thinkers who never met but have been arguing in our heads ever since.&lt;/p&gt;
    &lt;p&gt;Jean-Jacques Rousseau believed in the primacy of the inner self: a core of goodness constantly betrayed by circumstance. In his view, the world corrupts us. We begin pure and only fail because society, obligation, or expectation pulls us away from who we truly are.&lt;/p&gt;
    &lt;p&gt;Benjamin Franklin saw it differently. For him there was no such thing as a good person or a bad person, only people who do good things and people who do bad things. Virtue was a habit, not an essence.&lt;/p&gt;
    &lt;p&gt;Modern America carries both of these ideas, switching between them whenever convenient. We invoke Rousseau when we need forgiveness: I meant well. We invoke Franklin when we need accountability: Show me what you’ve done. It’s an almost entirely incompatible pair of philosophies that coexist perfectly in practice because they’re both so flattering — one to our intentions, the other to our ambition.&lt;/p&gt;
    &lt;p&gt;But only one of them scales.&lt;/p&gt;
    &lt;p&gt;“Fake it until you make it” is often dismissed as shallow, but it’s closer to Franklin’s truth. Faking it long enough is making it. The repetition of behavior, not the sincerity of belief, is what shapes character. You become the kind of person who does the things you repeatedly do.&lt;/p&gt;
    &lt;p&gt;Rousseau invites endless introspection. Franklin invites progress. The first is about how you feel; the second is about what you build.&lt;/p&gt;
    &lt;p&gt;I find the Franklin model far more useful. Not because it’s truer in some cosmic sense, but because it gives you agency. You can’t always change how you feel, but you can always decide what to do next.&lt;/p&gt;
    &lt;p&gt;“It doesn’t take great men to do things, but it is doing things that make men great.” — Arnold Glasow&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://boz.com/articles/you-are-how-you-act"/><published>2025-10-27T11:35:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45720345</id><title>Pre-emptive Z80 multitasking explainer</title><updated>2025-10-27T17:37:38.079517+00:00</updated><content>&lt;doc fingerprint="3f7442da030e46c4"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;Couldn't load subscription status. Retry&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/bchiha/Ready-Z80/tree/main/29-Multitasking"/><published>2025-10-27T12:39:52+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721682</id><title>Microsoft in court for allegedly misleading Australians over 365 subscriptions</title><updated>2025-10-27T17:37:36.870200+00:00</updated><content>&lt;doc fingerprint="ef5109103496c5d3"&gt;
  &lt;main&gt;
    &lt;p&gt;The ACCC has commenced proceedings in the Federal Court against Microsoft Australia and its parent company Microsoft Corporation for allegedly misleading approximately 2.7 million Australian customers when communicating subscription options and price increases, after it integrated its AI assistant, Copilot, into Microsoft 365 plans.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges that since 31 October 2024, Microsoft has told subscribers of Microsoft 365 Personal and Family plans with auto-renewal enabled that to maintain their subscription they must accept the integration of Copilot and pay higher prices for their plan, or, alternatively, cancel their subscription.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges this information provided to subscribers was false or misleading because there was an undisclosed third option, the Microsoft 365 Personal or Family Classic plans, which allowed subscribers to retain the features of their existing plan, without Copilot, at the previous lower price.&lt;/p&gt;
    &lt;p&gt;Microsoft’s communication with subscribers did not refer to the existence of the “Classic” plans, and the only way subscribers could access them was to begin the process of cancelling their subscription. This involved navigating to the subscriptions section of their Microsoft account and selecting “Cancel subscription”. It was only on the following page that subscribers were given the option to instead move to the Classic plan. See a screenshot of the cancellation page revealing the Classic plan.&lt;/p&gt;
    &lt;p&gt;“Following a detailed investigation, we will allege in Court that Microsoft deliberately omitted reference to the Classic plans in its communications and concealed their existence until after subscribers initiated the cancellation process to increase the number of consumers on more expensive Copilot-integrated plans,” ACCC Chair Gina Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“The Microsoft Office apps included in 365 subscriptions are essential in many people’s lives and given there are limited substitutes to the bundled package, cancelling the subscription is a decision many would not make lightly.”&lt;/p&gt;
    &lt;p&gt;“We’re concerned that Microsoft’s communications denied its customers the opportunity to make informed decisions about their subscription options, which included the possibility of retaining all the features of their existing plan without Copilot and at the lower price,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“We believe many Microsoft 365 customers would have opted for the Classic plan had they been aware of all the available options.”&lt;/p&gt;
    &lt;p&gt;Following the integration of Copilot, the annual subscription price of the Microsoft 365 Personal plan increased by 45 per cent from $109 to $159. The annual subscription price for the Microsoft 365 Family plan increased by 29 per cent from $139 to $179.&lt;/p&gt;
    &lt;p&gt;Microsoft sent two emails and published a blog post to inform auto-renewing subscribers (as of 31 October 2024) about the Copilot integration and the impending price increase that would apply at their next renewal. These three pieces of communication are central to the ACCC’s case.&lt;/p&gt;
    &lt;p&gt;“We allege that Microsoft’s two emails to existing subscribers and the blog post were false or misleading as they conveyed that consumers had to accept the more expensive Copilot-integrated plans, and that the only other option was to cancel,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“All businesses need to provide accurate information about their services and prices. Failure to do so risks breaching the Australian Consumer Law,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;In establishing its investigation into this matter, the ACCC drew on a significant number of consumer reports, as well as commentary in online forums such as Reddit. Information provided by consumers to the ACCC’s Infocentre was critical to alerting the ACCC to the alleged conduct, particularly in identifying the availability of the Classic plan through subscribers’ cancellation flows.&lt;/p&gt;
    &lt;p&gt;The ACCC is seeking orders including penalties, injunctions, declarations, consumer redress, and costs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Consumer response&lt;/head&gt;
    &lt;p&gt;The ACCC believes the millions of Australian consumers who were allegedly misled by Microsoft about the availability of the Classic plan may have suffered economic harm through the automatic renewal of their subscription with Copilot integration at a higher price.&lt;/p&gt;
    &lt;p&gt;The ACCC is seeking consumer redress in this case for Microsoft 365 Personal and Family subscribers affected by the alleged conduct.&lt;/p&gt;
    &lt;p&gt;Existing Microsoft 365 Personal and Family subscribers who have not had their subscription renewed since 8 July 2025 and would like to revert to their previous plan may be able to select the cancel option and follow the steps in the cancellation process until the Classic plan is offered. However, the ACCC notes that the subscription options and prices offered are entirely in Microsoft’s control and could be subject to change at any time.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example timeline for a subscriber on a Microsoft 365 Personal plan&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;On 19 April 2024, a consumer purchased an annual Microsoft 365 Personal subscription for $109 and enabled auto-renewal for one year’s time.&lt;/item&gt;
      &lt;item&gt;On 31 October 2024, Microsoft published a blog post in which it stated: &lt;list rend="ul"&gt;&lt;item&gt;“To reflect the value we’ve added over the past decade and enable us to deliver new innovations for years to come, we’re increasing the prices of Microsoft 365 Personal and Family. The price increase will apply to existing subscribers upon their next renewal.”&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;On 9 January 2025, the consumer received an email informing them that AI features were being added to their plan and the price of the annual subscription would increase from $109 to $159 starting on 19 April 2025. See a screenshot of the first email sent to the consumers about the price increase.&lt;/item&gt;
      &lt;item&gt;On 13 April 2025, 7 days before their renewal date, the consumer received a second email in which Microsoft stated: &lt;list rend="ul"&gt;&lt;item&gt;“We want to let you know about a change to the amount of your next payment. Unless you cancel two days before Saturday, April 19 2025, we’ll charge AUD 159.00 including taxes every year… We’ll tell you if this price ever changes. Cancel any time to stop future charges or change how you pay by managing your subscription in your Microsoft account.”&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;On 19 April 2025, the consumer's subscription was automatically renewed at the increased price of $159. The consumer was not aware that switching to the Classic plan at the existing subscription price of $109 was possible.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Screenshots showing the communications with subscribers&lt;/head&gt;
    &lt;head rend="h3"&gt;Email sent to subscribers informing them of the Copilot integration and price increase&lt;/head&gt;
    &lt;head rend="h3"&gt;The page late in the cancellation process revealing the Classic plan&lt;/head&gt;
    &lt;p&gt;A subscriber only saw this screen once they had navigated to the subscriptions section of their Microsoft account, selected “Cancel subscription”, and continued with the cancellation process.&lt;/p&gt;
    &lt;head rend="h2"&gt;Background&lt;/head&gt;
    &lt;p&gt;Microsoft Pty Ltd (Microsoft AU) is an Australian proprietary company, and a wholly owned subsidiary of the Microsoft Corporation (Microsoft US), a US-based technology conglomerate. Microsoft AU is the supplier of Microsoft’s proprietary software in Australia, including Microsoft 365 plans.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges Microsoft US was responsible for preparing and publishing the communications to Australian Microsoft 365 subscribers containing the misrepresentations alleged by the ACCC. The ACCC alleges that Microsoft AU adopted the communications as the seller of Microsoft 365 subscriptions to Australian consumers.&lt;/p&gt;
    &lt;p&gt;The ACCC’s case only relates to Microsoft 365 Personal and Family plans, which are designed for home use. The case does not involve Microsoft 365 subscriptions for business or enterprise.&lt;/p&gt;
    &lt;p&gt;Microsoft 365 Personal and Family offerings are supplied on a monthly or annual subscription basis, and are comprised of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;software products, such as Word, Excel, PowerPoint and OneNote&lt;/item&gt;
      &lt;item&gt;collaboration and communication applications like Outlook, Teams and SharePoint&lt;/item&gt;
      &lt;item&gt;cloud-based services through OneDrive.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Microsoft launched Copilot as its consumer-facing generative AI product in 2023. Copilot was integrated into Microsoft 365 Personal and Family subscriptions in Australia on 31 October 2024.&lt;/p&gt;
    &lt;p&gt;In January 2025, the Copilot integration was rolled out across Microsoft 365 worldwide, with varying subscription price increases applying to each jurisdiction.&lt;/p&gt;
    &lt;p&gt;Competition, product safety, consumer and fair trading issues in the digital economy is a current ACCC compliance and enforcement priority.&lt;/p&gt;
    &lt;head rend="h3"&gt;Maximum penalties&lt;/head&gt;
    &lt;p&gt;For corporations, the maximum penalty for each breach of the Australian Consumer Law is the greater of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;$50 million&lt;/item&gt;
      &lt;item&gt;three times the total benefits that have been obtained and are reasonably attributable, or&lt;/item&gt;
      &lt;item&gt;if the total value of the benefits cannot be determined, 30 per cent of the corporation’s adjusted turnover during the breach turnover period.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Any penalty that might apply to this conduct is a matter for the Court to determine and would depend on the Court’s findings. The ACCC will not comment on what penalties the Court may impose.&lt;/p&gt;
    &lt;head rend="h3"&gt;Concise statement&lt;/head&gt;
    &lt;p&gt;ACCC v Microsoft Concise Statement 27 October 2025 ( PDF 1.6 MB )&lt;/p&gt;
    &lt;p&gt;This document contains the ACCC’s initiating court documents in relation to this matter. We will not be uploading further documents in the event these initial documents are subsequently amended.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.accc.gov.au/media-release/microsoft-in-court-for-allegedly-misleading-millions-of-australians-over-microsoft-365-subscriptions"/><published>2025-10-27T14:54:14+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721801</id><title>Pyrex catalog from from 1938 with hand-drawn lab glassware [pdf]</title><updated>2025-10-27T17:37:36.332671+00:00</updated><content/><link href="https://exhibitdb.cmog.org/opacimages/Images/Pyrex/Rakow_1000132877.pdf"/><published>2025-10-27T15:04:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722069</id><title>It's insulting to read AI-generated blog posts</title><updated>2025-10-27T17:37:35.902613+00:00</updated><content>&lt;doc fingerprint="66c9d31b36b7b3bd"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;It's insulting to read your AI-generated blog post&lt;/head&gt;
    &lt;p&gt;It seems so rude and careless to make me, a person with thoughts, ideas, humor, contradictions and life experience to read something spit out by the equivalent of a lexical bingo machine because you were too lazy to write it yourself.&lt;/p&gt;
    &lt;p&gt;Do you not enjoy the pride that comes with attaching your name to something you made on your own? It's great!&lt;/p&gt;
    &lt;p&gt;No, don't use it to fix your grammar, or for translations, or for whatever else you think you are incapable of doing. Make the mistake. Feel embarrassed. Learn from it. Why? Because that's what makes us human!&lt;/p&gt;
    &lt;p&gt;Everyone wants to help each other. And people are far kinder than you may think. By adding a sterile robo-liaison between yourself and your readers, you don't give us a chance to engage with you.&lt;/p&gt;
    &lt;p&gt;Here is a secret: most people want to help you succeed. The problem is that you, yes, you are too afraid to ask for help. You think smart, capable people don't ask for help because they should know it all. Wrooooooooong. On the contrary, smart people know when to ask for help and when to give it too. They create mutually beneficial relationships with the people surrounding them.&lt;/p&gt;
    &lt;p&gt;I ask you, human to human, both as beings capable of love and fear and humor and all the other great feelings we have cultivated for thousands of years: leave the AI to your quantitative tasks if you have to use it at all. Face the world with your thoughts and strengthen them through real-world experience. The best thoughts are the ones that have been felt, anyway.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.pabloecortez.com/its-insulting-to-read-your-ai-generated-blog-post/"/><published>2025-10-27T15:27:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722590</id><title>Write Express JS code that runs on Rust</title><updated>2025-10-27T17:37:35.456148+00:00</updated><content>&lt;doc fingerprint="e790bf15fb13588a"&gt;
  &lt;main&gt;
    &lt;p&gt;Brahma-JS is an ultra-low-latency orchestrator for JS, blending familiar &lt;code&gt;Express&lt;/code&gt;-style middleware and routing with a high-performance core built in Rust. Ideal for micro-service and API use-cases where speed matters.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rust-level performance, without needing to write Rust.&lt;/item&gt;
      &lt;item&gt;Express-like API, so JS devs can jump in instantly.&lt;/item&gt;
      &lt;item&gt;Built with Tokio + Hyper, delivering asynchronous speed and efficiency.&lt;/item&gt;
      &lt;item&gt;Lightweight, zero-dependency binary — no build headaches.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Benchmarks were run with wrk on an Intel® Core™ i5-12450H (12 vCPUs available under virtualization, 200 concurrent connections, 10s duration):&lt;/p&gt;
    &lt;p&gt;wrk output (Brahma-JS):&lt;/p&gt;
    &lt;code&gt;
Running 10s test @ [http://127.0.0.1:2000/hi](http://127.0.0.1:2000/hi)
1 threads and 200 connections
Thread Stats   Avg      Stdev     Max   +/- Stdev
Latency     1.51ms  479.16us   7.89ms   78.17%
Req/Sec   131.57k     9.13k  146.78k    79.00%
1309338 requests in 10.00s, 186.05MB read
Requests/sec: 130899.58
Transfer/sec: 18.60MB

&lt;/code&gt;
    &lt;p&gt;Takeaway: Brahma-JS sustains 130k+ requests/sec with low latency, powered by its Rust core and Express-style developer API.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Start Brahma-JS server:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;node server.js
# server listens on 0.0.0.0:2000&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Run wrk against the &lt;code&gt;/hi&lt;/code&gt;endpoint:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;wrk http://127.0.0.1:2000/hi -d 10 -t 1 -c 200&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;-d 10&lt;/code&gt;→ run for 10 seconds&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;-t 1&lt;/code&gt;→ 1 worker thread&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;-c 200&lt;/code&gt;→ 200 concurrent connections&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Test machine info (&lt;code&gt;lscpu&lt;/code&gt;):&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;Architecture:           x86_64
CPU(s):                 12
Model name:             12th Gen Intel(R) Core(TM) i5-12450H
Threads per core:       2
Cores per socket:       6
Virtualization:         Microsoft Hyper-V (full)
&lt;/code&gt;
    &lt;code&gt;npm install brahma-firelight
# or
yarn add brahma-firelight
# or
pnpm add brahma-firelight
# or
bun add brahma-firelight
# or
nypm add brahma-firelight
&lt;/code&gt;
    &lt;code&gt;const {
  createApp,
  getJsResponseTimeout,
  getMaxBodyBytes,
  setJsResponseTimeout,
  setMaxBodyBytes,
} = require("brahma-firelight");

const app = createApp();

// save production from disasters by locking in Rust
// defaults to 30 seconds and 4mb limit.
// set 2 minutes timeout (120 seconds)
setJsResponseTimeout(120);

// set max body to 50 MiB
setMaxBodyBytes(50 * 1024 * 1024); // 52_428_800

console.log("timeout secs:", getJsResponseTimeout()); // prints 120
console.log("max body bytes:", getMaxBodyBytes()); // prints 52428800

// CORS config
app.use((req, res, next) =&amp;gt; {
  const origin = req.headers.origin;

  if (origin) {
    res.setHeader("Access-Control-Allow-Origin", origin); // echo back client origin
    res.setHeader("Access-Control-Allow-Credentials", "true");
  } else {
    // fallback (same-origin or no Origin header)
    res.setHeader("Access-Control-Allow-Origin", "*");
  }

  res.setHeader("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");

  if (req.method === "OPTIONS") {
    res.send(204);
  } else {
    next();
  }
});

// Middlewares

function authMiddleware(req, res, next) {
  if (!req.headers["authorization"]) return res.text("Unauthorized", 401);
  next();
}

// utils.js
function sleep(ms) {
  return new Promise((resolve) =&amp;gt; setTimeout(resolve, ms));
}

app.get("/hi", (req, res) =&amp;gt; {
  res.json({ message: "Hello World from Brahma-JS!" });
});

// // Async handler returning an object
app.get("/time", async (req) =&amp;gt; {
  await sleep(20000);
  return {
    status: 400,
    headers: { "Content-Type": "application/json" }, // Custom Returns
    body: JSON.stringify({ now: Date.now() }),
  };
});

// To send HTML response
app.get("/page", (req, res) =&amp;gt; {
  res.html(`&amp;lt;h1&amp;gt;Hello HTML&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Served by Brahma-JS id: ${req.reqId}&amp;lt;/p&amp;gt;`);
});

app.post("/submit", (req, res) =&amp;gt; {
  let formData = JSON.parse(req.body);
  console.log("bodyData:", formData);
  res.json(formData, 201); // return the JSON response with http-status-code
});

// Set-Up cookies and User Sessions

app.get("/set-cookies", (req, res) =&amp;gt; {
  console.log("Request:--&amp;gt;", req); // Request Parameters-&amp;gt; contains all info + additional meta data
  res.send(
    200, // http-status code
    { "Content-Type": "text/plain" }, // headers Content-Type
    ["a=1; Path=/; HttpOnly", "b=2; Path=/; Secure; Max-Age=3600"], // manual cookie setup
    "hello" // optional Return Body
  );
});

app.get("/redirect", (req, res) =&amp;gt; {
  res.redirect("https://google.com");
});

app.post("/protected", authMiddleware, (req, res) =&amp;gt;
  res.json({ success: true })
);

app.listen("0.0.0.0", 2000, () =&amp;gt; {
  console.log("Server listening on port 2000");
});

// Enable built in Graceful Shutdown (optional for production use)

// process.on('SIGINT', async () =&amp;gt; {
//   console.log('SIGINT → shutting down...');
//   await app.close(5000); // wait up to 5s for requests
//   process.exit(0);
// });

// process.on('SIGTERM', async () =&amp;gt; {
//   console.log('SIGTERM → shutting down...');
//   await app.close(5000);
//   process.exit(0);
// });&lt;/code&gt;
    &lt;p&gt;Just like Express:&lt;/p&gt;
    &lt;code&gt;app.get("/hello", (req, res) =&amp;gt; {
  res.send("Hi there!");
});&lt;/code&gt;
    &lt;p&gt;But under the hood:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Execution occurs in Rust (Tokio + Hyper).&lt;/item&gt;
      &lt;item&gt;Handlers (sync or async) run without sacrificing speed.&lt;/item&gt;
      &lt;item&gt;Middleware works seamlessly — same developer experience, turbo-charged engine.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;app.get("/data", async (req, res) =&amp;gt; {
  const result = await fetch(
    "https://jsonplaceholder.typicode.com/todos/1"
  ).then((r) =&amp;gt; r.json());
  res.json({ result });
});&lt;/code&gt;
    &lt;code&gt;app.use((req, res, next) =&amp;gt; {
  req.startTime = Date.now();
  next();
});

app.get("/delay", async (req, res) =&amp;gt; {
  await new Promise((r) =&amp;gt; setTimeout(r, 200));
  res.json({ elapsed: Date.now() - req.startTime });
});&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Beta / experimental — actively refined based on usage.&lt;/item&gt;
      &lt;item&gt;Feedback and early adopters highly encouraged.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Brahma-Firelight ships prebuilt native binaries for macOS, Linux and Windows so you don't need to compile the native addon locally.&lt;/p&gt;
    &lt;p&gt;Supported artifact filenames (what the JS loader will try to load):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;macOS (Apple Silicon): &lt;code&gt;brahma-js.darwin-arm64.node&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;macOS (Intel x64): &lt;code&gt;brahma-js.darwin-x64.node&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Linux (x64, GNU): &lt;code&gt;brahma-js.linux-x64-gnu.node&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Linux (arm64, GNU): &lt;code&gt;brahma-js.linux-arm64-gnu.node&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Windows (x64, MSVC): &lt;code&gt;brahma-js.win32-x64-msvc.node&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;👉 Forked from Brahma-Core. An open source repository Brahma-Core.&lt;/p&gt;
    &lt;p&gt;MIT © LICENSE&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/Shyam20001/rsjs"/><published>2025-10-27T16:05:06+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722635</id><title>Show HN: Erdos – open-source, AI data science IDE</title><updated>2025-10-27T17:37:35.221996+00:00</updated><content>&lt;doc fingerprint="fe09e69eaaad09cb"&gt;
  &lt;main&gt;
    &lt;p&gt;0.2.0&lt;/p&gt;
    &lt;p&gt;10-27-2025&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable remote development (SSH and container)&lt;/item&gt;
      &lt;item&gt;Enable local model usage&lt;/item&gt;
      &lt;item&gt;Available on Windows ARM64&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Erdos — a next-generation data science IDE.&lt;/p&gt;
    &lt;p&gt;Fast, accurate Jupyter notebook edits&lt;/p&gt;
    &lt;p&gt;Erdos lets data scientists create, edit, and iterate on Jupyter notebooks faster and more accurately than ever before.&lt;/p&gt;
    &lt;p&gt;Plots pane&lt;/p&gt;
    &lt;p&gt;With the help of Erdos’s AI assistant, data scientists can use the plots pane to view, compare, and iterate on plots as their analyses evolve.&lt;/p&gt;
    &lt;p&gt;Integrated Docs Intelligence&lt;/p&gt;
    &lt;p&gt;Erdos’s AI assistant reads and interprets documentation from the help pane to deliver contextually accurate help, examples, and explanations.&lt;/p&gt;
    &lt;p&gt;You can use the Erdos IDE for free. We only charge for usage of the Erdos AI assistant. Light usage of the Erdos AI assistant is free, but higher limits require a subscription. Please visit our Pricing page to learn more.&lt;/p&gt;
    &lt;p&gt;0.2.0&lt;/p&gt;
    &lt;p&gt;10-27-2025&lt;/p&gt;
    &lt;p&gt;0.1.5&lt;/p&gt;
    &lt;p&gt;10-24-2025&lt;/p&gt;
    &lt;p&gt;0.1.4&lt;/p&gt;
    &lt;p&gt;10-22-2025&lt;/p&gt;
    &lt;p&gt;0.1.3&lt;/p&gt;
    &lt;p&gt;10-21-2025&lt;/p&gt;
    &lt;p&gt;0.1.2&lt;/p&gt;
    &lt;p&gt;10-20-2025&lt;/p&gt;
    &lt;p&gt;0.1.1&lt;/p&gt;
    &lt;p&gt;10-15-2025&lt;/p&gt;
    &lt;p&gt;0.1.0&lt;/p&gt;
    &lt;p&gt;10-13-2025&lt;/p&gt;
    &lt;p&gt;Try Erdos now.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.lotas.ai/erdos"/><published>2025-10-27T16:08:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722639</id><title>Claude for Excel</title><updated>2025-10-27T17:37:34.921227+00:00</updated><content>&lt;doc fingerprint="3d3f8e961dffc20a"&gt;
  &lt;main&gt;
    &lt;p&gt;Piloting Claude for Excel&lt;/p&gt;
    &lt;p&gt;Claude understands your entire workbookâfrom nested formulas to multiple tab dependencies. Get explanations with cell-level citations, and update assumptions while preserving formulas. Now in beta as a research preview.&lt;/p&gt;
    &lt;head rend="h2"&gt;How teams use Claude for Excel&lt;/head&gt;
    &lt;p&gt;Claude listens carefully, follows instructions precisely, â¨and thinks through complex problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;Get answers about any cell in seconds&lt;/head&gt;
    &lt;p&gt;Navigate complex models instantly. Ask Claude about specific formulas, entire worksheets, or calculation flows across tabs. Every explanation includes cell-level citations so you can verify the logic.&lt;/p&gt;
    &lt;head rend="h3"&gt;Test scenarios without breaking formulas&lt;/head&gt;
    &lt;p&gt;Update assumptions across your entire model while preserving all dependencies. Test different scenarios quicklyâClaude highlights every change with explanations for full transparency.&lt;/p&gt;
    &lt;head rend="h3"&gt;Debug and fix errors&lt;/head&gt;
    &lt;p&gt;Trace #REF!, #VALUE!, and circular reference errors to their source in seconds. Claude explains what went wrong and how to fix it without disrupting the rest of your model.&lt;/p&gt;
    &lt;head rend="h3"&gt;Build models or fill existing templates&lt;/head&gt;
    &lt;p&gt;Create draft financial models from scratch based on your requirements. Or populate existing templates with fresh data while maintaining all formulas and structure.&lt;/p&gt;
    &lt;p&gt;The Claude you trust, right in Excel&lt;/p&gt;
    &lt;head rend="h3"&gt;Transparency and visibility&lt;/head&gt;
    &lt;p&gt;See Claudeâs changes in real time with explanations&lt;/p&gt;
    &lt;head rend="h3"&gt;Formula integrity&lt;/head&gt;
    &lt;p&gt;Maintain Excel model structure and formatting&lt;/p&gt;
    &lt;head rend="h3"&gt;Enterprise security&lt;/head&gt;
    &lt;p&gt;Works within your existing compliance framework&lt;/p&gt;
    &lt;p&gt;FAQ&lt;/p&gt;
    &lt;p&gt;Claude for Excel is available in beta as a research preview through a waitlist for 1,000 Max, Team and Enterprise plan customers. Weâll gradually expand access as we build confidence through this limited preview.&lt;/p&gt;
    &lt;p&gt;Claude for Excel works within your existing security framework. Claude can make mistakes, so you should always review changes before finalizing, especially for client-facing deliverables.&lt;/p&gt;
    &lt;p&gt;Claude for Excel is currently in beta as a research preview, so itâs best for model analysis, assumption updates, error debugging, template population, formula explanations, multi-tab navigation. Claude doesnât have advanced Excel capabilities including pivot tables, conditional formatting, data validation, data tables, macros, and VBA. Weâre actively working on these features.&lt;/p&gt;
    &lt;p&gt;Yes, Claude is trained to recognize common financial modeling patterns, formula structures, and industry-standard calculations. However, always verify outputs match your specific methodologies.&lt;/p&gt;
    &lt;p&gt;Currently .xlsx and .xlsm files are supported. File size limits apply based on your Claude plan.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.claude.com/claude-for-excel"/><published>2025-10-27T16:09:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722733</id><title>Ask HN: Is AWS Down Again?</title><updated>2025-10-27T17:37:34.598441+00:00</updated><content>&lt;doc fingerprint="b64193993947a548"&gt;
  &lt;main&gt;
    &lt;p&gt;I've run a business in this space since 2021, I am yet to meet a business that lets their marketing team own their status page.&lt;/p&gt;
    &lt;p&gt;You'll find most engineering teams will start owning a status page to centralise updates to their stakeholders, before eventually growing into the customer success/support org owning it to minimise support tickets during incidents.&lt;/p&gt;
    &lt;p&gt;I'm currently in the process of spinning up a k8s in us-west-2 and no issues, but, as others have said, us-east-1 is the problem child so I guess we'll see.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45722733"/><published>2025-10-27T16:16:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722826</id><title>JSON Query</title><updated>2025-10-27T17:37:34.443569+00:00</updated><content>&lt;doc fingerprint="481baa954fb0882b"&gt;
  &lt;main&gt;
    &lt;code&gt;name(argument1, argument2, ...)&lt;/code&gt;
    &lt;p&gt;A function is defined as a function name followed by comma separated arguments wrapped in round brackets. it is important to understand functions like &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, and &lt;code&gt;max&lt;/code&gt; are executed as a method in a chain: the operation is applied to the data input, and forwarded to the next method in the chain (if any).&lt;/p&gt;
    &lt;p&gt;Examples:&lt;/p&gt;
    &lt;code&gt;sort(.address.city, "asc")&lt;/code&gt;
    &lt;code&gt;filter(.age &amp;gt;= 21) | sort(.age, "asc")&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;p&gt;Function reference:&lt;/p&gt;
    &lt;code&gt;left operator right&lt;/code&gt;
    &lt;p&gt;JSON Query supports all basic operators. Operators must have both a left and right hand side. To override the default precedence, an operator can be wrapped in parentheses &lt;code&gt;(...)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Examples:&lt;/p&gt;
    &lt;code&gt;.age &amp;gt;= 18&lt;/code&gt;
    &lt;code&gt;filter(.age &amp;gt;= 18 and .age &amp;lt;= 65)&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;p&gt;Operator reference:&lt;/p&gt;
    &lt;code&gt;query2 | query2 | ...&lt;/code&gt;
    &lt;p&gt;A pipe is an array containing a series of queries. The queries in the pipeline are executed one by one, and the output of the first is the input for the next.&lt;/p&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;code&gt;filter(.age &amp;gt;= 18) | sort(.name)&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;code&gt;{prop1: query1, prop2: query2, ...}&lt;/code&gt;
    &lt;p&gt;An object is defined as a regular JSON object with a property name as key, and a query as value. Objects can be used to transform data or to execute multiple query pipelines in parallel.&lt;/p&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;code&gt;{
  names: map(.name),
  numberOfNames: size()
}&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;code&gt;[query1, query2, ...]&lt;/code&gt;
    &lt;p&gt;An array is defined as a regular JSON array: enclosed in square brackets, with items separated by a comma.&lt;/p&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;code&gt;filter(.city in ["New York", "Atlanta"])&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;code&gt;.prop1.prop2&lt;/code&gt;
    &lt;p&gt;A property retrieves a property from an object. Multiple consecutive properties will retrieve a nested property.&lt;/p&gt;
    &lt;p&gt;Examples:&lt;/p&gt;
    &lt;code&gt;.age&lt;/code&gt;
    &lt;code&gt;.address.city&lt;/code&gt;
    &lt;code&gt;"first name"&lt;/code&gt;
    &lt;code&gt;get()&lt;/code&gt;
    &lt;code&gt;get("address", "city")&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
    &lt;code&gt;"string", number, boolean, null&lt;/code&gt;
    &lt;p&gt;JSON Query supports the following primitive values, the same as in JSON: &lt;code&gt;"string"&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Examples:&lt;/p&gt;
    &lt;code&gt;"Hello world"&lt;/code&gt;
    &lt;code&gt;"Multi line text\nwith \"quoted\" contents"&lt;/code&gt;
    &lt;code&gt;42&lt;/code&gt;
    &lt;code&gt;2.74&lt;/code&gt;
    &lt;code&gt;-1.2e3&lt;/code&gt;
    &lt;code&gt;true&lt;/code&gt;
    &lt;code&gt;false&lt;/code&gt;
    &lt;code&gt;null&lt;/code&gt;
    &lt;p&gt;Documentation:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://jsonquerylang.org/"/><published>2025-10-27T16:22:52+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45722931</id><title>fnox, a secret manager that pairs well with mise</title><updated>2025-10-27T17:37:34.266472+00:00</updated><content>&lt;doc fingerprint="fb7f07660b59b4e"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Introducing fnox: A secret manager that pairs well with mise #6779&lt;/head&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;I'm excited to announce fnox – a new secret management tool designed to work seamlessly alongside mise in your development workflow.&lt;/p&gt;
          &lt;p&gt;While it's brand new, I have labeled it 1.0 since it seems pretty feature complete and given my experience with several experiments with secrets over the years with mise, I think will be a lot more stable than its young age would indicate.&lt;/p&gt;
          &lt;head&gt;What is fnox?&lt;/head&gt;
          &lt;p&gt;fnox (think "Fort Knox") is a command-line secret manager that handles encrypted and remote secrets for development, CI/CD, and production environments. It provides a unified interface for managing sensitive data through either local encryption or remote storage backends.&lt;/p&gt;
          &lt;head&gt;Why fnox?&lt;/head&gt;
          &lt;p&gt;While mise has built-in secret support (age encryption and sops), these work best for simple, file-based scenarios. For more complex production needs, fnox provides:&lt;/p&gt;
          &lt;head&gt;🚀 Developer-Friendly&lt;/head&gt;
          &lt;head&gt;👥 Team-Ready&lt;/head&gt;
          &lt;head&gt;Getting Started&lt;/head&gt;
          &lt;p&gt;Install fnox with mise:&lt;/p&gt;
          &lt;code&gt;$ mise use -g fnox
$ fnox --version&lt;/code&gt;
          &lt;p&gt;Create your first secret:&lt;/p&gt;
          &lt;code&gt;$ fnox init
$ fnox provider add age --id main --recipients ~/.ssh/id_ed25519.pub
$ fnox secret set API_KEY --value "your-secret-value" --provider main&lt;/code&gt;
          &lt;p&gt;Use secrets in your workflow:&lt;/p&gt;
          &lt;code&gt;# Export secrets as environment variables
$ fnox exec -- your-command

# Get a single secret
$ fnox get API_KEY

# Shell integration (auto-load secrets on cd)
$ fnox shell hook&lt;/code&gt;
          &lt;head&gt;How It Works with mise&lt;/head&gt;
          &lt;p&gt;fnox and mise work independently but complement each other:&lt;/p&gt;
          &lt;p&gt;A typical setup:&lt;/p&gt;
          &lt;code&gt;[env]
NODE_ENV = "development"
DATABASE_HOST = "localhost"

[tools]
node = "20"
fnox = "latest"&lt;/code&gt;
          &lt;code&gt;[providers.age]
type = "age"
recipients = ["age1ql3z7..."]

[secrets]
DATABASE_PASSWORD = { provider = "age", value = "AGE-SECRET-KEY..." }
API_KEY = { provider = "1password", ref = "op://dev/api/credential" }&lt;/code&gt;
          &lt;p&gt;Then use both together:&lt;/p&gt;
          &lt;code&gt;$ mise x -- fnox x -- npm start&lt;/code&gt;
          &lt;p&gt;Or you can activate one or the other in your shell to avoid that.&lt;/p&gt;
          &lt;head&gt;Why Separate Tools?&lt;/head&gt;
          &lt;p&gt;You might wonder why fnox isn't built into mise. The answer comes down to fundamental architectural constraints:&lt;/p&gt;
          &lt;p&gt;The Performance Problem: mise reloads its environment frequently (on directory changes, after commands, etc.). If secrets relied on remote calls to services like KMS or 1Password, each reload would require network requests, making mise unacceptably slow.&lt;/p&gt;
          &lt;p&gt;The Security Tradeoff: Caching could solve the performance issue, but introduces security risks:&lt;/p&gt;
          &lt;p&gt;The Architecture Challenge: Making mise skip reloading certain env vars would require a major architectural overhaul—a change that would complicate the codebase significantly.&lt;/p&gt;
          &lt;p&gt;By creating fnox as a separate tool with its own shell integration, we avoid these problems entirely. Each tool can focus on what it does best:&lt;/p&gt;
          &lt;head&gt;What's going to happen to mise secrets?&lt;/head&gt;
          &lt;p&gt;They're still marked as experimental so the future is technically up in the air. That said, mise does work well for age/sops encryption so I think it could probably come out of experimental. For now, I don't have plans to introduce remote secret backends like fnox provides.&lt;/p&gt;
          &lt;head&gt;Learn More&lt;/head&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/jdx/mise/discussions/6779"/><published>2025-10-27T16:29:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723159</id><title>JetKVM Is Now Available for Retail Purchase</title><updated>2025-10-27T17:37:33.967276+00:00</updated><content>&lt;doc fingerprint="b47d6010ec263c26"&gt;
  &lt;main&gt;
    &lt;p&gt;Next-Gen open-Source KVM over IP&lt;/p&gt;
    &lt;p&gt;Remote power and reset control of desktop computers.&lt;/p&gt;
    &lt;p&gt;Remote power management of DC powered devices.&lt;/p&gt;
    &lt;p&gt;Access device serial ports remotely through the JetKVM.&lt;/p&gt;
    &lt;p&gt;2025 BuildJet, Inc. - All rights reserved.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://jetkvm.com/products"/><published>2025-10-27T16:44:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723249</id><title>Life next to 199 data centres</title><updated>2025-10-27T17:37:33.764016+00:00</updated><content>&lt;doc fingerprint="f7c221812eff25f9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A humming annoyance or jobs boom? Life next to 199 data centres&lt;/head&gt;
    &lt;p&gt;When you cross into Loudoun County, Virginia, one of the first things you notice is the hum - that's the sound of 199 data centres whirring in the background.&lt;/p&gt;
    &lt;p&gt;Few people have heard of this inconspicuous part of northern Virginia, which also happens to be the wealthiest county in the US. But Loudoun was on everyone's radar earlier this week, when a massive global Amazon outage downed everything from crucial banking services to fun Snapchat streaks for millions.&lt;/p&gt;
    &lt;p&gt;That's because the county is home to the world's largest swath of data storage and processing facilities - even outpacing China.&lt;/p&gt;
    &lt;p&gt;Data centres - dedicated spaces for computer systems that help power the internet and artificial intelligence - are essential to our global connectivity.&lt;/p&gt;
    &lt;p&gt;But while they have proven to be a lucrative business - contributing billions to the local economy - some residents worry the cost comes at too high a price.&lt;/p&gt;
    &lt;p&gt;There are some 200 facilities taking up about 45 million square metres in Loudoun, giving the county the nickname Data Center Alley.&lt;/p&gt;
    &lt;p&gt;Data centres take up 3% of the total land area of the county and 40% of its budget.&lt;/p&gt;
    &lt;p&gt;And now more facilities are on their way.&lt;/p&gt;
    &lt;p&gt;Emily Kasabian was walking her newborn son along her picturesque neighbourhood road in Virginia earlier this year, when she saw something that stopped her in her tracks.&lt;/p&gt;
    &lt;p&gt;A sign for a proposed data centre moving in across the street.&lt;/p&gt;
    &lt;p&gt;Two years ago, when Ms Kasabian purchased her home she said she was relieved to be away from the data centres that have taken over other parts of the county. The lack of centres nearby was the reason many of her neighbours chose to live there, she said.&lt;/p&gt;
    &lt;p&gt;"I never thought that a data centre would be built across the street from my house," she said. "I would not have bought this house if I had known what was going in across the street."&lt;/p&gt;
    &lt;p&gt;The reason she, and so many others, are opposed to these large facilities is not just because of their overpowering appearance - a typical data centre can be 100,000 square feet, turning whole streets into large industrial blocks - but some of their side effects, too.&lt;/p&gt;
    &lt;p&gt;A massive bright blue concrete and glass data centre sits just steps from Greg Pirio's front door in Loudoun County. Thirteen years ago when he purchased his home that patch of land was filled with green trees and chirping birds.&lt;/p&gt;
    &lt;p&gt;Today, he deals with the centre’s impacts in real time - the one that bothers him the most is the noise pollution.&lt;/p&gt;
    &lt;p&gt;"There are no birds around here anymore," he said, noting the humming or buzzing noise the centre emits scares away a lot of wildlife from his area.&lt;/p&gt;
    &lt;p&gt;In addition to the noise concerns, people who live in the area expressed frustration with rising electricity bills.&lt;/p&gt;
    &lt;p&gt;In the past five years, wholesale electricity costs have gone up by as much as 267% in areas near data centres, an investigation by Bloomberg News found.&lt;/p&gt;
    &lt;p&gt;But while most locals the BBC spoke to opposed the data centres, the industry has many powerful proponents, including US President Donald Trump.&lt;/p&gt;
    &lt;p&gt;Data centres are essential to help grow the burgeoning industry of AI, a field that Trump has said he wants the United States to lead in.&lt;/p&gt;
    &lt;p&gt;His administration has said it will "accelerate federal permitting of data center infrastructure" to conjure "a golden age for America manufacturing and technology".&lt;/p&gt;
    &lt;p&gt;The centres can have big impacts on local and state economies, too. Annually, the data centre industry creates about 74,000 jobs, totalling $5.5bn (£4bn) in labour income to Virginia's economy, according to a state audit.&lt;/p&gt;
    &lt;p&gt;Loudoun County was among the first to see the potential, about a decade ago, and begin growing this new industry.&lt;/p&gt;
    &lt;p&gt;Developers realised the area was the perfect place for data centres - it was filled with flat, cheap land.&lt;/p&gt;
    &lt;p&gt;Local officials soon got on board and began giving corporations like Amazon and Google the green light to start building their facilities.&lt;/p&gt;
    &lt;p&gt;And the area had one more thing going for them in their quest to create a headquarters for a new burgeoning industry: the right talent.&lt;/p&gt;
    &lt;p&gt;"Northern Virginia was really at the centre for the growth of the internet, [it was] where AOL was headquartered, and so naturally they have the talent, they have the people already there, it was just easier to make [the data centres] there," cybersecurity expert Thomas Hyslip said.&lt;/p&gt;
    &lt;p&gt;Since the industry began booming rapidly earlier this century, regulations on the centres have been limited.&lt;/p&gt;
    &lt;p&gt;Virginia's Governor, Glenn Youngkin, vetoed state legislation that would have regulated the centres earlier this year.&lt;/p&gt;
    &lt;p&gt;Dan Diori, vice president of state policy at the Data Center Coalition, an industry group, said the industry needed to do a better job communicating the up-sides of these centres, and listening to people's concerns. But he doesn't think more regulation is necessary.&lt;/p&gt;
    &lt;p&gt;Data centres are not going anywhere, he said. They are and will continue to be the "backbone of the 21st Century economy".&lt;/p&gt;
    &lt;p&gt;But some residents, like Barbara Day, say people shouldn't have to choose between the economy and quality of life.&lt;/p&gt;
    &lt;p&gt;"These data centres are going up faster than we realised the implications of and then we're back-paddling to fix it," she said.&lt;/p&gt;
    &lt;p&gt;Market reports show that in August 2025, there were currently more than 1,100 data centres across the US, with almost 400 new centres being built.&lt;/p&gt;
    &lt;p&gt;Activists like Ms Kasabian hope to chip away at those numbers, by lobbying state and local legislatures to delay or pause projects.&lt;/p&gt;
    &lt;p&gt;"This is a beautiful great place to live, but if this type of development continues to happen and they allow it to encroach they are eroding what makes this a great place to live and we'll start to see the consequences of that soon unless we start to course correct in a very major way," she said.&lt;/p&gt;
    &lt;p&gt;The mother of two knows she may not win this battle and the data centres may soon appear across the street from her idyllic suburban neighbourhood, forcing her family to make the difficult decision to move.&lt;/p&gt;
    &lt;p&gt;"The question is, well, do we want to stay in the county, how do we know where we move next the same thing isn't going to happen?"&lt;/p&gt;
    &lt;p&gt;Video by Meiying Wu&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.bbc.com/news/articles/c93dnnxewdvo"/><published>2025-10-27T16:49:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723359</id><title>Why Busy Beaver Hunters Fear the Antihydra</title><updated>2025-10-27T17:37:33.333738+00:00</updated><content>&lt;doc fingerprint="eeaad01055b00fc9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why Busy Beaver Hunters Fear the Antihydra&lt;/head&gt;
    &lt;p&gt;In the summer of 2024, I reported on an online community that nailed down the precise value of a number called BB(5) — the first big breakthrough in 50 years on an old problem in theoretical computer science known as the busy beaver game. BB(5), now known to be 47,176,870, is the fifth of the so-called busy beaver numbers, which measure the complexity of the craziest computations that simple computer programs can complete.1The team recently released a paper describing their results in detail.&lt;/p&gt;
    &lt;p&gt;The next step in this idiosyncratic research effort is to identify the sixth busy beaver number BB(6), and there has been some notable progress on that front — I wrote a follow-up story about it a few months ago. But busy beaver researchers don’t expect to nail down the true value of BB(6) any time soon. That’s because doing so would require them to understand the behavior of a program with the awesome name “Antihydra,” which resembles a longstanding open problem in mathematics called the Collatz conjecture.2Antihydra should not be confused with the false hydra, a very cool and very terrifying monster conceived by D&amp;amp;D blogger Arnold Kemp. A twitter user sharing my first busy beaver story summed up this state of affairs more succinctly:&lt;/p&gt;
    &lt;p&gt;Both of my stories alluded to the Antihydra barrier only very briefly. In this blog post I will explore it in more detail: What exactly is Antihydra, what is the Collatz conjecture, how are they connected, and what makes them so daunting?&lt;/p&gt;
    &lt;head rend="h2"&gt;Busy Beaver Basics&lt;/head&gt;
    &lt;p&gt;If you haven’t already read my two Quanta stories about the busy beaver game, I recommend doing so before reading further, mainly just because they’re both really fun! Here I’ll recap how the busy beaver game works so that we’re all on the same page.&lt;/p&gt;
    &lt;p&gt;I wrote above that the busy beaver numbers “measure the complexity of the craziest computations that simple computer programs can complete.” To define them more precisely, we first need a mathematical framework for gauging the complexity of computer programs themselves, to decide which ones are “simple.” Then we need a way to quantify the complexity of computations — what computer programs do — so that we can identify the craziest ones.&lt;/p&gt;
    &lt;p&gt;In the busy beaver game, computer programs are represented by hypothetical devices called Turing machines, which compute in discrete steps by reading and writing 0s and 1s on an infinite tape divided into cells. A unique list of rules governs the behavior of each Turing machine. Anything you can do with an ordinary computer program, you can in principle do with the right set of Turing machine rules.3In the busy beaver literature, these rules are called “states.” “In principle” is doing a lot of work in this sentence — even if you managed to acquire the requisite infinite tape, computing with a Turing machine would be horrendously inefficient. But Turing machines are easier to analyze theoretically than more practical programming languages.&lt;/p&gt;
    &lt;p&gt;Let’s unpack how Turing machines work in a bit more detail. At each step, a Turing machine consults one of its rules and edits one cell on the tape. Each rule has two cases: what to do if the current cell contains a 0, and what to do if it contains a 1. “What to do” here means what to write in the current cell, which direction to move next, and which rule to consult for the next step. One case of one rule breaks this pattern: It tells the Turing machine to “halt,” or stop running. But by itself, the existence of this instruction doesn’t guarantee that a Turing machine will halt — the machine might never get there. Quanta’s visual designer Kristina Armitage encapsulated all of this in a beautiful infographic.4In my first Busy Beaver story, you will also find animations of Turing machines in action.&lt;/p&gt;
    &lt;p&gt;The number of rules that a Turing machine has will be our measure of program complexity. This choice lets us replace our vague question about the craziest things that simple computer programs can do with a series of specific questions about different degrees of craziness, corresponding to different busy beaver numbers. You learn the value of BB(1) by answering the question “what’s the most complex computation that a one-rule Turing machine can complete?” Likewise, BB(2) measures the most complex computation that a two-rule machine can complete, and so on.&lt;/p&gt;
    &lt;p&gt;To answer these questions, we need a precise definition of what makes one computation more complex than another. A natural measure is how many steps the Turing machine needs to complete the computation. “Complete” is important — every Turing machine that never halts will run for infinitely many steps, but that’s not really a fair comparison. The number of steps that a Turing machine takes before halting (and indeed, whether it halts at all) can depend on the initial pattern of 0s and 1s on the tape. For the busy beaver game, we always start from the so-called “blank tape,” which has 0s in every cell.&lt;/p&gt;
    &lt;p&gt;We now have all the necessary pieces to formally define the busy beaver numbers. Let’s take BB(6) to be specific: It is the longest finite runtime among all six-rule Turing machines, when those machines start with a blank tape. Finding this number is straightforward in principle. First, list out all possible six-rule Turing machines. Next, sort them into two categories: those that will eventually halt when they start running on the blank tape, and those that will run forever. Toss out all the non-halting machines. Finally, measure how many steps each of the halting machines takes before stopping. The largest number is BB(6).&lt;/p&gt;
    &lt;p&gt;The problem with this plan lies in the second step, where you divide the Turing machines into two groups based on whether or not they halt. It turns out that deciding whether a Turing machine will halt can be an extremely hard problem, to put it mildly. And if you can’t tell whether a given machine will halt, then you don’t know whether your list of halting Turing machines is complete, so you can’t know whether you’ve found the longest runtime! As of this writing, researchers have classified the vast majority of six-rule machines as either halting or non-halting. But there are 1,618 “holdouts” whose fate remains unknown.&lt;/p&gt;
    &lt;p&gt;Antihydra is one of these holdout machines. To nail down the value of BB(6), researchers must first determine whether Antihydra halts, and that seems to be beyond the reach of any known mathematical technique. To understand why, we need to take a step back and ask, “what exactly are these Turing machines doing?”&lt;/p&gt;
    &lt;head rend="h2"&gt;Leveling Up&lt;/head&gt;
    &lt;p&gt;You may object at this point that we already know exactly what these Turing machines are doing: Each one is just following a specific sequence of rules, writing 0s and 1s on the tape as it goes. But this “low-level” description is a bit like saying “when I push these buttons, my pocket calculator toggles transistors on and off in this specific pattern.” That may very well be true, but “high-level” descriptions like “when I push these buttons, my pocket calculator multiplies 3 and 4” are usually more useful.&lt;/p&gt;
    &lt;p&gt;There’s no guarantee that any given Turing machine’s behavior admits such a simple high-level description.5Also, in many cases low-level descriptions are perfectly adequate. For example, the easiest way to prove that a Turing machine halts is just to simulate it step by step until it stops running. When that happens, you don’t need a deeper understanding of why it halted: Just note its runtime and move on. But remember that Turing machines can carry out all possible computations — that means that at least some Turing machines must be executing programs with high-level descriptions that humans can understand.&lt;/p&gt;
    &lt;p&gt;Actually, the most notable five- and six-rule Turing machines that busy beaver researchers have studied so far all have relatively simple high-level descriptions — that includes the longest-running five- and six-rule machines that eventually halt, the most complex non-halting five-rule machines, and holdouts like Antihydra.6This is an empirical observation, not a self-evident truth. In fact, some researchers expected that the longest-running Turing machines would be “spaghetti code” machines that lack any high-level description!&lt;/p&gt;
    &lt;p&gt;Let’s look at a specific example. The fifth busy beaver, which runs for 47,176,870 steps before halting, obeys the following low-level rules:&lt;/p&gt;
    &lt;p&gt;In 1993, the mathematician Pascal Michel proved that these rules are equivalent to a simple high-level program:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Set \(x = 0\).&lt;/item&gt;
      &lt;item&gt;Divide \(x\) by 3 and check the remainder. &lt;list rend="ul"&gt;&lt;item&gt;If the remainder is 0, calculate \((5x + 18)/3\). The result is your new value of \(x\).&lt;/item&gt;&lt;item&gt;If the remainder is 1, calculate \((5x + 22)/3\). The result is your new value of \(x\).&lt;/item&gt;&lt;item&gt;If the remainder is 2, halt.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;If you haven’t halted, go back to step 2 and plug in the new value of \(x\).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once you have a high-level description like this, you can use it to determine whether the machine will halt — and if so, exactly how many steps it will take.7Each step in a high-level program like this one corresponds to many individual Turing machine steps. Whenever you prove an equivalence between high-level and low-level descriptions, you get formulas that you can use to compute how long each high-level step will take. I won’t say anything about how to actually prove these equivalences. In this case, the high-level program just repeatedly plugs in new values of \(x\) until it finds one that leaves a remainder of 2 when divided by 3. One third of numbers have this property, so you might guess that the program will take three tries to find one, give or take a few. If you start from a random value of \(x\), you’ll find that three iterations is indeed typical. But it turns out that if you start from \(x = 0\), this program will repeat the second step 15 times before it lands on a number with remainder 2! Busy beaver researchers often like to anthropomorphize the Turing machines they study, imagining that the machines are actively trying to run for as long as possible. Adopting that perspective, we might say that this Turing machine got very lucky.&lt;/p&gt;
    &lt;p&gt;The fifth busy beaver is just one member of a family of “Collatz-like” Turing machines whose high-level behavior has the following general form:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Set \(x\) equal to some starting value (which may or may not be 0).&lt;/item&gt;
      &lt;item&gt;Divide \(x\) by a fixed number \(N\). The remainder tells you what formula to use to get your new value of \(x\).&lt;/item&gt;
      &lt;item&gt;Check if you’ve met a specific halting condition. If not, go back to step 2 with the new value of \(x\).8As we saw in the above example, the halting condition can be as simple as “the remainder has a specific value.” Below we’ll see some examples with different halting conditions.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The family of Collatz-like Turing machines includes both halting and non-halting machines. It gets its name from a procedure for generating number sequences devised in 1937 by the mathematician Lothar Collatz:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Choose a starting value for \(x\).&lt;/item&gt;
      &lt;item&gt;Check whether \(x\) is even or odd. &lt;list rend="ul"&gt;&lt;item&gt;If it’s even, calculate \(x/2\). The result is your new value of \(x\).&lt;/item&gt;&lt;item&gt;If it’s odd, calculate \(3x + 1\). The result is your new value of \(x\).&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Check whether \(x = 1\). If not, go back to step 2.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This looks very similar to our general description of high-level behavior for Collatz-like machines, with \(x = 1\) as the halting condition.9“Check whether \(x\) is even or odd” is just another way of saying “divide \(x\) by 2 and check the remainder.” Strictly speaking, we don’t have to specify that the sequence stops when \(x = 1\). But if we keep applying the rules after it hits 1, the sequence enters an infinite loop: 1 &amp;gt; 4 &amp;gt; 2 &amp;gt; 1 and so on. Try iterating these rules from any initial integer value of \(x\) — I’m willing to bet however much you like that you’ll eventually hit 1. The Collatz conjecture asserts that this happens for every positive integer, no matter how large. People have tested this empirically for all integers up to at least 2 billion trillion (!) without finding any counterexamples, which strongly suggests that the conjecture is true. But nobody knows how to rigorously prove it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Cryptozoology&lt;/head&gt;
    &lt;p&gt;Let’s take a step back. At the beginning of this post I noted a link between the Collatz conjecture and Antihydra: Nobody knows how to prove the Collatz conjecture, and that’s why researchers don’t know how to conclusively determine whether Antihydra halts. But now I’ve instead linked the Collatz conjecture to the fifth busy beaver, a machine that has been proved to halt. What’s going on here?&lt;/p&gt;
    &lt;p&gt;The resolution to this apparent puzzle is that for the busy beaver game, we only care about whether a Turing machine halts when it starts running from a specific tape configuration, namely the blank tape. That means we only care about whether the corresponding Collatz-like sequence halts for a single input. The Collatz conjecture, meanwhile, asks whether you eventually hit \(x = 1\) for every input. It’s easy to show that the Collatz sequence ultimately hits \(x = 1\) for any one input, just as it’s easy to show that the fifth busy beaver halts (once you’ve established an equivalence between its low-level rules and the high-level Collatz-like program).10As it happens, the busy beaver hunters Heiner Marxen and Jürgen Buntrock first proved that the fifth busy beaver halted by direct simulation (albeit with some tricks to speed things up). Michel only identified its high-level behavior after the fact.&lt;/p&gt;
    &lt;p&gt;We can easily construct a variant of the Collatz problem that’s hard to solve even for a single input. All we need to do is change the \(3x + 1\) rule for odd numbers to \(5x + 1\). In that case, trajectories that start from certain inputs (such as \(x = 7\)) look like they will diverge, never hitting 1 or falling into a cycle. But researchers haven’t been able to prove that any of these trajectories diverges. There’s an inherent asymmetry here. If you want to prove that a sequence does eventually end up somewhere, you can always just use brute force, at least in principle. But if you want to prove that a sequence never terminates, even a single input can be hard.&lt;/p&gt;
    &lt;p&gt;We’re now finally ready to confront the terror that is Antihydra. It obeys the following high-level rules:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Set \(x = 8\).11This may seem like a weird starting point, given that we’re supposed to start with the blank tape in the busy beaver game. That’s still true here — it’s just that Antihydra spends a while futzing around on the tape before it starts iterating this sequence, and the high-level effect of all that futzing is to set the starting value to 8.&lt;/item&gt;
      &lt;item&gt;Check whether \(x\) is even or odd. &lt;list rend="ul"&gt;&lt;item&gt;If it’s even, calculate \(3x/2\). The result is your new value of \(x\). Add one to a running tally of how many times you’ve applied this even rule.&lt;/item&gt;&lt;item&gt;If it’s odd, calculate \((3x-1)/2\). The result is your new value of \(x\). Add one to a running tally of how many times you’ve applied this odd rule.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Check whether your “odd” count is more than twice as large as your “even” count. If so, halt. If not, go back to step 2.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This is a very curious set of rules. The formulas \(3x/2\) and \((3x-1)/2\) don’t appear to systematically favor odd or even numbers, so you might expect that iterating them again and again will look like repeatedly flipping a coin and keeping track of how often you get heads versus tails. Early on in a sequence of coin flips, it’s distinctly possible that you’ll end up with more than twice as many heads as tails. But if this doesn’t happen right away, it becomes less and less likely the longer you keep going. Researchers have now simulated the behavior of Antihydra out to more than 270 billion steps, and as expected, the “even” and “odd” tallies are pretty close to equal — nowhere near the extreme imbalance demanded by the halting condition. So it seems overwhelmingly likely that Antihydra never halts. But nobody knows how to prove it! The mathematician John Conway coined the delightful term “probviously” for situations like this — ones where the specific problem of interest is very hard to solve, but probabilistic reasoning about the “typical” behavior of similar problems makes the answer seem obvious.&lt;/p&gt;
    &lt;p&gt;Antihydra’s behavior is qualitatively similar to the \(5x + 1\) version of the Collatz conjecture, where we don’t know how to prove that any single trajectory diverges. I want to stress that as far as researchers know, there isn’t a more precise mathematical link between these two problems: If you resolved one of them, it wouldn’t automatically resolve the other. But the problems seem hard for very similar reasons. If someone does manage to prove the Collatz conjecture, the mathematical techniques used in the proof would likely be promising for the Antihydra problem (and vice versa).&lt;/p&gt;
    &lt;p&gt;Actually, Antihydra is just one of many probviously non-halting Turing machines with Collatz-like behavior. Busy beaver hunter Shawn Ligocki dubbed these machines “cryptids” when they were first identified in variants of the standard busy beaver game.12These variants use extra tape symbols in addition to 0 and 1. For example, the BB(3,3) version of the busy beaver game studies the behavior of Turing machines with three rules that can read and write three symbols: 0, 1, and 2.&lt;/p&gt;
    &lt;p&gt;The first two cryptids to be discovered were named Bigfoot and Hydra;13Antihydra was named for a mathematical connection to Hydra. researchers have now identified so many cryptids that it no longer makes sense to give each one its own name. The existence of all these cryptids implies that busy beaver numbers beyond BB(5) will remain out of reach until researchers develop new mathematical tools for tackling Collatz-like problems. And the legendary mathematician Paul Erdős reportedly said “Mathematics may not be ready for such problems.”&lt;/p&gt;
    &lt;p&gt;But that doesn’t mean busy beaver hunters should give up. There’s still plenty of questions to explore in what might be called “cryptid ecology.” How many subspecies of cryptids are there? How are they related to each other, and to other unsolved problems in mathematics beyond the Collatz conjecture? Since the beginning of the busy beaver game, avid hunters have repeatedly encountered surprising new Turing machine behavior, and that pattern shows no sign of letting up.&lt;/p&gt;
    &lt;p&gt;This past August I visited Tahquamenon Falls in Michigan’s upper peninsula, a part of the state that’s apparently an epicenter of bigfoot sightings. Fortunately I didn’t encounter any cryptids, but I did learn some new things about a few friendlier critters. Surprising discoveries can come from anywhere!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://benbrubaker.com/why-busy-beaver-hunters-fear-the-antihydra/"/><published>2025-10-27T16:56:04+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723426</id><title>Sieve (YC X25) Is Hiring Engineers to build video datasets for frontier AI</title><updated>2025-10-27T17:37:33.127586+00:00</updated><content>&lt;doc fingerprint="7d518f497b3a37b"&gt;
  &lt;main&gt;
    &lt;p&gt;High quality video data for AI applications.&lt;/p&gt;
    &lt;p&gt;500K hours of high quality, diverse video clips.&lt;/p&gt;
    &lt;p&gt;Contact us to request a sample or explore more options.&lt;/p&gt;
    &lt;p&gt;Purpose-built video understanding models paired with human QA help find just the highest quality, training-ready data.&lt;/p&gt;
    &lt;p&gt;Our growing library consists of thousands of petabytes of video data.&lt;/p&gt;
    &lt;p&gt;Video is collected from a variety of public, private, and synthetic sources.&lt;/p&gt;
    &lt;p&gt;New data shapes to unlock new model capabilities (paired, time-synced, conversational, and more).&lt;/p&gt;
    &lt;p&gt;Contact us to request a sample or explore more options.&lt;/p&gt;
    &lt;p&gt;Purpose-built video understanding models paired with human QA help find just the highest quality, training-ready data.&lt;/p&gt;
    &lt;p&gt;Our growing library consists of thousands of petabytes of video data.&lt;/p&gt;
    &lt;p&gt;Video is collected from a variety of public, private, and synthetic sources.&lt;/p&gt;
    &lt;p&gt;New data shapes to unlock new model capabilities (paired, time-synced, conversational, and more).&lt;/p&gt;
    &lt;p&gt;Explore pre-packaged datasets to determine which you are interested in.&lt;/p&gt;
    &lt;p&gt;Enter a purchase agreement based on dataset volume and characteristics.&lt;/p&gt;
    &lt;p&gt;Receive data within 1-2 days via storage bucket access.&lt;/p&gt;
    &lt;p&gt;Scalable API&lt;/p&gt;
    &lt;p&gt;Built to process millions of hours of video at any given moment.&lt;/p&gt;
    &lt;p&gt;Compliant&lt;/p&gt;
    &lt;p&gt;Request specific filtering and licensing needs to ensure full permission and compliance of your training data.&lt;/p&gt;
    &lt;p&gt;Dedicated partnership&lt;/p&gt;
    &lt;p&gt;We partner deeply with every research team to understand their needs and develop data with the same rigor they develop models.&lt;/p&gt;
    &lt;p&gt;Secure&lt;/p&gt;
    &lt;p&gt;End-to-end encryption, custom data retention, and SOC 2 Type 2 secured.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.sievedata.com/"/><published>2025-10-27T17:01:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723533</id><title>Show HN: Git Auto Commit (GAC) – LLM-powered Git commit command line tool</title><updated>2025-10-27T17:37:32.963015+00:00</updated><content>&lt;doc fingerprint="a4346c4380a8f88e"&gt;
  &lt;main&gt;
    &lt;p&gt;LLM-powered commit messages that understand your code.&lt;/p&gt;
    &lt;p&gt;Tired of writing commit messages? Replace &lt;code&gt;git commit -m "..."&lt;/code&gt; with &lt;code&gt;gac&lt;/code&gt; for contextual, well-formatted commit messages generated by large language models.&lt;/p&gt;
    &lt;p&gt;Intelligent, contextual messages that explain the why behind your changes:&lt;/p&gt;
    &lt;code&gt;uvx gac init  # Configure your LLM provider
uvx gac  # Generate and commit with LLM&lt;/code&gt;
    &lt;p&gt;That's it! Review the generated message and confirm with &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;uv tool install gac
gac init
gac&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Anthropic • Cerebras • Chutes.ai • Fireworks • Gemini&lt;/item&gt;
      &lt;item&gt;Groq • LM Studio • Ollama • OpenAI • OpenRouter&lt;/item&gt;
      &lt;item&gt;Streamlake • Synthetic.new • Together AI • Z.AI • Z.AI Coding&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Understands intent: Analyzes code structure, logic, and patterns to understand the "why" behind your changes, not just what changed&lt;/item&gt;
      &lt;item&gt;Semantic awareness: Recognizes refactoring, bug fixes, features, and breaking changes to generate contextually appropriate messages&lt;/item&gt;
      &lt;item&gt;Intelligent filtering: Prioritizes meaningful changes while ignoring generated files, dependencies, and artifacts&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;One-liner (-o flag): Single-line commit message following conventional commit format&lt;/item&gt;
      &lt;item&gt;Standard (default): Summary with bullet points explaining implementation details&lt;/item&gt;
      &lt;item&gt;Verbose (-v flag): Comprehensive explanations including motivation, technical approach, and impact analysis&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Interactive feedback: Regenerate messages with specific requests like &lt;code&gt;r "make it shorter"&lt;/code&gt;or&lt;code&gt;r "focus on the bug fix"&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;One-command workflows: Complete workflows with flags like &lt;code&gt;gac -ayp&lt;/code&gt;(stage all, auto-confirm, push)&lt;/item&gt;
      &lt;item&gt;Git integration: Respects pre-commit and lefthook hooks, running them before expensive LLM operations&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Automatic secret detection: Scans for API keys, passwords, and tokens before committing&lt;/item&gt;
      &lt;item&gt;Interactive protection: Prompts before committing potentially sensitive data with clear remediation options&lt;/item&gt;
      &lt;item&gt;Smart filtering: Ignores example files, template files, and placeholder text to reduce false positives&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Stage your changes
git add .

# Generate and commit with LLM
gac

# Review → y (commit) | n (cancel) | r (reroll)&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Command&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Generate commit message&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -y&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Auto-confirm (no review needed)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -a&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Stage all before generating commit message&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -o&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;One-line message for trivial changes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -v&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Verbose format with Motivation, Technical Approach, and Impact Analysis&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -h "hint"&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Add context for LLM (e.g., &lt;code&gt;gac -h "bug fix"&lt;/code&gt;)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -s&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Include scope (e.g., feat(auth):)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;gac -p&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Commit and push&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;code&gt;# Complete workflow in one command
gac -ayp -h "release preparation"

# Detailed explanation with scope
gac -v -s

# Quick one-liner for small changes
gac -o

# Debug what the LLM sees
gac --show-prompt

# Skip security scan (use carefully)
gac --skip-secret-scan&lt;/code&gt;
    &lt;p&gt;Not happy with the result? Use the reroll feature for intelligent regeneration:&lt;/p&gt;
    &lt;code&gt;# Simple reroll
r

# With specific feedback
r make it shorter and focus on the performance improvement
r use conventional commit format with scope
r explain the security implications&lt;/code&gt;
    &lt;p&gt;Run &lt;code&gt;gac init&lt;/code&gt; to configure your provider interactively, or set environment variables:&lt;/p&gt;
    &lt;code&gt;# Example configuration
GAC_MODEL=anthropic:your-model-name
OPENAI_API_KEY=your_key_here
ANTHROPIC_API_KEY=your_key_here&lt;/code&gt;
    &lt;p&gt;See &lt;code&gt;.gac.env.example&lt;/code&gt; for all available options.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Full documentation: USAGE.md - Complete CLI reference&lt;/item&gt;
      &lt;item&gt;Troubleshooting: TROUBLESHOOTING.md - Common issues and solutions&lt;/item&gt;
      &lt;item&gt;Contributing: CONTRIBUTING.md - Development setup and guidelines&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Made with ❤️ for developers who want better commit messages&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/cellwebb/gac"/><published>2025-10-27T17:07:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723554</id><title>Avoid 2:00 and 3:00 am cron jobs (2013)</title><updated>2025-10-27T17:37:32.677101+00:00</updated><content>&lt;doc fingerprint="fe50537ca9a4b4f6"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Avoid 2:00 and 3:00 am cron jobs!&lt;/head&gt;
    &lt;p&gt;A word to the wise: Do not set any cron jobs for 2:00 am or 3:00 am on Sunday morning! Or to be safe, on other mornings besides Sunday as well, since jobs originally set to run on some particular day may eventually be changed to run on another day, or every day.&lt;/p&gt;
    &lt;p&gt;Most of the time such cron jobs will run fine, but if they run every Sunday morning, then twice per year they will run at the exact time daylight savings time (aka summer time) kicks in or ends, sometimes with very strange results.&lt;/p&gt;
    &lt;p&gt;On Linux with vixie-cron we saw two cron jobs run something like once per second between 3:00 and 3:01 when the most recent daylight savings time began. Thus they ran about 60 times, stepping all over each other and making a noisy mess in email. No serious harm was done, but thatâs only because they were not tasks capable of causing serious harm.&lt;/p&gt;
    &lt;p&gt;Feel free to wish for or agitate for or fund or write a better open source job scheduler that everyone will use, one that will ensure no overlapping runs, allow specifying time limits, etc. Better tools exist, but until one of them achieves cronâs level of ubiquity, we have to live with cron at least some places and sometimes.&lt;/p&gt;
    &lt;p&gt;Alternatively, where possible set the server timezone to UTC so that no daylight savings changes will happen at all.&lt;/p&gt;
    &lt;p&gt;Or most preferable: Governments of the world, stop the twice-yearly dance of daylight saving time altogether.&lt;/p&gt;
    &lt;p&gt;But in the meantime this particular problem can be entirely avoided by just not scheduling any cron jobs to run on Sunday morning at 2:00 or 3:00 server time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.endpointdev.com/blog/2013/04/avoid-200-and-300-am-cron-jobs/"/><published>2025-10-27T17:08:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723558</id><title>Artificial Writing and Automated Detection [pdf]</title><updated>2025-10-27T17:37:31.971053+00:00</updated><content/><link href="https://www.nber.org/system/files/working_papers/w34223/w34223.pdf"/><published>2025-10-27T17:09:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723828</id><title>Let the little guys in: A context sharing runtime for the personalised web</title><updated>2025-10-27T17:37:31.584944+00:00</updated><content>&lt;doc fingerprint="af2d18541f732779"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Let the little guys in: &lt;lb/&gt; Towards a context sharing runtime for the personalised web&lt;/head&gt;
    &lt;p&gt;It’s easier than ever to build small tools. Npm, with 63 billion javascript package downloads in the last week, is a great example of the magic that happens when we can easily fork, share, find, use &amp;amp; compose small tools. It’s also a great example of what it’s missing - it’s hard to trust. Would you trust a new little wrapper or package with all of your bank statements, emails, and ChatGPT history?&lt;/p&gt;
    &lt;p&gt;Today, context is king, and OAuth dialogs are not enough to enable world-wide-web like participation in it.&lt;/p&gt;
    &lt;p&gt;Here’s another idea: Instead of tightly controlling which applications have access to data, we need to control where applications can send it.&lt;/p&gt;
    &lt;p&gt;And in that (attestable) image, a new runtime environment is being forged. Not by me, but I buy into it, and I write this hoping that you might too.&lt;/p&gt;
    &lt;p&gt;Onto the first premise:&lt;/p&gt;
    &lt;head rend="h2"&gt;We’re far from realising the potential of computing&lt;/head&gt;
    &lt;p&gt;To really appreciate that potential, let’s imagine what it might feel like to have realised it.&lt;/p&gt;
    &lt;p&gt;Here’s one handle for your imagination: Imagine if ChatGPT worked perfectly, connected to everything, and knew everything about you.&lt;/p&gt;
    &lt;p&gt;Of course, you have to use your imagination there. ChatGPT is far from perfect. And…it never will be. In terms of sheer LLM horsepower, its ability to benefit from more parameters, and more thinking tokens, to think better and make up stuff less - we seem to be plateauing. As was the case for human beings ~300,000 years ago, the economics for making the brain bigger has basically stopped making sense.&lt;/p&gt;
    &lt;p&gt;So here’s the second handle for your imagination. Think of the last app you used. You have it? Great.&lt;/p&gt;
    &lt;p&gt;Now imagine you could in an instant, transform that app in any way you could imagine, to be better for you.&lt;/p&gt;
    &lt;p&gt;It’s quite a thing to think about. It is fun, so I would recommend it if you can spare some brain. Type your app here to seed some ideas.&lt;/p&gt;
    &lt;p&gt;For me, it was my Banking app. Here are some features I’d want:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;As above, I want my banking app to insert a little expandable badge beside every “pay” button in my web browser, where it tells me how my current cart or purchase is going to affect my budget or balance. This seems like obviously good UX. In games, I’ve never seen a shop interface that doesn’t show you your remaining cash balance - imagine how weird and bad it would be if you only got a notification after the fact.&lt;/item&gt;
      &lt;item&gt;I want to read a couple sentence summary each month that describes how that month’s gone, with respect to my long term financial goals - and any interesting spending trends that have emerged.&lt;/item&gt;
      &lt;item&gt;I want the ability to ask my bank things. For example: “how much did my cost of living change after moving to cape town?” or: “since I started seeing a dietician last year, how has that affected my spend on food?” or: “how much has my padel habit cost me?”&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The features you’d want, might differ a lot! For example, maybe you’re better than me at budgeting and have different categories that you want to classify, by linking bank statement line items with the contents of order breakdowns in your email.&lt;/p&gt;
    &lt;p&gt;The point is - the ceiling is high, and we are a long way from it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why aren’t we further along?&lt;/head&gt;
    &lt;p&gt;Well, to meet all your unmet computing needs, you need a bunch more code, right?&lt;/p&gt;
    &lt;p&gt;Given how hard it’s been to write code, we’ve largely outsourced the writing of it to a group of experts, within sprawling software companies, who are doing their best to Eat the World, with a side of Our Data, but who will never get around to their P3 backlog.&lt;/p&gt;
    &lt;p&gt;I don’t think my banking app will give me those features, ever.&lt;/p&gt;
    &lt;p&gt;And it’s not just the low priority stuff that companies are reticent to build.&lt;/p&gt;
    &lt;head rend="h3"&gt;We have different incentives to companies&lt;/head&gt;
    &lt;p&gt;Where our needs as a user intersect well with the making of profits…we are extremely well served. The size of this intersection is basically the extent of product-market fit. Companies tend to be amazing at: “Make it convenient for me to buy my first thing…and what else can you conveniently bundle in?”&lt;/p&gt;
    &lt;p&gt;Some needs are ignored - because code-writing capacity is finite, and pandering to niche user needs violates the pareto principle. Hotels will jump to put a mini-bar inside your room, but if that’s the only place you can get snacks, you’ll never have wasabi peas.&lt;/p&gt;
    &lt;p&gt;Some needs are actively suppressed: "Make it easy for me to opt out…from your service, from a part of your service, or just from consuming too much”.&lt;/p&gt;
    &lt;head rend="h3"&gt;We don’t have to rely on companies to write code&lt;/head&gt;
    &lt;p&gt;We already rely a lot on open source for our most crucial code - at the heart of our operating systems.&lt;/p&gt;
    &lt;p&gt;For example, here is the source code of Android, which is almost 200 million lines of code, and which stands on the shoulders of other open source projects like Linux (which runs most computers in the Cloud).&lt;/p&gt;
    &lt;p&gt;Most linux development today is funded via for-profit companies, who benefit from Linux meeting their or their customers needs. But the first version was made by one dude to meet his own needs, who posted it on a forum.&lt;/p&gt;
    &lt;p&gt;Today, facilitated by LLM’s, many more people can write little scripts to meet their own needs. Via open source, that code can be cleaned up and grow to meet bigger needs, for bigger audiences. We can also make little edits to the code to fit our own needs.&lt;/p&gt;
    &lt;p&gt;But open source software is often outcompeted by closed source software. There’s a reason why people use MS office or Google to make a ~~powerpoint~~ presentation, and not the many attempts at open source alternatives. Sometimes, the polish required for these products is boring and difficult. Open source software is good for interesting things. Vibe coding is good for small things.&lt;/p&gt;
    &lt;p&gt;So ideally, we want to be able to take code from all 3 places and combine them, via small wrappers, into more need-meeting, tailor-made software.&lt;/p&gt;
    &lt;p&gt;But code is only as useful as the information it has access to. And so access to information has become the limiting reagent in our computing.&lt;/p&gt;
    &lt;p&gt;This is especially the case with the new capabilities we have from LLM’s, to understand the depth of our own context and provide a whole new level of output tailoring.&lt;/p&gt;
    &lt;head rend="h3"&gt;Most of our data is sitting inside a few companies&lt;/head&gt;
    &lt;p&gt;Remember when we used to call Applications “Programs”? Back then, they were just executable code that we’d run on our own computer.&lt;/p&gt;
    &lt;p&gt;Then we started owning multiple computers (including a pocket-sized one!), the Cloud formed, and javascript gave us web applications.&lt;/p&gt;
    &lt;p&gt;So what started as outsourcing code, became outsourcing the actual computing, and most of our data storage, to companies, who could offer the convenience and profitability of a 1-stop-computing-shop.&lt;/p&gt;
    &lt;p&gt;Today’s output becomes tomorrow’s input! So that data grows and grows, inside the same handful of big companies.&lt;/p&gt;
    &lt;p&gt;It seems to work for us too.&lt;/p&gt;
    &lt;p&gt;We prefer a handful of companies - because the fewer apps that have our data, the less likely exposed we feel.&lt;/p&gt;
    &lt;p&gt;We prefer big companies - because there is safety in numbers.&lt;/p&gt;
    &lt;p&gt;While anti-monopolistic regulation encourages better access to that data…that can only move the market so much.&lt;/p&gt;
    &lt;p&gt;And so:&lt;/p&gt;
    &lt;head rend="h3"&gt;Trust is our computing bottleneck&lt;/head&gt;
    &lt;p&gt;While it’s possible for my bank to implement these features, it’s probably not going to get them to me any time in the next few years (despite all the “AI enablement” and “agentic transformation” going on there lol).&lt;/p&gt;
    &lt;p&gt;It’s actually also possible for these features to be coded up and bolted on, without needing anything from the bank.&lt;/p&gt;
    &lt;p&gt;But it’s too much work for me to code for myself - probably more work than me just looking at my own bank statements.&lt;/p&gt;
    &lt;p&gt;If someone else made a product (that I trusted), I’d pay for it.&lt;/p&gt;
    &lt;p&gt;If there was an open source product, that was easy to use (that I trusted), I would use it. I might even write a compatibility layer for my own South African bank’s statements.&lt;/p&gt;
    &lt;p&gt;I’m open to having it done via integration with ChatGPT too - using their new apps, which could integrate with a new web app and its associated browser extension, to enable these features.&lt;/p&gt;
    &lt;p&gt;But - it doesn’t exist. And the fundamental reason why… is a lack of trust.&lt;/p&gt;
    &lt;p&gt;The new app would need direct access to your bank statements, emails, and chatbot history, and the content of every page you visit on your browser. It is way too hard for an upstart, even with a community behind them, to command the requisite trust.&lt;/p&gt;
    &lt;p&gt;Let’s not be hand-wavey about it - and be more precise what this web app would need to be entrusted to do.&lt;/p&gt;
    &lt;p&gt;(Expand to see why / how)&lt;/p&gt;
    &lt;head&gt;It needs to search through my email&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? When I buy something from amazon, it could be dog food or it could be a drone. Those feel like different spend categories. My email can be used to disambiguate this. Or it could just be used to receive bank statements.&lt;/item&gt;
      &lt;item&gt;How? For each bank item, search my email, and categorise it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It needs to pull in all my bank statements&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? It's the source of truth&lt;/item&gt;
      &lt;item&gt;How? This either needs to come in by digesting my monthly bank statement that's emailed, or using some third party API (like yodlee). Yodlee is expensive - but not that complicated. Under the hood, it literally just uses web scraping.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It need to categorise each line item and save it to a database&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? The classification is too heavy to rerun every time data is required. It requires searching through emails. It might even require the user to label things.&lt;/item&gt;
      &lt;item&gt;How? A simple SQL database would do just fine&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It needs understanding of my life - ideally from ChatGPT&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? I need to be able to correlate my financial data back to my life, including when I moved to cape town, where I went on holiday. This is all currently deducable from ChatGPT conversations. (WhatsApp could also work).&lt;/item&gt;
      &lt;item&gt;How? This is hard! There is no API access to conversations from ChatGPT. So the only way to do this, is to build a ChatGPT integration - to cross their moat on their terms, which is to have GPT-5 ferry across the data for you. So we can see that OpenAI is terribly misaligned with our needs here (and wait until the Ads!)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It needs a user interface that contains chat…but not only chat&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? Chat is not the best place to edit your financial goals - even though it might be a great way to set them via a journalling-like flow. It's not the best place to view a dashboard.&lt;/item&gt;
      &lt;item&gt;How? It needs to include a normal web app&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It needs a browser extension that can show my remaining balance&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? A browser extension can understand every page you're on, and show an overlay&lt;/item&gt;
      &lt;item&gt;How? It would use some a small model to parse the HTML of every page. It would edit the HTML to show a balance overlay, and a little show notification on its little icon to provide evidence that it's the thing showing the overlay.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head&gt;It needs to not feel self hosted&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Why? The point of this whole thing is make our lives easier.&lt;/item&gt;
      &lt;item&gt;How? It's tricky…because if it's not self hosted, who are you going to trust with all this data?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Our patterns for computing with sensitive data make this unfeasible.&lt;/p&gt;
    &lt;p&gt;Sometimes, like with ChatGPT conversations, we don’t have a key to the big company vaults where we keep our data safe.&lt;/p&gt;
    &lt;p&gt;And even when there is access via key, like with gmail, we must be very discerning before clicking “yes” on an OAuth Dialog; minting a new key for that little banking add-on is quite a big risk.&lt;/p&gt;
    &lt;p&gt;Because once access is granted, it can never really be revoked. In the unlikely event that you do remember to change the locks after you retire the add-on, it could still retain your data. Because when the add-on has a key to your vault - even read-only access, it is impossible to know what they’ll do with the data inside it. They can copy it. They can share it. They can sell it.&lt;/p&gt;
    &lt;p&gt;Yes, some of that’s illegal. But possession is 9/10ths of the law, and they have possession of our data. The courts are too weak to meaningfully enforce what web apps do, world-wide.&lt;/p&gt;
    &lt;p&gt;And the world-wideness of the web so useful, so formidable, and so precious; it’s given us 4 billion websites, many of them created by The Little Guys. In the era of LLM’s and of a hyper-personalised private web, we need to find a way for The Little Guys to be trusted enough with our data, to do their magic.&lt;/p&gt;
    &lt;head rend="h2"&gt;Enforcing conditions is better than handing out keys&lt;/head&gt;
    &lt;p&gt;Instead of choosing who to trust unconditionally with our data…why don’t we introduced a few conditions? With the right conditions, we can lower the bar enough to be open to the public, and all the well intentioned Little Guys.&lt;/p&gt;
    &lt;p&gt;We need a runtime environment with right conditions. The internet already got this far, via a well selected runtime environment: the browser’s javascript engine. Because of it, you can click a link, without thinking twice, and run code written by who-knows-who from who-knows-where on the world-wide-web, on your own personal computer, which has all kinds of sensitive information on it.&lt;/p&gt;
    &lt;p&gt;We need to add another runtime environment, with the right conditions. All your data should be moved into that runtime environment - so there is a well organised buffet available to any program you elect to click on.&lt;/p&gt;
    &lt;p&gt;What are the right conditions?&lt;/p&gt;
    &lt;p&gt;There is only one.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;You are not allowed to transmit or store my sensitive information anywhere (unless I give my consent).&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Under this condition, sensitive information taints other information, as if it’s radioactive. Any other information it affects becomes sensitive itself, whether it’s an intermediate variable or a final output.&lt;/p&gt;
    &lt;p&gt;Isn’t that too restrictive?&lt;/p&gt;
    &lt;p&gt;Most code today is riddled with network requests. How can code shared with us be useful without them? Where is it supposed to send its output?&lt;/p&gt;
    &lt;p&gt;The code can still make network requests; it just can’t include sensitive data inside those network requests.&lt;/p&gt;
    &lt;p&gt;And it can still derive outputs, and store the outputs…within the runtime environment, which has its own encrypted database. That output, like all other sensitive information, can be decrypted by and revealed to the authenticated user, in any custom format. That format could be a web app. It could even be browser overlay on amazon.com…in a very clear, ringfenced way.&lt;/p&gt;
    &lt;p&gt;How do we enforce the conditions?&lt;/p&gt;
    &lt;p&gt;“Consent” isn’t some flaccid banner blocking half the landing page; it must be demonstrably impossible to circumvent. To do this, we need to invoke two fairly low-key computing patterns&lt;/p&gt;
    &lt;p&gt;First, we need a reliable way to tell which information has been tainted as sensitive. For that, we turn to the field of Information flow, where there are well established mechanisms to evaluate the taint, in modern languages like javascript.&lt;/p&gt;
    &lt;p&gt;Then, we need a publicly verifiable proof that the runtime environment housing the information and running the code is actually enforcing the conditions as it promises - no more, no less, no different. Open sourcing the runtime environment is insufficient proof. For this, we need remote attestation, which can be performed within secure compute environments on most modern clouds.&lt;/p&gt;
    &lt;head rend="h3"&gt;How do we make this happen?&lt;/head&gt;
    &lt;p&gt;For this way of computing to gain any relevance, there needs to be a compelling enough sell to enough users.&lt;/p&gt;
    &lt;p&gt;That seems really, really hard.&lt;/p&gt;
    &lt;p&gt;Whatever the path is, I don’t see it clearly, but it seems to need to trace through two rough milestones.&lt;/p&gt;
    &lt;p&gt;1. An active community of technical users hacking away in it &lt;lb/&gt; Those in it might say: “I really buy into the principles of this thing. And it seems useful - look what that person made on it! It seems like a web version of claude code + skills + marketplace, but with an encrypted database, and permissions that let you feel safe using yolo mode. I’m going to try it.”&lt;/p&gt;
    &lt;p&gt;2. A breakout to heavy users of ChatGPT (et al), with a polished, managed product &lt;lb/&gt; At this juncture, a product manager type, for example, might say: “Oh, wow, I see how this personalised web OS thing would be useful. Let me get out my credit card, bring all my data onto this thing, and try some of these plugins”.&lt;/p&gt;
    &lt;head rend="h4"&gt;Here are some questions that linger for me:&lt;/head&gt;
    &lt;p&gt;What should the value proposition of the polished, managed product be - and what might it replace (ChatGPT / Notion / Chrome / Tampermonkey)? Can you sell the long tail of features, as a killer feature? How might we aim smaller - should the first step be a standalone service that makes it vercel-easy to serve out of attestable images? How should schema sharing interleave with code sharing, to permit extensibility? What can we augment or transfer from Claude code - given what can already be hacked together there? Is taint tracking watertight enough? How different will runtime compatible code need to be, and what effect will that have on ease of writing/generating? Can/should people be financially incentivised to create useful programs to run in this environment? How can the environment permit sensitive data to leave, at the user’s behest, with graceful UX? How might a browser safely delineate what UI elements are generated from what code?&lt;/p&gt;
    &lt;p&gt;One thing is clear:&lt;/p&gt;
    &lt;head rend="h4"&gt;It’s going to take a community&lt;/head&gt;
    &lt;p&gt;It seems to be forming around Alex Komoroske’s public benefit corp, common.tools…which is where the central idea of an attestable exfiltration proof runtime environment above comes from.&lt;/p&gt;
    &lt;p&gt;After bumping against the trust problem myself, I signed up to the waitlist, which spawned a few really interesting conversations. Here's hoping there are a few more in the comments section! 😀&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arjun.md/little-guys"/><published>2025-10-27T17:27:18+00:00</published></entry></feed>