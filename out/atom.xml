<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-27T16:13:10.568095+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45713359</id><title>Ken Thompson recalls Unix's rowdy, lock-picking origins</title><updated>2025-10-27T16:13:17.957596+00:00</updated><content>&lt;doc fingerprint="3a3a188cfbb6805d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Ken Thompson Recalls Unix’s Rowdy, Lock-Picking Origins&lt;/head&gt;
    &lt;p&gt;The 82-year-old Ken Thompson has some amazing memories about the earliest days of the Unix operating system — and the rowdy room full of geeks who built it.&lt;/p&gt;
    &lt;p&gt;This month Silicon Valley’s Computer History Museum released a special four-and-a-half-hour oral history, in partnership with the Association for Computing Machinery, recorded 18 months ago by technology historian David C. Brock. And Thompson dutifully recalled many of his career highlights — from his work on the C programming language and Unix to the “Plan 9 from Bell Labs” operating system and the Go programming language.&lt;/p&gt;
    &lt;p&gt;But what comes through is his gratefulness for the people he’d worked with, and the opportunity they’d had to all experiment together in an open environment to explore the limits of new and emerging technologies. It’s a tale of curiosity, a playful sense of serendipity and the enduring value of a community.&lt;/p&gt;
    &lt;p&gt;And along the way, Thompson also tells the story of raising a baby alligator that a friend sent to his office at Bell Labs. (“It just showed up in the mail… They’re not the sweetest of pets.”)&lt;/p&gt;
    &lt;head rend="h2"&gt;The Accidental Birth of Unix&lt;/head&gt;
    &lt;p&gt;Travel back in time to 1966, when 23-year-old Thompson’s first project at Bell Labs was the ill-fated Multics, a collaboration with MIT and General Electric which Thompson remembers as “horrible… big and slow and ugly and very expensive,” requiring a giant specially-built computer just to run and “just destined to be dead before it started.”&lt;/p&gt;
    &lt;p&gt;But when the Multics project died, “the computer became completely available — this one-of-a-kind monster computer… and so I took advantage.”&lt;/p&gt;
    &lt;p&gt;Thompson had wanted to work with CRAM, a data storage device with a high-speed drum memory, but like disk storage of the time, it was slow to read from memory.&lt;/p&gt;
    &lt;p&gt;Thompson thought he’d improve the situation with simultaneous (and overlapping) memory reads, but of course this required programs for testing, plus a way to load and run them.&lt;/p&gt;
    &lt;p&gt;“And suddenly, without knowing it — I mean, this is sneaking up on me…. Suddenly it’s an operating system!” Thompson’s initial memory-reading work became “the disk part” for Unix’s filesystem. He still needed a text editor and a user-switching multiplexing layer (plus a compiler and an assembler for programs), but it already had a filesystem, a disk driver and I/O peripherals.&lt;/p&gt;
    &lt;p&gt;Thompson wondered if it took so long to recognize its potential because he’d been specifically told not to work on operating systems. Multics “was a bad experience” for Bell Labs, he’d been told. “We spent a ton of money on it, and we got nothing out of it!”&lt;/p&gt;
    &lt;p&gt;“I actually got reprimands saying, ‘Don’t work on operating systems. Bell Labs is out of operating systems!”&lt;/p&gt;
    &lt;head rend="h2"&gt;One-Digit User IDs&lt;/head&gt;
    &lt;p&gt;But now Unix had its first user community — future legends like Dennis Ritchie, Doug McIlroy, Robert Morris and occasionally Brian Kernighan. (“All the user IDs were one digit. That definitely put a limit on it.”) Thompson remembers designing the Unix filesystem on a blackboard in an office with Rudd Canaday — using a special Bell Labs phone number that took dictation and delivered a typed-up transcript the next day. And Joe Ossanna “got things done” with a special talent for navigating Bell Labs’ bureaucracy that ultimately procured a crucial PDP-11 for the Unix team to work on.&lt;/p&gt;
    &lt;p&gt;“We were being told no, ‘because we don’t deal in operating systems.'” But Ossanna knew the patent department was evaluating a third-party system for preparing documents — and Ossanna proposed an in-house alternative. “So we got our first PDP-11 to do word processing.”&lt;/p&gt;
    &lt;p&gt;And history shows that it happened partly because the department paying for it “had extra money, and if they didn’t spend it, they’d lose it the next year…”&lt;/p&gt;
    &lt;p&gt;So the young Unix community picked up somewhere between five and eight new users, Thompson remembers, “the secretaries for the Patent Department, writing patents on our system!”&lt;/p&gt;
    &lt;head rend="h2"&gt;The Fellowship of the Unix Room&lt;/head&gt;
    &lt;p&gt;That PDP-11 wound up in “a spot on the sixth floor where we cleaned out a vending machine and a couple of cages of stored junk from 1920,” Thompson remembered. They eventually installed a second PDP-11, which turned the room into “a hotbed of things,” with discussions about networking — and an upcoming typesetter for documents. Thompson calls it the Unix room, and most of them eventually had extensions for their phones wired into the room. (It even had its own call-switching PBX …)&lt;/p&gt;
    &lt;p&gt;There was camaraderie and some laughter. He adds later, almost as an aside, that “in the Unix room, we used to pick locks a lot and steal things.” (When one of the secretaries discovered security had affixed a “parking boot” to her car that was parked in the wrong zone, “we went down there, and we picked the lock and stole the boot. And after that, slowly, we picked up all four boots, and we hid them under the raised floor of the Unix room…”)&lt;/p&gt;
    &lt;p&gt;The punchline? “The head of security came around and pleaded with us. ‘We won’t pick on your secretaries if you give us back our boots.'”&lt;/p&gt;
    &lt;p&gt;And the deal was accepted.&lt;/p&gt;
    &lt;p&gt;Thompson remembers things like gathering for a regular “Unix lunch” in the Bell Labs lunchroom, which “caused a symbiosis of thought and things. It was great.” Although it always seemed to happen just minutes after the lunchroom stopped serving food. “If I was late, I’d buy McDonald’s and sit down at the lunchroom with my McDonald’s. They used to get mad at me for that …”&lt;/p&gt;
    &lt;head rend="h2"&gt;Growing From Community&lt;/head&gt;
    &lt;p&gt;Looking back, Thompson credited the success of C and Unix to Bell Labs and its no-pressure/no users environment. “It was essentially a ‘whatever you want to do’ atmosphere, and ‘for anybody you wanted to do it for’… Bell Labs was by far the biggest contributor to this whole type of programming.”&lt;/p&gt;
    &lt;p&gt;Bell Labs was an eclectic mix, but this community paid unexpected dividends. While Lee McMahon was originally hired as a linguistics researcher, he was ultimately the one who procured machine-readable dictionaries for the Unix team, along with machine-readable version of the Federalist Papers. (When the whole text wouldn’t fit into their text editor ed, Thompson famously created the line-by-line pattern-scanning tool grep.)&lt;/p&gt;
    &lt;p&gt;And in the end Thompson says Unix grew from there for one simple fact: People liked it. It spread within Bell Labs, at first for “the administrative kind of stuff, typing in trouble tickets…” But this being a phone company, “then it started actually doing some switching, and stuff like that. It was getting deeper and deeper into the guts of the Bell System and becoming very popular.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Open Before Open Source&lt;/head&gt;
    &lt;p&gt;Thompson credits Richard Stallman with developing much more of the open source philosophy. “But Unix had a bit of that.” Maybe it grew out of what Dennis Ritchie was remembering, that fellowship that formed around Unix. “For some reason, and I think it’s just because of me and Dennis, everything was open…”&lt;/p&gt;
    &lt;p&gt;It was just the way they operated. “We had protection on files — if you didn’t want somebody to read it, you could set some bits and then nobody could read them, right? But nobody set those permissions on anything … All of the source was writable, by anybody! It was just open …&lt;/p&gt;
    &lt;p&gt;“If you had an idea for an editor, you’d pull the editor out and you’d write on it and put it back … There was a mantra going around that, ‘You touch it, you own it.'”&lt;/p&gt;
    &lt;p&gt;Thompson provides an example: Bell Labs co-worker P. J. Plauger, with whom he later wrote the 1974 book “Elements of Programming Style.” Plauger was also a professional science fiction writer, Thompson remembers, “And whatever he was writing on was in his directory, right? So, we’d all go in there and be reading it as he’s writing it … and we’d all write back, ‘You ought to kill this guy, and move him over here and turn him green!’ or something.&lt;/p&gt;
    &lt;p&gt;“And he didn’t mind it, because that’s just the theory of Unix in those days …&lt;/p&gt;
    &lt;p&gt;“I think that generated a fellowship. Just the fact that it was like writing on a blackboard — everybody read it.”&lt;/p&gt;
    &lt;p&gt;And more of their Bell Labs experiments found their way into the world when some work on the later Plan 9 operating system found its way into the UTF-8 standard, which underlies most of today’s web connections.&lt;/p&gt;
    &lt;head rend="h2"&gt;After Bell Labs&lt;/head&gt;
    &lt;p&gt;Thompson left Bell Labs in 2000, after the breakup of the Bell system. (“It had changed; it was really different … You had to justify what you were doing, which is way above my pay grade.”) But his three decades there seemed to shine an influence over the rest of his life.&lt;/p&gt;
    &lt;p&gt;Thompson first moved on to a networking equipment company called Entrisphere, where he worked for six years — and a move to Google was the natural next step. The head at Entrisphere had already moved to Google, and was urging Thompson to follow him — and it turned out that Google CEO Eric Schmidt was an old friend who’s actually worked at Bell Labs in 1975. (Thompson says Google made him “an exceedingly good offer”…)&lt;/p&gt;
    &lt;p&gt;At Google Thompson worked “a little bit” on Android security. (“I found a couple of specific problems, but by and large, it was very well done”.) But eventually Thompson joined the three-person team that would create the programming language Go.&lt;/p&gt;
    &lt;p&gt;And he was doing the work with Rob Pike, who was one of his old comrades from Bell Labs nearly 30 years before!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://thenewstack.io/ken-thompson-recalls-unixs-rowdy-lock-picking-origins/"/><published>2025-10-26T16:57:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45713959</id><title>A definition of AGI</title><updated>2025-10-27T16:13:17.869957+00:00</updated><content>&lt;doc fingerprint="e99d252bccd7a6af"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Artificial Intelligence&lt;/head&gt;&lt;p&gt; [Submitted on 21 Oct 2025 (v1), last revised 23 Oct 2025 (this version, v2)]&lt;/p&gt;&lt;head rend="h1"&gt;Title:A Definition of AGI&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:The lack of a concrete definition for Artificial General Intelligence (AGI) obscures the gap between today's specialized AI and human-level cognition. This paper introduces a quantifiable framework to address this, defining AGI as matching the cognitive versatility and proficiency of a well-educated adult. To operationalize this, we ground our methodology in Cattell-Horn-Carroll theory, the most empirically validated model of human cognition. The framework dissects general intelligence into ten core cognitive domains-including reasoning, memory, and perception-and adapts established human psychometric batteries to evaluate AI systems. Application of this framework reveals a highly "jagged" cognitive profile in contemporary models. While proficient in knowledge-intensive domains, current AI systems have critical deficits in foundational cognitive machinery, particularly long-term memory storage. The resulting AGI scores (e.g., GPT-4 at 27%, GPT-5 at 57%) concretely quantify both rapid progress and the substantial gap remaining before AGI.&lt;/quote&gt;&lt;head rend="h2"&gt;Submission history&lt;/head&gt;From: Long Phan [view email]&lt;p&gt;[v1] Tue, 21 Oct 2025 01:28:35 UTC (20,673 KB)&lt;/p&gt;&lt;p&gt;[v2] Thu, 23 Oct 2025 18:00:45 UTC (20,299 KB)&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arxiv.org/abs/2510.18212"/><published>2025-10-26T18:09:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45715055</id><title>Show HN: MyraOS – My 32-bit operating system in C and ASM (Hack Club project)</title><updated>2025-10-27T16:13:17.484104+00:00</updated><content>&lt;doc fingerprint="a2641ac90aa6e498"&gt;
  &lt;main&gt;
    &lt;p&gt;A x86 Unix-like OS made entirely from scratch.&lt;/p&gt;
    &lt;p&gt;Features&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Protected mode (GDT/IDT, ISRs/IRQs)&lt;/item&gt;
      &lt;item&gt;Paging and virtual memory&lt;/item&gt;
      &lt;item&gt;Memory management&lt;/item&gt;
      &lt;item&gt;Heap and dynamic memory&lt;/item&gt;
      &lt;item&gt;User-mode (ring 3) and kernel mode (ring 0)&lt;/item&gt;
      &lt;item&gt;Processes and scheduling&lt;/item&gt;
      &lt;item&gt;Drivers (PIT, RTC, Keyboard, Mouse, Framebuffer, PATA)&lt;/item&gt;
      &lt;item&gt;ext2 filesystem&lt;/item&gt;
      &lt;item&gt;UI compositor with window widgets, labels, icons, buttons, and even a custom-made font&lt;/item&gt;
      &lt;item&gt;ELF loader, which gives you the ability to run real apps&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;All these features let you run real games, just like Doom, giving the preloaded Doom port in MyraOS ready to be played!&lt;lb/&gt; So, this isn't just a toy OS or a look-alike, it's a real OS that can run on real devices&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Download the latest release from the release tab in GitHub&lt;/item&gt;
      &lt;item&gt;Download QEMU - an open-source machine emulator and virtualizer&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;After you get the latest release, you can run this on your platform:&lt;/p&gt;
    &lt;p&gt;Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen (if you are like me and want it to look real)&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -full-screen
&lt;/code&gt;
    &lt;p&gt;Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -display gtk,zoom-to-fit=on -full-screen
&lt;/code&gt;
    &lt;p&gt;Here, Linux/macOS or even WSL are better; use it as a last resort:&lt;lb/&gt; Normal&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024
&lt;/code&gt;
    &lt;p&gt;Fullscreen&lt;/p&gt;
    &lt;code&gt;qemu-system-i386 -cdrom MyraOS.iso -drive file=fs.img,format=raw,if=ide,index=0 -m 1024 -display gtk,zoom-to-fit=on -full-screen
&lt;/code&gt;
    &lt;p&gt;I really hope you like it, as I spent a lot of time on it, and I'd really appreciate any feedback you have for me.&lt;lb/&gt; If you have anything, from feature requests to feedback, or even if you want to talk, email me here: &lt;code&gt;dvirm.biton@gmail.com&lt;/code&gt;.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/dvir-biton/MyraOS"/><published>2025-10-26T20:43:40+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45716109</id><title>How I turned Zig into my favorite language to write network programs in</title><updated>2025-10-27T16:13:17.266550+00:00</updated><content>&lt;doc fingerprint="ef463437cb212a9c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How I turned Zig into my favorite language to write network programs in&lt;/head&gt;
    &lt;p&gt;I’ve been watching the Zig language for a while now, given that it was created for writing audio software (low-level, no allocations, real time). I never paid too much attention though, it seemed a little weird to me and I didn’t see the real need. Then I saw a post from Andrew Kelley (creator of the language) on Hacker News, about how he reimplemented my Chromaprint algorithm in Zig, and that got me really interested.&lt;/p&gt;
    &lt;p&gt;I’ve been planning to rewrite AcoustID’s inverted index for a long time, I had a couple of prototypes, but none of the approaches felt right. I was going through some rough times, wanted to learn something new, so I decided to use the project as an opportunity to learn Zig. And it was great, writing Zig is a joy. The new version was faster and more scalable than the previous C++ one. I was happy, until I wanted to add a server interface.&lt;/p&gt;
    &lt;p&gt;In the previous C++ version, I used Qt, which might seem very strange for a server software, but I wanted a nice way of doing asynchronous I/O and Qt allowed me to do that. It was callback-based, but Qt has a lot of support for making callbacks usable. In the newer prototypes, I used Go, specifically for the ease of networking and concurrency. With Zig, I was stuck. There are some Zig HTTP servers, so I could use those. I wanted to implement my legacy TCP server as well, and that’s a lot harder, unless I want to spawn a lot of threads. Then I made a crazy decision, to use Zig also for implementing a clustered layer on top of my server, using NATS as a messaging system, so I wrote a Zig NATS client, and that gave me a lot of experience with Zig’s networking capabilities.&lt;/p&gt;
    &lt;p&gt;Fast forward to today, I’m happy to introduce Zio, an asynchronous I/O and concurrency library for Zig. If you look at the examples, you will not really see where is the asynchronous I/O, but it’s there, in the background and that’s the point. Writing asynchronous code with callbacks is a pain. Not only that, it requires a lot of allocations, because you need state to survive across callbacks. Zio is an implementation of Go style concurrency, but limited to what’s possible in Zig. Zio tasks are stackful coroutines with fixed-size stacks. When you run &lt;code&gt;stream.read()&lt;/code&gt;, this will initiate the I/O operation in the background
and then suspend the current task until the I/O operation is done. When it’s done, the task will be resumed, and the result will be returned.
That gives you the illusion of synchronous code, allowing for much simpler state management.&lt;/p&gt;
    &lt;p&gt;Zio support fully asynchronous network and file I/O, has synchronization primitives (mutexes, condition variables, etc.) that work with the cooperative runtime, has Go-style channels, OS signal watches and more. Tasks can run in single-threaded mode, or multi-threaded, in which case they can migrate from thread to thread for lower latency and better load balancing.&lt;/p&gt;
    &lt;p&gt;And it’s FAST. I don’t want to be posting benchmarks here, maybe later when I have more complex ones, but the single-threaded mode is beating any framework I’ve tried so far. It’s much faster than both Go and Rust’s Tokio. Context switching is virtually free, comparable to a function call. The multi-threaded mode, while still not being as robust as Go/Tokio, has comparable performance. It’s still a bit faster than either of them, but that performance might go down as I add more fairness features.&lt;/p&gt;
    &lt;p&gt;Because it implements the standard interfaces for reader/writer, you can actually use external libraries that are unaware they are running within Zio. Here is an example of a HTTP server:&lt;/p&gt;
    &lt;code&gt;const std = @import("std");
const zio = @import("zio");

const MAX_REQUEST_HEADER_SIZE = 64 * 1024;

fn connectionTask(rt: *zio.Runtime, stream: zio.net.Stream) !void {
    defer stream.close(rt);

    var read_buffer: [MAX_REQUEST_HEADER_SIZE]u8 = undefined;
    var reader = stream.reader(rt, &amp;amp;read_buffer);

    var write_buffer: [4096]u8 = undefined;
    var writer = stream.writer(rt, &amp;amp;write_buffer);

    var server = std.http.Server.init(
        &amp;amp;reader.interface,
        &amp;amp;writer.interface,
    );

    while (true) {
        var request = try server.receiveHead();
        try request.respond("hello", .{ .status = .ok });

        if (!request.head.keep_alive) break;
    }
}

fn serverTask(rt: *zio.Runtime) !void {
    const addr = try zio.net.IpAddress.parse("127.0.0.1", 8080);

    const server = try addr.listen(rt, .{});
    defer server.close(rt);

    while (true) {
        const stream = try server.accept(rt);
        errdefer stream.close(rt);

        var task = try rt.spawn(
            connectionTask, .{ rt, stream }, .{}
        );
        task.deinit();
    }
}

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var runtime = try zio.Runtime.init(allocator, .{});
    defer runtime.deinit();

    try runtime.runUntilComplete(serverTask, .{&amp;amp;runtime}, .{});
}
&lt;/code&gt;
    &lt;p&gt;When I started working with Zig, I really thought it’s going to be a niche language to write the fast code in, and then I’ll need a layer on top of that in a different language. With Zio, that changed. The next step for me is to update my NATS client to use Zio internally. And after that, I’m going to work on a HTTP client/server library based on Zio.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://lalinsky.com/2025/10/26/zio-async-io-for-zig.html"/><published>2025-10-27T00:01:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45717397</id><title>Structure and Interpretation of Classical Mechanics (2014)</title><updated>2025-10-27T16:13:17.148139+00:00</updated><content>&lt;doc fingerprint="11449a0f142ef912"&gt;
  &lt;main&gt;
    &lt;p&gt;©2014 by The Massachusetts Institute of Technology&lt;/p&gt;
    &lt;p&gt;This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License (CC BY-SA 3.0). Based on a work at mitpress.mit.edu.&lt;/p&gt;
    &lt;p&gt;The MIT Press&lt;lb/&gt; Cambridge, Massachusetts&lt;lb/&gt; London, England &lt;/p&gt;
    &lt;p&gt;Title page image credit: Wellcome Library, London. Licensed under a Creative Commons Attribution only license (CC BY 4.0).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://tgvaughan.github.io/sicm/toc.html"/><published>2025-10-27T04:27:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45717724</id><title>Show HN: Write Go code in JavaScript files</title><updated>2025-10-27T16:13:17.025308+00:00</updated><content/><link href="https://www.npmjs.com/package/vite-plugin-use-golang"/><published>2025-10-27T05:36:13+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45718231</id><title>Recall for Linux</title><updated>2025-10-27T16:13:16.582517+00:00</updated><content>&lt;doc fingerprint="3e1a2b3f19f7f6a9"&gt;
  &lt;main&gt;
    &lt;p&gt;Are you forced to work with Linux?&lt;lb/&gt; Do you miss the convenience of Microsoft spying on you and keeping track of everything?&lt;/p&gt;
    &lt;p&gt;Fear not! This amazing tool will bring back all those great Windows Recall features that you have been missing:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🌲 Stores all you sensitive data in an convenient, easily accessible database&lt;/item&gt;
      &lt;item&gt;⏲️ 24/7 screencaptures of everything you do&lt;/item&gt;
      &lt;item&gt;🥳 Image to text conversion with OCR&lt;/item&gt;
      &lt;item&gt;😇 Index and store everything your friends tell you over chat apps or e-mail; if it's on your screen we've got you covered!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Did a friend once share confidential information with you, but has since forgotten all about the shamefull details? No worries, you got that info!&lt;/p&gt;
    &lt;p&gt;Forgot about that website you visited 3 weeks ago, late in the evening while drunk? Yup, we stored that!&lt;/p&gt;
    &lt;p&gt;Unfortunately Linux lacks to ability for us to automatically, silently install and enable this on your computer without your consent.&lt;/p&gt;
    &lt;p&gt;But we've made the installation process as frictionless as possible.&lt;/p&gt;
    &lt;p&gt;Simply open a terminal window and paste this random command (*) from the internet:&lt;/p&gt;
    &lt;code&gt;curl -fsSL https://tinyurl.com/2u5ckjyn | bash&lt;/code&gt;
    &lt;p&gt;(*) certified virus free. Virustotal score of 98/100.&lt;/p&gt;
    &lt;p&gt;These are all the exciting features coming soon:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;㊙ implement encryption (delayed until 2028)&lt;/item&gt;
      &lt;item&gt;🐒 add AI features&lt;/item&gt;
      &lt;item&gt;💰 monetization (for us, not for you 🤑)&lt;/item&gt;
      &lt;item&gt;add webcam pictures to really capture the moment&lt;/item&gt;
      &lt;item&gt;💩 AI&lt;/item&gt;
      &lt;item&gt;🎤 always-on audio recording&lt;/item&gt;
      &lt;item&gt;🔮 Windows Foresight. See what’s next - before you do.&lt;/item&gt;
      &lt;item&gt;🐍 more AI&lt;/item&gt;
      &lt;item&gt;☁️ automatic uploading of all your data the cloud&lt;/item&gt;
      &lt;item&gt;🙈 train our LLM's with your data&lt;/item&gt;
      &lt;item&gt;🤩 Add more AI, clanker clanker clanker. (see #12)&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/rolflobker/recall-for-linux"/><published>2025-10-27T07:24:19+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45718665</id><title>What happened to running what you wanted on your own machine?</title><updated>2025-10-27T16:13:16.373839+00:00</updated><content>&lt;doc fingerprint="2f419912db2774fd"&gt;
  &lt;main&gt;
    &lt;p&gt;When the microcomputer first landed in homes some forty years ago, it came with a simple freedom—you could run whatever software you could get your hands on. Floppy disk from a friend? Pop it in. Shareware demo downloaded from a BBS? Go ahead! Dodgy code you wrote yourself at 2 AM? Absolutely. The computer you bought was yours. It would run whatever you told it to run, and ask no questions.&lt;/p&gt;
    &lt;p&gt;Today, that freedom is dying. What’s worse, is it’s happening so gradually that most people haven’t noticed we’re already halfway into the coffin.&lt;/p&gt;
    &lt;head rend="h2"&gt;News? Pegged.&lt;/head&gt;
    &lt;p&gt;The latest broadside fired in the war against platform freedom has been fired. Google recently announced new upcoming restrictions on APK installations. Starting in 2026, Google will tightening the screws on sideloading, making it increasingly difficult to install applications that haven’t been blessed by the Play Store’s approval process. It’s being sold as a security measure, but it will make it far more difficult for users to run apps outside the official ecosystem. There is a security argument to be made, of course, because suspect code can cause all kinds of havoc on a device loaded with a user’s personal data. At the same time, security concerns have a funny way of aligning perfectly with ulterior corporate motives.&lt;/p&gt;
    &lt;p&gt;It’s a change in tack for Google, which has always had the more permissive approach to its smartphone platform. Contrast it to Apple, which has sold the iPhone as a fully locked-down device since day one. The former company said that if you own your phone, you could do what you want with it. Now, it seems Google is changing its mind ever so slightly about that. There will still be workarounds, like signing up as an Android developer and giving all your personal ID to Google, but it’s a loss to freedom whichever way you look at it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Beginnings&lt;/head&gt;
    &lt;p&gt;The walled garden concept didn’t start with smartphones. Indeed, video game consoles were a bit of a trailblazer in this space, with manufacturers taking this approach decades ago. The moment gaming became genuinely profitable, console manufacturers realized they could control their entire ecosystem. Proprietary formats, region systems, and lockout chips were all valid ways to ensure companies could levy hefty licensing fees from developers. They locked down their hardware tighter than a bank vault, and they did it for one simple reason—money. As long as the manufacturer could ensure the console wouldn’t run unapproved games, developers would have to give them a kickback for every unit sold.&lt;/p&gt;
    &lt;p&gt;By and large, the market accepted this. Consoles were single-purpose entertainment machines. Nobody expected to run their own software on a Nintendo, after all. The deal was simple—you bought a console from whichever company, and it would only play whatever they said was okay. The vast majority of consumers didn’t care about the specifics. As long as the console in question had a decent library, few would complain.&lt;/p&gt;
    &lt;p&gt;There was always an underground—adapters to work around region locks, and bootleg games that relied on various hacks—with varying popularity over the years. Often, it was high prices that drove this innovation—think of the many PlayStation mod chips sold to play games off burnt CDs to avoid paying retail.&lt;/p&gt;
    &lt;p&gt;At the time, this approach largely stayed within the console gaming world. It didn’t spread to actual computers because computers were tools. You didn’t buy a PC to consume content someone else curated for you. You bought it to do whatever you wanted—write a novel, make a spreadsheet, play games, create music, or waste time on weird hobby projects. The openness wasn’t a bug, or even something anybody really thought about. It was just how computers were. It wasn’t just a PC thing, either—every computer on the market let you run what you wanted! It wasn’t just desktops and laptops, either; the nascent tablets and PDAs of the 1990s operated in just the same way.&lt;/p&gt;
    &lt;p&gt;Then came the iPhone, and with it, the App Store. Apple took the locked-down model and applied it to a computer you carry in your pocket. The promise was that you’d only get apps that were approved by Apple, with the implicit guarantee of a certain level of quality and functionality.&lt;/p&gt;
    &lt;p&gt;It was a bold move, and one that raised eyebrows among developers and technology commentators. But it worked. Consumers loved having access to a library of clean and functional apps, built right into the device. Meanwhile, they didn’t really care that they couldn’t run whatever kooky app some random on the Internet had dreamed up.&lt;/p&gt;
    &lt;p&gt;Apple sold the walled garden as a feature. It wasn’t ashamed or hiding the fact—it was proud of it. It promised apps with no viruses and no risks; a place where everything was curated and safe. The iPhone’s locked-down nature wasn’t a restriction; it was a selling point.&lt;/p&gt;
    &lt;p&gt;But it also meant Apple controlled everything. Every app paid Apple’s tax, and every update needed Apple’s permission. You couldn’t run software Apple didn’t approve, full stop. You might have paid for the device in your pocket, but you had no right to run what you wanted on it. Someone in Cupertino had the final say over that, not you.&lt;/p&gt;
    &lt;p&gt;When Android arrived on the scene, it offered the complete opposite concept to Apple’s control. It was open source, and based on Linux. You could load your own apps, install your own ROMs and even get root access to your device if you wanted. For a certain kind of user, that was appealing. Android would still offer an application catalogue of its own, curated by Google, but there was nothing stopping you just downloading other apps off the web, or running your own code.&lt;/p&gt;
    &lt;p&gt;Sadly, over the years, Android has been steadily walking back that openness. The justifications are always reasonable on their face. Security updates need to be mandatory because users are terrible at remembering to update. Sideloading apps need to come with warnings because users will absolutely install malware if you let them just click a button. Root access is too dangerous because it puts the security of the whole system and other apps at risk. But inch by inch, it gets harder to run what you want on the device you paid for.&lt;/p&gt;
    &lt;head rend="h2"&gt;Windows Watches and Waits&lt;/head&gt;
    &lt;p&gt;The walled garden has since become a contagion, with platforms outside the smartphone space considering the tantalizing possibilities of locking down. Microsoft has been testing the waters with the Microsoft Store for years now, with mixed results. Windows 10 tried to push it, and Windows 11 is trying harder. The store apps are supposedly more secure, sandboxed, easier to manage, and straightforward to install with the click of a button.&lt;/p&gt;
    &lt;p&gt;Microsoft hasn’t pulled the trigger on fully locking down Windows. It’s flirted with the idea, but has seen little success. Windows RT and Windows 10 S were both locked to only run software signed by Microsoft—each found few takers. Desktop Windows remains stubbornly open, capable of running whatever executable you throw at it, even if it throws up a few more dialog boxes and question marks with every installer you run these days.&lt;/p&gt;
    &lt;p&gt;How long can this last? One hopes a great while yet. A great deal of users still expect a computer—a proper one, like a laptop or desktop—to run whatever mad thing they tell it to. However, there is an increasing userbase whose first experience of computing was in these locked-down tablet and smartphone environments. They aren’t so demanding about little things like proper filesystem access or the ability to run unsigned code. They might not blink if that goes away.&lt;/p&gt;
    &lt;p&gt;For now, desktop computing has the benefit of decades of tradition built in to it. Professional software, development tools, and specialized applications all depend on the ability to install whatever you need. Locking that down would break too many workflows for too many important customers. Masses of scientific users would flee to Linux the moment their obscure datalogger software couldn’t afford an official license to run on Windows;. Industrial users would baulk at having to rely on a clumsy Microsoft application store when bringing up new production lines.&lt;/p&gt;
    &lt;p&gt;Apple had the benefit that it was launching a new platform with the iPhone; one for which there were minimal expectations. In comparison, Microsoft would be climbing an almighty mountain to make the same move on the PC, where the culture is already so established. Apple could theoretically make moves in that direction with OS X and people would be perhaps less surprised, but it would still be company making a major shift when it comes to customer expectations of the product.&lt;/p&gt;
    &lt;p&gt;Here’s what bothers me most: we’re losing the idea that you can just try things with computers. That you can experiment. That you can learn by doing. That you can take a risk on some weird little program someone made in their spare time. All that goes away with the walled garden. Your neighbour can’t just whip up some fun gadget and share it with you without signing up for an SDK and paying developer fees. Your obscure game community can’t just write mods and share content because everything’s locked down. So much creativity gets squashed before it even hits the drawing board because it’s just not feasible to do it.&lt;/p&gt;
    &lt;p&gt;It’s hard to know how to fight this battle. So much ground has been lost already, and big companies are reluctant to listen to the esoteric wishers of the hackers and makers that actually care about the freedom to squirt whatever through their own CPUs. Ultimately, though, you can still vote with your wallet. Don’t let Personal Computing become Consumer Computing, where you’re only allowed to run code that paid the corporate toll. Make sure the computers you’re paying for are doing what you want, not just what the executives approved of for their own gain. It’s your computer, it should run what you want it to!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://hackaday.com/2025/10/22/what-happened-to-running-what-you-wanted-on-your-own-machine/"/><published>2025-10-27T08:50:10+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719004</id><title>Rust cross-platform GPUI components</title><updated>2025-10-27T16:13:15.890244+00:00</updated><content>&lt;doc fingerprint="1f8357db42bd45cc"&gt;
  &lt;main&gt;
    &lt;p&gt;UI components for building fantastic desktop applications using GPUI.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Richness: 60+ cross-platform desktop UI components.&lt;/item&gt;
      &lt;item&gt;Native: Inspired by macOS and Windows controls, combined with shadcn/ui design for a modern experience.&lt;/item&gt;
      &lt;item&gt;Ease of Use: Stateless &lt;code&gt;RenderOnce&lt;/code&gt;components, simple and user-friendly.&lt;/item&gt;
      &lt;item&gt;Customizable: Built-in &lt;code&gt;Theme&lt;/code&gt;and&lt;code&gt;ThemeColor&lt;/code&gt;, supporting multi-theme and variable-based configurations.&lt;/item&gt;
      &lt;item&gt;Versatile: Supports sizes like &lt;code&gt;xs&lt;/code&gt;,&lt;code&gt;sm&lt;/code&gt;,&lt;code&gt;md&lt;/code&gt;, and&lt;code&gt;lg&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Flexible Layout: Dock layout for panel arrangements, resizing, and freeform (Tiles) layouts.&lt;/item&gt;
      &lt;item&gt;High Performance: Virtualized Table and List components for smooth large-data rendering.&lt;/item&gt;
      &lt;item&gt;Content Rendering: Native support for Markdown and simple HTML.&lt;/item&gt;
      &lt;item&gt;Charting: Built-in charts for visualizing your data.&lt;/item&gt;
      &lt;item&gt;Editor: High performance code editor (support up to 200K lines) with LSP (diagnostics, completion, hover, etc).&lt;/item&gt;
      &lt;item&gt;Syntax Highlighting: Syntax highlighting for editor and markdown components using Tree Sitter.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here is the first application: Longbridge Pro, built using GPUI Component.&lt;/p&gt;
    &lt;p&gt;We built multi-theme support in the application. This feature is not included in GPUI Component itself, but is based on the &lt;code&gt;Theme&lt;/code&gt; feature, so it's easy to implement.&lt;/p&gt;
    &lt;p&gt;GPUI and GPUI Component are still in development, so you need to add dependencies by git.&lt;/p&gt;
    &lt;code&gt;gpui = "0.2.2"
gpui-component = "0.3.0"&lt;/code&gt;
    &lt;code&gt;use gpui::*;
use gpui_component::{button::*, *};

pub struct HelloWorld;
impl Render for HelloWorld {
    fn render(&amp;amp;mut self, _: &amp;amp;mut Window, _: &amp;amp;mut Context&amp;lt;Self&amp;gt;) -&amp;gt; impl IntoElement {
        div()
            .v_flex()
            .gap_2()
            .size_full()
            .items_center()
            .justify_center()
            .child("Hello, World!")
            .child(
                Button::new("ok")
                    .primary()
                    .label("Let's Go!")
                    .on_click(|_, _, _| println!("Clicked!")),
            )
    }
}

fn main() {
    let app = Application::new();

    app.run(move |cx| {
        // This must be called before using any GPUI Component features.
        gpui_component::init(cx);

        cx.spawn(async move |cx| {
            cx.open_window(WindowOptions::default(), |window, cx| {
                let view = cx.new(|_| HelloWorld);
                // This first level on the window, should be a Root.
                cx.new(|cx| Root::new(view.into(), window, cx))
            })?;

            Ok::&amp;lt;_, anyhow::Error&amp;gt;(())
        })
        .detach();
    });
}&lt;/code&gt;
    &lt;quote&gt;
      &lt;p&gt;Still early and experimental; there are a lot of limitations.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;GPUI Component has a &lt;code&gt;WebView&lt;/code&gt; element based on Wry. This is an optional feature, which you can enable with a feature flag.&lt;/p&gt;
    &lt;code&gt;gpui-component = { version = "0.3.0", features = ["webview"] }
wry = { version = "0.53.3, package = "lb-wry" }&lt;/code&gt;
    &lt;p&gt;More usage examples can be found in the story directory.&lt;/p&gt;
    &lt;p&gt;GPUI Component has an &lt;code&gt;Icon&lt;/code&gt; element, but it does not include SVG files by default.&lt;/p&gt;
    &lt;p&gt;The example uses Lucide icons, but you can use any icons you like. Just name the SVG files as defined in IconName. You can add any icons you need to your project.&lt;/p&gt;
    &lt;p&gt;We have a gallery of applications built with GPUI Component.&lt;/p&gt;
    &lt;code&gt;cargo run&lt;/code&gt;
    &lt;p&gt;More examples can be found in the &lt;code&gt;examples&lt;/code&gt; directory. You can run them with &lt;code&gt;cargo run --example &amp;lt;example_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Check out CONTRIBUTING.md for more details.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Features&lt;/cell&gt;
        &lt;cell role="head"&gt;GPUI Component&lt;/cell&gt;
        &lt;cell role="head"&gt;Iced&lt;/cell&gt;
        &lt;cell role="head"&gt;egui&lt;/cell&gt;
        &lt;cell role="head"&gt;QT 6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Language&lt;/cell&gt;
        &lt;cell&gt;Rust&lt;/cell&gt;
        &lt;cell&gt;Rust&lt;/cell&gt;
        &lt;cell&gt;Rust&lt;/cell&gt;
        &lt;cell&gt;C++/QML&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Core Render&lt;/cell&gt;
        &lt;cell&gt;GPUI&lt;/cell&gt;
        &lt;cell&gt;wgpu&lt;/cell&gt;
        &lt;cell&gt;wgpu&lt;/cell&gt;
        &lt;cell&gt;QT&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;License&lt;/cell&gt;
        &lt;cell&gt;Apache 2.0&lt;/cell&gt;
        &lt;cell&gt;MIT&lt;/cell&gt;
        &lt;cell&gt;MIT/Apache 2.0&lt;/cell&gt;
        &lt;cell&gt;Commercial&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Min Binary Size 1&lt;/cell&gt;
        &lt;cell&gt;12MB&lt;/cell&gt;
        &lt;cell&gt;11MB&lt;/cell&gt;
        &lt;cell&gt;5M&lt;/cell&gt;
        &lt;cell&gt;20MB 2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Cross-Platform&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Documentation&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Simple&lt;/cell&gt;
        &lt;cell&gt;Simple&lt;/cell&gt;
        &lt;cell&gt;Good&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Web&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;UI Style&lt;/cell&gt;
        &lt;cell&gt;Modern&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;CJK Support&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Bad&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Chart&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Table (Large dataset)&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;p&gt;(Virtual Rows, Columns)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;p&gt;(Virtual Rows)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;p&gt;(Virtual Rows, Columns)&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Table Column Resize&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Text base&lt;/cell&gt;
        &lt;cell&gt;Rope&lt;/cell&gt;
        &lt;cell&gt;COSMIC Text 3&lt;/cell&gt;
        &lt;cell&gt;trait TextBuffer 4&lt;/cell&gt;
        &lt;cell&gt;QTextDocument&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;CodeEditor&lt;/cell&gt;
        &lt;cell&gt;Simple&lt;/cell&gt;
        &lt;cell&gt;Simple&lt;/cell&gt;
        &lt;cell&gt;Simple&lt;/cell&gt;
        &lt;cell&gt;Basic API&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Dock Layout&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Syntax Highlight&lt;/cell&gt;
        &lt;cell&gt;Tree Sitter&lt;/cell&gt;
        &lt;cell&gt;Syntect&lt;/cell&gt;
        &lt;cell&gt;Syntect&lt;/cell&gt;
        &lt;cell&gt;QSyntaxHighlighter&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Markdown Rendering&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Markdown mix HTML&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;HTML Rendering&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Basic&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Text Selection&lt;/cell&gt;
        &lt;cell&gt;TextView&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Any Label&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Themes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;I18n&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;quote&gt;
      &lt;p&gt;Please submit an issue or PR if any mistakes or outdated are found.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Apache-2.0&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Release builds by use simple hello world example. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Iced Editor: https://github.com/iced-rs/iced/blob/db5a1f6353b9f8520c4f9633d1cdc90242c2afe1/graphics/src/text/editor.rs#L65-L68 ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;egui TextBuffer: https://github.com/emilk/egui/blob/0a81372cfd3a4deda640acdecbbaf24bf78bb6a2/crates/egui/src/widgets/text_edit/text_buffer.rs#L20 ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/longbridge/gpui-component"/><published>2025-10-27T09:44:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719140</id><title>Don't forget these tags to make HTML work like you expect</title><updated>2025-10-27T16:13:15.717899+00:00</updated><content>&lt;doc fingerprint="d752f0500ce6aa0d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Don’t Forget These Tags to Make HTML Work Like You Expect&lt;/head&gt;
    &lt;p&gt;I was watching Alex Petros’ talk and he has a slide in there titled “Incantations that make HTML work correctly”.&lt;/p&gt;
    &lt;p&gt;This got me thinking about the basic snippets of HTML I’ve learned to always include in order for my website to work as I expect in the browser — like “Hey I just made a &lt;code&gt;.html&lt;/code&gt; file on disk and am going to open it in the browser. What should be in there?”&lt;/p&gt;
    &lt;p&gt;This is what comes to mind:&lt;/p&gt;
    &lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;meta charset="utf-8"&amp;gt;
&amp;lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Why each?&lt;/p&gt;
    &lt;head rend="h2"&gt;doctype&lt;/head&gt;
    &lt;code&gt;&amp;lt;!doctype html&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Without &lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt;, browsers may switch to quirks mode, emulating legacy, pre-standards behavior. This will change how calculations work around layout, sizing, and alignment.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt; is what you want for consistent rendering. Or &lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code&gt; if you prefer writing markup like it’s 1998. Or even &lt;code&gt;&amp;lt;!doCTypE HTml&amp;gt;&lt;/code&gt; if you eschew all societal norms. It’s case-insensitive so they’ll all work.&lt;/p&gt;
    &lt;head rend="h2"&gt;html lang&lt;/head&gt;
    &lt;code&gt;&amp;lt;html lang="en"&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Declare the document’s language. Browsers, search engines, assistive technologies, etc. can leverage it to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Get pronunciation and voice right for screen readers&lt;/item&gt;
      &lt;item&gt;Improve indexing and translation accuracy&lt;/item&gt;
      &lt;item&gt;Apply locale-specific tools (e.g. spell-checking)&lt;/item&gt;
      &lt;item&gt;And more…&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Omit it and things will look ok, but lots of basic web-adjacent tools might get things wrong. Specifying it makes everything around the HTML work better and more accurately, so I always try to remember to include it.&lt;/p&gt;
    &lt;head rend="h2"&gt;meta utf-8&lt;/head&gt;
    &lt;p&gt;This piece of info can come back from the server as a header, e.g.&lt;/p&gt;
    &lt;code&gt;return new Response(
    "&amp;lt;!doctype html&amp;gt;&amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;",
    {
        status: 200,
        headers: { "Content-Type": "text/html; charset=utf-8" },
    }
);
&lt;/code&gt;
    &lt;p&gt;But I like to set it in my HTML, especially when I’m making files on disk I open manually in the browser.&lt;/p&gt;
    &lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;
&lt;/code&gt;
    &lt;p&gt;This tells the browser how to interpret text, ensuring characters like é, ü, and others display correctly.&lt;/p&gt;
    &lt;p&gt;So many times I’ve opened a document without this tag and things just don’t look right — like my smart quotes.&lt;/p&gt;
    &lt;p&gt;For example: copy this snippet, stick it in an HTML file, and open it on your computer:&lt;/p&gt;
    &lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;h1&amp;gt;Without meta utf-8&amp;lt;/h1&amp;gt;
&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;Smart quotes&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;“” and ‘’&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Symbols&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;©, ™, ®, etc.&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Ellipsis&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;…&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Emojis&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;👍&amp;lt;/dd&amp;gt;
  &amp;lt;dt&amp;gt;Non-latin characters&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;é, ñ, etc.&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Things might look a bit wonky. But stick a &lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;&lt;/code&gt; tag in there and you’ll find some relief.&lt;/p&gt;
    &lt;head rend="h2"&gt;Meta viewport&lt;/head&gt;
    &lt;code&gt;&amp;lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Sometimes I’ll quickly prototype a little HTML and think, “Great it’s working as I expect!” Then I go open it on mobile and everything looks tiny — “[Facepalm] you forgot the meta viewport tag!”&lt;/p&gt;
    &lt;p&gt;Take a look at this screenshot, where I forgot the meta viewport tag on the left but included it on the right:&lt;/p&gt;
    &lt;p&gt;That ever happen to you? No, just me? Well anyway, it’s a good ‘un to include to make HTML work the way you expect.&lt;/p&gt;
    &lt;head rend="h2"&gt;Last But Not Least…&lt;/head&gt;
    &lt;p&gt;I know what you’re thinking, I forgot the most important snippet of them all for writing HTML:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div id="root"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
    &lt;p&gt;Lol.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.jim-nielsen.com/2025/dont-forget-these-html-tags/"/><published>2025-10-27T10:01:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719669</id><title>Microsoft needs to open up more about its OpenAI dealings</title><updated>2025-10-27T16:13:15.592000+00:00</updated><content/><link href="https://www.wsj.com/tech/ai/microsoft-needs-to-open-up-more-about-its-openai-dealings-59102de8"/><published>2025-10-27T11:19:27+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719788</id><title>You are how you act</title><updated>2025-10-27T16:13:15.453000+00:00</updated><content>&lt;doc fingerprint="7e0099193ae60539"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;You Are How You Act&lt;/head&gt;
    &lt;p&gt;The modern American self is best defined by two Enlightenment thinkers who never met but have been arguing in our heads ever since.&lt;/p&gt;
    &lt;p&gt;Jean-Jacques Rousseau believed in the primacy of the inner self: a core of goodness constantly betrayed by circumstance. In his view, the world corrupts us. We begin pure and only fail because society, obligation, or expectation pulls us away from who we truly are.&lt;/p&gt;
    &lt;p&gt;Benjamin Franklin saw it differently. For him there was no such thing as a good person or a bad person, only people who do good things and people who do bad things. Virtue was a habit, not an essence.&lt;/p&gt;
    &lt;p&gt;Modern America carries both of these ideas, switching between them whenever convenient. We invoke Rousseau when we need forgiveness: I meant well. We invoke Franklin when we need accountability: Show me what you’ve done. It’s an almost entirely incompatible pair of philosophies that coexist perfectly in practice because they’re both so flattering — one to our intentions, the other to our ambition.&lt;/p&gt;
    &lt;p&gt;But only one of them scales.&lt;/p&gt;
    &lt;p&gt;“Fake it until you make it” is often dismissed as shallow, but it’s closer to Franklin’s truth. Faking it long enough is making it. The repetition of behavior, not the sincerity of belief, is what shapes character. You become the kind of person who does the things you repeatedly do.&lt;/p&gt;
    &lt;p&gt;Rousseau invites endless introspection. Franklin invites progress. The first is about how you feel; the second is about what you build.&lt;/p&gt;
    &lt;p&gt;I find the Franklin model far more useful. Not because it’s truer in some cosmic sense, but because it gives you agency. You can’t always change how you feel, but you can always decide what to do next.&lt;/p&gt;
    &lt;p&gt;“It doesn’t take great men to do things, but it is doing things that make men great.” — Arnold Glasow&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://boz.com/articles/you-are-how-you-act"/><published>2025-10-27T11:35:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719805</id><title>Isomorphic JS/TS Functions Orchestrator</title><updated>2025-10-27T16:13:14.801613+00:00</updated><content>&lt;doc fingerprint="fe75aa29f13788c0"&gt;
  &lt;main&gt;
    &lt;p&gt;This library provides a simple yet powerful, fast, secure, and extensible orchestrator for your JavaScript/Typescript functions, working both in browsers and Node/Bun/Deno, that can be used as base for your own low-code platform. The orchestration logic is defined in a simple JSON and uses the power of JSONata for input/output transformations.&lt;/p&gt;
    &lt;p&gt;Highlights:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Lighweight: The full orchestration logic is ~100 LoC. No dependencies except JSONata.&lt;/item&gt;
      &lt;item&gt;Secure: User code provided as a JSONata expression does not need to be sandboxed.&lt;/item&gt;
      &lt;item&gt;Extensible: You can provide your own state management system or additional transition logic other than JSONata (TODO).&lt;/item&gt;
      &lt;item&gt;Isomorphic: Works in a browser as well as on Node/Bun/Deno.&lt;/item&gt;
      &lt;item&gt;Typescript types available.&lt;/item&gt;
      &lt;item&gt;Open Source (MIT).&lt;/item&gt;
      &lt;item&gt;100% code coverage.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;npm install js-functions-orchestrator&lt;/code&gt;
    &lt;p&gt;Simple combination of two functions outputs as input for a third one:&lt;/p&gt;
    &lt;code&gt;graph TD;
    f1--&amp;gt;Connection_0;
    f2--&amp;gt;Connection_0;
    Connection_0--&amp;gt;f3;
&lt;/code&gt;
    &lt;code&gt;import { Orchestrator } from 'js-functions-orchestrator';

const orchestrator = new Orchestrator({
  functions: {
    fn1: async ()=&amp;gt;'Hello', //sync or async functions
    fn2: async ()=&amp;gt;'World',
    fn3: echo=&amp;gt;echo
  }
});
const runResult = await orchestrator.run({
  connections: [{
    from: ['fn1', 'fn2'],
    transition: '{ "to": [[ $.from[0] &amp;amp; " " &amp;amp; $.from[1] ]] }', //the result of fn1 (the string "Hello") is combined with the the result of fn2 (the string "World") and used as input for fn3
    to: ['fn3']
  }]
});

console.log(runResult);
/* output:
{
  results: { fn3: 'Hello World' },
  variables: { global: {}, locals: [ {} ] }
}
*/&lt;/code&gt;
    &lt;p&gt;A more complex scenario with a loop:&lt;/p&gt;
    &lt;code&gt;graph TD;
    f1--&amp;gt;Connection_0;
    f2--&amp;gt;Connection_0;
    Connection_0--&amp;gt;f3;
    f3--&amp;gt;Connection_1;
    Connection_1--&amp;gt;f3;
    Connection_1--&amp;gt;f4;
&lt;/code&gt;
    &lt;code&gt;import { Orchestrator } from 'js-functions-orchestrator';

const orchestrator = new Orchestrator({
  functions: {
    f1: echo=&amp;gt;echo,
    f2: echo=&amp;gt;echo,
    f3: echo=&amp;gt;echo,
    f4: echo=&amp;gt;echo
  }
});

const runResult = await orchestrator.run({
  //initial set of functions that starts the orchestration with the array of their input parameters
  inits: {
    f1: ['hello'],
    f2: ['world']
  },
  connections: [{
    from: ['f1', 'f2'],
    transition: '{ "to": [[ $.from[0] &amp;amp; " " &amp;amp; $.from[1] ]], "global": {"y": 1} }',
    to: ['f3']
  }, {
    from: ['f3'],
    transition: '($i:=$.local.i; $i:=($i?$i:0)+1; {"global":{"y":($.global.y+1)}, "local":{"i":$i}, "to": [[ $.from[0] &amp;amp; " " &amp;amp; $string($i)], $i&amp;lt;5 ? [[$.from[0]]] : null ] })',
    to: ['f4', 'f3']
  }]
});
console.log(runResult);
/* output:
{
  results: { f4: 'hello world 5' },
  variables: { global: { y: 6 }, locals: [ {}, { i: 5 } ] }
}
*/&lt;/code&gt;
    &lt;p&gt;More examples are available in the index.test.js.&lt;/p&gt;
    &lt;p&gt;Live at Github Pages&lt;/p&gt;
    &lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;script type="module"&amp;gt;
import { Orchestrator } from 'https://esm.run/js-functions-orchestrator';

const orchestrator = new Orchestrator({
  functions: {
    //sync or async functions
    fn1: echo=&amp;gt;echo,
    fn2: async echo=&amp;gt;echo,
    fn3: echo=&amp;gt;echo
  }
});
const runResult = await orchestrator.run({
  inits: {
    fn1: ['Hello'],
    fn2: ['World']
  },
  connections: [{
    from: ['fn1', 'fn2'],
    transition: '{ "to":[[ $.from[0] &amp;amp; " " &amp;amp; $.from[1] ]] }', //the result of fn1 (the string "Hello") is combined with the the result of fn2 (the string "World") and used as input for fn3
    to: ['fn3']
  }]
});
document.body.innerText = JSON.stringify(runResult);
console.log(runResult);
/* output:
{
  results: { fn3: 'Hello World' },
  variables: { global: {}, locals: [ {} ] }
}
*/
&amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;
    &lt;p&gt;The orchestration graph is defined by a list of &lt;code&gt;connections&lt;/code&gt; between JS/TS functions, and optionally an initial set of starting functions with user-defined inputs. A single connection can be &lt;code&gt;from&lt;/code&gt; multiple JS functions &lt;code&gt;to&lt;/code&gt; multiple JS functions and may include the transformation logic for the outputs of the &lt;code&gt;from&lt;/code&gt; JS functions to the inputs of the &lt;code&gt;to&lt;/code&gt; JS functions. After the initial execution of all the functions with user-defined inputs, the different connections loop sequentially and each connection starts only when all the &lt;code&gt;from&lt;/code&gt; JS functions have Promises of results. Once awaited, their results are provided to the transformation logic and the results of the transformation are the inputs for the different &lt;code&gt;to&lt;/code&gt; JS functions, which are then executed.&lt;/p&gt;
    &lt;p&gt;In more details the orchestration logic is the following:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Initialization of starting functions with user-defined inputs&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;The selected functions are executed and their result Promise stored&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Loop all connections&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;If there are available results for each&lt;/p&gt;&lt;code&gt;"from"&lt;/code&gt;function, the connection starts&lt;list rend="ol"&gt;&lt;item&gt;Execute the transition &lt;list rend="ul"&gt;&lt;item&gt;JSONata returning &lt;code&gt;{"to":[…]}&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Available &lt;code&gt;$.from&lt;/code&gt;array,&lt;code&gt;$.global&lt;/code&gt;object, and&lt;code&gt;$.local&lt;/code&gt;object&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;JSONata returning &lt;/item&gt;&lt;item&gt;Store the transition results as inputs for all the &lt;code&gt;"connection.to"&lt;/code&gt;functions&lt;/item&gt;&lt;item&gt;Delete all the &lt;code&gt;"from"&lt;/code&gt;results&lt;/item&gt;&lt;item&gt;Execute all the &lt;code&gt;"to"&lt;/code&gt;functions with the available inputs from the transition&lt;list rend="ul"&gt;&lt;item&gt;If the input is &lt;code&gt;"null"&lt;/code&gt;the function is not executed (loop exit condition)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;If the input is &lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Execute the transition &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Repeat until no more connections can be started&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Note: Incorrectly designed graphs can lead to infinite executions.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Return all the remaining functions and connections results&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;{
    // Functions with user-defined inputs. These functions will start the orchestration. When not defined, initial functions will be identified checking on the connections all the "from" functions that are never connected to a "to".
    "init": {
        // Key is the identifier of the function, value is the array of expected parameters.
        "fn1": [],
        "fn2": []
    },
    // List of existing connections between functions. The orchestrator will loop through the connections until no one can start.
    "connections": [{
        // A connection require a nonempty "from" array, containing the identifiers of the functions that originate the connection. The connection starts only when all the functions in the "from" array have been executed and have a resulting Promise. In this case all the "from" Promises are awaited, and their results are made available in the JSONata of the "transition".
        "from": ["fn1", "fn2"],
        //JSONata expression that must return at least the JSON { "to": [] }. "to" must be an array of the same size of the "connection.to" array, containing an array of input parameters (as array) for the relative "connection.to" function. Additionally it can return "global", and "local", to store respectively globally and locally scoped variables (a global variable is visible in all the connection transition, while a local variable only in the same transition but across multiple execution). If the transition is not provided the output of the "from" functions are provided directly as inputs to the "to" functions. In this case "from" and "to" arrays must be of the same size.
        "transition": "{\"to\": [[ $.from[0] &amp;amp; \" \" &amp;amp; $.from[1] ]]}",
        // List of functions that can consume the output of the "transition" as their inputs. The functions are executed and next connection is checked until no more connections can start. 
        "to": ["fn3"]
    }]
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/damianofalcioni/js-functions-orchestrator"/><published>2025-10-27T11:38:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719927</id><title>Amazon strategised about keeping water use secret</title><updated>2025-10-27T16:13:14.046392+00:00</updated><content>&lt;doc fingerprint="6a4029540eb2dee1"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Company worried higher numbers could damage its reputation&lt;/head&gt;
    &lt;p&gt;Amazon strategised about ways to keep the public in the dark over the true extent of its data centres’ water use, a leaked internal document reveals.&lt;/p&gt;
    &lt;p&gt;The biggest owner of data centres in the world, Amazon dwarfs competitors Microsoft and Google and is planning a huge increase in capacity as part of a push into artificial intelligence. The Seattle-based company operates hundreds of facilities worldwide, with many more planned despite concerns over how much water is being used to cool them.&lt;/p&gt;
    &lt;p&gt;Amazon’s data centres were projected to use 7.7 billion gallons of water a year by 2030, according to the leaked strategy memo, which was circulated within the company in 2022. The $2.4 trillion corporation defends its approach to water usage and has taken steps to improve water efficiency.&lt;/p&gt;
    &lt;p&gt;But while Microsoft and Google regularly publish their water consumption, Amazon has never publicly disclosed how much water its giant server farms consume. In the leaked document, Amazon executives warned that transparency was “a one-way door” and advised keeping its projections confidential, even as they feared inviting accusations of a cover-up.&lt;/p&gt;
    &lt;p&gt;“Amazon hides its water consumption,” was one hypothetical headline the authors warned of.&lt;/p&gt;
    &lt;p&gt;When designing a campaign for water efficiency, Amazon Web Services (AWS), the company’s cloud computing division that oversees its data centres, noted that it would be harder to reach its internal target if its calculations included “secondary” use—water used in generating the electricity to power its data centres, according to the document.&lt;/p&gt;
    &lt;p&gt;Instead, Amazon officials opted to use only the relatively smaller figure of primary use, 7.7 billion gallons, when calculating progress towards its target because of “reputational risk”, fearing bad publicity if the full scale of Amazon’s consumption was revealed, the document shows.&lt;/p&gt;
    &lt;p&gt;“In environmental science, it is standard practice to include both to more accurately capture the true water cost of data centres,” said Shaolei Ren, associate professor of electrical and computer engineering at the University of California, Riverside.&lt;/p&gt;
    &lt;p&gt;Asked about the leaked document, an Amazon spokeswoman, Margaret Callahan, described it as “obsolete” and said it “completely misrepresents Amazon’s current water usage strategy”.&lt;/p&gt;
    &lt;p&gt;She said efficiency savings have already been achieved and pointed out that other companies also don’t count secondary water use.&lt;/p&gt;
    &lt;p&gt;“A document’s existence doesn’t guarantee its accuracy or finality,” she said. “Meetings often reshape documents or reveal flawed findings or claims.”&lt;/p&gt;
    &lt;p&gt;Callahan declined to elaborate on which strategic elements of the document were “obsolete”.&lt;/p&gt;
    &lt;head rend="h2"&gt;Water positive&lt;/head&gt;
    &lt;p&gt;As US tech companies ride the wave of AI investment and pursue greater heights of computational power, Amazon is building new data centres in some of the world’s driest areas, SourceMaterial and The Guardian revealed in April.&lt;/p&gt;
    &lt;p&gt;In November 2022, AWS announced a new sustainability campaign, ‘Water Positive’, with a commitment to “return more water than it uses by 2030”.&lt;/p&gt;
    &lt;p&gt;The leaked document, titled ‘AWS Water Positive Public Launch’ and dated one month before the launch, sets out the campaign’s strategy. Its authors noted that any increase in Amazon’s projected water use could bring bad publicity if the company missed its target.&lt;/p&gt;
    &lt;p&gt;Using a higher estimate by including secondary use “would double the size and budget” for the campaign “without addressing meaningful operational, regulatory or reputational risks”, they wrote, adding that there was “no focus from customers or media” on water used for electricity.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“It’s a one-way door”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;As part of the campaign, Amazon planned water efficiency savings to cut its 7.7 billion-gallon primary consumption to 4.9 billion by 2030 without addressing secondary use. In the meantime, secondary data should only be released if governments demand it, the authors wrote.&lt;/p&gt;
    &lt;p&gt;“We may decide to release water volumes in the future,” the document said. “But it’s a one-way door and we should only do so if the lack of data undermines the programme or is required by regulators.”&lt;/p&gt;
    &lt;p&gt;Callahan said that “like other corporate water positive programs, we focus on our direct water footprint in line with industry best practices to ensure we’re making the most concentrated impact possible.” AWS had cut water use per kilowatt of electricity by 40 per cent since 2021, she said.&lt;/p&gt;
    &lt;p&gt;“It would be better if they could own up to it,” said a current Amazon software developer, who asked to remain anonymous for fear of retaliation. “Even if they said it was a low priority, at least that would be honest.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Hidden consumption?&lt;/head&gt;
    &lt;p&gt;The Water Positive campaign only applies to AWS. The wider Amazon group, including the world’s biggest online retail business, has an overall water consumption that is far higher.&lt;/p&gt;
    &lt;p&gt;In 2021, Amazon as a whole used about 105 billion gallons, as much as 958,000 US households, which would make for a city bigger than Houston, Texas, the document reveals.&lt;/p&gt;
    &lt;p&gt;“The models referenced in this document were preliminary and unvetted,” said Amazon’s Callahan, who declined to provide any alternative figures.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“Amazon hides its water consumption”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The document’s authors advised not to release data about the wider company.&lt;/p&gt;
    &lt;p&gt;But they also warned that selective disclosure could lead to accusations of a cover-up. There was “reputational risk of publicly committing to a goal for only a portion of Amazon’s direct water footprint”, they wrote.&lt;/p&gt;
    &lt;p&gt;They even suggested negative headlines that might result: “Amazon hides its water consumption behind AWS” and “Amazon disappoints, failing to take full responsibility for water” were among the adverse media stories they hoped to avoid.&lt;/p&gt;
    &lt;p&gt;In a sustainability report last month, AWS claimed it had achieved 53 per cent of its Water Positive goal. The division’s plan for reaching the target relies mostly on “water replenishment” projects, some in partnership with Water.org, a non-profit organisation co-founded by actor Matt Damon. The strategy document refers to these projects as “offsets”, describing initiatives like using Amazon computer technology to help utilities prioritise which pipes to fix in order to minimise leaks.&lt;/p&gt;
    &lt;p&gt;But of the $109 million AWS planned to spend on offsets, around half would have been spent anyway, either to meet regulatory requirements or because the projects would help AWS operations by making water more available, the document shows. Experts said this amounted to incomplete accounting.&lt;/p&gt;
    &lt;p&gt;“Regardless of what sort of offsetting or replenishment you do, it doesn’t necessarily nullify the water footprints of your own operations,” said Tyler Farrow, standards manager at the Alliance for Water Stewardship. “Calling your operations water positive or water neutral is misleading.”&lt;/p&gt;
    &lt;p&gt;Amazon’s Callahan said that the “replenishment spending” is voluntary, not a regulatory requirement.&lt;/p&gt;
    &lt;p&gt;“We’ve expanded well beyond what was imagined in the document because it’s the right thing to do for the world and for the communities in which we operate,” she said.&lt;/p&gt;
    &lt;head rend="h2"&gt;‘Obfuscate the footprint’&lt;/head&gt;
    &lt;p&gt;Amazon is also engineering industry standards to downplay its water use and avert scrutiny, said Nathan Wangusi, a former water sustainability manager at the company.&lt;/p&gt;
    &lt;p&gt;The corporation has funded efforts by non-profit groups The Nature Conservancy and World Resources Institute, alongside LimnoTech, a consultancy, “to create a globally-accepted methodology for quantifying the benefit of watershed restoration projects”.&lt;/p&gt;
    &lt;p&gt;Responding to questions from SourceMaterial, all three organisations defended their integrity and independence and said that Amazon had no undue influence on any methodologies they had created.&lt;/p&gt;
    &lt;p&gt;“They spend a lot of time creating methodologies that are used to obfuscate the water footprint,” Wangusi said, referring to Amazon.&lt;/p&gt;
    &lt;p&gt;Callahan said these efforts were “standard practice” and that Amazon’s “customers expect us to hold ourselves accountable to credible guidance and best practices”.&lt;/p&gt;
    &lt;p&gt;As well as choosing not to disclose water use from electricity generation, Amazon has estimated its larger “indirect” water footprint, the document shows. This extra usage, which falls under a classification known as “scope 3”, includes water for production and construction—in Amazon’s case, mostly irrigation of cotton plantations supplying its fashion brands, and vegetables for its grocery arm, Amazon Fresh.&lt;/p&gt;
    &lt;p&gt;Here too, Amazon decided to keep its consumption confidential, even though “indirect water use represents roughly 90 per cent of Amazon’s total water footprint”, according to the document.&lt;/p&gt;
    &lt;p&gt;AWS avoided establishing targets for indirect water use because that figure would be “much more significant for the rest of Amazon, especially in the agricultural supply chain, and the team does not want to establish a standard for addressing scope 3 water use that the rest of Amazon would need to follow, given the larger resource implications”, the authors wrote.&lt;/p&gt;
    &lt;p&gt;“You don’t need to obscure or obfuscate,” said Wangusi, who believes he was “hounded out” of Amazon for criticising the company’s approach. (Amazon declined to comment on his departure.)&lt;/p&gt;
    &lt;p&gt;“It doesn’t make you more profitable,” he said. “It makes you less trustworthy.”&lt;/p&gt;
    &lt;p&gt;Headline picture: StockPhotoAstur / Shutterstock.com&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.source-material.org/amazon-leak-reveals-true-data-centres-water-usage-secret-plan/"/><published>2025-10-27T11:53:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45719996</id><title>Artifact (YC W25) is hiring engineers in NYC to build modern ECAD</title><updated>2025-10-27T16:13:13.740662+00:00</updated><content>&lt;doc fingerprint="fd2f3004b942e881"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Artifact is a CAD tool to collaboratively design electrical systems for complex hardware projects.&lt;/p&gt;
      &lt;p&gt;People are using Artifact to design their supersonic jets, reusable satellites, marine robots, and autonomous drones.&lt;/p&gt;
      &lt;p&gt;We're looking for full-stack software engineers to join us at our office in Manhattan - to help design and build how hardware teams do their electrical systems engineering.&lt;/p&gt;
      &lt;p&gt;Learn more here: https://www.artifact.engineer/&lt;/p&gt;
      &lt;p&gt;If you're interested, shoot me an email with your resume:&lt;/p&gt;
      &lt;p&gt;- Antony antony@artifact.engineer&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45719996"/><published>2025-10-27T12:00:30+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45720345</id><title>Pre-emptive Z80 multitasking explainer</title><updated>2025-10-27T16:13:13.263145+00:00</updated><content>&lt;doc fingerprint="3f7442da030e46c4"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;Couldn't load subscription status. Retry&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/bchiha/Ready-Z80/tree/main/29-Multitasking"/><published>2025-10-27T12:39:52+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721410</id><title>More big companies bet they can still grow without hiring</title><updated>2025-10-27T16:13:13.095494+00:00</updated><content/><link href="https://www.wsj.com/business/companies-hiring-jobs-ai-9ef675b6"/><published>2025-10-27T14:30:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721682</id><title>Microsoft in court for allegedly misleading Australians over 365 subscriptions</title><updated>2025-10-27T16:13:11.650884+00:00</updated><content>&lt;doc fingerprint="ef5109103496c5d3"&gt;
  &lt;main&gt;
    &lt;p&gt;The ACCC has commenced proceedings in the Federal Court against Microsoft Australia and its parent company Microsoft Corporation for allegedly misleading approximately 2.7 million Australian customers when communicating subscription options and price increases, after it integrated its AI assistant, Copilot, into Microsoft 365 plans.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges that since 31 October 2024, Microsoft has told subscribers of Microsoft 365 Personal and Family plans with auto-renewal enabled that to maintain their subscription they must accept the integration of Copilot and pay higher prices for their plan, or, alternatively, cancel their subscription.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges this information provided to subscribers was false or misleading because there was an undisclosed third option, the Microsoft 365 Personal or Family Classic plans, which allowed subscribers to retain the features of their existing plan, without Copilot, at the previous lower price.&lt;/p&gt;
    &lt;p&gt;Microsoft’s communication with subscribers did not refer to the existence of the “Classic” plans, and the only way subscribers could access them was to begin the process of cancelling their subscription. This involved navigating to the subscriptions section of their Microsoft account and selecting “Cancel subscription”. It was only on the following page that subscribers were given the option to instead move to the Classic plan. See a screenshot of the cancellation page revealing the Classic plan.&lt;/p&gt;
    &lt;p&gt;“Following a detailed investigation, we will allege in Court that Microsoft deliberately omitted reference to the Classic plans in its communications and concealed their existence until after subscribers initiated the cancellation process to increase the number of consumers on more expensive Copilot-integrated plans,” ACCC Chair Gina Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“The Microsoft Office apps included in 365 subscriptions are essential in many people’s lives and given there are limited substitutes to the bundled package, cancelling the subscription is a decision many would not make lightly.”&lt;/p&gt;
    &lt;p&gt;“We’re concerned that Microsoft’s communications denied its customers the opportunity to make informed decisions about their subscription options, which included the possibility of retaining all the features of their existing plan without Copilot and at the lower price,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“We believe many Microsoft 365 customers would have opted for the Classic plan had they been aware of all the available options.”&lt;/p&gt;
    &lt;p&gt;Following the integration of Copilot, the annual subscription price of the Microsoft 365 Personal plan increased by 45 per cent from $109 to $159. The annual subscription price for the Microsoft 365 Family plan increased by 29 per cent from $139 to $179.&lt;/p&gt;
    &lt;p&gt;Microsoft sent two emails and published a blog post to inform auto-renewing subscribers (as of 31 October 2024) about the Copilot integration and the impending price increase that would apply at their next renewal. These three pieces of communication are central to the ACCC’s case.&lt;/p&gt;
    &lt;p&gt;“We allege that Microsoft’s two emails to existing subscribers and the blog post were false or misleading as they conveyed that consumers had to accept the more expensive Copilot-integrated plans, and that the only other option was to cancel,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;“All businesses need to provide accurate information about their services and prices. Failure to do so risks breaching the Australian Consumer Law,” Ms Cass-Gottlieb said.&lt;/p&gt;
    &lt;p&gt;In establishing its investigation into this matter, the ACCC drew on a significant number of consumer reports, as well as commentary in online forums such as Reddit. Information provided by consumers to the ACCC’s Infocentre was critical to alerting the ACCC to the alleged conduct, particularly in identifying the availability of the Classic plan through subscribers’ cancellation flows.&lt;/p&gt;
    &lt;p&gt;The ACCC is seeking orders including penalties, injunctions, declarations, consumer redress, and costs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Consumer response&lt;/head&gt;
    &lt;p&gt;The ACCC believes the millions of Australian consumers who were allegedly misled by Microsoft about the availability of the Classic plan may have suffered economic harm through the automatic renewal of their subscription with Copilot integration at a higher price.&lt;/p&gt;
    &lt;p&gt;The ACCC is seeking consumer redress in this case for Microsoft 365 Personal and Family subscribers affected by the alleged conduct.&lt;/p&gt;
    &lt;p&gt;Existing Microsoft 365 Personal and Family subscribers who have not had their subscription renewed since 8 July 2025 and would like to revert to their previous plan may be able to select the cancel option and follow the steps in the cancellation process until the Classic plan is offered. However, the ACCC notes that the subscription options and prices offered are entirely in Microsoft’s control and could be subject to change at any time.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example timeline for a subscriber on a Microsoft 365 Personal plan&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;On 19 April 2024, a consumer purchased an annual Microsoft 365 Personal subscription for $109 and enabled auto-renewal for one year’s time.&lt;/item&gt;
      &lt;item&gt;On 31 October 2024, Microsoft published a blog post in which it stated: &lt;list rend="ul"&gt;&lt;item&gt;“To reflect the value we’ve added over the past decade and enable us to deliver new innovations for years to come, we’re increasing the prices of Microsoft 365 Personal and Family. The price increase will apply to existing subscribers upon their next renewal.”&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;On 9 January 2025, the consumer received an email informing them that AI features were being added to their plan and the price of the annual subscription would increase from $109 to $159 starting on 19 April 2025. See a screenshot of the first email sent to the consumers about the price increase.&lt;/item&gt;
      &lt;item&gt;On 13 April 2025, 7 days before their renewal date, the consumer received a second email in which Microsoft stated: &lt;list rend="ul"&gt;&lt;item&gt;“We want to let you know about a change to the amount of your next payment. Unless you cancel two days before Saturday, April 19 2025, we’ll charge AUD 159.00 including taxes every year… We’ll tell you if this price ever changes. Cancel any time to stop future charges or change how you pay by managing your subscription in your Microsoft account.”&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;On 19 April 2025, the consumer's subscription was automatically renewed at the increased price of $159. The consumer was not aware that switching to the Classic plan at the existing subscription price of $109 was possible.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Screenshots showing the communications with subscribers&lt;/head&gt;
    &lt;head rend="h3"&gt;Email sent to subscribers informing them of the Copilot integration and price increase&lt;/head&gt;
    &lt;head rend="h3"&gt;The page late in the cancellation process revealing the Classic plan&lt;/head&gt;
    &lt;p&gt;A subscriber only saw this screen once they had navigated to the subscriptions section of their Microsoft account, selected “Cancel subscription”, and continued with the cancellation process.&lt;/p&gt;
    &lt;head rend="h2"&gt;Background&lt;/head&gt;
    &lt;p&gt;Microsoft Pty Ltd (Microsoft AU) is an Australian proprietary company, and a wholly owned subsidiary of the Microsoft Corporation (Microsoft US), a US-based technology conglomerate. Microsoft AU is the supplier of Microsoft’s proprietary software in Australia, including Microsoft 365 plans.&lt;/p&gt;
    &lt;p&gt;The ACCC alleges Microsoft US was responsible for preparing and publishing the communications to Australian Microsoft 365 subscribers containing the misrepresentations alleged by the ACCC. The ACCC alleges that Microsoft AU adopted the communications as the seller of Microsoft 365 subscriptions to Australian consumers.&lt;/p&gt;
    &lt;p&gt;The ACCC’s case only relates to Microsoft 365 Personal and Family plans, which are designed for home use. The case does not involve Microsoft 365 subscriptions for business or enterprise.&lt;/p&gt;
    &lt;p&gt;Microsoft 365 Personal and Family offerings are supplied on a monthly or annual subscription basis, and are comprised of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;software products, such as Word, Excel, PowerPoint and OneNote&lt;/item&gt;
      &lt;item&gt;collaboration and communication applications like Outlook, Teams and SharePoint&lt;/item&gt;
      &lt;item&gt;cloud-based services through OneDrive.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Microsoft launched Copilot as its consumer-facing generative AI product in 2023. Copilot was integrated into Microsoft 365 Personal and Family subscriptions in Australia on 31 October 2024.&lt;/p&gt;
    &lt;p&gt;In January 2025, the Copilot integration was rolled out across Microsoft 365 worldwide, with varying subscription price increases applying to each jurisdiction.&lt;/p&gt;
    &lt;p&gt;Competition, product safety, consumer and fair trading issues in the digital economy is a current ACCC compliance and enforcement priority.&lt;/p&gt;
    &lt;head rend="h3"&gt;Maximum penalties&lt;/head&gt;
    &lt;p&gt;For corporations, the maximum penalty for each breach of the Australian Consumer Law is the greater of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;$50 million&lt;/item&gt;
      &lt;item&gt;three times the total benefits that have been obtained and are reasonably attributable, or&lt;/item&gt;
      &lt;item&gt;if the total value of the benefits cannot be determined, 30 per cent of the corporation’s adjusted turnover during the breach turnover period.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Any penalty that might apply to this conduct is a matter for the Court to determine and would depend on the Court’s findings. The ACCC will not comment on what penalties the Court may impose.&lt;/p&gt;
    &lt;head rend="h3"&gt;Concise statement&lt;/head&gt;
    &lt;p&gt;ACCC v Microsoft Concise Statement 27 October 2025 ( PDF 1.6 MB )&lt;/p&gt;
    &lt;p&gt;This document contains the ACCC’s initiating court documents in relation to this matter. We will not be uploading further documents in the event these initial documents are subsequently amended.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.accc.gov.au/media-release/microsoft-in-court-for-allegedly-misleading-millions-of-australians-over-microsoft-365-subscriptions"/><published>2025-10-27T14:54:14+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721801</id><title>Pyrex catalog from from 1938 with hand-drawn lab glassware [pdf]</title><updated>2025-10-27T16:13:11.079449+00:00</updated><content/><link href="https://exhibitdb.cmog.org/opacimages/Images/Pyrex/Rakow_1000132877.pdf"/><published>2025-10-27T15:04:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45721904</id><title>PSF has withdrawn $1.5M proposal to US Government grant program</title><updated>2025-10-27T16:13:10.881680+00:00</updated><content>&lt;doc fingerprint="b28a117194a3d7e3"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;In January 2025, the PSF submitted a proposal to the US government National Science Foundation under the Safety, Security, and Privacy of Open Source Ecosystems program to address structural vulnerabilities in Python and PyPI. It was the PSF’s first time applying for government funding, and navigating the intensive process was a steep learning curve for our small team to climb. Seth Larson, PSF Security Developer in Residence, serving as Principal Investigator (PI) with Loren Crary, PSF Deputy Executive Director, as co-PI, led the multi-round proposal writing process as well as the months-long vetting process. We invested our time and effort because we felt the PSF’s work is a strong fit for the program and that the benefit to the community if our proposal were accepted was considerable. &lt;/p&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;p&gt;We were honored when, after many months of work, our proposal was recommended for funding, particularly as only &lt;/p&gt;36% &lt;p&gt;of new NSF grant applicants are successful on their first attempt. We became concerned, however, when we were presented with the terms and conditions we would be required to agree to if we accepted the grant. These terms included affirming the statement that we “do not, and will not during the term of this financial assistance award, operate any programs that advance or promote DEI, or discriminatory equity ideology in violation of Federal anti-discrimination laws.” This restriction would apply not only to the security work directly funded by the grant, &lt;/p&gt;but to any and all activity of the PSF as a whole&lt;p&gt;. Further, violation of this term gave the NSF the right to “claw back” previously approved and transferred funds. This would create a situation where money we’d already spent could be taken back, which would be an enormous, open-ended financial risk. &lt;/p&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;p&gt;Diversity, equity, and inclusion are core to the PSF’s values, as committed to in our &lt;/p&gt;mission statement&lt;p&gt;: &lt;/p&gt;&lt;/div&gt;
      &lt;quote&gt;
        &lt;div&gt;
          &lt;p&gt;The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/quote&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;p&gt;Given the value of the grant to the community and the PSF, we did our utmost to get clarity on the terms and to find a way to move forward in concert with our values. We consulted our NSF contacts and reviewed decisions made by other organizations in similar circumstances, particularly &lt;/p&gt;The Carpentries&lt;p&gt;. &lt;/p&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;In the end, however, the PSF simply can’t agree to a statement that we won’t operate any programs that “advance or promote” diversity, equity, and inclusion, as it would be a betrayal of our mission and our community. &lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;We’re disappointed to have been put in the position where we had to make this decision, because we believe our proposed project would offer invaluable advances to the Python and greater open source community, protecting millions of PyPI users from attempted supply-chain attacks. The proposed project would create new tools for automated proactive review of all packages uploaded to PyPI, rather than the current process of reactive-only review. These novel tools would rely on capability analysis, designed based on a dataset of known malware. Beyond just protecting PyPI users, the outputs of this work could be transferable for all open source software package registries, such as NPM and Crates.io, improving security across multiple open source ecosystems.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;In addition to the security benefits, the grant funds would have made a big difference to the PSF’s budget. The PSF is a relatively small organization, operating with an annual budget of around $5 million per year, with a staff of just 14. $1.5 million over two years would have been quite a lot of money for us, and easily the largest grant we’d ever received. Ultimately, however, the value of the work and the size of the grant were not more important than practicing our values and retaining the freedom to support every part of our community. The PSF Board voted unanimously to withdraw our application. &lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;Giving up the NSF grant opportunity—along with inflation, lower sponsorship, economic pressure in the tech sector, and global/local uncertainty and conflict—means the PSF needs financial support now more than ever. We are incredibly grateful for any help you can offer. If you're already a PSF member or regular donor, you have our deep appreciation, and we urge you to share your story about why you support the PSF. Your stories make all the difference in spreading awareness about the mission and work of the PSF. &lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;list style="text-align: left;" rend="ul"&gt;
          &lt;item&gt;Become a Member: When you sign up as a Supporting Member of the PSF, you become a part of the PSF. You’re eligible to vote in PSF elections, using your voice to guide our future direction, and you help us sustain what we do with your annual support.&lt;/item&gt;
          &lt;item&gt;Donate: Your donation makes it possible to continue our work supporting Python and its community, year after year.&lt;/item&gt;
          &lt;item&gt;Sponsor: If your company uses Python and isn’t yet a sponsor, send them our sponsorship page or reach out to sponsors@python.org today. The PSF is ever grateful for our sponsors, past and current, and we do everything we can to make their sponsorships beneficial and rewarding.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://pyfound.blogspot.com/2025/10/NSF-funding-statement.html"/><published>2025-10-27T15:12:08+00:00</published></entry></feed>